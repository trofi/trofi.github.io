<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>trofi - All posts</title>
    <link href="http://trofi.github.io/feed/atom.xml" rel="self" />
    <link href="http://trofi.github.io" />
    <id>http://trofi.github.io/feed/atom.xml</id>
    <author>
        <name>Sergei Trofimovich</name>
        <email>slyich@gmail.com</email>
    </author>
    <updated>2022-09-25T00:00:00Z</updated>
    <entry>
    <title>GNU make amends rules with multiple targets</title>
    <link href="http://trofi.github.io/posts/260-make-multiple-targets.html" />
    <id>http://trofi.github.io/posts/260-make-multiple-targets.html</id>
    <published>2022-09-25T00:00:00Z</published>
    <updated>2022-09-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>Starting from <code>GNU make-4.4</code> rules with multiple targets that include
commands will trigger if any of the targets does not exist. This will
require a few projects to adapt. Older versions of <code>ghc</code> are affected.</p>
<p>Typical example would need to adapt from something like:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.c %.gen.h %.gen.not-always-present:</span><span class="dt"> %.src</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CMD</span><span class="ch">)</span> ...</span></code></pre></div>
<p>to something like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.c %.gen.h:</span><span class="dt"> %.src</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CMD</span><span class="ch">)</span> ...</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.not-always-present:</span><span class="dt"> %.gen.c</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># generated by previous rule or not generated at all</span></span></code></pre></div>
<p>See <a href="https://savannah.gnu.org/bugs/index.php?63098" class="uri">https://savannah.gnu.org/bugs/index.php?63098</a> for other options.</p>
<h2 id="more-words">More words</h2>
<p><code>Makefile</code> usually defines a bunch of prerequisites per single target:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> foo.c foo.h</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LDLIBS</span><span class="ch">)</span> foo.c -o foo</span></code></pre></div>
<p>For dependency-only rules without commands it’s customary to specify
multiple targets:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># multiple targets</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo bar:</span><span class="dt"> foo.h</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co"># equivalent to</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">#   foo: foo.h</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">#   bar: foo.h</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>	touch foo</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>	touch bar</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.h:</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>	touch foo.h</span></code></pre></div>
<p>In all the cases above the behaviour is straightforward: if <code>foo.h</code>
changes then <code>foo</code> and <code>bar</code> are outdated and have to be rebuilt (if
rebuild is requested). And specifically <code>make foo</code> should cause only
<code>foo</code> rebuild. Example session:</p>
<pre><code>$ make
touch foo.h
touch foo
touch bar

$ touch foo.h
$ make foo
touch foo</code></pre>
<p>No surprise here: in a second run <code>bar</code> is not rebuilt and stays
outdated (we did not ask for it’s update). And <code>foo</code> is rebuilt
as expected.</p>
<p>In <code>GNU make</code> before <code>4.3.90</code> the same rule applied to rules with
commands as well:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dv">foo bar:</span><span class="dt"> foo.h</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>	touch foo bar</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.h:</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>	touch foo.h</span></code></pre></div>
<p>Note that the command for <code>foo bar: foo.h</code> rule always builds both
targets.</p>
<p>Let’s try to delete <code>bar</code> and ask <code>foo</code> to be rebuilt. Would <code>foo</code> get
rebuilt? Would <code>bar</code> get rebuilt? Here is the answer:</p>
<pre><code>$ make-4.3
touch foo.h
touch foo bar

$ rm bar
$ make-4.3 foo
make: 'foo' is up to date.</code></pre>
<p>Looks exactly the same as above: <code>foo</code> does not require a refresh.</p>
<p>Now let’s try <code>make-4.3.90</code>:</p>
<pre><code>$ rm -f foo bar foo.h

$ make-4.3.90
touch foo bar

$ rm bar
$ make-4.3.90 foo
touch foo bar</code></pre>
<p>That’s a different behaviour: absence of <code>bar</code> triggers both <code>foo</code>
and <code>bar</code> rebuilds. This behaviour change is intentional and is added in
<a href="https://savannah.gnu.org/bugs/?62809" class="uri">https://savannah.gnu.org/bugs/?62809</a>.</p>
<h2 id="the-impact">The impact</h2>
<p>So far it looks benign: we’ll build just a bit more than we used to
in some incremental builds. Fresh-from-zero builds should not be
affected, right? Right?</p>
<p>I installed fresh <code>make-4.3.90</code> and attempted to build the world.</p>
<h3 id="opensp-case">opensp case</h3>
<p><code>opensp-1.5.2</code> being an autotools package provides tarballs with pre-generated
files as part of the release:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.h %.cxx %.rc:</span><span class="dt"> %.msg</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>	[ ! -f <span class="ch">$(</span><span class="dt">top_srcdir</span><span class="ch">)</span>/msggen.pl ] || <span class="ch">$(</span><span class="dt">PERL</span><span class="ch">)</span> -w <span class="ch">$(</span><span class="dt">top_srcdir</span><span class="ch">)</span>/msggen.pl <span class="ch">$(</span><span class="dt">MSGGENFLAGS</span><span class="ch">)</span> <span class="ch">$&lt;</span></span></code></pre></div>
<p>All <code>.h</code>, <code>.cxx</code> and <code>.rc</code> files are already present in
<code>OpenSP-1.5.2.tar.gz</code>. User never has to run <code>msggen.pl</code> script to get
<code>opensp</code> built.</p>
<p>Except that <code>msggen.pl</code> does not always produce <code>.cxx</code> files. It does so
only for <code>.msg</code> files that have a <code>!cxx</code> directive. I noticed it only
because <code>msggen.pl</code> does not really work on any modern <code>perl</code> version
(and also because <code>nix</code> does not expose <code>perl</code> to build sandbox by default).
Fun fact: <code>OpenSP-1.5.2.tar.gz</code> was released in 2007.</p>
<p>The build fails on <code>make-4.3.90</code> as:</p>
<pre><code>$ make-4.3.90
make[2]: Entering directory '/build/OpenSP-1.5.2/lib'
[ ! -f ../msggen.pl ] || perl -w ../msggen.pl -l libModule PosixStorageMessages.msg
bash: line 1: perl: command not found
make[2]: *** [Makefile:778: PosixStorageMessages.h] Error 127 shuffle=1663959693</code></pre>
<p>The <a href="https://sourceforge.net/p/openjade/bugs/151/">proposed fix</a> makes
<code>.cxx</code> as optional by splitting out <code>.cxx</code> into a separate rule:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/lib/Makefile.am</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/lib/Makefile.am</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -125,5 +125,7 @@ SUFFIXES = .msg .m4 .rc</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> .m4.cxx:</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a> 	$(PERL) $(top_srcdir)/instmac.pl $&lt; &gt;$@</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="st">-%.h %.cxx %.rc: %.msg</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="va">+%.h %.rc: %.msg</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>	[ ! -f $(top_srcdir)/msggen.pl ] || $(PERL) -w $(top_srcdir)/msggen.pl $(MSGGENFLAGS) $&lt;</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="va">+%.cxx: %.rc</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="va">+	: # built by perl rule above</span></span></code></pre></div>
<p>Here we move <code>.cxx</code> part as a separate no-op target to avoid <code>perl</code>
build rule from triggering. Similar fix had to be applied to a few
more <code>Makefile.am</code> files in <code>opensp</code> tree.</p>
<p>The failure Does not look bad: it was easy to diagnose and workaround.</p>
<h3 id="ghc-case">ghc case</h3>
<p><code>ghc</code> was another heavy <code>GNU make</code> user until
<a href="https://gitlab.haskell.org/ghc/ghc/-/commit/6fd9b0a1c6b076ef1977db1a2ce8b9505b9a3254">recenty</a>.
Many distributions still package older <code>ghc</code> versions and still use
<code>GNU make</code> based build system. <code>ghc</code> was broken by <code>make-4.3.90</code> as:</p>
<pre><code>$ ./configure
$ make-4.3.90
...
ghc&gt;   HSC2HS libraries/hpc/dist-boot/build/Trace/Hpc/Reflect.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Constants.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable/Types.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTableProf.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Utils.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/FFI.hs
...
ghc&gt;   HSC2HS libraries/hpc/dist-boot/build/Trace/Hpc/Reflect.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Constants.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable/Types.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTableProf.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Utils.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/FFI.hs
...
ghc&gt; ghc.mk:100: *** Make has restarted itself 2 times; is there a makefile bug? See https://gitlab.haskell.org/ghc/ghc/wikis/building/troubleshooting#make-has-restarted-itself-3-times-is-there-a-makefile-bug for details.  Stop.
ghc&gt; make: *** [Makefile:126: all] Error 2 shuffle=1664105902</code></pre>
<p>Looks simple, right? No, it does not. <code>ghc</code>’s build system detected
infinite rebuild loop and bailed out. Note how <code>Reflect.hs</code> gets
generated at elast twice with <code>HSC2HS</code> haskell code generator.</p>
<p>To explain it’s mechanics I’ll build a contrived example:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>	touch foo</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dv">%.d:</span><span class="dt"> %.c</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>	echo <span class="st">&quot;foo.d: foo.c&quot;</span>  &gt; foo.d</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>	echo <span class="st">&quot;foo: foo.d foo.c&quot;</span> &gt;&gt; foo.d</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="dv">%.c:</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>	touch <span class="ch">$*</span>.c</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="kw">-include</span> foo.d</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="ot">.PRECIOUS:</span><span class="dt"> foo.c</span></span></code></pre></div>
<p>Here we dynamically generate a part of a <code>Makefile</code> by generating
<code>foo.d</code> file and by including it via <code>-include foo.d</code>. Leading
minus(<code>-</code>) ignores some error conditions when including files.</p>
<p>Let’s try it:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3.90
touch foo.c
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
touch foo</code></pre>
<p>Note that initially <code>foo</code> does not contain any dependencies.
<code>GNU make</code> has to build <code>foo.d</code> part first to see the rest of the
dependencies.</p>
<p>Interestingly <code>GNU make</code> has to re-executes itself after <code>foo.d</code> is
availble. We can see it in debug (<code>-d</code>) mode by looking up
<code>Re-executing</code> lines:</p>
<pre><code>$ rm -f foo* &amp;&amp; LANG=C make-4.3.90 -d |&amp; grep Re-
Re-executing[1]: make -d</code></pre>
<p>Now let’s extend our <code>foo.c</code> rule (<code>foo.d</code>’s dependency) to include an
unrelated and non-existent <code>foo.h</code> file as an output target:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/makefile</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/makefile</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -5,8 +5,9 @@ foo:</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a> 	echo &quot;foo.d: foo.c&quot;  &gt; foo.d</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a> 	echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="st">-%.c:</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="va">+%.c %.h:</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a> 	touch $*.c</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="va">+	# missing 'touch $*.h'</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a> -include foo.d</span></code></pre></div>
<p>Running:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3.90
touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
...</code></pre>
<p><code>GNU make</code> fell into an infinite loop. Here missing <code>foo.h</code> file triggers
<code>make</code> to always regenerate <code>foo.d</code> on each re-execution. Regenrated
<code>foo.d</code> requires another re-execution. We get the loop. Previous
<code>make-4.3</code> version did not exhibit this behaviour:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3
touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
touch foo</code></pre>
<p>Now back to <code>ghc</code>. It took me some time to read through <code>make -d</code> output
to find the offending rule. The following fix was enough to fix <code>ghc</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/rules/hs-suffix-rules-srcdir.mk</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/rules/hs-suffix-rules-srcdir.mk</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -33,9 +33,12 @@ $1/$2/build/%.hs : $1/$2/build/%.y | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a> $1/$2/build/%.hs : $1/$3/%.x | $$$$(dir $$$$@)/.</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a> 	$$(call cmd,ALEX) $$($1_$2_ALL_ALEX_OPTS) $$&lt; -o $$@</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="st">-$1/$2/build/%_hsc.c $1/$2/build/%_hsc.h $1/$2/build/%.hs : $1/$3/%.hsc $$$$(hsc2hs_INPLACE) | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="va">+$1/$2/build/%.hs : $1/$3/%.hsc $$$$(hsc2hs_INPLACE) | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a> 	$$(call cmd,hsc2hs_INPLACE) $$($1_$2_ALL_HSC2HS_OPTS) $$&lt; -o $$@</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="va">+$1/$2/build/%_hsc.c $1/$2/build/%_hsc.h: $1/$2/build/%.hs</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a><span class="va">+		: # rely on previous rule to build targets</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a> # Now the rules for hs-boot files.</span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a> $1/$2/build/%.hs-boot : $1/$3/%.hs-boot | $$$$(dir $$$$@)/.</span></code></pre></div>
<p><code>hsc2hs</code> does not always emit <code>C</code> stub part. The fix is almost identical
to <code>opensp</code> case: we split out optional output into a separate rule.</p>
<p>As <code>ghc</code> dropped <code>GNU make</code>-based build system I did not try to upstream
the change. Downstreams would have to carry something similar for older
<code>ghc</code> versions they ship.</p>
<h3 id="dtc-case">dtc case</h3>
<p><code>dtc</code> also happens to use <code>GNU make</code>-based build system. It’s <code>Makefile</code>
is a lot smaller than <code>ghc</code>’s one. The symptom was very similar to our
contrived example:</p>
<pre><code>$ make-4.3.90
...
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
...</code></pre>
<p>It took me a few hours to notice that <code>dtc</code> build was stuck.</p>
<p>The cause of cycle was again <code>make</code> re-execution caused by a missing
file in <code>bison</code> rule with multiple targets. <code>bison</code> rule contained
output that is never used by anything. The fix is trivial:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -384,4 +384,4 @@ clean: libfdt_clean pylibfdt_clean tests_clean</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="st">-%.tab.c %.tab.h %.output: %.y</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="va">+%.tab.c %.tab.h: %.y</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a> 	@$(VECHO) BISON $@</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a> 	$(BISON) -b $(basename $(basename $@)) -d $&lt;</span></code></pre></div>
<p>While at it I added a guard against infinite re-execution similar to
<code>ghc</code>’s guard:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -389,3 +389,3 @@ clean: libfdt_clean pylibfdt_clean tests_clean</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="va">+ifeq ($(MAKE_RESTARTS),10)</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="va">+$(error &quot;Make re-executed itself $(MAKE_RESTARTS) times. Infinite recursion?&quot;)</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="va">+endif</span></span></code></pre></div>
<p><code>GNU make</code> provides <code>$(MAKE_RESTARTS)</code> variable to detect <code>make</code> restarts.</p>
<p>Both fixes are proposed upatream as <a href="https://github.com/dgibson/dtc/pull/73" class="uri">https://github.com/dgibson/dtc/pull/73</a>.</p>
<h2 id="parting-words">Parting words</h2>
<p>Rules with multiple targets are tricky and fun. <code>GNU make-4.4</code> will be a
bit more eager at rebuilding all of the targets if prerequisite changes.
This will expose bugs in a few programs. They shoud be easy to adapt.
Otherwise keeping an older version of <code>GNU make</code> in parallel to the
newer one should be a reasonable workaround as well.</p>
<p>So far only <code>opensp</code>, <code>ghc</code> and <code>dtc</code> needed fixing.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 25, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Shrinking closure example</title>
    <link href="http://trofi.github.io/posts/259-shrinking-closure-example.html" />
    <id>http://trofi.github.io/posts/259-shrinking-closure-example.html</id>
    <published>2022-09-24T00:00:00Z</published>
    <updated>2022-09-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Sometimes I check <code>nixpkgs</code> packages I use for unexpected
development-only runtime dependencies. I do it mostly to shrink download
sizes for things I update frequently.</p>
<p>I developed a few hacks to find things quickly. The primary hack is to
grep dependency graph of an executable-only package (say, a game) for
<code>-dev</code> packages in it’s runtime closure. Here is an example for <code>fheroes2</code>
package:</p>
<pre><code>$ nix-store -q --graph $(nix-build -A fheroes2) | grep -P -- '-dev.*-&gt;' | grep -vP -- '-&gt;.*-dev'
&quot;4bdanp07rax5mazgjzgdwx61sf6p01qc-SDL2-2.0.22-dev&quot; -&gt; &quot;nj09vl0pzc41sn4wh7q2vlppmkv3dhiy-SDL2_mixer-2.0.4&quot; [color = &quot;burlywood&quot;];
...</code></pre>
<p>Here we see that <code>SDL2.dev</code> package is pulled into <code>SDL2_mixer.out</code>
runtime closure. It’s a bug.</p>
<p>More interesting hack is to grep full runtime closure for files that
are cleary development-only: <code>C</code> ehader files, <code>pkg-config</code> files and so
on. Here is a <code>grep</code> example again for <code>fheroes2</code>:</p>
<pre><code>$ find $(nix path-info -r $(nix-build -A fheroes2)) | grep -P [.]h$ | shuf | unnix | nl | tail -n 2
  1301  /&lt;&lt;NIX&gt;&gt;/libnfnetlink-1.0.2/include/libnfnetlink/libnfnetlink.h
  1302  /&lt;&lt;NIX&gt;&gt;/xorgproto-2021.5/include/X11/extensions/dpmsproto.h</code></pre>
<p>Here we see that <code>xorgproto</code> (header-only package) and <code>libnfnetlink</code>
(package without a separate <code>.dev</code> output) pull in development headers
into our previous game. Both are probably unintended and worth a fix.</p>
<p>To get rid of the dependencies I usually add <code>dev</code> outputs to libraries
without <code>dev</code> output like a recent
<a href="https://github.com/NixOS/nixpkgs/pull/191775/commits/d04acb8a96c2ae37dd4ff58db65dedfab8d3d79f">libfido2 example</a>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/libfido2/default.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/libfido2/default.nix</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -29,6 +29,8 @@ stdenv.mkDerivation rec {</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>   propagatedBuildInputs = [ openssl ];</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  outputs = [ &quot;out&quot; &quot;dev&quot; &quot;man&quot; ];</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>   cmakeFlags = [</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>     &quot;-DUDEV_RULES_DIR=${placeholder &quot;out&quot;}/etc/udev/rules.d&quot;</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>     &quot;-DCMAKE_INSTALL_LIBDIR=lib&quot;</span></code></pre></div>
<p>Sometime I have to explicitly change the package to not retain
build-only dependencies. Here is a recent
<a href="https://github.com/NixOS/nixpkgs/pull/191810/commits/02ba9a3d60c6c45e1df45714a2a3db714eed9c18">freedroidrpg example</a>:</p>
<pre><code>Do not embed paths to build-only depends (-I...SDL2-dev and friends)
into savefile lua comments.
--- a/src/savestruct_internal.c
+++ b/src/savestruct_internal.c
@@ -486,8 +486,8 @@ void save_game_data(struct auto_string *strout)
        autostr_append(strout,
                &quot;SAVEGAME: %s %s %s;sizeof(tux_t)=%d;sizeof(enemy)=%d;sizeof(bullet)=%d;MAXBULLETS=%d\n&quot;,
                SAVEGAME_VERSION, SAVEGAME_REVISION, VERSION, (int)sizeof(tux_t), (int)sizeof(enemy), (int)sizeof(bullet), (int)MAXBULLETS);
-       autostr_append(strout, &quot;BUILD_CFLAGS: %s\n&quot;, BUILD_CFLAGS);
-       autostr_append(strout, &quot;BUILD_LDFLAGS: %s\n&quot;, BUILD_LDFLAGS);
+       autostr_append(strout, &quot;BUILD_CFLAGS: %s\n&quot;, &quot;&lt;hidden&gt;&quot;);
+       autostr_append(strout, &quot;BUILD_LDFLAGS: %s\n&quot;, &quot;&lt;hidden&gt;&quot;);
        autostr_append(strout, &quot;VERSION: %s\n&quot;, freedroid_version);
        autostr_append(strout, &quot;--]]\n&quot;);</code></pre>
<p>Sometimes you might also need to add <code>propagatedBuildInputs = ...</code> to make
headers-only <code>dev</code> output self-contained.</p>
<p>Is it worth the hassle? If feels like development headers don’t take
that much space anyway. It’s true that some packages have tiny overhead.
But things add up quickly. For example
<a href="https://github.com/NixOS/nixpkgs/pull/191810">freedroidrpg PR</a> shrinks
runtime closure from <code>808MB</code> down to <code>450MB</code> (44% reduction). While
<a href="https://github.com/NixOS/nixpkgs/issues/191770#issuecomment-1250247308">fheroes2 RPs</a>
shrunk runtime closure from <code>622MB</code> down to <code>557MB</code> (11% reduction).</p>
<p>These are just two examples I found in 5 minutes. There are many more
packages you can fix in <code>nixpkgs</code>! Give it a try!</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>GNU make's 'Secondary Expansion' feature</title>
    <link href="http://trofi.github.io/posts/258-gnu-make-s-secondary-expansion-feature.html" />
    <id>http://trofi.github.io/posts/258-gnu-make-s-secondary-expansion-feature.html</id>
    <published>2022-09-16T00:00:00Z</published>
    <updated>2022-09-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>People occasionally ask me when
<a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">make --shuffle</a> feature will
be released. The short answer is: I don’t know. I would like to have it
released sooner but I also understand that stabilization requires real
work to get the release out.</p>
<p>But fear not, not all is lost! Paul sent out
<a href="https://lists.gnu.org/archive/html/bug-make/2022-09/msg00003.html">an announcement</a>
a few days ago that the new release is in the works!</p>
<p>To get some confidence that <code>make --shuffle</code> is not completely broken I
gave current <code>master</code> a go.</p>
<p>The setup was straightforward as usual: I added current <code>make</code> snapshot
locally into <code>nixpkgs</code> and tried to build my desktop system with it
using <code>nix build -f. nixos system</code>.</p>
<p>Quiz question: did <code>make --shuffle</code> still work? :)</p>
<p>Let’s find out.</p>
<h2 id="autoconf">autoconf</h2>
<p>A few seconds into the build the first failed package was
<code>autoconf-2.71</code> (and <code>autoconf-2.69</code> slightly later). The symptom
was the following suspicious build failure:</p>
<pre><code>$ make
...
bash: line 1: env: command not found
make  all-am
bash: line 1: make: command not found
make: *** [Makefile:928: all] Error 127</code></pre>
<p><code>make: command not found</code> suggested something broke the <code>PATH</code>
environment variable. Grepping <code>automake</code>s source for <code>PATH</code> I was lucky
to find this code snippet:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># In cfg.mk:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dv">export PATH = $(shell echo &quot;`pwd`/tests:</span><span class="ch">$$</span><span class="dt">PATH&quot;)</span></span></code></pre></div>
<p>Until then I had no idea about <code>export</code> keyword in <code>GNU make</code>! This keyword
exports <code>make</code>-level variables to child sub-processes. Mostly
intended for sub-<code>make</code>. But <code>$(shell ...)</code> calls work as well.</p>
<p>If you are not very familiar with <code>GNU make</code> the code above might not look
tricky. Let’s talk a bit about various variable assignments.
<code>GNU make</code> has that many:</p>
<pre><code>     IMMEDIATE = DEFERRED
     IMMEDIATE ?= DEFERRED
     IMMEDIATE := IMMEDIATE
     IMMEDIATE ::= IMMEDIATE
     IMMEDIATE :::= IMMEDIATE-WITH-ESCAPE
     IMMEDIATE += DEFERRED or IMMEDIATE
     IMMEDIATE != IMMEDIATE</code></pre>
<p>Yeah, it’s 7 types of them. We use deferred one in the example
above. From what I understand <code>POSIX</code> defines only the first
<code>IMMEDIATE = DEFERRED</code>.</p>
<p>I’ll quote <code>info make</code> here for details:</p>
<pre><code>3.7 How 'make' Reads a Makefile
===============================

GNU 'make' does its work in two distinct phases.  During the first phase
it reads all the makefiles, included makefiles, etc.  and internalizes
all the variables and their values and implicit and explicit rules, and
builds a dependency graph of all the targets and their prerequisites.
During the second phase, 'make' uses this internalized data to determine
which targets need to be updated and run the recipes necessary to update
them.

   It's important to understand this two-phase approach because it has a
direct impact on how variable and function expansion happens; this is
often a source of some confusion when writing makefiles.  Below is a
summary of the different constructs that can be found in a makefile, and
the phase in which expansion happens for each part of the construct.

   We say that expansion is &quot;immediate&quot; if it happens during the first
phase: 'make' will expand that part of the construct as the makefile is
parsed.  We say that expansion is &quot;deferred&quot; if it is not immediate.
Expansion of a deferred construct part is delayed until the expansion is
used: either when it is referenced in an immediate context, or when it
is needed during the second phase.</code></pre>
<p>The main ones I’ll focus on here are <code>:=</code> (immediate) vs <code>=</code> (deferred).</p>
<p>Here is one possible example that illustrates the difference:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">AI </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">AD  </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;AI=</span><span class="ch">$(</span><span class="dt">AI</span><span class="ch">)</span><span class="st"> BI=</span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span><span class="st">&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;AD=</span><span class="ch">$(</span><span class="dt">AD</span><span class="ch">)</span><span class="st"> BD=</span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span><span class="st">&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="dt">BI </span><span class="ch">:=</span><span class="st"> BI-val</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="dt">BD  </span><span class="ch">=</span><span class="st"> BD-val</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
AI= BI=BI-val
AD=BD-val BD=BD-val</code></pre>
<p>Here <code>AI</code> refers to <code>BI</code> value before <code>BI</code> is defined. While <code>AD</code> refers
to <code>BD</code> value after <code>BD</code> is defined. <code>:=</code> is very useful for cases when
right hand side is computationally non-trivial and thus should not be
duplicated.</p>
<p>Typical deferred assignment error is an accidental recursion:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">C </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">C</span><span class="ch">)</span><span class="st"> also-bar</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;C=</span><span class="ch">$(</span><span class="dt">C</span><span class="ch">)</span><span class="st">&quot;</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ LANG=C make
Makefile:1: *** Recursive variable 'C' references itself (eventually).  Stop.</code></pre>
<p>Going back to our initial example of <code>export PATH = $(shell echo $$(pwd)/tests:$$PATH")</code>
here <code>export</code> attempts to export a <code>PATH</code> make variable as environment
for ran subprocesses like <code>$(shell ...)</code> call in this example. It also
tries to base the new <code>PATH</code> value on existing shell-defined <code>PATH</code>
value. So what happens first? Variable export before <code>shell</code> call?
Or variable definition after <code>shell</code> call? If <code>:=</code> were to be used
instead then it would be more straightforward: export would probably
happen after.</p>
<p>The answer is … <code>make</code> did change the actual behaviour recently. To
quote the <a href="https://git.savannah.gnu.org/cgit/make.git/commit/NEWS?id=98da874c43035a490cdca81331724f233a3d0c9a">NEWS file</a>:</p>
<pre><code>* WARNING: Backward-incompatibility!
  Previously makefile variables marked as export were not exported to commands
  started by the $(shell ...) function.  Now, all exported variables are
  exported to $(shell ...).
  To detect this change search for 'shell-export' in the .FEATURES variable.</code></pre>
<p>To avoid this ambiguity <code>autoconf</code> was trivially fixed with
<a href="https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=31f673434ee402258b45e958c88acc8725d82b1a">the following patch</a>
upstream:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/cfg.mk</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/cfg.mk</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -20,2 +20,3 @@</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a> # Build with our own versions of these tools, when possible.</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="st">-export PATH = $(shell echo &quot;`pwd`/tests:$$PATH&quot;)</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="va">+export PATH := $(or $(PWD),$(shell pwd))/tests:$(PATH)</span></span></code></pre></div>
<p>Meanwhile <code>GNU make</code> also
<a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=70ba0357a080f72b9f5912f16b3ffc095db381e6">added graceful fallback</a>
to this case as exporting empty variable is probably not very useful.
Thus existing <code>autoconf</code> releases should still compile successfully
with <code>GNU make</code> from <code>master</code>.</p>
<p>Phew. This failure was not related to <code>--shuffle</code>.</p>
<h2 id="glibc">glibc</h2>
<p>Once <code>autoconf</code> was fixed I resumed world rebuild. The next failure was
in <code>glibc</code>:</p>
<pre><code>    $ make --shuffle
    ...
    make  -C localedata install-locales
    make: invalid shuffle mode: '1662724426r'</code></pre>
<p><code>GNU make</code> complains at unexpected <code>r</code> trailing letter in
<code>--shuffle=1662724426r</code> parameter. That suffix comes from … <code>glibc</code>’s
own <code>Makefile</code>:</p>
<pre><code># In glibc/Makerules:
# Don't define any builtin rules.
MAKEFLAGS := $(MAKEFLAGS)r</code></pre>
<p>Normally <code>MAKEFLAGS</code> contains options passed to <code>make</code>:</p>
<pre><code>$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f -
MAKEFLAGS=
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s
MAKEFLAGS=s
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s -r
MAKEFLAGS=rs
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s -r --shuffle
MAKEFLAGS=rs --shuffle=1663776045</code></pre>
<p>Note that <code>MAKEFLAGS</code> value does not contain dashes in option names.</p>
<p><code>GNU make</code> also allows extending <code>MAKEFLAGS</code> from within <code>Makefile</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">MAKEFLAGS </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">MAKEFLAGS</span><span class="ch">)</span><span class="st"> --no-builtin-rules</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo MAKEFLAGS=</span><span class="ch">$(</span><span class="dt">MAKEFLAGS</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
MAKEFLAGS=r
$ make --no-builtin-variables
MAKEFLAGS=rR
$ make --no-builtin-variables --no-print-directory
MAKEFLAGS=rR --no-print-directory</code></pre>
<p><code>--no-builtin-variables</code> and <code>-R</code> are equivalent. <code>GNU make</code> picks short
form of an option if available.</p>
<p>Note how short single-letter options get globbed together in the first
word while long options (without short option equivalent) are passed
separately. <code>NEWS</code> file tells us it’s another recent behaviour change:</p>
<pre><code>* WARNING: Backward-incompatibility!
  Previously only simple (one-letter) options were added to the MAKEFLAGS
  variable that was visible while parsing makefiles.  Now, all options
  are available in MAKEFLAGS.</code></pre>
<p><a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=2d7ed98add14f75041499ac189696c9bd3d757fe">The fix</a>
exceeded 1 liner bucket as <code>glibc</code> also introspected <code>MAKEFLAGS</code> in
other places for <code>-s</code> (<code>--silent</code>) option presence. Relevant part of
the fix:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makerules</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makerules</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -796,2 +796,2 @@ endif</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a> # Don't define any builtin rules.</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="st">-MAKEFLAGS := $(MAKEFLAGS)r</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="va">+MAKEFLAGS := $(MAKEFLAGS) -r</span></span></code></pre></div>
<p>No complications here.</p>
<p>Again, not exactly <code>--shuffle</code>-specific bug. Using of any long option
would break <code>glibc</code> build.</p>
<h2 id="ghc">ghc</h2>
<p>At this point <code>autoconf</code> and <code>glibc</code> fixes above unblocked many other
package builds. Most other projects’ <code>Makefile</code>s are not that
complicated and don’t rely on <code>GNU make</code> extensions. They usually limit
themselves to <code>POSIX make</code> features. <code>glibc</code> is a notable exception.
That makes it a good project to test new <code>GNU make</code> versions.</p>
<p>Believe it or not there is even heavier user of <code>GNU make</code>! It is
<code>ghc</code> (the <code>Glasgow Haskell Compiler</code>)! The small caveat is that it
migrates off <code>GNU make</code> to own <code>haskell</code>-based <code>hadrian</code> build system.
Many distributions still package previous versions of <code>ghc</code> and use
<code>GNU make</code> to build it.</p>
<p>In case of <code>ghc</code>, <code>GNU make</code> itself managed to <code>SIGSEGV</code> itself:</p>
<pre><code>$ make --shuffle
...
Configuring ghc-bin-9.0.2...
Warning: 'data-dir: ..' is a relative path outside of the source tree. This
will not work when generating a tarball with 'sdist'.
&quot;rm&quot; -f utils/deriveConstants/dist/build/.depend.haskell.tmp
&quot;rm&quot; -f utils/deriveConstants/dist/build/.depend.c_asm.tmp
&quot;rm&quot; -f utils/genprimopcode/dist/build/.depend.c_asm.tmp
make: *** [Makefile:124: all] Segmentation fault (core dumped) shuffle=1663318833
make: INTERNAL: Exiting with 14 jobserver tokens available; should be 16!</code></pre>
<p>It might not be obvious, but <code>Segmentation fault</code> happens within
<code>GNU make</code> itself, not just some tool it runs. Jobserver token loss
is another sign of things went wrong with <code>make</code> process itself.</p>
<p>This time crash happened only if I used <code>make --shuffle</code> option.</p>
<p>I was not able to craft a simple crashing example. I spent some time in
<code>gdb</code> to understand the failures mode. I found that it has something to
do with another fun <code>GNU make</code> extension: <code>Secondary Expansion</code>. I’ll
quote another bit of <code>GNU make</code> manual entry:</p>
<pre><code>3.9 Secondary Expansion
=======================

Previously we learned that GNU 'make' works in two distinct phases: a
read-in phase and a target-update phase (*note How 'make' Reads a
Makefile: Reading Makefiles.).  GNU make also has the ability to enable
a _second expansion_ of the prerequisites (only) for some or all targets
defined in the makefile.  In order for this second expansion to occur,
the special target '.SECONDEXPANSION' must be defined before the first
prerequisite list that makes use of this feature.</code></pre>
<p>I’ll start from non-working example to describe an intent for typical
use of <code>Secondary Expansion</code>. Suppose you want to use the list of
prerequisites dynamically read from external command (<code>ghc</code> for example
parses <code>.cabal</code> build files to extract prerequisites). I will emulate
external command with a simple <code>$(shell echo i1 i2 i3)</code> call.</p>
<p>Naive non-working approach to achieve would look like that:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">ALL_INPUTS</span><span class="ch">)</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo Inputs: </span><span class="ch">$^</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="dv">i%:</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># no-op</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Has to go after rule defined above. In ghc it's based on external</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="co"># command that dynamically builds a list of prerequisites:</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="dt">ALL_INPUTS </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> echo i1 i2 i3</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
Inputs:</code></pre>
<p>The example above attempted to get <code>i1 i2 i3</code> as a dynamic input and
failed. <code>$(ALL_INPUTS)</code> is expanded to an empty string. <code>GNU make</code>
allows this style of dependencies when <code>.SECONDEXPANSION:</code> phony
target is present in the <code>Makefile</code>:</p>
<p>Here is a working example closer to what <code>ghc</code> uses:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.SECONDEXPANSION:</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> </span><span class="ch">$$</span><span class="dt">(ALL_INPUTS)</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo Inputs: </span><span class="ch">$^</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="dv">i%:</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># $@ no-op</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="co"># Has to go after rule defined above. In ghc it's based on external</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="co"># command that dynamically builds a list of prerequisites:</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="dt">ALL_INPUTS </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> echo i1 i2 i3</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3</code></pre>
<p>Now we get our dynamic input as expected.</p>
<p>The magic happens around <code>$$(ALL_INPUTS)</code> expression: first it is
expanded to <code>$(ALL_INPUTS)</code> and on second expansion it uses already
available result. There are other simpler ways to get the same effect
(like moving variable assignment earlier). But that’s what <code>ghc</code> decided
to use.</p>
<p>While this simple example did not crash <code>GNU make</code> it did show me a
symptom of the problem. <code>make --shuffle</code> had no effect on prerequisite
traversal order:</p>
<pre><code>$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3</code></pre>
<p>Prerequisites were never reordered. But they were supposed to! Yet again
<code>NEWS</code> entry hinted at why it started happening only recently:</p>
<pre><code>* GNU make was performing secondary expansion of all targets, even targets
  which didn't need to be considered during the build.  In this release
  only targets which are considered will be secondarily expanded.</code></pre>
<p>In other words before the change order of events was:</p>
<ol type="1">
<li>read</li>
<li>expand</li>
<li><em>second expand (of everything)</em></li>
<li><em>shuffle</em></li>
<li>execute</li>
</ol>
<p>After the change:</p>
<ol type="1">
<li>read</li>
<li>expand</li>
<li><strong>shuffle</strong></li>
<li><strong>second expand (of built targets only)</strong></li>
<li>execute</li>
</ol>
<p>The bug mechanics: <code>shuffle</code> step assumed no changes in prerequisite
lists would happen after. Moving <code>second expand</code> step behind it broke
that assumptions: it cancelled shuffling effect (minor problem)
and introduced dangling references to freed memory (major problem).</p>
<p>Once understood the fix was trivial: refresh shuffle data if prerequisite
list was changed. The patch is
<a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=ca4234c4b550618df2194e0617c43bb12524f820">a few-liner</a>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/file.c</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/file.c</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -576,6 +577,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>   struct dep **dp;</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>   const char *fstem;</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>   int initialized = 0;</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  int changed_dep = 0;</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>   if (f-&gt;snapped)</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>     return;</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -664,6 +666,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>       if (new == 0)</span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>         {</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>           *dp = d-&gt;next;</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="va">+          changed_dep = 1;</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>           free_dep (d);</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>           d = *dp;</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>           continue;</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -672,6 +675,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>       /* Add newly parsed prerequisites.  */</span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>       fstem = d-&gt;stem;</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a>       next = d-&gt;next;</span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a><span class="va">+      changed_dep = 1;</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a>       free_dep (d);</span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a>       *dp = new;</span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>       for (dp = &amp;new, d = new; d != 0; dp = &amp;d-&gt;next, d = d-&gt;next)</span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -688,6 +692,12 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>       *dp = next;</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a>       d = *dp;</span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a>     }</span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a><span class="va">+    /* Shuffle mode assumes '-&gt;next' and '-&gt;shuf' links both traverse the same</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a><span class="va">+       dependencies (in different sequences).  Regenerate '-&gt;shuf' so we don't</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a><span class="va">+       refer to stale data.  */</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a><span class="va">+    if (changed_dep)</span></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a><span class="va">+      shuffle_deps_recursive (f-&gt;deps);</span></span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true" tabindex="-1"></a> /* Add extra prereqs to the file in question.  */</span></code></pre></div>
<p>We track all the places where prerequisite list is modified and then
rebuild shuffle list if any changes happened to the list.</p>
<p>The fix restored shuffling property and fixed <code>SIGSEGV</code> when building
<code>ghc</code>:</p>
<pre><code>$ make --shuffle
: # i2 no-op
: # i3 no-op
: # i1 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i3 no-op
: # i2 no-op
Inputs: i1 i2 i3</code></pre>
<p>This one was clearly <code>--shuffle</code>-related bug.</p>
<h2 id="parting-words">Parting words</h2>
<p>Trying out a pre-release was totally worth it. I found out about
existence of <code>export</code> and <code>Secondary Expansion</code> extensions.</p>
<p>The test
uncovered two bugs in upstream projects. Upstreams were very quick to
accept fixes. The bugs happened in somewhat obscure parts of <code>GNU make</code>
specific extensions: environment variable exports, <code>MAKEFLAGS</code> variable
update (and introspection).</p>
<p>The test also exposed a bug in <code>make --shuffle</code> implementation for an
advanced <code>Secondary Expansion</code> feature which was also an easy one to
fix.</p>
<p>After the fixes above I did not find any other related breakages.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 16, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>A year on NixOS</title>
    <link href="http://trofi.github.io/posts/257-a-year-on-nixos.html" />
    <id>http://trofi.github.io/posts/257-a-year-on-nixos.html</id>
    <published>2022-09-04T00:00:00Z</published>
    <updated>2022-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Discourse told me that one year has passed since I switched over to
<code>NixOS</code> for my main desktop system. It feels like it was yesterday.
Time to write a bit of retrospective of past 6 (or so) months.</p>
<h2 id="system-maintenance">System maintenance</h2>
<p>Nightly <code>nixos-unstable</code> automatic upgrades are surprisingly fast and
smooth. I had one period when I was not able to update
<a href="https://github.com/NixOS/nixpkgs/pull/185988">claws-mail</a>
for Perl-related build failures. I ended up doing nothing for a week and
somebody fixed it for me! My system was failing updates all that week.
It did not prevent me in any way from doing my usual activities.</p>
<p>I had to tweak <code>/etc/nixos/</code> config 1 time to adapt to option rename.
The warning message told me new name of the field: <code>nix.systemFeatures</code>
-&gt; <code>nix.settings.system-features</code>. That was smooth as well.</p>
<p>I don’t remember any other maintenance-related activities I had to do
to make the desktop working. I rebooted 2-3 times each month for
various unrelated reasons (power loss, multi-day travel, etc.). Reboots
exposed me to very fresh kernel versions each time. I had no troubles
with them either.</p>
<h2 id="unusual-software">Unusual software</h2>
<p>Of slightly unusual deeds I installed 32-bit wine with <code>pipewire</code> socket
passed to a sandboxed used from my main user. That went very smooth and
effortless as well.</p>
<p>Otherwise I’m afraid I don’t need anything special from the
distribution. Most packages I need are widely used and the rare ones
missing are trivial to package in a personal overlay. Just yesterday
I added a trivial <a href="https://github.com/trofi/uselex">uselex.rb</a> expression:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">stdenv</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">ruby_3_1</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">binutils-unwrapped-all-targets</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">unstableGitUpdater</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2017-07-28&quot;</span><span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;dfddc3dc839500edceca4665af7ee38f90e92081&quot;</span><span class="op">;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-4/HK+E1iiwMIvDwo+IheA+tETref9tCAG6WcB34CbKE=&quot;</span><span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> ruby_3_1 <span class="op">];</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="va">postPatch</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="st">    patchShebangs</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="st">    substituteInPlace uselex.rb --replace &quot;'nm'&quot; &quot;'</span><span class="sc">${</span>binutils<span class="op">-</span>unwrapped<span class="op">-</span>all<span class="op">-</span>targets<span class="sc">}</span><span class="st">/bin/nm'&quot;</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="st">    install -d $out/bin</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="st">    install -m 0755 uselex.rb $out/bin</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Update as:</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>  <span class="co">#    nix-shell ./maintainers/scripts/update.nix --argstr package uselex --arg include-overlays true</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>  <span class="va">passthru</span>.<span class="va">updateScript</span> <span class="op">=</span> unstableGitUpdater <span class="op">{</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>  <span class="va">meta</span> <span class="op">=</span> <span class="kw">with</span> lib<span class="op">;</span> <span class="op">{</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Look for USEless EXports in object files.&quot;</span><span class="op">;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>    <span class="va">homepage</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="va">license</span> <span class="op">=</span> licenses.publicDomain<span class="op">;</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>    <span class="va">maintainers</span> <span class="op">=</span> <span class="kw">with</span> maintainers<span class="op">;</span> <span class="op">[</span> trofi <span class="op">];</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>    <span class="va">platforms</span> <span class="op">=</span> platforms.all<span class="op">;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="community-support">Community support</h2>
<p>I keep being amazed by inclusivity and depth of technical expertise of
<code>NixOS</code> community. Maybe it’s just because I did not break anything
major yet? :)</p>
<p>I almost never see any blame or aggressive behaviour. And when rare
incidents happen people do step in and explain why it’s not OK and
suggest various ways out of a conflict. That makes the community a great
collaborative environment. At least from the far viewpoint I interact
with it.</p>
<p>People have the courage to develop things I would never dare
to tackle alone (but I would be happy to help with small improvements).
One example is cross-compilation of huge chunk of <code>nixpkgs</code>
(<a href="https://github.com/MidnightCommander/mc/commit/6b67d231a2f447cf5f33180c618c2a67849e6d15">mc example</a>).</p>
<p>I keep learning new details about <code>nixpkgs</code> and other software. It’s
so fun!</p>
<p>I don’t have the time to follow all the <code>NixOS Dev</code> matrix chat I’m
in. It’s just too many updates usually. But the other ones are low
traffic enough. My favourites are probably <code>Nix Cross Compiling</code>
(where the main topic is toolchains and related issues) and <code>Staging</code>
(where I mostly track merges of <code>staging-next</code> into <code>master</code> out of
idle curiosity).</p>
<p>I do have time to follow relatively low traffic
<a href="https://discourse.nixos.org/" class="uri">https://discourse.nixos.org/</a> and occasionally post announcements there
myself.</p>
<h2 id="maintenance-model">Maintenance model</h2>
<p>At first I thought that <code>nixpkgs</code> maintenance model is too simple to be
viable for a large package base: most package updates are not made by
(or even approved by) package maintainers. It felt a bit fragile: after
all there is always a chance of some fancy detail about the package that
needs to be kept in mind.</p>
<p>At least the partial answer to that is that <code>nixpkgs</code> has quite a bit of
tests. If new <code>nixpkgs</code> can boot my desktop in <code>qemu</code> after a <code>binutils</code>
update it does not really matter if there are minor mistakes in it. We
can always revise it and fix later.</p>
<p>Most trivial package updates are done by … an automated system! Just
look at <a href="https://github.com/NixOS/nixpkgs/graphs/contributors">these stats</a>.
It is so surreal to allow the bot file update PRs. But on the other hand
for smaller packages it’s exactly what humans would have to do anyways.
Why not pre-populate the PR with mechanical details already sorted?
Reviewers (and better yet automated tests) can always object to special
cases of more complex packages.</p>
<p>Having finished recently <a href="https://github.com/NixOS/nixpkgs/pull/185297">binutils-2.39 update</a>
I would say maintainership works great. I hope we will break no packages
by that somewhat disruptive (API change wise) update.</p>
<h2 id="home-server-experience">Home server experience</h2>
<p>I don’t have anything to complain about. Over past 6 months I played a
bit with distributed compilation which worked great. Otherwise I did not
do any major configuration changes on the server. It still serves <code>HTTP</code>
and a few services. Required zero maintenance from me over that period.</p>
<p>Automatic reboots on kernel upgrade makes server’s uptime below 2-3 days
on average. It does not feel disruptive and adds a bit of peace of mind
against exploits against outdated software.</p>
<h2 id="bugs-what-bugs">Bugs? What bugs?</h2>
<p><code>NixOS</code>-specific bugs do certainly happen time to time.</p>
<p>Mostly they stem from the fact that default paths are unusual (usually
easy to deal with) and split across multiple locations (sometimes
requires patching or clever symlink hacks).</p>
<p>Past examples are <a href="https://github.com/NixOS/nixpkgs/pull/187694">libtool</a>
embedding <code>/nix/sotore</code> paths to <code>make dist</code> tarballs and non-working
<a href="https://github.com/NixOS/nixpkgs/issues/189753">include-what-you-use</a> due
to dynamic headers location.</p>
<h2 id="parting-words">Parting words</h2>
<p>I think <code>NixOS</code> works well for me so far. If you still did not consider
trying it as well :)</p>

<div class="info">
    Posted on September  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Porting to pure Bison API</title>
    <link href="http://trofi.github.io/posts/256-porting-to-pure-bison-api.html" />
    <id>http://trofi.github.io/posts/256-porting-to-pure-bison-api.html</id>
    <published>2022-09-04T00:00:00Z</published>
    <updated>2022-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few weeks ago I started code cleanup for
<a href="https://github.com/trofi/ski/commits/master">Ski</a>.
Upstream <code>Ski</code> released in 2007 last time. I think it was actively
developed in 2003. That makes <code>Ski</code> about a 20 years old codebase.
It was more of a proof-of-concept makeshift project to help early
adopters than a piece of finished and maintained work. But it works
surprisingly good even today.</p>
<p>I would like to add a few medium sized features to <code>Ski</code>. I am a bit
afraid to make non-trivial changes. I decided to do do minor cleanup
first.</p>
<p>To deal with code health of old projects that I pretend to own (and thus
have the ability to do large cleanup changes) I have a few hacks
available. It mostly boils down to enabling a few compiler warnings to
use as suggestions for making things a bit more explicit.</p>
<p>I’ll outline some tricks I used for <code>Ski</code> and then will focus on
<code>Bison</code> API update.</p>
<h2 id="simple-tricks">Simple tricks</h2>
<p>C has a few language warts that allow you write code that is very likely
incorrect and yet standard compliant. A good example is implicit
function declaration behaviour. Luckily <code>gcc</code> has a set of warning to
catch those.</p>
<h3 id="implicit-variable-and-function-declarations">Implicit variable and function declarations</h3>
<p>To catch implicit function and variables <code>gcc</code> has at least the following
flags:</p>
<ul>
<li><code>-Werror=implicit-int</code></li>
<li><code>-Werror=implicit-function-declaration</code></li>
<li><code>-Werror=strict-prototypes</code></li>
</ul>
<p>I used these warnings successfully in
<a href="https://github.com/xmms2/xmms2-devel/commit/1dc66e4099e5b08f59bca86d7979f057fd82eba7">xmms2</a>,
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=80970472179a45609c0b11b80619bc8c32b15f77">linux kernel</a>
and and other projects.</p>
<p>Linux kernel is especially prone to these bugs as it heavily uses top
level macros a lot. lack of header inclusion for such a macro usually
turns macro call into a function declaration without any build failure.</p>
<p>Related build failures are still being fixed in <code>linux</code> kernel to this
day. Header inclusion changes are happening there all the time to speed
builds up and huge amount of <code>CONFIG</code> options increases the chance of
detting into a combination where a few headers got lost.</p>
<p>I’d say it’s a must have set of warning flags for a <code>C</code>-based project.</p>
<h3 id="modernized-configure.acmakefile.am">Modernized configure.ac/Makefile.am</h3>
<p>If the outdated project is <code>autotools</code>-based then chances are it uses
many deprecated and invalid constructs. Sometimes a project has complex
<code>./autogen.sh</code> script. My goal is usuallly to turn that script into a
single <code>autoreconf -i -f -W all</code> invocation. Ideally <code>configure.ac</code> and
<code>Makefile.am</code> should be enough to configure all the other details.
<code>-W all</code> helps catching deprecated macros and other lint errors.</p>
<p>For <code>Ski</code> I did the following changes:</p>
<ul>
<li>ported from autoconf <code>2.13</code>-ish to <code>autoconf-2.70</code></li>
<li>used <code>AC_CONFIG_AUX_DIR([build-aux])</code> to move most auxiliary files
into a <code>build-aux/</code> subdirectory</li>
<li>used <code>AM_SILENT_RULES([yes])</code> to make builds less verbose to make
warnings stand out</li>
<li>made <code>Makefile.am</code> non-recursive to make cross-directory dependencies
simpler</li>
<li>used <code>ACLOCAL_AMFLAGS = -I m4 -I macros --install</code> to vendor external
<code>m4</code> macros as separate <code>.m4</code> files instead of globbing them together
into a single <code>aclocal.m4</code></li>
</ul>
<h3 id="catch-inconsistent-function-prototypes-and-mark-functions-local">Catch inconsistent function prototypes and mark functions local</h3>
<p><code>Ski</code> is a bit special in a way it handles prototypes. For an example
file <code>foo.c</code> with <code>void foo(void)</code> function there was usually no
according <code>foo.h</code> available. Instead various <code>bar.c</code> and <code>baz.c</code> files
had their own local imports of <code>void foo(void)</code> duplicating the prototype.</p>
<p>The scheme has a few problems: build does not break when you change <code>foo()</code>’s
prototype in <code>foo.c</code> alone, 10x prototype duplication is common making
it harder to change, function prototypes don’t always agree on the
argument count a function has (<a href="https://github.com/trofi/ski/commit/c4de04f3b27424dd0caf5e89bf93ceab8cd59af1">example</a>).</p>
<p>To find such stray prototypes I use a few tricks:</p>
<ul>
<li>Use <code>-Wmissing-declarations</code> to detect cases where <code>foo.c</code> does
not have according header to include to verify prototype consistency.
That way I spot lack of <code>foo.h</code> headers, create them and consolidate
such prototype there. It’s also a good time to sprinkle <code>static</code>
keyword if a symbol happens to be used only in a single <code>.c</code> file.</li>
<li>Use <code>-flto</code> to detect prototype mismatches across such <code>.c</code> files.</li>
<li>Use <code>-Wunused-function -Wunused-variable</code> to detect unused
newly marked <code>static</code> functions.</li>
<li>Use <a href="https://trofi.github.io/posts/186-announce-uselex.rb-useless-exports-extinguisher.html">uselex.rb</a>
to spot more needlessly exported symbols to sprinkle even more <code>static</code>
annotations around.</li>
<li>Use <code>-ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--print-gc-sections</code>
to catch even more unused code and variables where <code>uselex.rb</code> was not
able to do it. Linkers are som much better at traversing graphs :)</li>
</ul>
<h3 id="make-headers-self-contained-and-minimal">Make headers self-contained and minimal</h3>
<p>When I start adding <code>#include "foo.h"</code> around I frequently notice that
some of them are incomplete and require including other headers themselves.
I usually use syntax-check the headers to fund such cases:</p>
<pre><code>$ for h in $(find -name '*.h'); do
    gcc -DHAVE_CONFIG_H=1 -fmax-errors=1 -I. -Isrc{,/decoder,/encoder} -fsyntax-only -c $h ||
      echo &quot;BROKEN H: $h&quot;
  done</code></pre>
<p>To get rid of unused header inclusions I usually use
<a href="https://github.com/include-what-you-use/include-what-you-use">include-what-you-use</a>.</p>
<h3 id="switch-from-lex-and-yacc-to-flex-and-bison-apis">Switch from lex and yacc to flex and bison APIs</h3>
<p><code>lex</code> and <code>yacc</code> interfaces have a few warts in their APIs. The major
one I would say is that both heavily use global variables to pass data
from one to another (and for user to write semantic actions):
<code>yylval</code>, <code>yyin</code>, <code>yyout</code> and a bunch of helper macros to work with them.</p>
<p>One of immediate benefits of switching from <code>yacc</code> to <code>bison</code> is ability
to enable <code>--warnings</code> reporting.
It is able to flag various grammar deciciencies like <a href="https://github.com/trofi/ski/commit/89c94225c3b4851f09daa54c5b0286a5726c6af0">this one</a>,
or <a href="https://github.com/skvadrik/re2c/commit/7e7c4b97af51f5e343faccacde2a58b9da5a1192">this one</a>.</p>
<p>More advanced benefit is the opportunity to switch to <code>pure</code> API: <code>pure</code> is the
one that uses function parameters to pass things around instead of global
variables. A few switch examples are <a href="https://github.com/trofi/ski/commit/5af00cd51f99127979280278f30cabd2de61d74a">this one</a>
and <a href="https://github.com/skvadrik/re2c/commit/8161d996f0ae0b7f782fff602bc261667c3e95d2">this one</a>.</p>
<p>The gist of it is move away from global <code>yylval</code> to explicit parameter threading.</p>
<h2 id="bison-apis">Bison APIs</h2>
<p>When I fist tried to switch <code>Ski</code> to <code>pure</code> <code>Bison</code> API I failed miserably.
I did not know what <code>Bison</code> generates, what <code>flex</code> generates and what
user is supposed to define. I also enabled function rename from <code>yy*()</code>
to <code>expr*()</code> and quickly got lost in errors and header inclusion cycles.</p>
<p>I stepped back and crafted simple pair of lexer and parser examples.
Then gradually upgraded them to modern world discovering minor API
gotchas one at a time.</p>
<p>The experience allowed me to finally port both <code>Ski</code> and <code>re2c</code> to more
modern <code>Bison</code> API.</p>
<h3 id="simple-example">Simple example</h3>
<p>Our running example will be the following trivial grammar:</p>
<pre><code>&lt;expression&gt; ::= &lt;digit&gt; | &lt;expression&gt; &quot;+&quot; &lt;digit&gt;
&lt;digit&gt; ::= &quot;0&quot; | &quot;1&quot; | ... | &quot;9&quot;</code></pre>
<p>It allows us write an expression of a digit (like <code>"1"</code> or <code>"2"</code>) or an
arbitrary sum of digits (like <code>"1+2+3"</code>). We will also allow whitespace
around.</p>
<p>We’ll need 3 files:</p>
<ul>
<li><code>Bison</code> parser: <code>p.y</code></li>
<li><code>Flex</code> lexer: <code>l.l</code></li>
<li><code>main()</code> function: <code>main.c</code></li>
</ul>
<p>Simple implementation would be the following:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat p.y */</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co">/* local declarations */</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">);</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">%</span><span class="kw">union</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ival<span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>token <span class="op">&lt;</span>ival<span class="op">&gt;</span> NUM</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>type <span class="op">&lt;</span>ival<span class="op">&gt;</span> expr</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>result <span class="op">:</span> expr       <span class="op">{</span> printf<span class="op">(</span><span class="st">&quot;RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $<span class="dv">1</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>expr <span class="op">:</span> NUM          <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>     <span class="op">|</span> expr <span class="ch">'+'</span> NUM <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span> <span class="op">+</span> $<span class="dv">3</span><span class="op">;</span> printf<span class="op">(</span><span class="st">&quot;I-RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $$<span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>     <span class="op">;</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> yyerror <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;PARSE ERROR: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> err<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Here we handle our grammar almost as it’s written in <code>BNF</code>. A few things
to note:</p>
<ul>
<li>Tokens are represented as instances of <code>union YYSTYPE { int ival; }</code>.
Usually tokens are more complicated and have a few more union
alternatives.</li>
<li>Our parse result is the <code>stdout</code> output of intermediate and final
computation step. We don’t collect any of the syntax information here.</li>
</ul>
<p>Note that parser’s definition requires lexing function prototype. Thus we
include all of autogenerated header via <code>#include "lex.expr.h"</code>.</p>
<p>Moving on to lexer:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat l.l */</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option noyywrap</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option nodefault</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="op">[</span> \t\n<span class="op">]</span> <span class="op">{</span> <span class="co">/* skip whitespace */</span> <span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="op">[+]</span> <span class="op">{</span> <span class="cf">return</span> <span class="ch">'+'</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="dv">0</span><span class="op">-</span><span class="dv">9</span><span class="op">]</span> <span class="op">{</span> yylval<span class="op">.</span>ival <span class="op">=</span> yytext<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="ch">'0'</span><span class="op">;</span> <span class="cf">return</span> NUM<span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="op">.</span> <span class="op">{</span> <span class="cf">return</span> YYUNDEF<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>The lexer is trivial:</p>
<ul>
<li>We support a few whitespace types (tab, space and newline). Whitespace
has no token representation. We just skip through them in this example.</li>
<li>Actual tokens are <code>'+'</code> operation (returned as is) and a digit returned
via <code>YYSTYPE yylval</code> global variable of type <code>union YYSTYPE { int ival; }</code>.</li>
</ul>
<p>Note that lexer’s implementation requires <code>union YYSTYPE</code> declaration provided
by <code>"parse.expr.h"</code> (while parser’s implementation clearly requires lexer’s
<code>yylex()</code>declaration). Thus we pull all of autogenerated lexer header via
<code>#include "parse.expr.h"</code>.</p>
<p>And our <code>main()</code> function:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat main.c */</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[])</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Parsing input from stdin. Press ^D when finished.</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    yyparse<span class="op">();</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s literally just one <code>yyparse()</code> call! Let’s build it:</p>
<pre><code>$ bison --warnings -Wcounterexamples --output=parse.expr.c --header=parse.expr.h --warnings p.y
$ flex --outfile=lex.expr.c --header-file=lex.expr.h l.l
$ gcc lex.expr.c parse.expr.c main.c -o example1</code></pre>
<p>The program happens to work on it’s stdin:</p>
<pre><code>$ ./example1
Parsing input from stdin. Press ^D when finished.
1       +2
I-RESULT: 3
+4
I-RESULT: 7
^D
RESULT: 7</code></pre>
<p>Here we typed <code>1+2+4</code> (with a bit of whitespace) and saw intermediate
results of <code>1+2</code> and intermediate/final result of the whole expression.</p>
<p>Fun fact: thanks to left recursion our grammar allows evaluating parts
of the expression before full expression is available.</p>
<p>Let’s have a peek at defined non-code symbols (data, rodata, undefined)
of generated files:</p>
<pre><code>$ gcc -c lex.expr.c
$ nm lex.expr.o | grep -v -P 't|T'
                 U clearerr
                 U ferror
                 U fileno
                 U fread
                 U free
                 U malloc
                 U realloc
0000000000000130 r yy_base
0000000000000048 b yy_c_buf_p
0000000000000190 r yy_chk
0000000000000150 r yy_def
0000000000000020 r yy_ec
0000000000000018 B yy_flex_debug
0000000000000040 b yy_hold_char
0000000000000008 B yyin
0000000000000000 B yyleng
0000000000000000 D yylineno
                 U yylval
0000000000000044 b yy_n_chars

$ gcc -c parse.expr.c
$ nm parse.expr.o | grep -v -P 't|T'
                 U free
                 U malloc
                 U memcpy
0000000000000000 B yychar
000000000000011b r yycheck
                 U yylex
0000000000000004 B yylval
0000000000000008 B yynerrs
0000000000000126 r yyr1
000000000000012b r yyr2</code></pre>
<p>Lexer defines quite a few globals: <code>yyin</code>, <code>yyleng</code>, <code>yylineno</code>, <code>yy_flex_debug</code>.
Parser does not define as many, but still has a few: <code>yychar</code>, <code>yylval</code>, <code>yynerrs</code>.</p>
<p>I did not realize it’s so much state scattered around.</p>
<h3 id="pure-example">Pure example</h3>
<p>Let’s now turn our example to string input (instead of <code>stdin</code> input)
and switch to pure API.</p>
<p>The main change is:</p>
<ul>
<li>add <code>%option reentrant bison-bridge</code> to <code>flex</code> lexer</li>
<li>add <code>%define api.pure full</code></li>
<li>make it all compile</li>
</ul>
<p>The above set of directives extends <code>int yylex(void)</code> with extra
parameters passed around. But not <code>yyparse()</code>! That will require
explicit extension with <code>%param {yyscan_t scanner}</code> (as it may be
lexer-dependenct).</p>
<p>Here is an updated parser:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat p.y */</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>define api<span class="op">.</span>pure full</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>param <span class="op">{</span>yyscan_t scanner<span class="op">}</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>code requires <span class="op">{</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">typedef</span> <span class="dt">void</span> <span class="op">*</span> yyscan_t<span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co">/* local declarations */</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span>yyscan_t scanner<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">);</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="op">%</span><span class="kw">union</span> <span class="op">{</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ival<span class="op">;</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>token <span class="op">&lt;</span>ival<span class="op">&gt;</span> NUM</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>type <span class="op">&lt;</span>ival<span class="op">&gt;</span> expr</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>result <span class="op">:</span> expr       <span class="op">{</span> printf<span class="op">(</span><span class="st">&quot;RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $<span class="dv">1</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>expr <span class="op">:</span> NUM          <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>     <span class="op">|</span> expr <span class="ch">'+'</span> NUM <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span> <span class="op">+</span> $<span class="dv">3</span><span class="op">;</span> printf<span class="op">(</span><span class="st">&quot;I-RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $$<span class="op">);</span> <span class="op">}</span></span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>     <span class="op">;</span></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span>yyscan_t scanner<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;PARSE ERROR: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> err<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Compared to original example <code>%param {yyscan_t scanner}</code> extends
<code>yyparse()</code> declaration with <code>yyscan_t scanner</code> parameter (and also pass
it to every <code>yy*()</code> call including <code>yylex()</code>, <code>yyerror()</code> and many others).</p>
<p>We include extra <code>#include "parse.expr.h"</code> to make sure generated header
has the same prototype as <code>.c</code> file that implements it.</p>
<p>You might have noticed that <code>typedef void * yyscan_t;</code> bit. It unties
circular dependency between <code>"parse.expr.h"</code> header and <code>"lex.expr.h"</code>
header. Figuring out specific details of the dependency is an exercise
to the reader. Try to remove it and see what breaks. That error threw
me off when I initially tried <code>Ski</code> conversion.</p>
<p>Luckily <code>flex</code> guarantees that <code>yyscan_t</code> is an opaque type and will
always be <code>typedef void * yyscan_t;</code>. Thus we can open code it’s
declaration directly.</p>
<p>Note that we still print our results to <code>stdin</code>. In a real world example
you would probably want to pass another parameter to store final result via
something like <code>%parse-param {output_t * output}</code>.</p>
<p>Updated lexer:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat l.l */</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option warn</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option noyywrap</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option nodefault</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option reentrant</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option bison<span class="op">-</span>bridge</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="op">[</span> \t\n<span class="op">]</span> <span class="op">{</span> <span class="co">/* skip whitespace */</span> <span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="op">[+]</span> <span class="op">{</span> <span class="cf">return</span> <span class="ch">'+'</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="dv">0</span><span class="op">-</span><span class="dv">9</span><span class="op">]</span> <span class="op">{</span> yylval_param<span class="op">-&gt;</span>ival <span class="op">=</span> yytext<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="ch">'0'</span><span class="op">;</span> <span class="cf">return</span> NUM<span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="op">.</span> <span class="op">{</span> <span class="cf">return</span> YYUNDEF<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>Semantic action now uses <code>union YYSTYPE * yylval_param</code>. It is added by
<code>%option bison-bridge</code> to <code>yylex()</code> signature. <code>%option reentrant</code> has
another effect on the <code>yy*()</code> API: it adds <code>yyscan_t scanner</code> parameter.
Let’s look at the <code>yy*()</code> call site in <code>main()</code> function:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat main.c */</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[])</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Parsing input from argv:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> argc<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;argv[%i]='%s':</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> i<span class="op">,</span> argv<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>        yyscan_t scanner<span class="op">;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>        YY_BUFFER_STATE buf<span class="op">;</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>        yylex_init <span class="op">(&amp;</span>scanner<span class="op">);</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>        buf <span class="op">=</span> yy_scan_string <span class="op">(</span>argv<span class="op">[</span>i<span class="op">],</span> scanner<span class="op">);</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>        yyparse<span class="op">(</span>scanner<span class="op">);</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>        yy_delete_buffer<span class="op">(</span>buf<span class="op">,</span> scanner<span class="op">);</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>        yylex_destroy <span class="op">(</span>scanner<span class="op">);</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>flex</code>’s <code>%option reentrant</code> option requires us to thread
<code>yyscan_t scanner</code>. <code>scanner</code> holds full lexing context and does not
rely on any global variables.</p>
<p>The <code>YY_BUFFER_STATE buf; buf = yy_scan_string (..., scanner); yy_delete_buffer(buf, scanner);</code>
is the <code>flex</code> way to switch from <code>FILE *</code> based API to <code>const char *</code>
as an input buffer. It is not directly related to <code>Bison</code>’s <code>pure</code> API.</p>
<p>Let’s check out used globals now:</p>
<pre><code>$ gcc -c lex.expr.c
$ nm lex.expr.o | grep -v -P 't|T'
                 U clearerr
                 U ferror
                 U fileno
                 U fread
                 U free
                 U malloc
                 U realloc
0000000000000130 r yy_base
0000000000000190 r yy_chk
0000000000000150 r yy_def
0000000000000020 r yy_ec

$ gcc -c parse.expr.c
$ nm parse.expr.o | grep -v -P 't|T'
                 U free
                 U malloc
                 U memcpy
000000000000011b r yycheck
                 U yylex
0000000000000126 r yyr1
000000000000012b r yyr2</code></pre>
<p>No globals! <code>r</code> are static read-only lexer and parser tables. Yay!</p>
<h3 id="bonus-makefile-for-pure-example">Bonus: Makefile for pure example</h3>
<p>When I was working on an example I wanted to craft the <code>Makefile</code> that
tracks the dependencies precisely to rebuild all the artifacts. Be it
<code>Makefile</code>, <code>C</code> source, or input to any of generators change. Though
straightforward It ended up being wordy:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat makefile</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="dt">FLEX </span><span class="ch">=</span><span class="st"> flex</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="dt">BISON </span><span class="ch">=</span><span class="st"> bison</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dt">BISON_FLAGS </span><span class="ch">=</span><span class="st"> --warnings -Wcounterexamples</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="dt">TARGETS </span><span class="ch">=</span><span class="st"> a</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="dt">GENERATED_SOURCES </span><span class="ch">=</span><span class="st"> lex.expr.c lex.expr.h parse.expr.c parse.expr.h</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="dt">OBJECTS </span><span class="ch">=</span><span class="st"> lex.expr.o parse.expr.o main.o</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LDFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span> -o <span class="ch">$@</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="co"># generator dependencies and rules</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="dv">lex.expr.c lex.expr.h:</span><span class="dt"> l.l</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">FLEX</span><span class="ch">)</span> --outfile=lex.expr.c --header-file=lex.expr.h <span class="ch">$&lt;</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="dv">parse.expr.c parse.expr.h:</span><span class="dt"> p.y</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">BISON</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">BISON_FLAGS</span><span class="ch">)</span> --output=parse.expr.c --header=parse.expr.h --warnings <span class="ch">$&lt;</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co"># extra build dependencies</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="dv">$(GENERATED_SOURCES) $(OBJECTS) $(TARGETS):</span><span class="dt"> Makefile</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="dv">lex.expr.o parse.expr.o:</span><span class="dt"> parse.expr.h</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="dv">parse.expr.o:</span><span class="dt"> lex.expr.h</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a><span class="dv">main.o:</span><span class="dt"> lex.expr.h parse.expr.h</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> clean</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="dv">clean:</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">RM</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">GENERATED_SOURCES</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">TARGETS</span><span class="ch">)</span></span></code></pre></div>
<p>It took me a while to populate <code>extra build dependencies</code> section but
luckily <a href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html">make –shuffle</a>
kept finding the issues until I got something that works most of the time.
Looking at <code>-MMD</code> output I think it’s an accurate list of extra
dependencies on top of implicit <code>.c.o</code> ones.</p>
<h2 id="bison-version-requirements">Bison version requirements</h2>
<p><code>Bison</code>’s <code>--warnigns</code> flag was implemented in 2006, around <code>2.3a</code>
version. <code>%define api.pure</code> flag was implemented in 2007, around <code>2.3b</code>
version. Both should be safe to assume as widely available.</p>
<h2 id="parting-words">Parting words</h2>
<p>Pure <code>Bison</code> API is a nice cleanup to do for a project. It should not
take much code to implement: just add <code>%define api.pure full</code> and adapt
to API extension. The benefit is a slightly more explicit API readily
usable in multi-threaded and nested parser contexts.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Ski 1.4.0 is out!</title>
    <link href="http://trofi.github.io/posts/255-ski-1.4.0-is-out.html" />
    <id>http://trofi.github.io/posts/255-ski-1.4.0-is-out.html</id>
    <published>2022-08-20T00:00:00Z</published>
    <updated>2022-08-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>TL;DR: <a href="https://github.com/trofi/ski/releases/tag/v1.4.0">ski-1.4.0</a> is
available for download!</p>
<h2 id="whats-new">What’s new</h2>
<p>I’ll paste NEWS entry as is:</p>
<pre><code>It's a new fork based on lates 1.3.2 version available. It's new home
is https://github.com/trofi/ski. There are many changes since 1.1.0.
We'll list a few here since 1.3.2:

** https://github.com/trofi/ski is a new Ski home.

** Build is fixed to work with modern glibc, binutils and linux kernel
headers versions.

** More linux syscalls are emulated to at least get basic printf() to
work. More work needs to be done before Ski user emulation can run real
world programs.

** Dropped outdated ski.spec from tarball.

** Dropped ski-config from installed files. Ski does not provide a
stable library interface.

** Dropped dynamic hook loading infrastructure support. Ski no longer
tries to load and execute any libraries via 'SKIHOOK_PATH'. LTDL is
not required anymore.

** libski is not installed any more and is considered an internal
implementation detail of Ski.</code></pre>
<p>While preparing this release I had a lot of fun fiddling with
<code>autoconf</code> over past few hours. I hope I did not break <code>Ski</code> too much to
and it still builds for others.</p>
<h2 id="ski-status">Ski status</h2>
<p><code>Ski</code> supports guest <code>linux</code> kernels up to <code>4.19</code>. Anything later does
not yet work as <code>HP_SIM</code> mode was removed from upstream kernel. <code>4.19</code>
kernel support is great though: you can run <code>gdb</code>, networking, <code>gcc</code>
and many other conventional tools right in the guest <code>VM</code>.</p>
<p>User mode emulation on the other hand is very weak. The “Hello World”
does run when built against modern <code>glibc</code>, but I expect many basic
things (like <a href="https://github.com/trofi/ski/issues/1">bash</a>) to be still
broken. It’s good enough for proof of concept, but expect to fix many
bugs if you want to run a real application.</p>
<p>Text <code>xterm</code> interface (<code>ski</code>/<code>bski</code>) seems to work great. <code>motif</code>
(<code>xski</code>) and <code>gtk</code> (<code>gski</code>) interfaces look completely broken. I fixed
their compilation, but they render something unusable. I’m not sure if
it was ever functional enough to be usable. If I get a bit more
confidence in that I’ll probably just remove <code>xski</code> / <code>gski</code> in next
release.</p>
<h2 id="more-words">More words</h2>
<p>Previous <code>Ski</code> release was out in February 2008, 14 years ago. A few
things changed in the world since then. Incomplete list:</p>
<ul>
<li><code>IA64</code> support in linux kernel was added, matured, slowed down and
almost got removed.</li>
<li>In 2020 Intel stopped producing new CPUs.</li>
<li>Various <code>glibc</code>, <code>linux</code> kernel and <code>binutils</code> interfaces were changed.
That broke the <code>Ski</code> build.</li>
<li>New <code>linux</code> syscalls (like <code>openat</code>) and <code>AT_*</code> (liks <code>AT_RANDOM</code>)
auxiliary vectors were added and are now required by <code>glibc</code>. That
broke the <code>Ski</code> user emulation.</li>
<li><code>HP_SIM</code> mode was <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=fc5bad03709f9c79ea299f554b6f99fc6f4fe31c">removed</a>
from upstream <code>linux</code> kernel. That broke <code>Ski</code> kernel/machine
emulation on guest recent kernels.</li>
<li><code>gcc</code>’s support slowly bit rots breaking more and more projects that
build with <code>-O3</code>.</li>
<li>I lost access to <code>guppy</code> box and did not do much <code>IA64</code>-related tinkering
lately.</li>
</ul>
<p>Sounds bad, eh?</p>
<p>Fear not! Things are not as grim as they might look. Lack of real
hardware access happens to be a good motivation for me to clear the dust
off good old <code>Ski</code>. Lack of new CPUs means that it’s not a moving target
anymore (not that it ever did :) and we can just build a perfect (ahem)
emulator.</p>
<p>I still have about 20 minor kernel patches to upstream and would like
to get an emulator to support latest kernels to test these patches.</p>
<h3 id="pre-built-os-images">Pre-built OS images</h3>
<p>A few months ago someone asked me if I had OS images left for <code>Ski</code> to
run. I did not have them and spent a few minutes recreating them. The
result is <a href="https://slyfox.uni.cx/ia64/">here</a>:</p>
<ul>
<li><a href="https://slyfox.uni.cx/ia64/HOWTO_RUN">running instructions</a>: unpack
and run.</li>
<li><a href="https://slyfox.uni.cx/ia64/NOTES.ia64">rebuilding instructions</a>:
build a cross-compiler, kernel and unpack Gentoo’s <code>stage3</code>.</li>
</ul>
<p>It has an userspace with <code>gcc-11.3.0</code>. Not too old.</p>
<h3 id="nixpkgs-attempt-at-building-os-images">Nixpkgs attempt at building OS images</h3>
<p>Gentoo’s support for large scale cross-compilation is a bit hairy.
I wondered if I could make OS image building based on <code>nixpkgs</code> to
reuse all my local hacks I use to tinker with the system.</p>
<p>A few days ago <strong>matoro</strong> asked me to send the fix <strong>matoro</strong> did for
<a href="https://bugs.gentoo.org/596382">ITC precision detection</a> upstream. I
took it as an opportunity to bring up an equivalent test environment
on <code>NixOS</code> locally (and to find out how <code>ia64</code> timers really work in
<code>linux</code>).</p>
<p>Initially I built just an <code>ia64-unknown-linux-gnu</code> cross-compiler. It
took 3 lines of <code>nixpkgs</code> code:</p>
<pre><code>lib/systems/examples.nix:  ia64 = { config = &quot;ia64-unknown-linux-gnu&quot;; };
lib/systems/inspect.nix:    isIa64         = { cpu = { family = &quot;ia64&quot;; }; };
lib/systems/parse.nix:    ia64     = { bits = 64; significantByte = littleEndian; family = &quot;ia64&quot;; };</code></pre>
<p>That (and a few small one-off tweaks) allowed me to build vast majority
of packages for <code>ia64</code> with one command: <code>bash</code>, <code>strace</code>, <code>mc</code>,
<code>busybox</code>, <code>gcc</code>, <code>iproute2</code>, <code>tmux</code>, <code>git</code>, <code>util-linux</code>, <code>gdb</code>. <code>re2c</code>
building example:</p>
<pre><code>$ nix build -f. pkgsCross.ia64.re2c

$ file result/bin/re2c
result/bin/re2c: ELF 64-bit LSB executable, IA-64, version 1 (SYSV), dynamically linked,
  interpreter /nix/store/...-glibc-ia64-unknown-linux-gnu-2.35-163/lib/ld-linux-ia64.so.2,
  for GNU/Linux 2.6.32, not stripped</code></pre>
<p>Kernel was slightly harder to get running as it required 2 <code>CONFIG_</code>
options to be disabled to get something bootable:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># lib/systems/platforms.nix:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  ia64 = <span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">linux-kernel</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>      <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;ia64&quot;</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">target</span> <span class="op">=</span> <span class="st">&quot;vmlinuz&quot;</span><span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>      <span class="va">autoModules</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">baseConfig</span> <span class="op">=</span> <span class="st">&quot;sim_defconfig&quot;</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">extraConfig</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">        # Disable for gcc bug: https://gcc.gnu.org/PR106617</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="st">        LIBFC n</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="st">        # otherwise lerken panics in SKI</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="st">        SERIAL_8250 n</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="st">      ''</span><span class="op">;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span>;</span></code></pre></div>
<p>Here the main bit is <code>sim_defconfig</code> for <code>HP_SIM</code> mode and a
<code>SERIAL_8250 n</code> workaround to prevent the kernel from crashing. Oh,
and it has to be a <code>4.19</code> kernel (<code>5.0</code> removed <code>HP_SIM</code> mode),
thus the command to build the kernel is:
<code>nix build -f. pkgsCross.ia64.linuxPackages_4_19.kernel</code>.</p>
<p>As I was foolish enough to use very fresh <code>gcc</code> I encountered a
<code>gcc</code> bug: <a href="https://gcc.gnu.org/PR106617" class="uri">https://gcc.gnu.org/PR106617</a>.</p>
<p>The above was good enogh to put together minimal runnable OS image. I
wondered if I could also generate full rootfs as a <code>.nix</code> expression
to later use it as is for making an <code>ext2</code> image. The trick is to
grab full closure of dependencies and put it in a single directory.
<strong>tpw_rules</strong> pointed me at a <a href="https://github.com/NixOS/nixpkgs/search?q=closureInfo">closureInfo</a>
magic function which allows doing exactly that kind of things.</p>
<p>Just one <code>rsync</code> call is enough to build full rootfs! Here is my
<code>.nix</code> expression to get a virtual machine with <code>busybox</code>, <code>re2c</code>, <code>ski</code>
run script and <code>/init</code> script to boot a full VM:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat busybox-and-re2c.nix</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> ~<span class="ss">/n</span> <span class="op">{}</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">pkgsCross</span> <span class="op">?</span> pkgs.pkgsCross.ia64</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">targetKernel</span> <span class="op">?</span> pkgsCross.linuxPackages_4_19.kernel</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">init-script</span> <span class="op">=</span> pkgs.writeScriptBin <span class="st">&quot;init&quot;</span> <span class="op">(</span><span class="st">''</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="st">    #!</span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin/busybox sh</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="st">    # expose both packages in the PATH</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="st">    export PATH=</span><span class="sc">${</span>pkgsCross.re2c<span class="sc">}</span><span class="st">/bin:</span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">    # prepare file hierarchy</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p /dev /proc</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="st">    mount -t proc proc /proc</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="st">    mount -t devtmpfs devtmpfs /dev</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="st">    # run the shell</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="st">    exec </span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin/busybox sh</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">);</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>  <span class="va">rootfs</span> <span class="op">=</span> pkgs.runCommand <span class="st">&quot;rootfs&quot;</span> <span class="op">{</span> <span class="va">closure</span> <span class="op">=</span> pkgs.closureInfo <span class="op">{</span> <span class="va">rootPaths</span> <span class="op">=</span> <span class="op">[</span> init-script <span class="op">];</span> <span class="op">};</span> <span class="op">}</span> <span class="st">''</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="st">    cd $out</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="st">    # Copy full closure locally</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="st">    </span><span class="sc">${</span>pkgs.rsync<span class="sc">}</span><span class="st">/bin/rsync -arv --files-from=$closure/store-paths / .</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a><span class="st">    # build convenience symlinks:</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a><span class="st">    ln -s </span><span class="sc">${</span>init<span class="op">-</span>script<span class="sc">}</span><span class="st">/bin/init init</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>  <span class="va">run-script</span> <span class="op">=</span> pkgs.writeScriptBin <span class="st">&quot;run-ia64-ski&quot;</span> <span class="st">''</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="st">    #!</span><span class="sc">${</span>pkgs.bash<span class="sc">}</span><span class="st">/bin/bash</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a><span class="st">    bski=</span><span class="sc">${</span>pkgs.ski<span class="sc">}</span><span class="st">/bin/bski</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a><span class="st">    bootloader=</span><span class="sc">${</span>targetKernel.dev<span class="sc">}</span><span class="st">/bootloader</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a><span class="st">    vmlinux=</span><span class="sc">${</span>targetKernel.dev<span class="sc">}</span><span class="st">/vmlinux</span></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a><span class="st">    rootfs=</span><span class="sc">${</span>rootfs<span class="sc">}</span></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a><span class="st">    image_size=1G</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a><span class="st">    image=./sdc</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a><span class="st">    set -e</span></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a><span class="st">    if [ ! -e &quot;$image&quot; ]; then</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a><span class="st">        echo &quot;Populating '$image' with '$rootfs'...&quot;</span></span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a><span class="st">        fallocate -l &quot;$image_size&quot; &quot;$image&quot;</span></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a><span class="st">        mke2fs -d </span><span class="sc">${</span>rootfs<span class="sc">}</span><span class="st">/ &quot;$image&quot;</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a><span class="st">    fi</span></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a><span class="st">    $bski $bootloader $vmlinux root=/dev/sda simscsi=./sd init=/init rw TERM=xterm &quot;$@&quot;</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We define 3 build targets above:</p>
<ul>
<li><code>init-script</code>: our target’s init script which will run first in a
guest VM.</li>
<li><code>rootfs</code>: magic command to copy all the dependency closure context
into a single <code>$out</code> directory.</li>
<li><code>run-script</code>: our host’s script to run the virtual machine.</li>
</ul>
<p>The whole thing can be built and ran in a single command as:</p>
<pre><code>$ $(nix-build busybox-and-re2c.nix -A run-script)/bin/run-ia64-ski

loading /nix/store/jiqn22d0yp80vvysib16xjnb8w6j7c1v-linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux...
starting kernel...
Linux version 4.19.255 (nixbld@localhost) (gcc version 13.0.0 20220814 (experimental) (GCC)) #2 SMP Fri Aug 19 07:53:12 UTC 2022
EFI v1.00 by Hewlett-Packard:
...
Run /init as init process
sh: can't access tty; job control turned off
/ # random: crng init done

/ # mount
/dev/root on / type ext4 (rw,relatime)
proc on /proc type proc (rw,relatime)
devtmpfs on /dev type devtmpfs (rw,relatime,size=53184k,nr_inodes=831,mode=755)

/ # ls /
dev         init        lost+found  nix         proc

/ # ls -l /
total 20
drwxr-xr-x    3 0        0             2300 Aug 20 00:29 dev
lrwxrwxrwx    1 0        0               57 Jan  1  1970 init -&gt; /nix/store/ri7n3q59q042ddgzdanrsg5l4jrs85b8-init/bin/init
drwx------    2 0        0            16384 Aug 20 00:29 lost+found
dr-xr-xr-x    3 0        0             4096 Jan  1  1970 nix
dr-xr-xr-x   92 0        0                0 Aug 20 00:29 proc

/ # du -hs /nix/store/*
4.7M    /nix/store/1mrb68yaa7cn2x8lzq13vgd4gy6icz2i-re2c-ia64-unknown-linux-gnu-3.0
12.0K   /nix/store/ri7n3q59q042ddgzdanrsg5l4jrs85b8-init
31.9M   /nix/store/rr5mdcdw22ab7k78i6z6laywxdflhsj9-glibc-ia64-unknown-linux-gnu-2.35-163
6.3M    /nix/store/x83rlqm5ww1d6ggdkxlv48l0rzb0gwjc-ia64-unknown-linux-gnu-stage-final-gcc-13.0.0-lib
2.7M    /nix/store/xhkazsq7p21kj6853vfv7w244bbfa854-busybox-ia64-unknown-linux-gnu-1.35.0

/ # re2c --version
re2c 3.0</code></pre>
<p>Just <code>44MB</code> uncompressed! We can shrink it down to <code>9MB</code> by compressing
it:</p>
<pre><code>$ xz -9 sdc
$ LANG=C ls -lh
-rw-r--r-- 1 slyfox users 8.6M Aug 20 08:02 sdc.xz</code></pre>
<p>That’s even smaller than uncompressed kernel, which is around <code>21MB</code>:</p>
<pre><code>$ ls -lh /nix/store/jiqn22d0yp80vvysib16xjnb8w6j7c1v-linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux |unnix
-r-xr-xr-x 2 root root 21M Jan  1  1970 /&lt;&lt;NIX&gt;&gt;/linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux</code></pre>
<p>You can also inspect rootfs from the host side without having to deal
with filesystem image or booting an OS:</p>
<pre><code>$ nix-build busybox-and-re2c.nix -A rootfs
/nix/store/11ig1jh624l5dniilcp2p8s2zjigrz44-rootfs

$ ls -1 result/nix/store/
1mrb68yaa7cn2x8lzq13vgd4gy6icz2i-re2c-ia64-unknown-linux-gnu-3.0
ri7n3q59q042ddgzdanrsg5l4jrs85b8-init
rr5mdcdw22ab7k78i6z6laywxdflhsj9-glibc-ia64-unknown-linux-gnu-2.35-163
x83rlqm5ww1d6ggdkxlv48l0rzb0gwjc-ia64-unknown-linux-gnu-stage-final-gcc-13.0.0-lib
xhkazsq7p21kj6853vfv7w244bbfa854-busybox-ia64-unknown-linux-gnu-1.35.0</code></pre>
<p>That alone allowed me to fix a bunch of packages in <code>nixpkgs</code> (example
<a href="https://midnight-commander.org/changeset/0ef7237eea2ef97e92b793c0429be4d1ea6ffc77">upstream mc fix</a>).</p>
<p>It’s such a fun toy to play with!</p>
<h3 id="hp_sim-mode-limitations">HP_SIM mode limitations</h3>
<p>To do a full system emulation <code>Ski</code> relies on <code>HP_SIM</code> mode of kernel
build. It’s very different from the real <code>ia64</code> kernel you build for a
real device. And different from <code>KVM</code>! A few points on why <code>HP_SIM</code> is
special:</p>
<ul>
<li>Separate <code>bootloader</code> binary is required to boot <code>vmlinux</code>
(<code>bootloader</code> is built as part of <code>linux</code> kernel)</li>
<li>No firmware initialization code, to memory map discovery. The map is
hardcoded in <code>bootloader</code> code.</li>
<li>Paravirtual devices (<code>simserial</code>, <code>simeth</code>, <code>simscsi</code>) require
<code>Ski</code>-specific hypercalls from guest kernel to <code>Ski</code>.</li>
<li>No support for <code>virtio</code> from <code>Ski</code>.</li>
<li>No ACPI bus.</li>
<li>No PCI bus.</li>
<li>No initramfs support (lack of interface to pass it to <code>bootloader</code>)</li>
</ul>
<h3 id="possible-next-steps-for-ski">Possible next steps for Ski</h3>
<p>The above are not fundamental limitations. I think it would not be hard
to get rid of custom device code and switch over to <code>virtio-mmio</code>
entirely. I imagine it would be something like:</p>
<ul>
<li><code>simserial</code> -&gt; <code>virtio-console</code></li>
<li><code>simscsi</code> -&gt; <code>virtio-blk</code></li>
<li><code>simeth</code> -&gt; <code>virtio-net</code></li>
</ul>
<p>It will require a bit of code on <code>Ski</code> side to handle virtio queues.
Maybe we can borrow parts of <code>qemu</code> as is? Otherwise implementing them
does not sound too hard.</p>
<p>Lack of buses is fine as well. VMs for other architectures seem to do
it for ages and rely on device trees or manual kernel config options.
We can do there same here. It would be useful though to get closer to
real <code>ia64</code> for interface discovery eventually.</p>
<p>Lack of platform initialization code should not be a big problem either:
<code>ia64</code> paltform is defined in terms of <code>PAL</code> and <code>SAL</code> calls which are
very similar (at least in spirit) to current <code>HP_SIM</code> hypercalls.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>Ski</code> is still alive! Try <a href="https://github.com/trofi/ski/releases/tag/v1.4.0">1.4.0</a> :)</p>
<p><code>ia64</code> code can still be emulated and be debugged with <code>Ski</code>. Both can
still expose generic bugs in various projects.</p>
<p><code>Ski</code> is a great example of project on how little one needs to add to
guest <code>linux</code> kernel and to hypervisor to boot the kernel and get
userspace running there.</p>
<p>Instruction emulation is a large part of <code>Ski</code>. I still don’t quite get
it. But I also never had a reason for deeper investigation. Maybe one day.
Meanwhile it just works!</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 20, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>binutils 2.39</title>
    <link href="http://trofi.github.io/posts/254-binutils-2.39.html" />
    <id>http://trofi.github.io/posts/254-binutils-2.39.html</id>
    <published>2022-08-12T00:00:00Z</published>
    <updated>2022-08-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A week ago new <a href="https://sourceware.org/pipermail/binutils/2022-August/122246.html">2.39 release</a>
of <code>binutils</code> saw the light of day.</p>
<h2 id="new-features">New features</h2>
<p>I found interesting these additions:</p>
<ul>
<li>colors in <code>objdump -d --disassembler-color=color</code> output</li>
<li><code>gprofng</code> tool is enabled by default now (<a href="https://sourceware.org/pipermail/binutils/2021-August/117665.html">gprofng announcement</a>)</li>
</ul>
<p>Colored <code>objdump</code> looks good:</p>
<p><img src="http://trofi.github.io/posts.data/254-binutils-2.39/objdump.svg" /></p>
<p>The blue-on-black text is a bit hard to read. <a href="https://sourceware.org/pipermail/binutils/2022-August/122351.html">Soon</a>
it will be tweakable via <code>OBJDUMP_COLORS</code> environment variable.</p>
<p><code>gprofng</code> requires some work to finish the packaging:</p>
<ul>
<li><a href="https://sourceware.org/PR29479">PR29479</a>: <code>javac</code> is not optional</li>
<li><a href="https://sourceware.org/PR29477">PR29477</a>: <code>musl</code> needs some porting</li>
</ul>
<p>With a bit of tweaking I was able to get <code>gprofng</code> to run:</p>
<pre><code>$ gprofng collect app $(which htop)
Creating experiment directory test.1.er (Process ID: 3545207) ...

$ gprofng display text -functions test.1.er/
Functions sorted by metric: Exclusive Total CPU Time

Excl. Total   Incl. Total    Name
CPU           CPU
 sec.      %   sec.      %
0.420 100.00  0.420 100.00   &lt;Total&gt;
0.150  35.71  0.150  35.71   read
0.060  14.29  0.060  14.29   openat
0.040   9.52  0.040   9.52   __strchr_avx2
0.030   7.14  0.030   7.14   write
0.020   4.76  0.020   4.76   __getdents
0.010   2.38  0.030   7.14   LinuxProcessList_readStatFile.constprop.0
0.010   2.38  0.320  76.19   LinuxProcessList_recurseProcTree.isra.0
0.010   2.38  0.020   4.76   RichString_appendWide
0.010   2.38  0.010   2.38   RichString_appendnAscii
0.010   2.38  0.010   2.38   __close_nocancel
0.010   2.38  0.010   2.38   __gconv_transform_internal_utf8
0.010   2.38  0.010   2.38   __memchr_avx2
0.010   2.38  0.010   2.38   __vfprintf_internal
0.010   2.38  0.010   2.38   _nc_tiparm
0.010   2.38  0.170  40.48   fgets
0.010   2.38  0.010   2.38   iswprint
0.010   2.38  0.020   4.76   onscreen_mvcur
0.      0.    0.410  97.62   CommandLine_run
...</code></pre>
<p>In the output above both individual and cumulative times are reported
for each function. Nothing fancy.</p>
<p>Output of the same sampling data with a <code>calltree</code> view:</p>
<pre><code>$ gprofng display text -calltree test.1.er/
Functions Call Tree. Metric: Attributed Total CPU Time

Attr. Total    Name
CPU
 sec.      %
0.420 100.00   +-&lt;Total&gt;
0.410  97.62     +-__libc_start_call_main
0.410  97.62     |  +-CommandLine_run
0.360  85.71     |    +-ScreenManager_run
0.270  64.29     |    |  +-ProcessList_scan
0.270  64.29     |    |  |  +-LinuxProcessList_recurseProcTree.isra.0
0.150  35.71     |    |  |    +-fgets
0.140  33.33     |    |  |    |  +-_IO_getline_info
0.130  30.95     |    |  |    |    +-_IO_default_uflow
0.130  30.95     |    |  |    |    |  +-_IO_new_file_underflow
0.130  30.95     |    |  |    |    |    +-read
0.010   2.38     |    |  |    |    +-__memchr_avx2
0.030   7.14     |    |  |    +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |    |  |    |  +-openat
0.010   2.38     |    |  |    |  +-LinuxProcessList_recurseProcTree.isra.0
0.010   2.38     |    |  |    |    +-openat
0.020   4.76     |    |  |    +-__GI_strstr
0.020   4.76     |    |  |    |  +-__strchr_avx2
0.020   4.76     |    |  |    +-__strchr_avx2
0.020   4.76     |    |  |    +-readdir
0.020   4.76     |    |  |    |  +-__getdents
0.010   2.38     |    |  |    +-LinuxProcessList_readStatFile.constprop.0
0.010   2.38     |    |  |    +-__new_fclose
0.010   2.38     |    |  |      +-_IO_new_file_close_it
0.010   2.38     |    |  |        +-__close_nocancel
0.060  14.29     |    |  +-wgetch
0.060  14.29     |    |  |  +-_nc_wgetch
0.060  14.29     |    |  |    +-wrefresh
0.060  14.29     |    |  |      +-doupdate_sp
0.060  14.29     |    |  |        +-TransformLine
0.040   9.52     |    |  |          +-_nc_mvcur_sp
0.020   4.76     |    |  |          |  +-_nc_flush_sp
0.020   4.76     |    |  |          |  |  +-write
0.020   4.76     |    |  |          |  +-_nc_real_mvcur.part.0
0.020   4.76     |    |  |          |    +-onscreen_mvcur
0.010   2.38     |    |  |          |      +-_nc_tiparm
0.010   2.38     |    |  |          +-EmitRange
0.010   2.38     |    |  |          |  +-_nc_is_charable
0.010   2.38     |    |  |          |    +-wctob
0.010   2.38     |    |  |          |      +-__gconv_transform_internal_utf8
0.010   2.38     |    |  |          +-PutRange
0.010   2.38     |    |  |            +-_nc_mvcur_sp
0.010   2.38     |    |  |              +-_nc_flush_sp
0.010   2.38     |    |  |                +-write
0.030   7.14     |    |  +-Panel_draw
0.030   7.14     |    |    +-Process_display
0.030   7.14     |    |      +-LinuxProcess_writeField
0.030   7.14     |    |        +-Process_writeField
0.020   4.76     |    |          +-Process_writeCommand
0.020   4.76     |    |          |  +-RichString_appendWide
0.010   2.38     |    |          |    +-iswprint
0.010   2.38     |    |          +-Process_printBytes
0.010   2.38     |    |            +-RichString_appendnAscii
0.050  11.90     |    +-ProcessList_scan
0.050  11.90     |      +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |        +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |        |  +-LinuxProcessList_readStatFile.constprop.0
0.020   4.76     |        |    +-xReadfileat
0.020   4.76     |        |      +-openat
0.020   4.76     |        +-fgets
0.020   4.76     |        |  +-_IO_getline_info
0.020   4.76     |        |    +-_IO_default_uflow
0.020   4.76     |        |      +-_IO_new_file_underflow
0.020   4.76     |        |        +-read
0.010   2.38     |        +-openat
0.010   2.38     +-__vfprintf_internal</code></pre>
<p>This view is a bit more interesting: we can instantly see where all those
string operations get called from.</p>
<p><code>gprofng</code> seems to work \o/.</p>
<h2 id="new-bugs">New bugs</h2>
<p>Having sorted basic <code>gprofng</code> stuff I attempted to package <code>binutils-2.39</code>
in <code>nixpkgs</code> in <a href="https://github.com/NixOS/nixpkgs/pull/185297">PR185297</a>.
I got a few problems when I tried to build the system against it. I’ll list
a few of them below.</p>
<h3 id="breaking-api-change-init_disassemble_info">Breaking API change: init_disassemble_info()</h3>
<p>One of the unfortunate side-effects of added colouring is the
disassembler API change (<a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=60a3da00bd5407f07d64dff82a4dae98230dfaac">patch</a>):
<code>init_disassemble_info()</code> got an extra formatter parameter. The crucial
bit of the patch is the extra <code>fprintf_styled_func</code> parameter added:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -394,11 +470,13 @@ extern bool generic_symbol_is_valid</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a> /* Method to initialize a disassemble_info struct.  This should be</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    called by all applications creating such a struct.  */</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a> extern void init_disassemble_info (struct disassemble_info *dinfo, void *stream,</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="st">-                                  fprintf_ftype fprintf_func);</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                  fprintf_ftype fprintf_func,</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="va">+                                  fprintf_styled_ftype fprintf_styled_func);</span></span></code></pre></div>
<p>I noticed it as a <code>perf</code> build breakage against <code>linux.git</code> tree:</p>
<pre><code>util/annotate.c: In function 'symbol__disassemble_bpf':
util/annotate.c:1765:9: error: too few arguments to function 'init_disassemble_info'
 1765 |         init_disassemble_info(&amp;info, s,
      |         ^~~~~~~~~~~~~~~~~~~~~</code></pre>
<p>The fix got merged into <code>linux#master</code> a few days ago as a set
of <a href="https://github.com/torvalds/linux/compare/00b32625982e0c796f0abb8effcac9c05ef55bd3...600b7b26c07a070d0153daa76b3806c1e52c9e00">patches</a>.</p>
<p>The gist of the fix is added feature detection against parameter count
(<code>DISASM_INIT_STYLED</code>) and use of the feature to wrap
<code>init_disassemble_info()</code> variants:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- /dev/null</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/tools/include/tools/dis-asm-compat.h</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -0,0 +1,55 @@</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="va">+static inline int fprintf_styled(void *out,</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="va">+                                enum disassembler_style style,</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                const char *fmt, ...)</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="va">+{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_list args;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+       int r;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_start(args, fmt);</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="va">+       r = vfprintf(out, fmt, args);</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_end(args);</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="va">+       return r;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="va">+}</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="va">+static inline void init_disassemble_info_compat(struct disassemble_info *info,</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               void *stream,</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               fprintf_ftype unstyled_func,</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               fprintf_styled_ftype styled_func)</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="va">+{</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="va">+#ifdef DISASM_INIT_STYLED</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="va">+       init_disassemble_info(info, stream,</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a><span class="va">+                             unstyled_func,</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a><span class="va">+                             styled_func);</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="va">+#else</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="va">+       (void)styled_func;</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="va">+       init_disassemble_info(info, stream,</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="va">+                             unstyled_func);</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="va">+#endif</span></span></code></pre></div>
<p>We will need to backport this fix to older kernel versions. Or pin
<code>perf</code> to older version of <code>libbfd</code>.</p>
<h3 id="new-warnings-around-executable-stack">New warnings around executable stack</h3>
<p>Another <code>binutils-2.39</code> change was to enable warnings around
RWX sections (like stack and data) in
<a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=ba951afb99912da01a6e8434126b8fac7aa75107">this change</a>.
The announcement warns:</p>
<blockquote>
<p>The ELF linker will now generate a warning message if the stack is made executable.</p>
</blockquote>
<p>Some linux distributions already implement similar warning for a while
as a way to catch unintended executable stack on code base with assembly
<code>.S</code> files. I am glad to see it getting upstream now. It makes upstreaming
so much easier when people can easily reproduce the warning on their
distribution.</p>
<p>Some projects do not tolerate warnings from the linker. <a href="https://github.com/systemd/systemd/issues/24226">systemd</a>
or <a href="https://github.com/rhboot/efivar/pull/164">efi-vars</a> come to mind.
Users can disable new warning with <code>--enable-warn-execstack=no</code> if a
proper fix is too complicated.</p>
<p>In case of <code>systemd</code>, the upstream decided to be more lenient to warning
for <code>EFI</code> linking code. The proper fix was also trivial in this case:
<code>gnu-efi</code> library needed <a href="https://sourceforge.net/p/gnu-efi/code/ci/803b49c40bb0b720b90d9c31d372911f1b946aa7/">a few annotations</a>.</p>
<p>The idea is simple: all manually written assembly <code>.S</code> files need
a note section that declares non-executable stack:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/apps/trivial.S</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/apps/trivial.S</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -41,3 +41,7 @@ _start:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a> hello: .byte 'h',0,'e',0,'l',0,'l',0,'o',0,'\n',0,'\r',0,0,0</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+#if defined(__ELF__) &amp;&amp; defined(__linux__)</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+       .section .note.GNU-stack,&quot;&quot;,%progbits</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="va">+#endif</span></span></code></pre></div>
<p>It’s a lot of boilerplate to add the note to every <code>.S</code> file.</p>
<h3 id="dwarf-output-regression">DWARF output regression</h3>
<p>Another fallout was an <code>elfutils-0.187</code> test failure:</p>
<pre><code>FAIL: run-low_high_pc.sh
========================

[b] main.c
[2d] main

[b] ../sysdeps/i386/start.S
[26] _start
[40] ../sysdeps/x86/abi-note.c
[b52] init.c
[b8e] static-reloc.c
[2dba] _dl_relocate_static_pie
[2dd8] ../sysdeps/i386/crti.S
[2def] _init
lowpc: 8049000, highpc: 8049000lx
../sysdeps/i386/crti.S: [2def] '_init' highpc &lt;= lowpc
FAIL run-low_high_pc.sh (exit status: 255)</code></pre>
<p>Here the test <a href="https://sourceware.org/git/?p=elfutils.git;a=blob;f=tests/low_high_pc.c;h=cd022b1cc5e446520be675859b01c0df04bb5521;hb=HEAD#l70">low_high_pc</a>
complains about something about <code>_init</code> symbol.
Looking at the reported values the condition is <code>highpc == lowpc</code>.</p>
<p><a href="https://en.wikipedia.org/wiki/DWARF">DWARF</a> specification describes
Debug Info Entries (<code>DIEs</code>) each of which consists of:</p>
<ul>
<li>a tag (<code>DW_TAG_*</code>) like subprogram, <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/dwarf2.h;h=8a0ae403529e87cfc3a1366799a027bcb941cd2c;hb=HEAD#l38">others</a></li>
<li>a set of attributes key-value pairs (<code>DW_AT_*</code>) like source language name, file ranges, file names and <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/dwarf2.h;h=8a0ae403529e87cfc3a1366799a027bcb941cd2c;hb=HEAD#l133">others</a></li>
</ul>
<p><code>DWARF</code> debug sections are named <code>.debug*</code>. We can inspect them using
<code>readelf --debug-dump</code>:</p>
<pre><code>$ printf &quot;int main(){}&quot; | gcc -g -x c - -o a
$ readelf --debug-dump a
...
Contents of the .debug_info section:
...
  Compilation Unit @ offset 0x2dea:
   Length:        0x50 (32-bit)
   Version:       5
   Unit Type:     DW_UT_compile (1)
   Abbrev Offset: 0x4a2
   Pointer Size:  8
 &lt;0&gt;&lt;2df6&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;2df7&gt;   DW_AT_producer    : (indirect string, offset: 0x19f6): GNU C17 12.1.0 -mtune=generic -march=x86-64 -g
    &lt;2dfb&gt;   DW_AT_language    : 29     (C11)
    &lt;2dfc&gt;   DW_AT_name        : (indirect line string, offset: 0x5): &lt;stdin&gt;
    &lt;2e00&gt;   DW_AT_comp_dir    : (indirect line string, offset: 0x0): /tmp
    &lt;2e04&gt;   DW_AT_low_pc      : 0x401106
    &lt;2e0c&gt;   DW_AT_high_pc     : 0xb
    &lt;2e14&gt;   DW_AT_stmt_list   : 0x96c
 &lt;1&gt;&lt;2e18&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;2e19&gt;   DW_AT_external    : 1
    &lt;2e19&gt;   DW_AT_name        : (indirect string, offset: 0x1a25): main
    &lt;2e1d&gt;   DW_AT_decl_file   : 1
    &lt;2e1e&gt;   DW_AT_decl_line   : 1
    &lt;2e1f&gt;   DW_AT_decl_column : 5
    &lt;2e20&gt;   DW_AT_type        : &lt;0x2e36&gt;
    &lt;2e24&gt;   DW_AT_low_pc      : 0x401106
    &lt;2e2c&gt;   DW_AT_high_pc     : 0xb
    &lt;2e34&gt;   DW_AT_frame_base  : 1 byte block: 9c       (DW_OP_call_frame_cfa)
    &lt;2e36&gt;   DW_AT_call_all_calls: 1
 &lt;1&gt;&lt;2e36&gt;: Abbrev Number: 3 (DW_TAG_base_type)
    &lt;2e37&gt;   DW_AT_byte_size   : 4
    &lt;2e38&gt;   DW_AT_encoding    : 5      (signed)
    &lt;2e39&gt;   DW_AT_name        : int
 &lt;1&gt;&lt;2e3d&gt;: Abbrev Number: 0
...</code></pre>
<p>Here we can see that <code>&lt;stdin&gt;</code> file (<code>DW_TAG_compile_unit</code>) was using
<code>C11</code> language, <code>main</code> symbol is a subprogram (<code>DW_TAG_subprogram</code>)
defined in line 1 column 5 of the file. <code>DW_AT_low_pc</code> / <code>DW_AT_high_pc</code>
encode a range where code of subprogram is located in virtual memory.</p>
<p>Back to our <code>elfutils</code> example
<code>../sysdeps/i386/crti.S: [2def] '_init' highpc &lt;= lowpc</code> was complaining
about invalid code location in virtual memory. It looks like the
encoding claimed that <code>_init</code> is 0 bytes long. Failure happened only on
<code>i686-linux</code> and not <code>x96_64-linux</code>. It’s because <code>_init</code> code is very
different on <code>i686</code> and <code>x86_64</code>.</p>
<p>Here is the reproducer:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a> .<span class="bu">section</span> <span class="op">.</span>init<span class="op">,</span><span class="st">&quot;ax&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a> .p2align <span class="dv">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a> .globl _init</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> .hidden _init</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a> .type _init<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="fu">_init:</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  .<span class="bu">section</span> <span class="op">.</span>text<span class="op">.</span>__x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span><span class="st">&quot;axG&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits<span class="op">,</span>__x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span>comdat</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    .globl __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    .hidden __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    .p2align <span class="dv">4</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    .type __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span><span class="fu">@f</span>unction</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">__x86.get_pc_thunk.bx:</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>      <span class="bu">ud2</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    .size __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span> <span class="op">.</span> <span class="op">-</span> __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    .previous</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  <span class="bu">ud2</span></span></code></pre></div>
<p>The code above defines <code>_init</code> symbol in <code>.init</code> section with a single
<code>ud2</code> instruction and <code>__x86.get_pc_thunk.bx</code> symbol in
<code>.text.__x86.get_pc_thunk.bx</code> section with a single <code>ud2</code> instruction.
Note that <code>.size</code> directive (to specify size of function) is not set on
<code>_init</code> and present only on <code>__x86.get_pc_thunk.bx</code>.</p>
<p><code>binutils-2.38</code> used to generate the following <code>DIE</code>s:</p>
<pre><code>$ as-2.38 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/dev/bugs/binutils-2.39-crti-size/delta
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x3d): GNU AS 2.38
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)</code></pre>
<p><code>binutils-2.39</code> started emitting a bit more info:</p>
<pre><code>$ as-2.39 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/dev/bugs/binutils-2.39-crti-size/delta
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x3d): GNU AS 2.39
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)
 &lt;1&gt;&lt;22&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;23&gt;   DW_AT_name        : (strp) (offset: 0x49): _init
    &lt;27&gt;   DW_AT_external    : (flag) 1
    &lt;28&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;2c&gt;   DW_AT_high_pc     : (addr) 0x0
 &lt;1&gt;&lt;30&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;31&gt;   DW_AT_name        : (strp) (offset: 0x4f): __x86.get_pc_thunk.bx
    &lt;35&gt;   DW_AT_external    : (flag) 1
    &lt;36&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;3a&gt;   DW_AT_high_pc     : (addr) 0x2
 &lt;1&gt;&lt;3e&gt;: Abbrev Number: 0</code></pre>
<p>Note that <code>DW_TAG_subprogram</code> was not present for any of two symbols in
<code>binutils-2.38</code>. And <code>binutils-2.39</code> defines both: <code>__x86.get_pc_thunk.bx</code>
of size 2 and <code>_init</code> of size … 0! It ended up being a <code>gas</code> bug and
Jan fixed with <a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=e8cf73215187b0c08679d726a5cc7c019fa3ea2e">the patch</a>.</p>
<p>After the fix <code>DWARF</code> sections have the following look:</p>
<pre><code>$ as-2.39 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x2d (32-bit)
   Version:       2
   Abbrev Offset: 0x0
   Pointer Size:  4
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/n
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x18): GNU AS 2.39
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)
 &lt;1&gt;&lt;22&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;23&gt;   DW_AT_name        : (strp) (offset: 0x24): __x86.get_pc_thunk.bx
    &lt;27&gt;   DW_AT_external    : (flag) 1
    &lt;28&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;2c&gt;   DW_AT_high_pc     : (addr) 0x2
 &lt;1&gt;&lt;30&gt;: Abbrev Number: 0</code></pre>
<p>As expected <code>_init</code> does not have <code>DW_AT_low_pc</code> / <code>DW_AT_high_pc</code>
values anymore and <code>elfutils</code> tests run successfully.</p>
<p>As <code>crti.S</code> is a file from <code>glibc</code> that made me wonder why <code>crti.o</code>
was not stripped off <code>.debug*</code> sections. It ended up being a <code>nixpkgs</code>
bug in a debuginfo separation hook. The hook was meant to move all <code>.debug*</code> sections
from <code>ELF</code> files in <code>/lib</code> to <code>/lib/debug</code>. For files where the hook
did not work it did not apply stripping at all. Fixed with
<a href="https://github.com/NixOS/nixpkgs/pull/185537">PR185537</a> now.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>binutils-2.39</code> does not look too problematic so far. It will need a bit
of backporting to fix <code>linux</code> and <code>perf</code>. But otherwise the release look
benign.</p>
<p><code>gas</code> bug uncovered <code>nixpkgs</code>’s stripping code bug. It’s funny how one
is required to trigger another. Luckily both are fixed now.</p>
<p>Once I get <code>perf</code> fixed I’ll ask for a full <code>hydra</code> run to get more
potential failures.</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 12, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>one-liner to fix CSS on phones</title>
    <link href="http://trofi.github.io/posts/253-one-liner-to-fix-css-on-phones.html" />
    <id>http://trofi.github.io/posts/253-one-liner-to-fix-css-on-phones.html</id>
    <published>2022-08-04T00:00:00Z</published>
    <updated>2022-08-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I noticed that this blog was unreadable on the phones: main text was
readable, but code snippets had 2.5x smaller fonts and required manual
zooming in to see anything at all.</p>
<p>Apparently it was happening because on small screens browsers try to
be smart and scale some UI elements up. But not all of the HTML
tags get the same treatment. As a result you get size inconsistencies
where none were before.</p>
<p>Apparently you can (and need) to opt out of that behaviour! The
magic <code>HTML5</code> one-liner is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;meta</span> <span class="er">name</span><span class="ot">=</span><span class="st">&quot;viewport&quot;</span> <span class="er">content</span><span class="ot">=</span><span class="st">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="kw">&gt;</span></span></code></pre></div>
<p>There are many other subtleties one needs to account for, like scaling
pictures accordingly or handling sidebars to overflow in a neat way.
The set of techniquest are called <code>HTML Responsive Web Design</code>.</p>
<p>Luckily I don’t need to care about any of that.</p>

<div class="info">
    Posted on August  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nixpkgs overlay nano howto</title>
    <link href="http://trofi.github.io/posts/252-nixpkgs-overlay-nano-howto.html" />
    <id>http://trofi.github.io/posts/252-nixpkgs-overlay-nano-howto.html</id>
    <published>2022-07-31T00:00:00Z</published>
    <updated>2022-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><code>nixpkgs</code> is a huge repository of various packages. But what if you want
to package a tiny package and don’t plan to share it with anyone. Is it
hard? How would you go about it?</p>
<p>There are many ways to do it: maintain a <code>nixpkgs</code> fork, use
<code>packageOverrides</code>, <code>overlays</code>, <code>flakes</code> and many others methods.</p>
<p>I’ll focus here only on <code>overlays</code> method as it feels to me like the
simplest way to write packages readily copyable to (or from) <code>nixpkgs</code>.</p>
<h2 id="nixpkgs-stucture">nixpkgs stucture</h2>
<p>before we start with an example let’s have a look at <code>nixpkgs</code>
“schema”. <code>nixpkgs</code> provides a <code>pkgs</code> map (“attribute set”) from package
name to package definition (it’s nested in a few places):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>pkgs = <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">callPackage</span> <span class="op">=</span> <span class="va">pkgPath</span><span class="op">:</span> ...somehow<span class="op">-</span>load<span class="op">-</span>the<span class="op">-</span>package<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># unnested examples:</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">glibc</span> <span class="op">=</span> callPackage <span class="ss">../development/libraries/glibc</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">re2c</span> <span class="op">=</span> callPackage <span class="ss">../development/tools/parsing/re2c</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co"># nested examples:</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">python39Packages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      <span class="co"># the name is slightly changed for clarity</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      <span class="va">callPythonPackage</span> <span class="op">=</span> <span class="va">pkgPath</span><span class="op">:</span> ...somehow<span class="op">-</span>load<span class="op">-</span>python<span class="op">-</span>package<span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">black</span> <span class="op">=</span> callPackage <span class="ss">../development/python-modules/black</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>      <span class="va">blessed</span> <span class="op">=</span> callPackage <span class="ss">../development/python-modules/blessed</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>      <span class="co"># ...</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>;</span></code></pre></div>
<p>Our goal here is to inject something very simple into top-level
<code>pkgs = { ... };</code> sturcture. We’ll ignore nested attributes.</p>
<p><code>overlays</code> allow us to override existing attributes in <code>pkgs</code> or
introduce the existing ones. Until you get familiar with the way
attributes interact with one another I suggest adding only new
attributes.</p>
<h2 id="an-example">an example</h2>
<p>Our running example will be <a href="https://github.com/trofi/ski">ski</a> package.
It’s an <code>autotools</code>-based package with very conventional dependencies.
Let’s package it!</p>
<p>I’ll do 3 things below:</p>
<ol type="1">
<li>create <code>/tmp/overlay/ski/default.nix</code> expression ready to be included
into <code>nixpkgs</code> repository</li>
<li>create <code>/tmp/overlay/local-packages.nix</code> expression ready to be used
in <code>/etc/nixos/configuration.nix</code> and/or in <code>~/.config/nixpkgs/overlays/</code>.</li>
<li>add our overlay to <code>/etc/nixos/configuration.nix</code>.</li>
</ol>
<p>Here is a simple <code>/tmp/overlay/ski/default.nix</code> expression enough to
build it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /tmp/overlay/ski/default.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span> <span class="op">,</span> <span class="va">stdenv</span> <span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">autoconf</span><span class="op">,</span> <span class="va">automake</span><span class="op">,</span> <span class="va">bison</span><span class="op">,</span> <span class="va">flex</span><span class="op">,</span> <span class="va">gperf</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libtool</span><span class="op">,</span> <span class="va">pkg-config</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">elfutils</span><span class="op">,</span> <span class="va">libbfd</span><span class="op">,</span> <span class="va">libiberty</span> <span class="op">,</span> <span class="va">ncurses</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;ski&quot;</span><span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2022-07-07&quot;</span><span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;ski&quot;</span><span class="op">;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;568efd789fab1f932aa926b1db86dcb75e9c115c&quot;</span><span class="op">;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-dwHccL89bXzsjDr8O1DmVHlBQQ6aHgNLEaHJCJqHG9w=&quot;</span><span class="op">;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>  <span class="va">postPatch</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="st">    ./autogen.sh</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> autoconf automake</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    bison flex gperf libtool pkg-config <span class="op">];</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> elfutils libbfd libiberty ncurses <span class="op">];</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>  <span class="va">meta</span> <span class="op">=</span> <span class="kw">with</span> lib<span class="op">;</span> <span class="op">{</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;ia64 (Itanium) instruction set simulator.&quot;</span><span class="op">;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>    <span class="va">homepage</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/ski&quot;</span><span class="op">;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>    <span class="va">license</span> <span class="op">=</span> licenses.gpl2Only<span class="op">;</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>    <span class="va">platforms</span> <span class="op">=</span> platforms.linux<span class="op">;</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we need to create an actual overlay expression. I’ll put it in a
separate <code>/tmp/overlay/local-packages.nix</code> file as well:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /tmp/overlay/local-packages.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># we create new 'ski' attribute here!</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">ski</span> <span class="op">=</span> final.callPackage <span class="ss">./ski</span> <span class="op">{};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co"># add more packages below:</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we are ready to use the overlay in our
<code>/etc/nixos/configuration.nix</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Add an overlay to augment existing 'pkgs' map.</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixpkgs</span>.<span class="va">overlays</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="bu">import</span> <span class="ss">/tmp/overlay/local-packages.nix</span><span class="op">)</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="co"># use augmented 'pkgs':</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">environment</span>.<span class="va">systemPackages</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">[</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    ski</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we can get <code>ski</code> installed into our system:</p>
<pre><code>$ sudo nixos-rebuild switch
$ ski -help
Options:
    -help        Display command-line options
    -i &lt;file&gt;    Process initialization file at startup
    -rest &lt;file&gt; Restore simulation state from &lt;file&gt;
    -nonet       Disable networking feature
    -srcroot     Source Root Directory
    -forceuser   Force user-level simulation
    -forcesystem Force system-level simulation
    -strace      Trace system call execution
    -simroot     Simulated root directory
    -conslog &lt;file&gt; Log the console output to the specified file
    -palen &lt;n&gt;      Implemented physical address bits.  Default: 63
    -valen &lt;n&gt;      Implemented virtual address bits.  Default: 61
    -ridlen &lt;n&gt;     Implemented RR.rid bits.  Default: 24
    -keylen &lt;n&gt;     Implemented PKR.key bits.  Default: 24
    -grfile &lt;n&gt;     GR file size.  Default: 128</code></pre>
<p>Seems to work!</p>
<p>We can also get the packages pulled into user’s <code>&lt;nixpkgs&gt;</code> expression:</p>
<pre><code>$ mkdir -p ~/.config/nixpkgs/overlays/
$ ln -s /tmp/overlay/local-packages.nix ~/.config/nixpkgs/overlays/</code></pre>
<p>Now we can use it as a <code>nixpkgs</code> attribute:</p>
<pre><code>$ nix-build '&lt;nixpkgs&gt;' -A ski
/nix/store/rpb5iikr6p0x49zkpw5cjwp9lg8lnl7d-ski-unstable-2022-07-07</code></pre>
<p>A few relevant links:</p>
<ul>
<li><a href="https://nixos.org/manual/nixpkgs/stable/#sec-overlays-install">overlays in nixpkgs manual</a></li>
<li><a href="https://nixos.wiki/wiki/Overlays">overlays in nixos.wiki</a></li>
</ul>
<p>Done!</p>

<div class="info">
    Posted on July 31, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nixpkgs cross-compilation improvements</title>
    <link href="http://trofi.github.io/posts/251-nixpkgs-cross-compilation-improvements.html" />
    <id>http://trofi.github.io/posts/251-nixpkgs-cross-compilation-improvements.html</id>
    <published>2022-07-30T00:00:00Z</published>
    <updated>2022-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p><code>gcc</code> cross-compilers are now stripped!
For example <a href="https://github.com/NixOS/nixpkgs/pull/182513">nixpkgs/182513</a>
decreases <code>wine</code> closure (or any other <code>pkgsCross.*.stdenv</code>)
by a ~1GB.</p>
<p><a href="https://github.com/NixOS/nixpkgs/pull/182513">nixpkgs/182513</a> also fixes
stripping of static libraries. You can now remove existing <code>dontStrip = true;</code>
workarounds in <code>nixpkgs</code> if you had to put them in to restore linkage.
For example <a href="https://github.com/NixOS/nixpkgs/pull/183484">nixpkgs/183484</a>
decreases <code>mingw</code> closure by 200MB.</p>
<p>With <a href="https://github.com/NixOS/nixpkgs/pull/181943">nixpkgs/181943</a> <code>gcc</code>
cross-compilers and cross-built <code>gcc</code>s now enable expected features based
on target’s libc headers. Previously libc headers were not passed correctly.
That caused cross-<code>gcc</code> and cross-build <code>gcc</code> to assume too conservative
assumptions about libc like use of <code>libssp</code> on targets or use of executable
stack support.</p>
<h2 id="story-mode">Story mode</h2>
<p>I like cross-compilation. It’s a great way to peek at other
CPU architectures’ properties without having to deal with
real hardware.</p>
<p>Cross-compilation is fundamentally just a compilation. The compiler
should emit code for that one CPU type. Should be a solved problem by
now, right? If you ever tried to cross-compile something large you
probably already know the complications that usually arise from it.</p>
<h2 id="the-problem">The problem</h2>
<p>Scrolling through open <code>nixpkgs</code> PRs I stopped on this one:
<a href="https://github.com/NixOS/nixpkgs/pull/181802">stdenv: lib{gmp,mpc,mpfr,isl}-stage3: isPower64 -&gt; no -fstack-protector</a>.
It looked like something I could review. A few month ago I fiddled with
<a href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html">stdenv bootstrap</a> when I dealt
with <code>glibc-2.35</code> update. If nothing else I knew <code>stdenv</code> is a bit hard
to reason about when it comes to figuring out bootstrap dependency tower.</p>
<p>In the PR Adam Joseph shared the problem he was trying to address. Somewere
at bootstrap time on <code>powerpc64le-linux</code> platform one of the intermediate
<code>gcc</code> builds failed to link as:</p>
<pre><code>/tmp/nix-build-gcc-10.3.0.drv-0/build/./prev-gcc/xg++ \
    -o cc1plus \
    cp/cp-lang.o ... main.o ... ../libdecnumber/libdecnumber.a ... -lz
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.a(mpfr-gmp.o):
  (.toc+0x8): undefined reference to `__stack_chk_guard'
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.a(mpfr-gmp.o):
  (.toc+0x8): undefined reference to `__stack_chk_guard'
...</code></pre>
<p>Adam suggested disabling stack protector just for a few bootstrap
packages (<code>mpfr</code> and the similar) to get past the errro. While it probably
gets the job done it also flags an assumption incompatibility between
compilers. It should not normally happen.</p>
<h2 id="what-is-libssp">What is libssp?</h2>
<p>What is that <code>__stack_chk_guard</code> thing anyway? What is supposed to
provide it?</p>
<p>It has something to do with <code>-fstack-protector*</code> set of options in
<code>gcc</code>. Let’s pick a trivial <code>void wr(char * p, char v){ *p = v; }</code>
function and build it with and without stack protector to get a
feel of it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fno<span class="op">-</span>stack<span class="op">-</span>protector <span class="op">-</span>O2</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>       <span class="co">; Our `*p = v;` code</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 12.1.0&quot;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>The actual code takes 1 line here: <code>movq    %rsi, (%rdi)</code>. It stores
64-bit value at <code>%rsi</code> register (<code>long v</code> parameter) to memory pointed
by <code>%rdi</code> (<code>long * p</code> parameter). The rest is a bit of metadata to get
the code placed properly into the <code>ELF</code> file.</p>
<p>Now let’s add stack protector code to it with <code>-fstack-protector-all</code>
option:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fstack<span class="op">-</span>protector<span class="op">-</span>all <span class="op">-</span>O2</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span>          <span class="co">; allocated a bit of space for canary on stack</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">32</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">fs</span><span class="op">:</span><span class="dv">40</span><span class="op">,</span> <span class="op">%</span><span class="kw">rax</span>       <span class="co">; canary = %fs:40</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span>      <span class="co">; store canary on stack</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        xorl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span>         <span class="co">; clean registers up</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>       <span class="co">; initial `*p = v;` code</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>      <span class="co">; load canary value back from stack</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">%</span><span class="kw">fs</span><span class="op">:</span><span class="dv">40</span><span class="op">,</span> <span class="op">%</span><span class="kw">rax</span>       <span class="co">; compare to the reference value</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>L5                <span class="co">; exit if canary comparison failed</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        .cfi_remember_state</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">8</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span>                        <span class="co">; exit `wr()`</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        .cfi_restore_state</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    __stack_chk_fail   <span class="co">; handle failure</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 12.1.0&quot;</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>Now our original code was diluted with 9(!) extra instructions related
to stack protector checks. To make the checking work the compiler uses
<code>%fs:40</code> thread-local memory location as a canary value. At start of
each function code places canary on stack (with <code>movq %rax, 8(%rsp)</code>)
and at the end of function code reads the canary value back from the
same location (with <code>movq 8(%rsp), %rax</code>) and checks if it was unchanged
(with <code>subq %fs:40, %rax</code> and <code>jne .L5</code>). If the canary check
failed then <code>__stack_chk_fail()</code> is called.</p>
<p>If we generalize the above to pseudo-code <code>gcc</code> turned our program to
something like:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> wr<span class="op">(</span><span class="dt">long</span> <span class="op">*</span> p<span class="op">,</span> <span class="dt">long</span> v<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">long</span> canary <span class="op">=</span> __stack_chk_guard<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>p <span class="op">=</span> v<span class="op">;</span> <span class="co">// original code</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>canary <span class="op">!=</span> __stack_chk_guard<span class="op">)</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        __stack_chk_fail<span class="op">();</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Something has to provide that <code>__stack_chk_fail()</code> function. In case
of <code>glibc</code> that function is provided by <code>libc.so.6</code> library starting
from <code>2.4</code> version:</p>
<pre><code>$ nm -D &lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6  | fgrep __stack
0000000000116de0 T __stack_chk_fail@@GLIBC_2.4</code></pre>
<p>Something also has to arrange addressable <code>%fs:40</code> memory. In case of
<code>glibc</code> that value is placed by <code>glibc</code>
<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=csu/libc-start.c;h=543560f36c33b07a1fbe1b7e4578374fe8007b1f;hb=da3b9f445195bdbe77e66e4fc137a5732637b85f#l311">itself</a>
in the early startup code. <code>%fs</code> is a <code>TLS</code> segment register for a
segment maintained by kernel: kernel changes the segment address
on thread switch.</p>
<p>Thus the above assembly code generated by <code>gcc</code> implies presence of
operating system and supporting libc.</p>
<p>Not all architectures have a way to address thread-local data in that
fashion. For targets without <code>TLS</code> <code>glibc</code> emulates a bit of stack
protection with a global variable <code>uintptr_t __stack_chk_guard attribute_relro;</code>.</p>
<p>Turns out it’s not the only implementation of stack protector prologue
and epilogue even on <code>x86_64</code>. What happens on <code>glibc-2.0</code>? Or on other
libcs or kernels?</p>
<p>The implementation we saw above was the default case of <code>--disable-libssp</code>
mode of <code>gcc</code>. We can also build <code>gcc</code> in <code>--enable-libssp</code>. In this
case we get a bit different code:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a># Locally built <span class="op">`</span>gcc<span class="op">`</span> build with <span class="op">`./</span>configure <span class="op">--</span>enable<span class="op">-</span>libssp<span class="op">`:</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc<span class="op">/</span>xgcc <span class="op">-</span>Bgcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fstack<span class="op">-</span>protector<span class="op">-</span>all <span class="op">-</span>O2</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span>                       <span class="co">; allocated a bit of space for canary on stack</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">32</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    __stack_chk_guard<span class="op">(%</span>rip<span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>   <span class="co">; canary = __stack_chk_guard</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span>                   <span class="co">; store canary on stack</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>        xorl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span>                      <span class="co">; clean registers up</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>                    <span class="co">; initial `*p = v;` code</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>                   <span class="co">; load canary value back from stack</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        subq    __stack_chk_guard<span class="op">(%</span>rip<span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>   <span class="co">; compare to the reference value</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>L5                             <span class="co">; exit if canary comparison failed</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>        .cfi_remember_state</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">8</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span>                                     <span class="co">; exit `wr()`</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>        .cfi_restore_state</span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    __stack_chk_fail                <span class="co">; handle failure</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 13.0.0 20220724 (experimental)&quot;</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>The assembly code is very close to <code>--disable-libssp</code> case. The
difference is how canary is read:
instead of using thread-local <code>%fs:40</code> location <code>gcc</code> now resorts
to using a global <code>__stack_chk_guard</code> variable.</p>
<p>Note that <code>glibc</code> does not provde <code>__stack_chk_guard</code> symbol. In <code>gcc</code>’s
case expected to come from <code>libssp</code> library we just enabled. <code>gcc</code>’s spec
files add <code>-lssp</code> (or equivalent) to all link commands.</p>
<p>This means that binaries produced by <code>--enable-libssp</code> and by
<code>--disable-libssp</code> are slightly incompatible: the final result needs
to be linked by <code>--enable-libssp</code> <code>gcc</code>. Otherwise we’ll get linker
failures:</p>
<pre><code>$ printf &quot;void wr(long * p, long v){ *p = v; }&quot; | gcc/xgcc -Bgcc -c -x c - -fPIC -o a.o -fstack-protector-all -O2
$ gcc -shared a.o -o liba.so -Wl,-no-undefined
&lt;&lt;NIX&gt;&gt;/binutils-2.38/bin/ld: a.o: in function `wr':
&lt;stdin&gt;:(.text+0x7): undefined reference to `__stack_chk_guard'
collect2: error: ld returned 1 exit status</code></pre>
<p>Looks familiar? That’s exactly the same failure we started with.</p>
<h2 id="so-why-do-we-get-a-mix-of-gcc-flavours">So why do we get a mix of gcc flavours?</h2>
<p>Not all libc versions provide stack protector infrastructure. <code>gcc</code>
tries to guess at <code>./configure</code> time by
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l6734">peeking</a>
at target libc’s headers:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode m4"><code class="sourceCode m4"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>[if test <span class="ch">-</span>f $target_header_dir<span class="ch">/</span>features.h \</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="ch">&amp;&amp;</span> glibc_version_major_define<span class="ch">=</span>`$EGREP '<span class="ch">^</span>[     ]<span class="ch">*</span><span class="co">#[    ]*define[       ]+__GLIBC__[</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>   ]<span class="ch">+</span>[<span class="dv">0</span><span class="ch">-</span><span class="dv">9</span>]' $target_header_dir<span class="ch">/</span>features.h` \</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="ch">&amp;&amp;</span> glibc_version_minor_define<span class="ch">=</span>`$EGREP '<span class="ch">^</span>[     ]<span class="ch">*</span><span class="co">#[    ]*define[       ]+__GLIBC_MIN</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>OR__[   ]<span class="ch">+</span>[<span class="dv">0</span><span class="ch">-</span><span class="dv">9</span>]' $target_header_dir<span class="ch">/</span>features.h`; then</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  glibc_version_major<span class="ch">=</span>`echo &quot;$glibc_version_major_define&quot; <span class="ch">|</span> sed <span class="ch">-</span>e 's<span class="ch">/</span>.<span class="ch">*</span>__GLIBC__[</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>     ]<span class="ch">*//</span>'`</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  glibc_version_minor<span class="ch">=</span>`echo &quot;$glibc_version_minor_define&quot; <span class="ch">|</span> sed <span class="ch">-</span>e 's<span class="ch">/</span>.<span class="ch">*</span>__GLIBC_MINOR</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>__[     ]<span class="ch">*//</span>'`</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>fi]</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co"># Test for stack protector support in target C library.</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>AC_CACHE_CHECK<span class="ch">(</span>__stack_chk_fail in target C library<span class="ch">,</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  gcc_cv_libc_provides_ssp<span class="ch">,</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>  [gcc_cv_libc_provides_ssp<span class="ch">=</span>no</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    case &quot;$target&quot; in</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*-*-</span>musl<span class="ch">*)</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>         <span class="co"># All versions of musl provide stack protector</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>         gcc_cv_libc_provides_ssp<span class="ch">=</span>yes;;</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*-*-</span>linux<span class="ch">*</span> <span class="ch">|</span> <span class="ch">*-*-</span>kfreebsd<span class="ch">*-</span>gnu<span class="ch">)</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>      <span class="co"># glibc 2.4 and later provides __stack_chk_fail and</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># either __stack_chk_guard, or TLS access to stack guard canary.</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>      GCC_GLIBC_VERSION_GTE_IFELSE<span class="ch">(</span>[<span class="dv">2</span>]<span class="ch">,</span> [<span class="dv">4</span>]<span class="ch">,</span> [gcc_cv_libc_provides_ssp<span class="ch">=</span>yes]<span class="ch">,</span> [</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>      ...</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*)</span> gcc_cv_libc_provides_ssp<span class="ch">=</span>no ;;</span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    esac</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>  fi]<span class="ch">)</span></span></code></pre></div>
<p>Here <code>configure.ac</code> just greps <code>glibc</code>’s <code>features.h</code> header for library
version. It does not do usual linking probing as bootstrap frequently
starts from <code>gcc</code> and <code>glibc</code> headers alone.</p>
<p>In <code>nixpkgs</code>’s case <code>gcc</code> build in <code>cross-compile</code> case
(<code>host != target</code>) was looking at a wrong directory location by
attempting to add sysroot
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l2438">prefix</a>:</p>
<pre><code>if test x$host != x$target || test &quot;x$TARGET_SYSTEM_ROOT&quot; != x ||
   test x$build != x$host || test &quot;x$with_build_sysroot&quot; != x; then
  if test &quot;x$with_build_sysroot&quot; != x; then
    BUILD_SYSTEM_HEADER_DIR=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'
  else
    BUILD_SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'
  fi

  if test x$host != x$target
  then
    CROSS=&quot;-DCROSS_DIRECTORY_STRUCTURE&quot;
    ALL=all.cross
    SYSTEM_HEADER_DIR=$BUILD_SYSTEM_HEADER_DIR
  elif test &quot;x$TARGET_SYSTEM_ROOT&quot; != x; then
    SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'
  fi

  if test &quot;x$with_build_sysroot&quot; != &quot;x&quot;; then
    target_header_dir=&quot;${with_build_sysroot}${native_system_header_dir}&quot;
  elif test &quot;x$with_sysroot&quot; = x; then
    target_header_dir=&quot;${test_exec_prefix}/${target_noncanonical}/sys-include&quot;
  elif test &quot;x$with_sysroot&quot; = xyes; then
    target_header_dir=&quot;${test_exec_prefix}/${target_noncanonical}/sys-root${native_system_header_dir}&quot;
  else
    target_header_dir=&quot;${with_sysroot}${native_system_header_dir}&quot;
  fi
else
  target_header_dir=${native_system_header_dir}
fi</code></pre>
<p>Note how hard <code>gcc</code> tries:</p>
<ul>
<li><code>${buildsysroot}/${native_system_header_dir}</code></li>
<li><code>${exec_prefix}/${target}/sys-include</code></li>
<li><code>${exec_prefix}/${target}/sys-root${native_system_header_dir}</code></li>
<li><code>${sysroot}${native_system_header_dir}</code></li>
</ul>
<p><code>nixpkgs</code> provided none of these directories and build was falling back
to outdated <code>glibc-0.0</code> assumption.</p>
<p>Thus initial fix was simple: just add <code>--with-build-sysroot=/</code> option to
<code>gcc</code>’s <code>./configure</code> to trick it to use <code>/${native_system_header_dir}</code> path.</p>
<p>One-liner change! This allowed me to cross-build <code>gcc</code> for
<code>powerpc64le-linux</code> and make sure stack protector is using <code>glibc</code>
support code. Are we done?</p>
<h2 id="pandoras-box">Pandora’s box</h2>
<p>The <code>--with-build-sysroot=/</code> now started enabling all sorts of
libc-specific features. That should be fine on it’s own, but for
<code>nixpkgs</code> cross-build (<code>build != host == target</code>) case it was
like that for the first time.</p>
<p>Varios linux targets just worked with the fix. Mostly because
we are compiling from <code>glibc</code> to <code>glibc</code>. Or from <code>glibc</code> to <code>musl</code>.
It’s usually not that bad to miss a feature or two.</p>
<p>I was confident of the fix, but <a href="https://github.com/NixOS/ofborg">ofborg</a>
presubmit test told me that I broke <code>x86_64-darwin</code> <code>gcc</code> build:</p>
<pre><code>impure path `//' used in link
collect2: error: ld returned 1 exit status</code></pre>
<p>After a bit of debugging I found it to be just a false positive check
failure in <code>nixpkgs</code>-specific <code>ld</code> wrapper script. Wrapper complained
that <code>-syslibroot //</code> refers outside <code>/nix/store</code> path and thus breaks
the sandboxing. But in reality it’s a no-op flag. Thus I just skipped
this specific path in the wrapper.</p>
<p>I tried to cross-build <code>gcc</code>. It failed again. This time <code>ofborg</code> was
still unhappy and complained about missing <code>sys/sdt.h</code> header~</p>
<p>That was surprising: <code>darwin's</code> libc does provide <code>sys/sdt.h</code>,
while <code>glibc</code> does not. Why does it even try to use that header?
Normally <code>gcc</code>’s <code>configure.ac</code> <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l6807">probes it</a>
as a target header as well:</p>
<pre class="shell"><code># Test for &lt;sys/sdt.h&gt; on the target.
GCC_TARGET_TEMPLATE([HAVE_SYS_SDT_H])
AC_MSG_CHECKING(sys/sdt.h in the target C library)
have_sys_sdt_h=no
if test -f $target_header_dir/sys/sdt.h; then
  have_sys_sdt_h=yes
  AC_DEFINE(HAVE_SYS_SDT_H, 1,
            [Define if your target C library provides sys/sdt.h])
fi
AC_MSG_RESULT($have_sys_sdt_h)</code></pre>
<p>The answer was straightforward: <code>nixpkgs</code> incorrectly used host’s
headers as target headers!</p>
<p>After I sorted this failure yet another failure came up: <code>pkgsLLVM</code>
bootstrap was broken because <code>gcc</code> enables corss-compilation mode
for <code>build != host || host != target</code> case. But <code>nixpkgs</code> uses
<code>x86_64-unknown-linux-gnu</code> for both <code>gcc</code> (host) and <code>llvm</code>
(target) toolchains and bootstraps it as a proper cross-compiler.
That was easy to fix with <a href="https://github.com/NixOS/nixpkgs/pull/182666">nixpkgs/182666</a>.</p>
<p>Is that it? I’m not sure. I think we have a few more workarounds
buried in <code>nixpkgs</code> that stemmed from the fact that we used wrong
headers. One bug at a time.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nixpkgs</code> makes it trivial to try various cross-compilers with a
single command. <code>darwin</code> port was very useful to expose two bugs
in generic include layour scheme <code>nixpkgs</code> was using.</p>
<p>Reproducible environment made it possible to debug early stage of
<code>gcc</code> bootstrap when libc is not yet present for target. When I did
a similar work on Gentoo’s <code>crossdev</code> I was frequently tricked by
the fact that building initiall cross-toolchain frequently results
in a different result than after a <code>crossdev</code> rerun.</p>
<p><code>gcc</code>’s <code>./configure</code> is surprisingly resilient to all the invalid
configurations you throw at it. It always manages to produce something
that mostly works and gets you going as an initial porting effort.
I think it’s a good thing in the toolchain world as target environments
are so diverse. But it takes some time to debug it efficiently.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 30, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Dynamic linking is hard (SuperH version)</title>
    <link href="http://trofi.github.io/posts/250-dynamic-linking-is-hard-superh-version.html" />
    <id>http://trofi.github.io/posts/250-dynamic-linking-is-hard-superh-version.html</id>
    <published>2022-07-10T00:00:00Z</published>
    <updated>2022-07-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I got a bit more free weekend time and I’m slowly going through a
backlog of topics to write about.</p>
<p>Today I’ll write about the <code>GHC</code> bug from 4 years ago.</p>
<h2 id="the-problem">The problem</h2>
<p>John Paul Adrian Glaubitz found yet another interesting case of <strong>GHC</strong> doing
<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/15338">something very unusual</a>.</p>
<p>Namely <strong>ghc-pkg</strong> was not able to print it’s own version when (and only when)
redirected to a … pipe(!):</p>
<pre><code># good:
$ ghc-pkg --version
GHC package manager version 8.2.2

# bad:
$ ghc-pkg --version | cat
</code></pre>
<p>“Looks like a very simple coding error” was my thought. I attempted the
same test on <strong>ghc-HEAD</strong> and reproduced strange behaviour.</p>
<p><strong>ghc-pkg</strong> is a
<a href="https://gitlab.haskell.org/ghc/ghc/-/blob/master/utils/ghc-pkg/Main.hs">simple single-source tool</a>.
It was easy to reduce the original down to the following minimal example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- a.hs</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.IO</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    hSetBuffering stdout (<span class="dt">BlockBuffering</span> <span class="dt">Nothing</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    hPutStrLn stdout <span class="st">&quot;hello&quot;</span></span></code></pre></div>
<p>Quiz question: what do you think is a bug here?</p>
<p>The caveat is that all this happens on
<a href="https://en.wikipedia.org/wiki/SuperH">SuperH</a> architecture.</p>
<pre><code>$ inplace/bin/ghc-stage1 --make a.hs -O1 -dynamic
$ /usr/bin/qemu-sh4 -L /usr/sh4-unknown-linux-gnu/ ./a
&lt;empty&gt;</code></pre>
<p>Already see the bug? Me neiter.</p>
<h2 id="what-is-superh">What is SuperH?</h2>
<p><strong>SuperH</strong> (or <strong>sh</strong>) is a 32-bit <strong>RISC</strong> architecture designed by
<strong>Hitachi</strong>. <strong>Sega Saturn</strong>, <strong>Sega 32X</strong> and <strong>Sega Dreamcast</strong>
all use <strong>sh</strong>-based chips. <strong>SuperH</strong> also hides in many controllers
like <strong>CD-ROM</strong>.</p>
<p><strong>SuperH</strong> recently got new life in development community
after a bunch of related patents expired in 2015.</p>
<p>From a software development standpoint (as in, shared bugs) <strong>sh</strong>
feels like <strong>m68k</strong>. For example it’s instruction length is 2 bytes
which drives some low-level toolchain decisions to be similar to <strong>m68k</strong>.</p>
<p>Let’s have a look at a disassembly of a <strong>fabs</strong> function in
<strong>glibc</strong> to get a feel for this architecture:</p>
<pre><code>000213cc &lt;fabs@@GLIBC_2.2&gt;:
   213cc:       c6 2f           mov.l   r12,@-r15
   213ce:       0e c7           mova    21408 &lt;fabs@@GLIBC_2.2+0x3c&gt;,r0
   213d0:       0d dc           mov.l   21408 &lt;fabs@@GLIBC_2.2+0x3c&gt;,r12        ! 76c00
   213d2:       0e d3           mov.l   2140c &lt;fabs@@GLIBC_2.2+0x40&gt;,r3 ! 48
   213d4:       0c 3c           add     r0,r12
   213d6:       4c f0           fmov    fr4,fr0
   213d8:       22 4f           sts.l   pr,@-r15
   213da:       c3 62           mov     r12,r2
   213dc:       3c 32           add     r3,r2
   213de:       22 62           mov.l   @r2,r2
   213e0:       fc 7f           add     #-4,r15
   213e2:       5c f1           fmov    fr5,fr1
   213e4:       22 63           mov.l   @r2,r3
   213e6:       32 2f           mov.l   r3,@r15
   213e8:       00 e3           mov     #0,r3
   213ea:       f2 67           mov.l   @r15,r7
   213ec:       22 63           mov.l   @r2,r3
   213ee:       70 33           cmp/eq  r7,r3
   213f0:       00 e7           mov     #0,r7
   213f2:       00 e3           mov     #0,r3
   213f4:       04 8f           bf.s    21400 &lt;fabs@@GLIBC_2.2+0x34&gt;
   213f6:       5d f0           fabs    fr0
   213f8:       04 7f           add     #4,r15
   213fa:       26 4f           lds.l   @r15+,pr
   213fc:       0b 00           rts
   213fe:       f6 6c           mov.l   @r15+,r12
   21400:       03 d7           mov.l   21410 &lt;fabs@@GLIBC_2.2+0x44&gt;,r7 ! fffe5a52
   21402:       03 07           bsrf    r7
   21404:       09 00           nop
   21406:       09 00           nop
   21408:       00 6c           mov.b   @r0,r12
   2140a:       07 00           mul.l   r0,r0
   2140c:       48 00           .word 0x0048
   2140e:       00 00           .word 0x0000
   21410:       52 5a           mov.l   @(8,r5),r10
   21412:       fe ff           fmac    fr0,fr15,fr15</code></pre>
<p>A few things to note here:</p>
<ul>
<li><p>Instructions are only 2 bytes long. This makes the task of
encoding large branch offsets especially tricky: you need to
store 32-bit offset somere in nearby memory. In the example
above it’s <strong>.word 0x0048; .word 0x0000</strong>.</p></li>
<li><p><strong>r15</strong> is a stack pointer</p></li>
<li><p><strong>SuperH</strong> support increments/decrements as part of the main
instruction:</p>
<ul>
<li><strong>sts.l pr,@-r15</strong>: push return address on stack (pre-decrement)</li>
<li><strong>lds.l <span class="citation" data-cites="r15">@r15</span>+,pr</strong>: pop return address from stack (post-increment)</li>
</ul></li>
<li><p>There are <strong>FPU</strong> instructions like <strong>fabs</strong> itself.</p></li>
</ul>
<p>Handy! But it does not really matter all that for our particular bug :)</p>
<h2 id="the-gist-of-the-bug">The gist of the bug</h2>
<p>Before digging deeper into the bug I tried the same reproducer on a
bunch of targets using <strong>qemu</strong> and using real hardware where I could
reach. Results were:</p>
<ul>
<li>broken: <strong>sh4</strong> and <strong>m68k</strong></li>
<li>working: <strong>x86_64</strong>, <strong>mipsn32</strong>, <strong>powerpc</strong>, <strong>powerpc64</strong>, <strong>sparc</strong></li>
</ul>
<p><strong>x86_64</strong> and <strong>powerpc{,64}</strong> are targets with native <strong>GHC</strong> code
generation. <strong>mips</strong>, <strong>sparc</strong>, <strong>sh4</strong> and <strong>m68k</strong> are <strong>via-C</strong>
(<strong>unregisterised</strong>) targets. Thus it’s probably not just a bug in
unregisterised backend.</p>
<p>It also not just 32 vs 64 bit bug (<strong>sparc</strong> is 32-bit here).</p>
<p>I dug a bit more into the failure and found that <strong>haskell</strong>-level
<strong>System.IO.stdout</strong> closure (rough equivalent of <strong>C</strong>’s <strong>stdout</strong>
global) is present in memory in multiple places! And different
pieces of code access different copies of it.</p>
<p>Specifically the code that initialises <strong>System.IO.stdout</strong> fills
all fields diligently. But code that writes to it uses default
object full of zeros.</p>
<p>Jessica Clarke pointed at <strong>GHC</strong>’s use of <strong>-Bsymbolic</strong> linker
option that breaks various <strong>C</strong>-level assumptions. <strong>GHC</strong>’s native
code generator specifically tries to generate code compatible with
<strong>-Bsymbolic</strong>. But when unregisterised backend is used <strong>GHC</strong> has
no control of what <strong>gcc</strong> produces. And <strong>gcc</strong> breaks the assumptions.</p>
<p>In <strong>GHC</strong>’s case <strong>-Bsymbolic</strong> is a performance optimization. It’s not
a requirement to get haskell compiler on a platform. Thus the simple fix
was to avoid use of it in unregisterised codegen with
<a href="https://gitlab.haskell.org/ghc/ghc/-/commit/8ec48990fee9e245bb2fe40dc6f65b61b8612157">the patch</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/compiler/main/SysTools.hs</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/compiler/main/SysTools.hs</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -548,1 +548,1 @@ linkDynLib dflags0 o_files dep_packages</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>             let bsymbolicFlag = -- ...</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="st">-                                [&quot;-Wl,-Bsymbolic&quot;]</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                [&quot;-Wl,-Bsymbolic&quot; | not unregisterised]</span></span></code></pre></div>
<h2 id="but-how-exactly-did-it-break">But how exactly did it break?</h2>
<p>The above probably does not make much sense. What is <strong>-Bsymbolic</strong>?
Why does it make things worse if it’s just an optimization? Why do some
unreg targets are not affected?</p>
<p>Let’s look at a smaller example in <strong>C</strong>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* lib.c: */</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> g <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> lib_g<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> g<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* prog.c */</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">/* declarations from lib.c */</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> g<span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> lib_g<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;before: main.g=%i; lib_g()=%i</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> g<span class="op">,</span> lib_g<span class="op">());</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    g <span class="op">=</span> <span class="dv">12345678</span><span class="op">;</span> <span class="co">/* Was 42. */</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;after:  main.g=%i; lib_g()=%i</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> g<span class="op">,</span> lib_g<span class="op">());</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here we have library code with one global variable <strong>g</strong> and
a getter function <strong>lib_g()</strong>. And a main program where
<strong>main()</strong> function prints initial value of <strong>g</strong> global directly
and via <strong>lib_g()</strong> getter. We also change <strong>g</strong> value directly
and print result again.</p>
<p>Nothing too complicated.</p>
<p>Here is how things work when we build it as a single executable:</p>
<pre><code>$ gcc -O1 lib.c prog.c -o good
$ ./good
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>No surprise here:</p>
<ul>
<li>before the store both <strong>g</strong> and <strong>lib_g()</strong> return <strong>42</strong></li>
<li>after the store both <strong>g</strong> and <strong>lib_g()</strong> return <strong>12345678</strong></li>
</ul>
<p>It’s trivial. What could possible go wrong here?</p>
<p>Now let’s try to build the same source as a pair of executable
and it’s shared library:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o good-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ ./good-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>Same thing.</p>
<p>To be even clearer the data flow is the following:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-1.svg" /></p>
<p>Here green arrows denote data reads, light green boxes
denote intructions that perform reads. Cyan shade shows the
writes and write instructions.</p>
<p>All the paths directly or indirectly read and write the same <strong>g</strong> location.
Seems like no place to go wrong, right?</p>
<p>Now let’s add a <strong>-Wl,-Bsymbolic</strong> linker option used by <strong>GHC</strong>. <strong>man ld</strong>
says:</p>
<pre><code>   -Bsymbolic
       When creating a shared library, bind references to global symbols to the
       definition within the shared library, if any.  Normally, it is possible for
       a program linked against a shared library to override the definition within
       the shared library.  This option is only meaningful on ELF platforms which
       support shared libraries.</code></pre>
<p>Overrides usually happen when we define a symbol in multiple places: one in shared
library and another in executable program. One of them has to win. <strong>LD_PRELOAD</strong>
frequently relies on symbol override semantics.</p>
<p>But does our program override any definitions? If feels like we don’t do
anything special: we define all the things once and use them the simplest
way possible, right?</p>
<p>Let’s try:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ ./symbolic-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=42</code></pre>
<p>Whoops. What happens here? Why do <strong>g</strong> and <strong>lib_g()</strong> see different values?</p>
<p>Let’s look at final generated code. I’ll start from simplest case without an
external library where things stil worked. Building:</p>
<pre><code>$ gcc -O1 lib.c prog.c -o good
$ objdump -DR good</code></pre>
<p>Peeking inside:</p>
<pre><code>Disassembly of section .text:
        ...
0000000000401126 &lt;lib_g&gt;:
  401126:       8b 05 04 2f 00 00       mov    0x2f04(%rip),%eax        # 404030 &lt;g&gt;
  40112c:       c3                      ret

000000000040112d &lt;main&gt;:
  40112d:       48 83 ec 08             sub    $0x8,%rsp
  401131:       e8 f0 ff ff ff          call   401126 &lt;lib_g&gt;
  401136:       89 c2                   mov    %eax,%edx
  401138:       8b 35 f2 2e 00 00       mov    0x2ef2(%rip),%esi        # 404030 &lt;g&gt;
  40113e:       bf 08 20 40 00          mov    $0x402008,%edi
  401143:       b8 00 00 00 00          mov    $0x0,%eax
  401148:       e8 e3 fe ff ff          call   401030 &lt;printf@plt&gt;
  40114d:       c7 05 d9 2e 00 00 4e    movl   $0xbc614e,0x2ed9(%rip)   # 404030 &lt;g&gt;
  401154:       61 bc 00
  401157:       e8 ca ff ff ff          call   401126 &lt;lib_g&gt;
  40115c:       89 c2                   mov    %eax,%edx
  40115e:       8b 35 cc 2e 00 00       mov    0x2ecc(%rip),%esi        # 404030 &lt;g&gt;
  401164:       bf 28 20 40 00          mov    $0x402028,%edi
  401169:       b8 00 00 00 00          mov    $0x0,%eax
  40116e:       e8 bd fe ff ff          call   401030 &lt;printf@plt&gt;
  401173:       b8 00 00 00 00          mov    $0x0,%eax
  401178:       48 83 c4 08             add    $0x8,%rsp
  40117c:       c3                      ret

Disassembly of section .data:
        ...
0000000000404030 &lt;g&gt;:
  404030:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>Here our global variable <strong>g</strong> is located in <strong>.data</strong> section at <strong>0x404030</strong> address.
<strong>gcc</strong> used most efficient code to access it by using <strong>RIP</strong>-relative addressing:</p>
<ul>
<li>read via: <strong>mov 0x2ef2(%rip),%esi # 404030 &lt;g&gt;</strong>.</li>
<li>write via: <strong>movl $0xbc614e,0x2ed9(%rip) # 404030 &lt;g&gt;</strong></li>
</ul>
<p>Note that <strong>0x2ef2(%rip)</strong> is a fixed offset from the current instruction. In this case
it always refers to <strong>0x404030</strong> address of <strong>g</strong> and does not depend on any other
library that could be loaded into address space along the program.</p>
<p>There is the picture form of the above (same legend as in previous picture):</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-2.svg" /></p>
<p>It should be obvious from the picture that all the reads and writes to <strong>g</strong> happen at
the same <strong>0x404030</strong> location.</p>
<p>Now let’s have a look at our broken example. Building:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ objdump -DR libbug.so
$ objdump -DR symbolic-shared</code></pre>
<p>Peeking inside.</p>
<p>Let’s first look at <strong>libbug.so</strong>:</p>
<pre><code>Disassembly of section .text:
00000000000010f9 &lt;lib_g&gt;:
    10f9:       48 8d 05 20 2f 00 00    lea    0x2f20(%rip),%rax        # 4020 &lt;g&gt;
    1100:       8b 00                   mov    (%rax),%eax
    1102:       c3                      ret

Disassembly of section .data:
        ...
0000000000004020 &lt;g&gt;:
    4020:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>The code (<strong>.text</strong>) part is almost identical to our <strong>prog</strong> case. Except that instead of
direct <strong>mov 0x2f04(%rip),%eax</strong> instruction it uses a pair of instructions:
<strong>lea 0x2f20(%rip),%rax</strong> / <strong>mov (%rax),%eax</strong>. Both forms are semantically
equivalent.</p>
<p>Homework question: why does <strong>libbug.so</strong> use less efficient encoding?</p>
<p>The data (<strong>.data</strong>) part hosts <strong>g</strong> global variable at <strong>0x4020</strong> address. It’s not a real address
as shared libraries could normally be loaded at any address. We would need to add a
base address to every address we see. But we can pretend for now the library will be
loaded at address <strong>0</strong> and all the addresses we see are real and valid.</p>
<p><strong>symbolic-shared</strong> has a few new things:</p>
<pre><code>Disassembly of section .text:
        ...
0000000000401136 &lt;main&gt;:
  401136:       48 83 ec 08             sub    $0x8,%rsp
  40113a:       e8 f1 fe ff ff          call   401030 &lt;lib_g@plt&gt;
  40113f:       89 c2                   mov    %eax,%edx
  401141:       8b 35 f1 2e 00 00       mov    0x2ef1(%rip),%esi        # 404038 &lt;g@@Base&gt;
  401147:       bf 08 20 40 00          mov    $0x402008,%edi
  40114c:       b8 00 00 00 00          mov    $0x0,%eax
  401151:       e8 ea fe ff ff          call   401040 &lt;printf@plt&gt;
  401156:       c7 05 d8 2e 00 00 4e    movl   $0xbc614e,0x2ed8(%rip)   # 404038 &lt;g@@Base&gt;
  40115d:       61 bc 00
  401160:       e8 cb fe ff ff          call   401030 &lt;lib_g@plt&gt;
  401165:       89 c2                   mov    %eax,%edx
  401167:       8b 35 cb 2e 00 00       mov    0x2ecb(%rip),%esi        # 404038 &lt;g@@Base&gt;
  40116d:       bf 28 20 40 00          mov    $0x402028,%edi
  401172:       b8 00 00 00 00          mov    $0x0,%eax
  401177:       e8 c4 fe ff ff          call   401040 &lt;printf@plt&gt;
  40117c:       b8 00 00 00 00          mov    $0x0,%eax
  401181:       48 83 c4 08             add    $0x8,%rsp
  401185:       c3                      ret
...
Disassembly of section .bss:

0000000000404038 &lt;g&gt;:
  404038:       00 00                   add    %al,(%rax)
                        404038: R_X86_64_COPY   g@@Base
        ...</code></pre>
<p>On the surface <strong>main()</strong> has identical code to our <strong>prog</strong> case as well:
same <strong>RIP-relatve</strong> addressing to reach local <strong>g</strong>. Except that <strong>g</strong> is
not supposed to be local! It’s loaded from unknown address in external shared
library! How did it get into our binary?</p>
<p><strong>gcc</strong> code generator assumes it’s local and relies on so called <strong>COPY</strong>
relocation (<strong>R_X86_64_COPY</strong> in our case) to copy data from external library
into the executable binary.</p>
<p>Effectively that means that at load time we will have two independen copies of <strong>g</strong>:</p>
<ul>
<li>one in <strong>libbug.so</strong> at address <strong>0x4020</strong> used by <strong>lib_g()</strong> function</li>
<li>and another in <strong>symbolic-shared</strong> binary at address <strong>0x404038</strong> used
by <strong>main()</strong> direct references.</li>
</ul>
<p>Or the same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-3.svg" /></p>
<p>Compared to previous pictures blue arrows show load-time data copy from
library data into binary data. And red arrow shows reads from stale source
location.</p>
<p>Note that <strong>main()</strong> always reads and write only local copy of <strong>g</strong>.
It never looks at <strong>libbug.so</strong>’s original. While <strong>lib_g()</strong> only
ever uses <strong>libbug.so</strong>’s original.</p>
<p>That is the negative effect of <strong>-Wl,-Bsymbolic</strong>: we effectively got
two independent <strong>g</strong> global variables that only happen to share initial
value at startup time.</p>
<p>So how does it work at all without <strong>-Wl,-Bsymbolic</strong>? We did not pass that
linker flag to the final binary. Only shared library was “corrupted” by it.</p>
<p>Quick quiz: what is you guess? Would the <strong>COPY</strong> relocation disappear magically?
Or library code would transform into something else?</p>
<p>Let’s have a look at a working shared library example now. Building:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o good-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ objdump -DR libbug.so
$ objdump -DR good-shared</code></pre>
<p>Peeking inside. <strong>libbug.so</strong>:</p>
<pre><code>Disassembly of section .text:
        ...
00000000000010f9 &lt;lib_g&gt;:
    10f9:       48 8b 05 e8 2e 00 00    mov    0x2ee8(%rip),%rax        # 3fe8 &lt;g@@Base-0x38&gt;
    1100:       8b 00                   mov    (%rax),%eax
    1102:       c3                      ret

Disassembly of section .got:

0000000000003fd8 &lt;.got&gt;:
        ...
                        3fe8: R_X86_64_GLOB_DAT g@@Base
Disassembly of section .data:
        ...
0000000000004020 &lt;g&gt;:
    4020:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>This time the code is a bit different from <strong>prog</strong> and <strong>-Bsymbolic</strong> case.</p>
<p><strong>g</strong> is read not by one <strong>mov</strong> instruction as before, but by two. Now we have
an indirection (via <strong>.got</strong>, Global Offset Table) where real address of <strong>g</strong>
is stored. And library does not know it’s own global variable address!</p>
<p>And <strong>good-shared</strong> executable is exactly the same as <strong>symbolic-shared</strong>:</p>
<pre><code>Disassembly of section .text:
0000000000401136 &lt;main&gt;:
  401136:       48 83 ec 08             sub    $0x8,%rsp
  40113a:       e8 f1 fe ff ff          call   401030 &lt;lib_g@plt&gt;
  40113f:       89 c2                   mov    %eax,%edx
  401141:       8b 35 f1 2e 00 00       mov    0x2ef1(%rip),%esi        # 404038 &lt;g@@Base&gt;
  401147:       bf 08 20 40 00          mov    $0x402008,%edi
  40114c:       b8 00 00 00 00          mov    $0x0,%eax
  401151:       e8 ea fe ff ff          call   401040 &lt;printf@plt&gt;
  401156:       c7 05 d8 2e 00 00 4e    movl   $0xbc614e,0x2ed8(%rip)   # 404038 &lt;g@@Base&gt;
  40115d:       61 bc 00
  401160:       e8 cb fe ff ff          call   401030 &lt;lib_g@plt&gt;
  401165:       89 c2                   mov    %eax,%edx
  401167:       8b 35 cb 2e 00 00       mov    0x2ecb(%rip),%esi        # 404038 &lt;g@@Base&gt;
  40116d:       bf 28 20 40 00          mov    $0x402028,%edi
  401172:       b8 00 00 00 00          mov    $0x0,%eax
  401177:       e8 c4 fe ff ff          call   401040 &lt;printf@plt&gt;
  40117c:       b8 00 00 00 00          mov    $0x0,%eax
  401181:       48 83 c4 08             add    $0x8,%rsp
  401185:       c3                      ret
...
Disassembly of section .bss:

0000000000404038 &lt;g&gt;:
  404038:       00 00                   add    %al,(%rax)
                        404038: R_X86_64_COPY   g@@Base
        ...</code></pre>
<p>Here we see the same pattern: again <strong>g</strong> is copied out of it’s real
location (<strong>libbug.so</strong> provides symbol contents) and the rest of
program uses this copy.</p>
<p>The same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-4.svg" /></p>
<p>Magenta arrows shows the code that reads final address of <strong>g</strong> global
variable. Note that now nothing (aside from <strong>COPY</strong> relocation) reads
original <strong>g</strong> global variable at <strong>0x4020</strong> address: everything including
<strong>libbug.so</strong> uses executable’s copy of <strong>g</strong> at address <strong>0x404038</strong>.</p>
<p>Now we can make <strong>-Wl,-Bsymbolic</strong> work for us by enabling <strong>-fPIC</strong>
code on final executable:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN' -fPIC
./symbolic-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>Works as expected! Homework quiz: why does it work?</p>
<h2 id="parting-words">Parting words</h2>
<p>Note that with <strong>-fPIC</strong> <strong>gcc</strong> generates the code to always go through
<strong>.got</strong> indirection to both allow for easy override (interposition) and
to allow final executables to have more efficient access to globals without
<strong>.got</strong> indirection.</p>
<p>This effectively penaizes library code in favour of speeding up binary code.
This tradeoff implies that most of the time library globals will be accessed
from outside the library (rather than inside the library). To get these
limitations around performance critical libraries (like <strong>glibc</strong>) go to the
great lengths to avoid use of externally visible global symbols and use
sorts of <strong><strong>attribute</strong>((visibility(“hidden”)))</strong> / <strong>-fvisibility=hidden</strong>
to get performance back.</p>
<p><strong>GHC</strong>’s strategy is to use <strong>-Bsymbolic</strong> to prioritize library code access
and be careful about using <strong>-fPIC</strong> style code on executables.</p>
<p><strong>COPY</strong> relocations have all sorts of unusual side-effects. They actually copy
data (which might take a considerable startup time for large programs), they
leak object sizes across binaries (as one needs to know how much to copy).
<a href="http://trofi.github.io/posts/195-dynamic-linking-ABI-is-hard.html">Nettle bug</a> is an interesting case
of <strong>ABI</strong> breakage of the past.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 10, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>A small update on 'make --shuffle' mode</title>
    <link href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html" />
    <id>http://trofi.github.io/posts/249-an-update-on-make-shuffle.html</id>
    <published>2022-06-21T00:00:00Z</published>
    <updated>2022-06-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="tldr">Tl;DR</h1>
<p>GNU Make --shuffle mode <a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=621d3196fae94e9006a7e9c5ffdaf5ec209bf832">entered upstream git repository</a> \o/.</p>
<p>For testing convenience I also tarballed the development <strong>GNU make</strong>
snapshot from today’s <a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=84ed34ba5a32dd52600c756445f3724c9e23cf95">git state</a>:
<a href="https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619.tar.lz" class="uri">https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619.tar.lz</a>.</p>
<p>Note that <strong>--shuffle</strong> is not enabled by default. You can enable it
by any of below methods whichever matches best your environment:</p>
<ul>
<li><p>Run <strong>make --shuffle</strong>. For casual testing.</p></li>
<li><p>Export <strong>GNUMAKEFLAGS=--shuffle</strong> environment variable. For
day-to-day development or distribution-wide testing. It is also a
safe value for <strong>GNU make</strong> that does not yet understand <strong>--shuffle</strong> option.</p>
<p>Update: changed <del>MAKEFLAGS</del> to <strong>GNUMAKEFLAGS</strong> as <strong>bmake</strong> does not
skip unknown options and fails. Noticed by Toralf.</p></li>
<li><p>Apply <a href="https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619-random-by-default.patch" class="uri">https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619-random-by-default.patch</a>
on top of snapshot tarball. Useful for environments where there is no
easy way to pass a parameter to <strong>make</strong> or to set <strong>GNUMAKEFLAGS</strong>
variable.</p></li>
</ul>
<h1 id="minor-improvements">minor improvements</h1>
<p>Compared to the initial patch announced as a
<a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">proof of concept</a>
there is one extra change: presence of <strong>.NOTPARALLEL:</strong> directive
in a <strong>Makefile</strong> now disables shuffling in that file.</p>
<p>It was done to accommodate rare projects that rely on execution order
specified in <strong>Makefile</strong> and don’t plan to make dependencies correct
in near future. The example is <strong>netpbm</strong>:
<a href="https://sourceforge.net/p/netpbm/code/HEAD/tree/trunk/GNUmakefile#l110" class="uri">https://sourceforge.net/p/netpbm/code/HEAD/tree/trunk/GNUmakefile#l110</a></p>
<h1 id="failure-examples">failure examples</h1>
<p>A few new bugs were found and/or fixed:</p>
<ul>
<li>vim: <a href="https://github.com/vim/vim/pull/9978" class="uri">https://github.com/vim/vim/pull/9978</a></li>
<li>groff: <a href="https://savannah.gnu.org/bugs/?62084" class="uri">https://savannah.gnu.org/bugs/?62084</a></li>
<li>gpm: <a href="https://github.com/telmich/gpm/pull/43" class="uri">https://github.com/telmich/gpm/pull/43</a></li>
<li>gnu-efi: <a href="https://sourceforge.net/p/gnu-efi/patches/84/" class="uri">https://sourceforge.net/p/gnu-efi/patches/84/</a></li>
<li>cmigemo: <a href="https://github.com/koron/cmigemo/pull/29" class="uri">https://github.com/koron/cmigemo/pull/29</a></li>
<li>harvid: <a href="https://github.com/NixOS/nixpkgs/pull/178647" class="uri">https://github.com/NixOS/nixpkgs/pull/178647</a></li>
<li>subversion: <a href="https://issues.apache.org/jira/browse/SVN-4901" class="uri">https://issues.apache.org/jira/browse/SVN-4901</a></li>
<li>ocamlbuild: <a href="https://github.com/ocaml/ocamlbuild/pull/318" class="uri">https://github.com/ocaml/ocamlbuild/pull/318</a></li>
<li>ghc(!): <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8531" class="uri">https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8531</a></li>
<li>slang: fixed in slang-pre2.3.3-77 snapshot in 5d36d7c2410cbd640470a9c97cc544d257c64660 commit. Could not find web UI for repository.</li>
<li>strace: <a href="https://github.com/strace/strace/pull/215" class="uri">https://github.com/strace/strace/pull/215</a></li>
<li>ski: <a href="https://github.com/trofi/ski/commit/7cc1ced067bf3822ef87c323b6110f38bc0ca1b5" class="uri">https://github.com/trofi/ski/commit/7cc1ced067bf3822ef87c323b6110f38bc0ca1b5</a></li>
<li>heimdal: <a href="https://github.com/heimdal/heimdal/pull/999" class="uri">https://github.com/heimdal/heimdal/pull/999</a></li>
<li>src-highlite: <a href="https://savannah.gnu.org/patch/index.php?10262" class="uri">https://savannah.gnu.org/patch/index.php?10262</a></li>
<li>gcc: <a href="https://gcc.gnu.org/PR106162" class="uri">https://gcc.gnu.org/PR106162</a>, <a href="https://gcc.gnu.org/pipermail/gcc-patches/2022-September/601708.html" class="uri">https://gcc.gnu.org/pipermail/gcc-patches/2022-September/601708.html</a></li>
<li>openipmi: <a href="https://sourceforge.net/p/openipmi/patches/37/" class="uri">https://sourceforge.net/p/openipmi/patches/37/</a></li>
<li>avldrums.lv2: <a href="https://github.com/x42/avldrums.lv2/pull/22" class="uri">https://github.com/x42/avldrums.lv2/pull/22</a></li>
<li>exifprobe: <a href="https://github.com/hfiguiere/exifprobe/pull/21" class="uri">https://github.com/hfiguiere/exifprobe/pull/21</a></li>
<li>x264: <a href="https://code.videolan.org/videolan/x264/-/merge_requests/114" class="uri">https://code.videolan.org/videolan/x264/-/merge_requests/114</a></li>
<li>ispell: will be fixed in 3.4.06. Could not find web UI for the repository.</li>
<li>mingw-w64: <a href="https://sourceforge.net/p/mingw-w64/mingw-w64/ci/e1b0c1420bbd52ef505c71737c57393ac1397b0a/" class="uri">https://sourceforge.net/p/mingw-w64/mingw-w64/ci/e1b0c1420bbd52ef505c71737c57393ac1397b0a/</a></li>
</ul>
<p>Nothing complicated. Just a few missing dependencies.</p>
<p>Give it a try!</p>

<div class="info">
    Posted on June 21, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>How do shared library collisions break?</title>
    <link href="http://trofi.github.io/posts/248-how-do-shared-library-collisions-break.html" />
    <id>http://trofi.github.io/posts/248-how-do-shared-library-collisions-break.html</id>
    <published>2022-06-18T00:00:00Z</published>
    <updated>2022-06-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="background">background</h1>
<p>Shared libraries are fun. The concept is simple in theory: we move a
piece of code out of the main application into a separate (dynamically
loadable) binary and nothing changes:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-1.svg" /></p>
<p>In practice we get two moving parts where each could be updated
separately. People still don’t agree if shared libraries are a net win
or a net loss as a concept :)</p>
<p>When you maintain both application and library as a single code base the
difference does not really matter. Things get interesting when library
starts it’s own life as a separate project and gets it’s own dependencies
over time.</p>
<p>What if we want to use two different versions of the same library project
within a single application. Say, use <strong>gtk-2</strong> and <strong>gtk-3</strong> together or
<strong>ffmpeg-4</strong> and <strong>ffmpeg-5</strong>.</p>
<p>You might even do it by accident by including two dependencies that rely
on different <strong>ffmpeg</strong> versions:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-2.svg" /></p>
<p>Is it a safe combination? Can we just link against both versions of a
library and be done with it? Let’s try!</p>
<h1 id="toy-example">toy example</h1>
<p>We’ll need an executable and two libraries to play with. Library API
provides a single function to tell us it’s name:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat lib.h</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> lib_name <span class="op">(</span><span class="dt">void</span><span class="op">);</span></span></code></pre></div>
<p>Library sources implement the API by returning pointer to source file name:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat lib1.c</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lib.h&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> lib_name <span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span>  <span class="cf">return</span> __FILE__<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat lib2.c</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lib.h&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> lib_name <span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span>  <span class="cf">return</span> __FILE__<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>Main program:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat main.c</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lib.h&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* important part: */</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;lib_name() = %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> lib_name<span class="op">());</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* library loading introspection: */</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;My address space:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> cmd<span class="op">[</span><span class="dv">1000</span><span class="op">];</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* search for code segments (should be at most one per loaded ELF) */</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    snprintf<span class="op">(</span>cmd<span class="op">,</span> <span class="kw">sizeof</span> <span class="op">(</span>cmd<span class="op">),</span> <span class="st">&quot;grep 'r-x' /proc/%u/maps&quot;</span><span class="op">,</span> getpid<span class="op">());</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    system<span class="op">(</span>cmd<span class="op">);</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The important bit here is <strong>fprintf (stderr, “lib_name() = %s”, lib_name());</strong>.
The rest is convenience debugging to see what libraries are loaded
into address space.</p>
<p>What happens if we link <strong>main.c</strong> dynamically against both <strong>lib1.c</strong> and
<strong>lib2.c</strong> together as external shared libraries?</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-3.svg" /></p>
<p>Would linker complain? Would it pick first library? Or maybe the second one? It depends!</p>
<p>Let’s build shared libraries the simplest way possible and link
our program against them:</p>
<pre><code>$ mkdir -p l1 l2

# no SONAME

$ gcc -fPIC -shared lib1.c -o l1/libl1.so
$ gcc -fPIC -shared lib2.c -o l2/libl2.so

$ gcc main.c -o main1 -Ll1 -Ll2 -ll1 -ll2 -Wl,-rpath,'$ORIGIN/l1' -Wl,-rpath,'$ORIGIN/l2'
$ gcc main.c -o main2 -Ll1 -Ll2 -ll2 -ll1 -Wl,-rpath,'$ORIGIN/l1' -Wl,-rpath,'$ORIGIN/l2'</code></pre>
<p>Quiz question: what would these <strong>./main1</strong> and
<strong>./main2</strong> programs print when executed?</p>
<p>Now let’s compare the results:</p>
<pre><code>$ ./main1 | unnix
lib_name() = lib1.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404344872                         /home/slyfox/dev/c/shared-libs/main1
7f994d9e2000-7f994db4c000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f994dbb9000-7f994dbba000 r-xp 00001000 00:1b 1404344871                 /home/slyfox/dev/c/shared-libs/l2/libl2.so
7f994dbbe000-7f994dbbf000 r-xp 00001000 00:1b 1404344870                 /home/slyfox/dev/c/shared-libs/l1/libl1.so
7f994dbc5000-7f994dbea000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7fff98b52000-7fff98b54000 r-xp 00000000 00:00 0                          [vdso]

$ ./main2 | unnix
lib_name() = lib2.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404344873                         /home/slyfox/dev/c/shared-libs/main2
7f95c8773000-7f95c88dd000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f95c894a000-7f95c894b000 r-xp 00001000 00:1b 1404344870                 /home/slyfox/dev/c/shared-libs/l1/libl1.so
7f95c894f000-7f95c8950000 r-xp 00001000 00:1b 1404344871                 /home/slyfox/dev/c/shared-libs/l2/libl2.so
7f95c8956000-7f95c897b000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7ffdbb255000-7ffdbb257000 r-xp 00000000 00:00 0                          [vdso]</code></pre>
<p>Note: <strong>lib_name()</strong> returns two very different results. And that is for
a program that is linked against the same set of libraries and headers
in both cases!</p>
<p>A few more observations:</p>
<ul>
<li><strong>ld</strong> did not complain about <strong>lib_name()</strong> presence in both
<strong>libl1.so</strong> and <strong>libl2.so</strong>.</li>
<li>Both libraries are loaded into address space (visible in address space
dumps).</li>
<li><strong>./main{1,2}</strong> also did not complain about <strong>lib_name()</strong> presence in
both <strong>libl1.so</strong> and <strong>libl2.so</strong>.</li>
<li>Libraries happen to be loaded in order specified by <strong>-l</strong> options.</li>
</ul>
<p>Now let’s pretend that <strong>libl1.so</strong> and <strong>libl2.so</strong> don’t have material
difference and implement identical ABI and semantics. On <strong>ELF</strong> platforms
<strong>ABI</strong> and semantics are usualy reflected by a <strong>DT_SONAME</strong> tag attached
to a library. We can assign <strong>SONAME</strong> to built library with
<strong>-Wl,-soname,…</strong> flag. Let’s specify identical <strong>SONAME</strong> to both
libraries (I also had to create symlinks to <strong>SONAME</strong> name):</p>
<pre><code>$ mkdir -p l1 l2

# same SONAME

$ gcc -fPIC -shared lib1.c -o l1/libl1.so -Wl,-soname,libname.so.1
$ ln -s libl1.so l1/libname.so.1
$ gcc -fPIC -shared lib2.c -o l2/libl2.so -Wl,-soname,libname.so.1
$ ln -s libl2.so l2/libname.so.1

$ gcc main.c -o main1 -Ll1 -Ll2 -ll1 -ll2 -Wl,-rpath,'$ORIGIN/l1' -Wl,-rpath,'$ORIGIN/l2'
$ gcc main.c -o main2 -Ll1 -Ll2 -ll1 -ll2 -Wl,-rpath,'$ORIGIN/l2' -Wl,-rpath,'$ORIGIN/l1'</code></pre>
<p>Quiz question: how would these result differ compared to previous run?</p>
<p>Comparing the results again:</p>
<pre><code>$ ./main1 | unnix
lib_name() = lib1.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404345186                         /home/slyfox/dev/c/shared-libs/main1
7f3bf33c3000-7f3bf352d000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f3bf359a000-7f3bf359b000 r-xp 00001000 00:1b 1404345184                 /home/slyfox/dev/c/shared-libs/l1/libl1.so
7f3bf35a1000-7f3bf35c6000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7ffcb5934000-7ffcb5936000 r-xp 00000000 00:00 0                          [vdso]

$ ./main2 | unnix
lib_name() = lib2.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404345187                         /home/slyfox/dev/c/shared-libs/main2
7f2c1a48d000-7f2c1a5f7000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f2c1a664000-7f2c1a665000 r-xp 00001000 00:1b 1404345185                 /home/slyfox/dev/c/shared-libs/l2/libl2.so
7f2c1a66b000-7f2c1a690000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7ffd7c1ba000-7ffd7c1bc000 r-xp 00000000 00:00 0                          [vdso]</code></pre>
<p>Note:</p>
<ul>
<li>Only one example of a library with a specified <strong>SONAME</strong> is loaded into
memory: either <strong>libl1.so</strong> or <strong>libl2.so</strong>, but never both.</li>
<li>First library is loaded as specified by <strong>DT_RUNPATH</strong> tag (not by
<strong>-l</strong> option).</li>
</ul>
<p>Library order matters materially only if a symbol is present
in multiple shared libraries (a symbol collision is present). Otherwise
you don’t have to worry about it.</p>
<p>Another important assumption here is that <strong>lib.h</strong> is identical for both
<strong>libl1.so</strong> and <strong>libl2.so</strong>. It’s not always the case for more complex
scenarios: <strong>ffmpeg</strong> and <strong>gtk</strong> certainly change their API and data
structures across major releases (or even in different build configurations
for the same library release).</p>
<h1 id="diamond-dependency-trees">diamond dependency trees</h1>
<p>Is it a frequent problem to get a mix of libraries like that in a single
process? Or it’s a purely hypothetical problem not worth worrying about?</p>
<p>Let’s pick <strong>gdb</strong> executable (command line debugger) as an example.</p>
<p>Quiz question: how many libraries does <strong>gdb</strong> use as dependencies. Should it be just <strong>libc</strong>?
Maybe <strong>ncurses</strong> as well?</p>
<p><strong>ELF</strong> files have <strong>DT_NEEDED</strong> entries in <strong>.dynamic</strong> section. Those
list all immediate shared library dependencies. We can dump
<strong>DT_NEEDED</strong> entries with tools like <strong>objdump</strong>, <strong>readelf</strong>, <strong>scanelf</strong>,
<strong>patchelf</strong> and many others. I’ll use <strong>patchelf</strong>:</p>
<pre><code>$ patchelf --print-needed `which gdb` | nl
     1  libreadline.so.8
     2  libz.so.1
     3  libncursesw.so.6
     4  libpython3.9.so.1.0
     5  libdl.so.2
     6  libcrypt.so.1
     7  libm.so.6
     8  libexpat.so.1
     9  libipt.so.2
    10  libmpfr.so.6
    11  libgmp.so.10
    12  libsource-highlight.so.4
    13  libboost_regex.so.1.77.0
    14  libstdc++.so.6
    15  libgcc_s.so.1
    16  libpthread.so.0
    17  libc.so.6
    18  ld-linux-x86-64.so.2</code></pre>
<p>18 immediate libraries! Some of them have their own dependencies.
We can dump the whole tree with <strong>lddtree</strong>:</p>
<pre><code>$ lddtree `which gdb` | unnix | nl
lddtree `which gdb` | unnix | nl
     1  gdb =&gt; /run/current-system/sw/bin/gdb (interpreter =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2)
     2      libreadline.so.8 =&gt; /&lt;&lt;NIX&gt;&gt;/readline-8.1p2/lib/libreadline.so.8
     3      libz.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/zlib-1.2.12/lib/libz.so.1
     4      libncursesw.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507/lib/libncursesw.so.6
     5      libpython3.9.so.1.0 =&gt; /&lt;&lt;NIX&gt;&gt;/python3-3.9.13/lib/libpython3.9.so.1.0
     6      libdl.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libdl.so.2
     7      libcrypt.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libcrypt.so.1
     8      libm.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libm.so.6
     9      libexpat.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/expat-2.4.8/lib/libexpat.so.1
    10      libipt.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/libipt-2.0.4/lib/libipt.so.2
    11      libmpfr.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.so.6
    12      libgmp.so.10 =&gt; /&lt;&lt;NIX&gt;&gt;/gmp-with-cxx-6.2.1/lib/libgmp.so.10
    13      libsource-highlight.so.4 =&gt; /&lt;&lt;NIX&gt;&gt;/source-highlight-3.1.9/lib/libsource-highlight.so.4
    14      libboost_regex.so.1.77.0 =&gt; /&lt;&lt;NIX&gt;&gt;/boost-1.77.0/lib/libboost_regex.so.1.77.0
    15          librt.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/librt.so.1
    16          libicudata.so.71 =&gt; /&lt;&lt;NIX&gt;&gt;/icu4c-71.1/lib/libicudata.so.71
    17          libicui18n.so.71 =&gt; /&lt;&lt;NIX&gt;&gt;/icu4c-71.1/lib/libicui18n.so.71
    18          libicuuc.so.71 =&gt; /&lt;&lt;NIX&gt;&gt;/icu4c-71.1/lib/libicuuc.so.71
    19      libstdc++.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/gcc-11.3.0-lib/lib/libstdc++.so.6
    20      libgcc_s.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libgcc_s.so.1
    21      libpthread.so.0 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libpthread.so.0
    22      libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
    23      ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2</code></pre>
<p>Just 4 more libraries added by <strong>boost</strong> internals: <strong>libboost_regex.so.1.77.0</strong> -&gt; <strong>librt.so.1</strong>, <strong>libicudata.so.71</strong>, <strong>libicui18n.so.71</strong>,
<strong>libicuuc.so.71</strong>.</p>
<p>From <strong>lddtree</strong> output it might look like it’s a rare occasion when shared libraries
have their owne dependencies. That is misleading: <strong>lddtree</strong> hides already printed
entries by default.</p>
<p>Quiz question: guess how many dependencies does <strong>gdb</strong> have if we consider all the
duplicates.</p>
<p>We’ll use <strong>lddtree -a</strong> option to answer that question:</p>
<pre><code>$ lddtree -a `which gdb` | unnix | nl
     1  gdb =&gt; /run/current-system/sw/bin/gdb (interpreter =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2)
     2      libreadline.so.8 =&gt; /&lt;&lt;NIX&gt;&gt;/readline-8.1p2/lib/libreadline.so.8
     3          libncursesw.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507/lib/libncursesw.so.6
     4              libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
     5                  ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
     6          libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
     7              ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
     8      libz.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/zlib-1.2.12/lib/libz.so.1
     9          libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
    10              ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
    11      libncursesw.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507/lib/libncursesw.so.6
    12          libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
    13              ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
    14      libpython3.9.so.1.0 =&gt; /&lt;&lt;NIX&gt;&gt;/python3-3.9.13/lib/libpython3.9.so.1.0
    15          libdl.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libdl.so.2
    16              libc.so.6 =&gt; not found
    17          libcrypt.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libcrypt.so.1
    18              libc.so.6 =&gt; not found
...
   263      libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
   264          ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
   265      ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2</code></pre>
<p>265! It’s more than 10x compared to the output without duplicates. A thing
to note here is that <strong>libc.so.6</strong> is a frequent guest here. The 265 number
is also inflated as many subtrees repeat multiple times here.</p>
<p>If we use something more heavyweight like <strong>i3</strong> window manager we’ll
get even bigger dependency tree:</p>
<pre><code>$ lddtree `which i3` | wc -l
61
$ lddtree -a `which i3` | wc -l
1528</code></pre>
<p>Let’s draw <strong>gdb</strong> dependencies as a graph. I find the result less scary:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-4.svg" /></p>
<p>OK, it’s still unreadable.</p>
<p>Let’s remove all the <strong>glibc</strong> and <strong>gcc</strong> dependencies. They are
present almost everywhere and clutter our graph. Here is the result
of graph with noise removed:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-5.svg" /></p>
<p>Now it should be more obvious what <strong>gdb</strong> usually uses.</p>
<p><strong>Diamond dependencies</strong> are the ones that have more than one input arrow:
they cause dependency graph to be a <strong>graph</strong> instead of a <strong>tree</strong>.</p>
<p>Another way to look at it applied to library dependencies: <strong>diamond
dependencies have more than one path in the graph from dependency
root</strong>.</p>
<p>For example <strong>libncursesw.so.6</strong> can be reached via two distinct paths:</p>
<ul>
<li><strong>gdb</strong> -&gt; <strong>libncursesw.so.6</strong> (direct dependency)</li>
<li><strong>gdb</strong> -&gt; <strong>libreadline.so.8</strong> -&gt; <strong>libncursesw.so.6</strong> (indirect dependency)</li>
</ul>
<p>From the toy example above we know that the same library does not
get loaded multiple times if the absolute library path is the same.</p>
<p>Problems happen when such a diamond dependency is slightly different
in two branches. There are many ways to break this diamond by accident.
The most popular one is to have slightly different <strong>SONAMEs</strong> in two
branches:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-6.svg" /></p>
<p>To make it work at all <strong>libfoo.so.1</strong> and <strong>libfoo.so.2</strong> need to
have no colliding symbols or make this mix and match work via other
means. Most <strong>C</strong> libraries don’t handle such coexistence. They assume
that everyone can update to <strong>libfoo.so.2</strong> and <strong>libfoo.so.1</strong> would
never compete with it:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-7.svg" /></p>
<h1 id="example-failures">Example failures</h1>
<p>Unfortunately nothing prevents such inconsistent diamonds with a
library version mix to appear. We just did it ourselves in our toy
example. How come do we not get into that state all the time? Or
maybe we do?</p>
<p>Normally distributions try hard to avoid such version mix by not
providing two versions of a library at any point in time: there
are no two <strong>glibc</strong> version installed, no two <strong>ffmpeg</strong> versions
present and so on.</p>
<p>But to each rule there is an exception: not all applications have
migrated from <strong>python2</strong> to <strong>python3</strong>, some applications are
still on <strong>gtk-2</strong>, most on <strong>gtk-3</strong> and some are already on
<strong>gtk-4</strong>. In these cases you might find all these libraries in
your system. Their presence might create false confidence that it’s
a safe setup. It is not.</p>
<p>Here are a few examples I saw the past:</p>
<h2 id="gdb-and-tinfotinfow">gdb and tinfo/tinfow</h2>
<p>This example is based on <a href="https://bugs.gentoo.org/669096" class="uri">https://bugs.gentoo.org/669096</a> where <strong>gdb</strong>
crashed at start. <strong>ncurses</strong> provides a few flavours of roughtly the
same library with slightly different APIs: <strong>ncurses</strong> (no unicode
support) and <strong>ncursesw</strong> (has unicode support). Sometimes distributions
also enable split-library version of <strong>ncurses</strong>: <strong>ncursesw.so</strong>+<strong>tinfow.so</strong>
and <strong>ncurses.so</strong>+<strong>tinfo.so</strong>.</p>
<p>In 2022 you would normally use <strong>ncursesw</strong> library everywhere (or
<strong>ncursesw.so</strong>+<strong>tinfow.so</strong> everywhere in distributions with split
setup).</p>
<p>Due to a minor <strong>configure.ac</strong> glitch <strong>gdb</strong> managed to pull in the
following library dependency graph:</p>
<pre><code>  $ lddtree /usr/bin/gdb
  /usr/bin/gdb (interpreter =&gt; /lib64/ld-linux-x86-64.so.2)
    libtinfo.so.6 =&gt; /lib64/libtinfo.so.6
    libreadline.so.7 =&gt; /lib64/libreadline.so.7
        libncurses.so.6 =&gt; /lib64/libncurses.so.6
    libncursesw.so.6 =&gt; /lib64/libncursesw.so.6
        libtinfow.so.6 =&gt; /lib64/libtinfow.so.6
    ...</code></pre>
<p>See the problem already? Picture form might help a bit:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-8.svg" /></p>
<p>I see two problems:</p>
<ul>
<li>unicode and non-unicode flavors are both present: <strong>ncurses.so</strong> + <strong>ncursesw.so</strong></li>
<li>unicode and non-unicode parts: <strong>ncursesw.so</strong> + <strong>tinfo.so</strong> (or <strong>ncursesw.so</strong> + <strong>tinfow.so</strong>)</li>
</ul>
<p><strong>libncursesw.so.6</strong> and <strong>libncurses.so.6</strong> export
the same symbol names. That on it’s own might work. But ABI assumptions
around private data structures in <strong>w</strong> and non-<strong>w</strong> librarues are
different. For example <strong>WINDOWLIST</strong> structure has different size and
has extra fields:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Somewhere in ncurses/curses.priv.h</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> _win_list <span class="op">{</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> _win_list <span class="op">*</span>next<span class="op">;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>        SCREEN <span class="op">*</span>screen<span class="op">;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>        WINDOW win<span class="op">;</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#if NCURSES_WIDECHAR</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> addch_work<span class="op">[(</span>MB_LEN_MAX <span class="op">*</span> <span class="dv">9</span><span class="op">)</span> <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> addch_used<span class="op">;</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> addch_x<span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> addch_y<span class="op">;</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>If such a structure would be allocated in <strong>libncurses.so</strong> (without
<strong>NCURSES_WIDECHAR</strong>) and be used as <strong>libncursesw.so</strong> there will
likely be data corruption in an attempt to write to non-existent tail
of structure (fields <strong>addch_work</strong>, <strong>addch_used</strong>, <strong>addch_x</strong>,
<strong>addch_y</strong> don’t get allocated in <strong>libncurses.so</strong>).</p>
<p>The fix was to update <strong>gdb</strong> to always link to <strong>tinfow</strong> if
<strong>ncursesw</strong> is present. And to fix <strong>readline</strong> to link to <strong>ncursesw</strong>
to match the default of the rest of distribution.</p>
<p>Case of <strong>readline</strong> is especially worrying: if <strong>libreadline.so.7</strong> -&gt;
<strong>libncurses.so.6</strong> was a conscious decision by <strong>readline</strong> packagers
then <strong>gdb</strong>
would have to inspect it’s dependency first to match it’s defaults when
picking the <strong>ncurses</strong> flavor at <strong>gdb</strong> build time. Nobody analyzes
transitive dependencies in C land and assumes that build environment
provides consistent and unambiguous
environment: there should be just one library of <strong>ncurses</strong> discoverable
via <strong>pkgconfig</strong> (or similar) and that version should be used when building
both <strong>readline</strong> and <strong>gdb</strong>.</p>
<p>I would say that providing both <strong>libncurses.so</strong> and <strong>libncursesw.so</strong>
in the same system is proven to be dangerous. Perhaps providing just
<strong>SONAMEs</strong> like <strong>libncurses.so.6</strong> would be slightly less prone to
accidental linkage of unintended library.</p>
<h2 id="binutils-and-multitarget">binutils and multitarget</h2>
<p>Another example from Gentoo’s bugzilla: <a href="https://bugs.gentoo.org/666100" class="uri">https://bugs.gentoo.org/666100</a>.</p>
<p>It starts off very similar to <strong>ncurses</strong>: Gentoo provides a way to
install multiple versions of <strong>libbfd.so</strong> library:</p>
<ul>
<li>via <strong>sys-devel/binutils</strong> package, install target is <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong></li>
<li>via <strong>sys-libs/binutils-libs</strong> package, install target is <strong>/usr/lib64/libbfd-2.38.so</strong></li>
</ul>
<p>Gentoo allows multiple parallel major versions of <strong>sys-devel/binutils</strong>
to be present in the system at the same time. And allows only one version of
<strong>sys-libs/binutils-libs</strong>. The split
is needed for limitations of package manager library handling. The idea
is that <strong>sys-devel/binutils</strong> libraries will ever be used only by
<strong>sys-devel/binutils</strong> itself: <strong>strip</strong>, <strong>ld</strong> and friends will use
private library. While external users (like <strong>perf</strong> or <strong>ghc</strong>) will
never use it and will always pull in <strong>sys-libs/binutils-libs</strong> library:</p>
<ul>
<li><strong>strip-2.38</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong> (<strong>SONAME=libbfd-2.38.so</strong>)</li>
<li><strong>ld-2.38</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong> (<strong>SONAME=libbfd-2.38.so</strong>)</li>
<li><strong>ld-2.37</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.37/libbfd-2.37.so</strong> (<strong>SONAME=libbfd-2.37.so</strong>)</li>
<li><strong>perf</strong> -&gt; <strong>/usr/lib64/libbfd-2.38.so</strong> (<strong>SONAME=libbfd-2.38.so</strong>)</li>
</ul>
<p>Or the same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-9.svg" /></p>
<p>The sets are seemingly disjoint. It should be fine, right? Wrong.</p>
<p>The problem happens when some build system decides to use <strong>LD_LIBRARY_PATH=/usr/lib</strong>
override (like <strong>firefox</strong> <a href="https://bugs.gentoo.org/645222">one</a>). It
looks cosmetic as <strong>/usr/lib</strong> is already a default library search path. It should not
hurt. But in practice it redirects <strong>libbfd-2.38.so</strong> from:</p>
<ul>
<li><strong>ld-2.38</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong></li>
</ul>
<p>to:</p>
<ul>
<li><strong>ld-2.38</strong> -&gt; <strong>/usr/lib64/libbfd-2.38.so</strong></li>
</ul>
<p>After the redirect effective runtime dependency graph looks as:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-10.svg" /></p>
<p>Is it a big deal? Shouldn’t these libraries already be identical?
They share <strong>SONAME=libbfd-2.38.so</strong> after all.</p>
<p>Unfortunately, no.: <strong>binutils</strong> can be built in a few different incompatible
modes that affect library <strong>ABI</strong> compatibility:</p>
<ol type="1">
<li>default mode: support only current target and use default file offsets
(32-bit offsets on 32-bit systems, 64-bit offsets on 64-bit systems).</li>
<li>64-bit mode (<strong>--enable-64-bit-bfd</strong>): support only current target
and use 64-bit file offsets</li>
<li>multi-target mode (<strong>--enable-targets=all</strong>): support multiple target
architectures and use 64-bit file offsets.</li>
</ol>
<p>All these 3 modes produce the same <strong>SONAME=libbfd-2.38.so</strong>, but
it’s ABIs differ quite a bit: 64-bit mode switches public API from
<strong>typedef unsigned long bfd_vma;</strong> to <strong>typedef uint64_t bfd_size_type</strong>.
This breaks global <strong>_bfd_std_section</strong> array size and breaks ABI similar
to <a href="http://trofi.github.io/posts/195-dynamic-linking-ABI-is-hard.html">nettle ABI breakage</a>.</p>
<p>As a result attempt to force <strong>LD_LIBRARY_PATH=/usr/lib</strong> on 32-bit systems
fails as:</p>
<pre><code>$ LD_LIBRARY_PATH=/usr/lib ld --eh-frame-hdr -m elf_i386 -dynamic-linker /lib/ld-linux.so.2 -o z /usr/lib/Scrt1.o
ld: internal error /dev/shm/portage/sys-devel/binutils-2.38/work/binutils-2.38/ld/ldlang.c 6635</code></pre>
<p>The fix (or workaround) was straightforward: change <strong>SONAME=libbfd-2.38.so</strong>
to something that depends on the configuration: <strong>SONAME=libbfd-2.38-64-bit.so</strong>
or similar:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-11.svg" /></p>
<p>Mike also suggested another fix: use <strong>DT_RPATH</strong> <strong>ELF</strong> tags in <strong>binutils</strong>
binaries instead of <strong>DT_RUNPATH</strong> to get higher precedence over <strong>LD_LIBRARY_PATH</strong>:
<a href="https://en.wikipedia.org/wiki/Rpath" class="uri">https://en.wikipedia.org/wiki/Rpath</a>.</p>
<p>I think this bug is a good example why you should try hard to avoid multiple
libraries in the system with the same <strong>SONAME</strong>: seemingly uncontroversial
<strong>LD_LIBRARY_PATH</strong> can cause so much trouble.</p>
<h2 id="mpfrmpc-version-mismatch">mpfr/mpc version mismatch</h2>
<p>Another case is <a href="https://wiki.gentoo.org/wiki/Mpfr4-update-guide" class="uri">https://wiki.gentoo.org/wiki/Mpfr4-update-guide</a>.</p>
<p>In a steady state <strong>gcc</strong> and it’s <strong>mpc</strong> dependency both depend on <strong>mpfr</strong>.
All three are distinct packages in Gentoo and can only be updated one at a time
on a live system.</p>
<p>Once <strong>mpfr</strong> is updated it brings into the system a new library: <strong>libmpfr.so.4</strong>.
On it’s own it’s fine as <strong>gcc</strong> and <strong>mpc</strong> still refer to <strong>libmpfr.so.3</strong> (which
does not get deleted as long as there are referrers to it).</p>
<p>The problem happens when we try to update <strong>mpc</strong>: we introduce a
broken diamond dependency as two versions of <strong>mpfr</strong> get pulled into <strong>gcc</strong>:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-12.svg" /></p>
<p>By luck it did not render <strong>gcc</strong> broken as <strong>gcc</strong> was able to recompile itself.
Otherwise user would have to redownload broken compiler. Or an ad-hoc upgrade
tool would have to be written just for this case.</p>
<p>I wonder how other distributions solve this class of lockstep upgrade problems
in their build systems.</p>
<h1 id="does-nix-magically-solve-diamond-dependency-problem">does nix magically solve diamond dependency problem?</h1>
<p>The short answer is: no, it does not fundamentally prevent such
relations from happening. It is even more prone to accidentally
inconsistent diamonds as it allows you to install multiple versions
of the same library in parallel (say, <strong>glibc</strong> or <strong>ncurses</strong>)
and be pulled in both as a dependency.</p>
<p>The typical example would be an incorrect attempt to enable debugging
mode for some popular dependency. Say, <strong>ncurses</strong> for <strong>gdb</strong>:</p>
<pre><code># DO NOT USE IT AS IS
$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; gdb.override { ncurses = ncurses.overrideAttrs(oa: { NIX_CFLAGS_COMPILE = &quot;-O0&quot;; }); }'</code></pre>
<p>Looks benign, isn’t it? We pass slightly modified unoptimised
<strong>ncurses</strong> dependency to <strong>gdb</strong>.</p>
<p>Unfortunately <strong>gdb</strong>’s <strong>readline</strong> dependency also uses <strong>ncurses</strong>.
And in this case it uses unmodified version of <strong>ncurses</strong>. We
can see it in the resulting binary:</p>
<pre><code>lddtree -a ./result/bin/gdb |&amp; fgrep -B1 ncurses
    libreadline.so.8 =&gt; /nix/store/87g044p2zq221fvjzyrqyrkzxxayy1p9-readline-8.1p2/lib/libreadline.so.8
        libncursesw.so.6 =&gt; /nix/store/7ji068smnymqz2lg2fd42hjnjd5czbl6-ncurses-6.3-p20220507/lib/libncursesw.so.6
--
            ld-linux-x86-64.so.2 =&gt; /nix/store/fz33c1mfi2krpg1lwzizfw28kj705yg0-glibc-2.34-210/lib/ld-linux-x86-64.so.2
    libncursesw.so.6 =&gt; /nix/store/3hwz3archcn9z8y93b2qdnkrgdf7g5jb-ncurses-6.3-p20220507/lib/libncursesw.so.6</code></pre>
<p>To be fair this output is slightly misleading as both
<strong>libncursesw.so.6</strong> shold be loaded by <strong>DT_RUNPTH</strong> and would probably
end up being pulled in from the same location. There would be no
double-load. But it’s hard to predict which of the two would win.</p>
<p>To sidestep this kind of problems <strong>nixpkgs</strong> tries hard to use a
single version of a library throughout the tree. As a result the
whole system you build will use the same <strong>ncurses</strong> library.
And it does not have to be the same <strong>ncurses</strong> you used for
older version of your system.</p>
<p>The less incorrect way to achieve the <strong>-O0</strong> effect for <strong>ncurses</strong>
would be to override the <strong>ncurses</strong> attribute itself and let
all the packages (up to <strong>gdb</strong>) use it. One way to do it
is via <a href="https://nixos.wiki/wiki/Overlays" class="uri">https://nixos.wiki/wiki/Overlays</a>:</p>
<pre><code># slightly better
$ nix build --impure --expr 'with import &lt;nixpkgs&gt; { overlays = [(final: prev: { ncurses = prev.ncurses.overrideAttrs(oa: { NIX_CFLAGS_COMPILE = &quot;-O0&quot;; }); })]; }; gdb'
[2/0/33 built, 5 copied (0.8/0.8 MiB), 0.2 MiB DL] building readline-8.1p2 (buildPhase): mv search.o search.so
...</code></pre>
<p>Note: this command attepts to rebuild 33 packages:</p>
<pre><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; { overlays = [(final: prev: { ncurses = prev.ncurses.overrideAttrs(oa: { NIX_CFLAGS_COMPILE = &quot; -O0&quot;; }); })]; }; gdb' --dry-run |&amp; unnix
these 34 derivations will be built:
  /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507.drv
  /&lt;&lt;NIX&gt;&gt;/readline-6.3p08.drv
  /&lt;&lt;NIX&gt;&gt;/python3-3.9.13.drv
  /&lt;&lt;NIX&gt;&gt;/hook.drv
  /&lt;&lt;NIX&gt;&gt;/audit-2.8.5.drv
  /&lt;&lt;NIX&gt;&gt;/linux-pam-1.5.2.drv
  /&lt;&lt;NIX&gt;&gt;/libxml2-2.9.14.drv
  /&lt;&lt;NIX&gt;&gt;/itstool-2.0.6.drv
  /&lt;&lt;NIX&gt;&gt;/libxslt-1.1.35.drv
  /&lt;&lt;NIX&gt;&gt;/shadow-4.11.1.drv
  /&lt;&lt;NIX&gt;&gt;/util-linux-minimal-2.37.4.drv
  /&lt;&lt;NIX&gt;&gt;/re2c-3.0.drv
  /&lt;&lt;NIX&gt;&gt;/asciidoc-9.1.0.drv
  /&lt;&lt;NIX&gt;&gt;/ninja-1.10.2.drv
  /&lt;&lt;NIX&gt;&gt;/setuptools-setup-hook.drv
  /&lt;&lt;NIX&gt;&gt;/pip-install-hook.drv
  /&lt;&lt;NIX&gt;&gt;/setuptools-61.2.0-sdist.tar.gz.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-bootstrapped-pip-22.0.4.drv
  /&lt;&lt;NIX&gt;&gt;/python-imports-check-hook.sh.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-setuptools-61.2.0.drv
  /&lt;&lt;NIX&gt;&gt;/python-catch-conflicts-hook.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-wheel-0.37.1.drv
  /&lt;&lt;NIX&gt;&gt;/setuptools-setup-hook.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-pip-22.0.4.drv
  /&lt;&lt;NIX&gt;&gt;/pip-install-hook.drv
  /&lt;&lt;NIX&gt;&gt;/meson-0.61.2.drv
  /&lt;&lt;NIX&gt;&gt;/fuse-3.10.5.drv
  /&lt;&lt;NIX&gt;&gt;/fuse-2.9.9.drv
  /&lt;&lt;NIX&gt;&gt;/e2fsprogs-1.46.5.drv
  /&lt;&lt;NIX&gt;&gt;/libarchive-3.6.1.drv
  /&lt;&lt;NIX&gt;&gt;/cmake-3.22.3.drv
  /&lt;&lt;NIX&gt;&gt;/libipt-2.0.4.drv
  /&lt;&lt;NIX&gt;&gt;/readline-8.1p2.drv
  /&lt;&lt;NIX&gt;&gt;/gdb-12.1.drv</code></pre>
<p>Now we can verify that all <strong>libncursesw.so.6</strong> instances are pulled in from a single path:</p>
<pre><code>$ lddtree -a ./result/bin/gdb |&amp; fgrep -B1 ncurses
    libreadline.so.8 =&gt; /nix/store/k8p8sj27cgblad8f0zavpzwwyvv5gn0d-readline-8.1p2/lib/libreadline.so.8
        libncursesw.so.6 =&gt; /nix/store/3hwz3archcn9z8y93b2qdnkrgdf7g5jb-ncurses-6.3-p20220507/lib/libncursesw.so.6
--
            ld-linux-x86-64.so.2 =&gt; /nix/store/fz33c1mfi2krpg1lwzizfw28kj705yg0-glibc-2.34-210/lib/ld-linux-x86-64.so.2
    libncursesw.so.6 =&gt; /nix/store/3hwz3archcn9z8y93b2qdnkrgdf7g5jb-ncurses-6.3-p20220507/lib/libncursesw.so.6</code></pre>
<h1 id="allowed-symbol-collisions">allowed symbol collisions</h1>
<p>There are a few cases when it is natural to have symbol collisions:</p>
<ul>
<li><p>when final executable wants to override function implementation from a library it can
define the function with the same prototype. I’ll carefully ignore details of <strong>hidden</strong>
visibility symbols here.</p></li>
<li><p>when executable or library wants to provide a fallback function in case it’s not
present anywhere else it can use weak symbol: <a href="https://en.wikipedia.org/wiki/Weak_symbol" class="uri">https://en.wikipedia.org/wiki/Weak_symbol</a></p></li>
</ul>
<p>If you use neither of the above you still can load libraries with
clashing symbols. You would have to use <strong>dlopen(“path/to/lib.so”, RTLD_LOCAL)</strong>
/ <strong>dlsym()</strong> to extract symbols under non-ambiguous names. Plugins frequently
use this technique to avoid namespace pollution and to simplify plugin unloading.</p>
<p>Typical examples of <strong>LD_PRELOAD</strong> users that rely on runtime symbol overload are:</p>
<ul>
<li><strong>jemalloc</strong>: <a href="https://github.com/jemalloc/jemalloc/wiki/Getting-Started" class="uri">https://github.com/jemalloc/jemalloc/wiki/Getting-Started</a> (overrides <strong>malloc()</strong> and friends)</li>
<li><strong>tcmalloc</strong>: <a href="https://gperftools.github.io/gperftools/tcmalloc.html" class="uri">https://gperftools.github.io/gperftools/tcmalloc.html</a> (overrides <strong>malloc()</strong> and friends)</li>
<li><strong>tsocks</strong>: <a href="https://linux.die.net/man/8/tsocks" class="uri">https://linux.die.net/man/8/tsocks</a> (overrides <strong>socket()</strong> and friends)</li>
<li><strong>fakeroot</strong>: <a href="https://linux.die.net/man/1/fakeroot-tcp" class="uri">https://linux.die.net/man/1/fakeroot-tcp</a> (overrides file APIs)</li>
<li><strong>sandbox</strong>: <a href="https://github.com/gentoo/sandbox/blob/master/README.md" class="uri">https://github.com/gentoo/sandbox/blob/master/README.md</a> (overrides file APIs)</li>
<li><strong>libeatmydata</strong>: <a href="https://www.flamingspork.com/projects/libeatmydata/" class="uri">https://www.flamingspork.com/projects/libeatmydata/</a> (overrides <strong>fsync()</strong> API)</li>
</ul>
<h1 id="parting-words">parting words</h1>
<p>Symbol clashes are nasty. They are most frequent to appear when multiple
versions of the same library are loaded into the program over different
dependency paths.</p>
<p>Default toolchain support does not help much in catching duplicate symbols.
You might have to resort to local hacks to detect such cases. Or you can add
a feature to your favorite linker!</p>
<p>Luckily there is a simple rule to follow to avoid it most if the time:
try hard not to expose more than one version of a library in your depgraph.</p>
<p>Have fun!</p>

<div class="info">
    Posted on June 18, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>NixOS 22.05 release</title>
    <link href="http://trofi.github.io/posts/247-NixOS-22.05-release.html" />
    <id>http://trofi.github.io/posts/247-NixOS-22.05-release.html</id>
    <published>2022-06-11T00:00:00Z</published>
    <updated>2022-06-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Last month NixOS-22.05 release <a href="https://nixos.org/blog/announcements.html#nixos-22.05">came out</a>.
If you never seent it you should give it a try: <a href="https://nixos.org/download.html#nixos-iso" class="uri">https://nixos.org/download.html#nixos-iso</a>.</p>
<p>I took the release event as a good excude to share a few tips.</p>
<h1 id="nicer-logs">Nicer logs</h1>
<p>Nix is full of boring paths with long prefixes like
<strong>/nix/store/xk0rdw0sj3ysnjyh90z85mlx3w0kab5s-coreutils-full-9.1/bin/ls</strong>.
It’s a lot longer than <strong>/usr/bin/ls</strong>. But with all the noise it contains
useful hint that <strong>ls</strong> comes from <strong>coreutils</strong> package.</p>
<pre><code>$ ls -l /run/current-system/sw/bin/ls
lrwxrwxrwx 9 root root 69 Jan  1  1970 /run/current-system/sw/bin/ls -&gt; /nix/store/xk0rdw0sj3ysnjyh90z85mlx3w0kab5s-coreutils-full-9.1/bin/ls</code></pre>
<p>To save some space and keep useful detail I’m using <strong>~/bin/unnix</strong> one-liner:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="fu">sed</span> <span class="at">-r</span> <span class="st">'s@/nix/store/[0-9a-z]{32}-@/&lt;&lt;NIX&gt;&gt;/@g'</span></span></code></pre></div>
<p>It leaves out hashes but not package names or versions:</p>
<pre><code>$ ls -l /run/current-system/sw/bin/ls |&amp; unnix
lrwxrwxrwx 9 root root 69 Jan  1  1970 /run/current-system/sw/bin/ls -&gt; /&lt;&lt;NIX&gt;&gt;/coreutils-full-9.1/bin/ls</code></pre>
<p>I frequently use <strong>unnix</strong> to compare build logs from different environments.</p>
<h1 id="running-binaries-from-arbitrary-nixpkgs-commits">Running binaries from arbitrary nixpkgs commits</h1>
<p>Normally you can pull in a program in your environment by installing
it. Or by running it directly:</p>
<pre><code>$ nix run nixpkgs#re2c -- --version
re2c 3.0</code></pre>
<p>But sometimes it’s useful to run a program from a specific commit
of a repository. Flake syntax allows you to do it as is:</p>
<pre><code>$ nix run github:NixOS/nixpkgs/4a7f99d55d299453a9c2397f90b33d1120669775#re2c -- --version
re2c 1.3</code></pre>
<p>With GitHub’s synthetic branches you can even run tools right from yet unmerged
PRs against <strong>nixpkgs</strong>:</p>
<pre><code># Use firefox from (then) yet unmerged PR: https://github.com/NixOS/nixpkgs/pull/175618
$ nix run github:NixOS/nixpkgs/pull/175618/merge#firefox</code></pre>
<p>Be careful to review the commit first. You are running something that is not yet a
part of <strong>nixpkgs</strong> proper.</p>
<h1 id="pulling-cross-compiler-environments-with-pkgscross">Pulling cross-compiler environments with pkgsCross</h1>
<p><strong>nixpkgs</strong> has a <strong>pkgsCross.*</strong> package prefix with a ton of cross-compilers available.
It makes portability related work a breeze. We can pull the cross-compiler in with
a simple <strong>nix develop</strong> run:</p>
<pre><code>$ nix develop nixpkgs#pkgsCross.mingw32.re2c
$ dev&gt;LANG=C i686-w64-mingw32-gcc -v |&amp; unnix
Using built-in specs.
COLLECT_GCC=/&lt;&lt;NIX&gt;&gt;/i686-w64-mingw32-stage-final-gcc-debug-10.3.0/bin/i686-w64-mingw32-gcc
COLLECT_LTO_WRAPPER=/&lt;&lt;NIX&gt;&gt;/i686-w64-mingw32-stage-final-gcc-debug-10.3.0/libexec/gcc/i686-w64-mingw32/10.3.0/lto-wrapper
Target: i686-w64-mingw32
Configured with:
Thread model: mcf
Supported LTO compression algorithms: zlib
gcc version 10.3.0 (GCC)</code></pre>
<h1 id="mass-updates-for-maintained-packages">Mass updates for maintained packages</h1>
<p>I have a bunch if local packages I occasionally update.
<strong>nixpkgs</strong> has a script to update them automatically:</p>
<pre><code># run from nixpkgs checkout:
$ nix-shell maintainers/scripts/update.nix --argstr maintainer trofi --arg include-overlays true
Going to be running update for following packages:
 - CorsixTH-unstable-2022-05-23
 - dwarffs-unstable-2022-03-06
 - multitextor-unstable-2022-04-22
 - seekwatcher-0.14
 - ski-unstable-2022-04-18
 - vcmi-unstable-2022-05-28

Press Enter key to continue...

Running update for:
 - CorsixTH-unstable-2022-05-23: UPDATING ...
 - dwarffs-unstable-2022-03-06: UPDATING ...
 - multitextor-unstable-2022-04-22: UPDATING ...
 - seekwatcher-0.14: UPDATING ...
 - seekwatcher-0.14: DONE.
 - ski-unstable-2022-04-18: UPDATING ...
 - dwarffs-unstable-2022-03-06: DONE.
 - vcmi-unstable-2022-05-28: UPDATING ...
 - multitextor-unstable-2022-04-22: DONE.
 - ski-unstable-2022-04-18: DONE.
 - CorsixTH-unstable-2022-05-23: DONE.
 - vcmi-unstable-2022-05-28: DONE.</code></pre>
<p>Now all it takes is to build/run the packages to see if things still work.
We got 2 updates ready to commit as is:</p>
<pre><code>$ LANG=C git status
On branch main
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   corsix-th/default.nix
        modified:   vcmi/default.nix

$ nix build -f. corsix-th vcmi

$ LANG=C ls -l | unnix
...
lrwxrwxrwx 1 slyfox users   72 Jun 11 19:06 result -&gt; /&lt;&lt;NIX&gt;&gt;/CorsixTH-unstable-2022-06-07
lrwxrwxrwx 1 slyfox users   68 Jun 11 19:06 result-1 -&gt; /&lt;&lt;NIX&gt;&gt;/vcmi-unstable-2022-06-11

$ ./result/bin/corsix-th
$ ./result-1/bin/vcmiclient</code></pre>
<p>Ready to be committed.</p>

<div class="info">
    Posted on June 11, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>dropping disqus comments</title>
    <link href="http://trofi.github.io/posts/246-dropping-disqus-comments.html" />
    <id>http://trofi.github.io/posts/246-dropping-disqus-comments.html</id>
    <published>2022-06-01T00:00:00Z</published>
    <updated>2022-06-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This personal blog gets roughly one comment a month. For some reason
disqus decided to add automatically generated advertisement section
around comments.</p>
<p>I think disqus decided that this page does not qualify as a personal
blog anymore.</p>
<p>I dropped the integration. Now each post has a footer with an
<a href="mailto:slyich@gmail.com">email</a> and <a href="https://github.com/trofi/trofi.github.io.gen">GitHub repo</a>
reference.</p>
<p>I do understand that it’s very inconvenient in case you want to reach
out. My apologies.</p>

<div class="info">
    Posted on June  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>-fno-common legacy</title>
    <link href="http://trofi.github.io/posts/245-fno-common-legacy.html" />
    <id>http://trofi.github.io/posts/245-fno-common-legacy.html</id>
    <published>2022-05-13T00:00:00Z</published>
    <updated>2022-05-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="fno-commn-in-gentoo">-fno-commn in ::gentoo</h2>
<p>Around January 2020 (more than 2 years ago) <strong>gcc</strong> development version
switched the default from <strong>-fcommon</strong> to <strong>-fno-common</strong>: <a href="https://gcc.gnu.org/PR85678" class="uri">https://gcc.gnu.org/PR85678</a>.</p>
<p>I personally like <strong>-fno-common</strong> as it catches accidental
global variable name collision like the one in
<a href="https://github.com/FreeSpacenav/spacenavd/commit/7c271fa265613bd7d47601daaeb0e08e7c5b5a75">spacenavd</a>
or in <strong>iozone</strong>. Occasional upstreams’
<a href="https://github.com/FreeSpacenav/spacenavd/issues/17">reluctance</a>
to make code <strong>-fno-common</strong>-compatible was a big surprise to me. I just
don’t see any benefit of commoning. Luckily such a reluctance is rare.</p>
<p>I built local system with <strong>-fno-common</strong> toolchain and found 16 buggy
packages: <strong>syslinux</strong>, <strong>tftp-hpa</strong>, <strong>minicom</strong>, <strong>freeglut</strong>, <strong>openrc</strong>,
<strong>iproute2</strong>, <strong>gpm</strong>, <strong>xorg-server</strong>, <strong>logrotate</strong>, <strong>gnupg</strong>, <strong>libtirpc</strong>,
<strong>gdbm</strong>, <strong>cpio</strong>, <strong>postfix</strong>, <strong>xfsprogs</strong> and even <strong>glibc</strong>. Some are
very high profile packages. I had ~2K packages installed locally.</p>
<p>I extrapolated 16 failures per 2K packages to 20K packages
of the whole ::gentoo repository (~10x) and hoped that we won’t get
more than 160 failures. My intuition was saying that most of other
packages should be <strong>python</strong>, <strong>ruby</strong>, <strong>perl</strong>, <strong>php</strong> packages
and are probably unaffeched. Thus the final number could be lower
than 100. That sounded like a manageable fallout.</p>
<p>When Toralf started <strong>CFLAGS=-fno-common</strong> <strong>tinderbox</strong> build test
on the whole ::gentoo repository he began discovering more failures.
I proposed fixes for first few tens of failure and was quicly overwhelmed
with more failure reports. After a few weeks of <strong>tinderbox</strong> run
the <a href="https://bugs.gentoo.org/705764">bug list</a> collected ~800 failures!</p>
<p>800 is 5 times worse than I estimated. It’s 4% of the repository. Some of those
reports are probably duplicates but vast majority are unique real failures.
If I knew it’s so widespread I might have taken another way to roll it out.
Alas. Anyway, by now <strong>-fno-common</strong> is a fixed problem for Gentoo.</p>
<h2 id="fno-common-in-nixpkgs">-fno-common in nixpkgs</h2>
<p>A few weeks ago I got commit access to <strong>nixpkgs</strong>. I’m still feeling a
bit uneasy about it as I don’t formally maintain any packages there. At
least I have a few PRs to merge :)</p>
<p>Scrolling through pull requests I noticed that <strong>nixpkgs</strong> actually flipped
<strong>gcc-10</strong> (and <strong>llvm-11</strong>) default back to <strong>-fcommon</strong> to avoid widespread
breakage. And there was a PR to restore the default:
<a href="https://github.com/NixOS/nixpkgs/pull/110571" class="uri">https://github.com/NixOS/nixpkgs/pull/110571</a>. Having a bit more
collaborative tools at my disposal I decided to sort it out for <strong>nixpkgs</strong>.
I messed it up once before and learned something. Should be easy this time :)</p>
<p><strong>-fno-commn</strong> default was relased as <strong>gcc-10.1.0</strong> on May 7. That
makes it almost exactly 2 years ago. Since then some projects adapted to
<strong>-fno-common</strong> uptream and released newer versions. But some did not.
What is the ratio of those?</p>
<p>For still broken packages I usually write a patch against dormant
upstream and attach it to the bug tracker so others could use patch
as is even if patch does not get merged in any form.</p>
<p>Sometimes there is no place upstream to make patch publicly available.
In this case I resort to <strong>NIX_CFLAGS_COMPILE = “-fcommon”</strong> in <strong>.nix</strong>
expressions. So far I had to do it in 10 packages (maybe 30% of all
I tried to fix?). I hope it will save some time to others.</p>
<p>If you are the author of a package that had no release in past 2 years
and have a few minor tweaks then consider releasing it. Maybe you even
have a <strong>-fno-common</strong> fix pending?</p>
<h2 id="update-from-8-july-2022">Update from 8 July 2022</h2>
<p><strong>-fno-common</strong> change was merged into <strong>nixpkgs</strong>. Some stats:</p>
<ul>
<li>240 packages were broken (down from 800 in Gentoo). Only 30% were
still affected and 70% were already fixed upstream and trickled down
to downstream.</li>
<li>About 140 of unfixed packages got <strong>-fcommon</strong> workaround in <strong>nixpkgs</strong>.
This means ~60% did not have any form of an upstream fix and 40% did
(or do now).</li>
<li>It took me 2 months to do it.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on May 13, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>xmms2 0.9.1 is out</title>
    <link href="http://trofi.github.io/posts/244-xmms2-0.9.1-is-out.html" />
    <id>http://trofi.github.io/posts/244-xmms2-0.9.1-is-out.html</id>
    <published>2022-05-02T00:00:00Z</published>
    <updated>2022-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Tl;DR: <strong>xmms2-0.9.1</strong> is out and you can get it at
<a href="https://github.com/xmms2/xmms2-devel/releases/tag/0.9.1" class="uri">https://github.com/xmms2/xmms2-devel/releases/tag/0.9.1</a>!</p>
<p><a href="https://en.wikipedia.org/wiki/XMMS2">xmms2</a> is a music player daemon
with various plugins to support stream decoding and transformation.</p>
<h1 id="xmms2-most-basic-usage">xmms2 most basic usage</h1>
<p>To play a song you need to add it to database and then play it:</p>
<pre><code>$ xmms2 clear
$ xmms2 add .
$ xmms2 play</code></pre>
<p>To check on current status:</p>
<pre><code>$ xmms2 list
-&gt;[1/3096] mind.in.a.box - Lament for Lost Dreams (snippet) (00:26)

Total playtime: 0:00:26

$ xmms2 status

   (n) jump to next song
   (p) jump to previous song
   (SPACE) toggle playback
   (ENTER) exit status mode

Paused: mind.in.a.box - Lament for Lost Dreams (snippet): 00:05 of 00:26</code></pre>
<p><strong>xmms2</strong> CLI has many more options:</p>
<pre><code>xmms2 help
usage: xmms2 &lt;command&gt; [args]

Available commands:
   add
   current
   exit
   help
   info
   jump
   list
   move
   next
   pause
   play
   prev
   remove
   stop
   search
   seek
   toggle
   collection &lt;subcommand&gt;
   playlist &lt;subcommand&gt;
   server &lt;subcommand&gt;

Type 'help &lt;command&gt;' for detailed help about a command.</code></pre>
<p>You really want some frontend to manipulate the player.</p>
<p>I usually run a shell wrapper in a directory I want to play.
Effectively I’m using my window manager as a frontend:</p>
<ul>
<li><strong>mc</strong> in <strong>alacritty</strong> to run <strong>m</strong> in a directory I want to play: <a href="https://github.com/trofi/home/blob/master/.bash/funs#L19">script</a></li>
<li><strong>i3</strong> key bindings to navigate through song and playlist: <a href="https://github.com/trofi/home/blob/master/.config/i3/config#L30">config</a></li>
<li><strong>xmobar</strong> (with <a href="https://github.com/trofi/home/blob/master/bin/player-status-entry-persist.py">a formatter</a>) as a status output.</li>
</ul>
<h1 id="other-bits">other bits</h1>
<p><strong>xmms2</strong> supports a ton of plugins to play all sorts of formats.
Here is what I have installed (it’s not a complete list):</p>
<pre><code>$ xmms2 server plugins
airplay         - Airport Express output plugin
alsa            - Advanced Linux Sound Architecture output plugin
ao              - libao output plugin
apefile         - Monkey's Audio file format demuxer
asf             - Advanced Systems Format demuxer
asx             - Playlist plugin for Advanced Stream Redirector files.
avcodec         - ffmpeg libavcodec decoder
converter       - Sample format converter
cue             - Playlist parser for cue files
curl            - HTTP transport using CURL
diskwrite       - Dumps audio data to disk
equalizer       - Equalizer effect
faad            - Advanced Audio Coding decoder
file            - Plain local file transport
flac            - Free Lossless Audio Codec decoder
fluidsynth      - MIDI synthesiser
flv             - Extracts an audio stream from an FLV
gme             - Game Music Emulator music decoder
gvfs            - Transport for glibs virtual filesystem
html            - Reads HTML playlists
icymetaint      - Decode &amp; use shoutcast stream metadata
id3v2           - ID3v2 tag container handler
karaoke         - Voice removal effect plugin
m3u             - Playlist parser for m3u's
mad             - MPEG Layer 1/2/3 decoder
magic           - Magic file identifier
mid1            - MIDI file format-1 demuxer
midsquash       - Multitrack MIDI squasher
mms             - Microsoft Media Services xform
modplug         - Module file decoder
mp4             - MPEG-4 Part 14 file format demuxer
mpg123          - mpg123 decoder for MPEG 1.0/2.0/2.5 layer 1/2/3 audio
nibbler         - Discarding padding using auxdata startsamples/stopsamples
normalize       - Volume normalizer
null            - null output plugin
nulstripper     - Strips leading NUL bytes
ofa             - Open Fingerprint calculator
opus            - Xiph's Ogg/Opus decoder
oss             - OpenSoundSystem output plugin
pls             - Playlist parser for PLS files.
pulse           - Output to a PulseAudio server
replaygain      - Replaygain effect
ringbuf         - Buffer
segment         - Handling segment information specified by startms/stopms
sndfile         - Libsndfile decoder
speex           - Speex decoder
tremor          - Xiph's Ogg/Vorbis decoder (integer-only version)
tta             - True Audio Codec TTA file format parser
visualization   - visualization hook
vorbis          - Xiph's Ogg/Vorbis decoder
wave            - Wave decoder
wavpack         - WavPack decoder
xml             - XML plugin</code></pre>
<h1 id="why-xmms2">why xmms2?</h1>
<p>My path to <strong>xmms2</strong> was fun. My first audio player program was
<a href="https://en.wikipedia.org/wiki/Winamp#Winamp_2">winamp 2</a> on windows 98.
When I switched to linux I picked closest alternative (and even brought
my favourite hacker skin). It was <a href="https://en.wikipedia.org/wiki/XMMS">xmms</a>.</p>
<p><strong>xmms</strong> was a good player. But it’s upstream development stalled. It
was using <strong>gtk-1</strong> at the time when everyone else was migrating to
<strong>gtk-2</strong>. A bunch of <strong>gtk-2</strong> forks appeared and none looked close
enough to <strong>xmms</strong>. Some had too thick UI buttons, some had problems
playing enough audio formats I had. Most did not support <strong>xmms</strong> skins
and were not able to present their status as a 16-pixel high window
somewhere on the desktop.</p>
<p><strong>xmms2</strong> was a new project that aimed to be <strong>xmms</strong> done right
architecturally. I read the initial announcement at the
time and though it will eventually be just like <strong>xmms</strong>. Haha. I tried
<strong>xmms2</strong> out and was able to play all song formats I had. I was surprised
to see how quickly it builds from source.</p>
<p><strong>xmms2</strong> felt incomplete as it planned but never implemented GUI
client. Eventually <strong>abraca</strong> materialized but I never got to run
it: I already settled on my set of CLI hacks to play things.</p>
<p>Eventually <strong>xmms2</strong> development pace was slowing down. I was wondering
if there are any direct alternatives to <strong>xmms2</strong> out there. <strong>mpd</strong>
looked like a close match. But when I tried it I found <strong>xmms2</strong>
snappier to add files to the database and to scroll along the playlists
with <strong>i3</strong> keybindings. I suspect <strong>mpd</strong> was not optimised for that
use case. I never moved off <strong>xmms2</strong>. I still plan to add <strong>UNI</strong> module
file format support to <strong>xmms2</strong> via <strong>libmikmod</strong> or similar :)</p>

<div class="info">
    Posted on May  2, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>gcc profiler internals</title>
    <link href="http://trofi.github.io/posts/243-gcc-profiler-internals.html" />
    <id>http://trofi.github.io/posts/243-gcc-profiler-internals.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I occasionally encounter profiler bugs in gcc. Two related examples I
remember are <a href="https://gcc.gnu.org/PR96394">tauthon (python-2 fork)</a> and
<a href="https://gcc.gnu.org/PR105282">python</a> ICEs in <strong>PGO</strong> build mode. <strong>PGO</strong>
profile-guided optimisation.</p>
<p>I keep forgetting <strong>gcc</strong>’s internals aroung profiling handling and keep
re-tracing the same steps every time it comes up. I decided to write a
few words on it. I’ll cover a few generic details first and then we’ll
explore today’s <a href="https://gcc.gnu.org/PR105282">python</a> bug.</p>
<h1 id="using-gcc-profiler--fprofile-generate--fprofile-use">using gcc profiler: -fprofile-generate / -fprofile-use</h1>
<p>Let’s start from a trivial example. To build our program we run <strong>gcc</strong>
on it:</p>
<pre><code>$ gcc $CFLAGS prog.c -o prog</code></pre>
<p>To build an optimised program using profile feedback we need to perform
3 steps:</p>
<pre><code>$ gcc $CFLAGS -fprofile-generate prog.c -o prog
$ ./prog some-training-input-data
$ gcc $CFLAGS -fprofile-use      prog.c -o prog</code></pre>
<p>These are:</p>
<ol type="1">
<li>build instrumented program</li>
<li>run it to get a profile</li>
<li>build optimized program:</li>
</ol>
<p><strong>PGO</strong> build mode is not the only use of profile instrumentation.
<strong>GCC</strong> allows gathering runtime execution stats using different types
and formats (<a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html">instrumentation options</a>).</p>
<p>A few frequent uses are:</p>
<ul>
<li>call graph style profiling (<strong>-pg</strong> option): used to explore call
graph in <strong>gprof</strong> format.</li>
<li>execution statictics coverage (<strong>-ftest-coverage</strong> option): used to
extract close to line-by-line execution coverage in <strong>gcno</strong> format.</li>
<li>execution statistics profiles (<strong>-fprofile-generate</strong>): used to guide
optimization in future compilation (<strong>PGO</strong>) in <strong>gcda</strong> format.</li>
</ul>
<p>All these modes are not fundamentally different. They share
implementation and in-memory/on-disk format. I’ll look at a <strong>gcda</strong>
form. We’ll use the following sample code as our running example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* Keep the functions around to have real indirect calls. */</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DECL_F(fn) static void fn(void) __attribute__((noipa))</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define  DEF_F(fn) static void fn(void) {}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f0<span class="op">);</span> DEF_F<span class="op">(</span>f0<span class="op">);</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f1<span class="op">);</span> DEF_F<span class="op">(</span>f1<span class="op">);</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f2<span class="op">);</span> DEF_F<span class="op">(</span>f2<span class="op">);</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main <span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">&lt;</span> <span class="dv">2</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> <span class="dt">void</span><span class="op">(*</span>ft<span class="op">[])(</span><span class="dt">void</span><span class="op">)</span> <span class="op">=</span> <span class="op">{</span> <span class="op">&amp;</span>f0<span class="op">,</span> <span class="op">&amp;</span>f1<span class="op">,</span> <span class="op">&amp;</span>f2<span class="op">,</span> <span class="op">};</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> p <span class="op">=</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">];</span> <span class="op">*</span>p<span class="op">;</span> p<span class="op">++)</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        ft<span class="op">[*</span>p <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This program accepts one string argument (<strong>argv[1]</strong>) and calls
function <strong>f0()</strong>, <strong>f1()</strong>, or <strong>f2()</strong> somewhat randomly (based on
char modulo) against each byte of input string. The idea is that
it’s not immediately obvious which of the functions is called most
frequently.</p>
<p>This program has a few conditional branches and indirect calls. Let’s
profile it and see what stats we can collect. Building:</p>
<pre><code>$ gcc a.c -o a -fprofile-generate -fprofile-arcs -ftest-coverage -O2</code></pre>
<p>Running our program 5 times:</p>
<pre><code>$ ./a
$ ./a 123456789
$ ./a aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
$ ./a aa
$ ./a aaaa
$ ls
a  a.c  a.gcda  a.gcno</code></pre>
<p>Note that each <strong>./a</strong> run creates or updates <strong>a.gcda</strong> and <strong>a.gcno</strong>.
We can dump profiling statistics with <strong>gcov</strong>:</p>
<pre><code>$ gcov -a -b -c -f a
$ cat a.c.gcov
        -:    0:Source:a.c
        -:    0:Graph:a.gcno
        -:    0:Data:a.gcda
        -:    0:Runs:5
        -:    1:#include &lt;stddef.h&gt;
        -:    2:
        -:    3:/* Keep the functions around to have real indirect calls. */
        -:    4:#define DECL_F(fn) static void fn(void) __attribute__((noipa))
        -:    5:#define  DEF_F(fn) static void fn(void) {}
        -:    6:
function f0 called 3 returned 100% blocks executed 100%
        3:    7:DECL_F(f0); DEF_F(f0);
function f1 called 53 returned 100% blocks executed 100%
       53:    8:DECL_F(f1); DEF_F(f1);
function f2 called 3 returned 100% blocks executed 100%
        3:    9:DECL_F(f2); DEF_F(f2);
        -:   10:
function main called 5 returned 100% blocks executed 100%
        5:   11:int main (int argc, char *argv[]) {
        5:   12:    if (argc &lt; 2) return 0;
        5:   12-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -:   13:
        -:   14:    static const void(*ft[])(void) = { &amp;f0, &amp;f1, &amp;f2, };
        -:   15:    size_t sz = sizeof (ft) / sizeof (ft[0]);
        -:   16:
       63:   17:    for (const char * p = argv[1]; *p; p++)
        4:   17-block  0
       63:   17-block  1
branch  0 taken 59
branch  1 taken 4 (fallthrough)
       59:   18:        ft[*p % sz]();
       59:   18-block  0
call    0 returned 59
        -:   19:
        -:   20:    return 0;
        -:   21:}</code></pre>
<p>Here we see that:</p>
<ul>
<li><strong>ft[*p % sz]()</strong> gets called 59 times: 3 (<strong>f0</strong>) + 53 (<strong>f1</strong>) + 3 (<strong>f2</strong>)</li>
<li>function <strong>main()</strong> gets called 5 times; a full length of all the inputs we passed to <strong>./a</strong> program</li>
</ul>
<p>We also see frequency of <strong>if (argc &lt; 2) return 0;</strong> branches:</p>
<ul>
<li>was taken once (<strong>./a</strong> case, no arguments)</li>
<li>was not taken 4 times (all the other <strong>./a …</strong> calls)</li>
</ul>
<p>After profile collection we can build new binary using <strong>.gcda</strong> files
by changing <strong>-fprofile-generate</strong> to <strong>-fprofile-use</strong> in our <strong>gcc</strong>
calls:</p>
<pre><code>$ gcc a.c -o a -fprofile-use -O2</code></pre>
<p>Let’s compare the result against unprofiled build:</p>
<pre><code>$ gcc a.c -o a-unprof -O2</code></pre>
<p>I’ll skip disassembly as instructions do not change materially (the
program is too simple). The code order is slightly different in the two
binaries. Let’s have a look:</p>
<pre><code>$ nm -n a-unprof
...
0000000000400390 r __abi_tag
0000000000401000 T _init
0000000000401020 T main
0000000000401090 T _start
00000000004010c0 T _dl_relocate_static_pie
00000000004010d0 t deregister_tm_clones
0000000000401100 t register_tm_clones
0000000000401140 t __do_global_dtors_aux
0000000000401170 t frame_dummy
0000000000401180 t f0
0000000000401190 t f1
00000000004011a0 t f2
...</code></pre>
<pre><code>$ nm -n a
...
0000000000400390 r __abi_tag
0000000000401000 T _init
0000000000401020 T main
0000000000401080 t f1
0000000000401090 T _start
...</code></pre>
<p><strong>nm -n</strong> orders symbols in their in-memory order so we could
get the idea what goes where.</p>
<p>One can spot that in unprofiled build <strong>main()</strong> is quite far away from most
frequently called <strong>f1()</strong> function. While in profiled build
<strong>f1()</strong> immediately follows <strong>main()</strong>.</p>
<p>In more practical scenarios the effects are more pronounced:</p>
<ul>
<li>likely to execute code is laid out in a way that does not require branching</li>
<li>inlining can rely on execution statistics instead of function size heuristics</li>
<li><strong>-flto</strong> could perform global program code reordering to speedup binary loading from disk</li>
<li>and many other effects</li>
</ul>
<p>The main takeaway here is that <strong>PGO</strong> requires two full builds
(<strong>-fprofile-generate</strong> and <strong>-fprofile-use</strong>) and a program training
run.</p>
<p>In our example training data is biased towards inputs with <strong>‘a’</strong>
symbols and thus our program is probably slightly more efficient at
handling those.</p>
<p>In <strong>PGO</strong> builds the trick is to find suitable input training data.
Typical rookie mistake is to use <strong>./prog –help</strong> as a training run.
Do not do that: you will get program optimised for printing help text.
The rest will perform worse than typical unprofiled build.</p>
<h1 id="internals-gcov-dump-tool">internals: gcov-dump tool</h1>
<p>What exactly do these <strong>.gcda</strong> files contain? Let’s have a peek with
<strong>gcov-dump</strong> tool shipped with <strong>gcc</strong>:</p>
<pre><code>$ gcov-dump a.gcda

a.gcda:data:magic `gcda':version `B12*'
a.gcda:stamp 1137774494
a.gcda:  a1000000:   2:OBJECT_SUMMARY runs=5, sum_max=60
a.gcda:  01000000:   3:FUNCTION ident=108032747, lineno_checksum=0x0a7a17ea, cfg_checksum=0xc835c602
a.gcda:    01a10000:   8:COUNTERS arcs 4 counts
a.gcda:    01a90000:  16:COUNTERS indirect_call 8 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1567133468, lineno_checksum=0xdadb6f0d, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1025457522, lineno_checksum=0x745daa69, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1634904005, lineno_checksum=0x432c0dd4, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts</code></pre>
<p>Here we something about <strong>a.gcda</strong> contents. It has something about:</p>
<ul>
<li><p>5 program runs (<strong>OBJECT_SUMMARY runs=5</strong>)</p></li>
<li><p>4 FUNCTIONs, each contains information about:</p>
<ul>
<li><strong>arcs</strong>: conditional or unconditional branches</li>
<li><strong>indirect_call</strong> indirect branch targets</li>
<li><strong>time_profiler</strong>: count of times basic block was executed</li>
</ul></li>
</ul>
<p>Note that functions are identified not by name, but by a triple:</p>
<ul>
<li><strong>ident</strong>: name hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l548">coverage_compute_profile_id()</a></li>
<li><strong>lineno_checksum</strong>: source file name and line number hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l531">coverage_compute_lineno_checksum()</a></li>
<li><strong>cfg_checksum</strong>: control flow graph hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l588">coverage_compute_cfg_checksum()</a>
identifier stability can survive minor source code changes.</li>
</ul>
<p>You need a <strong>.gcno</strong> file to resolve these obscure identifiers back
to source line numbers.</p>
<p>Let’s look into individual counters of <strong>.gcda</strong> files. We can extract
then with <strong>-l</strong> option:</p>
<pre><code>$ gcov-dump -l a.gcda

a.gcda:data:magic `gcda':version `B12*'
a.gcda:stamp 1137774494
a.gcda:  a1000000:   2:OBJECT_SUMMARY runs=5, sum_max=60
a.gcda:  01000000:   3:FUNCTION ident=108032747, lineno_checksum=0x0a7a17ea, cfg_checksum=0xc835c602
a.gcda:    01a10000:   8:COUNTERS arcs 4 counts
a.gcda:                   0: 1 4 59 4
a.gcda:    01a90000:  16:COUNTERS indirect_call 8 counts
a.gcda:                   0: 59 3 1025457522 53 1567133468 3 1634904005 3
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 1
a.gcda:  01000000:   3:FUNCTION ident=1567133468, lineno_checksum=0xdadb6f0d, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 3
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 3
a.gcda:  01000000:   3:FUNCTION ident=1025457522, lineno_checksum=0x745daa69, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 53
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 2
a.gcda:  01000000:   3:FUNCTION ident=1634904005, lineno_checksum=0x432c0dd4, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 3
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 4</code></pre>
<p>Counters are harder to interpret without the context.</p>
<p>For example <strong>arcs</strong>
just list count of each branch taken known to the current function.
The string “FUNCTION ident=108032747: arcs 4 counts: 1 4 59 4” means that first
arc was taken once, third was taken 59 times.</p>
<p>Looking at the above <strong>a.c.gcov</strong> I
would guess <strong>FUNCTION ident=108032747</strong> is our <strong>main()</strong> function,
first counter is our <strong>if (argc &lt; 2) return 0;</strong> branch and the rest
are indirect call arcs to <strong>f1()</strong>, <strong>f2()</strong>, <strong>f3()</strong>.</p>
<p><strong>indirect_call</strong> is more complicated: the string “indirect_call 8 counts: 59 3 1025457522 53 1567133468 3 1634904005 3”
means that there were 59 indirect calls, top 3 are listed, first
indirection had 53 calls (with <strong>ident=1025457522</strong> as a target, probably <strong>f1()</strong>),
second and third are taken 3 times (probably <strong>f0()</strong> and <strong>f2()</strong> are the targets).</p>
<p><strong>time_profiler</strong> is the simplest one: it says how many times the
function itself was called.</p>
<p>Quiz question: why does <strong>ident=108032747</strong> (<strong>main()</strong> function) has
only one <strong>time_profile</strong> call and not 5?</p>
<h1 id="internals-libgcov">internals: libgcov</h1>
<p><strong>.gcda</strong> files are read at program startup and written at program
shutdown. Multiple program runs have an effect of merged profile statictics
from each run.</p>
<p>Some staticstics like <strong>runs</strong> are easy to merge:
just sum values together. But some like <strong>arcs</strong> are trickier:
how do we handle indirect calls with an unbound target fanout?
Should we store all of them? Or set a static or dynamic limit?</p>
<p>All these cases are handled by <strong>-lgcov</strong> library linked into
instrumented binaries. It’s API resides in
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov.h;h=487bd1464cd8e6f9ae4dc1ca25a68b0c8d836a74;hb=95874f95095f401405d3386e2e6695351b3f97b5#l282">libgcc/libgcov.h</a>
and has a few things to note:</p>
<ul>
<li>entry and exit points: <strong>__gcov_init()</strong> / <strong>__gcov_exit()</strong>.</li>
<li>profiler conters: <strong>__gcov_interval_profiler()</strong> / <strong>__gcov_time_profiler()</strong> / <strong>__gcov_indirect_call_profiler_v4()</strong></li>
<li>profile mergers: <strong>__gcov_merge_add()</strong> / <strong>__gcov_merge_time_profile()</strong> / <strong>__gcov_merge_topn()</strong></li>
<li>counter readers: <strong>gcov_get_counter()</strong> / <strong>gcov_get_counter_ignore_scaling()</strong> / <strong>gcov_get_counter_target()</strong></li>
<li>hooks to catch program re-execution: <strong>__gcov_fork()</strong> / <strong>__gcov_execl()</strong></li>
</ul>
<p>Let’s look at indirect call profiler details as an exampe. The other
metric types follow the same pattern.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-profiler.c;h=57617857a93197fcbf99c682df11c66b9fb2b589;hb=95874f95095f401405d3386e2e6695351b3f97b5#l169">__gcov_indirect_call_profiler_v4()</a>
implements an increment (in-memory) for <strong>indirect_call</strong>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>__gcov_indirect_call_profiler_v4 <span class="op">(</span>gcov_type value<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>cur_func<span class="op">)</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  __gcov_indirect_call_profiler_body <span class="op">(</span>value<span class="op">,</span> cur_func<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co">/* By default, the C++ compiler will use function addresses in the</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="co">   vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="co">   tells the compiler to use function descriptors instead.  The value</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co">   of this macro says how many words wide the descriptor is (normally 2).</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="co">   It is assumed that the address of a function descriptor may be treated</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="co">   as a pointer to a function.  */</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="co">/* Tries to determine the most common value among its inputs. */</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>__gcov_indirect_call_profiler_body <span class="op">(</span>gcov_type value<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>cur_func<span class="op">,</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>                                    <span class="dt">int</span> use_atomic<span class="op">)</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* If the C++ virtual tables contain function descriptors then one</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co">     function may have multiple descriptors and we need to dereference</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="co">     the descriptors to see if they point to the same function.  */</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>cur_func <span class="op">==</span> __gcov_indirect_call<span class="op">.</span>callee</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>      <span class="op">||</span> <span class="op">(</span>__LIBGCC_VTABLE_USES_DESCRIPTORS__</span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>          <span class="op">&amp;&amp;</span> <span class="op">*(</span><span class="dt">void</span> <span class="op">**)</span> cur_func <span class="op">==</span> <span class="op">*(</span><span class="dt">void</span> <span class="op">**)</span> __gcov_indirect_call<span class="op">.</span>callee<span class="op">))</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>    __gcov_topn_values_profiler_body <span class="op">(</span>__gcov_indirect_call<span class="op">.</span>counters<span class="op">,</span> value<span class="op">,</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>                                      use_atomic<span class="op">);</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>  __gcov_indirect_call<span class="op">.</span>callee <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="co">/* Tries to determine N most commons value among its inputs.  */</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>__gcov_topn_values_profiler_body <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>                                  <span class="dt">int</span> use_atomic<span class="op">)</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>  gcov_topn_add_value <span class="op">(</span>counters<span class="op">,</span> value<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> use_atomic<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a><span class="co">/* Add key value pair VALUE:COUNT to a top N COUNTERS.  When INCREMENT_TOTAL</span></span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a><span class="co">   is true, add COUNT to total of the TOP counter.  If USE_ATOMIC is true,</span></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a><span class="co">   do it in atomic way.  Return true when the counter is full, otherwise</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a><span class="co">   return false.  */</span></span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">unsigned</span></span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>gcov_topn_add_value <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span> gcov_type count<span class="op">,</span></span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">int</span> use_atomic<span class="op">,</span> <span class="dt">int</span> increment_total<span class="op">)</span></span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span></code></pre></div>
<p>Here we see that <strong>indirect_call</strong> is a <strong>topn</strong> style counter as it’s handled by
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov.h;h=487bd1464cd8e6f9ae4dc1ca25a68b0c8d836a74;hb=95874f95095f401405d3386e2e6695351b3f97b5#l487">gcov_topn_add_value()</a>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">unsigned</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>gcov_topn_add_value <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span> gcov_type count<span class="op">,</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">int</span> use_atomic<span class="op">,</span> <span class="dt">int</span> increment_total<span class="op">)</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>increment_total<span class="op">)</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* In the multi-threaded mode, we can have an already merged profile</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">         with a negative total value.  In that case, we should bail out.  */</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>counters<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>      gcov_counter_add <span class="op">(&amp;</span>counters<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">,</span> use_atomic<span class="op">);</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>prev_node <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>minimal_node <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>current_node  <span class="op">=</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*)(</span><span class="dt">intptr_t</span><span class="op">)</span>counters<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>current_node<span class="op">)</span></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>current_node<span class="op">-&gt;</span>value <span class="op">==</span> value<span class="op">)</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>          gcov_counter_add <span class="op">(&amp;</span>current_node<span class="op">-&gt;</span>count<span class="op">,</span> count<span class="op">,</span> use_atomic<span class="op">);</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>          <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>A few things to note here:</p>
<ul>
<li><strong>gcov_topn_add_value()</strong> increments <strong>counters[ix]</strong> where <strong>ix</strong> matches <strong>value</strong> being counted.</li>
<li><strong>gcov_topn_add_value()</strong> increments <strong>counters[0]</strong> as it treats it as “total”</li>
<li>negative “total” values are special and are related to merged values (how?)</li>
</ul>
<p>Let’s look at the merge function for <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-merge.c;h=89741f637e1efae86d193762b668015c36243098;hb=95874f95095f401405d3386e2e6695351b3f97b5#l89">__gcov_merge_topn()</a>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* The profile merging function for choosing the most common value.</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="co">   It is given an array COUNTERS of N_COUNTERS old counters and it</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="co">   reads the same number of counters from the gcov file.  The counters</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="co">   are split into pairs where the members of the tuple have</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="co">   meanings:</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="co">   -- the stored candidate on the most common value of the measured entity</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="co">   -- counter</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="co">   We use -TOTAL for situation when merging dropped some values.</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a><span class="co">   The information is used for -fprofile-reproducible flag.</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="co">   */</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>__gcov_merge_topn <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> <span class="dt">unsigned</span> n_counters<span class="op">)</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>  gcc_assert <span class="op">(!(</span>n_counters <span class="op">%</span> GCOV_TOPN_MEM_COUNTERS<span class="op">));</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span>n_counters <span class="op">/</span> GCOV_TOPN_MEM_COUNTERS<span class="op">);</span> i<span class="op">++)</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* First value is number of total executions of the profiler.  */</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>      gcov_type all <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>      gcov_type n <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>      <span class="dt">unsigned</span> full <span class="op">=</span> all <span class="op">&lt;</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>      gcov_type <span class="op">*</span>total <span class="op">=</span> <span class="op">&amp;</span>counters<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">];</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>      <span class="op">*</span>total <span class="op">+=</span> full <span class="op">?</span> <span class="op">-</span>all <span class="op">:</span> all<span class="op">;</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> n<span class="op">;</span> j<span class="op">++)</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a>          gcov_type value <span class="op">=</span> gcov_get_counter_target <span class="op">();</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a>          gcov_type count <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a>          <span class="co">// </span><span class="al">TODO</span><span class="co">: we should use atomic here</span></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a>          full <span class="op">|=</span> gcov_topn_add_value <span class="op">(</span>counters <span class="op">+</span> GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">,</span></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a>                                       value<span class="op">,</span> count<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>full<span class="op">)</span></span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>total <span class="op">=</span> <span class="op">-(*</span>total<span class="op">);</span></span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Once again we see that first pair of key/value is treated as “total” count
of calls. Merger is the place where overflow of <strong>gcov_topn_add_value()</strong>
is detected and “total” is stored as a negative value to show this fact.</p>
<p>All the counter types are written on disk with
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-driver.c;h=d4517d269eb32ca84ee1dfa069bda4e872a1ac98;hb=95874f95095f401405d3386e2e6695351b3f97b5#l502">write_once_data()</a>.
From there we see that
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-driver.c;h=d4517d269eb32ca84ee1dfa069bda4e872a1ac98;hb=95874f95095f401405d3386e2e6695351b3f97b5#l432">write_topn_counters()</a>
dumps them as:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Store all TOP N counters where each has a dynamic length.  */</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>write_topn_counters <span class="op">(</span><span class="dt">const</span> <span class="kw">struct</span> gcov_ctr_info <span class="op">*</span>ci_ptr<span class="op">,</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">unsigned</span> t_ix<span class="op">,</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>                     gcov_unsigned_t n_counts<span class="op">,</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">(*</span>dump_fn<span class="op">)</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">void</span> <span class="op">*,</span> <span class="dt">unsigned</span><span class="op">,</span> <span class="dt">void</span> <span class="op">*),</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*(*</span>allocate_fn<span class="op">)(</span><span class="dt">unsigned</span><span class="op">,</span> <span class="dt">void</span> <span class="op">*),</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*</span>arg<span class="op">)</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> disk_size <span class="op">=</span> GCOV_TOPN_DISK_COUNTERS <span class="op">*</span> counters <span class="op">+</span> <span class="dv">2</span> <span class="op">*</span> pair_total<span class="op">;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>  dump_unsigned <span class="op">(</span>GCOV_TAG_FOR_COUNTER <span class="op">(</span>t_ix<span class="op">),</span> dump_fn<span class="op">,</span> arg<span class="op">),</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>  dump_unsigned <span class="op">(</span>GCOV_TAG_COUNTER_LENGTH <span class="op">(</span>disk_size<span class="op">),</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> counters<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>      dump_counter <span class="op">(</span>ci_ptr<span class="op">-&gt;</span>values<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">],</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>      dump_counter <span class="op">(</span>list_sizes<span class="op">[</span>i<span class="op">],</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>      gcov_type start <span class="op">=</span> ci_ptr<span class="op">-&gt;</span>values<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i <span class="op">+</span> <span class="dv">2</span><span class="op">];</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>      <span class="dt">unsigned</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*</span>node <span class="op">=</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*)(</span>__INTPTR_TYPE__<span class="op">)</span>start<span class="op">;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>           j <span class="op">&lt;</span> list_sizes<span class="op">[</span>i<span class="op">];</span> node <span class="op">=</span> node<span class="op">-&gt;</span>next<span class="op">,</span> j<span class="op">++)</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a>          dump_counter <span class="op">(</span>node<span class="op">-&gt;</span>value<span class="op">,</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a>          dump_counter <span class="op">(</span>node<span class="op">-&gt;</span>count<span class="op">,</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This just writes key/value pairs on disk. Nothing fancy. No special handling
of negative values. This makes on-disk format rougly match in-memory format.</p>
<p>Now we can alswer our quiz question on why <strong>time_profiler</strong> still has a
value of <strong>1</strong> for <strong>main()</strong> even after 5 program runs.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-merge.c;h=89741f637e1efae86d193762b668015c36243098;hb=95874f95095f401405d3386e2e6695351b3f97b5#l68">__gcov_merge_time_profile()</a>
tells us:</p>
<pre><code>/* Time profiles are merged so that minimum from all valid (greater than zero)
   is stored. There could be a fork that creates new counters. To have
   the profile stable, we chosen to pick the smallest function visit time.  */
void
__gcov_merge_time_profile (gcov_type *counters, unsigned n_counters)
{
  unsigned int i;
  gcov_type value;

  for (i = 0; i &lt; n_counters; i++)
    {
      value = gcov_get_counter_target ();

      if (value &amp;&amp; (!counters[i] || value &lt; counters[i]))
        counters[i] = value;
    }
}</code></pre>
<p>The counter stores fastest execution for the function. Not a sum of
execution times (as I thought initially).</p>
<p>The takeaways here are:</p>
<ul>
<li><strong>gcc</strong> implements a few types of counters: histogram-style <strong>TOPN</strong> counters,
simpler numeric counters and a few others.</li>
<li>merge policies for counters are dependent on their exact meaning; they are not cimplicated but have a few
gotchas like negative values.</li>
<li><strong>libgcov</strong> provides runtime for both program being profiled and <strong>gcov</strong> standalone tool</li>
</ul>
<h1 id="internals-gcc-emitted-code">internals: gcc-emitted code</h1>
<p>Let’s check how counters are embedded into our program. I suggest looking at the
optimised <strong>GIMPLE</strong> tree. Here is our original program:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* Keep the functions around to have real indirect calls. */</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DECL_F(fn) static void fn(void) __attribute__((noipa))</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define  DEF_F(fn) static void fn(void) {}</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f0<span class="op">);</span> DEF_F<span class="op">(</span>f0<span class="op">);</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f1<span class="op">);</span> DEF_F<span class="op">(</span>f1<span class="op">);</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f2<span class="op">);</span> DEF_F<span class="op">(</span>f2<span class="op">);</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main <span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">&lt;</span> <span class="dv">2</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> <span class="dt">void</span><span class="op">(*</span>ft<span class="op">[])(</span><span class="dt">void</span><span class="op">)</span> <span class="op">=</span> <span class="op">{</span> <span class="op">&amp;</span>f0<span class="op">,</span> <span class="op">&amp;</span>f1<span class="op">,</span> <span class="op">&amp;</span>f2<span class="op">,</span> <span class="op">};</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> p <span class="op">=</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">];</span> <span class="op">*</span>p<span class="op">;</span> p<span class="op">++)</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>        ft<span class="op">[*</span>p <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We will dump final <strong>GIMPLE</strong> with <strong>-fdump-tree-optimized</strong> flag.
I’ll paste the output in 3 pieces (as the output is quite big):</p>
<ul>
<li><strong>main()</strong> function</li>
<li><strong>f0()</strong> function</li>
<li>constructor/destructor</li>
</ul>
<p>Let’s dump <strong>GIMPLE</strong> first:</p>
<pre><code>$ gcc -c a.c -fprofile-generate -fprofile-arcs -ftest-coverage -O2 -fdump-tree-optimized
$ cat a.c.244t.optimized</code></pre>
<p>Her is our <strong>main()</strong>:</p>
<pre><code>;; Function main (main, funcdef_no=3, decl_uid=1966, cgraph_uid=4, symbol_order=3) (executed once)

__attribute__((access (&quot;^1[ ]&quot;, )))
int main (int argc, char * * argv)
{
  const char * p;
  static void (*&lt;T34b&gt;) (void) ft[3] = {f0, f1, f2};
  long unsigned int _1;
  long unsigned int _2;
  void (*&lt;T34b&gt;) (void) _3;
  char _4;
  long int PROF_edge_counter_14;
  long int PROF_edge_counter_15;
  long int PROF_edge_counter_16;
  long int PROF_edge_counter_17;
  long int PROF_edge_counter_18;
  long int PROF_edge_counter_19;
  long int PROF_edge_counter_20;
  long int PROF_edge_counter_21;
  long int _23;
  long int time_profile_24;
  long int time_profile_25;
  void * _26;
  char _39;
  char _40;

  &lt;bb 2&gt; [local count: 160390549]:
  _26 = __gcov_indirect_call.D.1993;
  if (_26 != 0B)
    goto &lt;bb 3&gt;; [20.00%]
  else
    goto &lt;bb 4&gt;; [80.00%]

  &lt;bb 3&gt; [local count: 160390549]:
  __gcov_indirect_call_profiler_v4 (108032747, main);

  &lt;bb 4&gt; [local count: 160390549]:
  _23 = __gcov7.main[0];
  if (_23 == 0)
    goto &lt;bb 5&gt;; [20.00%]
  else
    goto &lt;bb 6&gt;; [80.00%]

  &lt;bb 5&gt; [local count: 160390549]:
  time_profile_24 = __gcov_time_profiler_counter;
  time_profile_25 = time_profile_24 + 1;
  __gcov7.main[0] = time_profile_25;
  __gcov_time_profiler_counter = time_profile_25;

  &lt;bb 6&gt; [local count: 160390549]:
  if (argc_8(D) &lt;= 1)
    goto &lt;bb 7&gt;; [26.36%]
  else
    goto &lt;bb 8&gt;; [73.64%]

  &lt;bb 7&gt; [local count: 42278949]:
  PROF_edge_counter_14 = __gcov0.main[0];
  PROF_edge_counter_15 = PROF_edge_counter_14 + 1;
  __gcov0.main[0] = PROF_edge_counter_15;
  goto &lt;bb 11&gt;; [100.00%]

  &lt;bb 8&gt; [local count: 118111600]:
  PROF_edge_counter_16 = __gcov0.main[1];
  PROF_edge_counter_17 = PROF_edge_counter_16 + 1;
  __gcov0.main[1] = PROF_edge_counter_17;
  p_11 = MEM[(char * *)argv_10(D) + 8B];
  _39 = *p_11;
  if (_39 != 0)
    goto &lt;bb 9&gt;; [89.00%]
  else
    goto &lt;bb 10&gt;; [11.00%]

  &lt;bb 9&gt; [local count: 955630226]:
  # _40 = PHI &lt;_4(9), _39(8)&gt;
  # p_41 = PHI &lt;p_13(9), p_11(8)&gt;
  _1 = (long unsigned int) _40;
  _2 = _1 % 3;
  _3 = ft[_2];
  __gcov_indirect_call.D.1994 = &amp;__gcov4.main[0];
  __gcov_indirect_call.D.1993 = _3;
  _3 ();
  PROF_edge_counter_18 = __gcov0.main[2];
  PROF_edge_counter_19 = PROF_edge_counter_18 + 1;
  __gcov0.main[2] = PROF_edge_counter_19;
  p_13 = p_41 + 1;
  _4 = MEM[(const char *)p_13];
  if (_4 != 0)
    goto &lt;bb 9&gt;; [89.00%]
  else
    goto &lt;bb 10&gt;; [11.00%]

  &lt;bb 10&gt; [local count: 118111600]:
  PROF_edge_counter_20 = __gcov0.main[3];
  PROF_edge_counter_21 = PROF_edge_counter_20 + 1;
  __gcov0.main[3] = PROF_edge_counter_21;

  &lt;bb 11&gt; [local count: 160390549]:
  return 0;

}</code></pre>
<p>While it’s a lot of code each counter handling is straightforward:</p>
<ul>
<li>read the counter out</li>
<li>update the counter</li>
<li>write it back</li>
</ul>
<p>Here we already see a few glbal variables being updated:</p>
<ul>
<li><strong>__gcov_time_profiler_counter</strong>: global timer counter gets incremented once.</li>
<li><strong>__gcov7.main[0]</strong>: <strong>main</strong> timer counter gets incremented once.</li>
<li><strong>__gcov0.main[0,1,2,3]</strong>: <strong>main</strong> arc counters (to <strong>f0()</strong>, <strong>f1()</strong>, <strong>f2()</strong>)</li>
</ul>
<p>Note that <strong>main()</strong> does build explicitl arcs to
<strong>f0()</strong>/<strong>f1()f2()</strong> but it does not know where indirections leads
it to. Thus <strong>gcc</strong> stores indirection to <strong>__gcov_indirect_call.D.1993</strong>
global.</p>
<p>TO maintain the indirect counters <strong>gcc</strong> relies on target to increment it:</p>
<pre><code>;; Function f2 (f2, funcdef_no=2, decl_uid=1960, cgraph_uid=3, symbol_order=2)

__attribute__((noipa, noinline, noclone, no_icf))
void f2 ()
{
  long int PROF_edge_counter_2;
  long int PROF_edge_counter_3;
  long int _4;
  long int time_profile_5;
  long int time_profile_6;
  void * _7;

  &lt;bb 2&gt; [local count: 1073741824]:
  _7 = __gcov_indirect_call.D.1993;
  if (_7 != 0B)
    goto &lt;bb 3&gt;; [20.00%]
  else
    goto &lt;bb 4&gt;; [80.00%]

  &lt;bb 3&gt; [local count: 1073741824]:
  __gcov_indirect_call_profiler_v4 (1567133468, f2);

  &lt;bb 4&gt; [local count: 1073741824]:
  PROF_edge_counter_2 = __gcov0.f2[0];
  PROF_edge_counter_3 = PROF_edge_counter_2 + 1;
  __gcov0.f2[0] = PROF_edge_counter_3;
  _4 = __gcov7.f2[0];
  if (_4 == 0)
    goto &lt;bb 5&gt;; [20.00%]
  else
    goto &lt;bb 6&gt;; [80.00%]

  &lt;bb 5&gt; [local count: 1073741824]:
  time_profile_5 = __gcov_time_profiler_counter;
  time_profile_6 = time_profile_5 + 1;
  __gcov7.f2[0] = time_profile_6;
  __gcov_time_profiler_counter = time_profile_6;

  &lt;bb 6&gt; [local count: 1073741824]:
  return;

}

;; Function f1 (f1, funcdef_no=1, decl_uid=1955, cgraph_uid=2, symbol_order=1)
... same as f0
;; Function f2 (f0, funcdef_no=0, decl_uid=1950, cgraph_uid=1, symbol_order=0)
... same as f2</code></pre>
<p>Here the same <strong>__gcov_indirect_call.D.1993</strong> is being used to increment the counter
in case <strong>f2()</strong> is indirection target. If <strong>f2()</strong> is called directly then this
global would not be populated.</p>
<pre><code>;; Function _sub_I_00100_0 (_sub_I_00100_0, funcdef_no=4, decl_uid=2028, cgraph_uid=6, symbol_order=17) (executed once)

void _sub_I_00100_0 ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  __gcov_init (&amp;*.LPBX0); [tail call]
  return;

}

;; Function _sub_D_00100_1 (_sub_D_00100_1, funcdef_no=5, decl_uid=2031, cgraph_uid=7, symbol_order=18) (executed once)

void _sub_D_00100_1 ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  __gcov_exit (); [tail call]
  return;
}</code></pre>
<p>And here we see <strong>-lgcov</strong> startup and shutdown code in constructor and
destructor. Simple!</p>
<h1 id="the-actual-bug">the actual bug</h1>
<p>Now if all the above has some sense to you then <a href="https://gcc.gnu.org/PR105282" class="uri">https://gcc.gnu.org/PR105282</a>
should look less mysterious. There <strong>python</strong> managed to ICE <strong>gcc</strong> when
program was optimised with training data available.</p>
<p>Let’s look at the minimised example:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">void</span> <span class="op">(*</span>cb_t<span class="op">)(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define F(__fn) static void __fn(void) {}</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f00<span class="op">);</span>F<span class="op">(</span>f01<span class="op">);</span>F<span class="op">(</span>f02<span class="op">);</span>F<span class="op">(</span>f03<span class="op">);</span>F<span class="op">(</span>f04<span class="op">);</span>F<span class="op">(</span>f05<span class="op">);</span>F<span class="op">(</span>f06<span class="op">);</span>F<span class="op">(</span>f07<span class="op">);</span>F<span class="op">(</span>f08<span class="op">);</span>F<span class="op">(</span>f09<span class="op">);</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f10<span class="op">);</span>F<span class="op">(</span>f11<span class="op">);</span>F<span class="op">(</span>f12<span class="op">);</span>F<span class="op">(</span>f13<span class="op">);</span>F<span class="op">(</span>f14<span class="op">);</span>F<span class="op">(</span>f15<span class="op">);</span>F<span class="op">(</span>f16<span class="op">);</span>F<span class="op">(</span>f17<span class="op">);</span>F<span class="op">(</span>f18<span class="op">);</span>F<span class="op">(</span>f19<span class="op">);</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f20<span class="op">);</span>F<span class="op">(</span>f21<span class="op">);</span>F<span class="op">(</span>f22<span class="op">);</span>F<span class="op">(</span>f23<span class="op">);</span>F<span class="op">(</span>f24<span class="op">);</span>F<span class="op">(</span>f25<span class="op">);</span>F<span class="op">(</span>f26<span class="op">);</span>F<span class="op">(</span>f27<span class="op">);</span>F<span class="op">(</span>f28<span class="op">);</span>F<span class="op">(</span>f29<span class="op">);</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f30<span class="op">);</span>F<span class="op">(</span>f31<span class="op">);</span>F<span class="op">(</span>f32<span class="op">);</span>F<span class="op">(</span>f33<span class="op">);</span>F<span class="op">(</span>f34<span class="op">);</span>F<span class="op">(</span>f35<span class="op">);</span>F<span class="op">(</span>f36<span class="op">);</span>F<span class="op">(</span>f37<span class="op">);</span>F<span class="op">(</span>f38<span class="op">);</span>F<span class="op">(</span>f39<span class="op">);</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f40<span class="op">);</span>F<span class="op">(</span>f41<span class="op">);</span>F<span class="op">(</span>f42<span class="op">);</span>F<span class="op">(</span>f43<span class="op">);</span>F<span class="op">(</span>f44<span class="op">);</span>F<span class="op">(</span>f45<span class="op">);</span>F<span class="op">(</span>f46<span class="op">);</span>F<span class="op">(</span>f47<span class="op">);</span>F<span class="op">(</span>f48<span class="op">);</span>F<span class="op">(</span>f49<span class="op">);</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> f<span class="op">(</span><span class="dt">int</span> i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Needs to be bigger than gcc's GCOV_TOPN_MAXIMUM_TRACKED_VALUES == 32</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a><span class="co">     * to overflow GCOV_COUNTER_V_INDIR couter type.</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a><span class="co">     */</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> cb_t fs<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f00<span class="op">,&amp;</span>f01<span class="op">,&amp;</span>f02<span class="op">,&amp;</span>f03<span class="op">,&amp;</span>f04<span class="op">,&amp;</span>f05<span class="op">,&amp;</span>f06<span class="op">,&amp;</span>f07<span class="op">,&amp;</span>f08<span class="op">,&amp;</span>f09<span class="op">,</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f10<span class="op">,&amp;</span>f11<span class="op">,&amp;</span>f12<span class="op">,&amp;</span>f13<span class="op">,&amp;</span>f14<span class="op">,&amp;</span>f15<span class="op">,&amp;</span>f16<span class="op">,&amp;</span>f17<span class="op">,&amp;</span>f18<span class="op">,&amp;</span>f19<span class="op">,</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f20<span class="op">,&amp;</span>f21<span class="op">,&amp;</span>f22<span class="op">,&amp;</span>f23<span class="op">,&amp;</span>f24<span class="op">,&amp;</span>f25<span class="op">,&amp;</span>f26<span class="op">,&amp;</span>f27<span class="op">,&amp;</span>f28<span class="op">,&amp;</span>f29<span class="op">,</span></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f30<span class="op">,&amp;</span>f31<span class="op">,&amp;</span>f32<span class="op">,&amp;</span>f33<span class="op">,&amp;</span>f34<span class="op">,&amp;</span>f35<span class="op">,&amp;</span>f36<span class="op">,&amp;</span>f37<span class="op">,&amp;</span>f38<span class="op">,&amp;</span>f39<span class="op">,</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f40<span class="op">,&amp;</span>f41<span class="op">,&amp;</span>f42<span class="op">,&amp;</span>f43<span class="op">,&amp;</span>f44<span class="op">,&amp;</span>f45<span class="op">,&amp;</span>f46<span class="op">,&amp;</span>f47<span class="op">,&amp;</span>f48<span class="op">,&amp;</span>f49<span class="op">,</span></span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>fs<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>fs<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a>    fs<span class="op">[</span>i <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> l<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[]);</span></span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">==</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">25</span><span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">==</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">25</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">50</span><span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb23-36"><a href="#cb23-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE on <strong>gcc-12</strong> or <strong>gcc-11</strong>:</p>
<pre><code>$ gcc -flto -O0 a.c -fprofile-generate -o a
$ ./a # populate first 25 buckets
$ ./a 1 # populate 25 more buckets, cause overflow
$ gcc -flto -O0 a.c -fprofile-use -o a

during IPA pass: modref
a.c:36:1: internal compiler error: in stream_out_histogram_value, at value-prof.cc:340
   36 | }
      | ^
0x8351fb stream_out_histogram_value(output_block*, histogram_value_t*)
        ../../gcc-12-20220410/gcc/value-prof.cc:340
0x1c848c0 output_gimple_stmt
        ../../gcc-12-20220410/gcc/gimple-streamer-out.cc:192
0x1c848c0 output_bb(output_block*, basic_block_def*, function*)
        ../../gcc-12-20220410/gcc/gimple-streamer-out.cc:227
0xdc91ad output_function
        ../../gcc-12-20220410/gcc/lto-streamer-out.cc:2453
0xdc91ad lto_output()
        ../../gcc-12-20220410/gcc/lto-streamer-out.cc:2796
0xe57b11 write_lto
        ../../gcc-12-20220410/gcc/passes.cc:2762
0xe57b11 ipa_write_summaries_1
        ../../gcc-12-20220410/gcc/passes.cc:2826
0xe57b11 ipa_write_summaries()
        ../../gcc-12-20220410/gcc/passes.cc:2882
0xaac060 ipa_passes
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2209
0xaac060 symbol_table::compile()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2282
0xaaea77 symbol_table::compile()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2262
0xaaea77 symbol_table::finalize_compilation_unit()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2530</code></pre>
<p>Here the bug is in <strong>stream_out_histogram_value()</strong> function which
tried to stream out on disk perfectly valid profile details around
<strong>main()</strong>:</p>
<pre><code>$ gcov-dump -l a.gcda
...
a.gcda:    01a90000: 528:COUNTERS indirect_call 66 counts
a.gcda:                   0: -50 32 1456173180 1 1792104613 1 918340114 1
a.gcda:                   8: 1406444659 1 263798468 1 1664310260 1 1063174467 1
a.gcda:                  16: 1596551981 1 54847898 1 533075953 1 1135316294 1
a.gcda:                  24: 601636648 1 2142348703 1 450479102 1 1186224457 1
a.gcda:                  32: 416313568 1 1153296983 1 617240633 1 2024260238 1
a.gcda:                  40: 1680162021 1 944285266 1 1480528956 1 72519307 1
a.gcda:                  48: 1631250666 1 1029141085 1 941945699 1 1682532820 1
a.gcda:                  56: 71228346 1 1481851149 1 1154596710 1 414983633 1
a.gcda:                  64: 2026608575 1</code></pre>
<p>The <strong>-50</strong> is our “total” count of indirections. It’s negative because
<strong>25</strong> calls from first run were merged with <strong>25</strong> calls from second call.
Histograms have a limit of <strong>32</strong> unique values. The other 18 were discarded.
Negative count signals this fact.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/value-prof.c;h=42748771192f8302cfe637d23d589848d9b8fcb7;hb=1eee4e08a64f6e931b0c5dd1bb854a2b7ad3d58f#l311">gcc/value-prof.cc:stream_out_histogram_value()</a>
was too strict on it’s assumption around counter types:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode cc"><code class="sourceCode cpp"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>stream_out_histogram_value <span class="op">(</span><span class="kw">struct</span> output_block <span class="op">*</span>ob<span class="op">,</span> histogram_value hist<span class="op">)</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> hist<span class="op">-&gt;</span>n_counters<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* When user uses an unsigned type with a big value, constant converted</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a><span class="co">         to gcov_type (a signed type) can be negative.  */</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">gcov_type</span> value <span class="op">=</span> hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>counters<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>hist<span class="op">-&gt;</span>type <span class="op">==</span> HIST_TYPE_TOPN_VALUES</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a>          <span class="op">||</span> hist<span class="op">-&gt;</span>type <span class="op">==</span> HIST_TYPE_IOR<span class="op">)</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* Note that the IOR counter tracks pointer values and these can have</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="co">           sign bit set.  */</span></span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">;</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a>      <span class="cf">else</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>        gcc_assert <span class="op">(</span>value <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>      streamer_write_gcov_count <span class="op">(</span>ob<span class="op">,</span> value<span class="op">);</span></span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>next<span class="op">)</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>    stream_out_histogram_value <span class="op">(</span>ob<span class="op">,</span> hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>next<span class="op">);</span></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <strong>gcc</strong> asserts that every value in <strong>TOPN</strong> couters has to be non-negative.
Was trivial <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=7b879564ec2bda6b5441fbaf231d70ec6359db01">to fix</a>
by skipping first “total” counter that could be negative on overflows like above:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/value-prof.c</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/value-prof.c</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -336,6 +336,10 @@ stream_out_histogram_value (struct output_block *ob, histogram_value hist)</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>        /* Note that the IOR counter tracks pointer values and these can have</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>           sign bit set.  */</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>        ;</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="va">+      else if (hist-&gt;type == HIST_TYPE_INDIR_CALL &amp;&amp; i == 0)</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a><span class="va">+       /* 'all' counter overflow is stored as a negative value. Individual</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="va">+          counters and values are expected to be non-negative.  */</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a><span class="va">+       ;</span></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>       else</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>        gcc_assert (value &gt;= 0);</span></code></pre></div>
<p>So much behind this three-liner.</p>
<h1 id="final-words">final words</h1>
<p>Profiler bugs are frequently hard. Mechanical reduction on real program
is usually very fragile: most material code changes change both generated
instrumented code and break the program on training run. It’s “infeasible”
to incrementally reduce both program and input data for large projects
like <strong>firefox</strong> or <strong>python</strong>.</p>
<p>I say “infeasible” as I successully reduced
<strong>tauthon</strong> once in <a href="https://gcc.gnu.org/PR96394" class="uri">https://gcc.gnu.org/PR96394</a>. It took me almost 2 months
to extract small reproducer manually. I don’t think I’ll do it ever again :)</p>
<p>First time it was fun: I found a lot more than I imagined about <strong>python</strong>
implementation: how it embeds it’s own bytecode into executable, how bootstrap
python loads the rest of python modules using this bootstrap code.</p>
<p>When faced with another prof failure in <strong>python</strong> in <a href="https://gcc.gnu.org/PR105282" class="uri">https://gcc.gnu.org/PR105282</a>
I initially thought it would be impossible for me to do it again from
scratch. On top of that it added <strong>-flto</strong> to make things even less
manageable. But I was lucky to reproduce the crash and derive the
reproducer out of <strong>gdb</strong> backtrace.</p>
<p><strong>PGO</strong>-style builds have another unusual property: they are very dependent
on input training data and on any internal non-determinism your program
has. For example, if your program uses random-seeded hash tables you
will get slightly different profile outputs from run to run.</p>
<p>Slightly different profile outputs lead to slightly different
optimization decision during compilation. Different decisions lead to
different output binaries. Without special effort you will probably get
unique binary every time you build a real world project with <strong>PGO</strong>
support.</p>
<p>It might not be a big deal with regards to performance of final binary.
But it might be quite a headache if one of such rare states causes
compiler to generate invalid result. It might be very hard to reproduce
(and fix).</p>
<p>But if you have to deal with <strong>PGO</strong> bugs then try to look straight into
what <strong>gcc</strong> is doing.</p>
<p>Have fun!</p>

<div class="info">
    Posted on May  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>gcc-12 journey</title>
    <link href="http://trofi.github.io/posts/242-gcc-12-journey.html" />
    <id>http://trofi.github.io/posts/242-gcc-12-journey.html</id>
    <published>2022-04-24T00:00:00Z</published>
    <updated>2022-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>It’s the end of April. This <a href="https://gcc.gnu.org/releases.html">means</a>
<strong>gcc-12</strong> will likely get released soon.</p>
<p>6 months passed since I wrote about fancy bugs in development versions
of <strong>gcc</strong>. Nowadays I use <a href="https://gcc.gnu.org/pub/gcc/snapshots/LATEST-12/">weekly gcc snapshots</a>
against <strong>nixpkgs</strong> tree. Usually I rebuild just my system against
weekly <strong>gcc</strong> shapshots. But sometimes I build random packages to check
how <strong>gcc</strong> behaves on more exotic code bases. Most of the time
everything Just Works. It would be too boring if things worked all the
time.</p>
<p>Since November 2021 I encountered ~30 <strong>gcc</strong> bugs which
makes it roughly one bug a week. I could hardly handle more than that.</p>
<p>I’ll list most of these bugs below. ICEs (internal compiler errors) are
usually the easiest to find and report. Wrong-code bugs are more
interesting and are also way harder to minimize and report.</p>
<p>I usually get to know a lot more about <strong>gcc</strong> from wrong-code cases.
This time I got only two of them. I’ll start from them.</p>
<h1 id="fipa-modref-strikes-again">-fipa-modref strikes again</h1>
<p><a href="https://gcc.gnu.org/PR103432">ipa/103432</a>: <strong>gcc</strong> miscompiled
<strong>libjxl</strong> in a way that test suite started failing.</p>
<p>I can’t provide a small failure example as the bug requires specific
inline to happen within one compilation.</p>
<p>The effect program result difference when built with <strong>-O0</strong> versus
<strong>-O2</strong>. The test was a floating point workload. Those always have a
potential of being not-a-bug, but an expected precision loss (like
<strong>fma()</strong> precision increase).</p>
<p>It took me a while to reduce original test manually to something that
is still a valid program but is small enough to be able to debug it.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a70faf6e4df7481c2c9a08a06657c20beb3043de">The fix</a>
tells us what kind of error it was in <strong>gcc</strong>: information about inferred
effects of functions was calculated but not actually used, something
else’s ditails were used. It’s a nasty kind of bugs: things work for
smaller programs and break only in non-trivial scenarios.</p>
<p>I’m glad I spent some time to extract the reproducer.</p>
<h1 id="global-constructors-wrong-code">global constructors wrong code</h1>
<p><a href="https://gcc.gnu.org/PR104031">c++/104031</a>: <strong>gcc</strong> generated
wrong global initializer for <strong>nix</strong>. Minimal example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> vector</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  vector<span class="op">(){}</span>  <span class="op">~</span>vector<span class="op">(){}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Info <span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    vector args<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> arity <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> RegisterPrimOp</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">[[</span><span class="ex">gnu::noipa</span><span class="op">,</span><span class="at"> </span><span class="ex">gnu::noinline</span><span class="op">]]</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    RegisterPrimOp<span class="op">(</span>Info info<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>info<span class="op">.</span>arity <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>            <span class="fu">__builtin_trap</span><span class="op">();</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> RegisterPrimOp <span class="va">s_op</span><span class="op">({</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>args <span class="op">=</span> vector<span class="op">{},</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>arity <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{}</span></span></code></pre></div>
<p>The code’s idea is to always have <strong>arity</strong> initialized to <strong>0</strong>. In
practice <strong>gcc-12</strong> managed to put something else into <strong>arity</strong>:</p>
<pre><code># ok:
$ g++-11.2.0 main.cc -o main -O2 &amp;&amp; ./main

# bad:
$ g++-12.0.0 main.cc -o main -O2 &amp;&amp; ./main
Illegal instruction (core dumped)</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=aeca44768d54b089243004d1ef00d34dfa9f6530">The fix</a>
sheds some light into why it happens: this declaration syntax is special
and it was not handled in some definitions. As a result <strong>arity</strong> was
uninitialized.</p>
<h1 id="type-comparison-ice">type comparison ICE</h1>
<p><a href="https://gcc.gnu.org/PR103279">c++/101715</a>: <strong>gcc</strong> ICE
on clang’s <strong>compiler-rt</strong> library. Minimized example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> A<span class="op">&gt;</span> <span class="kw">struct</span> S <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> bar<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">);</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> foo<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">);</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> A<span class="op">&gt;</span> S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> S<span class="op">&lt;</span>A<span class="op">&gt;::</span>foo<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">)</span> <span class="op">{}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 -c a.c.cpp -std=c++14
# no crash

$ g++-12.0.0 -c a.c.cpp -std=c++17
a.c.cpp:6:56: internal compiler error: canonical types differ for identical types 'S&lt;A&gt;&amp; (S&lt;A&gt;::)() noexcept (A::value)' and 'S&lt;A&gt;&amp; (S&lt;A&gt;::)() noexcept (A::value)'
    6 | template &lt;class A&gt; S&lt;A&gt; &amp; S&lt;A&gt;::foo() noexcept(A::value) {}
      |                                                        ^
0xc3f6ee comptypes(tree_node*, tree_node*, int)
        ../../gcc-12-20211226/gcc/cp/typeck.c:1558
...</code></pre>
<p>Note that <strong>-std=c++14</strong> is not enough to trigger the failure. <strong>gcc-11</strong>
did change the default from <strong>gnu++14</strong> to <strong>gnu++17</strong>.</p>
<p>Sometimes <strong>gcc</strong> needs to compare types for equality. That usually
happens in template instantiation when closest specialization is picked.
It might sound easy, but the subtlety is in details: template types can
refer to other (possibly not yet defined) template types in their
definition.</p>
<p>When instantiation happens it’s crucial to resolve identical types into
the same canonical type.</p>
<p>In the <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=3abcbf243239f9576a60f4ce7f8ee4b3fa14784b">commit message</a>
Marek added great explataion how canonical types came into divergence.</p>
<h1 id="null-warnings-in-dynamic_cast-expressions">null warnings in dynamic_cast expressions</h1>
<p><a href="https://gcc.gnu.org/PR96003">c++/96003</a>: <strong>gcc</strong> failed to build
<strong>firefox</strong> (due to <strong>-Werror=null</strong>). Minimized example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>A <span class="op">();</span> <span class="op">};</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>B <span class="op">();</span> <span class="dt">void</span> f <span class="op">();</span> <span class="op">};</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f <span class="op">(</span>A <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span><span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">))</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">)-&gt;</span>f <span class="op">();</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Build error:</p>
<pre><code>$ gcc -O2 -S -Wall t.C
t.C: In function ‘void f(A*)’:
t.C:7:29: warning: ‘this’ pointer is null [-Wnonnull]
    7 |     dynamic_cast&lt;B*&gt;(p)-&gt;f ();
      |                             ^
t.C:2:32: note: in a call to non-static member function ‘void B::f()’
    2 | struct B { virtual ~B (); void f (); };
      |                                ^</code></pre>
<p>This time it’s not an <strong>ICE</strong> but a seemingly reasonable warning.
Ideally original code should be restructured into something simpler, like:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>A <span class="op">();</span> <span class="op">};</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>B <span class="op">();</span> <span class="dt">void</span> f <span class="op">();</span> <span class="op">};</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f <span class="op">(</span>A <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    B <span class="op">*</span> b <span class="op">=</span> <span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">);</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>b<span class="op">)</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        b<span class="op">-&gt;</span>f <span class="op">();</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=df5cf47a978aaeb53fc2b18ff0b22eb4531a27d8">The fix</a>
suppressed warnings for some cases where similar code is generated by
<strong>gcc</strong> itself (instead of being handwritten). More complicated cases
will still issue warnings.</p>
<p>You might need to clean your code up to avoid similar warnings.</p>
<h1 id="vectored-intrinsics-ice">vectored intrinsics ICE</h1>
<p><a href="https://gcc.gnu.org/PR102080">middle-end/102080</a>: <strong>gcc</strong> ICE
on <strong>firefox</strong> build. Minimized example:</p>
<pre class="c+++"><code>// cat dec_reconstruct.cc.cc
#pragma GCC target &quot;avx&quot;
typedef float __m256 __attribute__((__vector_size__(32)));
__m256 _mm256_blendv_ps___Y, _mm256_blendv_ps___M, _mm256_mul_ps___A,
    _mm256_mul_ps___B, IfThenElse___trans_tmp_9;
void IfThenElse(__m256 no) {
  IfThenElse___trans_tmp_9 = __builtin_ia32_blendvps256(
      no, _mm256_blendv_ps___Y, _mm256_blendv_ps___M);
}
#pragma GCC target &quot;avx512vl&quot;
void EncodedFromDisplay() {
  __m256 __trans_tmp_11 = _mm256_mul_ps___A * _mm256_mul_ps___B;
  IfThenElse(__trans_tmp_11);
}</code></pre>
<p>ICE:</p>
<pre><code>$ /tmp/gcc-c/gcc/xg++ -B/tmp/gcc-c/gcc -c dec_reconstruct.cc.cc -O0
# no crash

$ /tmp/gcc-c/gcc/xg++ -B/tmp/gcc-c/gcc -c dec_reconstruct.cc.cc -O2
during RTL pass: expand
dec_reconstruct.cc.cc: In function 'void EncodedFromDisplay()':
dec_reconstruct.cc.cc:10:6: internal compiler error: in expand_insn, at optabs.c:7946
   10 | void EncodedFromDisplay() {
      |      ^~~~~~~~~~~~~~~~~~</code></pre>
<p>The sample is not very readable but it’s essentially a direct call of
<strong>__builtin_ia32_blendvps256()</strong> <strong>AVX</strong> intrinsic. Those usually get
translated 1-to-1 into CPU instructions.</p>
<p>Here the crash happens in <strong>expand_insn()</strong> where middle end expands
<strong>GIMPLE</strong> (C style tree-like representation) into <strong>RTL</strong> (assembly style
instruction-like representation). Assertion complains about unexpected
arguments.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a26ff83ed07e33c4aa46f3314553c0d15ca21100">The fix</a>
adjusts one of <strong>GIMPLE</strong> simplifiers to not generate invalid <strong>GIMPLE</strong>
around vectored conditionals.</p>
<h1 id="atomics-intrinsics-ice">atomics intrinsics ICE</h1>
<p><a href="https://gcc.gnu.org/PR103268">tree-optimization/103268</a>: <strong>gcc</strong> ICE
on <strong>glib</strong> build. Minimized example:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> si<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>test_types <span class="op">(</span><span class="dt">long</span> n<span class="op">)</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> <span class="dt">int</span> u2 <span class="op">=</span> __atomic_fetch_xor <span class="op">(&amp;</span>si<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">5</span><span class="op">);</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> u2<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ gcc -O2 -S x.c
during GIMPLE pass: fab
x.c: In function ‘test_types’:
x.c:3:1: internal compiler error: in optimize_atomic_bit_test_and, at tree-ssa-ccp.c:3645
    3 | test_types (long n)
      | ^~~~~~~~~~
0x1515c9d optimize_atomic_bit_test_and
    /export/gnu/import/git/gitlab/x86-gcc/gcc/tree-ssa-ccp.c:3645</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=074ee8d9a91d7573c1e8774a22e4e08f923adb18">The fix</a>
suggests the tree matcher had an accident fall-through code.
It was supposed to reject unhandled cases instead of attempting
to generate something nonsensical.</p>
<h1 id="vectored-instructions-selector-ice">vectored instructions selector ICE</h1>
<p><a href="https://gcc.gnu.org/PR103557">target/103557</a>: <strong>gcc</strong> ICE
on <strong>tpm2-tss</strong> build. Minimized example:</p>
<pre><code>struct {
  char sm3_256[32];
} TPMU_HA;
typedef struct {
  short size;
  char buffer[sizeof(TPMU_HA)];
} TPM2B_DIGEST;
typedef struct {
  TPM2B_DIGEST auths[3];
} TSS2L_SYS_AUTH_COMMAND;

void Tss2_Sys_Clear(TSS2L_SYS_AUTH_COMMAND);

void sysContext(void) {
  TPM2B_DIGEST nonce = {};
  TSS2L_SYS_AUTH_COMMAND sessionsDataIn = {{nonce}};
  Tss2_Sys_Clear(sessionsDataIn);
}</code></pre>
<p>ICE:</p>
<pre><code>$ gcc-12.0.0 -O2  -c a.c.c -o a.o
during RTL pass: sched2
a.c.c: In function 'sysContext':
a.c.c:19:1: internal compiler error: Segmentation fault
   19 | }
      | ^
0x1e22687 internal_error(char const*, ...)
        ???:0
0xe7e43c memory_operand(rtx_def*, machine_mode)
        ???:0
0x167e598 get_attr_memory(rtx_insn*)
        ???:0
0x19a4bc0 insn_default_latency_generic(rtx_insn*)
        ???:0
0x1c74ad3 insn_sched_cost(rtx_insn*)
        ???:0
0x1c77934 dep_cost_1(_dep*, unsigned int)
        ???:0
0x1c79d7f set_priorities(rtx_insn*, rtx_insn*)
        ???:0
0xec28e2 compute_priorities()
        ???:0</code></pre>
<p>In this case instruction selector fails to fetch the details
around memory reference accessed by instruction.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc">The change</a>
fixes <strong>x86</strong>-specific vectored instruction definitions to accept
expected inputs.</p>
<h1 id="another-atomics-ice">another atomics ICE</h1>
<p><a href="https://gcc.gnu.org/PR103682">tree-optimization/103682</a>: <strong>gcc</strong> ICE
on some cryptographic code. Minimized example:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;atomic&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> bug<span class="op">(</span><span class="bu">std::</span>atomic<span class="op">&lt;</span><span class="dt">unsigned</span><span class="op">&gt;</span> <span class="op">&amp;</span> ready<span class="op">,</span> <span class="dt">unsigned</span> u<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">(</span>ready<span class="op">.</span>fetch_and<span class="op">(~</span>u<span class="op">)</span> <span class="op">&amp;</span> u<span class="op">);</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 -Ofast -c bug.cpp
during GIMPLE pass: fab
bug.cpp: In function 'bool bug(std::atomic&lt;unsigned int&gt;&amp;, unsigned int)':
bug.cpp:6:6: internal compiler error: gimple check: expected gimple_assign(error_mark), have gimple_nop() in gimple_assign_rhs_code, at gimple.h:2852
    6 | bool bug(std::atomic&lt;unsigned&gt; &amp; ready, unsigned u) {
      |      ^~~
0x20a58f7 internal_error(char const*, ...)
        ???:0
0x7c76dd gimple_check_failed(gimple const*, char const*, int, char const*, gimple_code, tree_code)
        ???:0</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a2a0c91b47537b16908981e206f4e42db8425eca">The fix</a>
shows us it was another case where one particular case of <strong>GIMPLE</strong>
form was not handled.</p>
<h1 id="another-template-instantiation-ice">another template instantiation ICE</h1>
<p><a href="https://gcc.gnu.org/PR103769">c++/103769</a>: <strong>gcc</strong> ICE
on <strong>openttd</strong>. Minimized example:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">&gt;</span> <span class="kw">using</span> t <span class="op">=</span> T<span class="op">;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">...&gt;</span> <span class="kw">struct</span> s<span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">...</span> Args<span class="op">&gt;</span> s<span class="op">&lt;</span>t<span class="op">&lt;</span>Args<span class="op">&gt;...&gt;</span> f<span class="op">()</span> <span class="op">{</span> f<span class="op">&lt;</span><span class="dt">void</span><span class="op">&gt;();</span> <span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 --param=hash-table-verification-limit=1000 -O1 -o a.o -c bug.cpp

hash table checking failed: equal operator returns true for a pair of values with a different hash value
bug.cpp: In substitution of 'template&lt;class ... Args&gt; s&lt;Args ...&gt; f() [with Args = {void}]':
bug.cpp:3:56:   required from here
bug.cpp:3:43: internal compiler error: in hashtab_chk_error, at hash-table.c:137
    3 | template &lt;typename... Args&gt; s&lt;t&lt;Args&gt;...&gt; f() { f&lt;void&gt;(); }
      |                                           ^
0x9c316d hashtab_chk_error()
        ../../gcc-12-20220102/gcc/hash-table.c:137
0xbeca15 hash_table&lt;spec_hasher, false, xcallocator&gt;::verify(spec_entry* const&amp;, unsigned int)
        ../../gcc-12-20220102/gcc/hash-table.h:1036
0xbecb6f hash_table&lt;spec_hasher, false, xcallocator&gt;::find_with_hash(spec_entry* const&amp;, unsigned int)
        ../../gcc-12-20220102/gcc/hash-table.h:921
0xbd58bc lookup_template_class_1
        ../../gcc-12-20220102/gcc/cp/pt.c:9905</code></pre>
<p>This is aanother <strong>c++</strong> frontend bug where identical types have
different objects. Here I found out about <strong>--param=hash-table-verification-limit=1000</strong>
option which enables more frequent type mismatches like this.
Without this option the bug disappears when program is still large.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=07be8f8da4c6840a1fd6b2229b147e50cc6f03dc">The change</a>
shows it was a case of reused type object in typedef simplification.</p>
<h1 id="yet-another-vectored-expansion-ice">yet another vectored expansion ICE</h1>
<p><a href="https://gcc.gnu.org/PR103842">target/103842</a>: <strong>gcc</strong> ICE
on <strong>ilmbase-2.5.7</strong>. Minimized example:</p>
<pre><code>void abs(float *);
struct Matrix33 {
  float x[3][3];
  float *operator[](int i) { return x[i]; }
  Matrix33();
  Matrix33(float f, float g) {
    x[1][0] = x[1][1] = x[1][2] = f;
    x[2][0] = g;
  }
  void equalWithAbsError();
  Matrix33 inverse() {
    Matrix33 s(x[1][2] - x[1][2], x[1][1] - x[1][1]);
    float r = s[2][0];
    if (r)
      for (int i = 0; i &lt; 3; ++i)
        for (int j = 0; j &lt; 3; ++j)
          s[i][j] /= r;
    for (int i = 0;;) {
      float *__trans_tmp_2 = s[i];
      abs(__trans_tmp_2);
    }
  }
};
void __assert_fail() {
  Matrix33 m, inv1 = m.inverse(), ident1 = inv1;
  ident1.equalWithAbsError();
}</code></pre>
<p>ICE:</p>
<pre><code>
$ g++-12.0.0 -O3 -c bug.cpp.cpp
during RTL pass: expand
bug.cpp.cpp: In function 'void __assert_fail()':
bug.cpp.cpp:27:5: internal compiler error: Segmentation fault
   27 |     }
      |     ^
0x21196c6 internal_error(char const*, ...)
        ???:0</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=242783c52c22ed96eae722b2fa9847711ac84699">The change</a>
fixes another case of <strong>x86</strong>-specific instruction selector that
generates unexpected instruction parameters.</p>
<h1 id="one-more-vectored-instruction-ice">one more vectored instruction ICE</h1>
<p><a href="https://gcc.gnu.org/PR103894">target/103894</a>: <strong>gcc</strong> ICE
on <strong>valgrind</strong>.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=1096ab1775636f35de9c6661f8f71f03299af998">The change</a>
fixes marking of available SSE instructions in 32-bit mode.</p>
<h1 id="precompiled-headers">precompiled headers</h1>
<p><a href="https://gcc.gnu.org/PR103910">target/103910</a>: <strong>gcc</strong> ICE
on <strong>openjdk</strong>. Minimized example:</p>
<pre><code>#include &quot;precompiled.hpp&quot;
void *operator new(unsigned long, void *__p) { return __p; }
#define MEMORY_TYPES_DO(f) f(mtNone, )
enum MEMFLAGS {};
#define MEMORY_TYPE_SHORTNAME(type, human_readable) MEMFLAGS type;
MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME) struct GrowableArrayView {
  GrowableArrayView(int *, int, int);
};
int *GrowableArrayWithAllocator_data;
struct GrowableArrayWithAllocator : GrowableArrayView {
  GrowableArrayWithAllocator(int initial_max)
      : GrowableArrayView(GrowableArrayWithAllocator_data, initial_max, 0) {
    for (int i = 0; i &lt; initial_max; i++)
      new (&amp;GrowableArrayWithAllocator_data[i]) int();
  }
};
struct GrowableArrayMetadata {
  GrowableArrayMetadata(MEMFLAGS);
};
struct GrowableArray : GrowableArrayWithAllocator {
  GrowableArrayMetadata _metadata;
  GrowableArray(int initial_max)
      : GrowableArrayWithAllocator(initial_max), _metadata(mtNone) {}
};
struct SourceObjList {
  SourceObjList();
};
SourceObjList::SourceObjList() { GrowableArray(128 * 1024); }</code></pre>
<p>ICE:</p>
<pre><code>$ rm -rf ph
$ mkdir -p ph
$ touch precompiled_.hpp # create empty file
$ ./xg++ -B. -O3 -march=opteron -fcheck-new -c precompiled_.hpp -o ph/precompiled.hpp.gch
$ ./xg++ -B. -O3 -march=opteron -fcheck-new -Iph -c archiveBuilder.cpp -o a.o

during GIMPLE pass: aprefetch
archiveBuilder.cpp: In constructor ‘SourceObjList::SourceObjList()’:
archiveBuilder.cpp:28:1: internal compiler error: in gimple_build_call, at gimple.c:267
   28 | SourceObjList::SourceObjList() { GrowableArray(128 * 1024); }
      | ^~~~~~~~~~~~~
0xd2845f gimple_build_call(tree_node*, unsigned int, ...)
        gcc/gimple.c:267
0x12880c8 emit_mfence_after_loop
        gcc/tree-ssa-loop-prefetch.c:1300
0x12880c8 mark_nontemporal_stores
        gcc/tree-ssa-loop-prefetch.c:1359
0x12880c8 loop_prefetch_arrays
        gcc/tree-ssa-loop-prefetch.c:1955
0x12880c8 tree_ssa_prefetch_arrays()
        gcc/tree-ssa-loop-prefetch.c:2031
0x1288be9 execute
        gcc/tree-ssa-loop-prefetch.c:2097</code></pre>
<p>This is an unusual and scary case: precompiled headers are implemented
as a serialization of part of <strong>gcc</strong> heap. The serialization tries
hard to be very fast and cuts corners in various places. Up to the point
where building positional-independent <strong>gcc</strong> binary breaks <strong>GCH</strong>:
<a href="https://gcc.gnu.org/PR71934" class="uri">https://gcc.gnu.org/PR71934</a>. It’s very fragile. It does not have to be.</p>
<p>To make <strong>GCH</strong> somehow work <strong>gcc</strong>’s internals have garbage collector
implementation. It requires global variables to be annotated with
<strong>gcc</strong>-specific <a href="https://gcc.gnu.org/onlinedocs//gccint/GTY-Options.html">GTY markings</a>
that describe heap layout.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=d243f4009d8071b734df16cd70f4c5d09a373769">The change</a>
hints at an <strong>x86_mfence</strong> global variable that did not have the marking.</p>
<p>Why did it break only with <strong>GCH</strong>?</p>
<p>Without <strong>GCH</strong>, <strong>x86_mfence</strong> is referenced via another global object which
has <strong>GTY</strong> marking. Both are constructed via normal means of <strong>gcc</strong>
parsing the source.</p>
<p>With GCH, that another global object is restored at a different location
and the decl that is refenced by <strong>x86_mfence</strong> is GC’ed out.</p>
<h1 id="c-frontend-constructor-ice">C++ frontend constructor ICE</h1>
<p><a href="https://gcc.gnu.org/PR104583">c++/103910</a>: <strong>gcc</strong> ICE
on <strong>dolphin-emu</strong>. Minimized example:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> TVec3 <span class="op">{</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>  TVec3<span class="op">();</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> data<span class="op">;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>using Vec3 <span class="op">=</span> TVec3<span class="op">;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>  Vec3 position<span class="op">{};</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> EmulatePoint_state<span class="op">;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> EmulatePoint<span class="op">()</span> <span class="op">{</span> EmulatePoint_state <span class="op">=</span> <span class="op">{};</span> <span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/gcc/xg++ -B/tmp/gcc -c bug.cc -freport-bug
bug.cc: In function ‘void EmulatePoint()’:
bug.cc:9:42: internal compiler error: in cp_gimplify_expr, at cp/cp-gimplify.cc:746
    9 | void EmulatePoint() { EmulatePoint_state = {}; }
      |                       ~~~~~~~~~~~~~~~~~~~^~~~
0x7a0fb2 cp_gimplify_expr(tree_node**, gimple**, gimple**)
        gcc/cp/cp-gimplify.cc:746
0xd9fb80 gimplify_expr(tree_node**, gimple**, gimple**, bool (*)(tree_node*), int)
        gcc/gimplify.cc:14893
0xdab095 gimplify_init_ctor_preeval
        gcc/gimplify.cc:4678</code></pre>
<p>In this case <strong>gcc</strong> was unable to generate <strong>GIMPLE</strong> out of
<strong>EmulatePoint_state = {};</strong> statement.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb">The change</a>
expands set of cases that look like a constructor call.</p>
<h1 id="fun-option-handling-bug">fun option handling bug</h1>
<p><a href="https://gcc.gnu.org/PR104705">middle-end/104705</a>: <strong>gcc</strong> ICEs when
tried to build <strong>ghc</strong>.</p>
<p>Normally I would expect <strong>ghc</strong> to be the last project to crash <strong>gcc</strong>
as it does not do anything fancy in C land. And yet here we are.
Minimized example:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC optimize &quot;foo&quot;</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC push_options</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC pop_options</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/bg/gcc/xgcc -B/tmp/bg/gcc -c a.c  -O2 -Wall
a.c:1:9: warning: bad option ‘-ffoo’ to pragma ‘optimize’ [-Wpragmas]
    1 | #pragma GCC optimize &quot;foo&quot;
      |         ^~~
a.c:3:9: internal compiler error: ‘global_options’ are modified in local context
    3 | #pragma GCC pop_options
      |         ^~~</code></pre>
<p>A cryptic assert.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=111754595cf8d3a8ae7063a42ac4cea18a304711">The fix</a>
says that <strong>-g*</strong> option was not accounted for when option contexts are
created and destroyed with pragmas.</p>
<h1 id="unexpected-analyzer-ices">unexpected analyzer ICEs</h1>
<p><a href="https://gcc.gnu.org/PR105074">analyzer/105074</a>: <strong>gcc</strong> ICE when
tried to build <strong>gnutls</strong>.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> _gnutls_log<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*);</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> _gnutls_ocsp_verify_mandatory_stapling<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>  _gnutls_log<span class="op">(</span>__func__<span class="op">);</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> check_ocsp_response_gnutls_x509_cert_verify_peers<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>  _gnutls_ocsp_verify_mandatory_stapling<span class="op">();</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/gb/gcc/xgcc -B/tmp/gb/gcc -O2 -fanalyzer -c cert-session.c

during IPA pass: analyzer
In function ‘_gnutls_ocsp_verify_mandatory_stapling’,
    inlined from ‘check_ocsp_response_gnutls_x509_cert_verify_peers’ at cert-session.c:7:3:
cert-session.c:4:3: internal compiler error: Segmentation fault
    4 |   _gnutls_log(__func__);
      |   ^~~~~~~~~~~~~~~~~~~~~
0xdd6bc3 crash_signal
        gcc/toplev.cc:322
0x8a8120 cgraph_node::get_edge(gimple*)
        gcc/cgraph.cc:744
0x121059c ipa_ref_requires_tracking
        gcc/analyzer/region.cc:1192
0x121059c symnode_requires_tracking_p
        gcc/analyzer/region.cc:1235
0x121059c ana::decl_region::calc_tracked_p(tree_node*)
        gcc/analyzer/region.cc:1254
0x1234786 ana::decl_region::decl_region(unsigned int, ana::region const*, tree_node*)</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=1203e8f7880c9751ece5f5302e413b20f4608a00">The change</a>
adjusts the checks for expressions without explicit declaration.</p>
<p>On a surface side it’s an obscure <strong>-fanalyzer</strong> crash on <strong><strong>func</strong></strong>
expression that should not pop up frequently. Perhaps <strong>gnutls</strong> is a
rare package that enables <strong>-fanalyser</strong>?</p>
<p>No. If we look at the source of <strong>-fanalyzer</strong> flag we’ll find that it’s
one of default warnings of … <a href="https://git.savannah.gnu.org/cgit/gnulib.git/commit/?id=3831e2e9f355c557b0c0ed9712548b62feaf694f"><strong>gnulib(!)</strong></a>.</p>
<p>We will probably see a lot more analyser crashes as it’s one of the
more complex pieces of <strong>gcc</strong>.</p>
<h1 id="ia64-rtl-mach-ice">ia64 RTL mach ICE</h1>
<p><a href="https://gcc.gnu.org/PR105215">target/105215</a>: <strong>gcc</strong> ICE
on <strong>openssl</strong> (<strong>ia64</strong> target).</p>
<p>Not fixed yet.</p>
<h1 id="ia64-rtl-mach-ice-1">ia64 RTL mach ICE</h1>
<p><a href="https://gcc.gnu.org/PR105247">target/105247</a>: <strong>gcc</strong> ICE
on <strong>sqlite-3.38.2</strong> (<strong>ia64</strong> target). Minimal example:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> sqlite3CodeVerifySchemaAtToplevel_pToplevel_0<span class="op">;</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3CodeVerifySchema<span class="op">();</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3FindInIndex_pParse<span class="op">()</span> <span class="op">{</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> i <span class="op">=</span> <span class="op">-</span><span class="dv">8</span><span class="op">;</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>  sqlite3CodeVerifySchema<span class="op">(</span>sqlite3FindInIndex_pParse<span class="op">,</span> i<span class="op">);</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3CodeVerifySchema<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span> iDb<span class="op">)</span> <span class="op">{</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>  sqlite3CodeVerifySchemaAtToplevel_pToplevel_0 <span class="op">|=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> iDb<span class="op">;</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ ia64-unknown-linux-gnu-gcc -O1 -c sqlite3-sqlite3.o.c -o a.o

during RTL pass: cse1
sqlite3-sqlite3.o.c: In function 'sqlite3FindInIndex_pParse':
sqlite3-sqlite3.o.c:7:1: internal compiler error: in decompose, at rtl.h:2288
    7 | }
      | ^
0xa02263 wi::int_traits&lt;&gt;::decompose()
        ../../gcc-12-20220410/gcc/rtl.h:2288
0xa02263 wide_int_ref_storage&lt;&gt;::wide_int_ref_storage&lt;&gt;()
        ../../gcc-12-20220410/gcc/wide-int.h:1024
0xa02263 generic_wide_int&lt;&gt;::generic_wide_int&lt;&gt;()
        ../../gcc-12-20220410/gcc/wide-int.h:782
0xa02263 wide_int_storage::wide_int_storage&lt;&gt;()</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=ba2f60499dd4a3bc1bb4e99fa12dda3bc1548519">The change</a>
has a great explanation of the details by Jakub: arithmetic shift
(to implement <strong>1 &lt;&lt; iDb</strong>) on <strong>ia64</strong> is slightly different from
other targets: it’s defined only for 64-bit type (<strong>long</strong> /
<strong>unsigned ulong</strong> types).</p>
<h1 id="popcount-and-libgcc">popcount and libgcc</h1>
<p><a href="https://gcc.gnu.org/PR105253">middle-end/105253</a>: <strong>gcc</strong> fails
to build <strong>linux</strong>. Minimal example:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>foo <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> i<span class="op">,</span> cnt <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> elem<span class="op">;</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span><span class="dv">256</span> <span class="op">/</span> <span class="dv">64</span><span class="op">);</span> i<span class="op">++)</span></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>      elem <span class="op">=</span> p<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(;</span> elem<span class="op">;</span> cnt<span class="op">++)</span></span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a>        elem <span class="op">&amp;=</span> elem <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> cnt<span class="op">;</span></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Link error:</p>
<pre><code>ERROR: modpost: &quot;__popcountdi2&quot; [drivers/net/ethernet/broadcom/bnx2x/bnx2x.ko] undefined!
ERROR: modpost: &quot;__popcountdi2&quot; [drivers/gpu/drm/amd/amdgpu/amdgpu.ko] undefined!</code></pre>
<p>Long time ago <strong>gcc</strong> used to produce direct CPU instructions to
implement this code. Nowadays <strong>gcc</strong> recognises this pattern
and converts it to a <strong>__builtin_popcountl()</strong> call.</p>
<p>If CPU supports <strong>popcnt</strong> instruction then <strong>gcc</strong> emits it as is.
But if CPU has no support for it <strong>gcc</strong> generates <strong>__popcountdi2</strong>
external function call. <strong>__popcountdi2</strong> is implemented in <strong>libgcc</strong>
for all targets.</p>
<p>Normally such a replacement just works. But linux kernel does not use <strong>libgcc</strong> for
various rasons and prefers to re-implement such builtins (division,
shifts, memcpy, strlen operations). But <strong>popcout</strong> ones did not
occur frequently enough to be re-implemented in kernel.</p>
<p>One of the fixes would be to extend linux kernel with <strong>popcount</strong>.
But so far <strong>gcc</strong>
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=29c46490de4616b911fccb34a9479f768fb51e94">tweaked</a>
cost heuristics to avoid such conversion for targets that don’t have
efficient <strong>popcnt</strong>.</p>
<p>Until next time perhaps :)</p>
<h1 id="parting-words">Parting words</h1>
<p>Most of these bugs are short-lived and would have no chance to slip
into a release. Most ICEs are also not hard to workaround when
encountered.</p>
<p>The wrong-code bugs are the subtlest. These usually live for a while
until they get noticed.</p>
<p>Bug stats by subsystem:</p>
<ul>
<li>6 <strong>target</strong>: 3 vectorisation bugs, 2 <strong>ia64</strong> bugs, 1 <strong>GCH</strong> bug</li>
<li>5 <strong>c++</strong> frontend</li>
<li>3 <strong>middle-end</strong>: vectorisation, option parsing and popcount instruction one bug each</li>
<li>2 <strong>tree-opt</strong>: both are atomics bugs</li>
<li>1 <strong>ipa</strong></li>
<li>1 <strong>analyzer</strong></li>
</ul>
<p>If not for <strong>ia64</strong> bugs <strong>c++</strong> would be the primary source of bugs.</p>
<p><strong>gcc-12</strong> is very close to a release cut date. I hope it to be smooth.</p>
<p>As usual here is a list if notable changes for upcoming release:
<a href="https://gcc.gnu.org/gcc-12/changes.html" class="uri">https://gcc.gnu.org/gcc-12/changes.html</a></p>
<p>If you feel like it do give the <strong>gcc</strong> snapshot a try.</p>
<p>Have fun!</p>

<div class="info">
    Posted on April 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nix gc speedup improvements</title>
    <link href="http://trofi.github.io/posts/241-nix-gc-speedup-improvements.html" />
    <id>http://trofi.github.io/posts/241-nix-gc-speedup-improvements.html</id>
    <published>2022-04-04T00:00:00Z</published>
    <updated>2022-04-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I wondered the other day: why my <strong>nix store gc</strong> takes an hour to run
on a system with a few terabytes of garbage packages to clean up. Is it
a typical time or could something be optimised to make it slightly
faster?</p>
<p>I ran <strong>top</strong> while <strong>nix store gc</strong> was churning and noticed it was a
CPU-bound task. That was unusual.</p>
<h1 id="background">Background</h1>
<p><strong>nix</strong> package manager never changes files inplace when it installs new
packages into <strong>/nix/store</strong>. This makes installation and uninstallation
operations cheap: no need for <strong>sync()</strong>-style calls or file locks.</p>
<p>Single package installation could be viewed as 2 steps:</p>
<ol type="1">
<li>unpack new package to <strong>/nix/store/…-package-version</strong> (if it does
not already exist)</li>
<li>refer to unpacked files (usually via symlinks, via
scripts, configs or embedded binary)</li>
</ol>
<p>Uninstallation is just one step of undoing “[2.]”:</p>
<ol type="1">
<li>stop referring to the package (by creating a new closure of needed packages)</li>
</ol>
<p>This procedure does not require any file or directory removal.
On <strong>NixOS</strong> it’s a matter of updating a single <strong>/run/current-system</strong>
symlink.</p>
<p>As a result over normal lifetime the system accumulates unreferenced
packages as files and directories in <strong>/nix/store/</strong>. If you have enough
storage you can completely ignore these unreferenced files.</p>
<p>But sometimes it’s useful to delete unreferenced data to free up some
space or to check that there are no missing references in current package
closure. Such cleaning is done with <strong>nix-collect-garbage</strong>
(or <strong>nix store gc</strong>). Or their lower level sibling
<strong>nix-store --delete …</strong> (or <strong>nix store delete …</strong>).</p>
<h1 id="actual-gc-speed">Actual GC speed</h1>
<p>All the above sounds nice, but how fast that garbage collection is in
practice? Should it take 1 second, 1 minute or 1 hour on an average
system? On a heavily cluttered system?</p>
<p>Let’s find out! I have 2 systems:</p>
<ol type="1">
<li><p><strong>i7</strong> host: <strong>HDD</strong>-based 10+ years old web server with daily updates
which never saw a garbage collection run. It’s whole <strong>/nix/store</strong>
is 26GB.</p></li>
<li><p><strong>nz</strong> host: <strong>NVMe</strong>-based 1 year old desktop where I build A Lot of
packages daily and run garbage collection once a month. It’s whole
<strong>/nix/store</strong> is <strong>380GB</strong>.</p></li>
</ol>
<p><strong>i7</strong> dry run:</p>
<pre><code>$ time nix store gc --dry-run

real 3m18.522s
...</code></pre>
<p>~200 seconds. Is it a lot? The process touches no disk. According to
<strong>top</strong> it’s a CPU-bound problem. What does it do? Runnig
<strong>perf top -p $pid</strong> shows the following:</p>
<pre><code>$ sudo perf top -p 6217
&lt;wait 5 seconds&gt;
   6.82%  libstdc++.so.6.0.28  [.] std::istream::get
   6.12%  libc-2.33.so         [.] __memcmp_sse4_1
   4.51%  libcrypto.so.1.1     [.] sha256_block_data_order_avx
   4.18%  libstdc++.so.6.0.28  [.] std::istream::sentry::sentry
   3.91%  libnixstore.so       [.] nix::parseString
   2.73%  libc-2.33.so         [.] malloc
   2.55%  libsqlite3.so.0.8.6  [.] sqlite3VdbeExec
   2.31%  [kernel]             [k] syscall_exit_to_user_mode</code></pre>
<p>Looks like some string parsing and <strong>sqlite3</strong> reading. Could be
optimised a bit around that strange <strong>std::istream::get</strong> but
otherwise looks reasonable. Not exactly an interactive latency,
but not too bad if ran infrequently. Maybe there is just a lot
to do in this case?</p>
<p><strong>nz</strong> run:</p>
<pre><code>$ time nix store gc --dry-run

real    28m24,295s
...</code></pre>
<p>~1800 seconds. Almost half an hour! That is already way outside
interactive use of the tool. But maybe it’s fine for a system
with large amount of clutter? Let’s find out!</p>
<p>Checking for profile picture:</p>
<pre><code>$ sudo perf top -p 2531652
&lt;wait 5 seconds&gt;
  10,15%  libstdc++.so.6.0.28  [.] std::istream::get
   5,42%  libstdc++.so.6.0.28  [.] std::istream::sentry::sentry
   5,16%  libc-2.33.so         [.] __memcmp_avx2_movbe
   4,14%  [kernel]             [k] copy_user_enhanced_fast_string
   3,90%  libc-2.33.so         [.] _int_malloc
   3,03%  libc-2.33.so         [.] malloc
   2,38%  libnixstore.so       [.] nix::parseString
   2,30%  libsqlite3.so.0.8.6  [.] sqlite3VdbeExec</code></pre>
<p>The profile is very close to <strong>i7</strong> one: same <strong>std::istream::get</strong>
at the top and a <strong>memcmp()</strong> implementation that follows.</p>
<h1 id="the-first-attempt">The first attempt</h1>
<p>Profile clearly tells us that <strong>istream</strong> related parsing is the
bottleneck.</p>
<p>Quick quiz: does it?</p>
<p>The parser is supposed to extract <strong>/nix/store</strong> references out of
<strong>.drv</strong> files which usually look like the example below:</p>
<pre><code>$ nix show-derivation /nix/store/6xcvz9zp757knf005g4q1p451p6wslpk-ninja-1.10.2.drv

{
  &quot;/nix/store/6xcvz9zp757knf005g4q1p451p6wslpk-ninja-1.10.2.drv&quot;: {
    &quot;outputs&quot;: {
      &quot;out&quot;: {
        &quot;hashAlgo&quot;: &quot;r:sha256&quot;
      }
    },
    &quot;inputSrcs&quot;: [
      &quot;/nix/store/27axb57ya2ddmaa9m5fv700ww65z5hcd-docbook-xml-4.5&quot;,
      &quot;/nix/store/2wald1adsn6bxzmvypzjk5z2zk9dlgwh-stdenv-linux&quot;,
      &quot;/nix/store/34v3hflhcklq44jigh2banjwkcyqjc5k-python3-3.9.9&quot;,
      &quot;/nix/store/7z1wzf51i7jxi9nl2dg3yqmsfb70s4fm-docbook-xsl-nons-1.79.2&quot;,
      &quot;/nix/store/8m2rhn4jgz0bj52m7fx53jbj9qiswy6q-re2c-2.2&quot;,
      &quot;/nix/store/8x4aqaqaiyylvcpnhn1phypkb4n6ady0-source&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;,
      &quot;/nix/store/mcm0l38vgh9l24dgl94gj4hjvxp91g8j-libxslt-1.1.34-bin&quot;,
      &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12&quot;,
      &quot;/nix/store/y9yz15h8mlpggmr3jidjdhjpddsx7d25-setup-hook.sh&quot;,
      &quot;/nix/store/yyaxnsqm849wwi901m6g7nbi1hqy7vsp-asciidoc-9.1.0&quot;
    ],
    &quot;inputDrvs&quot;: {},
    &quot;system&quot;: &quot;x86_64-linux&quot;,
    &quot;builder&quot;: &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12/bin/bash&quot;,
    &quot;args&quot;: [
      &quot;-e&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;
    ],
    &quot;env&quot;: {
      &quot;buildInputs&quot;: &quot;&quot;,
      &quot;buildPhase&quot;: &quot;python configure.py --bootstrap\n# \&quot;./ninja -vn manual\&quot; output copied here to support cross compilation.\nasciidoc -b docbook -d book -o build/manual.xml doc/manual.asciidoc\nxsltproc --nonet doc/docbook.xsl build/manual.xml &gt; doc/manual.html\n&quot;,
      &quot;builder&quot;: &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12/bin/bash&quot;,
...</code></pre>
<p>Here <strong>inputDrvs</strong>, <strong>inputSrcs</strong> and some <strong>env</strong> references are
interesting edges for garbage collector. But some are possibly not
(like build-only <strong>env.builder</strong>).</p>
<p>The parsing format looked trivial and I tried a quick hack to
substitute <strong>istream</strong> for a manual parser in <a href="https://github.com/NixOS/nix/pull/6266" class="uri">https://github.com/NixOS/nix/pull/6266</a>.</p>
<p>This gave a 25% speedup (7 minutes faster on <strong>nz</strong>). Sounds like a
lot for a simple 80-line change.</p>
<p>But Eelco did not see any speedup improvement on his system. Moreover
Eelso’s GC times were ridiculously short: 17 seconds instead of minutes.</p>
<p>That made me think: what is parser’s parse speed if I see so large
an improvement? My system has to parse A Lot of <strong>.drv</strong> files to make
it measurable.</p>
<p>To put the example into some abstract numbers:
if parse speed is even as low as 100MB/s then running it for 7 minutes
would be able to parse ~40GB of <strong>.drv</strong> files. I don’t have that many.
All my <strong>/nix/store/*.drv</strong> files are ~1GB (~270K files).</p>
<p>Does it mean my system parses the same files multiple times? Is my system
somehow special to have many of them?</p>
<p>Running <strong>strace -f</strong> against the <strong>nix-daemon</strong> confirmed that some of
<strong>.drv</strong> files were opened and read repeatedly. That’s strange.</p>
<h1 id="the-second-attempt">The second attempt</h1>
<p>My naive understanding of graph traversal for garbage collection purposes
told me that each node should be traversed once.</p>
<p>I added a few <strong>debug()</strong> calls to
<a href="https://github.com/NixOS/nix/blob/master/src/libstore/gc.cc">src/libstore/gc.cc</a>
around repeated <strong>.drv</strong> visits and found … a bug!</p>
<p>For some <strong>nix.conf</strong> setups (like the ones with
<strong>keep-derivations = true</strong>) <strong>.drv</strong> files are themselves considered
(implicit) referrers. They should be retained on garbage
collection (live paths). By keeping related <strong>.drv</strong> files around
we keep possible prerequisites in case we want to rebuild a derivation.
Which is handy for package development.</p>
<p>The bug was in treatment of the <strong>.drv</strong> files: they were correctly traversed
as referrers, but they were not added to <strong>alive</strong> set of visited nodes.
As a result <strong>.drv</strong> file was visited every time some path pulled a <strong>.drv</strong> in.</p>
<p>Thus the fix was a two-liner: <a href="https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e" class="uri">https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e</a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/libstore/gc.cc</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/libstore/gc.cc</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -678,7 +678,8 @@ void LocalStore::collectGarbage(const GCOptions &amp; options, GCResults &amp; results)</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                 alive.insert(start);</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>                 try {</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>                     StorePathSet closure;</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="st">-                    computeFSClosure(*path, closure);</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+                    computeFSClosure(*path, closure,</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+                        /* flipDirection */ false, gcKeepOutputs, gcKeepDerivations);</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>                     for (auto &amp; p : closure)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>                         alive.insert(p);</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>                 } catch (InvalidPath &amp;) { }</span></code></pre></div>
<p>Before the change <strong>computeFSClosure()</strong> was called with implicit default
<strong>gcKeepDerivations = false</strong> argument. After the change it started honoring
user’s configuration.</p>
<p>The fun thing is that <strong>keep-derivations = true</strong> is a default enabled option!
Unless you switched it off explicitly you probably have it enabled on <strong>NixOS</strong>.</p>
<h1 id="benchmarks">Benchmarks</h1>
<p>Let’s benchmark this change on the same setup as above. I plugged the patch
into <strong>configuration.nix</strong> as:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  nixpkgs.overlays = <span class="op">[</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span> <span class="va">nix</span> <span class="op">=</span> prev.nix.overrideAttrs <span class="op">(</span><span class="va">oa</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>      <span class="va">patches</span> <span class="op">=</span> <span class="op">(</span>oa.patches <span class="kw">or</span> <span class="op">[])</span> <span class="op">++</span> <span class="op">[</span> <span class="op">(</span>prev.fetchpatch <span class="op">({</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;fix-gc-drv-re-parse.patch&quot;</span><span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e.patch&quot;</span><span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">hash</span> <span class="op">=</span> <span class="st">&quot;sha256-QiBFJVRWNTXyVFch1zoNJL3ZfF4ZD9JKNlID4v+eUVc=&quot;</span><span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">}))</span> <span class="op">];</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">});})</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">]</span>;</span></code></pre></div>
<p><strong>i7</strong>:</p>
<pre><code>$ time nix store gc --dry-run

real    0m7.403s
...</code></pre>
<p>7 seconds compared to previous 200 seconds. ~29x speedup.</p>
<p><strong>nz</strong>:</p>
<pre><code>$ time nix store gc --dry-run

real    1m0,140s
...</code></pre>
<p>60 seconds compared to previous 1800 seonds. ~30x speedup as well.</p>
<h1 id="full-run">Full run</h1>
<p>Time to run the actual garbage collection that includes file removal
from disk and path unregistration from database:</p>
<p><strong>i7</strong>:</p>
<pre><code># dry run
$ time nix store gc --dry-run

real    0m7.403s
...

# full run
$ time nix store gc

2250 store paths deleted, 18751.92 MiB freed

real    0m32.695s
...

# full re-run
$ time nix store gc

0 store paths deleted, 0.00 MiB freed

real    0m7.708s
...</code></pre>
<p>Note that actual package removal is 5 times slower than
GC dry run. This ratio depends a lot on how many files are
to delete, what filesystem and what mode you are using.
But the gist of it is that the difference is not that big
compared to dry run.</p>
<p>Dry-run before and after garbage collection did not change
much. This means we did not delete that many packages
compared to alive set of packages. After the cleanup
<strong>/nix/store</strong> is only 2.3GB with 2300 store paths.</p>
<p>Thus we deleted about the half the store paths and about
90% of content size.</p>
<p>The speed of removal is about 70 store paths (packages)
per second.</p>
<p><strong>nz</strong>:</p>
<pre><code># dry run
$ time nix store gc --dry-run

real    1m0,140s
...

# full run
$ time nix store gc

319698 store paths deleted, 332762.52 MiB freed

real    5m54,990s
...

# full re-run
$ time nix store gc

0 store paths deleted, 0.00 MiB freed

real    0m4,528s
...</code></pre>
<p>Again, actual file deletion is only 6 times slower than GC dry run.
Alive set after GC is 15K packages with 34GB storage.</p>
<p>The speed of removal is about ~800 store paths (packages)
per second.</p>
<p>How many packages per second can your distribution delete?
Does it scale well with amount of packages already installed in system?</p>
<h1 id="parting-words">Parting words</h1>
<p>Garbage collection should take no more than one minute :)</p>
<p>It was surprisingly easy to get ~30x speedup of garbage collector with
a two-liner patch. The improvement will help systems with default
<strong>nix.conf</strong> configuration. Upcoming <strong>nix-2.8</strong> will contain the
improvement.</p>
<p>Initially I was fooled by <strong>perf top</strong> output and optimised the parser
to get 25% speedup. The real bug was in tracking visited nodes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on April  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nixpkgs bootstrap intro</title>
    <link href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html" />
    <id>http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html</id>
    <published>2022-03-24T00:00:00Z</published>
    <updated>2022-03-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This post is an informal walk through bootstrap setup of <strong>nixpkgs</strong>.
It’s quite long and has many facets we look at here. If you don’t
understand some bits of it don’t worry: it’s both a complicated topic
and I did a bad job at explaining it.</p>
<p>Initially I tried to cram everything into a single post and got
largest post ever. Once I realized it became unreadable I moved out
details on <strong>glibc</strong> into a separate <a href="http://trofi.github.io/posts/239-hacking-on-glibc.html">hacking-on-glibc post</a>.
Now this post is “only” on par with other larges posts /o\.</p>
<p>Good luck :)</p>
<h1 id="intro">Intro</h1>
<p><strong>nixpkgs</strong> is a package repository for <strong>NixOS</strong> linux distribution.
<strong>nixpkgs</strong> can also be used outside <strong>NixOS</strong> on other <strong>linux</strong> (and
non-<strong>linux</strong>!) distributions.</p>
<p>Each <strong>nixpkgs</strong> package is built in a container environment where
build process sees only explicitly specified dependencies (via mount
namespace). That way we get more deterministic (and ideally fully
reproducible) build environment and result when ran on another machine.</p>
<p>Such a setup makes it trivial to notice missing required dependencies.
I frequently write a <strong>nixpkgs</strong> recipe for a package before trying
to package it on another distributions :)</p>
<p>Precise dependencies sound great in theory, but how does such a system
deal with circular dependencies and bootstrap dependencies? For example
<strong>gcc</strong> depends on some C compiler presence. How do they get satisfied?</p>
<h1 id="bootstrap-binaries">Bootstrap binaries</h1>
<p><strong>nixpkgs</strong> solves it by providing a set of pre-built seed binaries
called <strong>bootstrap-files</strong> (or <strong>bootstrapTools</strong>). These binaries were
at some previous point built on an already working <strong>nixpkgs</strong> system.
One can also build them manually.</p>
<p>Seed binaries don’t change until someone decides to refresh them.
Specifically they don’t get rebuil on each <strong>nixpkgs</strong> commit. In theory
<strong>bootstrap-files</strong> could be left untouched forever at least for existing
target systems. In practice bugs do occasinally happen in <strong>bootstrap-files</strong>
and we need to fix them. It’s also useful to have some up-to-date
baseline when building other fresh packages: building <strong>gcc-11</strong>
with <strong>gcc-8</strong> (seed binary) is a lot simpler than building <strong>gcc-11</strong>
with <strong>gcc-3</strong>.</p>
<p>To get the idea what it takes to bet a set of bootstrap files let’s build
fresh set of them ourselves. We’ll use default definition in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix">make-bootstrap-tools.nix</a>:</p>
<pre class="shell"><code>$ nix build -f ./pkgs/stdenv/linux/make-bootstrap-tools.nix bootstrapFiles</code></pre>
<p>We can even cross-compile bootstrap files for a differen (potentially not yet
supported) target:</p>
<pre class="shell"><code>$ nix build -f ./pkgs/stdenv/linux/make-bootstrap-tools.nix bootstrapFiles --argstr crossSystem powerpc64le-linux</code></pre>
<p>Is it big? Inspecting the final result:</p>
<pre class="shell"><code>$ readlink result
/nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz

$ LANG=C ls -lh /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz
-r--r--r-- 2 root root 21M Jan  1  1970 /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz</code></pre>
<p>Archive size is 21MB. This size is smaller than compressed <strong>nixpkgs</strong>
tree (~26MB today). Let’s peek at things that hide inside:</p>
<pre class="shell"><code>$ tar --list -f /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz
./bin/
./bin/[
./bin/ar
...
./bin/yes
./include/
./include/c++/
./include/c++/10.3.0/
./include/c++/10.3.0/algorithm
...
./include-glibc/
./include-glibc/a.out.h
./include-glibc/aio.h
...
./include-glibc/xen/privcmd.h
./lib/
./lib/crt1.o
./lib/crti.o
./lib/crtn.o
./lib/gcc/
./lib/gcc/x86_64-unknown-linux-gnu/
./lib/gcc/x86_64-unknown-linux-gnu/10.3.0/
...
./lib/gcc/x86_64-unknown-linux-gnu/10.3.0/libgcov.a
./lib/ld-2.33.so
./lib/ld-linux-x86-64.so.2
./lib/libbfd-2.35.2.so
./lib/libbfd.la
...
./lib/libz.so.1.2.11
./libexec/
./libexec/gcc/
./libexec/gcc/x86_64-unknown-linux-gnu/
./libexec/gcc/x86_64-unknown-linux-gnu/10.3.0/
./libexec/gcc/x86_64-unknown-linux-gnu/10.3.0/cc1
...</code></pre>
<p>The contents (once again) are defined by
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix</a>.
It tells ut that the following packages are present in the final tarball:</p>
<ul>
<li><strong>busybox</strong> (statically linked against <strong>musl</strong>)</li>
<li><strong>glibc</strong></li>
<li><strong>gcc</strong> (this package and below are dynamically linked against <strong>glibc</strong>)</li>
<li><strong>binutils</strong></li>
<li><strong>coreutils</strong></li>
<li><strong>tar</strong></li>
<li><strong>bash</strong></li>
<li><strong>findutils</strong></li>
<li><strong>diffutils</strong></li>
<li><strong>sed</strong></li>
<li><strong>grep</strong></li>
<li><strong>awk</strong></li>
<li><strong>gzip</strong></li>
<li><strong>bzip</strong></li>
<li><strong>patch</strong></li>
<li><strong>patchelf</strong></li>
<li><strong>gmp</strong></li>
<li><strong>mpfr</strong></li>
<li><strong>mpc</strong></li>
<li><strong>zlib</strong></li>
<li><strong>isl</strong></li>
<li><strong>libelf</strong></li>
</ul>
<p>Just 21 package! Most are very cross-compiler friendly. Some of packages
have reduced functionality not needed for simplest build requirements:</p>
<pre><code>  coreutilsMinimal = coreutils.override (args: { aclSupport = false; attrSupport = false; /*...*/ })
  tarMinimal = gnutar.override { acl = null; };
  busyboxMinimal = busybox.override { useMusl = true; enableStatic = true; /*...*/ }
  bootGCC = gcc.cc.override { enableLTO = false; };
  bootBinutils = binutils.bintools.override { withAllTargets = false; gold = false; enableShared = false; /*...*/ }</code></pre>
<p>The tarball generaion process is literally copying build files to make
self-contained archive:</p>
<pre><code>  build = stdenv.mkDerivation {
    name = &quot;stdenv-bootstrap-tools&quot;;

    buildCommand = ''
        set -x
        mkdir -p $out/bin $out/lib $out/libexec

        # Copy what we need of Glibc.
        cp -d ${libc.out}/lib/ld*.so* $out/lib
        cp -d ${libc.out}/lib/libc*.so* $out/lib
        # ...
        cp -d ${coreutilsMinimal.out}/bin/* $out/bin
        (cd $out/bin &amp;&amp; rm vdir dir sha*sum pinky factor pathchk runcon shuf who whoami shred users)
        cp ${bash.out}/bin/bash $out/bin
        cp ${findutils.out}/bin/find $out/bin
        cp ${findutils.out}/bin/xargs $out/bin
        cp -d ${diffutils.out}/bin/* $out/bin
        # ...
        nuke-refs $out/bin/*
        nuke-refs $out/lib/*
        # ...
    '';
    //...</code></pre>
<p>Once these bootstrap binaries are built they are referred explicitly
as a <strong>fetchurl{}</strong> “source” tarball input:
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-files/i686.nix" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-files/i686.nix</a></p>
<p>There is a caveat: we can’t run these binaries as is if we just unpack the tarball.
I’ll try anyway:</p>
<pre class="shell"><code>$ mkdir /tmp/b
$ cd /tmp/b
$ tar xf /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz
$ ls bin/bash
bin/bash
$ unshare --user --map-root-user chroot . /bin/bash
chroot: failed to run command ‘/bin/bash’: No such file or directory</code></pre>
<p>It happens because binaries intentionally hardcode invalid absolute paths to dynamic linker:</p>
<pre class="shell"><code>$ lddtree bin/bash
bash =&gt; bin/bash (interpreter =&gt; /nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-glibc-2.33-108/lib/ld-linux-x86-64.so.2)
    libdl.so.2 =&gt; not found
    libc.so.6 =&gt; not found</code></pre>
<p>These invalid paths are meant to be relocated at install time: <strong>patchelf</strong>
binary patching tool is used for that in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh</a></p>
<p>Note that <strong>patchelf</strong> is also a dynamically linked binary. How can we run it against
broken interpreter? You might have already noticed it in <strong>unpack-bootstrap-tools.sh</strong> above:
dynamic loader is called by absolute path and it’s search paths are overridden
by <strong>LD_LIBRARY_PATH</strong> variable.</p>
<p>Trying running <strong>bash</strong> using the same trick:</p>
<pre class="shell"><code>$ PS1='foo&gt; ' unshare --user --map-root-user chroot . /lib/ld-linux-x86-64.so.2 --library-path /lib /bin/bash

foo&gt; echo /*
/bin /include /include-glibc /lib /libexec

foo&gt; ls /
bash: ls: command not found
foo&gt; LD_LIBRARY_PATH=/lib /lib/ld-linux-x86-64.so.2 /bin/ls
bin  include  include-glibc  lib  libexec</code></pre>
<p>Seems to work :)</p>
<p>I used <strong>--library-path /lib</strong> to step aside the complications of mixing
<strong>LD_LIBRARY_PATH</strong> value for host’s <strong>chroot</strong> command. But once in a chroot
<strong>LD_LIBRARY_PATH=/lib</strong> does the trick as well.</p>
<p>Another way to make <strong>chroot</strong> to Just Work without <strong>LD_LIBRARY_PATH=</strong>
is to fake relocation with this funny symlink:</p>
<pre class="shell"><code>$ ln -s ../../../lib nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-glibc-2.33-108/lib
$ unshare --user --map-root-user chroot . /bin/bash
$ export PATH=/bin PS1='minimal&gt; '
minimal&gt; ls /
bin  include  include-glibc  lib  libexec  nix
minimal&gt;  gcc --version
gcc (GCC) 10.3.0

minimal&gt; echo 'int main(){}' &gt; a.c
minimal&gt; gcc a.c -o a
minimal&gt; ./a
bash: ./a: No such file or directory</code></pre>
<p>Now we are able to run <strong>gcc</strong> (and also <strong>bash</strong>).</p>
<p>The environment is able to compile simple executables. Why do compiled binaries
still fail to run? That is is an exercise for the reader :)
Hint: it can be hacked with yet another symlink. Try to find which one.
<a href="http://trofi.github.io/posts/239-hacking-on-glibc.html">hacking-on-glibc post</a> also provides another way of solving it.</p>
<h1 id="stdenv">stdenv</h1>
<p>So how do we bootstrap fresh <strong>nixpkgs</strong> out of outdated <strong>gcc</strong> and
<strong>glibc</strong> from <strong>bootstrap-tools</strong>?</p>
<p>To provide minimal build environment for most packages <strong>nixpkgs</strong> has a
special package: <strong>stdenv</strong>. Let’s inspect it’s contents:</p>
<pre><code>$ nix-shell --pure -p stdenv

[nix-shell]$ echo $PATH | tr ':' $'\n' | ~/bin/unnix
/&lt;&lt;NIX&gt;&gt;/bash-interactive-5.1-p12/bin
/&lt;&lt;NIX&gt;&gt;/patchelf-0.14.3/bin
/&lt;&lt;NIX&gt;&gt;/gcc-wrapper-10.3.0/bin
/&lt;&lt;NIX&gt;&gt;/gcc-10.3.0/bin
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-bin/bin
/&lt;&lt;NIX&gt;&gt;/coreutils-9.0/bin
/&lt;&lt;NIX&gt;&gt;/binutils-wrapper-2.35.2/bin
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin
/&lt;&lt;NIX&gt;&gt;/coreutils-9.0/bin
/&lt;&lt;NIX&gt;&gt;/findutils-4.8.0/bin
/&lt;&lt;NIX&gt;&gt;/diffutils-3.8/bin
/&lt;&lt;NIX&gt;&gt;/gnused-4.8/bin
/&lt;&lt;NIX&gt;&gt;/gnugrep-3.7/bin
/&lt;&lt;NIX&gt;&gt;/gawk-5.1.1/bin
/&lt;&lt;NIX&gt;&gt;/gnutar-1.34/bin
/&lt;&lt;NIX&gt;&gt;/gzip-1.11/bin
/&lt;&lt;NIX&gt;&gt;/bzip2-1.0.6.0.2-bin/bin
/&lt;&lt;NIX&gt;&gt;/gnumake-4.3/bin
/&lt;&lt;NIX&gt;&gt;/bash-5.1-p12/bin
/&lt;&lt;NIX&gt;&gt;/patch-2.7.6/bin
/&lt;&lt;NIX&gt;&gt;/xz-5.2.5-bin/bin</code></pre>
<p>The list of binaries is suspiciously close to our <strong>bootstrap-tools</strong>
tarball. That is not a coincidence: if it’s good enough for most packages
it should be enough for <strong>gcc</strong>.</p>
<p>In theory we could just use <strong>bootstrap-tools</strong> to define <strong>stdenv</strong>
and use it to build things like <strong>xorg</strong>. However such a scheme would
complicate updating <strong>gcc</strong> (and all other <strong>stdenv</strong> packages):
(once again) bootstrap archive does not get updated frequently.
We would need to refresh bootstrap tarballs routinely just to get
a <strong>gcc</strong> update.</p>
<p>To solve an update problem <strong>nixpkgs</strong> uses a level of indirection:
first <strong>nixpkgs</strong> defines <strong>bootstrap-stdenv</strong> as <strong>bootstrap-tools</strong>
and then builds <strong>stdenv</strong> out of <strong>bootstrap-stdenv</strong>. The rest of
<strong>nixpkgs</strong> uses only <strong>stdenv</strong> and avoids <strong>bootstrap-stdenv</strong>.</p>
<p>Thus our example <strong>xorg</strong> chain of build-time dependencies is:
<strong>bootstrap-tools</strong> -&gt; <strong>bootstrap-stdenv</strong> -&gt; <strong>stdenv</strong> -&gt; <strong>xorg</strong>.</p>
<p>Simple, eh?</p>
<p>Let’s look at a <strong>stdenv.mkDerivation</strong> function normally used to define
packages. We define a one-liner <strong>foo</strong> package that prints contents
of it’s build environment at build time:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; stdenv.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;echo $CC; $CC -v; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; gcc
foo&gt; Using built-in specs.
foo&gt; COLLECT_GCC=/nix/store/2dv93bbc06c7zg866qid73j3r36zz3jx-gcc-10.3.0/bin/gcc
foo&gt; COLLECT_LTO_WRAPPER=/nix/store/2dv93bbc06c7zg866qid73j3r36zz3jx-gcc-10.3.0/libexec/gcc/x86_64-unknown-linux-gnu/10.3.0/lto-wrapper
foo&gt; Target: x86_64-unknown-linux-gnu
foo&gt; Configured with:
foo&gt; Thread model: posix
foo&gt; Supported LTO compression algorithms: zlib
foo&gt; gcc version 10.3.0 (GCC)
...</code></pre>
<p>As a small detour there are also other popular <strong>stdenv</strong>s, like an
<strong>LLVM</strong>-based one:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; pkgsLLVM.stdenv.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;echo $CC; $CC -v; exit 1&quot;; }' -L

foo-x86_64-unknown-linux-gnu&gt; unpacking sources
foo-x86_64-unknown-linux-gnu&gt; x86_64-unknown-linux-gnu-clang
foo-x86_64-unknown-linux-gnu&gt; clang version 11.1.0
foo-x86_64-unknown-linux-gnu&gt; Target: x86_64-unknown-linux-gnu
foo-x86_64-unknown-linux-gnu&gt; Thread model: posix
foo-x86_64-unknown-linux-gnu&gt; InstalledDir: /nix/store/y61l0kbqfchdk39i319ycrfblc6zz3s8-clang-11.1.0/bin
...</code></pre>
<p><strong>nixpkgs</strong> provides many toolchains via various
<strong>stdenv</strong>s. To name a few (assuming <strong>x86_64-linux</strong> system):</p>
<ul>
<li><strong>stdenv</strong>: <strong>gcc</strong> and <strong>glibc</strong></li>
<li><strong>pkgsLLVM.stdenv</strong>: <strong>clang</strong> and <strong>glibc</strong></li>
<li><strong>pkgsMusl.stdenv</strong>: <strong>gcc</strong> and <strong>musl</strong></li>
<li><strong>pkgsi686Linux.stdenv</strong>: <strong>gcc</strong> and <strong>glibc</strong> for 32-bit ABI on x86_64 (<strong>CFLAGS=-m32</strong>)</li>
<li><strong>pkgsCross.ppc64.stdenv</strong>: <strong>gcc</strong> and <strong>glibc</strong> cross-compiler to <strong>powerpc64-unknown-linux-gnu</strong> target</li>
<li>… and many many more</li>
</ul>
<p>Finding out how those interact to one another (which <strong>stdenv</strong> is
defined in terms of which) is an exercise for the reader :)</p>
<h1 id="stdenv-tower">stdenv tower</h1>
<p>So how exactly do we ascend from not-quite-working <strong>bootstrapTools</strong> to
<strong>stdenv</strong>? What is hiding behind the arrow in
“<strong>bootstrap-stdenv</strong> -&gt; <strong>stdenv</strong>” part above?</p>
<p>The precise answer is hidden in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix">stdenv.nix</a>.</p>
<p>The main take away from there is that there are multiple stages of
<strong>stdenv</strong>:</p>
<p><strong>bootstrap-stdenv</strong> -&gt; <strong>?</strong> -&gt; <strong>??</strong> -&gt; <strong>???</strong> -&gt; <strong>…</strong> -&gt; <strong>stdenv</strong>.</p>
<p>Instead of trying to figure out what each stage does exactly out of definition
above let’s debug it and see what we can find out.</p>
<p>Let’s inject a <strong>prev</strong> attribute to each intermediate instance of
<strong>stdenv</strong> and walk along that chain. Here is the full local patch:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/generic/default.nix</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/generic/default.nix</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -54,0 +55,3 @@ argsStdenv@{ name ? &quot;stdenv&quot;, preHook ? &quot;&quot;, initialPath</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="va">+, # debug reference to previous stdenv</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="va">+  prev ? {}</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -145,0 +149,2 @@ let</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      inherit prev;</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -106,0 +107,2 @@ let</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        prev = prevStage.stdenv;</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -437,0 +440,2 @@ in</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a><span class="va">+      prev = prevStage.stdenv;</span></span></code></pre></div>
<p>I left out almost all of patch context on purpose. It’s not very
readable as a diff. Now we can access all <strong>stdenv</strong> iterations via
<strong>stdenv.prev</strong>.</p>
<p>First, let’s find out how many hops are there from bootstrap to final <strong>stdenv</strong>:</p>
<pre class="shell"><code>nixpkgs $ nix repl .
nix-repl&gt; stdenv
«derivation /nix/store/s6l15yfxq567as8wdw7cfvy6c3p9wscw-stdenv-linux.drv»
nix-repl&gt; stdenv.prev
«derivation /nix/store/q3dsgi310i9r5b1pgdym2fnvlxbkxls2-bootstrap-stage4-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev
«derivation /nix/store/b5hwd6s4b2xq2l6nidhklypn69vhlfap-bootstrap-stage3-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev
«derivation /nix/store/bkbn1y2593jqclaq2kjcx5iambylsafq-bootstrap-stage2-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev.prev
«derivation /nix/store/1wklspdwi7c03jrqjbh2f6ymmpqshcif-bootstrap-stage1-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev.prev.prev
«derivation /nix/store/bvkp4zp1kidp9wfk2f46yyy73y3n38mx-bootstrap-stage0-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev.prev.prev.prev
error: attribute 'stdenv' missing</code></pre>
<p>5(!) intermediate steps! Let’s check out
compiler version of the intial one and the one right after:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import ./. {}; stdenv.prev.prev.prev.prev.prev.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;$CC --version; exit 1&quot;; }' -L
foo&gt; unpacking sources
foo&gt; /nix/store/hbppa2cjx9929jrv796fpni2m06j3fzw-bootstrap-stage0-stdenv-linux/setup: line 1358: --version: command not found</code></pre>
<p>The very first (or zeroth) bootstrap stdenv does not even provide basic
“$CC” variable. It’s not really a usable stdenv just yet. We can also guess
it from it’s empty definition:</p>
<pre><code>  ({}: {
    __raw = true;

    gcc-unwrapped = null;
    binutils = null;
    coreutils = null;
    gnugrep = null;
  })</code></pre>
<p>It’s only a default case that will gradually grow a piece on each step.
Let’s look at the next one:</p>
<pre><code>$ nix build --impure --expr 'with import ./. {}; stdenv.prev.prev.prev.prev.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;$CC --version; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; gcc (GCC) 8.3.0
...</code></pre>
<p>The next <strong>stdenv</strong> provides build environment based on <strong>gcc-8.3.0</strong>
(which is way older than default <strong>nixpkgs</strong> <strong>gcc-10.3.0</strong> version).</p>
<p>Now we have a tool to check what is the actual difference between all
these <strong>stdenv</strong> iterations! I usually use <strong>NIX_DEBUG=1</strong> variable to
look at what <strong>nixpkgs</strong> injects in the search paths and default
options of <strong>gcc</strong>:</p>
<pre class="shell"><code>nix build --impure --expr 'with import ./. {}; stdenv.prev.prev.prev.prev.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;NIX_DEBUG=1 $CC --version; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; HARDENING: disabled flags: pie
foo&gt; HARDENING: Is active (not completely disabled with &quot;all&quot; flag)
foo&gt; HARDENING: enabling fortify
foo&gt; HARDENING: enabling stackprotector
foo&gt; HARDENING: enabling strictoverflow
foo&gt; HARDENING: enabling format
foo&gt; HARDENING: enabling pic
foo&gt; extra flags before to /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/bin/gcc:
foo&gt;   -O2
foo&gt;   -D_FORTIFY_SOURCE=2
foo&gt;   -fstack-protector-strong
foo&gt;   --param
foo&gt;   ssp-buffer-size=4
foo&gt;   -fno-strict-overflow
foo&gt;   -Wformat
foo&gt;   -Wformat-security
foo&gt;   -Werror=format-security
foo&gt;   -fPIC
foo&gt; original flags to /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/bin/gcc:
foo&gt;   --version
foo&gt; extra flags after to /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/bin/gcc:
foo&gt;   -B/nix/store/39k40hf9z4wr5wac5xbnznza1ym2f8kz-bootstrap-stage0-glibc-bootstrap/lib/
foo&gt;   -idirafter
foo&gt;   /nix/store/39k40hf9z4wr5wac5xbnznza1ym2f8kz-bootstrap-stage0-glibc-bootstrap/include
foo&gt;   -idirafter
foo&gt;   /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/lib/gcc/x86_64-unknown-linux-gnu/8.3.0/include-fixed
foo&gt;   -B/nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/lib
foo&gt;   -B/nix/store/8wmhf2pbmx0vbs60yk6x9w5lm0zrqjlz-bootstrap-stage1-gcc-wrapper-/bin/
foo&gt;   -frandom-seed=dhfkc7mzra
foo&gt; gcc (GCC) 8.3.0
foo&gt; Copyright (C) 2018 Free Software Foundation, Inc.
foo&gt; This is free software; see the source for copying conditions.  There is NO
foo&gt; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre>
<p>Here the important parts are the paths specified with <strong>-L</strong> flag (library lookup
paths) and by <strong>-B</strong> flag (objects and tools for compiler itself). Both should be
familiar by now from “hello world” dissection section at <a href="http://trofi.github.io/posts/239-hacking-on-glibc.html">hacking-on-glibc post</a>.</p>
<p>Also note that <strong>nixpkgs</strong> builds files with default <strong>-O2</strong> optimization level
until specified otherwise (also note a few warning options on top enabled by default).</p>
<p>Let’s check out our final <strong>stdenv</strong>:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import ./. {}; stdenv.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;NIX_DEBUG=1 $CC --version; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; HARDENING: disabled flags: pie
foo&gt; HARDENING: Is active (not completely disabled with &quot;all&quot; flag)
foo&gt; HARDENING: enabling pic
foo&gt; HARDENING: enabling format
foo&gt; HARDENING: enabling stackprotector
foo&gt; HARDENING: enabling fortify
foo&gt; HARDENING: enabling strictoverflow
foo&gt; extra flags before to /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/bin/gcc:
foo&gt;   -fPIC
foo&gt;   -Wformat
foo&gt;   -Wformat-security
foo&gt;   -Werror=format-security
foo&gt;   -fstack-protector-strong
foo&gt;   --param
foo&gt;   ssp-buffer-size=4
foo&gt;   -O2
foo&gt;   -D_FORTIFY_SOURCE=2
foo&gt;   -fno-strict-overflow
foo&gt; original flags to /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/bin/gcc:
foo&gt;   --version
foo&gt; extra flags after to /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/bin/gcc:
foo&gt;   -B/nix/store/km6a4zxn29liy6l2xq441p2yap1ka1j4-glibc-2.35/lib/
foo&gt;   -idirafter
foo&gt;   /nix/store/6xn0firi6hlz6x161drdj0p0jzcrrfla-glibc-2.35-dev/include
foo&gt;   -idirafter
foo&gt;   /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/lib/gcc/x86_64-unknown-linux-gnu/12.0.1/include-fixed
foo&gt;   -B/nix/store/fi0acb9a2fscg7afnwjmglj55rqwj8kj-gcc-12.0.0-lib/lib
foo&gt;   -B/nix/store/v9s3sv5c4rr9r067qw66c1iq5i0ffsvc-gcc-wrapper-12.0.0/bin/
foo&gt;   -frandom-seed=rw1fgisg1r
foo&gt; gcc (GCC) 12.0.1 20220213 (experimental)
foo&gt; Copyright (C) 2022 Free Software Foundation, Inc.
foo&gt; This is free software; see the source for copying conditions.  There is NO
foo&gt; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre>
<p>Note how all the <strong>-B</strong> and <strong>-L</strong> paths flipped from bootstrap variants
of the package (like <strong>-B/nix/store/39k40hf9z4wr5wac5xbnznza1ym2f8kz-bootstrap-stage0-glibc-bootstrap/lib/</strong>)
to nice final package names (like <strong>-B/nix/store/km6a4zxn29liy6l2xq441p2yap1ka1j4-glibc-2.35/lib/</strong>).</p>
<p>Such a long <strong>stdenv</strong> tower reaches it’s main goal: <strong>bootstrap-tools</strong>
must not be used in final <strong>stdenv</strong> directly or as runtime depends.
<strong>stdenv</strong> must only be defined by source packages from <strong>nixpkgs</strong>.</p>
<p>Ideally changing <strong>bootstrap-tools</strong> archive should not affect contents of
final <strong>stdenv</strong> at all. In practice it happens only when <strong>content-addressed</strong>
mode is enabled: <a href="https://nixos.wiki/wiki/Ca-derivations" class="uri">https://nixos.wiki/wiki/Ca-derivations</a>.</p>
<p>To achieve independence from bootstrap binaries <strong>nixpkgs</strong> gradually
substitutes parts of <strong>bootstrap-stdenv</strong> from <strong>bootstrap-tools</strong> to
packages defined by <strong>nixpkgs</strong> expressions:</p>
<ul>
<li><strong>dummy</strong>: provide dummy empty base case. Nothing works here</li>
<li><strong>stage0</strong>: provides runnable prebuilt <strong>bootstrap-tools</strong> in <strong>PATH</strong> as <strong>gcc</strong>, <strong>binutils</strong>, <strong>coreutils</strong>, <strong>grep</strong>. From now on we can compile simple tools.</li>
<li><strong>stage1</strong>: build <strong>binutils</strong> and <strong>perl</strong> (using <strong>stage0</strong>’s <strong>gcc</strong>, <strong>glibc</strong>, <strong>coreutils</strong>)</li>
<li><strong>stage2</strong>: build <strong>glibc</strong> (and it’s library depends) (using <strong>stage1</strong>’s <strong>binutils</strong> and <strong>stage0</strong>’s <strong>gcc</strong>, <strong>coreutils</strong>), relink <strong>binutils</strong> against new <strong>glibc</strong>.</li>
<li><strong>stage3</strong>: build <strong>gmp</strong>/<strong>mpfr</strong> to prepare <strong>gcc</strong> rebuild (using <strong>stage2</strong>’s <strong>glibc</strong>, <strong>stage1</strong>’s <strong>binutils</strong>, <strong>stage0</strong>’s <strong>gcc</strong>, <strong>coreutils</strong>)</li>
<li><strong>stage4</strong>: build <strong>gcc</strong> itself (using <strong>stage3</strong>’s <strong>gmp</strong>/<strong>mpfr</strong>, <strong>stage2</strong>’s <strong>glibc</strong>, <strong>stage1</strong>’s <strong>binutils</strong>, <strong>stage0</strong>’s <strong>gcc</strong>, <strong>coreutils</strong>)</li>
<li><strong>final</strong>: build <strong>binutils</strong>, <strong>coreutils</strong> and everything else (using <strong>stage3</strong>’s <strong>gcc</strong>, <strong>stage2</strong>’s glibc, <strong>stage1</strong>’s binutils, <strong>stage0</strong>’s <strong>coreutils</strong>)</li>
</ul>
<p>Sounds simple? Heh, not really. I probably got a few details above wrong.
I was still not sure what are the exact dependencies that are being rebuilt.</p>
<p>Let’s first look at the <strong>final</strong> <strong>stdenv</strong>’s references after it’s fully built:</p>
<pre class="shell"><code>$ nix-store --query --graph $(nix-build -A stdenv) | dot -Tsvg &gt; stdenv-final-runtime.svg</code></pre>
<p>Rendered svg: <a href="http://trofi.github.io/posts.data/240-nixpkgs-bootstrap/stdenv-final-runtime.svg">stdenv-final graph</a></p>
<p>Note that there are no (runtime) references to <strong>bootstrap-tools</strong> packages.</p>
<p>Let’s look at <strong>stage4</strong> for comparison:</p>
<pre class="shell"><code>$ nix-store --query --graph $(nix-build -A stdenv.prev) | dot -Tsvg &gt; stdenv-stage4-runtime.svg</code></pre>
<p>Rendered svg: <a href="http://trofi.github.io/posts.data/240-nixpkgs-bootstrap/stdenv-stage4-runtime.svg">stdenv-stage4 graph</a></p>
<p>Note how <strong>patchelf</strong> and <strong>binutils</strong> still use <strong>glibc</strong> which was built using <strong>bootstrap-tools</strong>
compiler.</p>
<p>The above graphs don’t show build-time dependencies. Ideally <strong>stdenv-final</strong> should not directly
depend on anything related to <strong>boostrap-tools</strong>. We can get the graph by looking at the derivation
instead of final store path:</p>
<pre class="shell"><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) | dot -Tsvg &gt; stdenv-drv-final-runtime.svg</code></pre>
<p>Rendered svg: <a href="http://trofi.github.io/posts.data/240-nixpkgs-bootstrap/stdenv-drv-final-runtime.svg">stdenv-drv graph</a></p>
<p>It’s not really readable: there are too many mostly irrelevant minor details like patches and source
tarballs. Can we rearrange nodes explicitly as they are pulled in into each stage?</p>
<p>The simplest (but somewhat incomplete) seems to be the use of <strong>nix-diff</strong> derivation differ:</p>
<pre><code>$ nix store diff-closures $(nix-instantiate -A stdenv.prev) $(nix-instantiate -A stdenv)

acl: ∅ → 2.3.1, +109.0 KiB
attr: ∅ → 2.5.1, +78.9 KiB
bash: ∅ → 5.1-p16, +1519.2 KiB
binutils: +6390.2 KiB
binutils-wrapper: +9.9 KiB
bootstrap: ε → ∅, -129542.0 KiB
bootstrap-stage0-glibc: ε → ∅
bootstrap-stage4-gcc-wrapper: 12.0.0 → ∅, -47.5 KiB
bootstrap-stage4-stdenv: ε → ∅, -41.7 KiB
busybox: ε → ∅, -117.2 KiB
bzip2: ∅ → 1.0.6.0.2, +147.6 KiB
coreutils: ∅ → 9.0, +1769.5 KiB
diffutils: ∅ → 3.8, +1450.5 KiB
ed: ∅ → 1.18, +134.7 KiB
expand-response: -17.0 KiB
findutils: ∅ → 4.9.0, +1472.3 KiB
gawk: ∅ → 5.1.1, +2374.2 KiB
gcc-wrapper: ∅ → 12.0.0, +47.5 KiB
gnugrep: ∅ → 3.7, +773.2 KiB
gnumake: ∅ → 4.3, +1391.1 KiB
gnused: ∅ → 4.8, +725.0 KiB
gnutar: ∅ → 1.34, +2834.7 KiB
gzip: ∅ → 1.11, +152.0 KiB
patch: ∅ → 2.7.6, +222.3 KiB
pcre: ∅ → 8.45, +514.5 KiB
stdenv: ∅ → ε, +42.1 KiB
zlib: -121.4 KiB</code></pre>
<p>Here we see exact list of packages that differ in the whole tree between <strong>stdenv</strong>
and it’s immediate predecessor.</p>
<p>Or we can look at just compiler wrapper difference of <strong>stdenv</strong> (let’s try <strong>nix-diff</strong>
for a change):</p>
<pre><code>$ nix-diff $(nix-instantiate -A stdenv.prev.cc) $(nix-instantiate -A stdenv.cc) --line-oriented | cat

- /nix/store/d0ivnqxcmjdg9ihdl4ww9a0c79pyl0nd-bootstrap-stage4-gcc-wrapper-10.3.0.drv:{out}
+ /nix/store/45fs8hhm6afg0m0p2d635zhjh608bqsj-gcc-wrapper-10.3.0.drv:{out}
• The set of input derivation names do not match:
    - bootstrap-stage0-stdenv-linux
    + bash-5.1-p12
    + bootstrap-stage4-stdenv-linux
    + coreutils-9.0
    + gnugrep-3.7
• The input derivation named `binutils-wrapper-2.35.2` differs
  - /nix/store/gcyaki78ksxg9s211y4zr4ppnrq1jwlm-binutils-wrapper-2.35.2.drv:{out}
  + /nix/store/9g4r35k465xg4p02c5krbxqnwvihpmbx-binutils-wrapper-2.35.2.drv:{out}
  • The set of outputs do not match:
      + {info}
      + {man}
  • The set of input source names do not match:
      + gnu-binutils-strip-wrapper.sh
  • The set of input derivation names do not match:
      - bootstrap-stage1-stdenv-linux
      + bash-5.1-p12
      + bootstrap-stage4-stdenv-linux
      + coreutils-9.0
      + gnugrep-3.7
  • The set of input derivations named `binutils-2.35.2` do not match
      - /nix/store/l343vxcc5ik63ccrggff3js03y1l9154-binutils-2.35.2.drv:{out}
      + /nix/store/vfzsbipvxkbj9m4yh5is0shfxn3p7b2m-binutils-2.35.2.drv:{info,man,out}
  • The input derivation named `expand-response-params` differs
    - /nix/store/5y71wc7khvy8m2qh6vvrvwx31dhk68r7-expand-response-params.drv:{out}
    + /nix/store/w07x2k4wi8xvmh2nyxvx50nw5pxaga6y-expand-response-params.drv:{out}
    • The set of input derivation names do not match:
        - bootstrap-stage1-stdenv-linux
        + bootstrap-stage3-stdenv-linux
    • The environments do not match:
        stdenv=''
        - /nix/store/7wafj75gbf8kr9i3isdajc5vlm0r8jjp-bootstrap-stage1-stdenv-linux
        + /nix/store/n89rpfsfs317j2qbm57905qzzq0amyhy-bootstrap-stage3-stdenv-linux
    ''
  • Skipping environment comparison
• Skipping environment comparison</code></pre>
<p>The above helps getting some intuition on what packages change from one <strong>stdenv</strong>
to another.</p>
<p>This still does not show crucial details of where do those <strong>-B</strong> / <strong>-L</strong> options come
from into the <strong>gcc-wrapper</strong>. And why they matter at all.</p>
<h1 id="option-stacking">option stacking</h1>
<p>In contrast to <strong>FHS</strong> distributions <strong>nix</strong> explicitly allows and encourages previous
versions of software to co-exist with newer ones.</p>
<p>In our case of <strong>stdenv-stage2</strong> just rebuilds <strong>glibc</strong>. On <strong>FHS</strong> system
we would update <strong>glibc</strong> inplace and would rely on it’s backwards compatibility to
avoid system breakage right after such an update. It is practical for simle use cases but
sometimes this causes complications. For example it’s hard to downgrade <strong>glibc</strong>
once you have rebuilt a few dependencies (say, <strong>gcc</strong>) against a newer version.
And inplace glibc update can cause issues with already running executables that lazily load
<strong>nss</strong> resolver libraries.</p>
<p>Simplistically <strong>nixpkgs</strong> sidesteps the problem by effectively building multiple separate
worlds against different libcs (libc usually come with <strong>stdenv</strong> update or by using
non-default stdenv, like <strong>pkgsMusl.stdenv</strong>).</p>
<p>For our bootstrap case we somehow need to transition:</p>
<ul>
<li>from: <strong>gcc</strong> (provided by <strong>bootstrap-tools</strong>) linked against <strong>glibc</strong> (provided by <strong>bootstrap-tools</strong>)</li>
<li>to: <strong>gcc</strong> (provided by <strong>nixpkgs</strong>) linked against <strong>glibc</strong> (provided by <strong>nixpkgs</strong>)</li>
</ul>
<p>One of the ways to do it is:</p>
<ul>
<li>build <strong>glibc</strong></li>
<li>redirect <strong>gcc</strong> (from <strong>bootstrap-tools</strong>) to built <strong>glibc</strong></li>
<li>build new <strong>gcc</strong></li>
<li>[optional] build <strong>glibc</strong> and <strong>gcc</strong> again (to disentangle from
<strong>bootstrap-tools</strong>’s <strong>gcc</strong> code generator)</li>
</ul>
<p>The “redirect <strong>gcc</strong>” part is a tricky but too much: all it needs is the
override of default <strong>-B</strong> / <strong>-L</strong> / <strong>-Wl,-dynamic-linker,</strong> set of flags
mentioned in <a href="http://trofi.github.io/posts/239-hacking-on-glibc.html">hacking-on-glibc post</a>.</p>
<p>We need to watch for option order if we already specify our toolchain
explicitly. Let’s look at the following example artificial:</p>
<pre><code># prepare library copies to see the effect:

$ mkdir -p a b
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o a/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o b/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so a/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6 a/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so b/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6 b/
$ cp /glibc-2.33-108/lib/ld-linux-x86-64.so.2 a/
$ cp /glibc-2.33-108/lib/ld-linux-x86-64.so.2 b/

$ tree
.
├── a
│   ├── crt1.o
│   ├── ld-linux-x86-64.so.2
│   ├── libc.so
│   └── libc.so.6
├── a.c
├── b
│   ├── crt1.o
│   ├── ld-linux-x86-64.so.2
│   ├── libc.so
│   └── libc.so.6</code></pre>
<p>Above I placed idential copies of <strong>glibc</strong> into a new directory (suppose
we built slightly newer version of <strong>glibc</strong>) and then pointed <strong>gcc</strong> there.</p>
<p>Quiz time: try to take some time and guess what the following command would print:</p>
<pre><code>$ LANG=C gcc hello.c -o c -Wl,--verbose \
    -La -Lb \
    -Bb -Ba \
    -Wl,--dynamic-linker=$PWD/a/ld-linux-x86-64.so.2 -Wl,--dynamic-linker=$PWD/b/ld-linux-x86-64.so.2 \
    |&amp; fgrep succeeded | unnix | uniq</code></pre>
<p>Note that <strong>-L</strong> options go in a-then-b order, <strong>-B</strong> options go in b-then-a
order and dynamic-linker again goes in a-then-b.</p>
<p>Guess which files get picked from which directory.</p>
<p>Here is the result:</p>
<pre><code>$ gcc a.c -o c -Wl,--verbose -La -Lb -Bb -Ba -Wl,--dynamic-linker=$PWD/a/ld-linux-x86-64.so.2 -Wl,--dynamic-linker=$PWD/b/ld-linux-x86-64.so.2 |&amp; fgrep succeeded | unnix | uniq
attempt to open b/crt1.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crti.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtbegin.o succeeded
attempt to open /tmp/cctmOQBK.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open a/libc.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc_nonshared.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtend.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crtn.o succeeded</code></pre>
<p>Surprisingly (or not so surprisingly) <strong>crt1.o</strong> came from <strong>-Bb</strong>
(first option in the list), <strong>libc.so</strong> came from <strong>-La</strong> (also first
option in the list). But dynamic linker was … ignored?</p>
<p>Yeah. Note that <strong>gcc</strong> is already a thick wrapper in <strong>nixpkgs</strong>.
Let’s expand it with <strong>NIX_DEBUG=1</strong>:</p>
<pre><code>$ NIX_DEBUG=1 gcc a.c -o c -La -Lb -Bb -Ba -Wl,--dynamic-linker=$PWD/a/ld-linux-x86-64.so.2 -Wl,--dynamic-linker=$PWD/b/ld-linux-x86-64.so.2 |&amp; unnix

HARDENING: disabled flags: pie pic format stackprotector fortify strictoverflow
extra flags before to /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/bin/gcc:
  -Wl\,-dynamic-linker=/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2
original flags to /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/bin/gcc:
  a.c
  -o
  c
  -La
  -Lb
  -Bb
  -Ba
  -Wl\,--dynamic-linker=/tmp/zz/a/ld-linux-x86-64.so.2
  -Wl\,--dynamic-linker=/tmp/zz/b/ld-linux-x86-64.so.2
extra flags after to /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/bin/gcc:
  -B/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0-lib/lib
  -B/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/
  -idirafter
  /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include
  -idirafter
  /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/include-fixed
  -B/&lt;&lt;NIX&gt;&gt;/gcc-wrapper-11.2.0/bin/
  -L/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib
  -L/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0-lib/lib
HARDENING: disabled flags: relro pie bindnow
extra flags before to /&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld:
  ''
...</code></pre>
<p>Note that <strong>gcc</strong> already injects <strong>-Wl,-dynamic-linker=/&lt;<NIX>&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2</strong>
as the very first parameter (even before our options). As a result it gets
picked first. Inability to override the dynamic linker looks like minor a bug
of <strong>nixpkgs</strong> wrapper. I think wrapper should consistently treat all
libc overrides. It’s unsafe to mix different parts of <strong>glibc</strong>
(we already saw <strong>SIGSEGV</strong> on <strong>hello.c</strong> above).</p>
<p>If you guessed this output right you already know a lot more than me
on this topic :)</p>
<p>Given that option order matters a lot <strong>nixpkgs</strong> needs to make sure
that overrides work as expected at least most of the time:
if we override <strong>-L</strong> option for <strong>glibc</strong>, then <strong>-B</strong> option override
should be present and should follow order specified by <strong>-L</strong> (and not
the other way around).</p>
<p>I found out about these details only because <strong>nixpkgs</strong> was actually
getting the option order wrong until
<a href="https://github.com/NixOS/nixpkgs/pull/158047/commits/649ebfbed65189d7d62e4f2fe0e491552308a6f1" class="uri">https://github.com/NixOS/nixpkgs/pull/158047/commits/649ebfbed65189d7d62e4f2fe0e491552308a6f1</a>
was applied.</p>
<p>For quite a while <strong>nixpkgs</strong> was using <strong>crt1.o</strong> from wrong <strong>glibc</strong>
which made <strong>stdenv</strong> slightly contaminated by <strong>bootstrap-tools</strong>.
It used to work because <strong>crt1.o</strong> contents did not change for many
<strong>glibc</strong> releases. Until <strong>glibc-2.34</strong>. Then we started getting all
sorts of linkage failures at bootstrap:</p>
<pre><code>    expand-response-params&gt; ld: /nix/store/p4s4jf7aq6v6z9iazll1aiqwb34aqxq9-bootstrap-tools/lib/crt1.o: in function `_start':
    expand-response-params&gt; /build/glibc-2.27/csu/../sysdeps/x86_64/start.S:101: undefined reference to `__libc_csu_fini'
    expand-response-params&gt; ld: /build/glibc-2.27/csu/../sysdeps/x86_64/start.S:102: undefined reference to `__libc_csu_init'
    expand-response-params&gt; collect2: error: ld returned 1 exit status</code></pre>
<p>Once understood the fix (or workaround) was trivial.</p>
<p>There are many ways to avoid the mix-up in future. The simplest would be
to never pass more than one <strong>glibc</strong> via <strong>-B</strong> / <strong>-L</strong> and always
disable defaul search paths. But that’s for another time :)</p>
<p>Have fun!</p>

<div class="info">
    Posted on March 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Hacking on glibc</title>
    <link href="http://trofi.github.io/posts/239-hacking-on-glibc.html" />
    <id>http://trofi.github.io/posts/239-hacking-on-glibc.html</id>
    <published>2022-03-13T00:00:00Z</published>
    <updated>2022-03-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="intro">Intro</h1>
<p>Sometimes it’s useful to check fresh <strong>glibc</strong> out and test a fix
against it. Or add a few <strong>printf()</strong> statements into relevant modules.
Fun past cases of the above are
<a href="http://trofi.github.io/posts/189-glibc-on-ia64-or-how-relocations-bootstrap.html">here</a>,
<a href="http://trofi.github.io/posts/205-stack-protection-on-mips64.html">here</a> and
<a href="http://trofi.github.io/posts/209-tracking-down-mysterious-memory-corruption.html">here</a>.</p>
<p>We’ll look in more detail how to build and use local glibc for debugging
purposes. I’ll focus on redirecting the toolchain (and not on the ways to
break glibc with rare <strong>CFLAGS</strong> or configure <strong>--options</strong>). That would
be a separate big and entertaining topic :)</p>
<p>It also might be useful for folks who deal with systems that involve
multiple <strong>glibc</strong> versions present in the system simultaneously
(for bootstrap, embedded development or testing purposes).</p>
<h1 id="hello-world-anatomy">Hello World anatomy</h1>
<p>Suppose you have just built a fresh experimental <strong>glibc</strong> version.
How do you build and run a simple “hello world” program against it
without modifying already installed system <strong>glibc</strong> and <strong>gcc</strong>?</p>
<p>Let’s dissect a simple “hello world” in detail and try to extract
a few assumptions that <strong>gcc</strong> and <strong>binutils</strong> already embeds.
Here is our specimen:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// hello.c:</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> puts <span class="op">(</span><span class="st">&quot;hello!&quot;</span><span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>The example compiles and runs just fine:</p>
<pre><code>$ gcc -c hello.c -o hello.o
$ gcc hello.o -o hello
$ ./hello
hello!</code></pre>
<p>If you are somewhat familiar with the C toolchain you might already know
that there are a few stages involved:</p>
<ul>
<li><strong>compilation</strong>: C-source preprocessing (include substitution) and
translation of preprocessed C-source file into <strong>.o</strong> file</li>
<li><strong>linkage</strong>: <strong>.o</strong> files and their dependencies are joined together into
final executable file</li>
</ul>
<p>Let’s look at the preprocessing stage. Where do preprocessed headers
come from? We can have a peek at it by looking at preprocessed output
using <strong>-E</strong> flag:</p>
<pre><code>$ gcc -E hello.c -o - | head -n 10 | unnix

# 0 &quot;hello.c&quot;
# 0 &quot;&lt;built-in&gt;&quot;
# 0 &quot;&lt;command-line&gt;&quot;
# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdc-predef.h&quot; 1 3 4
# 0 &quot;&lt;command-line&gt;&quot; 2
# 1 &quot;hello.c&quot;

# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdio.h&quot; 1 3 4
# 27 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdio.h&quot; 3 4
# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/bits/libc-header-start.h&quot; 1 3 4
...</code></pre>
<p>As expected <strong>&lt;stdio.h&gt;</strong> comes from <strong>glibc</strong>. On <strong>FHS</strong> systems
that is usually <strong>/usr/include</strong>.</p>
<p>There also is another mysterious header: <strong>stdc-predef.h</strong> (also a <strong>glibc</strong>
one). It gets added even into empty files:</p>
<pre><code>$ echo | gcc -E - -o - | head -n 10 | unnix

# 0 &quot;&lt;stdin&gt;&quot;
# 0 &quot;&lt;built-in&gt;&quot;
# 0 &quot;&lt;command-line&gt;&quot;
# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdc-predef.h&quot; 1 3 4
# 0 &quot;&lt;command-line&gt;&quot; 2
# 1 &quot;&lt;stdin&gt;&quot;</code></pre>
<p><strong>stdc-predef.h</strong> is a header <strong>gcc</strong> knows to import if it targets <strong>glibc</strong>
(but not other libcs): <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/config/glibc-c.cc" class="uri">https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/config/glibc-c.cc</a>.</p>
<p>Preprocessing was straightforward. Ideally translation should not
depend on glibc specifics. In practice it might but we’ll ignore it here.</p>
<p>Let’s now look at linking phase.
We’ll use <strong>-Wl,-t</strong> flag (thanks MaskRay!) to get details of what linker actually
pulls in:</p>
<pre><code>$ LANG=C gcc hello.o -o hello -Wl,-t |&amp; unnix

/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crti.o
/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/12.1.0/crtbegin.o
hello.o
/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/12.1.0/libgcc.a
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1
/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/12.1.0/libgcc.a
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc_nonshared.a
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc_nonshared.a
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2
/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/12.1.0/libgcc.a
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1
/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/12.1.0/libgcc.a
/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/12.1.0/crtend.o
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crtn.o</code></pre>
<p>That is a lot of output! But be not afraid. Some things repeat here 4
times and inflate the output a bit.</p>
<p>All these files above are used in linking process:</p>
<ul>
<li><strong>crt{1,i,n}.o</strong>: <strong>glibc</strong>’s runtime startup and shutdown support files (<strong>__attribute__((contructor))</strong> support)</li>
<li><strong>crt{begin,end}</strong>: <strong>gcc</strong>’s runtime startup and shutdown support files (c++ global constructor and destructor support)</li>
<li><strong>hello.o</strong>: our own file!</li>
<li><strong>libgcc.a</strong>, <strong>libgcc_s.so</strong>: <strong>gcc</strong>’s runtime support for primitives that compiler
needs when CPU does not always provide as instructions (128-bit integer multiplication, stack unwinders,
atomic promitives on unusual type size and similar).</li>
<li><strong>libc.so</strong>, <strong>libc_nonshared.a</strong>: actual C library that implements <strong>puts()</strong> (<strong>printf()</strong>) and friends.</li>
<li><strong>ld-linux-x86-64.so.2</strong>: <strong>glibc</strong>’s dynamic loader.</li>
</ul>
<h1 id="custom-glibc">Custom glibc</h1>
<p>We found out that <strong>glibc</strong> provides us at least:</p>
<ul>
<li>include headers</li>
<li><strong>crt{1,i,n}.o</strong> object files</li>
<li><strong>libc.so</strong> shared object files</li>
<li><strong>libc_nonshared.a</strong> static library files</li>
<li><strong>ld-linux-x86-64.so.2</strong>: dynamic loader</li>
</ul>
<p>Now we should be able to redirect all these pieces. Let’ build our custom glibc first:</p>
<pre><code>$ git clone https://sourceware.org/git/glibc.git /tmp/custom-glibc-src
$ mkdir -p /tmp/custom-glibc-build /tmp/custom-glibc-install

$ cd /tmp/custom-glibc-build
$ /tmp/custom-glibc-src/configure --prefix=/tmp/custom-glibc-install
$ make &amp;&amp; make install</code></pre>
<p>We can already use resulting <strong>glibc</strong> to run other programs:</p>
<pre><code>$ /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 --library-path /tmp/custom-glibc-install/lib $(which id)

uid=1000(slyfox) gid=100(users) groups=100(users),1(wheel),26(video)

$ LD_DEBUG=all /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 --library-path /tmp/custom-glibc-install/lib $(which id) |&amp; fgrep relocation | unnix
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/libc.so.6 (lazy)
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/libdl.so.2 (lazy)
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/libpthread.so.0 (lazy)
   2844932:     relocation processing: /&lt;&lt;NIX&gt;&gt;/attr-2.5.1/lib/libattr.so.1
   2844932:     relocation processing: /&lt;&lt;NIX&gt;&gt;/acl-2.3.1/lib/libacl.so.1
   2844932:     relocation processing: /&lt;&lt;NIX&gt;&gt;/openssl-1.1.1m/lib/libcrypto.so.1.1
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/librt.so.1 (lazy)
   2844932:     relocation processing: /run/current-system/sw/bin/id
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2</code></pre>
<p>I’m searching for “relocation” here as a hack to see all loaded files in memory.</p>
<p>From the above we see that <strong>libc.so</strong>, <strong>libdl.so</strong> and
<strong>libpthread.so</strong> are used from our custom <strong>glibc</strong>. But <strong>libattr.so</strong>
(<strong>attr</strong> package), <strong>libacl.so</strong> (<strong>acl</strong> package), <strong>libcrypto.so</strong>
(<strong>openssl</strong> package) are used from their current locations. It is safe
to load such libraries only if they were built against same or older
<strong>glibc</strong> versions. All thanks to <strong>glibc</strong> being backwards compatible.</p>
<p>If we would, say, use use <strong>glibc-2.8</strong> as a custom version things would
probaby fail to load as those libraries depend on fresh symbols:</p>
<pre><code>$ LD_DEBUG=all /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 --library-path /tmp/custom-glibc-install/lib $(which id) |&amp; fgrep libcrypto | fgrep GLIBC_2.17 | unnix
    532869:     checking for version `GLIBC_2.17' in file /tmp/custom-glibc-install/lib/libc.so.6 [0] required by file /&lt;&lt;NIX&gt;&gt;/openssl-1.1.1m/lib/libcrypto.so.1.1 [0]</code></pre>
<p>In this case <strong>id</strong> binary requires at least <strong>glibc-2.17</strong> (via <strong>libcrypto.so</strong> dependency).</p>
<p>Ok, so running against modified glibc is straightforward. It would be
useful to rebuild <strong>id</strong> (and <strong>openssl</strong>) against older <strong>glibc</strong>.
Let’s now try building our toy example against modified <strong>glibc</strong>.</p>
<p>To deal with preprocessor we can use <strong>-I</strong> option:</p>
<pre><code>$ gcc -E hello.c -o - -I/tmp/custom-glibc-install/include | head -n 10 | unnix
# 0 &quot;hello.c&quot;
# 0 &quot;&lt;built-in&gt;&quot;
# 0 &quot;&lt;command-line&gt;&quot;
# 1 &quot;/tmp/custom-glibc-install/include/stdc-predef.h&quot; 1
# 0 &quot;&lt;command-line&gt;&quot; 2
# 1 &quot;hello.c&quot;

# 1 &quot;/tmp/custom-glibc-install/include/stdio.h&quot; 1
# 27 &quot;/tmp/custom-glibc-install/include/stdio.h&quot;
# 1 &quot;/tmp/custom-glibc-install/include/bits/libc-header-start.h&quot; 1
...</code></pre>
<p>For complex cases <strong>gcc</strong> supports many other flavours of handling include
paths: <strong>-isystem</strong>, <strong>-idirafter</strong>, <strong>-isysroot</strong>, <strong>-iquote</strong> and
many more :) We will use simplest <strong>-I</strong>.</p>
<p>Now let’s deal with the <strong>libc.so</strong> location. Normally <strong>-L</strong> option would
be enough to specify library lookup path:</p>
<pre><code>{ LANG=C gcc hello.o -o hello -Wl,--verbose -L/tmp/custom-glibc-install/lib | fgrep succeeded; } |&amp; unnix
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o: in function `_start':
/build/glibc-2.33/csu/../sysdeps/x86_64/start.S:101: undefined reference to `__libc_csu_fini'
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /build/glibc-2.33/csu/../sysdeps/x86_64/start.S:102: undefined reference to `__libc_csu_init'
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: link errors found, deleting executable `hello'
collect2: error: ld returned 1 exit status
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crti.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtbegin.o succeeded
attempt to open hello.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so.6 succeeded
attempt to open /tmp/custom-glibc-install/lib/libc_nonshared.a succeeded
attempt to open /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtend.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crtn.o succeeded</code></pre>
<p>Almost worked!</p>
<ul>
<li><p>good: we successfully redirected <strong>libc.so.6</strong> and <strong>libc_nonshared.a</strong>
(as expected); and even <strong>ld-linux-x86-64.so.2</strong> was redirected!</p></li>
<li><p>bad: <strong>crt{1,i,n}.o</strong> set of files were not redirected; they are not exactly libraries, thus it’s fine.</p></li>
</ul>
<p><strong>crt{1,i,n}.o</strong> are still pulled in from system <strong>glibc</strong>. Such a mix of parts from different <strong>glibc</strong> versions causes linkage failure: <strong>undefined reference to ‘__libc_csu_fini’</strong>.</p>
<p>Object files can be redirected with <strong>-B</strong> (or can be redirected with <strong>-nostartfiles /path/to/crt{1,i,n}.o</strong>):</p>
<pre><code>$ LANG=C gcc hello.o -o hello -Wl,--verbose -L/tmp/custom-glibc-install/lib -B/tmp/custom-glibc-install/lib | fgrep succeeded |&amp; unnix
attempt to open /tmp/custom-glibc-install/lib/crt1.o succeeded
attempt to open /tmp/custom-glibc-install/lib/crti.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtbegin.o succeeded
attempt to open hello.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so.6 succeeded
attempt to open /tmp/custom-glibc-install/lib/libc_nonshared.a succeeded
attempt to open /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtend.o succeeded
attempt to open /tmp/custom-glibc-install/lib/crtn.o succeeded</code></pre>
<p>Let’s ignore <strong>libgcc_s.so</strong> for now. It’s not really a part of <strong>glibc</strong> but
a <strong>nixpkgs</strong> idiosyncrasy. The rest of <strong>glibc</strong> files is successfully redirected!</p>
<p>Does final result look good now? Let’s try!</p>
<pre><code>$ LANG=C ./hello
Segmentation fault (core dumped)</code></pre>
<p>Our program can’t even run. Why is that?</p>
<pre><code>$ LD_DEBUG=all ./hello |&amp; fgrep reloc | unnix
   1359934:     relocation processing: /tmp/custom-glibc-install/lib/libc.so.6 (lazy)
   1359934:     relocation processing: ./hello (lazy)
   1359934:     relocation processing: /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2</code></pre>
<p><strong>LD_DEBUG=all</strong> hints at dynamic loader from our system <strong>glibc</strong>
and not from custom <strong>glibc</strong>. That path is embedded into <strong>gcc</strong> itself:</p>
<pre><code>gcc -dumpspecs |&amp; fgrep ld-linux | unnix
...
    -dynamic-linker %{muclibc:/lib/ld64-uClibc.so.0;:
                    %{mbionic:/system/bin/linker64;:
                    %{mmusl:/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-musl-x86_64.so.1;:
                    /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib64/ld-linux-x86-64.so.2}}}
...</code></pre>
<p>Here linker spec always passes <strong>-dynamic-linker /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib64/ld-linux-x86-64.so.2</strong>
path to the linker until it’s expliictly overridden. Let’s override it explicitly.</p>
<p>Here is our final combined result of overriding headers, libraries,
object files and dynamic linker:</p>
<pre><code>$ gcc hello.c -o hello \
    -I/tmp/custom-glibc-install/include \
    \
    -L/tmp/custom-glibc-install/lib \
    -B/tmp/custom-glibc-install/lib \
    -Wl,-dynamic-linker,/tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2

$ ./hello
hello!

$ LD_DEBUG=all ./hello |&amp; fgrep reloc | unnix
   1398510:     relocation processing: /tmp/custom-glibc-install/lib/libc.so.6 (lazy)
   1398510:     relocation processing: ./hello (lazy)
   1398510:     relocation processing: /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2</code></pre>
<p>Success! We completely untangled from host’s <strong>glibc</strong>.</p>
<p>Sometimes (usually in bare-metal space) it’s easier to drop defaults
entirely and specify all the dependencies as explicit arguments.
A few related options you might want to explore in <strong>gcc</strong> are:</p>
<ul>
<li><strong>-nostdinc</strong></li>
<li><strong>-nostdlib</strong></li>
<li><strong>-nolibc</strong></li>
<li><strong>-nodefaultlibs</strong></li>
<li><strong>-nostartfiles</strong></li>
<li><strong>-ffreestanding</strong></li>
</ul>
<p>They explicitly disable search paths or object files inclusion for:
include paths, startup files or standard and runtime support libraries.
Their interaction is subtle. I won’t get into detail here either.</p>
<h1 id="parting-words">Parting words</h1>
<p>It is straightforward to experiment with new <strong>glibc</strong> without damaging
your main install on most Linux distributions. Just make sure you set the
environment up correctly and override all the bits.</p>
<p><strong>glibc</strong> has many moving parts to watch for when you replace parts of
it: headers (<strong>-I</strong>), object files (<strong>-B</strong>), shared libraris (<strong>-L</strong>),
static libraries (also <strong>-L</strong>) and dynamic linker (<strong>ld-linux-x86-64.so.2</strong>).</p>
<p><strong>LD_DEBUG=</strong> is extremely useful for dynamic loader debugging.</p>
<p>Mixing parts from different <strong>glibc</strong> versions in a single binary is a
sure way to get build failure and even runtime crashes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on March 13, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>New make --shuffle mode</title>
    <link href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html" />
    <id>http://trofi.github.io/posts/238-new-make-shuffle-mode.html</id>
    <published>2022-02-23T00:00:00Z</published>
    <updated>2022-02-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="tldr">TL;DR:</h1>
<p>I implemented new <strong>--shuffle</strong> option for <strong>GNU make</strong> to simulate
non-deterministic build order in parallel makefiles.</p>
<h1 id="background">Background</h1>
<p>About 11 years ago I was a year old Gentoo dev who just started getting
downstream bug reports on mysterious <strong>ghc</strong> build failures like
<a href="https://bugs.gentoo.org/326347" class="uri">https://bugs.gentoo.org/326347</a>.</p>
<p>The symptoms were seemingly simple: some file was inacessible while
it was being written to, or executed.</p>
<p>Years later I mastered the intricacies of <strong>ghc</strong>’s build system on how
to debug it effectively. But at that time I did not really know what to
do. My main working machine was a Core 2 duo HP laptop which could not do
more than <strong>-j2</strong>. And even that required a bit of swap for <strong>ghc</strong>’s
linking stage. Throwing more parallelism was not really an option to
trigger such bugs.</p>
<h1 id="makefile-target-ordering">Makefile target ordering</h1>
<p><strong>Makefiles</strong> are fundamentally simple: it’s a graph of dependencies
with a sequence of shell commands attached to a node. There are numerous
caveats, but they should not break this model too much.</p>
<p>In theory you can topologically sort the graph and execute the dependencies
in various conformant orders and expect the same result. Modulo missing
dependencies in the graph.</p>
<p>In practice <strong>GNU make</strong> happens to traverse the graph in very specific
topological order: it maintains syntactic order as much as possible.</p>
<p>Here is an example <strong>Makefile</strong>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># cat Makefile</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> a b c</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dv">b:</span><span class="dt"> b1 b2 b3</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span><span class="dt"> a1 a2 a3</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dv">c:</span><span class="dt"> c1 c2 c3</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="dv">a b c a1 a2 a3 b1 b2 b3 c1 c2 c3:</span><span class="dt">; @echo </span><span class="ch">$@</span><span class="dt"> &amp;&amp; sleep 1</span></span></code></pre></div>
<p>(I added <strong>sleep 1</strong> to make it more visible when next goal schedules).</p>
<p>Here is the sequential execution by <strong>GNU make</strong>:</p>
<pre><code>$ make
a1
a2
a3
a
b1
b2
b3
b
c1
c2
c3
c</code></pre>
<p>The seen order is exactly <strong>all</strong>’s prerequisites left-to-right
recursively.</p>
<p>Adding parallelism does not change the order too much: <strong>make</strong> still
traverses prerequisites in the same order and starts as many targets
with satisfied dependencies as possible.</p>
<p>Parallel example:</p>
<pre><code>$ make -j4
a1
a2
a3
b1

b2
b3
c1
c2

c3
a
b

c</code></pre>
<p>I added newlines where 1-second pauses visibly happen.</p>
<p>Note that in this example <strong>a1</strong> does not depend on
<strong>c2</strong>. But <strong>c2</strong> practically always starts execution after <strong>a1</strong>
finishes.</p>
<p>The “only” way to run <strong>a1</strong> and <strong>c2</strong> in parallel is to run
<strong>make</strong> with at least <strong>-j8</strong>. Which is a lot.</p>
<p>Or do something with the system that stalls task execution for
indefinite amount of time (like, adding various nice levels
or put system under high memory or CPU pressure).</p>
<p>Very occasionally already stressed system naturally gets into
unusual task execution order. You get the one-off failure and
struggle to repeat it ever again. Which makes it very hard to
test the fix unless you know where exactly to put the <strong>sleep</strong>
command to make it more reproducible.</p>
<h1 id="an-old-idea">An old idea</h1>
<p>Even then it was clear that CPU count per device will only increase
and it will be increasingly painful to work with sequentially built
projects :) Bugs will come back again and again on you the more cores
you throw at the <strong>Makefiles</strong>.</p>
<p>I had a silly idea back then (post <a href="http://trofi.github.io/posts/143-make-idea.html">in russian</a>):
what if we arbitrarily reorder the prerequisites in <strong>Makefile</strong>s? Or
maybe even trace spawned processes to know for sure what files targets
access? That might allow us to weed out most of the parallel bugs with
some sort of stress test on a low-core machine.</p>
<p>Fast forward 11 years I attempted to enable build parallelism by default
in <a href="https://discourse.nixos.org/t/rfc-make-stdenv-to-build-in-parallel-by-default/15684/8">nixpkgs</a>.
A few packages still had <a href="http://trofi.github.io/posts/230-when-make-j-nproc-fails.html">some issues</a>.</p>
<p>I recalled the idea and tried to implement target random shuffle within
<strong>GNU make</strong>!</p>
<h1 id="better-reproducer-make---shuffle">Better reproducer: make --shuffle</h1>
<p>Initial idea was very simple: pick target order at <strong>Makefile</strong>
parse time and reshuffle the lists randomly. To pick an example
above one of the example shuffles would be:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ch">$ </span>cat Makefile</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> c b a</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dv">b:</span><span class="dt"> b2 b1 b3</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span><span class="dt"> a3 a2 a1</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="dv">c:</span><span class="dt"> c1 c2 c3</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="dv">a b c a1 a2 a3 b1 b2 b3 c1 c2 c3:</span><span class="dt">; @echo </span><span class="ch">$@</span><span class="dt"> &amp;&amp; sleep 1</span></span></code></pre></div>
<p>I wrote the patch and proposed it to GNU make community:
<a href="https://lists.gnu.org/archive/html/bug-make/2022-02/msg00005.html" class="uri">https://lists.gnu.org/archive/html/bug-make/2022-02/msg00005.html</a>.</p>
<p>The example run of patched <strong>make</strong> shows less determinism now:</p>
<pre><code>$ ~/dev/git/make/make --shuffle -j4
c2
c3
c1
a2

a1
b2
a3
b3

b1

c
b
a</code></pre>
<p>Paul did not seem to object too much to the idea and pointed out
that implementation will break more complex <strong>Makefiles</strong> as there
is a simple way to refer to individual prerequisites by number.</p>
<p>To pick Pauls’ example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o :</span><span class="dt"> %.c</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> -c -o <span class="ch">$@</span> <span class="ch">$&lt;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.o:</span><span class="dt"> foo.c foo.h bar.h baz.h</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="dv">foo%:</span><span class="dt"> arg%1 arg%2 arg%3 arg%4</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>	bld <span class="ch">$&lt;</span> <span class="ch">$(</span><span class="kw">word</span><span class="st"> 3</span><span class="kw">,</span><span class="ch">$^)</span> <span class="ch">$(</span><span class="kw">word</span><span class="st"> 2</span><span class="kw">,</span><span class="ch">$^)</span> <span class="ch">$(</span><span class="kw">word</span><span class="st"> 4</span><span class="kw">,</span><span class="ch">$^)</span></span></code></pre></div>
<p>In both cases syntactic reshuffling breaks the build rules
by passing wrong file name.</p>
<p>To fix it I came up with a way to store two orders at the same time:
syntactic and shuffled and posted patch as
<a href="https://lists.gnu.org/archive/html/bug-make/2022-02/msg00042.html" class="uri">https://lists.gnu.org/archive/html/bug-make/2022-02/msg00042.html</a>.</p>
<h1 id="running-make---shuffle-on-real-projects">Running ‘make --shuffle’ on real projects</h1>
<p>While I was waiting for the feedback I ran the build tests against
<strong>nixpkgs</strong> packages.</p>
<p>First, I almost instantly got build failures on the projects that already
explicitly disable parallel builds to avoid known failures: <strong>groff</strong>,
<strong>source-highlight</strong>, <strong>portaudio</strong>, <strong>slang</strong>, <strong>gnu-efi</strong>, <strong>bind</strong>,
<strong>pth</strong>, <strong>libomxil</strong>, <strong>dhcp</strong>, <strong>directfb</strong>, <strong>doxygen</strong>, <strong>gpm</strong>,
<strong>judy</strong> and a few others. That was a good sign.</p>
<p>A bit later I started getting failures I did not encounter before in
<strong>ghc</strong>(!), <strong>gcc</strong>(!!), <strong>automake</strong>(!!!), <strong>pulseaudio</strong>,
<strong>libcanberra</strong>, many <strong>ocaml</strong> and some <strong>perl</strong> packages.</p>
<p>All the failures looked genuine missing dependencies. For example
<strong>gcc</strong>’s <strong>libgfortran</strong> is missing a <strong>libquadmath</strong> build dependency.
It is natural not to encounter it in real world as <strong>libquadmath</strong> is
usually built along with other small runtimes way before <strong>g++</strong> or
<strong>gfortran</strong> is ready.</p>
<p>Fun fact: while running the build I stumbled on a <strong>GNU make</strong> bug
not related to my change: <a href="https://lists.gnu.org/archive/html/bug-make/2022-02/msg00037.html" class="uri">https://lists.gnu.org/archive/html/bug-make/2022-02/msg00037.html</a>.
The following snippet tricks <strong>GNU make</strong> to loop for a while until
it crashes with argument list exhaustion (or inode exhaustion in
<strong>/tmp</strong>):</p>
<pre><code>$ printf 'all:\n\techo $(CC)' | ./make -sf -
&lt;hung&gt;</code></pre>
<p>This bug is not present in any releases yet. And hopefully will not be.</p>
<p>I’d like to land the <strong>--shuffle</strong> change upstream in some form before
sending bug reports and trivial fixes to upstreams.</p>
<h1 id="how-you-can-test-it">How you can test it</h1>
<p>If you are keen to try this shuffling mode on your <strong>make</strong>-based
projects (be it manually written, <strong>automake</strong>-based ro <strong>cmake</strong>-based)
here is a rough instruction to do it:</p>
<ul>
<li>grab current git tree of <strong>GNU make</strong> at <a href="https://git.savannah.gnu.org/git/make.git" class="uri">https://git.savannah.gnu.org/git/make.git</a></li>
<li>apply <a href="https://savannah.gnu.org/bugs/download.php?file_id=52908">v4-0001-Add-shuffle-argument-support.patch</a> from <a href="https://savannah.gnu.org/bugs/index.php?62100" class="uri">https://savannah.gnu.org/bugs/index.php?62100</a></li>
<li>build <strong>make</strong> as typical <strong>./bothstrap &amp;&amp; configure &amp;&amp; make</strong></li>
<li>use it as <strong>path/to/make --shuffle &lt;your-typical-make-arguments&gt;</strong> against your project</li>
<li>check if the build succeeds, run it a few times</li>
</ul>
<p>Both sequential and parallel modes should work fine. I suggest trying
both. The shuffling overhead should be negligible.</p>
<h1 id="how-do-failures-look-like">How do failures look like</h1>
<p>When build fails it reports the shuffling mode and seed used. Let’s try it
on a concrete <strong>cramfsswap</strong> example:</p>
<pre><code>$ git clone https://github.com/julijane/cramfsswap.git
$ cd cramfsswap

$ ~/dev/git/make/make clean &amp;&amp; ~/dev/git/make/make
rm -f cramfsswap
gcc -Wall -g -O -o cramfsswap -lz cramfsswap.c
strip cramfsswap

$ ~/dev/git/make/make clean &amp;&amp; ~/dev/git/make/make
rm -f cramfsswap
strip cramfsswap
/nix/store/v56r6fqg2z5yc5nyjn737hiakc2xm0gh-binutils-2.38/bin/strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370</code></pre>
<p>Here we see a successful run and a failed run. Failed run reports
specific seed that might trigger the failure: <strong>--shuffle=1645603370</strong>.</p>
<p>We can use this seed explicitly:</p>
<pre><code>$ ~/dev/git/make/make --shuffle=1645603370
strip cramfsswap
strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370
$ ~/dev/git/make/make --shuffle=1645603370
strip cramfsswap
strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370
$ ~/dev/git/make/make --shuffle=1645603370
strip cramfsswap
strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370</code></pre>
<p>Note how ordering is preserved across the runs with fixed seed.</p>
<h1 id="parting-words">Parting words</h1>
<p>Implementing the shuffling idea took a weekend. I should have tried
it earlier :) The result instantly found existing and new missing
dependencies in a small subset of real projects. Some of these failures
are very hard to trigger otherwise.</p>
<p>It would be nice to get <strong>--shuffle</strong> upstreamed to ease reporting
ordering problems to other projects without too much detail on how to get
unusual build orders. Otherwise this post would have to do.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February 23, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Nix and Guix in Gentoo in 2022</title>
    <link href="http://trofi.github.io/posts/237-nix-and-guix-and-gentoo-in-2022.html" />
    <id>http://trofi.github.io/posts/237-nix-and-guix-and-gentoo-in-2022.html</id>
    <published>2022-02-09T00:00:00Z</published>
    <updated>2022-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="a-new-home">A new home</h1>
<p>In 2020 <strong>sys-apps/nix</strong> and <strong>sys-apps/guix</strong> were removed from
the main <strong>::gentoo</strong> tree into their own <strong>::nix-guix</strong> overlay:
<a href="https://github.com/trofi/nix-guix-gentoo/" class="uri">https://github.com/trofi/nix-guix-gentoo/</a></p>
<p>The move makes the installation process slightly more cumbersome
than before (<a href="http://trofi.github.io/posts/196-nix-on-gentoo-howto.html">nix in 2017</a>,
<a href="http://trofi.github.io/197-guix-on-gentoo-howto.html">guix in 2017</a>): overlays are
not the first thing users have to deal with.</p>
<p>Maciej moved setup basics out to overlay’s own readme files:
<a href="https://github.com/trofi/nix-guix-gentoo/#readme" class="uri">https://github.com/trofi/nix-guix-gentoo/#readme</a>. I added a standard
blurb on how one enables the overlay to make it slightly easier
for newcomers.</p>
<p><strong>::nix-guix</strong> overlay is still safe to use on a daily basis on top
of stable or unstable Gentoo system: it provides the minimum of extra
packages needed to get any of both package managers running.</p>
<h1 id="please-contribute">Please contribute :)</h1>
<p>PSA: I personally don’t use the overlay on a regular basis as I don’t
use Gentoo as my main system. Thus bugs might creep in and stay there
for quite a while until I notice. Please file the
<a href="https://github.com/trofi/nix-guix-gentoo/issues">issues</a> if you notice
something odd. Or just send the fixes straight away. These packages are
not that complicated. We’ll try to figure something out.</p>
<p>I’ll try to get a minimal CI locally but it will take some time.</p>
<h1 id="some-updates-meanwhile">Some updates meanwhile</h1>
<ul>
<li><strong>nix</strong> is updated to latest <strong>2.6.0</strong> version.
Normally it would be a trivial version update, but in case of <strong>nix</strong>
<strong>DESTDIR=</strong> support does not quite work and needs a few lines of
<strong>Makefile</strong> code: <a href="https://github.com/NixOS/nix/issues/5781" class="uri">https://github.com/NixOS/nix/issues/5781</a>.</li>
<li><strong>nix-9999</strong> and <strong>guix-9999</strong> ebuilds are in a reasonable shape for
day-to-day use.</li>
<li><strong>guix-1.3.0</strong> was fixed to pull successfully <strong>zstd</strong> binaries from
cache.</li>
</ul>
<h1 id="tip-of-the-day">Tip of the day</h1>
<p>The other day I found out that <strong>nixpkgs</strong> already has a script to update
packages automatically to latest version available. For <strong>github</strong> based
projects it’s a matter of adding one line:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>passthru.updateScript = nix<span class="op">-</span>update<span class="op">-</span>script <span class="op">{</span> <span class="va">attrPath</span> <span class="op">=</span> pname<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>Recent real world example is <strong>re2c</strong>: <a href="https://github.com/NixOS/nixpkgs/pull/156972" class="uri">https://github.com/NixOS/nixpkgs/pull/156972</a></p>
<p>For others you can add arbitrary code to extract current version. I tried
ot on <strong>poke</strong> recently: <a href="https://github.com/NixOS/nixpkgs/pull/157108" class="uri">https://github.com/NixOS/nixpkgs/pull/157108</a></p>
<p>Then package update becomes trivial by running <strong>nix-update</strong>.</p>
<p>Enjoy!</p>

<div class="info">
    Posted on February  9, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>A rust bug</title>
    <link href="http://trofi.github.io/posts/236-a-rust-bug.html" />
    <id>http://trofi.github.io/posts/236-a-rust-bug.html</id>
    <published>2022-02-08T00:00:00Z</published>
    <updated>2022-02-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This is a post that documents a few tips to track down elusive problem
in a <strong>rust</strong> codebase of medium size: a few crates a few megabytes
of code each.</p>
<h1 id="the-exhibit">The exhibit</h1>
<p>It all started from seemingly minor problem: after an update of <strong>rust</strong>
from <strong>1.56.1</strong> to <strong>1.57.0</strong> testsuite of <strong>rav1e-0.4.1</strong> project started
<a href="https://github.com/NixOS/nixpkgs/pull/148358#issuecomment-985934315">failing in <strong>nixpkgs</strong></a></p>
<pre><code>failures:
    src/api/config/mod.rs - api::config::Config::new_context (line 232)
    src/api/context.rs - api::context::Context&lt;T&gt;::new_frame (line 41)
    src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 197)
    src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 222)
    src/api/context.rs - api::context::Context&lt;T&gt;::send_frame (line 75)</code></pre>
<p>Normally testsuite failures are a better starting point than a bug on
real application: the inputs are usually trivial, they exercise small
part of the library, you could run a test under debugger and check the
place where crash happens and so on.</p>
<p>Here is how our failing test
<a href="https://github.com/xiph/rav1e/blob/v0.5.1/src/api/context.rs#L278-L290">looks like</a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">/// # fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let mut enc = EncoderConfig::default();</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     // So it runs faster.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     enc.width = 16;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     enc.height = 16;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let cfg = Config::new().with_encoder_config(enc);</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let mut ctx: Context&lt;u8&gt; = cfg.new_context()?;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co">/// #</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let frames = vec![ctx.new_frame(); 4].into_iter();</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     encode_frames(&amp;mut ctx, frames);</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">/// #</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     Ok(())</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">/// # }</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span></code></pre></div>
<p>Looks simple. Testing against git checkout of <strong>rav1e</strong> shown the same failure:</p>
<pre><code>$ cargo test --release
failures:
     ...
     src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 204)
     src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 229)
 test result: FAILED. 4 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out; finished in 14.40s</code></pre>
<p>Using this data Jörg filed <a href="https://github.com/xiph/rav1e/issues/2851">upstream report</a>
at which point I thought the failure would be obvious to upstream developers.</p>
<h1 id="into-the-rabbit-hole">Into the rabbit hole</h1>
<p>I’m usually wary of filing bugs where it’s not very clear if it’s a fault of
my environment or a fault of some underlying package way below the affected
one.</p>
<p>In this case it looked like a simple <strong>rav1e</strong> bug to my unexperienced eye.</p>
<p>Unfortunately unspream’s suspiction fell on <strong>NixOS</strong> almost immediately :)
Luckily others were able to reproduce the same failure with recent enough
compiler. The failure nature remained to be a complete mystery to others.</p>
<p>I gave it a try.</p>
<p>First, this test is a doctest: it’s a part of source’s comment that <strong>doctest</strong>
tool extracts, compiles and runs. In theory if we do the same extraction
mechanically and write this code snippet to a text file it will fail the same.
It did not. Test kept failing only as a part of doctest run.</p>
<p>This proved to be a bit complicated to debug on release compiler: support for
collecting intermediate binaries from <strong>doctest</strong> is an unstable feature.</p>
<p>To avoid dealing with nightly compiler I resorted to patching the test with
<strong>sleep()</strong> to quickly hook into failure with a debugger in hopes of an obvious
bug:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/api/context.rs</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/api/context.rs</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -78,8 +78,10 @@ impl&lt;T: Pixel&gt; Context&lt;T&gt; {</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>   ///</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>   /// ```</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>   /// use rav1e::prelude::*;</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  /// use std::{thread, time};</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>   ///</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>   /// # fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="va">+  /// thread::sleep(time::Duration::from_millis(1000 * 30));</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>   /// let cfg = Config::default();</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>   /// let mut ctx: Context&lt;u8&gt; = cfg.new_context().unwrap();</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>   /// let f1 = ctx.new_frame();</span></code></pre></div>
<p>The result somewhat worked:</p>
<pre><code>$ RUSTDOCFLAGS='-C debuginfo=2' cargo test --release --doc --verbose 'api::context::Context&lt;T&gt;::send_frame'
...
$ gdb -p $pid
(gdb) continue
Continuing.
[New Thread 0x7f4cf799e640 (LWP 503344)]
[New Thread 0x7f4cf779a640 (LWP 503345)]

Thread 2 &quot;rust_out&quot; received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7f4cf799e640 (LWP 503344)]
0x00007f4cf799d9d0 in ?? ()
(gdb) bt
#0  0x00007f4cf799d9d0 in ?? ()
#1  0x00007f4cf799e5f8 in ?? ()
#2  0x00007f4cf799da80 in ?? ()
#3  0x000055b1d909d861 in rayon_core::registry::WorkerThread::set_current (thread=0x7f4cf799d600)
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:636
#4  rayon_core::registry::main_loop (registry=..., index=0, worker=...)
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:807
#5  rayon_core::registry::ThreadBuilder::run (self=...)
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:55
#6  0x000055b1d90a41dd in rayon_core::registry::{impl#2}::spawn::{closure#0} ()
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:100
#7  std::sys_common::backtrace::__rust_begin_short_backtrace&lt;rayon_core::registry::{impl#2}::spawn::{closure#0}, ()&gt; (f=...)
    at /build/rustc-1.57.0-src/library/std/src/sys_common/backtrace.rs:123
#8  0x000055b1d90975dc in std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&lt;rayon_core::registry::{impl#2}::spawn::{closure#0}, ()&gt; () at /build/rustc-1.57.0-src/library/std/src/thread/mod.rs:483
#9  core::panic::unwind_safe::{impl#23}::call_once&lt;(), std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt; (self=...,
    _args=&lt;optimized out&gt;) at /build/rustc-1.57.0-src/library/core/src/panic/unwind_safe.rs:271
#10 0x000055b1d90a11cf in std::panicking::try::do_call&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt;, ()&gt; (data=&lt;optimized out&gt;) at /build/rustc-1.57.0-src/library/std/src/panicking.rs:403
#11 std::panicking::try&lt;(), core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt;&gt;
    (f=&lt;error reading variable: Cannot access memory at address 0x0&gt;) at /build/rustc-1.57.0-src/library/std/src/panicking.rs:367
#12 0x000055b1d90a42d0 in std::panic::catch_unwind&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt;, ()&gt; (f=...) at /build/rustc-1.57.0-src/library/std/src/panic.rs:133
#13 0x000055b1d90960cb in std::thread::{impl#0}::spawn_unchecked::{closure#1}&lt;rayon_core::registry::{impl#2}::spawn::{closure#0}, ()&gt; ()
    at /build/rustc-1.57.0-src/library/std/src/thread/mod.rs:482
#14 core::ops::function::FnOnce::call_once&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}, ()&gt; ()
    at /build/rustc-1.57.0-src/library/core/src/ops/function.rs:227
#15 0x000055b1d91d65a5 in std::sys::unix::thread::Thread::new::thread_start ()
#16 0x00007f4cf83fdd40 in start_thread () from /nix/store/s9qbqh7gzacs7h68b2jfmn9l6q4jwfjz-glibc-2.33-59/lib/libpthread.so.0
#17 0x00007f4cf81e443f in clone () from /nix/store/s9qbqh7gzacs7h68b2jfmn9l6q4jwfjz-glibc-2.33-59/lib/libc.so.6</code></pre>
<p>We got a detailed backtrace that gets into the depths of <strong>rayon-core</strong>
crate (it implements internals of parallel execution of tasks). I had
no idea what this trace showed me.</p>
<p>Having looked at the bits above <strong>rav1e</strong> upstream suggested filing a
bug against <strong>rayon-core</strong>.</p>
<p>By this time I realized there will be no easy way out and I’ll have to
build something manageable to understand where the error really happens:
in <strong>rav1e</strong>, <strong>rayon-core</strong> or somewher else.</p>
<p>Quick quiz: which component do you think will end up having a bug?</p>
<h1 id="rust-minimizer-howto">Rust minimizer HOWTO</h1>
<p>So how does one shring the example? My mechanical trick is to remove
dead code unrelated to our bug trigger.</p>
<p><strong>rust</strong> has a useful feature of warning user of unused code.
Let’s look at this toy example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat a.rs</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> g()<span class="op">{}</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> pg()<span class="op">{}</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{}</span></span></code></pre></div>
<p>Building it:</p>
<pre><code>$ rustc a.rs
warning: function is never used: `g`
 --&gt; a.rs:1:4
  |
1 | fn g(){}
  |    ^
  |
  = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted</code></pre>
<p>In this case <strong>g()</strong> is a clearly unused function: it’s visibility is
limited to current module. Note that <strong>pg()</strong> is also unused for that
specific program. It’s considered to be used because it’s explicitly
exported for all external modules and crates.</p>
<p>To minimize a test we can safely assume that nothing should be exported
outside current crate except maybe <strong>main()</strong> function of the test itself.</p>
<p>Thus I came up with a hack: change all “pub” exports to “pub(crate)” exports
with a single sed line:</p>
<pre><code>$ sed -e 's@pub @pub(crate) @g' -i *.rs</code></pre>
<p>That’s it! The rest comiler will do for us:</p>
<pre><code>$ rustc a.rs
warning: function is never used: `g`
 --&gt; a.rs:1:4
  |
1 | fn g(){}
  |    ^
  |
  = note: `#[warn(dead_code)]` on by default

warning: function is never used: `pg`
 --&gt; a.rs:2:15
  |
2 | pub(crate) fn pg(){}
  |               ^^

warning: 2 warnings emitted</code></pre>
<p>Yay! Now <strong>pg()</strong> is also reported as unused.</p>
<p>Now we just need to manually delete <strong>pg()</strong> definition from the source code
and make sure the hypothetical bug still triggers. Would be nice if
<strong>cargo fix</strong> removed this unused code automatically.</p>
<p>I have applied this <strong>sed</strong> hack to all of <strong>rav1e</strong> and almost immediately
got this reproducer:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat src/lib.rs</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rayon::iter::</span>IntoParallelIterator<span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rayon::iter::</span>ParallelIterator<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co">/// # Examples</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="co">/// use bug::do_bug;</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="co">/// # fn main() {</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="co">/// bug::do_bug()</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="co">/// # }</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> do_bug() <span class="op">{</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span><span class="op">..</span><span class="dv">1</span>)<span class="op">.</span>into_par_iter()<span class="op">.</span>for_each(<span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span><span class="op">..</span><span class="dv">1</span>)<span class="op">.</span>into_par_iter()<span class="op">.</span>for_each(<span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span><span class="op">..</span><span class="dv">1</span>)<span class="op">.</span>into_par_iter()<span class="op">.</span>for_each(<span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Clearly a <strong>rayon</strong> bug, right? There is nothing <strong>rav1e</strong> specific in this code.</p>
<p>I filed the <a href="https://github.com/rayon-rs/rayon/issues/911">bug report</a>
being quite confident I got the culprit. Alas once again suspiction fell
on my <strong>NixOS</strong> environment :)</p>
<p>I tried <strong>Ubuntu</strong> and got the same <strong>SIGSEGV</strong> there. I felt that I’ll need
to keep digging if I want this bug get solved. My example still relied on a
few other crates: <strong>rayon-core</strong>, standard library and something else.</p>
<p>I applied <strong>pub(crate)</strong> hack to <strong>rayon-core</strong> as well and got this beauty:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat src/lib.rs</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="pp">thread_local!</span> <span class="op">{</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">static</span> THREAD_LOCAL_GLOBAL<span class="op">:</span> <span class="pp">std::cell::</span>Cell<span class="op">&lt;</span><span class="dt">usize</span><span class="op">&gt;</span> <span class="op">=</span> <span class="pp">std::cell::Cell::</span>new(<span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>inline<span class="at">(</span>never<span class="at">)]</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> set_state_func(t<span class="op">:</span> <span class="op">&amp;</span><span class="pp">std::cell::</span>Cell<span class="op">&lt;</span><span class="dt">usize</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    t<span class="op">.</span>set(<span class="dv">42</span>)<span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>inline<span class="at">(</span>never<span class="at">)]</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> thread_func() <span class="op">{</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    THREAD_LOCAL_GLOBAL<span class="op">.</span>with(set_state_func)<span class="op">;</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="co">/// # Examples</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="co">/// use bug::do_bug;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a><span class="co">/// # fn main() {</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="co">/// bug::do_bug()</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a><span class="co">/// # }</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>inline<span class="at">(</span>never<span class="at">)]</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> do_bug() <span class="op">{</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">// to ease catching the test with gdb</span></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a>  <span class="co">//std::thread::sleep(std::time::Duration::from_secs(10));</span></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> _ <span class="kw">in</span> <span class="dv">0</span><span class="op">..</span><span class="dv">128</span> <span class="op">{</span></span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true" tabindex="-1"></a>    <span class="pp">std::thread::</span>spawn(thread_func)<span class="op">.</span>join()<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I used <strong>#[inline(never)]</strong> to make sure we don’t get affected by
optimizer decisions during reduction. I don’t know if it has any
effect :)</p>
<p>Here we spawn 128 no-op threads that set some thread-local global
variable. There is just nothing to break here! Note that <strong>main()</strong>
still has to hide out in <strong>doctest</strong> comment to trigger <strong>SIGSEGV</strong>.</p>
<p>I filed the <a href="https://github.com/rust-lang/rust/issues/92869">bug against <strong>rust</strong></a>.</p>
<p>In there Josh and Nikita quickly found the code gnerator discrepancy in <strong>llvm</strong>
and fixed it with <a href="https://reviews.llvm.org/D117489">D117489 patch</a>.</p>
<p>The bug was so elusive because <strong>rav1e</strong>’s <strong>Cargo.toml</strong> managed to
hit a few unique properties:</p>
<ul>
<li>build uses <strong>debug = true / lto = “thin”</strong> configuration in <strong>[profile.release]</strong></li>
<li><strong>cargo test --doc --release</strong> does not enable <strong>-O</strong> optimisations for tests
but does enable <strong>lto = “thin”</strong> (a <strong>cargo test</strong> perhaps?). This matches
neither debug nor release configuration for proper (non-doctest) tests.</li>
</ul>
<h1 id="parting-words">Parting words</h1>
<p>Test case reduction is a simple and mechanical process for rust crates.</p>
<ul>
<li>Simple compiler bugs are a thing for <strong>rust</strong> as well as <strong>C++</strong></li>
<li><strong>gdb</strong> renders meaningful stack frames for rust crashes.</li>
<li>“pub” -&gt; “pub(crate)” substitution is surprisingly effective for
test minimization.</li>
<li><strong>cargo test --doc --release</strong> should be more consistent with <strong>-O</strong>
optmisation flags to make error less unique to <strong>rustdoc</strong>.</li>
<li><strong>cargo fix</strong> does not delete unused functions :)</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on February  8, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Minor atl1c kernel driver bug</title>
    <link href="http://trofi.github.io/posts/235-minor-atl1c-kernel-driver-bug.html" />
    <id>http://trofi.github.io/posts/235-minor-atl1c-kernel-driver-bug.html</id>
    <published>2022-01-22T00:00:00Z</published>
    <updated>2022-01-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This weekend I converted my last physical non-NixOS machine to NixOS.
I was postponing it for a while as it’s an internet facing machine that
was installed in 2009. I’d prefer smaller downtime if reasonably
possible. It does not have that many serices: <strong>sshd</strong>, <strong>https</strong>
serving a few static files, <strong>IPv6</strong> tunnel and a local CI builder.</p>
<p>This device has 1Gbit ethernet card supported by <strong>atl1c</strong> linux kernel
driver. It always functioned without any problems for me. But one minor
thing always bothered me: on a high network load <strong>top</strong> output shown
kernel threads with suspicious <strong>%d</strong> names:</p>
<pre class><code># ping -f 172.16.0.1  # from remove host
$ top  # atl1c host
...
621 root 20 0 0 0 0 S 11.0 0.0 0:05.01 napi/eth%d-385
622 root 20 0 0 0 0 S  5.6 0.0 0:02.64 napi/eth%d-386</code></pre>
<p>These look like unsubstituted format strings.</p>
<p>I spent some time in <strong>linux.git</strong> and got nowhere. After that I reported
bug to <a href="https://lore.kernel.org/netdev/YewoxYh2jNBnanUM@lunn.ch/T/">netdev@ ML</a>
and instantly got the patch from Andrew to try:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/drivers/net/ethernet/atheros/atl1c/atl1c_main.c</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/drivers/net/ethernet/atheros/atl1c/atl1c_main.c</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -2706,6 +2706,15 @@ static int atl1c_probe(struct pci_dev *pdev, const struct pci_device_id *ent)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        goto err_alloc_etherdev;</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="va">+	if (rtnl_lock_killable()) {</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="va">+		err = -EINTR;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="va">+		goto err_init_netdev;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="va">+	}</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="va">+	err = dev_alloc_name(netdev, netdev-&gt;name);</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="va">+	rtnl_unlock();</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="va">+	if (err &lt; 0)</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="va">+		goto err_init_netdev;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    err = atl1c_init_netdev(netdev, pdev);</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    if (err) {</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        dev_err(&amp;pdev-&gt;dev, &quot;init netdevice failed\n&quot;);</span></code></pre></div>
<h1 id="nixos-kernel-patching-nano-howto">NixOS kernel patching nano howto</h1>
<p>What is the simplest way to try it out on a live system?</p>
<p>I gave <a href="https://nixos.wiki/wiki/Linux_kernel#Custom_configuration">boot.kernelPatches</a>
mechanism a try:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># in /etc/nixos/configuration.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">boot</span>.<span class="va">kernelPatches</span> = [</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    ({ <span class="va">name</span> = &quot;<span class="va">atl1c-netdev</span>&quot;; <span class="va">patch</span> = ./<span class="va">atl1c-netdev</span>.<span class="va">patch</span>; <span class="op">}</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  ];</span></code></pre></div>
<p>This change applies extra local patche to current kernel. Building
patched kernel for the next boot:</p>
<pre class><code># nixos-rebuild boot
...
# systemctl reboot</code></pre>
<p>Checking thread names after reboot:</p>
<pre class><code># ping -f 172.16.0.1  # from remove host
$ top  # atl1c host
...
613 root 20 0 0 0 0 S 11.0 0.0 0:07.46 napi/eth0-385
614 root 20 0 0 0 0 R  5.3 0.0 0:03.96 napi/eth0-386</code></pre>
<p>The patch made things better!</p>
<h1 id="testing-in-a-vm-before-giving-it-a-go-on-real-device">Testing in a VM before giving it a go on real device</h1>
<p>It’s not very useful for this specific case as we are testing changes to
a hardware driver without emulation available. But for many other kernel
changes before booting into a brand new kernel we could use <strong>qemu</strong> to
have a smoke test for new functionality.</p>
<p>I do it all the time when I poke at kernel’s VM subsystem.</p>
<p>You can even boot up your full system up to desktop environment:</p>
<pre class><code>$ nixos-rebuild build-vm
...
Done.  The virtual machine can be started by running /nix/store/bnl5jjic2rpbxc8p7y92znyzzp1xz59i-nixos-vm/bin/run-nz-vm
$ /nix/store/bnl5jjic2rpbxc8p7y92znyzzp1xz59i-nixos-vm/bin/run-nz-vm</code></pre>
<p>On my desktop this boots up my <strong>i3</strong> desktop in a second. After a session
shutdown disk image takes only <strong>8MB</strong> of space:</p>
<pre class><code>$ ls -lh
total 8.5M
-rw-r--r-- 1 slyfox users 8.5M Jan 22 20:24 nz.qcow2
lrwxrwxrwx 1 slyfox users   52 Jan 22 20:22 result -&gt; /nix/store/bnl5jjic2rpbxc8p7y92znyzzp1xz59i-nixos-vm</code></pre>
<p>It was instructive for me to have a peek at what the <strong>run-nz-vm</strong> script actually does:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">#! /nix/store/pbfraw351mksnkp2ni9c4rkc9cpp89iv-bash-5.1-p12/bin/bash</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="va">NIX_DISK_IMAGE</span><span class="op">=</span><span class="va">$(</span><span class="fu">readlink</span> <span class="at">-f</span> <span class="st">&quot;</span><span class="va">${NIX_DISK_IMAGE</span><span class="op">:-</span>./nz.qcow2<span class="va">}</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="ot">! </span><span class="bu">test</span> <span class="at">-e</span> <span class="st">&quot;</span><span class="va">$NIX_DISK_IMAGE</span><span class="st">&quot;</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="ex">/nix/store/k48rmda1r7is6v2n0jdpfmaax74l8lbq-qemu-host-cpu-only-6.1.0/bin/qemu-img</span> create <span class="at">-f</span> qcow2 <span class="st">&quot;</span><span class="va">$NIX_DISK_IMAGE</span><span class="st">&quot;</span> <span class="dt">\</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>       1024M</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Create a directory for storing temporary data of the running VM.</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">&quot;</span> <span class="bu">]</span> <span class="kw">||</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$USE_TMPDIR</span><span class="st">&quot;</span> <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">TMPDIR</span><span class="op">=</span><span class="va">$(</span><span class="fu">mktemp</span> <span class="at">-d</span> nix-vm.XXXXXXXXXX <span class="at">--tmpdir</span><span class="va">)</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Create a directory for exchanging data with the VM.</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> <span class="at">-p</span> <span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">/xchg&quot;</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">&quot;</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Start QEMU.</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="bu">exec</span> /nix/store/k48rmda1r7is6v2n0jdpfmaax74l8lbq-qemu-host-cpu-only-6.1.0/bin/qemu-kvm <span class="at">-cpu</span> qemu64 <span class="dt">\</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>    <span class="at">-name</span> nz <span class="dt">\</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    <span class="at">-m</span> 1024 <span class="dt">\</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>    <span class="at">-smp</span> 1 <span class="dt">\</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>    <span class="at">-device</span> virtio-rng-pci <span class="dt">\</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>    <span class="at">-net</span> nic,netdev=user.0,model=virtio <span class="at">-netdev</span> user,id=user.0,<span class="st">&quot;</span><span class="va">$QEMU_NET_OPTS</span><span class="st">&quot;</span> <span class="dt">\</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>    <span class="at">-virtfs</span> local,path=/nix/store,security_model=none,mount_tag=nix-store <span class="dt">\</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>    <span class="at">-virtfs</span> local,path=<span class="st">&quot;</span><span class="va">${SHARED_DIR</span><span class="op">:-</span><span class="va">$TMPDIR</span>/xchg<span class="va">}</span><span class="st">&quot;</span>,security_model=none,mount_tag=shared <span class="dt">\</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    <span class="at">-virtfs</span> local,path=<span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">&quot;</span>/xchg,security_model=none,mount_tag=xchg <span class="dt">\</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>    <span class="at">-drive</span> cache=writeback,file=<span class="st">&quot;</span><span class="va">$NIX_DISK_IMAGE</span><span class="st">&quot;</span>,id=drive1,if=none,index=1,werror=report <span class="at">-device</span> virtio-blk-pci,drive=drive1 <span class="dt">\</span></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>    <span class="at">-device</span> virtio-keyboard <span class="dt">\</span></span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>    <span class="at">-usb</span> <span class="dt">\</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    <span class="at">-device</span> usb-tablet,bus=usb-bus.0 <span class="dt">\</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>    <span class="at">-kernel</span> /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/kernel <span class="dt">\</span></span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>    <span class="at">-initrd</span> /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd <span class="dt">\</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>    <span class="at">-append</span> <span class="st">&quot;</span><span class="va">$(</span><span class="fu">cat</span> /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/kernel-params<span class="va">)</span><span class="st"> init=/nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/init regInfo=/nix/store/n3phlr6zmr84gfmm03pq9hfi8p1i51qy-closure-info/registration console=ttyS0,115200n8 console=tty0 </span><span class="va">$QEMU_KERNEL_PARAMS</span><span class="st">&quot;</span> <span class="dt">\</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>    <span class="va">$QEMU_OPTS</span> <span class="dt">\</span></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span></code></pre></div>
<p>Here the script creates <strong>nz.qcow2</strong> disk in <strong>qcow2</strong> format of <strong>1GB</strong>
size max. But even that space is not populated! The whole of <strong>/nix/store</strong>
gets exported via <strong>virtfs</strong> which allows not to copy most of packages into
a VM at all! Do we even have a root device here?</p>
<p>Let’s peek at <strong>initrd</strong> contents. How does it make the magic happen?</p>
<pre class><code>$ cat /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd | file -
/dev/stdin: Zstandard compressed data (v0.8+), Dictionary ID: None
$ cat /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd | zstd -d | file -
/dev/stdin: ASCII cpio archive (SVR4 with no CRC)
$ mkdir initramfs &amp;&amp; cd initramfs
$ cat /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd | zstd -d | cpio -id --no-preserve-owner
$ ls
dev  etc  init  nix  proc  sys
$ find nix/store/ -maxdepth 1
nix/store/
nix/store/...-mdadm.conf
nix/store/...-libunistring-0.9.10
nix/store/...-pcre-8.45
nix/store/...-mounts.sh
nix/store/...-glibc-2.33-59
nix/store/...-acl-2.3.1
nix/store/...-udev-rules
nix/store/...-linux-5.16-modules-shrunk
nix/store/...-stage-1-init.sh
nix/store/...-gnugrep-3.7
nix/store/...-extra-utils
nix/store/...-libidn2-2.3.2
nix/store/...-findutils-4.8.0
nix/store/...-kmod-debian-aliases-22-1.1.conf
nix/store/...-keymap
nix/store/...-link-units
nix/store/...-attr-2.5.1
nix/store/...-initrd-fsinfo
nix/store/...-coreutils-9.0
nix/store/...-initrd-kmod-blacklist-ubuntu</code></pre>
<p>Here we see that <strong>initramfs</strong> already has a bit (actually, <strong>40MB</strong> due
to glibc) of <strong>/nix/store</strong> embedded in to support <strong>init</strong> top-level script.
<strong>init</strong> is a big but straightforward script. It does a few things:</p>
<ul>
<li>formats <strong>/dev/vda</strong> if filesystem is absent and places minimal
root NixOS directory structure on it.</li>
<li>mounts root device into <strong>$target</strong> (it suports discovery of ISO, standard NixOS,
conversions from other distibutions, aka “lustrations”). One of the steps
here is to mount passed in virtfs as a <strong>$target/nix/store</strong>. And make it writeble
by overlaying <strong>tmpfs</strong> on top. For live ISO images this allows you to upgrade
live image im-memory before installing it on disk.</li>
<li>switches root to a new target</li>
</ul>
<p>We can also boot <strong>qemu</strong> VM in text mode to ease copying terminal
output and poke at just created root:</p>
<pre class><code>$ ./result/bin/run-nz-vm -nographic
...
&lt;&lt;&lt; Welcome to NixOS 22.05pre346004.5aaed40d22f (x86_64) - ttyS0 &gt;&gt;&gt;
Run 'nixos-help' for the NixOS manual.
login: foo (automatic login)
$ mkdir /tmp/r
$ sudo mount --bind / /tmp/r
$ find /tmp/r/
/tmp/r/
/tmp/r/proc
/tmp/r/dev
/tmp/r/etc
/tmp/r/etc/.clean
/tmp/r/etc/binfmt.d
/tmp/r/etc/binfmt.d/nixos.conf
/tmp/r/etc/nscd.conf
/tmp/r/etc/ssh
...</code></pre>
<p>If you plan to work on boot loader changes you can build a VM with boot loader as
<strong>nixos-rebuild build-vm-with-bootloader</strong>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on January 22, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>seekwatcher 0.14</title>
    <link href="http://trofi.github.io/posts/234-seekwatcher-0.14.html" />
    <id>http://trofi.github.io/posts/234-seekwatcher-0.14.html</id>
    <published>2022-01-17T00:00:00Z</published>
    <updated>2022-01-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>About 10 years ago I <a href="http://trofi.github.io/posts/169-seekwatcher.html">tried</a> <strong>seekwatcher</strong>
for the first time (unfortunately past videos and pictures did not survive host
migrations). There I explored slowness of <strong>btrfs</strong> on my spinning drive and
concluded IO was seek-bound.</p>
<p>Believe it or not <strong>seekwatcher</strong> code did not change at all since then. It was
abandoned upstream in favour of <strong>iowatcher</strong>: <a href="http://masoncoding.com/iowatcher/">http://masoncoding.com/iowatcher/</a>.
I never knew there was a replacement and kept tweaking <strong>seekwatcher</strong> for minor
failures like <strong>dash</strong> incompatibilities. Eventually (8 years later) I released
the result as <strong>0.13</strong>. Looking at it 2 years later effectively nobody uses <strong>0.13</strong>:
<a href="https://repology.org/project/seekwatcher/versions">https://repology.org/project/seekwatcher/versions</a>. This is fine. Most distributions
effectively abandoned <strong>seekwatcher</strong> or never had it packages in the first place.
I myself did not have a reason to use it for years and did not notice it’s build
broke again.</p>
<p>I spent this weekend to refurbish it a bit. The result is a new
<a href="https://github.com/trofi/seekwatcher/releases/tag/v0.14">0.14 release</a>! It should
be able to run on modern Python 3.10 (and something less modern as well).</p>
<p>As a demo today’s video and picture will be a read-only workload for <strong>btrfs scrub</strong>
against a 35% filled root SSD partition for my desktop:</p>
<pre class><code>$ seekwatcher -t scrub.trace -p 'echo 3 &gt; /proc/sys/vm/drop_caches; sync; btrfs scrub start -B /' -d /dev/nvme0n1p3
$ seekwatcher -t scrub.trace -o scrub.ogg --movie
$ seekwatcher -t scrub.trace -o scrub.png</code></pre>
<p>The output of the above commands is also instructive:</p>
<pre class><code>blktrace -d /dev/nvme0n1p3 -o scrub.trace -D . -a queue -a complete -a issue
running :echo 3 &gt; /proc/sys/vm/drop_caches; sync; btrfs scrub start -B /:
scrub done for 6b160f29-1dbb-4020-a36d-c233f1dffaf6
Scrub started:    Mon Jan 17 07:52:29 2022
Status:           finished
Duration:         0:01:08
Total to scrub:   404.02GiB
Rate:             2.17GiB/s
Error summary:    no errors found
done running echo 3 &gt; /proc/sys/vm/drop_caches; sync; btrfs scrub start -B /
=== nvme0n1p3 ===
  CPU  0:               876508 events,    41087 KiB data
  CPU  1:               693423 events,    32505 KiB data
  CPU  2:               537656 events,    25203 KiB data
  CPU  3:               592174 events,    27759 KiB data
  CPU  4:               511254 events,    23966 KiB data
  CPU  5:               495733 events,    23238 KiB data
  CPU  6:               503972 events,    23624 KiB data
  CPU  7:               593066 events,    27800 KiB data
  CPU  8:               783384 events,    36722 KiB data
  CPU  9:               626492 events,    29367 KiB data
  CPU 10:               938655 events,    44000 KiB data
  CPU 11:               815019 events,    38205 KiB data
  CPU 12:               765571 events,    35887 KiB data
  CPU 13:               603239 events,    28277 KiB data
  CPU 14:               813953 events,    38155 KiB data
  CPU 15:               686623 events,    32186 KiB data
  Total:              10836722 events (dropped 0),   507972 KiB data
blktrace done

using tracefile ./scrub.trace
saving graph to trace.png
using tracefile ./scrub.trace
total frames is 300 secs per frame = 0.23

start 0.00 secs end 0.23 secs frame 0
start 0.23 secs end 0.46 secs frame 1
start 0.46 secs end 0.68 secs frame 2
start 0.68 secs end 0.91 secs frame 3
start 0.91 secs end 1.14 secs frame 4
...
MEncoder 1.4-10.3.0 (C) 2000-2019 MPlayer Team
...</code></pre>
<p>Note that <strong>seekwatcher</strong> is a wrapper around <strong>blktrace</strong> and <strong>mencoder</strong>:
it’s main job is to build a 30-second clip off any data by donwsampling things.</p>
<p>Here is the result of the above commands:</p>
<ul>
<li><a href="http://trofi.github.io/posts.data/234-seekwatcher/scrub.png">image</a> (143K)</li>
<li><a href="http://trofi.github.io/posts.data/234-seekwatcher/scrub.ogv">video</a> (700K)</li>
</ul>
<p>The average read speed is 2.2GB/s with 17K IO/s of them seeks are 2.5K/s.</p>
<p>The equivalent <strong>iowatcher</strong> commands should look identical.</p>
<p>That’s it!</p>

<div class="info">
    Posted on January 17, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>ncurses update journey</title>
    <link href="http://trofi.github.io/posts/233-ncurses-update-journey.html" />
    <id>http://trofi.github.io/posts/233-ncurses-update-journey.html</id>
    <published>2022-01-03T00:00:00Z</published>
    <updated>2022-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few months ago I decided to upgrade a few packages in <strong>nixpkgs</strong> to
the latest available versions upstream. Some packages like <strong>gzip</strong>,
<strong>grep</strong>, <strong>texinfo</strong>, <strong>linuxHeaders</strong> or <strong>terminus_font</strong> were
straightforward to handle. Most of them required 1-2 (or none) reverse
dependencies to fix. Sometimes upstream already had available fixes to pull.</p>
<h1 id="ncurses-breakage">ncurses breakage</h1>
<p>But one surprising package was <strong>ncurses</strong>: upstream had <strong>6.3</strong> version
released for a while while <strong>nixpkgs</strong> had <strong>6.2</strong>. Should be trivial to
update I thought. Probably just a bunch of new terminals added into <strong>terminfo</strong>.</p>
<p>I updated <strong>ncurses</strong> locally and instantly got a few build failures. Most
of those looked similar to the following <strong>mtr</strong> failure:</p>
<pre class><code>ui/curses.c:765:42:
  error: format not a string literal and no format arguments [-Werror=format-security]
  765 |         mvprintw(rowstat - 1, startstat, msg);
      |                                          ^~~</code></pre>
<p>The build error popped up because new release of <strong>ncurses</strong> enabled
<strong>printf</strong>-like annotations to a few it’s frequently used functions:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/include/curses.h.in</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/include/curses.h.in</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -559,7 +557,7 @@</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a> #ifndef GCC_PRINTFLIKE</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">-#if defined(GCC_PRINTF) &amp;&amp; !defined(printf)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="va">+#ifndef printf</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a> #define GCC_PRINTFLIKE(fmt,var) __attribute__((format(printf,fmt,var)))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a> #else</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a> #define GCC_PRINTFLIKE(fmt,var) /*nothing*/</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -822,2 +816,4 @@</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="st">-extern NCURSES_EXPORT(int) vwprintw (WINDOW *, const char *,va_list) GCC_DEPRECATED(use vw_printw);    /* implemented */</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="st">-extern NCURSES_EXPORT(int) vw_printw (WINDOW *, const char *,va_list); /* implemented */</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="va">+extern NCURSES_EXPORT(int) vwprintw (WINDOW *, const char *, va_list) GCC_DEPRECATED(use vw_printw)    /* implemented */</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="va">+               GCC_PRINTFLIKE(2,0);</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="va">+extern NCURSES_EXPORT(int) vw_printw (WINDOW *, const char *, va_list) /* implemented */</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="va">+               GCC_PRINTFLIKE(2,0);</span></span></code></pre></div>
<p>This change enables <strong>GCC_PRINTF</strong> by default and adds extra annotations
to <strong>vwprintw</strong> and friends. I think <strong>mtr</strong> was broken by <strong>GCC_PRINTF</strong>
default change.</p>
<p>The package fixes are usually trivial. <strong>mtr</strong> one looks like
<a href="https://github.com/traviscross/mtr/pull/411">https://github.com/traviscross/mtr/pull/411</a>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/ui/curses.c</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/ui/curses.c</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -675,1 +675,1 @@</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="st">-                mvprintw(rowstat - 1, startstat, msg);</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="va">+                mvprintw(rowstat - 1, startstat, &quot;%s&quot;, msg);</span></span></code></pre></div>
<h1 id="does-error-flag-a-real-problem">Does error flag a real problem?</h1>
<p>Is this kind of build errors a big deal or just a nuisance? After all
all these programs probably work just fine if nobody noticed the infelicity.</p>
<p>Let’s craft a small example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $cat a.c</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(GCC_PRINTF)</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#    define GCC_PRINTFLIKE(fmt,var) __attribute__((format(printf,fmt,var)))</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#    define GCC_PRINTFLIKE(fmt,var) </span><span class="co">/* nope */</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> just_like_printf<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> fmt<span class="op">,</span> <span class="op">...)</span> GCC_PRINTFLIKE<span class="op">(</span><span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">);</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> just_like_printf<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> fmt<span class="op">,</span> <span class="op">...)</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">va_list</span> ap<span class="op">;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    va_start<span class="op">(</span>ap<span class="op">,</span> fmt<span class="op">);</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    va_end<span class="op">(</span>ap<span class="op">);</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    just_like_printf<span class="op">(</span>argv<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre class><code>$ gcc a.c -o a -Wall
$ ./a
./a</code></pre>
<p>Here we just print program’s name as is via <strong>printf(argv[0])</strong>.
Does not look too bad, right?</p>
<p>No. Uncontrolled format strings allow for arbitrary memory access.</p>
<p>We can read register and stack values (needs a tiny bit of platform
<strong>ABI</strong> knowledge):</p>
<pre class><code>$ ln -s a '%#lx%#lx%#lx%#lx%#lx%#lx%#lx%#lx'
$ ./%#lx%#lx%#lx%#lx%#lx%#lx%#lx%#lx
./0x7ffcc15c01c80x7ffcc15c01d80x7fe1dbea759800x7fe1dbea97e00x7ffcc15c01c80x1000000000x401200</code></pre>
<p>And if we are creative we can also write chosen data at addresses in
registers or stack:</p>
<pre class><code>$ ln -s a '%n%n%n%n%n%n%n%n%n%n'
$ ./%n%n%n%n%n%n%n%n%n%n
Segmentation fault (core dumped)</code></pre>
<p><strong>suid</strong> CLI tools are especially vulnerable as commandline
arguments and environment also reside on stack. We can store
“any” address there just by running the tool with extra
environment variables.</p>
<p><strong>sudo</strong> had a similiar vulnerability in the past that allows
arbitrary code execution: <a href="https://www.vnsecurity.net/research/2012/02/16/exploiting-sudo-format-string-vunerability.html">https://www.vnsecurity.net/research/2012/02/16/exploiting-sudo-format-string-vunerability.html</a></p>
<p>Mounting a shell exploit on modern systems is an exercise for the reader :)</p>
<p>Thus yes, passing uncontrolled text to <strong>printf()</strong>-like function is a
direct path to arbitrary code execution. In case of networking services
it’s an RCE. In case of CLI tools that interpret external input (say,
mp3 players or network packet visualisers) it can easily become
user-assisted RCE.</p>
<h1 id="wformat">-Wformat=</h1>
<p>This kind of bugs used to be a very common programming error until
compilers learned to catch it when asked:</p>
<pre class><code>$ gcc a.c -o a -Wall -DGCC_PRINTF -Wformat=2
a.c: In function 'main':
a.c:25:5: warning: format not a string literal and no format arguments [-Wformat-security]
   25 |     just_like_printf(argv[0]);
      |     ^~~~~~~~~~~~~~~~</code></pre>
<p>Note that by default it’s just a warning that you need to opt into with
<strong>-Wformat=2</strong>. Many distributions enable <strong>-Wformat=2</strong> by default either
in toolchain directly or in package build process.</p>
<p>For quite a while <strong>nixpkgs</strong> enables <strong>-Werror=format-security</strong> by
default which turns warnings on suspicious code into errors:</p>
<pre class><code>$ gcc a.c -o a -Wall -DGCC_PRINTF -Werror=format-security
a.c: In function 'main':
a.c:25:5: error: format not a string literal and no format arguments [-Werror=format-security]
   25 |     just_like_printf(argv[0]);
      |     ^~~~~~~~~~~~~~~~
cc1: some warnings being treated as errors</code></pre>
<p>Package maintainers usually weed out all these problems when they add a
new package version to the distribution.</p>
<p>But case of <strong>ncurses</strong> is a bit special: it’s a very popular decades
old library with many users. For dacedes there were plenty chances
of using it’s interfaces in an unsafe manner.</p>
<h1 id="fixing-all-the-failures">Fixing all the failures</h1>
<p>Given that <strong>mtr</strong> had this deficiency how many more tools would be broken
like that? I hoped for “under 10” and started fixing packages one by one.</p>
<p>After fixing 40 packages (<strong>mtr</strong>, <strong>libcdio</strong>, <strong>aewan</strong>, <strong>tty-solitaire</strong>,
<strong>bastet</strong>, <strong>mcabber</strong>, <strong>bwm_ng</strong>, <strong>toxic</strong>, <strong>nudoku</strong>, <strong>ecasound</strong>,
<strong>bemenu</strong>, <strong>tasknc</strong>, <strong>smemstat</strong>, <strong>freesweep</strong>, <strong>gfs2-utils</strong>, <strong>gmu</strong>,
<strong>hexcurse</strong>, <strong>irqbalance</strong>, <strong>hstr</strong>, <strong>pinfo</strong>, <strong>lifelines</strong>, <strong>tty-clock</strong>,
<strong>nethogs</strong>, <strong>host</strong>, <strong>jnettop</strong>, <strong>mp3blaster</strong>, <strong>multitail</strong>, <strong>musikcube</strong>,
<strong>ncdc</strong>, <strong>pacvim</strong>, <strong>powertop</strong>, <strong>profanity</strong>, <strong>sngrep</strong>, <strong>tiptop</strong>,
<strong>trafficserver</strong>, <strong>vimpc</strong>, <strong>wiimms-iso-tools</strong>, <strong>souffle</strong>)
I realized I would not be able to find (or fix) all the breakages myself and would
need help.</p>
<p>Having asked around I found out I could get a <strong>hydra</strong> build run against a
<a href="https://github.com/NixOS/nixpkgs/pull/146685">https://github.com/NixOS/nixpkgs/pull/146685</a> pull request. I requested a run
on <strong>#infra:nixos.org</strong> matrix room.</p>
<p>Vladimir suggested basing the PR against <strong>master</strong> commit with already present
<strong>hydra</strong> run. That way <strong>hydra</strong> UI would allow for easy regression comparison
via “compare-to” drop down. First run (targeted <strong>x86_64-linux</strong> only) took ~5
days: 1 to 6 Dec. It was a full rebuild of all packages as <strong>ncurses</strong> is a
<strong>bash</strong> dependency via <strong>readline</strong>. 5 days felt as very quick given that this
run had low priority against other preempting jobs: builds of <strong>master</strong> itself
and builds of <strong>staging-next</strong>.</p>
<p>The initial run looked promising: <a href="https://hydra.nixos.org/eval/1727143?compare=1727080&amp;full=0">https://hydra.nixos.org/eval/1727143?compare=1727080&amp;full=0</a>.</p>
<p>It reported “Newly Failing Jobs (94)”. Some of these were unrelated flaky failures
but ~10 of them were more <strong>ncurses</strong> fallouts that I missed from local runs:
<strong>postgresqlPackages.pg_auto_failover</strong>, <strong>rogue</strong>, <strong>wyrd</strong>, <strong>squishyball</strong>,
<strong>haskellPackages.ncurses</strong>, <strong>liboping</strong>, <strong>linuxPackages.sysdig</strong>, <strong>tcptrack</strong>,
<strong>pamix</strong>, <strong>tlf</strong>. Fixing them was straightforward.</p>
<p>While hydra was running through packages I fixed ~10 more:
<strong>_2048-in-terminal</strong>, <strong>liboping</strong>, <strong>noice</strong>, <strong>samtools</strong>,
<strong>libviper</strong>, <strong>vwm</strong>, <strong>gptfdisk</strong>, <strong>spdk</strong>, <strong>nfstrace</strong>.</p>
<p>I hope to get <strong>ncurses-6.3</strong> merged within first days of 2022 \o/</p>
<h1 id="does-it-scale">Does it scale?</h1>
<p>Fixing 60 packages took 2 months. Usually it takes sending a fix
upstream, proposing a pull request to <strong>nixpkgs</strong> and following
up both down to acceptance :)</p>
<p>That gives us one fix per day on average.</p>
<p>I have a vague plan of trying to get <strong>gcc-10</strong> updated to <strong>gcc-11</strong>.
That has order of magnitude more failures lurking. <strong>gcc-12</strong> has even
more surprises pending. I won’t be able to fix or even report all the
failures and will need more scalable plan.</p>
<h1 id="tldr">Tl;DR</h1>
<ul>
<li><strong>__attribute__((format(…)))</strong> with <strong>-Wformat=…</strong> is still
a good way to catch trivial format string vulnerabilities.</li>
<li>While disruptive it’s still useful to add format attributes to
<strong>printf()</strong>-like library APIs.</li>
<li>There were ~60 packages to fix after <strong>ncurses</strong> update.</li>
<li>It takes about 5 days to build all of <strong>x86_64-linux</strong> <strong>nixpkgs</strong>
on <strong>hydra</strong>.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on January  3, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>AoC in rust</title>
    <link href="http://trofi.github.io/posts/232-AoC-in-rust.html" />
    <id>http://trofi.github.io/posts/232-AoC-in-rust.html</id>
    <published>2021-12-25T00:00:00Z</published>
    <updated>2021-12-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="tldr">Tl;DR</h1>
<p>For me <strong>rust</strong> was pleasant to write small code snippets like AoC
solutions. Rust has a decent REPL in form of <strong>evcxr</strong>.</p>
<h1 id="story-mode">Story mode</h1>
<p>Following Bill’s suggestion I gave <a href="https://adventofcode.com/">Advent of Code</a>
a try this year.</p>
<p>I did not know how much time it would take me. I hoped it would not be
more than 30 minutes per morning for each of the problems. It was true
for most problems, but some took a lot more than that.</p>
<h2 id="haskell">haskell</h2>
<p>Problems 1 to 7 I solved in haskell as I’m most familiar with it compared
to other languages when it comes to one liners and throw-away scripts.
Here is an example of solution for
<a href="https://adventofcode.com/2021/day/5">Problem 5 part 1</a> to get the feeling
of how I would write things:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS_GHC -Wall #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Control.Monad</span> <span class="kw">as</span> <span class="dt">CM</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Char</span> <span class="kw">as</span> <span class="dt">DC</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.List</span> <span class="kw">as</span> <span class="dt">DL</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">I</span> <span class="ot">=</span> <span class="dt">Integer</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">L</span> <span class="ot">=</span> <span class="dt">H</span> <span class="dt">I</span> <span class="dt">I</span> <span class="dt">I</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>       <span class="op">|</span> <span class="dt">V</span> <span class="dt">I</span> <span class="dt">I</span> <span class="dt">I</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>       <span class="op">|</span> <span class="dt">Unsupported</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ot">solve ::</span> [<span class="dt">L</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>solve <span class="ot">=</span> DL.genericLength</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> <span class="fu">filter</span> (\g <span class="ot">-&gt;</span> <span class="fu">length</span> g <span class="op">&gt;</span> <span class="dv">1</span>)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> DL.group</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> DL.sort</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> <span class="fu">concatMap</span> expand</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> expand (<span class="dt">H</span> y x1 x2) <span class="ot">=</span> [ (x,y) <span class="op">|</span> x <span class="ot">&lt;-</span> [x1<span class="op">..</span>x2]]</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>          expand (<span class="dt">V</span> x y1 y2) <span class="ot">=</span> [ (x,y) <span class="op">|</span> y <span class="ot">&lt;-</span> [y1<span class="op">..</span>y2]]</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>          expand <span class="dt">Unsupported</span> <span class="ot">=</span> []</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="ot">readInput ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">L</span>]</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>readInput inp <span class="ot">=</span> parseL <span class="op">&lt;$&gt;</span> <span class="fu">lines</span> inp</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> parseL s <span class="ot">=</span> norm ((x1, y1), (x2, y2))</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>              <span class="kw">where</span> [x1,y1,x2,y2] <span class="ot">=</span> <span class="fu">read</span> <span class="op">&lt;$&gt;</span> <span class="fu">words</span> (<span class="fu">map</span> (\c <span class="ot">-&gt;</span> <span class="kw">if</span> DC.isDigit c <span class="kw">then</span> c <span class="kw">else</span> <span class="ch">' '</span>) s)</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>          norm ((x1, y1), (x2, y2)) <span class="ot">=</span> <span class="kw">case</span> () <span class="kw">of</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">|</span> x1 <span class="op">==</span> x2 <span class="ot">-&gt;</span> <span class="dt">V</span> x1 (<span class="fu">min</span> y1 y2) (<span class="fu">max</span> y1 y2)</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">|</span> y1 <span class="op">==</span> y2 <span class="ot">-&gt;</span> <span class="dt">H</span> y1 (<span class="fu">min</span> x1 x2) (<span class="fu">max</span> x1 x2)</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>            <span class="co">-- _            -&gt; error $ &quot;Unexpected line: &quot; ++ show l</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>            _            <span class="ot">-&gt;</span> <span class="dt">Unsupported</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> CM.forM_ [<span class="st">&quot;example&quot;</span>, <span class="st">&quot;input&quot;</span>] <span class="op">$</span> \fn <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    f <span class="ot">&lt;-</span> <span class="fu">readFile</span> fn</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> inp <span class="ot">=</span> readInput f</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        ans <span class="ot">=</span> solve inp</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> (fn, ans)</span></code></pre></div>
<p>Error handling is virtually non-existent. Efficiency (list sorting
instead of using something like <strong>Data.Set</strong>) is probably crippled
in favour of smaller code length.</p>
<h2 id="rust">rust</h2>
<p>The 1-7 problems looked too simple and I gave <strong>rust</strong> a try starting
from problem 8.</p>
<p>My <strong>rust</strong> background is tiny: I read a few rust books before but never
tried writing anything more than a hello world. AoC set of challenges
looked like a good opportunity to get used to syntax and some basics of
it’s standard library.</p>
<p>Here is my solution for <a href="https://adventofcode.com/2021/day/8">Problem 8 part 1</a>
and my first “non-trivial” rust program:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::</span><span class="op">{*,</span> <span class="pp">fs::</span><span class="op">*,</span> <span class="pp">io::</span><span class="op">*};</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> get_input(input_file<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">&gt;&gt;</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r <span class="op">=</span> <span class="pp">BufReader::</span>new(<span class="pp">File::</span>open(input_file)<span class="op">.</span>unwrap())<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> r<span class="op">.</span>lines()<span class="op">.</span>map(<span class="op">|</span>l<span class="op">|</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        l<span class="op">.</span>unwrap()</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>split(<span class="ch">' '</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>map(<span class="op">|</span>s<span class="op">|</span> <span class="dt">String</span><span class="pp">::</span>from(s))</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>skip_while(<span class="op">|</span>e<span class="op">|</span> e <span class="op">!=</span> <span class="st">&quot;|&quot;</span>)<span class="op">.</span>skip(<span class="dv">1</span>)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>collect()</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    )<span class="op">.</span>collect()<span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> input_file <span class="kw">in</span> [<span class="st">&quot;example&quot;</span><span class="op">,</span> <span class="st">&quot;input&quot;</span>] <span class="op">{</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> input <span class="op">=</span> get_input(input_file)<span class="op">;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> ans <span class="op">=</span> input<span class="op">.</span>into_iter()</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>                       <span class="op">.</span>flatten()</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>                       <span class="op">.</span>filter(<span class="op">|</span>e<span class="op">|</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>                           [<span class="dv">2usize</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">,</span><span class="dv">7</span>]<span class="op">.</span>contains(<span class="op">&amp;</span>e<span class="op">.</span>len())</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>                       )</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>                       <span class="op">.</span>count()<span class="op">;</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        <span class="pp">println!</span>(<span class="st">&quot;{}: {}&quot;</span><span class="op">,</span> input_file<span class="op">,</span> ans)<span class="op">;</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Rust certainly has a feel of haskell at least when it comes to chaining
operations on sequences. It’s non-idiomatic in absent error handling,
inefficient in terms of excessive lifetimes for temporaries. But look
quite readable.</p>
<h2 id="rust-resources">rust resources</h2>
<p>To get more familiarity with the language I reread <a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
and used <a href="https://doc.rust-lang.org/std/index.html">https://doc.rust-lang.org/std/index.html</a> extensively to look up
useful helper in a standard library.</p>
<h2 id="rust-repl">rust REPL</h2>
<p>As a playground I was initially using <a href="https://godbolt.org/">https://godbolt.org/</a> and <strong>rustc</strong>
in the command line. But it was a bit tedious when it comes down to
exploration of simple operations. I needed a <strong>ghci</strong> equivalent
(a haskell REPL environment).</p>
<p>Looks like <strong>evcxr</strong> (<a href="https://github.com/google/evcxr/blob/main/evcxr_repl/README.md">https://github.com/google/evcxr/blob/main/evcxr_repl/README.md</a>)
is a popular <strong>rust</strong> REPL out there. Luckily <strong>nixpkgs</strong> providesit in
the standard repository:</p>
<pre class><code>$ nix run nixpkgs#evcxr
Welcome to evcxr. For help, type :help
&gt;&gt; 'a'.to_up&lt;TAB&gt;
&gt;&gt; 'a'.to_uppercase()
ToUppercase(One('A'))
&gt;&gt; String::from_iter('a'.to_uppercase())
       ^^^^^^^^^ function or associated item not found in `String`
no function or associated item named `from_iter` found for struct `String` in the current scope
help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:

use std::iter::FromIterator;
help: there is an associated function with a similar name

from_utf8
&gt;&gt; use std::iter::FromIterator;
&gt;&gt; String::from_iter('a'.to_uppercase())
&quot;A&quot;</code></pre>
<p>It supports type inspection for bound variables:</p>
<pre class><code>&gt;&gt; let v = [1,2,3];
&gt;&gt; :vars
v: [i32; 3]</code></pre>
<p>And even supports use of external crates:</p>
<pre class><code>&gt;&gt; :dep &quot;quickcheck&quot;
&gt;&gt; fn is_ok(b: bool)-&gt;bool { b }
&gt;&gt; quickcheck::quickcheck(is_ok as fn(bool)-&gt;bool)
thread '&lt;unnamed&gt;' panicked at '[quickcheck] TEST FAILED. Arguments: (false)', .../quickcheck-1.0.3/src/tester.rs:165:28</code></pre>
<p>I spent a few hours poking at various containers, iterators and
available methods.</p>
<p>Prepared with these basics I managed to solve the rest of AoC challenges.</p>
<h2 id="nice-aoc-challenges">Nice AoC challenges</h2>
<p>Most AoC problems were straightforward and did not really pose a real challenge.</p>
<p>But some of them were not so simple. Here is my list of the nicest ones:</p>
<ul>
<li><a href="https://adventofcode.com/2021/day/14">Problem 14</a>: “Extended Polymerization”</li>
<li><a href="https://adventofcode.com/2021/day/19">Problem 19</a>: “Beacon Scanner”</li>
<li><a href="https://adventofcode.com/2021/day/23">Problem 23</a>: “Amphipod”</li>
<li><a href="https://adventofcode.com/2021/day/24">Problem 24</a>: “Arithmetic Logic Unit”</li>
</ul>
<p>“Extended Polymerization” is a susprisingly concise problem that managed to trick me
more than once. First, I did not notice exponential growth. Then it took me a while
to reformulate correctly it in a form suitable for dynamic programming solution.
And then I missed a few subtleties.</p>
<p>“Beacon Scanner” looked like a tedious problem, but it has many fun angles to explore.
For some reason on my input not all expected pairs in the solution had 12+ points
overlap. That wedged me for a day of debugging exploration of data.</p>
<p>“Amphipod” reminded me of a Norvig’s online AI class I took almost 10 years ago.
Second best problem of this year’s AoC I’d say.</p>
<p>“Arithmetic Logic Unit” is the only problem I managed to solve using pen and paper.
Best problem of this year’s AoC on my rating :) It has a few hidden layers that
transform a problem statement in leasantly surprising ways. It remindedme of
<a href="https://www.hacker.org">https://www.hacker.org</a> challenges. These are the best :)</p>
<h2 id="parting-words">Parting words</h2>
<p>While coding the solutions I made many mistakes like use-after-free, index
out-of-bounds and similar. Borrow checker errors are great at explaining
the lifetimes and sources of references. Integer overflow runtime checks
are also nice.</p>
<p>It feels like <strong>rust</strong> is very explicit about value moves and copies. It’s a
nice feeling of confidence where you create (potentially expensive) object
copies and when you can just cheaply move them around.</p>
<p>Compiler warnings are also superb: superfluous <strong>mut</strong> annotations, dead code,
even accidental camel case!</p>
<p>If you are thinking of trying <strong>rust</strong> but did not yet you certainly should.</p>
<ul>
<li><strong>rust</strong> is very friendly to newcomers like me</li>
<li><strong>evcxr</strong> is a nice REPL</li>
<li>AoC is cool!</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on December 25, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Trying out gcc-12</title>
    <link href="http://trofi.github.io/posts/231-trying-out-gcc-12.html" />
    <id>http://trofi.github.io/posts/231-trying-out-gcc-12.html</id>
    <published>2021-11-14T00:00:00Z</published>
    <updated>2021-11-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Having updated locally new <strong>NixOS</strong> system to <strong>gcc-11.2.0</strong> I decided
I’m familiar enough with <strong>NixOS</strong> to try yet unreleased <strong>gcc-12</strong> on
a main system.</p>
<p>Would it just work? That would be boring :)</p>
<p>First I added new <strong>gcc</strong> snapshot to <strong>nixpkgs</strong> locally. It was only a
matter of pulling in <strong>flex</strong> as a dependency (<strong>gcc</strong> does not provide
genrated lexers for snapshots, only does fore releases and release candidates):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- pkgs/development/compilers/gcc/11/default.nix       2021-10-27 07:15:23.996869137 +0100</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ pkgs/development/compilers/gcc/12/default.nix       2021-11-14 07:34:59.850516073 +0000</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -34,6 +34,9 @@</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a> , gnused ? null</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a> , cloog # unused; just for compat with gcc4, as we override the parameter on some places</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a> , buildPackages</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="va">+# snapshots don't have all the environment in front of them</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="va">+, flex</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a> }:</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a> # LTO needs libelf and zlib.</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -56,8 +59,9 @@</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a> with lib;</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a> with builtins;</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="st">-let majorVersion = &quot;11&quot;;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="st">-    version = &quot;${majorVersion}.2.0&quot;;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="va">+let majorVersion = &quot;12&quot;;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="va">+    version = &quot;${majorVersion}.0.0&quot;;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="va">+    snapDate = &quot;20211107&quot;;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>     inherit (stdenv) buildPlatform hostPlatform targetPlatform;</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -94,8 +102,8 @@</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>   builder = ../builder.sh;</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>   src = fetchurl {</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="st">-    url = &quot;mirror://gcc/releases/gcc-${version}/gcc-${version}.tar.xz&quot;;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;sha256-0I7cU2tUw3KhAQ/2YZ3SdMDxYDqkkhK6IPeqLNo2+os=&quot;;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="va">+    url = &quot;mirror://gcc/snapshots/${majorVersion}-${snapDate}/gcc-${majorVersion}-${snapDate}.tar.xz&quot;;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="va">+    sha256 = &quot;sha256-YrpYs8GHGjpxto8h7JZI3VJLZAn4aRekbCvx+e1WjII=&quot;;</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>   inherit patches;</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -161,7 +169,7 @@</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>     libcCross crossMingw;</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>   depsBuildBuild = [ buildPackages.stdenv.cc ];</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a><span class="st">-  nativeBuildInputs = [ texinfo which gettext ]</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a><span class="va">+  nativeBuildInputs = [ flex texinfo which gettext ]</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>     ++ (optional (perl != null) perl)</span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>     ++ (optional langAda gnatboot)</span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>;</span></code></pre></div>
<p>And a few more lines to set <strong>gcc-12</strong> as a default.</p>
<p>I attempted to rebuild packages in my system with <strong>nix build -f nixos system</strong>.</p>
<p>First failure was a mysterious early <strong>ed-1.17</strong> test failure. I updated
<strong>ed</strong> to <strong>1.18-pre3</strong> locally and that fixed the test. I made a mental note
to get back to it a bit later to find out what fixed the test.</p>
<p>Then there was a long list of minor failures related to standard library
header interdependencies where fix is a one-liner to add required header.
A few examples are:</p>
<ul>
<li>oggvideotools: <a href="https://sourceforge.net/p/oggvideotools/bugs/13/">https://sourceforge.net/p/oggvideotools/bugs/13/</a></li>
<li>libopenmpt: <a href="https://github.com/OpenMPT/openmpt/pull/8">https://github.com/OpenMPT/openmpt/pull/8</a></li>
<li>jfx</li>
</ul>
<p>This is the most typical breakage for compiler updates.</p>
<p>Then there were a few failures related to now forbidden <strong>std::string(NULL)</strong>
constructor. The fix is to use simpler <strong>std::string()</strong> constructor.
A few affected projects are:</p>
<ul>
<li>binutils: <a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=068a039b8bd7c7386bb0d88f0ae245b0fe4132e9">https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=068a039b8bd7c7386bb0d88f0ae245b0fe4132e9</a></li>
<li>nlohmann/json (bug only): <a href="https://github.com/nlohmann/json/issues/3138">https://github.com/nlohmann/json/issues/3138</a></li>
<li>ccache</li>
</ul>
<p>Then I noticed another change in ADL resolution, where <strong>operator&lt;&lt;</strong> was not
searched in current namespace if none of arguments are in current namespace.
<strong>clang</strong> had this behaviour for a while. Now <strong>gcc</strong> follows the lead.
Only one project is affected so far:</p>
<ul>
<li>source-highlighting: <a href="https://git.savannah.gnu.org/cgit/src-highlite.git/commit/?id=ab9fe5cb9b85c5afab94f2a7f4b6d7d473c14ee9">https://git.savannah.gnu.org/cgit/src-highlite.git/commit/?id=ab9fe5cb9b85c5afab94f2a7f4b6d7d473c14ee9</a></li>
</ul>
<p>After getting through this trivia I got an unusual build failure for <strong>libX11</strong>.
Here is a shorter example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> extract<span class="op">(</span><span class="dt">char</span><span class="op">*);</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> XReadBitmapFileData <span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> name_and_type<span class="op">[</span><span class="dv">255</span><span class="op">];</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        extract <span class="op">(</span>name_and_type<span class="op">);</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span> type <span class="op">=</span> strrchr <span class="op">(</span>name_and_type<span class="op">,</span> <span class="ch">'_'</span><span class="op">);</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>type<span class="op">)</span> type<span class="op">++;</span> <span class="cf">else</span> type <span class="op">=</span> name_and_type<span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>strcmp <span class="op">(</span><span class="st">&quot;hot&quot;</span><span class="op">,</span> type<span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>type<span class="op">--</span> <span class="op">==</span> name_and_type <span class="op">||</span> type<span class="op">--</span> <span class="op">==</span> name_and_type<span class="op">)</span> <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>strcmp <span class="op">(</span><span class="st">&quot;ax_hot&quot;</span><span class="op">,</span> type<span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It took me a while to wrap my head around what is being done here. And
after that while I still got it wrong :) (but not by too much).</p>
<p>Here is what <strong>gcc-12</strong> has to say about the code:</p>
<pre class><code># ok:
$ gcc-11.2.0 -Wall -Werror=array-bounds -fno-strict-aliasing -O2 -c bug.c -o bug.o
# bad:
$ gcc-12.0.0 -Wall -Werror=array-bounds -fno-strict-aliasing -O2 -c bug.c -o bug.o
bug.c: In function 'XReadBitmapFileData':
bug.c:10:48: error: array subscript -2 is outside array bounds of 'char[9223372036854775807]' [-Werror=array-bounds]
   10 |             if (type-- == name_and_type || type-- == name_and_type) continue;
      |                                            ~~~~^~
bug.c:4:14: note: at offset [0, 253] into object 'name_and_type' of size 255
    4 |         char name_and_type[255];
      |              ^~~~~~~~~~~~~
cc1: some warnings being treated as errors</code></pre>
<p>Note: it’s normally just a warning. But <strong>libX11</strong> explicitly uses
“-Werror=array-bounds” as part of it’s build system assuming this
warning can catch important problems.</p>
<p>The error makes no sense in tis case: a) there is no array dereference,
b) there should be no out-of-bounds pointers here.</p>
<p>I was also not sure if <strong>(type– == name_and_type || type– == name_and_type)</strong>
is a valid construct. I filed <a href="https://gcc.gnu.org/PR103215">https://gcc.gnu.org/PR103215</a>. There Andrew
explained that <strong>||</strong> is a sequence point and it has expected defined
behaviour. In hindsight it’s obvious as <strong>||</strong> is also a lazy evaluation
device.</p>
<p>Apparently this build failure is somewhat common. Same failure on
identical code is present in:</p>
<ul>
<li>libXmu</li>
<li>gdk-pixbuf</li>
</ul>
<p>Having sorted the above I returned to <strong>ed-1.17</strong> failure. I assumed it
was some ancient undefined behaviour in <strong>ed</strong> uncovered by new <strong>gcc</strong>
optimisations (like recent <strong>modref</strong> improvements). I looked at
the diff between <strong>ed-1.17</strong> and <strong>ed-1.18-pre3</strong> tarballs but found
nothing suspicious.</p>
<p><strong>ed</strong> is an old and short codebase. Instead of staring a lot at generated
assembly I decided to shrink it down to something I could easily understand
and possibly fix. In the hindsight it was a good decision.</p>
<p>After I arrived to a 2KB self-contained example of C code I still could
not see what exactly <strong>gcc-12</strong> does to it to make it fail.</p>
<p>I filed <a href="https://gcc.gnu.org/PR103202">https://gcc.gnu.org/PR103202</a> and Aldy instantly fixed very obscure
<strong>PHI</strong> importing order bug. From what I understand we used stale variable
names before a “rename” and used incorrect metadata attached to them
(like value ranges).</p>
<p>These kinds of bugs are very hard to extract from large projects. Even for
<strong>ed</strong> case it took me 3 evenings. On a positive side now I know <strong>ed</strong>’s
editor model :)</p>
<p>After getting <strong>ed</strong> fixed I encountered an (already fixed) ICE on
<strong>gperftools</strong>: <a href="https://gcc.gnu.org/PR103099">https://gcc.gnu.org/PR103099</a>.</p>
<p>Currently I can build almost all packages for my system with <strong>gcc-12</strong>.
I have a few local hacks too dirty to share, but they are mostly about
getting headers imported correctly and getting around too aggressive
warnings-as-errors in a few packages libe <strong>libjxl</strong>.</p>
<p>The only yet unsolved mystery is 4 newly failing tests on <strong>llvm-13</strong>
package. Somehow <strong>llvm</strong> generates FunctionLength=0 unwind information
for learly non-empty functions. I suspect (hope) it’s another <strong>gcc</strong> bug.
I’m trying to debug it right now. <strong>UPDATE:</strong> confirmed and extracted
example to illustrate <strong>gcc</strong> bug <a href="https://gcc.gnu.org/PR103266">https://gcc.gnu.org/PR103266</a></p>
<h1 id="fun-facts">Fun facts</h1>
<ul>
<li>It took me 2.5 months to get to gcc-from-git after switching the distribution :)</li>
<li>Not too much was broken for these past two months.</li>
<li>Most package failures are legitimate code bugs: missing includes, invalid or
tautological code.</li>
<li>Some failures against <strong>gcc-12</strong> are still good old compiler bugs :)</li>
<li>Package test on <strong>nixpkgs</strong> are great at catching real bugs.</li>
</ul>
<p>I think <strong>gcc-12</strong> is quite usable for early experiments.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November 14, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>

</feed>
