<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>trofi - All posts</title>
    <link href="http://trofi.github.io/feed/atom.xml" rel="self" />
    <link href="http://trofi.github.io" />
    <id>http://trofi.github.io/feed/atom.xml</id>
    <author>
        <name>Sergei Trofimovich</name>
        <email>slyich@gmail.com</email>
    </author>
    <updated>2022-12-18T00:00:00Z</updated>
    <entry>
    <title>Registered on mastodon</title>
    <link href="http://trofi.github.io/posts/270-registered-on-mastodon.html" />
    <id>http://trofi.github.io/posts/270-registered-on-mastodon.html</id>
    <published>2022-12-18T00:00:00Z</published>
    <updated>2022-12-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>PSA: I registered on <a href="https://en.wikipedia.org/wiki/Mastodon_(social_network)">Mastodon</a>
as <a href="https://fosstodon.org/@trofi"><span class="citation" data-cites="trofi">@trofi</span><span class="citation" data-cites="fosstodon.org">@fosstodon.org</span></a>.</p>
<p>I’ll occasionally post there minor factoids not worthy of a full
blog post. It will hopefully reduce load on your RSS feed.</p>

<div class="info">
    Posted on December 18, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>A dataflow gcc bug</title>
    <link href="http://trofi.github.io/posts/269-a-dataflow-gcc-bug.html" />
    <id>http://trofi.github.io/posts/269-a-dataflow-gcc-bug.html</id>
    <published>2022-12-10T00:00:00Z</published>
    <updated>2022-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Let’s look at a simpler <code>gcc</code> bug today:
<a href="https://gcc.gnu.org/PR107879">PR107879</a>. There <code>ffmpeg-4</code> started
failing it’s testsuite on <code>gcc-13</code> from this week’s master:</p>
<pre><code>$ ./tests/fate-run.sh fate-swr-resample-s16p-2626-8000 &quot;&quot; &quot;&quot; \
  &quot;ffmpeg&quot; 'ffmpeg -i tests/data/asynth-2626-1.wav \
  -af atrim=end_sample=10240,\
aresample=8000:internal_sample_fmt=s16p:exact_rational=0:linear_interp=0,\
aformat=s16p,\
aresample=2626:internal_sample_fmt=s16p:exact_rational=0:linear_interp=0 \
  -f wav -c:a pcm_s16le -' 'stddev' 'tests/data/asynth-2626-1.wav' '0.1' '1' '' '' '' '1393.36' '31512 - 20482' 's16' '' '' '' ''
...
FAIL fate-swr-resample-s16p-2626-8000</code></pre>
<h2 id="on-ffmpeg-structure">On ffmpeg structure</h2>
<p>While the prospect of debugging multimedia package might sound scary
<code>ffmpeg</code> is a lot simpler to explore than other complex projects like
<code>llvm</code> or <code>gcc</code>.</p>
<p><code>ffmpeg</code> can be viewed as a simple buffer-in / buffer-out stream codec
(just like <code>zlib</code> or <code>zstd</code>). It’s hard to come up with a new clever
algorithm. But debugging already written one is usually straightforward.</p>
<p>Individual bytes when they get from input to output are either copied as
is or get slightly transformed without too much state to be collected
along the way. The code is written to be not too slow which means there
are not many high level abstractions or deep memory indirections.</p>
<p>Then if it’s all so somple what could possible go wrong there then? Is
there even a place for <code>gcc</code> to find a crack to fall in? Let’s find out.</p>
<p>The only caveat is that for most algorithms use floating points all over
the place. That might make computations not bit-for-bit reproducible
even on different optimization levels.</p>
<p>The change in behaviour we see might not be the bug at all.</p>
<h2 id="extracting-minimized-example">Extracting minimized example</h2>
<p>The above <code>$ ./tests/fate-run.sh fate-swr-resample-s16p-2626-8000 ...</code>
command was failing consistently when built with <code>gcc-master</code> and was
succeeding when built with <code>gcc-12</code>. With help of
<code>#pragma GCC optimize(0)</code> I nailed the misclmpilation down to
<a href="https://github.com/FFmpeg/FFmpeg/blob/master/libswresample/resample.c">libswresample/resample.c</a>
file. <code>build_filter()</code> function produced different filters for good and
bad cases.</p>
<p>Once I extracted test inputs for <code>build_filter()</code> I managed to craft the
following self-contained example that exhibits the problem:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">,</span> noipa<span class="op">))</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">double</span> build_filter<span class="op">(</span><span class="dt">double</span> <span class="op">*</span> y<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">int</span> ph <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">double</span> vf <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> factor <span class="op">=</span> vf<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> x <span class="op">=</span> <span class="op">-</span> <span class="op">(</span><span class="dt">double</span><span class="op">)</span>ph <span class="op">*</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;z = %f</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> x<span class="op">);</span>   <span class="co">/* prints -0.0, ok */</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* This 'if / else' code should not affect calculation of 'ffm', but</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">       removing it does change things. */</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span>    <span class="co">/* should be 1.0 or .. */</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span> <span class="op">/</span> x<span class="op">;</span>       <span class="co">/* -inf? */</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;*y = %f</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">*</span>y<span class="op">);</span> <span class="co">/* printf 1.0, ok */</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> w <span class="op">=</span> <span class="fl">2.0</span> <span class="op">*</span> x <span class="op">/</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;w = %f</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> w<span class="op">);</span> <span class="co">/* prints -0.0, ok */</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> omww <span class="op">=</span> <span class="dv">1</span> <span class="op">-</span> w<span class="op">;</span>                  <span class="co">/* should be 1.0 */</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;omww = %f</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> omww<span class="op">);</span> <span class="co">/* printf 1.0, ok */</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> ffm <span class="op">=</span> <span class="op">(</span>omww <span class="op">&gt;</span> <span class="fl">0.0</span><span class="op">)</span> <span class="op">?</span> omww <span class="op">:</span> <span class="fl">0.0</span><span class="op">;</span> <span class="co">/* should be 1.0 */</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;ffm = %f</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> ffm<span class="op">);</span> <span class="co">/* printf 0.0 or 1.0, </span><span class="al">BUG</span><span class="co"> */</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ffm<span class="op">;</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> y <span class="op">=</span> <span class="fl">42.0</span><span class="op">;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> filter <span class="op">=</span> build_filter<span class="op">(&amp;</span>y<span class="op">);</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;f = %.20f; y = %.20f</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> filter<span class="op">,</span> y<span class="op">);</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Should be 1.0, sometimes returns 0.0. */</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">(</span>filter <span class="op">&gt;</span> <span class="fl">0.5</span><span class="op">)</span> <span class="op">?</span> <span class="st">&quot;OK&quot;</span> <span class="op">:</span> <span class="st">&quot;BUG&quot;</span><span class="op">);</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s a bit long but very straightforward: no loops, just one condition.</p>
<p>Here is the output difference in <code>-O0</code> / <code>-O1</code> comparison on
<code>gcc-master</code>:</p>
<pre><code># -O0, good:
$ gcc-HEAD/bin/gcc -O0 -lm a.c -o a -mfpmath=sse -fexcess-precision=standard -Wall -Wextra &amp;&amp; ./a
z = -0.000000
*y = 1.000000
w = -0.000000
omww = 1.000000
ffm = 1.000000
f = 1.00000000000000000000; y = 1.00000000000000000000
OK

# -O1, bad:
$ gcc-HEAD/bin/gcc -O1 -lm a.c -o a -mfpmath=sse -fexcess-precision=standard -Wall -Wextra &amp;&amp; ./a
z = -0.000000
*y = 1.000000
w = -0.000000
omww = 1.000000
ffm = 0.000000
f = 0.00000000000000000000; y = 1.00000000000000000000
BUG</code></pre>
<p>Note how <code>-O0</code> case computes correct <code>f = 1.0</code> and <code>-O1</code> computes
incorrect <code>f = 0.0</code>. There are no denormalized values. Just <code>0.0</code>,
<code>1.0</code> and <code>2.0</code>. All of them are representable perfectly in 32-bit
<code>float</code> or 64 <code>double</code> types. Thus the result should not be affected
by finer optimizations like fused-multiply-add which might observably
increase precision.</p>
<p>Let’s strip all the <code>printf()</code> calls off <code>build_filter()</code> to ease
inspection of <code>gcc</code> optimization process:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">,</span> noipa<span class="op">))</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">double</span> build_filter<span class="op">(</span><span class="dt">double</span> <span class="op">*</span> y<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">int</span> ph <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">double</span> vf <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> factor <span class="op">=</span> vf<span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> x <span class="op">=</span> <span class="op">-</span> <span class="op">(</span><span class="dt">double</span><span class="op">)</span>ph <span class="op">*</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* This 'if / else' code should not affect calculation of 'ffm', but</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">       removing it does change things. */</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span>    <span class="co">/* should be 1.0 or .. */</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span> <span class="op">/</span> x<span class="op">;</span>       <span class="co">/* -inf? */</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> w <span class="op">=</span> <span class="fl">2.0</span> <span class="op">*</span> x <span class="op">/</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> omww <span class="op">=</span> <span class="dv">1</span> <span class="op">-</span> w<span class="op">;</span>                  <span class="co">/* should be 1.0 */</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> ffm <span class="op">=</span> <span class="op">(</span>omww <span class="op">&gt;</span> <span class="fl">0.0</span><span class="op">)</span> <span class="op">?</span> omww <span class="op">:</span> <span class="fl">0.0</span><span class="op">;</span> <span class="co">/* should be 1.0 */</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ffm<span class="op">;</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> y <span class="op">=</span> <span class="fl">42.0</span><span class="op">;</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> filter <span class="op">=</span> build_filter<span class="op">(&amp;</span>y<span class="op">);</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;f = %.1f; y = %.1f</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> filter<span class="op">,</span> y<span class="op">);</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Should be 1.0, sometimes returns 0.0. */</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">(</span>filter <span class="op">&gt;</span> <span class="fl">0.5</span><span class="op">)</span> <span class="op">?</span> <span class="st">&quot;OK&quot;</span> <span class="op">:</span> <span class="st">&quot;BUG&quot;</span><span class="op">);</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The bug is still here:</p>
<pre><code># -O0, good:
$ gcc-HEAD/bin/gcc -O0 -lm b.c -o b &amp;&amp; ./b
f = 1.0; y = 1.0
OK

# -O1, bad:
$ gcc-HEAD/bin/gcc -O1 -lm b.c -o b &amp;&amp; ./b
f = 0.0; y = 1.0
BUG</code></pre>
<p>I had to use a bit fo <code>volatile</code> to prevent <code>gcc</code> from folding constants
early and eliminate the the bug condition.</p>
<p>Fun fact: this test case still fails on <code>gcc-master</code> while original
<code>ffmpef-4</code> test suite does not. Looks like some unrelated detail of
<code>gcc</code> changed to partially mask the bug. If I was not quick enough
to extract the reproducer it might take a bit more time to restore
the envieonment and get it.</p>
<h2 id="diving-into-iptimization-process">Diving into iptimization process</h2>
<p>As usual <code>-fdump-tree-all</code> is our friend to find out when suspicios
pass broke our program.</p>
<p><code>gcc-HEAD/bin/gcc -O1 -lm b.c -o b -fdump-tree-optimized-slim</code> shows the
following final state in <code>b.c.254t.optimized</code>:</p>
<pre><code>__attribute__((noipa, noinline, noclone, no_icf))
double build_filter (double * y)
{
  double omww;
  double w;
  double x;
  double factor;
  volatile double vf;
  volatile int ph;
  int ph.4_1;
  double _2;
  double _3;
  double _4;
  double _5;
  double iftmp.5_6;
  double _20;

  &lt;bb 2&gt; [local count: 1073741824]:
  ph ={v} 0;
  vf ={v} 1.0e+0;
  factor_11 ={v} vf;
  ph.4_1 ={v} ph;
  _2 = (double) ph.4_1;
  _3 = -_2;
  x_12 = _3 * factor_11;
  if (x_12 == 0.0)
    goto &lt;bb 5&gt;; [50.00%]
  else
    goto &lt;bb 3&gt;; [50.00%]

  &lt;bb 3&gt; [local count: 633507680]:
  _4 = 1.0e+0 / x_12;
  _5 = x_12 * 2.0e+0;
  w_16 = _5 / factor_11;
  omww_17 = 1.0e+0 - w_16;
  if (omww_17 &gt; 0.0)
    goto &lt;bb 4&gt;; [100.00%]
  else
    goto &lt;bb 5&gt;; [0.00%]

  &lt;bb 4&gt; [local count: 633507680]:

  &lt;bb 5&gt; [local count: 1073741824]:
  # iftmp.5_6 = PHI &lt;omww_17(4), 0.0(3), 0.0(2)&gt;
  # _20 = PHI &lt;_4(4), _4(3), 1.0e+0(2)&gt;
  *y_13(D) = _20;
  return iftmp.5_6;
}</code></pre>
<p>Can you spot the bug? It might be a bit hard to read. I can’t easily
follow it due to many branch conditions. I could vaguely see that this
example is incorrect, but tracing the dumps through each of ~100 <code>gcc</code>
passes would be too slow. I asked <code>gcc</code> to dump <code>graphviz</code> style outputs
with <code>-fdump-tree-optimized-graph</code>. <code>b.c.254t.optimized.dot</code> generates
the following picture:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.254t.optimized.svg" /></p>
<p>Arc legend here is the following:</p>
<ul>
<li>green color is <code>TRUE</code> case of branch in <code>if</code> condition.</li>
<li>orange color is <code>FALSE</code> case of branch in <code>if</code> condition.</li>
</ul>
<p>I find graphical output to be slightly easier to follow: our
<code>x_12 == 0.0</code> is supposed to be <code>TRUE</code>. Fun fact: <code>-0.0</code> is equal to
<code>0.0</code> according to <code>C</code> and <code>IEEE-754</code> rules.</p>
<p>This means that none of <code>bb3</code> or <code>bb4</code> are executed and
<code>iftmp.5_6</code> <code>PHI</code> node brings in <code>0.0</code> value from <code>bb2</code>:</p>
<pre><code>  &lt;bb 5&gt; [local count: 1073741824]:
  # iftmp.5_6 = PHI &lt;omww_17(4), 0.0(3), 0.0(2)&gt;
  ...
  *y_13(D) = _20;
  return iftmp.5_6;</code></pre>
<p>I went through the graphs of all tree passes dumped with
<code>gcc-HEAD/bin/gcc -O1 -lm b.c -o b -fdump-tree-all-graph</code> to find the
seemingly problematic graph.</p>
<p>Here is our <code>b.c.015t.cfg.dot</code> original unoptimized graph as a reference:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.015t.cfg.svg" /></p>
<p>Let’s trace it through to make sure it’s correct. It wil also help
getting used to variable names and expected basic block effects:</p>
<ul>
<li>in <code>bb2</code> (entrance):
<ul>
<li><code>ph.4_1 = ph = 0;</code></li>
<li><code>factor = vf = 1.0;</code></li>
<li><code>_2 = ph.4_1; /* 0.0 */</code></li>
<li><code>_3 = -_2; /* -0.0 */</code></li>
<li><code>x = factor * _3; /* -0.0 */</code></li>
<li><code>if (x == 0.0) goto bb3;</code></li>
</ul></li>
<li>in <code>bb3</code> (branch taken):
<ul>
<li><code>*y = 1.0;</code> (not interesting)</li>
<li><code>goto bb5;</code></li>
</ul></li>
<li>in <code>bb5</code>:
<ul>
<li><code>_5 = x * 2.0; /* -0.0 */</code></li>
<li><code>w = _5 / factor; /* -0.0 */</code></li>
<li><code>omw = 1.0 - w; /* 1.0 */</code></li>
<li><code>if (omww &gt; 0.0) goto bb6;</code></li>
</ul></li>
<li>in <code>bb6</code>: (return)
<ul>
<li><code>iftmp.5 = omww; /* 1.0 */</code></li>
<li><code>goto bb8;</code></li>
</ul></li>
<li>in <code>bb8</code>:
<ul>
<li><code>ffm = iftmp.5; /* 1.0 */</code></li>
<li><code>D.3203 = ffm; /* 1.0 */</code></li>
<li><code>return D.3203; /* 1.0 */</code></li>
</ul></li>
</ul>
<p>It’s a bit verbose but very straightforward. The effect is:</p>
<ul>
<li><code>w</code> gets calculated to <code>0.0</code></li>
<li><code>omww</code> and <code>ffm</code> get calculated to <code>1.0</code> and return the value</li>
</ul>
<p>If we look further down the optimization passes I think the
<code>b.c.128t.sra</code> is last valid step:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.128t.sra.svg" /></p>
<p>And <code>b.c.130t.dom2</code> is first problematic step:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.130t.dom2.svg" /></p>
<p>Note how <code>omww_22 = 1.0 - w_21;</code> in <code>bb6</code> is never read. Instead our
<code>PHI</code> node <code># iftmp.5_6 = PHI &lt;omww_17(3), 0.0(4), 0.0(6)&gt;</code> claims
that <code>bb6</code> always brings in <code>0.0</code> value in <code>0.0(6)</code> alternative.</p>
<p>Why does it happen? At this point I gave up and filed
<a href="https://gcc.gnu.org/PR107879" class="uri">https://gcc.gnu.org/PR107879</a> bug.</p>
<p>Then I bisected <code>gcc</code> down to <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=d4c2f1d376da6f">commit d4c2f1d3</a>:</p>
<pre><code>commit d4c2f1d376da6fc3f3c30a9d3160e43c95399343
Date:   Sat Nov 12 09:39:00 2022 +0100

    range-op: Implement op[12]_range operators for {PLUS,MINUS,MULT,RDIV}_EXPR</code></pre>
<p>The commit changed value ranges inferred for variables to simplify the
call graph by eliminating impossible edges. Alexander confirmed that
<code>dom2/dom3</code> passes take part in destroying original program and Jakub
nailed it down to incorrect inferred ranges around the division.</p>
<p>I would like to get a bit better understanding at how and when ranges
get computed for this example. So far I don’t know how to look at them
in detail.</p>
<h2 id="parting-words">Parting words</h2>
<ul>
<li><code>ffmpeg</code> while being simple and full of assembly still can step on
<code>gcc</code> bugs in more obscure areas.</li>
<li><code>ffmpeg</code> uses
<a href="https://github.com/FFmpeg/FFmpeg/blob/master/libswresample/resample.c#L182-L183">cubic formula</a>
to upsample inputs.</li>
<li><code>-0.0</code> is equal to <code>0.0</code> according to IEEE754 even if binary encodings
differ.</li>
<li><code>gcc</code>’s dataflow related to value ranges is a bit hard to follow even in
<code>-fdump-*</code> outputs.</li>
<li><code>gcc</code>’s <code>-fdump-*-graph</code> set of options dump nice <code>.dot</code>-style outputs
for visual debugging.</li>
<li><code>volatile</code> is great at inhibiting complex constant propagation
optimizations.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on December 10, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Fixing wine-wayland on POLARIS</title>
    <link href="http://trofi.github.io/posts/268-fixing-wine-wayland-on-polaris.html" />
    <id>http://trofi.github.io/posts/268-fixing-wine-wayland-on-polaris.html</id>
    <published>2022-11-28T00:00:00Z</published>
    <updated>2022-11-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>After <a href="http://trofi.github.io/posts/261-trying-out-wayland.html">switching to wayland</a> I got
most GUI programs to use <code>wayland</code> backend render. The two main
exceptions are <code>pidgin</code> (used <code>gtk-2</code>) and <code>wine</code> (uses low level <code>x11</code>
primitives for many things). <code>pidgin</code> worked fine in <code>Xwayland</code>, but
<code>wine</code> did not always behave: sometimes input focus did not get passed
to the emulated application, sometimes wine could not use
<code>wayland</code>-native pixel screen dimensions and resorted back to
down-scaled dimensions.</p>
<p>There is an ongoing effort to get <code>wine</code> a new <code>wayland</code> backend by
Alexandros Frantzis and others. It’s not yet merged to <code>wine</code> upstream
proper and is developed at <a href="https://gitlab.collabora.com/alf/wine.git" class="uri">https://gitlab.collabora.com/alf/wine.git</a>
as a <code>wine</code> fork in <code>wayland</code> branch. <code>nixpkgs</code> packages this fork as
<code>wine-wayland</code> package.</p>
<p>I tried <code>wine-wayland</code> for the first time this weekend. Unfortunately it
was not able to run <code>DirectX</code> or <code>OpenGL</code> games for windows. When I
started an application I heard expected sounds from the applications
(good) but got only black screen back (bad!).</p>
<p>I did not think I could fix it: <code>wine</code> was a huge project, I had no
background in modern graphics be it <code>linux</code> or <code>windows</code>. But I was
mildly curious about the following messages <code>wine</code> was dumping to
<code>stderr</code>:</p>
<pre><code>$ wine foo.exe
00f0:err:waylanddrv:wayland_gl_drawable_update Failed to create GBM surface
00f0:err:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface
011c:err:waylanddrv:wayland_gl_drawable_update Failed to create GBM surface
011c:err:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface</code></pre>
<p>I wanted to find out why <code>wine</code> was failing to create these things.</p>
<p><code>GBM</code> and <code>EGL</code> acronyms sounded vaguely graphics-related. Creating the
rendering surface sounded like a simple procedure. Everything neededs a
surface to draw anything. Maybe that error message is an actual bug?</p>
<p><code>wine</code> has a great <code>WINEDEBUG=</code> mechanism to enable subsystem-specific
debug prints at runtime (<code>man wine</code> has detailed synatax description).
To get <code>wayland</code>-related debugging I used <code>WINEDEBUG=waylanddrv,opengl</code>:</p>
<pre><code>$ WINEDEBUG=waylanddrv,opengl wine foo.exe
...
0124:trace:waylanddrv:wayland_gl_create_gbm_surface Using default format/modifier information
0124:trace:waylanddrv:wayland_gbm_create_surface 640x480 AR24 scanout=0 count_mods=2
0124:trace:waylanddrv:wayland_gbm_create_surface     mod: 0x00ffffffffffffff
0124:trace:waylanddrv:wayland_gbm_create_surface     mod: 0x0000000000000000
0124:err:waylanddrv:wayland_gl_drawable_update Failed to create GBM surface
0124:trace:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface with SRGB colorspace, trying with default colorspace
0124:err:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface
...</code></pre>
<p>Not knowing much about these <code>GBM</code> things it felt like creating a <code>640x480</code>
surface with <code>AR24</code> format (8 bits for each of Red, Blue, Green, Alpha components)
should not be a problem and the call should succeed. Why does it fail here?</p>
<p>To ease exploration I started patching <code>mesa</code> and <code>wine-wayland</code> locally
with <code>fprintf(stderr, ...);</code> calls to see what gets passed around.</p>
<p><code>nixpkgs</code>’s <code>mesa</code> clients use <code>/run/opengl-driver-32</code> paths to load
<code>opengl</code> <code>mesa</code> drivers. That means just rebuilding an application
against patched <code>mesa</code> locally in <code>nixpkgs</code> checkout is not enough to
get it used: applications will still load <code>/run/opengl-driver-32</code>
drivers. One day we will fix this non-hermeticity.</p>
<p>But until then we have to manually redirect used <code>mesa</code> from default
paths. There are many ways to do it. I used the following global
variables:</p>
<pre><code>$ local_mesa=$(nix-build --no-link ~/nm -A pkgsi686Linux.mesa.drivers)
$ GBM_BACKENDS_PATH=/not-really-used \
  LIBGL_DRIVERS_PATH=$local_mesa/lib/dri \
  __EGL_VENDOR_LIBRARY_DIRS=$local_mesa/share/glvnd/egl_vendor.d \
      wine foo.exe</code></pre>
<p>This allowed me to put patches to <code>~/nm</code> checkout of <code>nixpkgs</code> and
immediately observe their effect on <code>wine-wayland</code>.</p>
<p>I found that <code>wine</code>’s code at
<a href="https://gitlab.collabora.com/alf/wine/-/blob/wayland/dlls/winewayland.drv/opengl.c#L373-L440">winewayland.drv</a>.
calls <code>wayland_gbm_create_surface()</code> -&gt;
<a href="https://gitlab.collabora.com/alf/wine/-/blob/wayland/dlls/winewayland.drv/opengl.c#L310-L371">wayland_gl_create_gbm_surface()</a>
-&gt; <a href="https://gitlab.collabora.com/alf/wine/-/blob/wayland/dlls/winewayland.drv/gbm.c#L267-L299">wayland_gbm_create_surface()</a>.
All of the calls are shallow wrappers of one another. They just pass
through the request to create surface. I’ll paste the latter in full
here:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> gbm_surface <span class="op">*</span>wayland_gbm_create_surface<span class="op">(</span><span class="dt">uint32_t</span> drm_format<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">,</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>                                               <span class="dt">size_t</span> count_modifiers<span class="op">,</span> <span class="dt">uint64_t</span> <span class="op">*</span>modifiers<span class="op">,</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>                                               BOOL format_is_scanoutable<span class="op">)</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">uint32_t</span> gbm_bo_flags <span class="op">=</span> GBM_BO_USE_RENDERING<span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>TRACE_ON<span class="op">(</span>waylanddrv<span class="op">))</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> i<span class="op">;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        TRACE<span class="op">(</span><span class="st">&quot;%dx%d %.4s scanout=%d count_mods=%zu</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>              width<span class="op">,</span> height<span class="op">,</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*)&amp;</span>drm_format<span class="op">,</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>              format_is_scanoutable<span class="op">,</span> count_modifiers<span class="op">);</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> count_modifiers<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>            TRACE<span class="op">(</span><span class="st">&quot;    mod: 0x%.16llx</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">(</span><span class="dt">long</span> <span class="dt">long</span><span class="op">)</span>modifiers<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>format_is_scanoutable<span class="op">)</span> gbm_bo_flags <span class="op">|=</span> GBM_BO_USE_SCANOUT<span class="op">;</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>count_modifiers<span class="op">)</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef HAVE_GBM_SURFACE_CREATE_WITH_MODIFIERS2</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> gbm_surface_create_with_modifiers2<span class="op">(</span>process_gbm_device<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                                                  drm_format<span class="op">,</span> modifiers<span class="op">,</span> count_modifiers<span class="op">,</span> gbm_bo_flags<span class="op">);</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> gbm_surface_create_with_modifiers<span class="op">(</span>process_gbm_device<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>                                                 drm_format<span class="op">,</span> modifiers<span class="op">,</span> count_modifiers<span class="op">);</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> gbm_surface_create<span class="op">(</span>process_gbm_device<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> drm_format<span class="op">,</span> gbm_bo_flags<span class="op">);</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>wayland_gbm_create_surface()</code> tries to call
<code>gbm_surface_create_with_modifiers2()</code> with 2 modifiers:</p>
<ul>
<li>unknown (tiled?): <code>0x00ffffffffffffff</code> (<code>DRM_FORMAT_MOD_INVALID</code>)</li>
<li>linear: <code>0x0000000000000000</code> (<code>DRM_FORMAT_MOD_LINEAR</code>)</li>
</ul>
<p>Note that if there would be no modifiers then <code>gbm_surface_create()</code>
would be called. From what I understand presence of extra modifiers is
optional (depends on a driver implementation).</p>
<p>From what I understand generic code should be able to work with all
modifiers. Picking wrong modifier should only affect performance (and
not correctness). An example modifier would be to enable tiled pixel
layout instead of default linear.</p>
<p>The fun thing is that <code>mesa</code> rejects
<code>gbm_surface_create_with_modifiers2()</code> call for me with <code>errno = ENOSYS</code>
at <a href="https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/gbm/backends/dri/gbm_dri.c#L1343-L1404">src/gbm/backends/dri/gbm_dri.c</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">struct</span> gbm_surface <span class="op">*</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>gbm_dri_surface_create<span class="op">(</span><span class="kw">struct</span> gbm_device <span class="op">*</span>gbm<span class="op">,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">uint32_t</span> width<span class="op">,</span> <span class="dt">uint32_t</span> height<span class="op">,</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">uint32_t</span> format<span class="op">,</span> <span class="dt">uint32_t</span> flags<span class="op">,</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">const</span> <span class="dt">uint64_t</span> <span class="op">*</span>modifiers<span class="op">,</span> <span class="dt">const</span> <span class="dt">unsigned</span> count<span class="op">)</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">struct</span> gbm_dri_device <span class="op">*</span>dri <span class="op">=</span> gbm_dri_device<span class="op">(</span>gbm<span class="op">);</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>   <span class="kw">struct</span> gbm_dri_surface <span class="op">*</span>surf<span class="op">;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="op">(</span>modifiers <span class="op">&amp;&amp;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>       <span class="op">(!</span>dri<span class="op">-&gt;</span>image <span class="op">||</span> dri<span class="op">-&gt;</span>image<span class="op">-&gt;</span>base<span class="op">.</span>version <span class="op">&lt;</span> <span class="dv">14</span> <span class="op">||</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">!</span>dri<span class="op">-&gt;</span>image<span class="op">-&gt;</span>createImageWithModifiers<span class="op">))</span> <span class="op">{</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>      errno <span class="op">=</span> ENOSYS<span class="op">;</span> <span class="co">// &lt;- here</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> NULL<span class="op">;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>As I understand <code>mesa</code> assumes that <code>createImageWithModifiers</code> support
should be present in the backend driver. But in my case of
<code>GFX8 / POLARIS12</code> modifier support for image creation seems to be
disabled by <code>mesa</code> at
<a href="https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/gallium/drivers/radeonsi/si_texture.c#L2378-L2401">src/gallium/drivers/radeonsi/si_texture.c</a>.
Don’t know why.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> si_init_screen_texture_functions<span class="op">(</span><span class="kw">struct</span> si_screen <span class="op">*</span>sscreen<span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_from_handle <span class="op">=</span> si_texture_from_handle<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_get_handle <span class="op">=</span> si_texture_get_handle<span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_get_param <span class="op">=</span> si_resource_get_param<span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_get_info <span class="op">=</span> si_texture_get_info<span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_from_memobj <span class="op">=</span> si_resource_from_memobj<span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>memobj_create_from_handle <span class="op">=</span> si_memobj_from_handle<span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>memobj_destroy <span class="op">=</span> si_memobj_destroy<span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>check_resource_capability <span class="op">=</span> si_check_resource_capability<span class="op">;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>get_sparse_texture_virtual_page_size <span class="op">=</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>      si_get_sparse_texture_virtual_page_size<span class="op">;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>   <span class="co">/* By not setting it the frontend will fall back to non-modifier create,</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="co">    * which works around some applications using modifiers that are not</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co">    * allowed in combination with lack of error reporting in</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="co">    * gbm_dri_surface_create */</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="op">(</span>sscreen<span class="op">-&gt;</span>info<span class="op">.</span>gfx_level <span class="op">&gt;=</span> GFX9 <span class="op">&amp;&amp;</span> sscreen<span class="op">-&gt;</span>info<span class="op">.</span>kernel_has_modifiers<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_create_with_modifiers <span class="op">=</span> si_texture_create_with_modifiers<span class="op">;</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>query_dmabuf_modifiers <span class="op">=</span> si_query_dmabuf_modifiers<span class="op">;</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>is_dmabuf_modifier_supported <span class="op">=</span> si_is_dmabuf_modifier_supported<span class="op">;</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>get_dmabuf_modifier_planes <span class="op">=</span> si_get_dmabuf_modifier_planes<span class="op">;</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>GFX8</code> does not get a hint of <code>resource_create_with_modifiers</code> and
as a result <a href="https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/gallium/frontends/dri/dri2.c#L2196-L2264">src/gallium/frontends/dri/dri2.c</a>
does not set <code>createImageWithModifiers</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>dri2_init_screen_extensions<span class="op">(</span><span class="kw">struct</span> dri_screen <span class="op">*</span>screen<span class="op">,</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>                            <span class="kw">struct</span> pipe_screen <span class="op">*</span>pscreen<span class="op">,</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>                            <span class="dt">bool</span> is_kms_screen<span class="op">)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>   <span class="dt">const</span> __DRIextension <span class="op">**</span>nExt<span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>   STATIC_ASSERT<span class="op">(</span><span class="kw">sizeof</span><span class="op">(</span>screen<span class="op">-&gt;</span>screen_extensions<span class="op">)</span> <span class="op">&gt;=</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                 <span class="kw">sizeof</span><span class="op">(</span>dri_screen_extensions_base<span class="op">));</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>   memcpy<span class="op">(&amp;</span>screen<span class="op">-&gt;</span>screen_extensions<span class="op">,</span> dri_screen_extensions_base<span class="op">,</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>          <span class="kw">sizeof</span><span class="op">(</span>dri_screen_extensions_base<span class="op">));</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>   screen<span class="op">-&gt;</span>extensions <span class="op">=</span> screen<span class="op">-&gt;</span>screen_extensions<span class="op">;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>   <span class="co">/* Point nExt at the end of the extension list */</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>   nExt <span class="op">=</span> <span class="op">&amp;</span>screen<span class="op">-&gt;</span>screen_extensions<span class="op">[</span>ARRAY_SIZE<span class="op">(</span>dri_screen_extensions_base<span class="op">)];</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>   screen<span class="op">-&gt;</span>image_extension <span class="op">=</span> dri2ImageExtensionTempl<span class="op">;</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="op">(</span>pscreen<span class="op">-&gt;</span>resource_create_with_modifiers<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>      screen<span class="op">-&gt;</span>image_extension<span class="op">.</span>createImageWithModifiers <span class="op">=</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>         dri2_create_image_with_modifiers<span class="op">;</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>      screen<span class="op">-&gt;</span>image_extension<span class="op">.</span>createImageWithModifiers2 <span class="op">=</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>         dri2_create_image_with_modifiers2<span class="op">;</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>I’m not sure why <code>createImageWithModifiers</code> is skipped for me. Is it a
<code>mesa</code> bug? Is it expected because video card does not expose enough
information on tile format for <code>mesa</code> to reuse? I have no idea!</p>
<p>Anyway, from the above I was able to fix <code>wine-wayland</code> with one simple
trick by pretending there are no modifiers (assume <code>LINEAR</code>?):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/dlls/winewayland.drv/gbm.c</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/dlls/winewayland.drv/gbm.c</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -286,13 +286,20 @@ struct gbm_surface *wayland_gbm_create_surface(uint32_t drm_format, int width, i</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>     if (count_modifiers)</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>     {</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="va">+        errno = 0;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="va">+        struct gbm_surface * s =</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a> #ifdef HAVE_GBM_SURFACE_CREATE_WITH_MODIFIERS2</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="st">-        return gbm_surface_create_with_modifiers2(process_gbm_device, width, height,</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="va">+               gbm_surface_create_with_modifiers2(process_gbm_device, width, height,</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>                                                   drm_format, modifiers, count_modifiers, gbm_bo_flags);</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a> #else</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="st">-        return gbm_surface_create_with_modifiers(process_gbm_device, width, height,</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="va">+               gbm_surface_create_with_modifiers(process_gbm_device, width, height,</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>                                                  drm_format, modifiers, count_modifiers);</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="va">+        if (!s &amp;&amp; errno == ENOSYS) {</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="va">+            TRACE(&quot;    =&gt; mesa can't create a surface with modifiers. Falling back to modifer-less.&quot;);</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="va">+        } else {</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="va">+            return s;</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="va">+        }</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>     }</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>     return gbm_surface_create(process_gbm_device, width, height, drm_format, gbm_bo_flags);</span></code></pre></div>
<p>The idea is to just ignore <code>gbm_surface_create_with_modifiers2()</code>’s
result if it fails with <code>ENOSYS</code> and switch over to
<code>gbm_surface_create()</code> assuming it can handle the the call without
modifier presence.</p>
<p>I’m not sure what such a fallback means for other video card types. Will
it break some tiled workloads? Or at this point surface creation is
already broken beyond repair and any try is better than nothing? I have
no idea!</p>
<p>With the hack I unexpectedly got my games back running on <code>wine-wayland</code>!</p>
<p>I sent above hack to Alexandros to get help where the real fix belongs.
Hopefully we can get <code>wine-wayland</code> to work on more GPUs than today.</p>
<h2 id="parting-words">Parting words</h2>
<p>Vanilla <code>wine</code> still has to run via <code>Xwayland</code> and it’s not the best
experience for some picky applications. <code>wine-wayland</code> does a very
decent job at providing something that works (modulo cards like mine).
After I applied the fallback hack I was able to run all the games that
used to work on <code>wine-x11</code>.</p>
<p><code>wine</code>’s <code>WINEDEBUG=</code> debugging facility is great at tracing both
application behaviour and <code>wine</code>’s driver behaviour. I had to add
surprisingly little extra debugging to what is already available in
<code>wine</code> in form of <code>TRACE(...);</code> calls.</p>
<p><code>wine</code>’s error message was clear enough to understand why video
rendering did not produce anything.</p>
<p><code>nix</code>’s ability to build patched <code>wine</code> against patched <code>mesa</code> without
destroying existing installation was critical for me to be able to do
side-by-side comparisons.</p>
<p><code>mesa</code>’s <code>LIBGL_DRIVERS_PATH=</code> and <code>libglvnd</code>’s
<code>__EGL_VENDOR_LIBRARY_DIRS=</code> variables are ideal at fiddling with
patched opengl stack while keeping the main system running.</p>
<p><code>wine</code>’s and <code>wayland</code>’s way of handling <code>linux</code> <code>DRM</code> subsystem is very
lightweiht: they effectively pass available configuration around without
much of application-specific mangling. At least around surface creation
logic. That was very easy to get through.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November 28, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Diving into an IPA gcc bug</title>
    <link href="http://trofi.github.io/posts/267-diving-into-an-ipa-gcc-bug.html" />
    <id>http://trofi.github.io/posts/267-diving-into-an-ipa-gcc-bug.html</id>
    <published>2022-11-19T00:00:00Z</published>
    <updated>2022-11-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><code>gcc</code> has a nice set of optimizations based on inter-procedural
analysis (<code>IPA</code>). Some of them are simpler (like <code>early-inliner</code>),
and some are fancier (like <code>ipa-modref</code>). Their positive (and negative)
effect is most pronounced when applied to a program as a whole (<code>LTO</code>
builds).</p>
<p>Naturally occasional bugs creep in every now and then. They are rare
enough and non-trivial enough that I forget almost everything when
another one pops up.</p>
<p>I’ll use <a href="https://gcc.gnu.org/PR107661">PR107661</a> as a running example
to explore some details of <code>ipa-cp</code> pass and write down the process of
chasing the bug. We’ll have a glance at mechanics of trimming down the
example, at mechanics of <code>ipa-cp</code> pass run on a simple example and at
the bug itself.</p>
<p>I hope this doc will be useful to others and maybe future me.</p>
<p>It’s a long read. You have been warned.</p>
<h2 id="the-bug-effect">The bug effect</h2>
<p>After another weekly <code>gcc</code> update I found that <code>llvm-12</code> (and <code>llvm-11</code>)
test suites started failing 4 tests. All tests normally pass as <code>llvm</code>
test suite is quite self-contained: inputs are in <code>llvm</code> assembly and
outputs are in <code>llvm</code> internal representation. No external tools are
required. Thus any regressions in <code>llvm</code> tests are either latent <code>llvm</code>
bugs (unlikely) or bugs in a host compiler (more likely, <code>gcc-13</code> in my
case). I usually assume the latter. This time <code>llvm-12</code> failed these 4
tests as reported by <code>make check</code>:</p>
<pre><code>$ nix build -L --impure --expr 'with import ~/n {}; llvmPackages_12.override { stdenv = gccGitStdenv; }'
...
Failed Tests (4):
  LLVM :: CodeGen/AMDGPU/GlobalISel/llvm.amdgcn.div.fmas.ll
  LLVM :: CodeGen/AMDGPU/atomic_optimizations_pixelshader.ll
  LLVM :: CodeGen/AMDGPU/smem-war-hazard.mir
  LLVM :: CodeGen/AMDGPU/vgpr-descriptor-waterfall-loop-idom-update.ll</code></pre>
<h2 id="example-failing-test">Example failing test</h2>
<p>Test suite log pointed at this command as a failure trigger:</p>
<pre><code>$ bin/llc &lt; ../test/CodeGen/AMDGPU/vgpr-descriptor-waterfall-loop-idom-update.ll \
    -march=amdgcn -mcpu=gfx1010 | bin/FileCheck --allow-unused-prefixes=false \
        ../test/CodeGen/AMDGPU/vgpr-descriptor-waterfall-loop-idom-update.ll --check-prefix=GCN</code></pre>
<p>I ran this test manually. Sometimes it failed, sometimes it succeeded!</p>
<p>The failure was non-deterministic. I hoped for use of uninitialized value
somewhere in <code>llvm</code> code. Any attempt to build <code>llvm-12</code> with
<code>-fsanitize=address</code> or <code>-fsanitize=undefined</code> made the bug to go away
without any error reports. Not good. Hard to draw any conclusions.</p>
<h2 id="nailing-down-suspect-source-file">Nailing down suspect source file</h2>
<p>The next step was to find the file that likely got mis-compiled: I kept
adding <code>#pragma GCC optimize(0)</code> to various <code>AMDGPU</code> files until bug
disappeared. Then I removed as many added pragmas as I could to find
minimum amount needed to fix the test. One file was enough:
<code>llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp</code>. bug disappeared
when I added the pragma to only that file. Guessing the right file took a
few attempts but it was not hard.</p>
<p>Then I started moving functions from <code>GCNHazardRecognizer.cpp</code> (built
with <code>-O0</code>) out into another <code>.cpp</code> file (built with <code>-O3</code>) one by one
to narrow the set of functions to minimum amount when the bug is still
present. At some point
<code>valgrind</code> started complaining at <code>llc</code> for use of uninitialized value.
The precise report did not make sense: there were no uninitialized
variables in <code>c++</code> code.
Backtraces contained lines from <code>GCNHazardRecognizer.cpp</code>, but only when
<code>llc</code> was built with <code>-O3</code>. <code>-O0</code> had no complains from <code>valgrind</code>. I
hoped it was a real bug and not a <code>valgrind</code> deficiency.</p>
<p>At that point I had more reproducible example. This allowed me to shrink
<code>vgpr-descriptor-waterfall-loop-idom-update.ll</code> example down to 2 lines
of <code>llvm</code> assembly code while keeping <code>valgrind</code> complaining.</p>
<p>From that point I could understand what <code>llvm</code> input I am compiling and
what checks does <code>GCNHazardRecognizer.cpp</code> attempt to perform: the pass
tested register conflicts and did not modify the input program. That’s
a nice property: we can remove various parts of the validator without
fear of breaking the whole compilation process.</p>
<h2 id="trimming-down-the-source">Trimming down the source</h2>
<p>Even with most functions removed <code>GCNHazardRecognizer.cpp</code> still
contained 24KB of <code>C++</code> with many local and <code>STL</code> includes. It was very
hard to explore what <code>gcc</code> was doing wrong to such a large input.</p>
<p>I started removing unused code by adding <code>__builtin_trap()</code> into
functions and making sure that code does not get executed (when <code>llc</code>
ran successfully). This allowed me to shrink <code>GCNHazardRecognizer.cpp</code>
down to 10KB of <code>C++</code> code.</p>
<h2 id="trimming-down-optimization-options">Trimming down optimization options</h2>
<p>After I could remove no other function from <code>GCNHazardRecognizer.cpp</code>
I reduced optimization level from <code>-O3</code> down to <code>-O1 -fipa-cp -fipa-cp-clone</code>.</p>
<p>I got the list of options to try from <code>gcc -O3 -Q --help=optimizers</code>
output where <code>gcc</code> tells us actual effect of <code>-O3</code> aggregate option
in terms of more fine-grained individual <code>-f*</code> and <code>--param=*</code> options.</p>
<h2 id="deoptimizing-the-source">Deoptimizing the source</h2>
<p>Then I started adding <code>__attribute__((noinline, noipa))</code> (or
<code>__attribute__((noclone))</code> if <code>noipa</code> was too much) to every function
used in <code>GCNHazardRecognizer.cpp</code>. This included common <code>llvm</code> header
files. That way I could reduce amount of transformations <code>gcc</code> does
with input file. I used <code>-fopt-info</code> reports to pick next function to
deoptimize, or inline manually if it’s required to trigger the bug.</p>
<p>This step took a while as I had to sprinkle many parts of <code>llvm</code> common
header code.</p>
<p>The result allowed me to remove vast majority of tiny helper functions
from
optimizer’s oversight. Some functions I was able to turn into no-op
functions just to maintain the callgraph: so that I could keep code
execution flow roughly the same.</p>
<h2 id="getting-self-contained-example">Getting self-contained example</h2>
<p>From that point I could extract the result into a single <code>.cpp</code> file.
I filed a <a href="https://gcc.gnu.org/PR107661">PR107661</a> form the result
hoping that the bug would be obvious to an expert.</p>
<p>The resulting test was still a bit cryptic. I’m not posting it here as
we can do a bit better before looking at what compiler does with it.</p>
<h2 id="removing-most-syntactic-sugar">Removing most syntactic sugar</h2>
<p>Then I expanded high level c++ constructs like lambda functions and
classes into structs and explicit methond names, inlined methods manually
and removed unused parameters. In this case I especially was afraid of
<code>function_ref</code> class used in original file: it used very unusal way to
capture lambda context. I was not sure it conforms to <code>C++</code> semantics.</p>
<p>In the example below we just pass a function pointer with seemingly no
opporutunity of undefined behaviour.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// #define DISABLE_HACK 1</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> L_run<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;BAD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_L<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> L_run<span class="op">();</span> <span class="op">}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_R<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;GOOD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> function_ref <span class="op">{</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">(*</span>callback<span class="op">)(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">// allow one level of recursion to call callback twice</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> is_recur<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">static</span> <span class="dt">int</span> n <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> <span class="op">(</span>n<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">default</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do3<span class="op">(</span><span class="dt">volatile</span> <span class="dt">int</span> <span class="op">*</span> punused<span class="op">,</span> function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>  Expired<span class="op">.</span>callback<span class="op">();</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>is_recur<span class="op">())</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    do3<span class="op">(</span>punused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do1<span class="op">(</span>function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>  <span class="dt">volatile</span> <span class="dt">int</span> unused <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>  do3<span class="op">(&amp;</span>unused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_R<span class="op">});</span> <span class="op">}</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(DISABLE_HACK)</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> seemingly_unused_foo<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_L<span class="op">});</span> <span class="op">}</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>
<p>This example behaves differently when <code>void seemingly_unused_foo(void)</code>
is presend and is absent in the code:</p>
<pre><code>$ ./gcc-13-snap/bin/gcc -O1 -fipa-cp -fipa-cp-clone                a.cc -o a &amp;&amp; ./a
GOOD
BAD
$ ./gcc-13-snap/bin/gcc -O1 -fipa-cp -fipa-cp-clone -DDISABLE_HACK a.cc -o a &amp;&amp; ./a
GOOD
GOOD</code></pre>
<p>Note how executable output changes from <code>GOOD/BAD</code> to <code>GOOD/GOOD</code>. It’s not
supposed to and <code>gcc-12</code> never prints <code>BAD</code> text.</p>
<h2 id="making-sure-not-many-optimization-oportunities-are-left">Making sure not many optimization oportunities are left</h2>
<p>Once we have a self-contained example it’s useful to apply (or disable)
most unrelated optimizations. Once again I usually use <code>-fopt-info</code> for
that.</p>
<p>Running it against our current example reports just one transformation:</p>
<pre><code>$ gcc -O1 -fipa-cp -fipa-cp-clone -fopt-info -c a.cc -o a.o
a.cc:31:19: optimized: converting indirect call in void do3.constprop(volatile int*, function_ref)/24 to direct call to void callback_fn_L()/13</code></pre>
<p>Here we see that <code>gcc</code> did something to <code>do3()</code> to optimize indirect
<code>Expired.callback();</code> call into direct <code>callback_fn_L()</code> call. That is
probably done to optimize <code>seemingly_unused_foo()</code> as nothing else is
expected to call <code>callback_fn_L()</code>.</p>
<p>While we are at it there are cases when you expect some optimization to
fire. But for some reason it does not happen.<code>-fopt-info-all</code> might
sched some light into decisions made by <code>gcc</code>:</p>
<pre><code>$ gcc -O1 -fipa-cp -fipa-cp-clone -fopt-info-all -c a.cc -o a.o
a.cc:47:6: missed: Node void seemingly_unused_foo()/20 has no profile-id (profile feedback missing?)
a.cc:43:5: missed: Node int main()/19 has no profile-id (profile feedback missing?)
a.cc:37:13: missed: Node void do1(function_ref)/18 has no profile-id (profile feedback missing?)
a.cc:30:13: missed: Node void do3(volatile int*, function_ref)/17 has no profile-id (profile feedback missing?)
a.cc:22:12: missed: Node int is_recur()/16 has no profile-id (profile feedback missing?)
a.cc:15:13: missed: Node void callback_fn_R()/14 has no profile-id (profile feedback missing?)
a.cc:14:13: missed: Node void callback_fn_L()/13 has no profile-id (profile feedback missing?)
a.cc:13:13: missed: Node void L_run()/12 has no profile-id (profile feedback missing?)
a.cc:31:19: optimized: converting indirect call in void do3.constprop(volatile int*, function_ref)/24 to direct call to void callback_fn_L()/13
a.cc:31:19: missed:   not inlinable: void do3.constprop(volatile int*, function_ref)/24 -&gt; void callback_fn_L()/13, function not inline candidate
a.cc:33:15: missed:   not inlinable: void do3.constprop(volatile int*, function_ref)/24 -&gt; int is_recur()/16, function not inline candidate
a.cc:34:8: missed:   not inlinable: void do3.constprop(volatile int*, function_ref)/24 -&gt; void do3.constprop(volatile int*, function_ref)/24, function not inline candidate
a.cc:40:6: missed:   not inlinable: void do1.constprop(function_ref)/23 -&gt; void do3.constprop(volatile int*, function_ref)/24, function not inline candidate
a.cc:47:38: missed:   not inlinable: void seemingly_unused_foo()/20 -&gt; void do1.constprop(function_ref)/23, function not inline candidate
a.cc:43:21: missed:   not inlinable: int main()/19 -&gt; void do1(function_ref)/18, function not inline candidate
a.cc:40:6: missed:   not inlinable: void do1(function_ref)/18 -&gt; void do3(volatile int*, function_ref)/17, function not inline candidate
a.cc:34:8: missed:   not inlinable: void do3(volatile int*, function_ref)/17 -&gt; void do3.constprop(volatile int*, function_ref)/24, function not inline candidate
a.cc:33:15: missed:   not inlinable: void do3(volatile int*, function_ref)/17 -&gt; int is_recur()/16, function not inline candidate
a.cc:15:42: missed:   not inlinable: void callback_fn_R()/14 -&gt; long unsigned int __builtin_fwrite(const void*, size_t, size_t, FILE*)/22, function body not available
a.cc:14:40: missed:   not inlinable: void callback_fn_L()/13 -&gt; void L_run()/12, function not inline candidate
a.cc:13:34: missed:   not inlinable: void L_run()/12 -&gt; long unsigned int __builtin_fwrite(const void*, size_t, size_t, FILE*)/22, function body not available
Unit growth for small function inlining: 82-&gt;82 (0%)

Inlined 4 calls, eliminated 1 functions</code></pre>
<p>Here we see all sorts of rejected inline attempts. From what I
understand <code>-O1</code> only implies <code>-finline-functions-called-once</code>
but not <code>-finline-functions</code> (<code>-O2</code> default). That means <code>inline</code>
keyword (or a single-call <code>static</code> function call) is the usual
trigger for inlining decision.</p>
<h2 id="a-simpler-constant-propagation-example">A simpler constant propagation example</h2>
<p>Before chasing specifics of our breakage let’s have a look at a simpler
falid case of constant propagation across procedures. Let’s try the
following contrived example:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Forbid inlining to see the cloning effect */</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">))</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> f<span class="op">(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a <span class="op">+</span> b<span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co">/* Add one level of indirection to force IPA discover f(..., 10) */</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">))</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> g<span class="op">(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> f<span class="op">(</span>a<span class="op">,</span> b<span class="op">);</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">volatile</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> g<span class="op">(</span>i<span class="op">,</span> <span class="dv">10</span><span class="op">);</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/example-1.svg" /></p>
<p>Here we define <code>f(int a, int b)</code> and <code>g(int a, int b)</code> function that
ever see <code>b = 10</code> value as their second argument. Will <code>gcc</code> do
something about that redundancy? We also mark both functions <code>noinline</code>
to prevent <code>gcc</code> from just inlining everything into <code>main()</code>.</p>
<p>Bulding and running it:</p>
<pre><code>$ gcc -O3 a.c -o a &amp;&amp; ./a
$ echo $?
52</code></pre>
<p>The program prints <code>42 + 10 = 52</code> as expected. Let’s look at the <code>IPA</code>
details to trace through it’s workings. I’ll use <code>-fdump-ipa-cp-slim</code>
to dump pass internal state and decisions:</p>
<pre><code>$ gcc -O3 -c a.c -fdump-ipa-cp-slim
$ cat a.c.081i.cp</code></pre>
<p>I’ll paste <code>a.c.081i.cp</code> in pieces and add a few comments around:</p>
<pre><code>IPA constant propagation start:

IPA structures before propagation:

Jump functions:
  Jump functions of caller  main/2:
    callsite  main/2 -&gt; g/1 :
       param 0: UNKNOWN
         value: 0x0, mask: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
         Unknown VR
       param 1: CONST: 10
         value: 0xa, mask: 0x0
         Unknown VR
  Jump functions of caller  g/1:
    callsite  g/1 -&gt; f/0 :
       param 0: PASS THROUGH: 0, op nop_expr
         value: 0x0, mask: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
         Unknown VR
       param 1: PASS THROUGH: 1, op nop_expr
         value: 0x0, mask: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
         Unknown VR
  Jump functions of caller  f/0:</code></pre>
<p>This is the list of initial facts about our program before the
optimization:</p>
<ul>
<li><code>f()</code> does not call any other function</li>
<li><code>g()</code> calls <code>f()</code>, it has 2 parameters and both get passed as is to <code>f()</code></li>
<li><code>main()</code> calls <code>g()</code>:
<ul>
<li>param0 has unknown value</li>
<li>param1 has known value <code>10</code> (<code>0xa</code>). Why <code>mask:</code> value is so large? An exercise for the reader.</li>
</ul></li>
</ul>
<p>Next step is to figure out if known constants propagate to callees in
any interesting way:</p>
<pre><code> Propagating constants:


overall_size: 20
 - context independent values, size: 6, time_benefit: 1.000000
     Decided to specialize for all known contexts, code not going to grow.
 - context independent values, size: 3, time_benefit: 1.000000
     Decided to specialize for all known contexts, code not going to grow.

IPA lattices after all propagation:

Lattices:
  Node: main/2:
  Node: g/1:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         int VARYING
        AGGS VARIABLE
    param [1]: 10 [loc_time: 0, loc_size: 0, prop_time: 0, prop_size: 0]
         ctxs: VARIABLE
         Bits: value = 0xa, mask = 0x0
         int [10, 10]
        AGGS VARIABLE
  Node: f/0:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         int VARYING
        AGGS VARIABLE
    param [1]: 10 [loc_time: 0, loc_size: 0, prop_time: 0, prop_size: 0]
         ctxs: VARIABLE
         Bits: value = 0xa, mask = 0x0
         int [10, 10]
        AGGS VARIABLE
</code></pre>
<p>Here propagation step figured out extra facts:</p>
<ul>
<li><code>f()</code>’s parameters are a bit more definite:
<ul>
<li>param0 is still unknown (<code>BOTTOM</code>)</li>
<li>param1 always has value <code>10</code></li>
</ul></li>
<li><code>g()</code>’s parameters have exactly the same structure as <code>f()</code>’s:
<ul>
<li>param0 is still unknown (<code>BOTTOM</code>)</li>
<li>param1 always has value <code>10</code></li>
</ul></li>
<li><code>main()</code> has nothing special about it’s parameters</li>
</ul>
<p><code>prop_time: 0, prop_size: 0</code> tell us that possible constant propagation
does not worsen runtime of the original code.</p>
<p>Then goes the decision phase:</p>
<pre><code>IPA decision stage:

 - Creating a specialized node of g/1 for all known contexts.
    replacing param #1 b with const 10
 - Creating a specialized node of f/0 for all known contexts.
    replacing param #1 b with const 10
Propagated bits info for function f.constprop/4:
 param 1: value = 0xa, mask = 0x0
Propagated bits info for function g.constprop/3:
 param 1: value = 0xa, mask = 0x0
Propagated bits info for function g/1:
 param 1: value = 0xa, mask = 0x0
Propagated bits info for function f/0:
 param 1: value = 0xa, mask = 0x0

IPA constant propagation end</code></pre>
<p>As expected <code>f()</code> and <code>g()</code> were replaced when equivalent functions
where their second parameter is always equals <code>10</code>. After the
transformation original <code>f()</code> and <code>g()</code> are no used anymore and can go
away. Call graph becomes slightly more complicated:</p>
<pre><code>;; Function f.constprop (f.constprop.0, funcdef_no=3, decl_uid=2004, cgraph_uid=5, symbol_order=4) (executed once)

Modification phase of node f.constprop/4
__attribute__((noinline))
int f.constprop (int a)
{
  int b;
  int _2;

  &lt;bb 3&gt; [local count: 1073741824]:

  &lt;bb 2&gt; [local count: 1073741824]:
  _2 = a_1(D) + 10;
  return _2;

}

;; Function g.constprop (g.constprop.0, funcdef_no=4, decl_uid=2003, cgraph_uid=4, symbol_order=3) (executed once)

Modification phase of node g.constprop/3
__attribute__((noinline))
int g.constprop (int a)
{
  int b;
  int _2;

  &lt;bb 3&gt; [local count: 1073741824]:

  &lt;bb 2&gt; [local count: 1073741824]:
  _2 = f (a_1(D), 10);
  return _2;

}

;; Function main (main, funcdef_no=2, decl_uid=1987, cgraph_uid=3, symbol_order=2) (executed once)

Modification phase of node main/2
int main ()
{
  volatile int i;
  int i.0_1;
  int _4;

  &lt;bb 2&gt; [local count: 1073741824]:
  i ={v} 42;
  i.0_1 ={v} i;
  _4 = g (i.0_1, 10);
  return _4;

}</code></pre>
<p>Note how this pass turned <code>int f(int a, int b) { return a + b; }</code> into
<code>int f.constprop(int a) { return a + 10; }</code>. While <code>g.constprop()</code> and
<code>main()</code> still do call 2-parameter forms of <code>f()</code> and <code>g()</code> in the
report.</p>
<p>Luckily that is not the final pass! If we look at final state at
<code>a.c.252t.optimized</code> (generated by
<code>gcc -O3 -c a.c -fdump-tree-optimized-slim</code>):</p>
<pre><code>__attribute__((noinline))
int f.constprop (int a)
{
  int _2;

  &lt;bb 2&gt;:
  _2 = a_1(D) + 10;
  return _2;
}

__attribute__((noinline))
int g.constprop (int a)
{
  int _2;
  &lt;bb 2&gt;:
  _2 = f.constprop (a_1(D)); [tail call]
  return _2;
}

int main ()
{
  volatile int i;
  int i.0_1;
  int _4;

  &lt;bb 2&gt;:
  i ={v} 42;
  i.0_1 ={v} i;
  _4 = g.constprop (i.0_1); [tail call]
  return _4;
}</code></pre>
<p>Or the same in more concise form:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/example-2.svg" /></p>
<p>All function are single-parameter now. <code>b = 10</code> was pushed all the way
down to <code>f.constprop()</code> definition.</p>
<h2 id="tracking-down-faulty-subsystem">Tracking down faulty subsystem</h2>
<p>Now back to our buggy example: why did <code>BAD</code> get printed at all? I had
no idea. Generated assembly code did not make sense.</p>
<p>First I bisected <code>gcc</code> to see if the change was small enough to
immediately see the bug. Bisect found regression in big
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e0403e95689af7">ipa-cp: Better representation of aggregate values we clone for</a>
commit: <code>5 files changed, 733 insertions(+), 666 deletions(-)</code>.
The commit is not supposed to bring in any visible changes to
the algorightm used. It should only improve <code>gcc</code> efficiency a bit
without any change in the output. The diff in commit was too large for
me to understand. I had no idea what I was looking at.</p>
<p>I moved to inspect <code>gcc</code>’s transformation stages. Each individual
optimization pass is usually simple enough that we can manually
verify if it’s effect is correct. At least for me that works only
for small input source files.</p>
<p><code>gcc</code>’s pass debugging steps hide under <code>-fdump-*</code> flags. Most
frequentl flags I use are:</p>
<ul>
<li><code>-fdump-tree-all</code> (or similar <code>-fdump-tree-all-all</code>, <code>-fdump-tree-all-slim</code> that differ in verbosity)</li>
<li><code>-fdump-ipa-all</code> (or <code>-fdump-ipa-all-all</code> and <code>-fdump-ipa-all-slim</code>)</li>
<li><code>-fdump-rtl-all</code> (or <code>-fdump-rtl-all-all</code> and <code>-fdump-ipa-rtl-slim</code>)</li>
</ul>
<p><code>gcc</code> man page defines many more output formats and suffix meanings.</p>
<p>Building the example with <code>-fdump-tree-all-slim</code> creates many files
including <code>a.cc.254t.optimized</code> of this content:</p>
<pre><code>;; Function callback_fn_R (_ZL13callback_fn_Rv, funcdef_no=14, decl_uid=3302, cgraph_uid=15, symbol_order=14)
void callback_fn_R ()
{
  struct FILE * stderr.0_1;

  &lt;bb 2&gt;:
  stderr.0_1 = stderr;
  __builtin_fwrite (&quot;GOOD\n&quot;, 1, 5, stderr.0_1);
  return;

}

;; Function L_run (_ZL5L_runv, funcdef_no=12, decl_uid=3298, cgraph_uid=13, symbol_order=12)
void L_run ()
{
  struct FILE * stderr.5_1;

  &lt;bb 2&gt;:
  stderr.5_1 = stderr;
  __builtin_fwrite (&quot;BAD\n&quot;, 1, 4, stderr.5_1);
  return;

}
;; Function do3.constprop (_ZL3do3PVi12function_ref.constprop.0, funcdef_no=21, decl_uid=3391, cgraph_uid=23, symbol_order=24)
void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  int _2;

  &lt;bb 2&gt;:
  L_run ();
  _2 = is_recur ();
  if (_2 != 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt;:
  do3.constprop (punused_3(D), Expired);

  &lt;bb 4&gt;:
  return;

}

;; Function main (main, funcdef_no=18, decl_uid=3357, cgraph_uid=19, symbol_order=19) (executed once)
int main ()
{
  struct function_ref Expired;
  volatile int unused;
  int _5;

  &lt;bb 2&gt;:
  unused ={v} 42;
  Expired.callback = callback_fn_R;
  callback_fn_R ();
  _5 = is_recur ();
  if (_5 != 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt;:
  do3.constprop (&amp;unused, Expired);

  &lt;bb 4&gt;:
  return 0;

}
...
void seemingly_unused_foo ()
{
  volatile int unused;
  struct function_ref Expired;

  Expired.callback = callback_fn_L;
  unused ={v} 42;
  do3.constprop (&amp;unused, Expired);
  return;
}</code></pre>
<p>While it’s a lot of text it’s almost identical source program we wrote.
The only difference is verbosity: explicit assignments instead of
constructors, explicit label jumps and similar.</p>
<p>Having skimmed through it we can spot a few curious things:</p>
<ul>
<li><code>do3()</code> disappered completely. <code>do3.constprop()</code> is the only one left
and it calls only <code>L_run()</code> (from <code>callback_fn_L</code>). There is no
<code>callback_fn_R</code> call.</li>
<li><code>seemingly_unused_foo()</code> calls <code>do3.constprop()</code> directly (ok).</li>
<li><code>main()</code> calls <code>callback_fn_R()</code> directly (ok) and calls <code>do3.constprop()</code>
(bug!).</li>
<li><code>do1()</code> was completely optimised away by inlining into
<code>main()</code> and <code>seemingly_unused_foo()</code>.</li>
</ul>
<p>Let’s look at the output of <code>IPA</code> phases instead. I used
<code>-fdump-ipa-all-slim</code> to generate the logs. Among other things
it generates <code>a.cc.081i.cp</code> file:</p>
<pre><code>IPA constant propagation start:

IPA structures before propagation:

Jump functions:
  Jump functions of caller  void seemingly_unused_foo()/20:
    callsite  void seemingly_unused_foo()/20 -&gt; void do1(function_ref)/18 :
       param 0: UNKNOWN
         Aggregate passed by value:
           offset: 0, type: void (*&lt;T53f&gt;) (void), CONST: callback_fn_L
         Unknown bits
         Unknown VR
  Jump functions of caller  int main()/19:
    callsite  int main()/19 -&gt; void do1(function_ref)/18 :
       param 0: UNKNOWN
         Aggregate passed by value:
           offset: 0, type: void (*&lt;T53f&gt;) (void), CONST: callback_fn_R
         Unknown bits
         Unknown VR
...
  Jump functions of caller  void do3(volatile int*, function_ref)/17:
    callsite  void do3(volatile int*, function_ref)/17 -&gt; void do3(volatile int*, function_ref)/17 :
       param 0: PASS THROUGH: 0, op nop_expr
         value: 0x0, mask: 0xffffffffffffffff
         Unknown VR
       param 1: PASS THROUGH: 1, op nop_expr
         Unknown bits
         Unknown VR
    callsite  void do3(volatile int*, function_ref)/17 -&gt; int is_recur()/16 :
    indirect aggregate callsite, calling param 1, offset 0, by_value, for stmt _1 ();
...
IPA lattices after all propagation:

Lattices:
  ...
  Node: void do1(function_ref)/18:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 0, loc_size: 7, prop_time: 17, prop_size: 20]
               callback_fn_R [loc_time: 0, loc_size: 7, prop_time: 9, prop_size: 20]
  Node: void do3(volatile int*, function_ref)/17:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits: value = 0x0, mask = 0xfffffffffffffffc
         [irange] int VARYING
        AGGS VARIABLE
    param [1]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 17, loc_size: 13, prop_time: 17, prop_size: 13]
               callback_fn_R [loc_time: 9, loc_size: 13, prop_time: 9, prop_size: 13]
...
IPA decision stage:

  Creating a specialized node of void do1(function_ref)/18.
  Creating a specialized node of void do3(volatile int*, function_ref)/17.
ipa-prop: Discovered an indirect call to a known target (void do3.constprop(volatile int*, function_ref)/24 -&gt; void callback_fn_L()/13), for stmt _1 ();
 - adding an extra caller void do3(volatile int*, function_ref)/17 of void do3.constprop(volatile int*, function_ref)/24

IPA constant propagation end
...
Symbol table:

_ZL3do3PVi12function_ref.constprop.0/24 (void do3.constprop(volatile int*, function_ref))
  Type: function definition analyzed
  Visibility:
  References: _ZL13callback_fn_Lv/13 (addr) 
  Referring: 
  Clone of _ZL3do3PVi12function_ref/17
  Availability: local
  Function flags: count:1073741824 (estimated locally) local
  Called by: _ZL3do3PVi12function_ref/17 (354334800 (estimated locally),0.33 per call) (can throw external) _ZL3do3PVi12function_ref.constprop.0/24 (354334800 (estimated locally),0.33 per call) (can throw external) _ZL3do112function_ref.constprop.0/23 (1073741824 (estimated locally),1.00 per call) (can throw external) 
  Calls: _ZL13callback_fn_Lv/13 (1073741824 (estimated locally),1.00 per call) (can throw external) _ZL8is_recurv/16 (1073741824 (estimated locally),1.00 per call) _ZL3do3PVi12function_ref.constprop.0/24 (354334800 (estimated locally),0.33 per call) (can throw external) 
...
;; Function do3.constprop (_ZL3do3PVi12function_ref.constprop.0, funcdef_no=21, decl_uid=3391, cgraph_uid=23, symbol_order=24)

Modification phase of node void do3.constprop(volatile int*, function_ref)/24
     Aggregate replacements: 1[0]=callback_fn_L
void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  void (*&lt;T53f&gt;) (void) _1;
  int _2;

  &lt;bb 5&gt;:

  &lt;bb 2&gt;:
  _1 = callback_fn_L;
  _1 ();
  _2 = is_recur ();
  if (_2 != 0)
    goto &lt;bb 3&gt;;
  else
    goto &lt;bb 4&gt;;

  &lt;bb 3&gt;:
  do3 (punused_3(D), Expired);

  &lt;bb 4&gt;:
  return;
}
...
;; Function main (main, funcdef_no=18, decl_uid=3357, cgraph_uid=19, symbol_order=19) (executed once)

Modification phase of node int main()/19
int main ()
{
  struct function_ref D.3363;

  &lt;bb 2&gt;:
  D.3363.callback = callback_fn_R;
  do1 (D.3363);
  return 0;

}



;; Function seemingly_unused_foo (_Z20seemingly_unused_foov, funcdef_no=19, decl_uid=3360, cgraph_uid=20, symbol_order=20)

Modification phase of node void seemingly_unused_foo()/20
void seemingly_unused_foo ()
{
  struct function_ref D.3373;
  &lt;bb 2&gt;:
  D.3373.callback = callback_fn_L;
  do1 (D.3373);
  return;
}</code></pre>
<p>A lot more text that before. Here <code>IPA</code> pass tells us a bit of inferred
state out of our program and then applies some transformations to it.</p>
<p>The above output tells us that <code>do3()</code> was cloned into <code>do3.constprop()</code>
with explicit call of <code>_1 = callback_fn_L; _1 ();</code> and nothing else.
According to modified functions output <code>do3.constprop()</code> is not used in
anywhere.</p>
<p>But that is misleading: symbol table is clearly telling us the reverse:
<code>_ZL3do3PVi12function_ref.constprop.0/24</code> (aka <code>do3.constprop()</code>)
<code>Called by: _ZL3do3PVi12function_ref/17</code> (aka <code>do3()</code>),
<code>_ZL3do3PVi12function_ref.constprop.0/24</code> (aka <code>do3.constprop()</code>),
<code>_ZL3do112function_ref.constprop.0/23</code> (aka <code>do1.constprop()</code>).</p>
<p>The most suspicious output here is presence of
<code>do3() -&gt; do3.constprop()</code> edge. How could <code>do3()</code> call
<code>do3.constprop()</code>? The line
<code>- adding an extra caller void do3(volatile int*, function_ref)/17 of void do3.constprop(volatile int*, function_ref)/24</code>
in the log is a good hint where to look at the details in <code>gcc</code>’s source
code.</p>
<p>Anyway, the resulting printed code is not directly broken. So far it’s
“only” edge information that looks incorrect. Maybe I am misinterpreting
it?</p>
<p>Now let’s look at the next <code>a.cc.085i.inline</code> <code>IPA</code> step:</p>
<pre><code>...
Deciding on functions to be inlined into all callers and removing useless speculations:

Inlining void do1.constprop(function_ref)/23 size 7.
 Called once from void seemingly_unused_foo()/20 6 insns.
  Parm map:  -1
Updated mod-ref summary for void seemingly_unused_foo()/20
  loads:
  stores:
  Side effects
  Nondeterministic
  Try dse
 Inlined into void seemingly_unused_foo()/20 which now has 8 size

Inlining void do3(volatile int*, function_ref)/17 size 14.
 Called once from void do1(function_ref)/18 7 insns.
  Parm map:  -5 0
Updated mod-ref summary for void do1(function_ref)/18
  loads:
  stores:
  Side effects
  Nondeterministic
 Inlined into void do1(function_ref)/18 which now has 14 size

Inlining void callback_fn_L()/13 size 4.
 Called once from void do3.constprop(volatile int*, function_ref)/24 12 insns.
  Parm map: 
Updated mod-ref summary for void do3.constprop(volatile int*, function_ref)/24
  loads:
  stores:
 Inlined into void do3.constprop(volatile int*, function_ref)/24 which now has 12 size

Inlining void do1(function_ref)/18 size 14.
 Called once from int main()/19 6 insns.
  Parm map:  -1
Updated mod-ref summary for int main()/19
  loads:
  stores:
  Side effects
  Nondeterministic
  Try dse
Node void do1(function_ref)/27 promoted to executed once.
Node void do3(volatile int*, function_ref)/28 promoted to executed once.
 Inlined into int main()/19 which now has 15 size
Overall time estimate: 204.840000 weighted by profile: 0.000000
...
;; Function do3.constprop (_ZL3do3PVi12function_ref.constprop.0, funcdef_no=21, decl_uid=3391, cgraph_uid=23, symbol_order=24)
void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  void (*&lt;T53f&gt;) (void) _1;
  int _2;

  &lt;bb 2&gt;:
  _1 = callback_fn_L;
  L_run ();
  _2 = is_recur ();
  if (_2 != 0)
    goto &lt;bb 3&gt;;
  else
    goto &lt;bb 4&gt;;

  &lt;bb 3&gt;:
  do3.constprop (punused_3(D), Expired);

  &lt;bb 4&gt;:
  return;

}

;; Function main (main, funcdef_no=18, decl_uid=3357, cgraph_uid=19, symbol_order=19) (executed once)
int main ()
{
  struct function_ref Expired;
  volatile int unused;
  struct function_ref Expired;
  struct function_ref D.3363;
  void (*&lt;T53f&gt;) (void) _4;
  int _5;

  &lt;bb 2&gt;:
  D.3363.callback = callback_fn_R;
  Expired = D.3363;
  unused ={v} 42;
  Expired = Expired;
  _4 = Expired.callback;
  _4 ();
  _5 = is_recur ();
  if (_5 != 0)
    goto &lt;bb 3&gt;;
  els
    goto &lt;bb 4&gt;;

  &lt;bb 3&gt;:
  do3.constprop (&amp;unused, Expired);

  &lt;bb 4&gt;:
  return 0;
}</code></pre>
<p>Here we can see how problematic edges discovered in <code>cp</code> phase broke
<code>inline</code>: <code>main()</code> function now calls <code>do3.constprop ();</code> (after <code>do3()</code>
inline) and that encodes <code>L_run ();</code> call to print <code>BAD</code>.</p>
<h2 id="diving-into-ipa-cp">Diving into ipa-cp</h2>
<p>Now let’s try to figure out why does <code>ipa-cp</code> add a problematic
<code>do3() -&gt; do3.constprop()</code> edge.</p>
<p><code>gcc</code> frequently has great comments in the source code on details of
what a pass is supposed to do. <code>ipa-cp</code> is no exception: it hides
in <a href="%3Chttps://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/ipa-cp.cc;h=d2bcd5e5e691ced8dba4b496b9d044eb2777d2b2;hb=HEAD#l23">gcc/ipa-cp.cc file</a>:</p>
<pre><code>  23 /* Interprocedural constant propagation (IPA-CP).
  24 
  25    The goal of this transformation is to
  26 
  27    1) discover functions which are always invoked with some arguments with the
  28       same known constant values and modify the functions so that the
  29       subsequent optimizations can take advantage of the knowledge, and
  30 
  31    2) partial specialization - create specialized versions of functions
  32       transformed in this way if some parameters are known constants only in
  33       certain contexts but the estimated tradeoff between speedup and cost size
  34       is deemed good.
  35 
  36    The algorithm also propagates types and attempts to perform type based
  37    devirtualization.  Types are propagated much like constants.
  38 
  39    The algorithm basically consists of three stages.  In the first, functions
  40    are analyzed one at a time and jump functions are constructed for all known
  41    call-sites.  In the second phase, the pass propagates information from the
  42    jump functions across the call to reveal what values are available at what
  43    call sites, performs estimations of effects of known values on functions and
  44    their callees, and finally decides what specialized extra versions should be
  45    created.  In the third, the special versions materialize and appropriate
  46    calls are redirected.
  47 
  48    The algorithm used is to a certain extent based on &quot;Interprocedural Constant
  49    Propagation&quot;, by David Callahan, Keith D Cooper, Ken Kennedy, Linda Torczon,
  50    Comp86, pg 152-161 and &quot;A Methodology for Procedure Cloning&quot; by Keith D
  51    Cooper, Mary W. Hall, and Ken Kennedy.
  52 
  53 
  54    First stage - intraprocedural analysis
  55    =======================================
  56 
  57    This phase computes jump_function and modification flags.
  58 
  59    A jump function for a call-site represents the values passed as an actual
  60    arguments of a given call-site. In principle, there are three types of
  61    values:
  62 
  63    Pass through - the caller's formal parameter is passed as an actual
  64                   argument, plus an operation on it can be performed.
  65    Constant - a constant is passed as an actual argument.
  66    Unknown - neither of the above.
  67 
  68    All jump function types are described in detail in ipa-prop.h, together with
  69    the data structures that represent them and methods of accessing them.
  70 
  71    ipcp_generate_summary() is the main function of the first stage.
  72 
  73    Second stage - interprocedural analysis
  74    ========================================
  75 
  76    This stage is itself divided into two phases.  In the first, we propagate
  77    known values over the call graph, in the second, we make cloning decisions.
  78    It uses a different algorithm than the original Callahan's paper.
  79 
  80    First, we traverse the functions topologically from callers to callees and,
  81    for each strongly connected component (SCC), we propagate constants
  82    according to previously computed jump functions.  We also record what known
  83    values depend on other known values and estimate local effects.  Finally, we
  84    propagate cumulative information about these effects from dependent values
  85    to those on which they depend.
  86 
  87    Second, we again traverse the call graph in the same topological order and
  88    make clones for functions which we know are called with the same values in
  89    all contexts and decide about extra specialized clones of functions just for
  90    some contexts - these decisions are based on both local estimates and
  91    cumulative estimates propagated from callees.
  92 
  93    ipcp_propagate_stage() and ipcp_decision_stage() together constitute the
  94    third stage.
  95 
  96    Third phase - materialization of clones, call statement updates.
  97    ============================================
  98 
  99    This stage is currently performed by call graph code (mainly in cgraphunit.cc
 100    and tree-inline.cc) according to instructions inserted to the call graph by
 101    the second stage.  */</code></pre>
<p>The idea is straighforward:</p>
<ul>
<li>collect all the call sites with their parameters (constant parameters
are most interesting to propagate them into callees)</li>
<li>sort the call graph topologically</li>
<li>estimate propagation effect (cost reduction)</li>
<li>clone functions by applying propagated constants where it’s beneficial</li>
<li>patch call sites to use clones instead of original functions</li>
</ul>
<p>While the whole algorithm might be overwhelming each of it’s step is not
too big to trace it through for our concrete example.</p>
<p>In theory <code>ipa-cp</code> should perform a transformation similar to the following:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/fig-1.svg" /></p>
<p>I expected callback <code>cb</code> indirection to be fully specialised and
runtime indirection to completely go away.</p>
<p>In practice something like the following occurs:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/fig-2.svg" /></p>
<p>Note: <code>main()</code> manages to both inline <code>GOOD</code> callback and call
specialized <code>do1.constprop()</code> <code>BAD</code> branch. The edge marked with <code>Bug!</code>
is the actual bug here.</p>
<p>To summarise the <code>ipa-cp</code> pass once again it consists of 3 steps:</p>
<ul>
<li>collect information around known call sites of the functions
(“jump functions”)</li>
<li>calculate propagation information around known calls to see how far
they reach unmodified and how many functions get always called with
the same arguments (“constant propagation”)</li>
<li>generate specialized function clones and redirect matching call sites
to the clones (“decision”)</li>
</ul>
<p>Let’s look in more detail at our example to find out what specifically
went wrong. I’ll post code snippet again:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">// #define DISABLE_HACK 1</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> L_run<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;BAD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_L<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> L_run<span class="op">();</span> <span class="op">}</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_R<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;GOOD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> function_ref <span class="op">{</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">(*</span>callback<span class="op">)(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a><span class="co">// allow one level of recursion to call callback twice</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> is_recur<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">static</span> <span class="dt">int</span> n <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> <span class="op">(</span>n<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">default</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do3<span class="op">(</span><span class="dt">volatile</span> <span class="dt">int</span> <span class="op">*</span> punused<span class="op">,</span> function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>  Expired<span class="op">.</span>callback<span class="op">();</span></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>is_recur<span class="op">())</span></span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>    do3<span class="op">(</span>punused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do1<span class="op">(</span>function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a>  <span class="dt">volatile</span> <span class="dt">int</span> unused <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-32"><a href="#cb19-32" aria-hidden="true" tabindex="-1"></a>  do3<span class="op">(&amp;</span>unused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb19-33"><a href="#cb19-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-34"><a href="#cb19-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-35"><a href="#cb19-35" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_R<span class="op">});</span> <span class="op">}</span></span>
<span id="cb19-36"><a href="#cb19-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-37"><a href="#cb19-37" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(DISABLE_HACK)</span></span>
<span id="cb19-38"><a href="#cb19-38" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb19-39"><a href="#cb19-39" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> seemingly_unused_foo<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_L<span class="op">});</span> <span class="op">}</span></span>
<span id="cb19-40"><a href="#cb19-40" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>
<p>And relevant analysis again:</p>
<pre><code>IPA lattices after all propagation:

Lattices:
  ...
  Node: void do1(function_ref)/18:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 0, loc_size: 7, prop_time: 17, prop_size: 20]
               callback_fn_R [loc_time: 0, loc_size: 7, prop_time: 9, prop_size: 20]
  Node: void do3(volatile int*, function_ref)/17:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits: value = 0x0, mask = 0xfffffffffffffffc
         [irange] int VARYING
        AGGS VARIABLE
    param [1]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 17, loc_size: 13, prop_time: 17, prop_size: 13]
               callback_fn_R [loc_time: 9, loc_size: 13, prop_time: 9, prop_size: 13]

...
IPA decision stage:

  Creating a specialized node of void do1(function_ref)/18.
  Creating a specialized node of void do3(volatile int*, function_ref)/17.
ipa-prop: Discovered an indirect call to a known target (void do3.constprop(volatile int*, function_ref)/24 -&gt; void callback_fn_L()/13), for stmt _1 ();
 - adding an extra caller void do3(volatile int*, function_ref)/17 of void do3.constprop(volatile int*, function_ref)/24</code></pre>
<p>Here propagation phase correctly sees that <code>do3()</code> sees two constants
being passed as parameters: <code>callback_fn_L()</code> and <code>callback_fn_R()</code>.</p>
<p>Thus whatever <code>do3.constprop()</code> is specialized against <code>do3()</code> can’t call
into it on it’s own: <code>do3()</code> has to work for <code>callback_fn_L()</code> and <code>callback_fn_R()</code>
inputs.</p>
<p>If we look at <code>adding an extra caller</code> string in <code>gcc</code>’s source code we
will see the conditon on which <code>gcc</code> decided it’s OK
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/ipa-cp.cc;h=d5230c7c5e6b150f7ac9e1a1445178239dc67c39;hb=603af25815523ba9e39e9b441cde5308423a9238#l5918">in perhaps_add_new_callers()</a>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Given an original NODE and a VAL for which we have already created a</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="co">   specialized clone, look whether there are incoming edges that still lead</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co">   into the old node but now also bring the requested value and also conform to</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="co">   all other criteria such that they can be redirected the special node.</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">   This function can therefore redirect the final edge in a SCC.  */</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>template <span class="op">&lt;</span>typename valtype<span class="op">&gt;</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>perhaps_add_new_callers <span class="op">(</span>cgraph_node <span class="op">*</span>node<span class="op">,</span> ipcp_value<span class="op">&lt;</span>valtype<span class="op">&gt;</span> <span class="op">*</span>val<span class="op">)</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>  ipcp_value_source<span class="op">&lt;</span>valtype<span class="op">&gt;</span> <span class="op">*</span>src<span class="op">;</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>  profile_count redirected_sum <span class="op">=</span> profile_count<span class="op">::</span>zero <span class="op">();</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>src <span class="op">=</span> val<span class="op">-&gt;</span>sources<span class="op">;</span> src<span class="op">;</span> src <span class="op">=</span> src<span class="op">-&gt;</span>next<span class="op">)</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a>      <span class="kw">struct</span> cgraph_edge <span class="op">*</span>cs <span class="op">=</span> src<span class="op">-&gt;</span>cs<span class="op">;</span></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a>      <span class="cf">while</span> <span class="op">(</span>cs<span class="op">)</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="op">(</span>cgraph_edge_brings_value_p <span class="op">(</span>cs<span class="op">,</span> src<span class="op">,</span> node<span class="op">,</span> val<span class="op">)</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a>              <span class="op">&amp;&amp;</span> cgraph_edge_brings_all_scalars_for_node <span class="op">(</span>cs<span class="op">,</span> val<span class="op">-&gt;</span>spec_node<span class="op">)</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a>              <span class="op">&amp;&amp;</span> cgraph_edge_brings_all_agg_vals_for_node <span class="op">(</span>cs<span class="op">,</span> val<span class="op">-&gt;</span>spec_node<span class="op">))</span></span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span>
<span id="cb21-23"><a href="#cb21-23" aria-hidden="true" tabindex="-1"></a>              <span class="cf">if</span> <span class="op">(</span>dump_file<span class="op">)</span></span>
<span id="cb21-24"><a href="#cb21-24" aria-hidden="true" tabindex="-1"></a>                fprintf <span class="op">(</span>dump_file<span class="op">,</span> <span class="st">&quot; - adding an extra caller %s of %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb21-25"><a href="#cb21-25" aria-hidden="true" tabindex="-1"></a>                         cs<span class="op">-&gt;</span>caller<span class="op">-&gt;</span>dump_name <span class="op">(),</span></span>
<span id="cb21-26"><a href="#cb21-26" aria-hidden="true" tabindex="-1"></a>                         val<span class="op">-&gt;</span>spec_node<span class="op">-&gt;</span>dump_name <span class="op">());</span></span>
<span id="cb21-27"><a href="#cb21-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-28"><a href="#cb21-28" aria-hidden="true" tabindex="-1"></a>              cs<span class="op">-&gt;</span>redirect_callee_duplicating_thunks <span class="op">(</span>val<span class="op">-&gt;</span>spec_node<span class="op">);</span></span>
<span id="cb21-29"><a href="#cb21-29" aria-hidden="true" tabindex="-1"></a>              val<span class="op">-&gt;</span>spec_node<span class="op">-&gt;</span>expand_all_artificial_thunks <span class="op">();</span></span>
<span id="cb21-30"><a href="#cb21-30" aria-hidden="true" tabindex="-1"></a>              <span class="cf">if</span> <span class="op">(</span>cs<span class="op">-&gt;</span>count<span class="op">.</span>ipa <span class="op">().</span>initialized_p <span class="op">())</span></span>
<span id="cb21-31"><a href="#cb21-31" aria-hidden="true" tabindex="-1"></a>                redirected_sum <span class="op">=</span> redirected_sum <span class="op">+</span> cs<span class="op">-&gt;</span>count<span class="op">.</span>ipa <span class="op">();</span></span>
<span id="cb21-32"><a href="#cb21-32" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb21-33"><a href="#cb21-33" aria-hidden="true" tabindex="-1"></a>          cs <span class="op">=</span> get_next_cgraph_edge_clone <span class="op">(</span>cs<span class="op">);</span></span>
<span id="cb21-34"><a href="#cb21-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb21-35"><a href="#cb21-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb21-36"><a href="#cb21-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-37"><a href="#cb21-37" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>redirected_sum<span class="op">.</span>nonzero_p <span class="op">())</span></span>
<span id="cb21-38"><a href="#cb21-38" aria-hidden="true" tabindex="-1"></a>    update_specialized_profile <span class="op">(</span>val<span class="op">-&gt;</span>spec_node<span class="op">,</span> node<span class="op">,</span> redirected_sum<span class="op">);</span></span>
<span id="cb21-39"><a href="#cb21-39" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb21-40"><a href="#cb21-40" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb21-41"><a href="#cb21-41" aria-hidden="true" tabindex="-1"></a><span class="co">/* Determine whether CS also brings all aggregate values that NODE is</span></span>
<span id="cb21-42"><a href="#cb21-42" aria-hidden="true" tabindex="-1"></a><span class="co">   specialized for.  */</span></span>
<span id="cb21-43"><a href="#cb21-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-44"><a href="#cb21-44" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">bool</span></span>
<span id="cb21-45"><a href="#cb21-45" aria-hidden="true" tabindex="-1"></a>cgraph_edge_brings_all_agg_vals_for_node <span class="op">(</span><span class="kw">struct</span> cgraph_edge <span class="op">*</span>cs<span class="op">,</span></span>
<span id="cb21-46"><a href="#cb21-46" aria-hidden="true" tabindex="-1"></a>                                          <span class="kw">struct</span> cgraph_node <span class="op">*</span>node<span class="op">)</span></span>
<span id="cb21-47"><a href="#cb21-47" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb21-48"><a href="#cb21-48" aria-hidden="true" tabindex="-1"></a>  ipcp_transformation <span class="op">*</span>ts <span class="op">=</span> ipcp_get_transformation_summary <span class="op">(</span>node<span class="op">);</span></span>
<span id="cb21-49"><a href="#cb21-49" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>ts <span class="op">||</span> vec_safe_is_empty <span class="op">(</span>ts<span class="op">-&gt;</span>m_agg_values<span class="op">))</span></span>
<span id="cb21-50"><a href="#cb21-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> true<span class="op">;</span></span>
<span id="cb21-51"><a href="#cb21-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-52"><a href="#cb21-52" aria-hidden="true" tabindex="-1"></a>  <span class="dt">const</span> ipa_argagg_value_list existing <span class="op">(</span>ts<span class="op">-&gt;</span>m_agg_values<span class="op">);</span></span>
<span id="cb21-53"><a href="#cb21-53" aria-hidden="true" tabindex="-1"></a>  auto_vec<span class="op">&lt;</span>ipa_argagg_value<span class="op">,</span> <span class="dv">32</span><span class="op">&gt;</span> edge_values<span class="op">;</span></span>
<span id="cb21-54"><a href="#cb21-54" aria-hidden="true" tabindex="-1"></a>  ipa_node_params <span class="op">*</span>dest_info <span class="op">=</span> ipa_node_params_sum<span class="op">-&gt;</span>get <span class="op">(</span>node<span class="op">);</span></span>
<span id="cb21-55"><a href="#cb21-55" aria-hidden="true" tabindex="-1"></a>  gcc_checking_assert <span class="op">(</span>dest_info<span class="op">-&gt;</span>ipcp_orig_node<span class="op">);</span></span>
<span id="cb21-56"><a href="#cb21-56" aria-hidden="true" tabindex="-1"></a>  dest_info <span class="op">=</span> ipa_node_params_sum<span class="op">-&gt;</span>get <span class="op">(</span>dest_info<span class="op">-&gt;</span>ipcp_orig_node<span class="op">);</span></span>
<span id="cb21-57"><a href="#cb21-57" aria-hidden="true" tabindex="-1"></a>  push_agg_values_from_edge <span class="op">(</span>cs<span class="op">,</span> dest_info<span class="op">,</span> <span class="op">&amp;</span>edge_values<span class="op">,</span> <span class="op">&amp;</span>existing<span class="op">);</span></span>
<span id="cb21-58"><a href="#cb21-58" aria-hidden="true" tabindex="-1"></a>  <span class="dt">const</span> ipa_argagg_value_list avl <span class="op">(&amp;</span>edge_values<span class="op">);</span></span>
<span id="cb21-59"><a href="#cb21-59" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> avl<span class="op">.</span>superset_of_p <span class="op">(</span>existing<span class="op">);</span></span>
<span id="cb21-60"><a href="#cb21-60" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Given that we pass a <code>struct { ... }</code> as a parameter our condition that
should have failed lives at <code>cgraph_edge_brings_all_agg_vals_for_node (cs, val-&gt;spec_node)</code>
call. It is supposed to check that all the parameters that our <code>d3.constprop()</code>
is specialised against is enough to cover all the call sites.</p>
<p><code>cgraph_edge_brings_all_agg_vals_for_node()</code> just implements that:
<code>avl</code> contains all values from seen edges while <code>existing</code> contains
values <code>node</code> is specialised against. Adding simple
<code>avl.dump (stderr); existing.dump (stderr);</code> shows the discrepancy.</p>
<p>A bit of extra debugging revealed that <code>push_agg_values_from_edge()</code> is
slightly broken in the way it handles self-recursive functions like
<code>d3()</code>: instead of extending already known values extracted from
specialised node (passed as <code>&amp;existing</code>) it just reuses <code>&amp;existing</code>
value as if no other information is present.</p>
<p>The workaround to test the theory was simple: just drop this preseed.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/ipa-cp.cc</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/ipa-cp.cc</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -5868,35 +5868,35 @@ cgraph_edge_brings_all_scalars_for_node (struct cgraph_edge *cs,</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a> /* Determine whether CS also brings all aggregate values that NODE is</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>    specialized for.  */</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a> static bool</span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a> cgraph_edge_brings_all_agg_vals_for_node (struct cgraph_edge *cs,</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>                                          struct cgraph_node *node)</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a>   ipcp_transformation *ts = ipcp_get_transformation_summary (node);</span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a>   if (!ts || vec_safe_is_empty (ts-&gt;m_agg_values))</span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>     return true;</span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a>   const ipa_argagg_value_list existing (ts-&gt;m_agg_values);</span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a>   auto_vec&lt;ipa_argagg_value, 32&gt; edge_values;</span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a>   ipa_node_params *dest_info = ipa_node_params_sum-&gt;get (node);</span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a>   gcc_checking_assert (dest_info-&gt;ipcp_orig_node);</span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a>   dest_info = ipa_node_params_sum-&gt;get (dest_info-&gt;ipcp_orig_node);</span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a><span class="st">-  push_agg_values_from_edge (cs, dest_info, &amp;edge_values, &amp;existing);</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a><span class="va">+  push_agg_values_from_edge (cs, dest_info, &amp;edge_values, NULL);</span></span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a>   const ipa_argagg_value_list avl (&amp;edge_values);</span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a>   return avl.superset_of_p (existing);</span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>That was enough to repair this test and <code>llvm-11</code> and <code>llvm-12</code> test
suite. The actual fix is slightly less conservative and uses <code>&amp;existing</code>
values in propagation phase when edge values are not fully discovered
yet.</p>
<p>Martin did a proper fix in
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=c4a92a9117a034e7cf291ae51d8b9b844fb5a88b">ipa-cp: Do not be too optimistic about self-recursive edges</a>
commit.</p>
<h2 id="optimized-example-after-the-fix">Optimized example after the fix</h2>
<p>Here is the final state built with <code>gcc -O1 -fipa-cp -fipa-cp-clone a.cc -o a -fdump-tree-all-slim</code>:</p>
<pre><code>void do3 (volatile int * punused, struct function_ref Expired)
{
  static int n = &lt;&lt;&lt; omitted &gt;&gt;&gt;;
  void (*&lt;T545&gt;) (void) _1;
  int n.3_9;
  int _10;

  &lt;bb 2&gt; [local count: 1073741824]:
  _1 = Expired.callback;
  _1 ();
  n.3_9 = n;
  _10 = n.3_9 + 1;
  n = _10;
  if (n.3_9 == 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt; [local count: 354334800]:
  do3 (punused_7(D), Expired);

  &lt;bb 4&gt; [local count: 1073741824]:
  return;
}

void callback_fn_R ()
{
  struct FILE * stderr.0_1;

  &lt;bb 2&gt; [local count: 1073741824]:
  stderr.0_1 = stderr;
  __builtin_fwrite (&quot;GOOD\n&quot;, 1, 5, stderr.0_1);
  return;
}

void L_run ()
{
  struct FILE * stderr.5_1;

  &lt;bb 2&gt; [local count: 1073741824]:
  stderr.5_1 = stderr;
  __builtin_fwrite (&quot;BAD\n&quot;, 1, 4, stderr.5_1);
  return;
}

void callback_fn_L ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  L_run ();
  return;
}

void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  static int n = &lt;&lt;&lt; omitted &gt;&gt;&gt;;
  int n.3_9;
  int _10;

  &lt;bb 2&gt; [local count: 1073741824]:
  L_run ();
  n.3_9 = n;
  _10 = n.3_9 + 1;
  n = _10;
  if (n.3_9 == 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt; [local count: 354334800]:
  do3.constprop (punused_3(D), Expired);

  &lt;bb 4&gt; [local count: 1073741824]:
  return;
}

int main ()
{
  volatile int unused;
  struct function_ref Expired;

  &lt;bb 2&gt; [local count: 1073741824]:
  Expired.callback = callback_fn_R;
  unused ={v} 42;
  do3 (&amp;unused, Expired);
  Expired ={v} {CLOBBER(eol)};
  return 0;
}

void seemingly_unused_foo ()
{
  volatile int unused;
  struct function_ref Expired;

  &lt;bb 2&gt; [local count: 1073741824]:
  Expired.callback = callback_fn_L;
  unused ={v} 42;
  do3.constprop (&amp;unused, Expired);
  Expired ={v} {CLOBBER(eol)};
  return;
}</code></pre>
<p>We see both <code>do3()</code> used by <code>main()</code> and <code>do3.constprop()</code> used by
<code>seemingly_unused_foo()</code>. I don’t understand why <code>main()</code> did not
trigger specialisation of another <code>do3()</code> variant. Let it be another
exercise for the reader and optimisation opportunity :)</p>
<p>The final result in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/fig-3.svg" /></p>
<h2 id="parting-words">Parting words</h2>
<p><code>llvm</code> tests caught another non-trivial <code>gcc</code> bug.</p>
<p><code>ipa</code> bugs are somewhat hard to reduce down to single file examples
without at least minimum amount of understanding what <code>gcc</code> does and
what it does not to the source file. <code>-fopt-info</code> helps a lot in that.</p>
<p>Reduction process is mostly mechanical and does not require too much
creativity. If I could do it so can you. Manual reduction and helped
me to get some feeling what various <code>gcc</code> passes do to the source
program: how lambdas are represented, when does inlining happen (or
not happen). <code>__attribute__((noinline, noipa))</code> and
<code>#ppragma GCC optimize</code> are a great help here.</p>
<p>Once an example is isolated to a single file it’s usually
straightforward to shrink it down to something so tiny that it’s obvious
where <code>gcc</code> (or original program!) went wrong and turned the program into
the bug. <code>-fdump*</code> set of options are a great help at exploring step by
step program transformation in <code>gcc</code>. I rarely need to add debugging to
<code>gcc</code> source to understand where roughly things went wrong.</p>
<p>Individual <code>gcc</code> passes have good source comments and nice internal
state dumps to inspect the process and to spot deficiencies like missing
optimizations or bugs.</p>
<p><code>ipa-cp</code> is a conceptually simple pass that is easy to reason about and
debug.</p>
<p>All in all it took me about 2 weeks of evenings to reduce the example
from <code>llvm</code> to a single-file example and 3 days to derive a
proof-of-concept fix. After that it took <code>gcc</code> developers less than a
day to write and validate the proper fix.</p>
<p>The fix was almost a one-liner. Now on to the <code>ffmpeg</code>
<a href="https://gcc.gnu.org/PR107879">miscompilation</a> :)</p>
<p>Have fun!</p>

<div class="info">
    Posted on November 19, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Zero Hydra Failures towards 22.11 NixOS release</title>
    <link href="http://trofi.github.io/posts/266-Zero-Hydra-Failures-towards-22.11-NixOS-release.html" />
    <id>http://trofi.github.io/posts/266-Zero-Hydra-Failures-towards-22.11-NixOS-release.html</id>
    <published>2022-11-08T00:00:00Z</published>
    <updated>2022-11-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>The end of November is near and that means <code>NixOS</code> will get a release
soon. One of the late stages is Zero Hydra Failures phase: there everyone
squashes most of known build failures in <code>nixpkgs/master</code> before branching
off new <code>22.11</code> release.</p>
<p><a href="https://github.com/NixOS/nixpkgs/issues/199919" class="uri">https://github.com/NixOS/nixpkgs/issues/199919</a> tracks the effort and
has a few hints on how to locate all known build failures in various
places. So far there is a few thousands build failures in <code>nixpkgs/master</code>.</p>
<p>I had a chance to fix <a href="https://github.com/NixOS/nixpkgs/pull/199932">zsnes build failure</a>.
As you can see it’s a trivial fix. And we need a lot of fixes like these.
If you would like to help <code>nixpkgs</code> and upstream projects then please
join the effort of fixing those! Thank you in advance :)</p>
<p>Below I’ll run through an example build fix in more detail.</p>
<p>I usually start from <a href="https://hydra.nixos.org/jobset/nixpkgs/trunk" class="uri">https://hydra.nixos.org/jobset/nixpkgs/trunk</a>
periodic builder against <code>nixpkgs/master</code>. There I pick most recent
evaluation and navigate to <code>Still failing jobs</code> tab. From there I pick
failing package I like and check the build log. Apart from the build
log there is also a commit at which the package was built successully
last time. That usually helps in bisection of exact commit that broke
the package. Useful when you have no idea why the package is unhappy.</p>
<p>Let’s pick <code>synfigstudio-1.5.1</code> as a broken example. It’s build failure
is hiding in <a href="https://hydra.nixos.org/build/197644988" class="uri">https://hydra.nixos.org/build/197644988</a>. It’s last
successful build is <a href="https://hydra.nixos.org/build/194567109" class="uri">https://hydra.nixos.org/build/194567109</a> (<code>Inputs</code>
tab says it’s 667199140080a656d0be0d9c91b4bbac8828959f upstream commit
around end of September 2022).</p>
<p><a href="https://hydra.nixos.org/log/fd916xc57cfiwa3b7nm9x1i0f80czszx-synfigstudio-1.5.1.drv">Build log</a>
complains about missing <code>intltoolize</code>:</p>
<pre><code>Makefile.am: installing './INSTALL'
Makefile.am: installing './COPYING' using GNU General Public License v3 file
Makefile.am:     Consider adding the COPYING file to the version control system
Makefile.am:     for your code, to avoid questions about which license your project uses
src/gui/Makefile.am: installing 'config/depcomp'
parallel-tests: installing 'config/test-driver'
autoreconf: Leaving directory '.'
configuring
*** No intltoolize found, please install the intltool package ***</code></pre>
<p>Trying a trivial fix:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -103,6 +103,7 @@ stdenv.mkDerivation {</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     pkg-config</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     autoreconfHook</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     gettext</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="va">+    intltool</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     wrapGAppsHook</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>   ];</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>   buildInputs = [</span></code></pre></div>
<pre><code>$ nix build -f . synfigstudio
...
ok!</code></pre>
<p>Proposed fix against <code>nixpkgs</code> as <a href="https://github.com/NixOS/nixpkgs/pull/200095" class="uri">https://github.com/NixOS/nixpkgs/pull/200095</a>.
That was easy.</p>
<p>Now out of curiosity let’s see what previous change did break
<code>synfigstudio</code>:</p>
<pre><code>$ git clone https://github.com/NixOS/nixpkgs
$ cd nixpkgs

$ git bisect start origin/master 667199140080a656d0be0d9c91b4bbac8828959f
Bisecting: 4429 revisions left to test after this (roughly 12 steps)
[25b3b9b1b2af029d1a6db918d8fdb5560724681b] Merge staging-next into staging

$ git bisect run nix build -f. synfigstudio
running  'nix' 'build' '-f.' 'synfigstudio'
...

commit 0734f54ef262ad642eec1166a416bae86779ed9f
Date:   Sun Sep 25 05:49:25 2022 +0300

    treewide: move pkg-config, autoreconfHook, intltool to nativeBuildInputs

    found with nixpkgs-lint</code></pre>
<p>If we look at that patch it removed <code>intltool</code> from <code>buildInputs</code> (<code>HOST</code>
depends) instead of moving it to <code>nativeBuildInputs</code> (<code>BUILD</code> depends):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -107,21 +107,20 @@ stdenv.mkDerivation {</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>   ];</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>   buildInputs = [</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>     ETL</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>     synfig</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>     boost</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>     cairo</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>     glibmm</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>     gtk3</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>     gtkmm3</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>     imagemagick</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">-    intltool</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>     libjack2</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>     libsigcxx</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>     libxmlxx</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>     mlt</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>     gnome.adwaita-icon-theme</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>     openexr</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>     fftw</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>   ];</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>   enableParallelBuilding = true;</span></code></pre></div>
<p>Simple bug downstream-only bug. Nothing to report upstream.</p>
<p>Have fun and happy fixing!</p>

<div class="info">
    Posted on November  8, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Waypipe fixes</title>
    <link href="http://trofi.github.io/posts/265-waypipe-fixes.html" />
    <id>http://trofi.github.io/posts/265-waypipe-fixes.html</id>
    <published>2022-11-07T00:00:00Z</published>
    <updated>2022-11-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><code>waypipe</code> is a great hack! It allows you to run <code>wayland</code> applications
on a remote host and show the picture on local machine (somewhat similar
to <code>X11</code> network protocol).</p>
<p>Architecture diagram is both
<a href="https://mstoeckl.com/notes/gsoc/blog.html">simple and fascinating</a>.</p>
<p><code>waypipe</code> allows for quite a bit of flexibility in remote rendering
setup controlled by a few commandline options:</p>
<ul>
<li><code>--no-gpu</code>: use software render instead of <code>DMABUF</code>-backed GPU. Useful
to work around remote rendering bugs. Should not be required in
perfect world.</li>
<li><code>--compress</code>: compress tunneled traffic for image diffs: <code>none</code>, <code>zstd</code>, <code>lzo</code></li>
<li><code>--video</code>: stream video compression instead of pixel diffs (<code>vp9</code>, <code>h264</code>)</li>
<li><code>--video=hw</code>: use hardware video compression acceleration.</li>
</ul>
<p>By default <code>waypipe</code> enables GPU acceleration on a remote side, extracts
the result as a texture via <code>DMABUF</code> and sends deltas (or video) over the
netowork to reconstruct it locally and pass to the compositor.</p>
<p>Does not sound too complicated. Or does it? Chosen common pixel buffer
format matters here: both sides need to agree on supported configuration.
And there are so many to choose from!</p>
<p><code>wayland-info</code> can show supported modes:</p>
<pre><code>$ wayland-info
interface: 'wl_shm',                                     version:  1, name:  1
        formats (fourcc):
        0x48344241 = 'AB4H'
        0x48344258 = 'XB4H'
        0x30334241 = 'AB30'
        0x30334258 = 'XB30'
        0x36314752 = 'RG16'
        0x35314152 = 'RA15'
        0x35315852 = 'RX15'
        0x32314152 = 'RA12'
        0x32315852 = 'RX12'
        0x34324742 = 'BG24'
        0x34324241 = 'AB24'
        0x34324258 = 'XB24'
                 1 = 'XR24'
                 0 = 'AR24'
interface: 'wl_drm',                                     version:  2, name:  2
interface: 'zwp_linux_dmabuf_v1',                        version:  4, name:  3
        main device: 0xE280
        tranche
                target device: 0xE280
                flags: none
                formats (fourcc) and modifiers (names):
                0x48344241 = 'AB4H'; 0x00ffffffffffffff = INVALID
                0x48344241 = 'AB4H'; 0x00ffffffffffffff = INVALID
                0x48344241 = 'AB4H'; 0x0000000000000000 = LINEAR
                0x48344258 = 'XB4H'; 0x00ffffffffffffff = INVALID
                0x48344258 = 'XB4H'; 0x00ffffffffffffff = INVALID
                0x48344258 = 'XB4H'; 0x0000000000000000 = LINEAR
                0x30335241 = 'AR30'; 0x00ffffffffffffff = INVALID
                0x30335241 = 'AR30'; 0x00ffffffffffffff = INVALID
                0x30335241 = 'AR30'; 0x0000000000000000 = LINEAR
                0x30335258 = 'XR30'; 0x00ffffffffffffff = INVALID
                0x30335258 = 'XR30'; 0x00ffffffffffffff = INVALID
                0x30335258 = 'XR30'; 0x0000000000000000 = LINEAR
                0x30334241 = 'AB30'; 0x00ffffffffffffff = INVALID
                0x30334241 = 'AB30'; 0x00ffffffffffffff = INVALID
                0x30334241 = 'AB30'; 0x0000000000000000 = LINEAR
                0x30334258 = 'XB30'; 0x00ffffffffffffff = INVALID
                0x30334258 = 'XB30'; 0x00ffffffffffffff = INVALID
                0x30334258 = 'XB30'; 0x0000000000000000 = LINEAR
                0x34325241 = 'AR24'; 0x00ffffffffffffff = INVALID
                0x34325241 = 'AR24'; 0x00ffffffffffffff = INVALID
                ...</code></pre>
<p>Here my local machine supports a bunch of <code>LINEAR</code> formats of <code>DMABUF</code>s.
And possibly a few tiled ones (<code>INVALID</code> entries with non-zero
modifiers).</p>
<p>What happens when <code>waypipe</code> somehow gets format match wrong? Say, uses
tiled format on one side while unknowingly using <code>LINEAR</code> on another side?
With <code>waypipe-0.8.3</code> I got this beauty:
<img src="http://trofi.github.io/posts.data/265-a-waypipe-bug/gears.png" alt="broken-gears" /></p>
<p>It’s hard to see on a picture but it’s a <code>es2gears_wayland</code> application
output (port of <code>glxgears</code>). Supposed to look like that:
<img src="https://upload.wikimedia.org/wikipedia/commons/6/62/Xf86_glxgears.png" alt="working gears" /></p>
<p>In my case colors are fine, but the gears are inclined
and shredded. I had to spend a bit of time resizing the
window to get something that resembles gears at all. Otherwise
it a line soup.</p>
<p>I have machines with 2 card types: <code>amdgpu</code> (<code>nz</code>) and <code>i965</code> (<code>i7</code>).
Before any <code>waypipe</code> fixes none of <code>amdgpu-&gt;i965</code>, <code>amdgpu-&gt;amdgpu</code>,
<code>i965-&gt;amdgpu</code> GPU-accelerated piping modes worked:</p>
<ul>
<li><code>amdgpu-&gt;i965</code> generated garbled image (<a href="https://gitlab.freedesktop.org/mstoeckl/waypipe/-/issues/67">bug report</a>)</li>
<li><code>amdgpu-&gt;amdgpu</code> and <code>i965-&gt;amdgpu</code> just <code>SIGSEGV</code>ed (<a href="https://gitlab.freedesktop.org/mstoeckl/waypipe/-/issues/69">bug report</a>)</li>
</ul>
<p>I was not sure if <code>waypipe</code> is maintained or abandoned given that
nothing seemingly worked. I filed the issues anyway. To my surprise
Manuel fixed both bugs before I had a chance to look into the details!</p>
<p>Running <code>waypipe</code> from master I got a good picture out of everything I
tried! I tested a few games and applications and got the following results:</p>
<ul>
<li><code>waypipe --no-gpu ssh i7</code> is usable only for terminals and
static-mostly browsing</li>
<li><code>waypipe ssh i7</code> gives me about 7 FPS on fast-paced games. Not quite
usable for gaming, but good enough to get a picture back for minimal
runtime testing.</li>
<li><code>waypipe --video ssh i7</code> gives me about 45 FPS on fast-paced games
in 1920x1080 resolution. Not perfect for gaming, but it’s almost there!
You can certainly interact with the game without too much inconvenience.
Lower resolution easily gives 95 FPS.</li>
</ul>
<p>45 FPS (or even 95!) is a lot more than I expected from this setup. I
probably failed to enable hardware video codec compression. Tweaking that
should get both better picture quality and performance when in <code>--video=hw</code>
mode.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>waypipe ssh &lt;host&gt;</code> while slow should just work on <code>waypipe</code> from <code>git</code>.
If you still have artifacts try safest <code>waypipe --no-gpu ssh &lt;host&gt;</code>.
Best interactive I got was from <code>waypipe --video=hw ssh &lt;host&gt;</code>.
Upstream is alive and responsive.</p>
<p>And finally <a href="http://trofi.github.io/posts.data/265-a-waypipe-bug/xonotic.png">a screnshot</a>
extracted from <code>waypipe --video=hw ssh i7 nix run nixpkgs#xonotic</code>.</p>
<p>You may notice quite a bit of video codec damage on the screen. But
that’s just because <code>i7</code> is such an old slow box. I think it’s a good
result overall.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November  7, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>GCC's new -Wdangling-reference warning</title>
    <link href="http://trofi.github.io/posts/264-gcc-s-new-Wdangling-reference-warning.html" />
    <id>http://trofi.github.io/posts/264-gcc-s-new-Wdangling-reference-warning.html</id>
    <published>2022-11-05T00:00:00Z</published>
    <updated>2022-11-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Tl;DR: <code>gcc</code> <a href="https://gcc.gnu.org/PR106393">just got</a>
new <code>-Wdangling-reference</code> diagnostic to catch some use-after-free bugs
related to temporary object lifetimes in <code>c++</code> code.</p>
<p>Initially I encountered <code>-Wdangling-reference</code> at
<a href="https://gcc.gnu.org/PR107488" class="uri">https://gcc.gnu.org/PR107488</a> where <code>cppunit-1.15.1</code> failed to build
due to <code>-Wall -Werror</code> flags in the build system. That particular case
was a false positive (<code>gcc</code> bug). I also found similar build failures in
<code>libcamera</code>, <code>cvise</code>, <code>spirv-tools</code>, <code>aws-sdk-cpp</code>.</p>
<p>Once false positive was fixed build was restored on <code>cppunit</code> and
<code>spirv-tools</code>. <code>libcamera</code> and <code>cvise</code> still fail and need more triage.</p>
<p>At least on <code>aws-sdk-cpp-1.9.294</code> the bug is real
(<a href="https://github.com/aws/aws-sdk-cpp/commit/e1aceaeb211901d1985663d3de12c76913e41b90">fixed since</a>).</p>
<p>Smaller <code>aws-sdk-cpp</code> example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat a.cpp</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> C <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="va">i_</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    C<span class="op">();</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="op">&amp;</span> iRef<span class="op">(</span><span class="dt">void</span><span class="op">);</span> <span class="co">// returns i_ according to the legend</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> g<span class="op">(</span><span class="dt">int</span> i<span class="op">);</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> <span class="op">&amp;</span> i <span class="op">=</span> C<span class="op">().</span>iRef<span class="op">();</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    g<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Building:</p>
<pre><code>$ g++-13.0.0 -c a.cpp -Wall -Werror
a.cpp: In function 'void f()':
a.cpp:11:17: error: possibly dangling reference to a temporary [-Werror=dangling-reference]
   11 |     const int &amp; i = C().iRef();
      |                 ^
a.cpp:11:29: note: the temporary was destroyed at the end of the full expression 'C().C::iRef()'
   11 |     const int &amp; i = C().iRef();
      |                     ~~~~~~~~^~
cc1plus: all warnings being treated as errors</code></pre>
<p>Normally temporary objects don’t outlive statement they are created (or
even expression in older c++ standards). The special case is a
<a href="https://en.cppreference.com/w/cpp/language/lifetime">lifetime extension</a>
by taking a const lvalue reference (and a few other types of
references).</p>
<p>In case of our example reference returned by <code>iRef()</code> could be a
reference to part of <code>C()</code> object (and according to the legened it is).
This means that <code>g(i)</code> dereferences already destroyed object.</p>
<p>Unfortunately even this example is still prone to false positives: if
<code>iRef()</code> happened to return a reference to some global variable that
outlived <code>C()</code>. We dont see an <code>iRef()</code> definition here at all. Thus it
could have any lifetime. I don’t think <code>gcc</code> should warn for such cases.</p>
<p><code>libcamera</code> is one of such cases: <a href="https://gcc.gnu.org/PR107532" class="uri">https://gcc.gnu.org/PR107532</a></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Plane <span class="op">{</span> <span class="dt">unsigned</span> <span class="dt">int</span> bytesused<span class="op">;</span> <span class="op">};</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">// Passes a reference through. Does not change lifetime.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>template <span class="op">&lt;</span>typename Inner<span class="op">&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Ref <span class="op">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> Inner <span class="op">&amp;</span> i_<span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    Ref<span class="op">(</span><span class="dt">const</span> Inner <span class="op">&amp;</span> i<span class="op">)</span> <span class="op">:</span> i_<span class="op">(</span>i<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> Inner <span class="op">&amp;</span> inner<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> i_<span class="op">;</span> <span class="op">}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> FrameMetadata <span class="op">{</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    Ref<span class="op">&lt;</span><span class="dt">const</span> Plane<span class="op">&gt;</span> planes<span class="op">()</span> <span class="dt">const</span> <span class="op">{</span> <span class="cf">return</span> p_<span class="op">;</span> <span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    Plane p_<span class="op">;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> bar<span class="op">(</span><span class="dt">const</span> Plane <span class="op">&amp;</span> meta<span class="op">);</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> foo<span class="op">(</span><span class="dt">const</span> FrameMetadata <span class="op">&amp;</span> fm<span class="op">)</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> Plane <span class="op">&amp;</span> meta <span class="op">=</span> fm<span class="op">.</span>planes<span class="op">().</span>inner<span class="op">();</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    bar<span class="op">(</span>meta<span class="op">);</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>gcc-13</code> complains about it as:</p>
<pre><code>$ g++-13.0.0 -c -Wall -Werror=dangling-reference a.cpp
a.cpp: In function 'void foo(const FrameMetadata&amp;)':
a.cpp:20:19: error: possibly dangling reference to a temporary [-Werror=dangling-reference]
   20 |     const Plane &amp; meta = fm.planes().inner();
      |                   ^~~~
a.cpp:20:43: note: the temporary was destroyed at the end of the full expression '(&amp; fm)-&gt;FrameMetadata::planes().Ref&lt;const Plane&gt;::inner()'
   20 |     const Plane &amp; meta = fm.planes().inner();
      |                          ~~~~~~~~~~~~~~~~~^~
cc1plus: some warnings being treated as errors

This gcc version is this week's gcc-13 snapshot with https://gcc.gnu.org/PR107488 applied on top.</code></pre>
<p>The idiom here is to wrap a non-owning reference into a tiny value-like
object. <code>gcc</code> does not see it and thinks that wrapper’s lifetime matters
here.</p>
<h2 id="parting-words">Parting words</h2>
<p>New <code>-Wdangling-reference</code> option in <code>gcc</code> is exciting! It has a chance
to catch really nasty use-after-free cases. But it also seems to need
quite a bit more tuning to dial down false positives.</p>
<p><code>-Werror</code> is a good way to make your program fail to build for no good
reason (i.e. a benign compiler bug). But it’s also a great tool for
software developers to find bugs in code being modified (or in the
compiler :).</p>
<p>Have fun!</p>

<div class="info">
    Posted on November  5, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>GNU make 4.4 is out!</title>
    <link href="http://trofi.github.io/posts/263-gnu-make-4.4-is-out.html" />
    <id>http://trofi.github.io/posts/263-gnu-make-4.4-is-out.html</id>
    <published>2022-11-01T00:00:00Z</published>
    <updated>2022-11-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Yesterday <code>GNU make</code> project
<a href="https://lists.gnu.org/archive/html/bug-make/2022-10/msg00247.html">announced 4.4 release</a>!</p>
<p>The release contains extensive list of new additions and backward
incompatible changes in various corner cases.</p>
<p>Multi-target rule change <a href="http://trofi.github.io/posts/260-make-multiple-targets.html">mentioned before</a>
will not break bulds in <code>make-4.4</code>. Breaking change was postponed for
<code>make-4.5</code> release. <code>make-4.4</code> will print diagnostic warning for simple
cases, Worth watching for the warnings. So far I see similar warnings in
the following packages:</p>
<pre><code>dtc-1.6.1.drv:Makefile:387: warning: pattern recipe did not update peer target 'dtc-parser.output'.
ghc-9.0.2.drv:libraries/base/ghc.mk:4: warning: pattern recipe did not update peer target 'libraries/base/dist-install/build/GHC/Clock_hsc.c'.
git-2.38.1.drv:Makefile:354: warning: pattern recipe did not update peer target 'git.5'.
kmod-30.drv:Makefile:615: warning: pattern recipe did not update peer target 'depmod.5'.
libbonobo-2.32.1.drv:Makefile:802: warning: pattern recipe did not update peer target 'Bonobo_ActivationContext-imodule.c'.
ORBit2-2.14.19.drv:Makefile:1097: warning: pattern recipe did not update peer target 'test1-imodule.c'.
pciutils-3.8.0.drv:Makefile:114: warning: pattern recipe did not update peer target 'lspci.5'.
perf-linux-6.0.2.drv:Makefile:262: warning: pattern recipe did not update peer target 'perf.5'.
rethinkdb-2.4.1.drv:mk/support/build.mk:174: warning: pattern recipe did not update peer target 'install-include-gtest_1.7.0'.
sane-backends-1.0.32.drv:Makefile:957: warning: pattern recipe did not update peer target 'gamma4scanimage.5'.
shadow-4.11.1.drv:Makefile:1062: warning: pattern recipe did not update peer target 'man1/chgpasswd.8'.</code></pre>
<p>Worth fixing those upstream before next <code>make-4.5</code> release.</p>
<p>On another topic <code>make --shuffle</code>
<a href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html">mentioned before</a> is now
available in official release. This should lower the barrier for users
to try it out once <code>make-4.4</code> triclkles into downstream distributions.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>A few more gcc-13 bugs</title>
    <link href="http://trofi.github.io/posts/262-a-few-more-gcc-13-bugs.html" />
    <id>http://trofi.github.io/posts/262-a-few-more-gcc-13-bugs.html</id>
    <published>2022-10-21T00:00:00Z</published>
    <updated>2022-10-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Another 6 months have passed since I wrote anything about <code>gcc</code> bugs.
<code>gcc-13</code> should release around April next year (in about 6 months).
Being in the middle I’m dumping another set of bugs bugs I encountered:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR106551" class="uri">https://gcc.gnu.org/PR106551</a>: <code>-fanalyzer</code> ICE on <code>libpipeline-1.5.4</code> code</li>
<li><a href="https://gcc.gnu.org/PR105650" class="uri">https://gcc.gnu.org/PR105650</a>: <code>fontforge</code> miscompiled by vectorizer</li>
<li><a href="https://gcc.gnu.org/PR106142" class="uri">https://gcc.gnu.org/PR106142</a>: <code>pcre</code> miscompiled by range analyzer in middle end</li>
<li><a href="https://gcc.gnu.org/PR105492" class="uri">https://gcc.gnu.org/PR105492</a>: <code>proxmark3</code> ICE in C typedef handling of vectored types</li>
<li><a href="https://gcc.gnu.org/PR105587" class="uri">https://gcc.gnu.org/PR105587</a>: <code>av1</code> ICE in gcc vectorizer</li>
<li><a href="https://gcc.gnu.org/PR105956" class="uri">https://gcc.gnu.org/PR105956</a>: <code>boost</code> ICE in C++ template expansion</li>
<li><a href="https://gcc.gnu.org/PR106616" class="uri">https://gcc.gnu.org/PR106616</a>: <code>linux-4.19</code> ICE in ia64 backend</li>
<li><a href="https://gcc.gnu.org/PR107196" class="uri">https://gcc.gnu.org/PR107196</a>: <code>llvm</code> test suite hangup in range analyser</li>
<li><a href="https://gcc.gnu.org/PR106334" class="uri">https://gcc.gnu.org/PR106334</a>: LTO ICE on <code>nix</code> when merging debug info</li>
<li><a href="https://gcc.gnu.org/PR106540" class="uri">https://gcc.gnu.org/PR106540</a>: LTO ICE on <code>nix</code> when merging debug info (again)</li>
<li><a href="https://gcc.gnu.org/PR106831" class="uri">https://gcc.gnu.org/PR106831</a>: decimal code miscompilation on <code>mpfr</code> code</li>
<li><a href="https://gcc.gnu.org/PR105852" class="uri">https://gcc.gnu.org/PR105852</a>: ICE in template instantiation on <code>nodejs</code> code</li>
<li><a href="https://gcc.gnu.org/PR105608" class="uri">https://gcc.gnu.org/PR105608</a>: precompiled headers ICE in large macros</li>
<li><a href="https://gcc.gnu.org/PR106905" class="uri">https://gcc.gnu.org/PR106905</a>: vectorizer ICE on <code>zstd</code> code</li>
</ul>
<p>I won’t focus on any of the bugs in detail here as they are quite boring
this time.</p>
<p>As usual ICEs are simple to minimize and reduce. Runtime failures are
hardest to deal with. Especially tough one was the
<a href="https://gcc.gnu.org/PR107196">llvm-14 hangup</a>. It took me a few attempts
at minimizing the example. I failed all of them. Luckily someone found a
smaller unrelated reproducer and the bug was fixed.</p>
<p>Bug pace makes it about 2 new bugs a week. Still barely manageable :)</p>
<p>As usual here is a set of upcoming changes in <code>gcc-13</code>:
<a href="https://gcc.gnu.org/gcc-13/changes.html" class="uri">https://gcc.gnu.org/gcc-13/changes.html</a>. A few more <code>cstdint</code> headers
would have to be added to various upstreams.</p>
<p>Have fun!</p>

<div class="info">
    Posted on October 21, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Trying out wayland</title>
    <link href="http://trofi.github.io/posts/261-trying-out-wayland.html" />
    <id>http://trofi.github.io/posts/261-trying-out-wayland.html</id>
    <published>2022-09-28T00:00:00Z</published>
    <updated>2022-09-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>I switched to <code>wayland</code> from <code>X11</code> as my daily driver and don’t
regret it so far. It feels like it fixed more problems for me than
introduced to the point I’d prefer not to switch back.</p>
<h2 id="x11-and-default-dpi">X11 and default DPI</h2>
<p>I got my desktop monitor a few years ago. It is capable of
<code>3840x2160</code> output (172 DPI). My integrated video card could do only
<code>1920x1080</code> at most (78 DPI). I was a happy user of Xorg with
default 96 DPI settings. I was using <code>alacritty</code> as a terminal with
bitmap <code>Terminus</code> fonts carefully picked to avoid the need for glyph
hinting.</p>
<h2 id="x11-and-hidpi">X11 and HiDPI</h2>
<p>About a year ago I updated my desktop machine. I chose cheap videocard
that could output in <code>3840x2160</code> mode for my existing monitor. I wanted
to look at the use of vector fonts in the terminal.</p>
<p>I switched to HiDPI mode on <code>X11</code>. Without the special configuration
everything shrunk and became half the initial size! Arch Linux has a
detailed overview of the knobs you can tweak to get most of <code>Xorg</code>
environment upscaled: <a href="https://wiki.archlinux.org/title/HiDPI" class="uri">https://wiki.archlinux.org/title/HiDPI</a>.</p>
<p>I tried hard not to configure too many things manually. I did font
size <code>Xft.dpi: 192</code> tweak via <code>.Xresources</code>. Pictograms in many
applications (like <code>claws-mail</code>) didn’t pick up larger sizes. Mouse
cursor became almost invisible. <code>gtk-2</code> applications and older <code>X11</code>
applications that specify window sizes in pixels became unusable. I
fixed cursor <code>Xcursor.size: 64</code> via <code>.Xresources</code>. In applications
(toolkits) without good support for DPI scaling I had to artificially
increase font size and disabled pictograms in favour of text labels on
buttons.</p>
<p>Surprisingly I had to abandon a few GUI apps in favour of their terminal
equivalents as font scaling works so much better than UI element
scaling!</p>
<p>The result was looking ok-ish. But after an active use I noticed sever
tearing effect when I switch between workspaces. It was most pronounced
when I switched from <code>Firefox</code> workspace (usually white background) to
terminal workspace (black background). Tearing effect was a diagonal
blocky zip line seen for a very short while. I mitigated it with
<code>Option "TearFree" "true"</code> via <code>xorg.conf</code>. The mitigation only mostly
removes tearing effect, but not fully. Diagonal line gets turned to
horisontal line. The tearing frequency decreases to usable levels. But
it was still noticeable.</p>
<p>Looking at the final <code>X11</code> HiDPI setup:</p>
<ul>
<li>the TTF fonts now looked great in terminals</li>
<li>the UI sizes were not quite the same, usually smaller, sometimes
unreadable</li>
<li>some programs did not survive 2x downscaling and were too small to be
useful at all</li>
<li>a bit of tearing effect was present</li>
</ul>
<h2 id="wayland">Wayland</h2>
<p>I’ve been meaning to try <code>wayland</code> for a while but never had an excuse.
I was afraid it will break too many applications I use frequently (or
occasionally). I vaguely remembered horror stories from past years of
things like <code>wine</code> not being able to track mouse cursor properly,
possible videocard incompatibility problems (like <code>nvidia</code>). I also
was afrad I was a too long-term <code>Xorg</code> user to easily accept minor
changes I’ll face.</p>
<p>Having looked at the amount of tweaks I had to do for HiDPI and seeing
recent <a href="https://artemis.sh/2022/09/18/wayland-from-an-x-apologist.html">An X11 Apologist Tries Wayland</a>
post I decided to give it a try.</p>
<p>I used <code>i3</code> window manager in <code>Xorg</code>. Closest <code>wayland</code> sibling is
<code>sway</code>. <code>sway</code> is mostly config-compatible with <code>i3</code>: it reads
<code>~/.config/i3/config</code> if <code>~/.config/sway/config</code> does not exist.
Thus the initial switch is trivial: just run <code>sway</code>.</p>
<p><code>wayland</code> has a bit different way to handle DPI: it just assumes 96 DPI
for programs that don’t handle scaling. User needs to specify the scale
once for wayland. For me the magic command was <code>wlr-randr --output DP-3 --scale 2</code>
(or <code>output DP-3 scale 2.0</code> via <code>~/.config/sway/config</code>).</p>
<p>After that I got most old programs up to a reasonable size! It is
s omething that <code>X11</code> HiDPI could not do easily. That was a pleasant
surprise. I even undid those rare changes I had to do for HiDPI on
<code>X11</code>! <code>Xwayland</code> does a reasonable job of runnin many <code>X11</code> programs
as is. There are warts still.</p>
<p>Surprisingly under <code>wayland</code> tearing effect disappeared completely.</p>
<p>I switched to direct <code>sway</code> start from linux terminal. Before I used
<code>lightdm</code> graphical login manager (modern <code>X11</code> needed it for rootless
mode for various reasons).</p>
<p>Not everything was ideal in <code>wayland</code> world. Some unexpected things I
found:</p>
<ul>
<li><code>xeyes</code> background is garbled at start, issue known as
<a href="https://github.com/swaywm/sway/issues/3395" class="uri">https://github.com/swaywm/sway/issues/3395</a></li>
<li>clicking the links in terminal does not switch the focus to the
browser, issues known as <a href="https://github.com/swaywm/sway/issues/4830" class="uri">https://github.com/swaywm/sway/issues/4830</a></li>
<li><code>Ctrl+Enter</code> does not work in <code>mc</code> (because it relies on <code>X11</code> events).
I’m slowly reading through <a href="https://wayland-book.com/" class="uri">https://wayland-book.com/</a> to get the idea
where it should ideally be implemented: in the terminal, in <code>mc</code> or
smewhere else.</li>
</ul>
<h2 id="parting-words">Parting words</h2>
<p>When I read through <a href="https://wayland-book.com/" class="uri">https://wayland-book.com/</a> I got a nice feling of
being able to write nice smooth demos. Just like in <code>DOS</code> times when you
could write pixels right into video RAM at the right VSYNC time (<code>0x3da</code>
port).
It’s probably no harder in <code>X11</code>. I never got to look at X11 <code>MIT-SHM</code>
extension fearing of it’s lack of network transparency support. I spent
some time playning with
<a href="https://wayland-book.com/xdg-shell-basics/example-code.html" class="uri">https://wayland-book.com/xdg-shell-basics/example-code.html</a> example.</p>
<p>Architecturally <code>wayland</code> feels a lot like <code>X11</code>: both are RPC protocols
over UNIX socket to interact with objects on the server asynchronously
via requests and events. But the difference in the details is also
startling: frame perfect design gives a great user experience, many
things are a bit different that they used to be and require different
solution.</p>
<p>I like <code>sway/wayland</code> experience so far and will try to port a few small
things to it from <code>X11/OpenGL</code>.</p>
<p>Full <code>sway</code> config I got: <a href="https://github.com/trofi/home/blob/master/.config/sway/config" class="uri">https://github.com/trofi/home/blob/master/.config/sway/config</a>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 28, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>GNU make amends rules with multiple targets</title>
    <link href="http://trofi.github.io/posts/260-make-multiple-targets.html" />
    <id>http://trofi.github.io/posts/260-make-multiple-targets.html</id>
    <published>2022-09-25T00:00:00Z</published>
    <updated>2022-09-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>Starting from <code>GNU make-4.4</code> rules with multiple targets that include
commands will trigger if any of the targets does not exist. This will
require a few projects to adapt. Older versions of <code>ghc</code> are affected.</p>
<p>Typical example would need to adapt from something like:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.c %.gen.h %.gen.not-always-present:</span><span class="dt"> %.src</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CMD</span><span class="ch">)</span> ...</span></code></pre></div>
<p>to something like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.c %.gen.h:</span><span class="dt"> %.src</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CMD</span><span class="ch">)</span> ...</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.not-always-present:</span><span class="dt"> %.gen.c</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># generated by previous rule or not generated at all</span></span></code></pre></div>
<p>See <a href="https://savannah.gnu.org/bugs/index.php?63098" class="uri">https://savannah.gnu.org/bugs/index.php?63098</a> for other options.</p>
<h2 id="more-words">More words</h2>
<p><code>Makefile</code> usually defines a bunch of prerequisites per single target:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> foo.c foo.h</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LDLIBS</span><span class="ch">)</span> foo.c -o foo</span></code></pre></div>
<p>For dependency-only rules without commands it’s customary to specify
multiple targets:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># multiple targets</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo bar:</span><span class="dt"> foo.h</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co"># equivalent to</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">#   foo: foo.h</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">#   bar: foo.h</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>	touch foo</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>	touch bar</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.h:</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>	touch foo.h</span></code></pre></div>
<p>In all the cases above the behaviour is straightforward: if <code>foo.h</code>
changes then <code>foo</code> and <code>bar</code> are outdated and have to be rebuilt (if
rebuild is requested). And specifically <code>make foo</code> should cause only
<code>foo</code> rebuild. Example session:</p>
<pre><code>$ make
touch foo.h
touch foo
touch bar

$ touch foo.h
$ make foo
touch foo</code></pre>
<p>No surprise here: in a second run <code>bar</code> is not rebuilt and stays
outdated (we did not ask for it’s update). And <code>foo</code> is rebuilt
as expected.</p>
<p>In <code>GNU make</code> before <code>4.3.90</code> the same rule applied to rules with
commands as well:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dv">foo bar:</span><span class="dt"> foo.h</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>	touch foo bar</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.h:</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>	touch foo.h</span></code></pre></div>
<p>Note that the command for <code>foo bar: foo.h</code> rule always builds both
targets.</p>
<p>Let’s try to delete <code>bar</code> and ask <code>foo</code> to be rebuilt. Would <code>foo</code> get
rebuilt? Would <code>bar</code> get rebuilt? Here is the answer:</p>
<pre><code>$ make-4.3
touch foo.h
touch foo bar

$ rm bar
$ make-4.3 foo
make: 'foo' is up to date.</code></pre>
<p>Looks exactly the same as above: <code>foo</code> does not require a refresh.</p>
<p>Now let’s try <code>make-4.3.90</code>:</p>
<pre><code>$ rm -f foo bar foo.h

$ make-4.3.90
touch foo bar

$ rm bar
$ make-4.3.90 foo
touch foo bar</code></pre>
<p>That’s a different behaviour: absence of <code>bar</code> triggers both <code>foo</code>
and <code>bar</code> rebuilds. This behaviour change is intentional and is added in
<a href="https://savannah.gnu.org/bugs/?62809" class="uri">https://savannah.gnu.org/bugs/?62809</a>.</p>
<h2 id="the-impact">The impact</h2>
<p>So far it looks benign: we’ll build just a bit more than we used to
in some incremental builds. Fresh-from-zero builds should not be
affected, right? Right?</p>
<p>I installed fresh <code>make-4.3.90</code> and attempted to build the world.</p>
<h3 id="opensp-case">opensp case</h3>
<p><code>opensp-1.5.2</code> being an autotools package provides tarballs with pre-generated
files as part of the release:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.h %.cxx %.rc:</span><span class="dt"> %.msg</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>	[ ! -f <span class="ch">$(</span><span class="dt">top_srcdir</span><span class="ch">)</span>/msggen.pl ] || <span class="ch">$(</span><span class="dt">PERL</span><span class="ch">)</span> -w <span class="ch">$(</span><span class="dt">top_srcdir</span><span class="ch">)</span>/msggen.pl <span class="ch">$(</span><span class="dt">MSGGENFLAGS</span><span class="ch">)</span> <span class="ch">$&lt;</span></span></code></pre></div>
<p>All <code>.h</code>, <code>.cxx</code> and <code>.rc</code> files are already present in
<code>OpenSP-1.5.2.tar.gz</code>. User never has to run <code>msggen.pl</code> script to get
<code>opensp</code> built.</p>
<p>Except that <code>msggen.pl</code> does not always produce <code>.cxx</code> files. It does so
only for <code>.msg</code> files that have a <code>!cxx</code> directive. I noticed it only
because <code>msggen.pl</code> does not really work on any modern <code>perl</code> version
(and also because <code>nix</code> does not expose <code>perl</code> to build sandbox by default).
Fun fact: <code>OpenSP-1.5.2.tar.gz</code> was released in 2007.</p>
<p>The build fails on <code>make-4.3.90</code> as:</p>
<pre><code>$ make-4.3.90
make[2]: Entering directory '/build/OpenSP-1.5.2/lib'
[ ! -f ../msggen.pl ] || perl -w ../msggen.pl -l libModule PosixStorageMessages.msg
bash: line 1: perl: command not found
make[2]: *** [Makefile:778: PosixStorageMessages.h] Error 127 shuffle=1663959693</code></pre>
<p>The <a href="https://sourceforge.net/p/openjade/bugs/151/">proposed fix</a> makes
<code>.cxx</code> as optional by splitting out <code>.cxx</code> into a separate rule:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/lib/Makefile.am</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/lib/Makefile.am</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -125,5 +125,7 @@ SUFFIXES = .msg .m4 .rc</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> .m4.cxx:</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a> 	$(PERL) $(top_srcdir)/instmac.pl $&lt; &gt;$@</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="st">-%.h %.cxx %.rc: %.msg</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="va">+%.h %.rc: %.msg</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>	[ ! -f $(top_srcdir)/msggen.pl ] || $(PERL) -w $(top_srcdir)/msggen.pl $(MSGGENFLAGS) $&lt;</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="va">+%.cxx: %.rc</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="va">+	: # built by perl rule above</span></span></code></pre></div>
<p>Here we move <code>.cxx</code> part as a separate no-op target to avoid <code>perl</code>
build rule from triggering. Similar fix had to be applied to a few
more <code>Makefile.am</code> files in <code>opensp</code> tree.</p>
<p>The failure Does not look bad: it was easy to diagnose and workaround.</p>
<h3 id="ghc-case">ghc case</h3>
<p><code>ghc</code> was another heavy <code>GNU make</code> user until
<a href="https://gitlab.haskell.org/ghc/ghc/-/commit/6fd9b0a1c6b076ef1977db1a2ce8b9505b9a3254">recenty</a>.
Many distributions still package older <code>ghc</code> versions and still use
<code>GNU make</code> based build system. <code>ghc</code> was broken by <code>make-4.3.90</code> as:</p>
<pre><code>$ ./configure
$ make-4.3.90
...
ghc&gt;   HSC2HS libraries/hpc/dist-boot/build/Trace/Hpc/Reflect.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Constants.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable/Types.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTableProf.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Utils.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/FFI.hs
...
ghc&gt;   HSC2HS libraries/hpc/dist-boot/build/Trace/Hpc/Reflect.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Constants.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable/Types.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTableProf.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Utils.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/FFI.hs
...
ghc&gt; ghc.mk:100: *** Make has restarted itself 2 times; is there a makefile bug? See https://gitlab.haskell.org/ghc/ghc/wikis/building/troubleshooting#make-has-restarted-itself-3-times-is-there-a-makefile-bug for details.  Stop.
ghc&gt; make: *** [Makefile:126: all] Error 2 shuffle=1664105902</code></pre>
<p>Looks simple, right? No, it does not. <code>ghc</code>’s build system detected
infinite rebuild loop and bailed out. Note how <code>Reflect.hs</code> gets
generated at elast twice with <code>HSC2HS</code> haskell code generator.</p>
<p>To explain it’s mechanics I’ll build a contrived example:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>	touch foo</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dv">%.d:</span><span class="dt"> %.c</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>	echo <span class="st">&quot;foo.d: foo.c&quot;</span>  &gt; foo.d</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>	echo <span class="st">&quot;foo: foo.d foo.c&quot;</span> &gt;&gt; foo.d</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="dv">%.c:</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>	touch <span class="ch">$*</span>.c</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="kw">-include</span> foo.d</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="ot">.PRECIOUS:</span><span class="dt"> foo.c</span></span></code></pre></div>
<p>Here we dynamically generate a part of a <code>Makefile</code> by generating
<code>foo.d</code> file and by including it via <code>-include foo.d</code>. Leading
minus(<code>-</code>) ignores some error conditions when including files.</p>
<p>Let’s try it:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3.90
touch foo.c
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
touch foo</code></pre>
<p>Note that initially <code>foo</code> does not contain any dependencies.
<code>GNU make</code> has to build <code>foo.d</code> part first to see the rest of the
dependencies.</p>
<p>Interestingly <code>GNU make</code> has to re-execute itself after <code>foo.d</code> is
availble. We can see it in debug (<code>-d</code>) mode by looking up
<code>Re-executing</code> lines:</p>
<pre><code>$ rm -f foo* &amp;&amp; LANG=C make-4.3.90 -d |&amp; grep Re-
Re-executing[1]: make -d</code></pre>
<p>Now let’s extend our <code>foo.c</code> rule (<code>foo.d</code>’s dependency) to include an
unrelated and non-existent <code>foo.h</code> file as an output target:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/makefile</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/makefile</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -5,8 +5,9 @@ foo:</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a> 	echo &quot;foo.d: foo.c&quot;  &gt; foo.d</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a> 	echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="st">-%.c:</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="va">+%.c %.h:</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a> 	touch $*.c</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="va">+	# missing 'touch $*.h'</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a> -include foo.d</span></code></pre></div>
<p>Running:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3.90
touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
...</code></pre>
<p><code>GNU make</code> fell into an infinite loop. Here missing <code>foo.h</code> file triggers
<code>make</code> to always regenerate <code>foo.d</code> on each re-execution. Regenrated
<code>foo.d</code> requires another re-execution. We get the loop. Previous
<code>make-4.3</code> version did not exhibit this behaviour:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3
touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
touch foo</code></pre>
<p>Now back to <code>ghc</code>. It took me some time to read through <code>make -d</code> output
to find the offending rule. The following fix was enough to fix <code>ghc</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/rules/hs-suffix-rules-srcdir.mk</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/rules/hs-suffix-rules-srcdir.mk</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -33,9 +33,12 @@ $1/$2/build/%.hs : $1/$2/build/%.y | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a> $1/$2/build/%.hs : $1/$3/%.x | $$$$(dir $$$$@)/.</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a> 	$$(call cmd,ALEX) $$($1_$2_ALL_ALEX_OPTS) $$&lt; -o $$@</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="st">-$1/$2/build/%_hsc.c $1/$2/build/%_hsc.h $1/$2/build/%.hs : $1/$3/%.hsc $$$$(hsc2hs_INPLACE) | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="va">+$1/$2/build/%.hs : $1/$3/%.hsc $$$$(hsc2hs_INPLACE) | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a> 	$$(call cmd,hsc2hs_INPLACE) $$($1_$2_ALL_HSC2HS_OPTS) $$&lt; -o $$@</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="va">+$1/$2/build/%_hsc.c $1/$2/build/%_hsc.h: $1/$2/build/%.hs</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a><span class="va">+		: # rely on previous rule to build targets</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a> # Now the rules for hs-boot files.</span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a> $1/$2/build/%.hs-boot : $1/$3/%.hs-boot | $$$$(dir $$$$@)/.</span></code></pre></div>
<p><code>hsc2hs</code> does not always emit <code>C</code> stub part. The fix is almost identical
to <code>opensp</code> case: we split out optional output into a separate rule.</p>
<p>As <code>ghc</code> dropped <code>GNU make</code>-based build system I did not try to upstream
the change. Downstreams would have to carry something similar for older
<code>ghc</code> versions they ship.</p>
<h3 id="dtc-case">dtc case</h3>
<p><code>dtc</code> also happens to use <code>GNU make</code>-based build system. It’s <code>Makefile</code>
is a lot smaller than <code>ghc</code>’s one. The symptom was very similar to our
contrived example:</p>
<pre><code>$ make-4.3.90
...
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
...</code></pre>
<p>It took me a few hours to notice that <code>dtc</code> build was stuck.</p>
<p>The cause of cycle was again <code>make</code> re-execution caused by a missing
file in <code>bison</code> rule with multiple targets. <code>bison</code> rule contained
output that is never used by anything. The fix is trivial:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -384,4 +384,4 @@ clean: libfdt_clean pylibfdt_clean tests_clean</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="st">-%.tab.c %.tab.h %.output: %.y</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="va">+%.tab.c %.tab.h: %.y</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a> 	@$(VECHO) BISON $@</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a> 	$(BISON) -b $(basename $(basename $@)) -d $&lt;</span></code></pre></div>
<p>While at it I added a guard against infinite re-execution similar to
<code>ghc</code>’s guard:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -389,3 +389,3 @@ clean: libfdt_clean pylibfdt_clean tests_clean</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="va">+ifeq ($(MAKE_RESTARTS),10)</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="va">+$(error &quot;Make re-executed itself $(MAKE_RESTARTS) times. Infinite recursion?&quot;)</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="va">+endif</span></span></code></pre></div>
<p><code>GNU make</code> provides <code>$(MAKE_RESTARTS)</code> variable to detect <code>make</code> restarts.</p>
<p>Both fixes are proposed upatream as <a href="https://github.com/dgibson/dtc/pull/73" class="uri">https://github.com/dgibson/dtc/pull/73</a>.</p>
<h2 id="parting-words">Parting words</h2>
<p>Rules with multiple targets are tricky and fun. <code>GNU make-4.4</code> will be a
bit more eager at rebuilding all of the targets if prerequisite changes.
This will expose bugs in a few programs. They shoud be easy to adapt.
Otherwise keeping an older version of <code>GNU make</code> in parallel to the
newer one should be a reasonable workaround as well.</p>
<p>So far only <code>opensp</code>, <code>ghc</code> and <code>dtc</code> needed fixing.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 25, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Shrinking closure example</title>
    <link href="http://trofi.github.io/posts/259-shrinking-closure-example.html" />
    <id>http://trofi.github.io/posts/259-shrinking-closure-example.html</id>
    <published>2022-09-24T00:00:00Z</published>
    <updated>2022-09-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Sometimes I check <code>nixpkgs</code> packages I use for unexpected
development-only runtime dependencies. I do it mostly to shrink download
sizes for things I update frequently.</p>
<p>I developed a few hacks to find things quickly. The primary hack is to
grep dependency graph of an executable-only package (say, a game) for
<code>-dev</code> packages in it’s runtime closure. Here is an example for <code>fheroes2</code>
package:</p>
<pre><code>$ nix-store -q --graph $(nix-build -A fheroes2) | grep -P -- '-dev.*-&gt;' | grep -vP -- '-&gt;.*-dev'
&quot;4bdanp07rax5mazgjzgdwx61sf6p01qc-SDL2-2.0.22-dev&quot; -&gt; &quot;nj09vl0pzc41sn4wh7q2vlppmkv3dhiy-SDL2_mixer-2.0.4&quot; [color = &quot;burlywood&quot;];
...</code></pre>
<p>Here we see that <code>SDL2.dev</code> package is pulled into <code>SDL2_mixer.out</code>
runtime closure. It’s a bug.</p>
<p>More interesting hack is to grep full runtime closure for files that
are cleary development-only: <code>C</code> ehader files, <code>pkg-config</code> files and so
on. Here is a <code>grep</code> example again for <code>fheroes2</code>:</p>
<pre><code>$ find $(nix path-info -r $(nix-build -A fheroes2)) | grep -P [.]h$ | shuf | unnix | nl | tail -n 2
  1301  /&lt;&lt;NIX&gt;&gt;/libnfnetlink-1.0.2/include/libnfnetlink/libnfnetlink.h
  1302  /&lt;&lt;NIX&gt;&gt;/xorgproto-2021.5/include/X11/extensions/dpmsproto.h</code></pre>
<p>Here we see that <code>xorgproto</code> (header-only package) and <code>libnfnetlink</code>
(package without a separate <code>.dev</code> output) pull in development headers
into our previous game. Both are probably unintended and worth a fix.</p>
<p>To get rid of the dependencies I usually add <code>dev</code> outputs to libraries
without <code>dev</code> output like a recent
<a href="https://github.com/NixOS/nixpkgs/pull/191775/commits/d04acb8a96c2ae37dd4ff58db65dedfab8d3d79f">libfido2 example</a>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/libfido2/default.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/libfido2/default.nix</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -29,6 +29,8 @@ stdenv.mkDerivation rec {</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>   propagatedBuildInputs = [ openssl ];</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  outputs = [ &quot;out&quot; &quot;dev&quot; &quot;man&quot; ];</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>   cmakeFlags = [</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>     &quot;-DUDEV_RULES_DIR=${placeholder &quot;out&quot;}/etc/udev/rules.d&quot;</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>     &quot;-DCMAKE_INSTALL_LIBDIR=lib&quot;</span></code></pre></div>
<p>Sometime I have to explicitly change the package to not retain
build-only dependencies. Here is a recent
<a href="https://github.com/NixOS/nixpkgs/pull/191810/commits/02ba9a3d60c6c45e1df45714a2a3db714eed9c18">freedroidrpg example</a>:</p>
<pre><code>Do not embed paths to build-only depends (-I...SDL2-dev and friends)
into savefile lua comments.
--- a/src/savestruct_internal.c
+++ b/src/savestruct_internal.c
@@ -486,8 +486,8 @@ void save_game_data(struct auto_string *strout)
        autostr_append(strout,
                &quot;SAVEGAME: %s %s %s;sizeof(tux_t)=%d;sizeof(enemy)=%d;sizeof(bullet)=%d;MAXBULLETS=%d\n&quot;,
                SAVEGAME_VERSION, SAVEGAME_REVISION, VERSION, (int)sizeof(tux_t), (int)sizeof(enemy), (int)sizeof(bullet), (int)MAXBULLETS);
-       autostr_append(strout, &quot;BUILD_CFLAGS: %s\n&quot;, BUILD_CFLAGS);
-       autostr_append(strout, &quot;BUILD_LDFLAGS: %s\n&quot;, BUILD_LDFLAGS);
+       autostr_append(strout, &quot;BUILD_CFLAGS: %s\n&quot;, &quot;&lt;hidden&gt;&quot;);
+       autostr_append(strout, &quot;BUILD_LDFLAGS: %s\n&quot;, &quot;&lt;hidden&gt;&quot;);
        autostr_append(strout, &quot;VERSION: %s\n&quot;, freedroid_version);
        autostr_append(strout, &quot;--]]\n&quot;);</code></pre>
<p>Sometimes you might also need to add <code>propagatedBuildInputs = ...</code> to make
headers-only <code>dev</code> output self-contained.</p>
<p>Is it worth the hassle? If feels like development headers don’t take
that much space anyway. It’s true that some packages have tiny overhead.
But things add up quickly. For example
<a href="https://github.com/NixOS/nixpkgs/pull/191810">freedroidrpg PR</a> shrinks
runtime closure from <code>808MB</code> down to <code>450MB</code> (44% reduction). While
<a href="https://github.com/NixOS/nixpkgs/issues/191770#issuecomment-1250247308">fheroes2 RPs</a>
shrunk runtime closure from <code>622MB</code> down to <code>557MB</code> (11% reduction).</p>
<p>These are just two examples I found in 5 minutes. There are many more
packages you can fix in <code>nixpkgs</code>! Give it a try!</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>GNU make's 'Secondary Expansion' feature</title>
    <link href="http://trofi.github.io/posts/258-gnu-make-s-secondary-expansion-feature.html" />
    <id>http://trofi.github.io/posts/258-gnu-make-s-secondary-expansion-feature.html</id>
    <published>2022-09-16T00:00:00Z</published>
    <updated>2022-09-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>People occasionally ask me when
<a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">make --shuffle</a> feature will
be released. The short answer is: I don’t know. I would like to have it
released sooner but I also understand that stabilization requires real
work to get the release out.</p>
<p>But fear not, not all is lost! Paul sent out
<a href="https://lists.gnu.org/archive/html/bug-make/2022-09/msg00003.html">an announcement</a>
a few days ago that the new release is in the works!</p>
<p>To get some confidence that <code>make --shuffle</code> is not completely broken I
gave current <code>master</code> a go.</p>
<p>The setup was straightforward as usual: I added current <code>make</code> snapshot
locally into <code>nixpkgs</code> and tried to build my desktop system with it
using <code>nix build -f. nixos system</code>.</p>
<p>Quiz question: did <code>make --shuffle</code> still work? :)</p>
<p>Let’s find out.</p>
<h2 id="autoconf">autoconf</h2>
<p>A few seconds into the build the first failed package was
<code>autoconf-2.71</code> (and <code>autoconf-2.69</code> slightly later). The symptom
was the following suspicious build failure:</p>
<pre><code>$ make
...
bash: line 1: env: command not found
make  all-am
bash: line 1: make: command not found
make: *** [Makefile:928: all] Error 127</code></pre>
<p><code>make: command not found</code> suggested something broke the <code>PATH</code>
environment variable. Grepping <code>automake</code>s source for <code>PATH</code> I was lucky
to find this code snippet:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># In cfg.mk:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dv">export PATH = $(shell echo &quot;`pwd`/tests:</span><span class="ch">$$</span><span class="dt">PATH&quot;)</span></span></code></pre></div>
<p>Until then I had no idea about <code>export</code> keyword in <code>GNU make</code>! This keyword
exports <code>make</code>-level variables to child sub-processes. Mostly
intended for sub-<code>make</code>. But <code>$(shell ...)</code> calls work as well.</p>
<p>If you are not very familiar with <code>GNU make</code> the code above might not look
tricky. Let’s talk a bit about various variable assignments.
<code>GNU make</code> has that many:</p>
<pre><code>     IMMEDIATE = DEFERRED
     IMMEDIATE ?= DEFERRED
     IMMEDIATE := IMMEDIATE
     IMMEDIATE ::= IMMEDIATE
     IMMEDIATE :::= IMMEDIATE-WITH-ESCAPE
     IMMEDIATE += DEFERRED or IMMEDIATE
     IMMEDIATE != IMMEDIATE</code></pre>
<p>Yeah, it’s 7 types of them. We use deferred one in the example
above. From what I understand <code>POSIX</code> defines only the first
<code>IMMEDIATE = DEFERRED</code>.</p>
<p>I’ll quote <code>info make</code> here for details:</p>
<pre><code>3.7 How 'make' Reads a Makefile
===============================

GNU 'make' does its work in two distinct phases.  During the first phase
it reads all the makefiles, included makefiles, etc.  and internalizes
all the variables and their values and implicit and explicit rules, and
builds a dependency graph of all the targets and their prerequisites.
During the second phase, 'make' uses this internalized data to determine
which targets need to be updated and run the recipes necessary to update
them.

   It's important to understand this two-phase approach because it has a
direct impact on how variable and function expansion happens; this is
often a source of some confusion when writing makefiles.  Below is a
summary of the different constructs that can be found in a makefile, and
the phase in which expansion happens for each part of the construct.

   We say that expansion is &quot;immediate&quot; if it happens during the first
phase: 'make' will expand that part of the construct as the makefile is
parsed.  We say that expansion is &quot;deferred&quot; if it is not immediate.
Expansion of a deferred construct part is delayed until the expansion is
used: either when it is referenced in an immediate context, or when it
is needed during the second phase.</code></pre>
<p>The main ones I’ll focus on here are <code>:=</code> (immediate) vs <code>=</code> (deferred).</p>
<p>Here is one possible example that illustrates the difference:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">AI </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">AD  </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;AI=</span><span class="ch">$(</span><span class="dt">AI</span><span class="ch">)</span><span class="st"> BI=</span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span><span class="st">&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;AD=</span><span class="ch">$(</span><span class="dt">AD</span><span class="ch">)</span><span class="st"> BD=</span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span><span class="st">&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="dt">BI </span><span class="ch">:=</span><span class="st"> BI-val</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="dt">BD  </span><span class="ch">=</span><span class="st"> BD-val</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
AI= BI=BI-val
AD=BD-val BD=BD-val</code></pre>
<p>Here <code>AI</code> refers to <code>BI</code> value before <code>BI</code> is defined. While <code>AD</code> refers
to <code>BD</code> value after <code>BD</code> is defined. <code>:=</code> is very useful for cases when
right hand side is computationally non-trivial and thus should not be
duplicated.</p>
<p>Typical deferred assignment error is an accidental recursion:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">C </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">C</span><span class="ch">)</span><span class="st"> also-bar</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;C=</span><span class="ch">$(</span><span class="dt">C</span><span class="ch">)</span><span class="st">&quot;</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ LANG=C make
Makefile:1: *** Recursive variable 'C' references itself (eventually).  Stop.</code></pre>
<p>Going back to our initial example of <code>export PATH = $(shell echo $$(pwd)/tests:$$PATH")</code>
here <code>export</code> attempts to export a <code>PATH</code> make variable as environment
for ran subprocesses like <code>$(shell ...)</code> call in this example. It also
tries to base the new <code>PATH</code> value on existing shell-defined <code>PATH</code>
value. So what happens first? Variable export before <code>shell</code> call?
Or variable definition after <code>shell</code> call? If <code>:=</code> were to be used
instead then it would be more straightforward: export would probably
happen after.</p>
<p>The answer is … <code>make</code> did change the actual behaviour recently. To
quote the <a href="https://git.savannah.gnu.org/cgit/make.git/commit/NEWS?id=98da874c43035a490cdca81331724f233a3d0c9a">NEWS file</a>:</p>
<pre><code>* WARNING: Backward-incompatibility!
  Previously makefile variables marked as export were not exported to commands
  started by the $(shell ...) function.  Now, all exported variables are
  exported to $(shell ...).
  To detect this change search for 'shell-export' in the .FEATURES variable.</code></pre>
<p>To avoid this ambiguity <code>autoconf</code> was trivially fixed with
<a href="https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=31f673434ee402258b45e958c88acc8725d82b1a">the following patch</a>
upstream:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/cfg.mk</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/cfg.mk</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -20,2 +20,3 @@</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a> # Build with our own versions of these tools, when possible.</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="st">-export PATH = $(shell echo &quot;`pwd`/tests:$$PATH&quot;)</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="va">+export PATH := $(or $(PWD),$(shell pwd))/tests:$(PATH)</span></span></code></pre></div>
<p>Meanwhile <code>GNU make</code> also
<a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=70ba0357a080f72b9f5912f16b3ffc095db381e6">added graceful fallback</a>
to this case as exporting empty variable is probably not very useful.
Thus existing <code>autoconf</code> releases should still compile successfully
with <code>GNU make</code> from <code>master</code>.</p>
<p>Phew. This failure was not related to <code>--shuffle</code>.</p>
<h2 id="glibc">glibc</h2>
<p>Once <code>autoconf</code> was fixed I resumed world rebuild. The next failure was
in <code>glibc</code>:</p>
<pre><code>    $ make --shuffle
    ...
    make  -C localedata install-locales
    make: invalid shuffle mode: '1662724426r'</code></pre>
<p><code>GNU make</code> complains at unexpected <code>r</code> trailing letter in
<code>--shuffle=1662724426r</code> parameter. That suffix comes from … <code>glibc</code>’s
own <code>Makefile</code>:</p>
<pre><code># In glibc/Makerules:
# Don't define any builtin rules.
MAKEFLAGS := $(MAKEFLAGS)r</code></pre>
<p>Normally <code>MAKEFLAGS</code> contains options passed to <code>make</code>:</p>
<pre><code>$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f -
MAKEFLAGS=
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s
MAKEFLAGS=s
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s -r
MAKEFLAGS=rs
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s -r --shuffle
MAKEFLAGS=rs --shuffle=1663776045</code></pre>
<p>Note that <code>MAKEFLAGS</code> value does not contain dashes in option names.</p>
<p><code>GNU make</code> also allows extending <code>MAKEFLAGS</code> from within <code>Makefile</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">MAKEFLAGS </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">MAKEFLAGS</span><span class="ch">)</span><span class="st"> --no-builtin-rules</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo MAKEFLAGS=</span><span class="ch">$(</span><span class="dt">MAKEFLAGS</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
MAKEFLAGS=r
$ make --no-builtin-variables
MAKEFLAGS=rR
$ make --no-builtin-variables --no-print-directory
MAKEFLAGS=rR --no-print-directory</code></pre>
<p><code>--no-builtin-variables</code> and <code>-R</code> are equivalent. <code>GNU make</code> picks short
form of an option if available.</p>
<p>Note how short single-letter options get globbed together in the first
word while long options (without short option equivalent) are passed
separately. <code>NEWS</code> file tells us it’s another recent behaviour change:</p>
<pre><code>* WARNING: Backward-incompatibility!
  Previously only simple (one-letter) options were added to the MAKEFLAGS
  variable that was visible while parsing makefiles.  Now, all options
  are available in MAKEFLAGS.</code></pre>
<p><a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=2d7ed98add14f75041499ac189696c9bd3d757fe">The fix</a>
exceeded 1 liner bucket as <code>glibc</code> also introspected <code>MAKEFLAGS</code> in
other places for <code>-s</code> (<code>--silent</code>) option presence. Relevant part of
the fix:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makerules</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makerules</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -796,2 +796,2 @@ endif</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a> # Don't define any builtin rules.</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="st">-MAKEFLAGS := $(MAKEFLAGS)r</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="va">+MAKEFLAGS := $(MAKEFLAGS) -r</span></span></code></pre></div>
<p>No complications here.</p>
<p>Again, not exactly <code>--shuffle</code>-specific bug. Using of any long option
would break <code>glibc</code> build.</p>
<h2 id="ghc">ghc</h2>
<p>At this point <code>autoconf</code> and <code>glibc</code> fixes above unblocked many other
package builds. Most other projects’ <code>Makefile</code>s are not that
complicated and don’t rely on <code>GNU make</code> extensions. They usually limit
themselves to <code>POSIX make</code> features. <code>glibc</code> is a notable exception.
That makes it a good project to test new <code>GNU make</code> versions.</p>
<p>Believe it or not there is even heavier user of <code>GNU make</code>! It is
<code>ghc</code> (the <code>Glasgow Haskell Compiler</code>)! The small caveat is that it
migrates off <code>GNU make</code> to own <code>haskell</code>-based <code>hadrian</code> build system.
Many distributions still package previous versions of <code>ghc</code> and use
<code>GNU make</code> to build it.</p>
<p>In case of <code>ghc</code>, <code>GNU make</code> itself managed to <code>SIGSEGV</code> itself:</p>
<pre><code>$ make --shuffle
...
Configuring ghc-bin-9.0.2...
Warning: 'data-dir: ..' is a relative path outside of the source tree. This
will not work when generating a tarball with 'sdist'.
&quot;rm&quot; -f utils/deriveConstants/dist/build/.depend.haskell.tmp
&quot;rm&quot; -f utils/deriveConstants/dist/build/.depend.c_asm.tmp
&quot;rm&quot; -f utils/genprimopcode/dist/build/.depend.c_asm.tmp
make: *** [Makefile:124: all] Segmentation fault (core dumped) shuffle=1663318833
make: INTERNAL: Exiting with 14 jobserver tokens available; should be 16!</code></pre>
<p>It might not be obvious, but <code>Segmentation fault</code> happens within
<code>GNU make</code> itself, not just some tool it runs. Jobserver token loss
is another sign of things went wrong with <code>make</code> process itself.</p>
<p>This time crash happened only if I used <code>make --shuffle</code> option.</p>
<p>I was not able to craft a simple crashing example. I spent some time in
<code>gdb</code> to understand the failures mode. I found that it has something to
do with another fun <code>GNU make</code> extension: <code>Secondary Expansion</code>. I’ll
quote another bit of <code>GNU make</code> manual entry:</p>
<pre><code>3.9 Secondary Expansion
=======================

Previously we learned that GNU 'make' works in two distinct phases: a
read-in phase and a target-update phase (*note How 'make' Reads a
Makefile: Reading Makefiles.).  GNU make also has the ability to enable
a _second expansion_ of the prerequisites (only) for some or all targets
defined in the makefile.  In order for this second expansion to occur,
the special target '.SECONDEXPANSION' must be defined before the first
prerequisite list that makes use of this feature.</code></pre>
<p>I’ll start from non-working example to describe an intent for typical
use of <code>Secondary Expansion</code>. Suppose you want to use the list of
prerequisites dynamically read from external command (<code>ghc</code> for example
parses <code>.cabal</code> build files to extract prerequisites). I will emulate
external command with a simple <code>$(shell echo i1 i2 i3)</code> call.</p>
<p>Naive non-working approach to achieve would look like that:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">ALL_INPUTS</span><span class="ch">)</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo Inputs: </span><span class="ch">$^</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="dv">i%:</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># no-op</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Has to go after rule defined above. In ghc it's based on external</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="co"># command that dynamically builds a list of prerequisites:</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="dt">ALL_INPUTS </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> echo i1 i2 i3</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
Inputs:</code></pre>
<p>The example above attempted to get <code>i1 i2 i3</code> as a dynamic input and
failed. <code>$(ALL_INPUTS)</code> is expanded to an empty string. <code>GNU make</code>
allows this style of dependencies when <code>.SECONDEXPANSION:</code> phony
target is present in the <code>Makefile</code>:</p>
<p>Here is a working example closer to what <code>ghc</code> uses:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.SECONDEXPANSION:</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> </span><span class="ch">$$</span><span class="dt">(ALL_INPUTS)</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo Inputs: </span><span class="ch">$^</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="dv">i%:</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># $@ no-op</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="co"># Has to go after rule defined above. In ghc it's based on external</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="co"># command that dynamically builds a list of prerequisites:</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="dt">ALL_INPUTS </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> echo i1 i2 i3</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3</code></pre>
<p>Now we get our dynamic input as expected.</p>
<p>The magic happens around <code>$$(ALL_INPUTS)</code> expression: first it is
expanded to <code>$(ALL_INPUTS)</code> and on second expansion it uses already
available result. There are other simpler ways to get the same effect
(like moving variable assignment earlier). But that’s what <code>ghc</code> decided
to use.</p>
<p>While this simple example did not crash <code>GNU make</code> it did show me a
symptom of the problem. <code>make --shuffle</code> had no effect on prerequisite
traversal order:</p>
<pre><code>$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3</code></pre>
<p>Prerequisites were never reordered. But they were supposed to! Yet again
<code>NEWS</code> entry hinted at why it started happening only recently:</p>
<pre><code>* GNU make was performing secondary expansion of all targets, even targets
  which didn't need to be considered during the build.  In this release
  only targets which are considered will be secondarily expanded.</code></pre>
<p>In other words before the change order of events was:</p>
<ol type="1">
<li>read</li>
<li>expand</li>
<li><em>second expand (of everything)</em></li>
<li><em>shuffle</em></li>
<li>execute</li>
</ol>
<p>After the change:</p>
<ol type="1">
<li>read</li>
<li>expand</li>
<li><strong>shuffle</strong></li>
<li><strong>second expand (of built targets only)</strong></li>
<li>execute</li>
</ol>
<p>The bug mechanics: <code>shuffle</code> step assumed no changes in prerequisite
lists would happen after. Moving <code>second expand</code> step behind it broke
that assumptions: it cancelled shuffling effect (minor problem)
and introduced dangling references to freed memory (major problem).</p>
<p>Once understood the fix was trivial: refresh shuffle data if prerequisite
list was changed. The patch is
<a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=ca4234c4b550618df2194e0617c43bb12524f820">a few-liner</a>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/file.c</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/file.c</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -576,6 +577,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>   struct dep **dp;</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>   const char *fstem;</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>   int initialized = 0;</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  int changed_dep = 0;</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>   if (f-&gt;snapped)</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>     return;</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -664,6 +666,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>       if (new == 0)</span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>         {</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>           *dp = d-&gt;next;</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="va">+          changed_dep = 1;</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>           free_dep (d);</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>           d = *dp;</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>           continue;</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -672,6 +675,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>       /* Add newly parsed prerequisites.  */</span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>       fstem = d-&gt;stem;</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a>       next = d-&gt;next;</span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a><span class="va">+      changed_dep = 1;</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a>       free_dep (d);</span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a>       *dp = new;</span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>       for (dp = &amp;new, d = new; d != 0; dp = &amp;d-&gt;next, d = d-&gt;next)</span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -688,6 +692,12 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>       *dp = next;</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a>       d = *dp;</span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a>     }</span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a><span class="va">+    /* Shuffle mode assumes '-&gt;next' and '-&gt;shuf' links both traverse the same</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a><span class="va">+       dependencies (in different sequences).  Regenerate '-&gt;shuf' so we don't</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a><span class="va">+       refer to stale data.  */</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a><span class="va">+    if (changed_dep)</span></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a><span class="va">+      shuffle_deps_recursive (f-&gt;deps);</span></span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true" tabindex="-1"></a> /* Add extra prereqs to the file in question.  */</span></code></pre></div>
<p>We track all the places where prerequisite list is modified and then
rebuild shuffle list if any changes happened to the list.</p>
<p>The fix restored shuffling property and fixed <code>SIGSEGV</code> when building
<code>ghc</code>:</p>
<pre><code>$ make --shuffle
: # i2 no-op
: # i3 no-op
: # i1 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i3 no-op
: # i2 no-op
Inputs: i1 i2 i3</code></pre>
<p>This one was clearly <code>--shuffle</code>-related bug.</p>
<h2 id="parting-words">Parting words</h2>
<p>Trying out a pre-release was totally worth it. I found out about
existence of <code>export</code> and <code>Secondary Expansion</code> extensions.</p>
<p>The test
uncovered two bugs in upstream projects. Upstreams were very quick to
accept fixes. The bugs happened in somewhat obscure parts of <code>GNU make</code>
specific extensions: environment variable exports, <code>MAKEFLAGS</code> variable
update (and introspection).</p>
<p>The test also exposed a bug in <code>make --shuffle</code> implementation for an
advanced <code>Secondary Expansion</code> feature which was also an easy one to
fix.</p>
<p>After the fixes above I did not find any other related breakages.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 16, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>A year on NixOS</title>
    <link href="http://trofi.github.io/posts/257-a-year-on-nixos.html" />
    <id>http://trofi.github.io/posts/257-a-year-on-nixos.html</id>
    <published>2022-09-04T00:00:00Z</published>
    <updated>2022-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Discourse told me that one year has passed since I switched over to
<code>NixOS</code> for my main desktop system. It feels like it was yesterday.
Time to write a bit of retrospective of past 6 (or so) months.</p>
<h2 id="system-maintenance">System maintenance</h2>
<p>Nightly <code>nixos-unstable</code> automatic upgrades are surprisingly fast and
smooth. I had one period when I was not able to update
<a href="https://github.com/NixOS/nixpkgs/pull/185988">claws-mail</a>
for Perl-related build failures. I ended up doing nothing for a week and
somebody fixed it for me! My system was failing updates all that week.
It did not prevent me in any way from doing my usual activities.</p>
<p>I had to tweak <code>/etc/nixos/</code> config 1 time to adapt to option rename.
The warning message told me new name of the field: <code>nix.systemFeatures</code>
-&gt; <code>nix.settings.system-features</code>. That was smooth as well.</p>
<p>I don’t remember any other maintenance-related activities I had to do
to make the desktop working. I rebooted 2-3 times each month for
various unrelated reasons (power loss, multi-day travel, etc.). Reboots
exposed me to very fresh kernel versions each time. I had no troubles
with them either.</p>
<h2 id="unusual-software">Unusual software</h2>
<p>Of slightly unusual deeds I installed 32-bit wine with <code>pipewire</code> socket
passed to a sandboxed used from my main user. That went very smooth and
effortless as well.</p>
<p>Otherwise I’m afraid I don’t need anything special from the
distribution. Most packages I need are widely used and the rare ones
missing are trivial to package in a personal overlay. Just yesterday
I added a trivial <a href="https://github.com/trofi/uselex">uselex.rb</a> expression:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">stdenv</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">ruby_3_1</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">binutils-unwrapped-all-targets</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">unstableGitUpdater</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2017-07-28&quot;</span><span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;dfddc3dc839500edceca4665af7ee38f90e92081&quot;</span><span class="op">;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-4/HK+E1iiwMIvDwo+IheA+tETref9tCAG6WcB34CbKE=&quot;</span><span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> ruby_3_1 <span class="op">];</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="va">postPatch</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="st">    patchShebangs</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="st">    substituteInPlace uselex.rb --replace &quot;'nm'&quot; &quot;'</span><span class="sc">${</span>binutils<span class="op">-</span>unwrapped<span class="op">-</span>all<span class="op">-</span>targets<span class="sc">}</span><span class="st">/bin/nm'&quot;</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="st">    install -d $out/bin</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="st">    install -m 0755 uselex.rb $out/bin</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Update as:</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>  <span class="co">#    nix-shell ./maintainers/scripts/update.nix --argstr package uselex --arg include-overlays true</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>  <span class="va">passthru</span>.<span class="va">updateScript</span> <span class="op">=</span> unstableGitUpdater <span class="op">{</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>  <span class="va">meta</span> <span class="op">=</span> <span class="kw">with</span> lib<span class="op">;</span> <span class="op">{</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Look for USEless EXports in object files.&quot;</span><span class="op">;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>    <span class="va">homepage</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="va">license</span> <span class="op">=</span> licenses.publicDomain<span class="op">;</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>    <span class="va">maintainers</span> <span class="op">=</span> <span class="kw">with</span> maintainers<span class="op">;</span> <span class="op">[</span> trofi <span class="op">];</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>    <span class="va">platforms</span> <span class="op">=</span> platforms.all<span class="op">;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="community-support">Community support</h2>
<p>I keep being amazed by inclusivity and depth of technical expertise of
<code>NixOS</code> community. Maybe it’s just because I did not break anything
major yet? :)</p>
<p>I almost never see any blame or aggressive behaviour. And when rare
incidents happen people do step in and explain why it’s not OK and
suggest various ways out of a conflict. That makes the community a great
collaborative environment. At least from the far viewpoint I interact
with it.</p>
<p>People have the courage to develop things I would never dare
to tackle alone (but I would be happy to help with small improvements).
One example is cross-compilation of huge chunk of <code>nixpkgs</code>
(<a href="https://github.com/MidnightCommander/mc/commit/6b67d231a2f447cf5f33180c618c2a67849e6d15">mc example</a>).</p>
<p>I keep learning new details about <code>nixpkgs</code> and other software. It’s
so fun!</p>
<p>I don’t have the time to follow all the <code>NixOS Dev</code> matrix chat I’m
in. It’s just too many updates usually. But the other ones are low
traffic enough. My favourites are probably <code>Nix Cross Compiling</code>
(where the main topic is toolchains and related issues) and <code>Staging</code>
(where I mostly track merges of <code>staging-next</code> into <code>master</code> out of
idle curiosity).</p>
<p>I do have time to follow relatively low traffic
<a href="https://discourse.nixos.org/" class="uri">https://discourse.nixos.org/</a> and occasionally post announcements there
myself.</p>
<h2 id="maintenance-model">Maintenance model</h2>
<p>At first I thought that <code>nixpkgs</code> maintenance model is too simple to be
viable for a large package base: most package updates are not made by
(or even approved by) package maintainers. It felt a bit fragile: after
all there is always a chance of some fancy detail about the package that
needs to be kept in mind.</p>
<p>At least the partial answer to that is that <code>nixpkgs</code> has quite a bit of
tests. If new <code>nixpkgs</code> can boot my desktop in <code>qemu</code> after a <code>binutils</code>
update it does not really matter if there are minor mistakes in it. We
can always revise it and fix later.</p>
<p>Most trivial package updates are done by … an automated system! Just
look at <a href="https://github.com/NixOS/nixpkgs/graphs/contributors">these stats</a>.
It is so surreal to allow the bot file update PRs. But on the other hand
for smaller packages it’s exactly what humans would have to do anyways.
Why not pre-populate the PR with mechanical details already sorted?
Reviewers (and better yet automated tests) can always object to special
cases of more complex packages.</p>
<p>Having finished recently <a href="https://github.com/NixOS/nixpkgs/pull/185297">binutils-2.39 update</a>
I would say maintainership works great. I hope we will break no packages
by that somewhat disruptive (API change wise) update.</p>
<h2 id="home-server-experience">Home server experience</h2>
<p>I don’t have anything to complain about. Over past 6 months I played a
bit with distributed compilation which worked great. Otherwise I did not
do any major configuration changes on the server. It still serves <code>HTTP</code>
and a few services. Required zero maintenance from me over that period.</p>
<p>Automatic reboots on kernel upgrade makes server’s uptime below 2-3 days
on average. It does not feel disruptive and adds a bit of peace of mind
against exploits against outdated software.</p>
<h2 id="bugs-what-bugs">Bugs? What bugs?</h2>
<p><code>NixOS</code>-specific bugs do certainly happen time to time.</p>
<p>Mostly they stem from the fact that default paths are unusual (usually
easy to deal with) and split across multiple locations (sometimes
requires patching or clever symlink hacks).</p>
<p>Past examples are <a href="https://github.com/NixOS/nixpkgs/pull/187694">libtool</a>
embedding <code>/nix/sotore</code> paths to <code>make dist</code> tarballs and non-working
<a href="https://github.com/NixOS/nixpkgs/issues/189753">include-what-you-use</a> due
to dynamic headers location.</p>
<h2 id="parting-words">Parting words</h2>
<p>I think <code>NixOS</code> works well for me so far. If you still did not consider
trying it as well :)</p>

<div class="info">
    Posted on September  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Porting to pure Bison API</title>
    <link href="http://trofi.github.io/posts/256-porting-to-pure-bison-api.html" />
    <id>http://trofi.github.io/posts/256-porting-to-pure-bison-api.html</id>
    <published>2022-09-04T00:00:00Z</published>
    <updated>2022-09-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few weeks ago I started code cleanup for
<a href="https://github.com/trofi/ski/commits/master">Ski</a>.
Upstream <code>Ski</code> released in 2007 last time. I think it was actively
developed in 2003. That makes <code>Ski</code> about a 20 years old codebase.
It was more of a proof-of-concept makeshift project to help early
adopters than a piece of finished and maintained work. But it works
surprisingly good even today.</p>
<p>I would like to add a few medium sized features to <code>Ski</code>. I am a bit
afraid to make non-trivial changes. I decided to do do minor cleanup
first.</p>
<p>To deal with code health of old projects that I pretend to own (and thus
have the ability to do large cleanup changes) I have a few hacks
available. It mostly boils down to enabling a few compiler warnings to
use as suggestions for making things a bit more explicit.</p>
<p>I’ll outline some tricks I used for <code>Ski</code> and then will focus on
<code>Bison</code> API update.</p>
<h2 id="simple-tricks">Simple tricks</h2>
<p>C has a few language warts that allow you write code that is very likely
incorrect and yet standard compliant. A good example is implicit
function declaration behaviour. Luckily <code>gcc</code> has a set of warning to
catch those.</p>
<h3 id="implicit-variable-and-function-declarations">Implicit variable and function declarations</h3>
<p>To catch implicit function and variables <code>gcc</code> has at least the following
flags:</p>
<ul>
<li><code>-Werror=implicit-int</code></li>
<li><code>-Werror=implicit-function-declaration</code></li>
<li><code>-Werror=strict-prototypes</code></li>
</ul>
<p>I used these warnings successfully in
<a href="https://github.com/xmms2/xmms2-devel/commit/1dc66e4099e5b08f59bca86d7979f057fd82eba7">xmms2</a>,
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=80970472179a45609c0b11b80619bc8c32b15f77">linux kernel</a>
and and other projects.</p>
<p>Linux kernel is especially prone to these bugs as it heavily uses top
level macros a lot. lack of header inclusion for such a macro usually
turns macro call into a function declaration without any build failure.</p>
<p>Related build failures are still being fixed in <code>linux</code> kernel to this
day. Header inclusion changes are happening there all the time to speed
builds up and huge amount of <code>CONFIG</code> options increases the chance of
detting into a combination where a few headers got lost.</p>
<p>I’d say it’s a must have set of warning flags for a <code>C</code>-based project.</p>
<h3 id="modernized-configure.acmakefile.am">Modernized configure.ac/Makefile.am</h3>
<p>If the outdated project is <code>autotools</code>-based then chances are it uses
many deprecated and invalid constructs. Sometimes a project has complex
<code>./autogen.sh</code> script. My goal is usuallly to turn that script into a
single <code>autoreconf -i -f -W all</code> invocation. Ideally <code>configure.ac</code> and
<code>Makefile.am</code> should be enough to configure all the other details.
<code>-W all</code> helps catching deprecated macros and other lint errors.</p>
<p>For <code>Ski</code> I did the following changes:</p>
<ul>
<li>ported from autoconf <code>2.13</code>-ish to <code>autoconf-2.70</code></li>
<li>used <code>AC_CONFIG_AUX_DIR([build-aux])</code> to move most auxiliary files
into a <code>build-aux/</code> subdirectory</li>
<li>used <code>AM_SILENT_RULES([yes])</code> to make builds less verbose to make
warnings stand out</li>
<li>made <code>Makefile.am</code> non-recursive to make cross-directory dependencies
simpler</li>
<li>used <code>ACLOCAL_AMFLAGS = -I m4 -I macros --install</code> to vendor external
<code>m4</code> macros as separate <code>.m4</code> files instead of globbing them together
into a single <code>aclocal.m4</code></li>
</ul>
<h3 id="catch-inconsistent-function-prototypes-and-mark-functions-local">Catch inconsistent function prototypes and mark functions local</h3>
<p><code>Ski</code> is a bit special in a way it handles prototypes. For an example
file <code>foo.c</code> with <code>void foo(void)</code> function there was usually no
according <code>foo.h</code> available. Instead various <code>bar.c</code> and <code>baz.c</code> files
had their own local imports of <code>void foo(void)</code> duplicating the prototype.</p>
<p>The scheme has a few problems: build does not break when you change <code>foo()</code>’s
prototype in <code>foo.c</code> alone, 10x prototype duplication is common making
it harder to change, function prototypes don’t always agree on the
argument count a function has (<a href="https://github.com/trofi/ski/commit/c4de04f3b27424dd0caf5e89bf93ceab8cd59af1">example</a>).</p>
<p>To find such stray prototypes I use a few tricks:</p>
<ul>
<li>Use <code>-Wmissing-declarations</code> to detect cases where <code>foo.c</code> does
not have according header to include to verify prototype consistency.
That way I spot lack of <code>foo.h</code> headers, create them and consolidate
such prototype there. It’s also a good time to sprinkle <code>static</code>
keyword if a symbol happens to be used only in a single <code>.c</code> file.</li>
<li>Use <code>-flto</code> to detect prototype mismatches across such <code>.c</code> files.</li>
<li>Use <code>-Wunused-function -Wunused-variable</code> to detect unused
newly marked <code>static</code> functions.</li>
<li>Use <a href="https://trofi.github.io/posts/186-announce-uselex.rb-useless-exports-extinguisher.html">uselex.rb</a>
to spot more needlessly exported symbols to sprinkle even more <code>static</code>
annotations around.</li>
<li>Use <code>-ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--print-gc-sections</code>
to catch even more unused code and variables where <code>uselex.rb</code> was not
able to do it. Linkers are som much better at traversing graphs :)</li>
</ul>
<h3 id="make-headers-self-contained-and-minimal">Make headers self-contained and minimal</h3>
<p>When I start adding <code>#include "foo.h"</code> around I frequently notice that
some of them are incomplete and require including other headers themselves.
I usually use syntax-check the headers to fund such cases:</p>
<pre><code>$ for h in $(find -name '*.h'); do
    gcc -DHAVE_CONFIG_H=1 -fmax-errors=1 -I. -Isrc{,/decoder,/encoder} -fsyntax-only -c $h ||
      echo &quot;BROKEN H: $h&quot;
  done</code></pre>
<p>To get rid of unused header inclusions I usually use
<a href="https://github.com/include-what-you-use/include-what-you-use">include-what-you-use</a>.</p>
<h3 id="switch-from-lex-and-yacc-to-flex-and-bison-apis">Switch from lex and yacc to flex and bison APIs</h3>
<p><code>lex</code> and <code>yacc</code> interfaces have a few warts in their APIs. The major
one I would say is that both heavily use global variables to pass data
from one to another (and for user to write semantic actions):
<code>yylval</code>, <code>yyin</code>, <code>yyout</code> and a bunch of helper macros to work with them.</p>
<p>One of immediate benefits of switching from <code>yacc</code> to <code>bison</code> is ability
to enable <code>--warnings</code> reporting.
It is able to flag various grammar deciciencies like <a href="https://github.com/trofi/ski/commit/89c94225c3b4851f09daa54c5b0286a5726c6af0">this one</a>,
or <a href="https://github.com/skvadrik/re2c/commit/7e7c4b97af51f5e343faccacde2a58b9da5a1192">this one</a>.</p>
<p>More advanced benefit is the opportunity to switch to <code>pure</code> API: <code>pure</code> is the
one that uses function parameters to pass things around instead of global
variables. A few switch examples are <a href="https://github.com/trofi/ski/commit/5af00cd51f99127979280278f30cabd2de61d74a">this one</a>
and <a href="https://github.com/skvadrik/re2c/commit/8161d996f0ae0b7f782fff602bc261667c3e95d2">this one</a>.</p>
<p>The gist of it is move away from global <code>yylval</code> to explicit parameter threading.</p>
<h2 id="bison-apis">Bison APIs</h2>
<p>When I fist tried to switch <code>Ski</code> to <code>pure</code> <code>Bison</code> API I failed miserably.
I did not know what <code>Bison</code> generates, what <code>flex</code> generates and what
user is supposed to define. I also enabled function rename from <code>yy*()</code>
to <code>expr*()</code> and quickly got lost in errors and header inclusion cycles.</p>
<p>I stepped back and crafted simple pair of lexer and parser examples.
Then gradually upgraded them to modern world discovering minor API
gotchas one at a time.</p>
<p>The experience allowed me to finally port both <code>Ski</code> and <code>re2c</code> to more
modern <code>Bison</code> API.</p>
<h3 id="simple-example">Simple example</h3>
<p>Our running example will be the following trivial grammar:</p>
<pre><code>&lt;expression&gt; ::= &lt;digit&gt; | &lt;expression&gt; &quot;+&quot; &lt;digit&gt;
&lt;digit&gt; ::= &quot;0&quot; | &quot;1&quot; | ... | &quot;9&quot;</code></pre>
<p>It allows us write an expression of a digit (like <code>"1"</code> or <code>"2"</code>) or an
arbitrary sum of digits (like <code>"1+2+3"</code>). We will also allow whitespace
around.</p>
<p>We’ll need 3 files:</p>
<ul>
<li><code>Bison</code> parser: <code>p.y</code></li>
<li><code>Flex</code> lexer: <code>l.l</code></li>
<li><code>main()</code> function: <code>main.c</code></li>
</ul>
<p>Simple implementation would be the following:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat p.y */</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co">/* local declarations */</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">);</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">%</span><span class="kw">union</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ival<span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>token <span class="op">&lt;</span>ival<span class="op">&gt;</span> NUM</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>type <span class="op">&lt;</span>ival<span class="op">&gt;</span> expr</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>result <span class="op">:</span> expr       <span class="op">{</span> printf<span class="op">(</span><span class="st">&quot;RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $<span class="dv">1</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>expr <span class="op">:</span> NUM          <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>     <span class="op">|</span> expr <span class="ch">'+'</span> NUM <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span> <span class="op">+</span> $<span class="dv">3</span><span class="op">;</span> printf<span class="op">(</span><span class="st">&quot;I-RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $$<span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>     <span class="op">;</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> yyerror <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;PARSE ERROR: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> err<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Here we handle our grammar almost as it’s written in <code>BNF</code>. A few things
to note:</p>
<ul>
<li>Tokens are represented as instances of <code>union YYSTYPE { int ival; }</code>.
Usually tokens are more complicated and have a few more union
alternatives.</li>
<li>Our parse result is the <code>stdout</code> output of intermediate and final
computation step. We don’t collect any of the syntax information here.</li>
</ul>
<p>Note that parser’s definition requires lexing function prototype. Thus we
include all of autogenerated header via <code>#include "lex.expr.h"</code>.</p>
<p>Moving on to lexer:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat l.l */</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option noyywrap</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option nodefault</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="op">[</span> \t\n<span class="op">]</span> <span class="op">{</span> <span class="co">/* skip whitespace */</span> <span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="op">[+]</span> <span class="op">{</span> <span class="cf">return</span> <span class="ch">'+'</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="dv">0</span><span class="op">-</span><span class="dv">9</span><span class="op">]</span> <span class="op">{</span> yylval<span class="op">.</span>ival <span class="op">=</span> yytext<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="ch">'0'</span><span class="op">;</span> <span class="cf">return</span> NUM<span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="op">.</span> <span class="op">{</span> <span class="cf">return</span> YYUNDEF<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>The lexer is trivial:</p>
<ul>
<li>We support a few whitespace types (tab, space and newline). Whitespace
has no token representation. We just skip through them in this example.</li>
<li>Actual tokens are <code>'+'</code> operation (returned as is) and a digit returned
via <code>YYSTYPE yylval</code> global variable of type <code>union YYSTYPE { int ival; }</code>.</li>
</ul>
<p>Note that lexer’s implementation requires <code>union YYSTYPE</code> declaration provided
by <code>"parse.expr.h"</code> (while parser’s implementation clearly requires lexer’s
<code>yylex()</code>declaration). Thus we pull all of autogenerated lexer header via
<code>#include "parse.expr.h"</code>.</p>
<p>And our <code>main()</code> function:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat main.c */</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[])</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Parsing input from stdin. Press ^D when finished.</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    yyparse<span class="op">();</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s literally just one <code>yyparse()</code> call! Let’s build it:</p>
<pre><code>$ bison --warnings -Wcounterexamples --output=parse.expr.c --header=parse.expr.h --warnings p.y
$ flex --outfile=lex.expr.c --header-file=lex.expr.h l.l
$ gcc lex.expr.c parse.expr.c main.c -o example1</code></pre>
<p>The program happens to work on it’s stdin:</p>
<pre><code>$ ./example1
Parsing input from stdin. Press ^D when finished.
1       +2
I-RESULT: 3
+4
I-RESULT: 7
^D
RESULT: 7</code></pre>
<p>Here we typed <code>1+2+4</code> (with a bit of whitespace) and saw intermediate
results of <code>1+2</code> and intermediate/final result of the whole expression.</p>
<p>Fun fact: thanks to left recursion our grammar allows evaluating parts
of the expression before full expression is available.</p>
<p>Let’s have a peek at defined non-code symbols (data, rodata, undefined)
of generated files:</p>
<pre><code>$ gcc -c lex.expr.c
$ nm lex.expr.o | grep -v -P 't|T'
                 U clearerr
                 U ferror
                 U fileno
                 U fread
                 U free
                 U malloc
                 U realloc
0000000000000130 r yy_base
0000000000000048 b yy_c_buf_p
0000000000000190 r yy_chk
0000000000000150 r yy_def
0000000000000020 r yy_ec
0000000000000018 B yy_flex_debug
0000000000000040 b yy_hold_char
0000000000000008 B yyin
0000000000000000 B yyleng
0000000000000000 D yylineno
                 U yylval
0000000000000044 b yy_n_chars

$ gcc -c parse.expr.c
$ nm parse.expr.o | grep -v -P 't|T'
                 U free
                 U malloc
                 U memcpy
0000000000000000 B yychar
000000000000011b r yycheck
                 U yylex
0000000000000004 B yylval
0000000000000008 B yynerrs
0000000000000126 r yyr1
000000000000012b r yyr2</code></pre>
<p>Lexer defines quite a few globals: <code>yyin</code>, <code>yyleng</code>, <code>yylineno</code>, <code>yy_flex_debug</code>.
Parser does not define as many, but still has a few: <code>yychar</code>, <code>yylval</code>, <code>yynerrs</code>.</p>
<p>I did not realize it’s so much state scattered around.</p>
<h3 id="pure-example">Pure example</h3>
<p>Let’s now turn our example to string input (instead of <code>stdin</code> input)
and switch to pure API.</p>
<p>The main change is:</p>
<ul>
<li>add <code>%option reentrant bison-bridge</code> to <code>flex</code> lexer</li>
<li>add <code>%define api.pure full</code></li>
<li>make it all compile</li>
</ul>
<p>The above set of directives extends <code>int yylex(void)</code> with extra
parameters passed around. But not <code>yyparse()</code>! That will require
explicit extension with <code>%param {yyscan_t scanner}</code> (as it may be
lexer-dependenct).</p>
<p>Here is an updated parser:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat p.y */</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>define api<span class="op">.</span>pure full</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>param <span class="op">{</span>yyscan_t scanner<span class="op">}</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>code requires <span class="op">{</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">typedef</span> <span class="dt">void</span> <span class="op">*</span> yyscan_t<span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co">/* local declarations */</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span>yyscan_t scanner<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">);</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="op">%</span><span class="kw">union</span> <span class="op">{</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ival<span class="op">;</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>token <span class="op">&lt;</span>ival<span class="op">&gt;</span> NUM</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>type <span class="op">&lt;</span>ival<span class="op">&gt;</span> expr</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>result <span class="op">:</span> expr       <span class="op">{</span> printf<span class="op">(</span><span class="st">&quot;RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $<span class="dv">1</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>expr <span class="op">:</span> NUM          <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>     <span class="op">|</span> expr <span class="ch">'+'</span> NUM <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span> <span class="op">+</span> $<span class="dv">3</span><span class="op">;</span> printf<span class="op">(</span><span class="st">&quot;I-RESULT: %d</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> $$<span class="op">);</span> <span class="op">}</span></span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>     <span class="op">;</span></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span>yyscan_t scanner<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;PARSE ERROR: %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> err<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Compared to original example <code>%param {yyscan_t scanner}</code> extends
<code>yyparse()</code> declaration with <code>yyscan_t scanner</code> parameter (and also pass
it to every <code>yy*()</code> call including <code>yylex()</code>, <code>yyerror()</code> and many others).</p>
<p>We include extra <code>#include "parse.expr.h"</code> to make sure generated header
has the same prototype as <code>.c</code> file that implements it.</p>
<p>You might have noticed that <code>typedef void * yyscan_t;</code> bit. It unties
circular dependency between <code>"parse.expr.h"</code> header and <code>"lex.expr.h"</code>
header. Figuring out specific details of the dependency is an exercise
to the reader. Try to remove it and see what breaks. That error threw
me off when I initially tried <code>Ski</code> conversion.</p>
<p>Luckily <code>flex</code> guarantees that <code>yyscan_t</code> is an opaque type and will
always be <code>typedef void * yyscan_t;</code>. Thus we can open code it’s
declaration directly.</p>
<p>Note that we still print our results to <code>stdin</code>. In a real world example
you would probably want to pass another parameter to store final result via
something like <code>%parse-param {output_t * output}</code>.</p>
<p>Updated lexer:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat l.l */</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option warn</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option noyywrap</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option nodefault</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option reentrant</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option bison<span class="op">-</span>bridge</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="op">[</span> \t\n<span class="op">]</span> <span class="op">{</span> <span class="co">/* skip whitespace */</span> <span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="op">[+]</span> <span class="op">{</span> <span class="cf">return</span> <span class="ch">'+'</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="dv">0</span><span class="op">-</span><span class="dv">9</span><span class="op">]</span> <span class="op">{</span> yylval_param<span class="op">-&gt;</span>ival <span class="op">=</span> yytext<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="ch">'0'</span><span class="op">;</span> <span class="cf">return</span> NUM<span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="op">.</span> <span class="op">{</span> <span class="cf">return</span> YYUNDEF<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>Semantic action now uses <code>union YYSTYPE * yylval_param</code>. It is added by
<code>%option bison-bridge</code> to <code>yylex()</code> signature. <code>%option reentrant</code> has
another effect on the <code>yy*()</code> API: it adds <code>yyscan_t scanner</code> parameter.
Let’s look at the <code>yy*()</code> call site in <code>main()</code> function:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat main.c */</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[])</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Parsing input from argv:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> argc<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;argv[%i]='%s':</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> i<span class="op">,</span> argv<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>        yyscan_t scanner<span class="op">;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>        YY_BUFFER_STATE buf<span class="op">;</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>        yylex_init <span class="op">(&amp;</span>scanner<span class="op">);</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>        buf <span class="op">=</span> yy_scan_string <span class="op">(</span>argv<span class="op">[</span>i<span class="op">],</span> scanner<span class="op">);</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>        yyparse<span class="op">(</span>scanner<span class="op">);</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>        yy_delete_buffer<span class="op">(</span>buf<span class="op">,</span> scanner<span class="op">);</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>        yylex_destroy <span class="op">(</span>scanner<span class="op">);</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>flex</code>’s <code>%option reentrant</code> option requires us to thread
<code>yyscan_t scanner</code>. <code>scanner</code> holds full lexing context and does not
rely on any global variables.</p>
<p>The <code>YY_BUFFER_STATE buf; buf = yy_scan_string (..., scanner); yy_delete_buffer(buf, scanner);</code>
is the <code>flex</code> way to switch from <code>FILE *</code> based API to <code>const char *</code>
as an input buffer. It is not directly related to <code>Bison</code>’s <code>pure</code> API.</p>
<p>Let’s check out used globals now:</p>
<pre><code>$ gcc -c lex.expr.c
$ nm lex.expr.o | grep -v -P 't|T'
                 U clearerr
                 U ferror
                 U fileno
                 U fread
                 U free
                 U malloc
                 U realloc
0000000000000130 r yy_base
0000000000000190 r yy_chk
0000000000000150 r yy_def
0000000000000020 r yy_ec

$ gcc -c parse.expr.c
$ nm parse.expr.o | grep -v -P 't|T'
                 U free
                 U malloc
                 U memcpy
000000000000011b r yycheck
                 U yylex
0000000000000126 r yyr1
000000000000012b r yyr2</code></pre>
<p>No globals! <code>r</code> are static read-only lexer and parser tables. Yay!</p>
<h3 id="bonus-makefile-for-pure-example">Bonus: Makefile for pure example</h3>
<p>When I was working on an example I wanted to craft the <code>Makefile</code> that
tracks the dependencies precisely to rebuild all the artifacts. Be it
<code>Makefile</code>, <code>C</code> source, or input to any of generators change. Though
straightforward It ended up being wordy:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat makefile</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="dt">FLEX </span><span class="ch">=</span><span class="st"> flex</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="dt">BISON </span><span class="ch">=</span><span class="st"> bison</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dt">BISON_FLAGS </span><span class="ch">=</span><span class="st"> --warnings -Wcounterexamples</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="dt">TARGETS </span><span class="ch">=</span><span class="st"> a</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="dt">GENERATED_SOURCES </span><span class="ch">=</span><span class="st"> lex.expr.c lex.expr.h parse.expr.c parse.expr.h</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="dt">OBJECTS </span><span class="ch">=</span><span class="st"> lex.expr.o parse.expr.o main.o</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LDFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span> -o <span class="ch">$@</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="co"># generator dependencies and rules</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="dv">lex.expr.c lex.expr.h:</span><span class="dt"> l.l</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">FLEX</span><span class="ch">)</span> --outfile=lex.expr.c --header-file=lex.expr.h <span class="ch">$&lt;</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="dv">parse.expr.c parse.expr.h:</span><span class="dt"> p.y</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">BISON</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">BISON_FLAGS</span><span class="ch">)</span> --output=parse.expr.c --header=parse.expr.h --warnings <span class="ch">$&lt;</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co"># extra build dependencies</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="dv">$(GENERATED_SOURCES) $(OBJECTS) $(TARGETS):</span><span class="dt"> Makefile</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="dv">lex.expr.o parse.expr.o:</span><span class="dt"> parse.expr.h</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="dv">parse.expr.o:</span><span class="dt"> lex.expr.h</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a><span class="dv">main.o:</span><span class="dt"> lex.expr.h parse.expr.h</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> clean</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="dv">clean:</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">RM</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">GENERATED_SOURCES</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">TARGETS</span><span class="ch">)</span></span></code></pre></div>
<p>It took me a while to populate <code>extra build dependencies</code> section but
luckily <a href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html">make –shuffle</a>
kept finding the issues until I got something that works most of the time.
Looking at <code>-MMD</code> output I think it’s an accurate list of extra
dependencies on top of implicit <code>.c.o</code> ones.</p>
<h2 id="bison-version-requirements">Bison version requirements</h2>
<p><code>Bison</code>’s <code>--warnigns</code> flag was implemented in 2006, around <code>2.3a</code>
version. <code>%define api.pure</code> flag was implemented in 2007, around <code>2.3b</code>
version. Both should be safe to assume as widely available.</p>
<h2 id="parting-words">Parting words</h2>
<p>Pure <code>Bison</code> API is a nice cleanup to do for a project. It should not
take much code to implement: just add <code>%define api.pure full</code> and adapt
to API extension. The benefit is a slightly more explicit API readily
usable in multi-threaded and nested parser contexts.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Ski 1.4.0 is out!</title>
    <link href="http://trofi.github.io/posts/255-ski-1.4.0-is-out.html" />
    <id>http://trofi.github.io/posts/255-ski-1.4.0-is-out.html</id>
    <published>2022-08-20T00:00:00Z</published>
    <updated>2022-08-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>TL;DR: <a href="https://github.com/trofi/ski/releases/tag/v1.4.0">ski-1.4.0</a> is
available for download!</p>
<h2 id="whats-new">What’s new</h2>
<p>I’ll paste NEWS entry as is:</p>
<pre><code>It's a new fork based on lates 1.3.2 version available. It's new home
is https://github.com/trofi/ski. There are many changes since 1.1.0.
We'll list a few here since 1.3.2:

** https://github.com/trofi/ski is a new Ski home.

** Build is fixed to work with modern glibc, binutils and linux kernel
headers versions.

** More linux syscalls are emulated to at least get basic printf() to
work. More work needs to be done before Ski user emulation can run real
world programs.

** Dropped outdated ski.spec from tarball.

** Dropped ski-config from installed files. Ski does not provide a
stable library interface.

** Dropped dynamic hook loading infrastructure support. Ski no longer
tries to load and execute any libraries via 'SKIHOOK_PATH'. LTDL is
not required anymore.

** libski is not installed any more and is considered an internal
implementation detail of Ski.</code></pre>
<p>While preparing this release I had a lot of fun fiddling with
<code>autoconf</code> over past few hours. I hope I did not break <code>Ski</code> too much to
and it still builds for others.</p>
<h2 id="ski-status">Ski status</h2>
<p><code>Ski</code> supports guest <code>linux</code> kernels up to <code>4.19</code>. Anything later does
not yet work as <code>HP_SIM</code> mode was removed from upstream kernel. <code>4.19</code>
kernel support is great though: you can run <code>gdb</code>, networking, <code>gcc</code>
and many other conventional tools right in the guest <code>VM</code>.</p>
<p>User mode emulation on the other hand is very weak. The “Hello World”
does run when built against modern <code>glibc</code>, but I expect many basic
things (like <a href="https://github.com/trofi/ski/issues/1">bash</a>) to be still
broken. It’s good enough for proof of concept, but expect to fix many
bugs if you want to run a real application.</p>
<p>Text <code>xterm</code> interface (<code>ski</code>/<code>bski</code>) seems to work great. <code>motif</code>
(<code>xski</code>) and <code>gtk</code> (<code>gski</code>) interfaces look completely broken. I fixed
their compilation, but they render something unusable. I’m not sure if
it was ever functional enough to be usable. If I get a bit more
confidence in that I’ll probably just remove <code>xski</code> / <code>gski</code> in next
release.</p>
<h2 id="more-words">More words</h2>
<p>Previous <code>Ski</code> release was out in February 2008, 14 years ago. A few
things changed in the world since then. Incomplete list:</p>
<ul>
<li><code>IA64</code> support in linux kernel was added, matured, slowed down and
almost got removed.</li>
<li>In 2020 Intel stopped producing new CPUs.</li>
<li>Various <code>glibc</code>, <code>linux</code> kernel and <code>binutils</code> interfaces were changed.
That broke the <code>Ski</code> build.</li>
<li>New <code>linux</code> syscalls (like <code>openat</code>) and <code>AT_*</code> (liks <code>AT_RANDOM</code>)
auxiliary vectors were added and are now required by <code>glibc</code>. That
broke the <code>Ski</code> user emulation.</li>
<li><code>HP_SIM</code> mode was <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=fc5bad03709f9c79ea299f554b6f99fc6f4fe31c">removed</a>
from upstream <code>linux</code> kernel. That broke <code>Ski</code> kernel/machine
emulation on guest recent kernels.</li>
<li><code>gcc</code>’s support slowly bit rots breaking more and more projects that
build with <code>-O3</code>.</li>
<li>I lost access to <code>guppy</code> box and did not do much <code>IA64</code>-related tinkering
lately.</li>
</ul>
<p>Sounds bad, eh?</p>
<p>Fear not! Things are not as grim as they might look. Lack of real
hardware access happens to be a good motivation for me to clear the dust
off good old <code>Ski</code>. Lack of new CPUs means that it’s not a moving target
anymore (not that it ever did :) and we can just build a perfect (ahem)
emulator.</p>
<p>I still have about 20 minor kernel patches to upstream and would like
to get an emulator to support latest kernels to test these patches.</p>
<h3 id="pre-built-os-images">Pre-built OS images</h3>
<p>A few months ago someone asked me if I had OS images left for <code>Ski</code> to
run. I did not have them and spent a few minutes recreating them. The
result is <a href="https://slyfox.uni.cx/ia64/">here</a>:</p>
<ul>
<li><a href="https://slyfox.uni.cx/ia64/HOWTO_RUN">running instructions</a>: unpack
and run.</li>
<li><a href="https://slyfox.uni.cx/ia64/NOTES.ia64">rebuilding instructions</a>:
build a cross-compiler, kernel and unpack Gentoo’s <code>stage3</code>.</li>
</ul>
<p>It has an userspace with <code>gcc-11.3.0</code>. Not too old.</p>
<h3 id="nixpkgs-attempt-at-building-os-images">Nixpkgs attempt at building OS images</h3>
<p>Gentoo’s support for large scale cross-compilation is a bit hairy.
I wondered if I could make OS image building based on <code>nixpkgs</code> to
reuse all my local hacks I use to tinker with the system.</p>
<p>A few days ago <strong>matoro</strong> asked me to send the fix <strong>matoro</strong> did for
<a href="https://bugs.gentoo.org/596382">ITC precision detection</a> upstream. I
took it as an opportunity to bring up an equivalent test environment
on <code>NixOS</code> locally (and to find out how <code>ia64</code> timers really work in
<code>linux</code>).</p>
<p>Initially I built just an <code>ia64-unknown-linux-gnu</code> cross-compiler. It
took 3 lines of <code>nixpkgs</code> code:</p>
<pre><code>lib/systems/examples.nix:  ia64 = { config = &quot;ia64-unknown-linux-gnu&quot;; };
lib/systems/inspect.nix:    isIa64         = { cpu = { family = &quot;ia64&quot;; }; };
lib/systems/parse.nix:    ia64     = { bits = 64; significantByte = littleEndian; family = &quot;ia64&quot;; };</code></pre>
<p>That (and a few small one-off tweaks) allowed me to build vast majority
of packages for <code>ia64</code> with one command: <code>bash</code>, <code>strace</code>, <code>mc</code>,
<code>busybox</code>, <code>gcc</code>, <code>iproute2</code>, <code>tmux</code>, <code>git</code>, <code>util-linux</code>, <code>gdb</code>. <code>re2c</code>
building example:</p>
<pre><code>$ nix build -f. pkgsCross.ia64.re2c

$ file result/bin/re2c
result/bin/re2c: ELF 64-bit LSB executable, IA-64, version 1 (SYSV), dynamically linked,
  interpreter /nix/store/...-glibc-ia64-unknown-linux-gnu-2.35-163/lib/ld-linux-ia64.so.2,
  for GNU/Linux 2.6.32, not stripped</code></pre>
<p>Kernel was slightly harder to get running as it required 2 <code>CONFIG_</code>
options to be disabled to get something bootable:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># lib/systems/platforms.nix:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  ia64 = <span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">linux-kernel</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>      <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;ia64&quot;</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">target</span> <span class="op">=</span> <span class="st">&quot;vmlinuz&quot;</span><span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>      <span class="va">autoModules</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">baseConfig</span> <span class="op">=</span> <span class="st">&quot;sim_defconfig&quot;</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">extraConfig</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">        # Disable for gcc bug: https://gcc.gnu.org/PR106617</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="st">        LIBFC n</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="st">        # otherwise lerken panics in SKI</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="st">        SERIAL_8250 n</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="st">      ''</span><span class="op">;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span>;</span></code></pre></div>
<p>Here the main bit is <code>sim_defconfig</code> for <code>HP_SIM</code> mode and a
<code>SERIAL_8250 n</code> workaround to prevent the kernel from crashing. Oh,
and it has to be a <code>4.19</code> kernel (<code>5.0</code> removed <code>HP_SIM</code> mode),
thus the command to build the kernel is:
<code>nix build -f. pkgsCross.ia64.linuxPackages_4_19.kernel</code>.</p>
<p>As I was foolish enough to use very fresh <code>gcc</code> I encountered a
<code>gcc</code> bug: <a href="https://gcc.gnu.org/PR106617" class="uri">https://gcc.gnu.org/PR106617</a>.</p>
<p>The above was good enogh to put together minimal runnable OS image. I
wondered if I could also generate full rootfs as a <code>.nix</code> expression
to later use it as is for making an <code>ext2</code> image. The trick is to
grab full closure of dependencies and put it in a single directory.
<strong>tpw_rules</strong> pointed me at a <a href="https://github.com/NixOS/nixpkgs/search?q=closureInfo">closureInfo</a>
magic function which allows doing exactly that kind of things.</p>
<p>Just one <code>rsync</code> call is enough to build full rootfs! Here is my
<code>.nix</code> expression to get a virtual machine with <code>busybox</code>, <code>re2c</code>, <code>ski</code>
run script and <code>/init</code> script to boot a full VM:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat busybox-and-re2c.nix</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> ~<span class="ss">/n</span> <span class="op">{}</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">pkgsCross</span> <span class="op">?</span> pkgs.pkgsCross.ia64</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">targetKernel</span> <span class="op">?</span> pkgsCross.linuxPackages_4_19.kernel</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">init-script</span> <span class="op">=</span> pkgs.writeScriptBin <span class="st">&quot;init&quot;</span> <span class="op">(</span><span class="st">''</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="st">    #!</span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin/busybox sh</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="st">    # expose both packages in the PATH</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="st">    export PATH=</span><span class="sc">${</span>pkgsCross.re2c<span class="sc">}</span><span class="st">/bin:</span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">    # prepare file hierarchy</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p /dev /proc</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="st">    mount -t proc proc /proc</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="st">    mount -t devtmpfs devtmpfs /dev</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="st">    # run the shell</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="st">    exec </span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin/busybox sh</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">);</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>  <span class="va">rootfs</span> <span class="op">=</span> pkgs.runCommand <span class="st">&quot;rootfs&quot;</span> <span class="op">{</span> <span class="va">closure</span> <span class="op">=</span> pkgs.closureInfo <span class="op">{</span> <span class="va">rootPaths</span> <span class="op">=</span> <span class="op">[</span> init-script <span class="op">];</span> <span class="op">};</span> <span class="op">}</span> <span class="st">''</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="st">    cd $out</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="st">    # Copy full closure locally</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="st">    </span><span class="sc">${</span>pkgs.rsync<span class="sc">}</span><span class="st">/bin/rsync -arv --files-from=$closure/store-paths / .</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a><span class="st">    # build convenience symlinks:</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a><span class="st">    ln -s </span><span class="sc">${</span>init<span class="op">-</span>script<span class="sc">}</span><span class="st">/bin/init init</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>  <span class="va">run-script</span> <span class="op">=</span> pkgs.writeScriptBin <span class="st">&quot;run-ia64-ski&quot;</span> <span class="st">''</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="st">    #!</span><span class="sc">${</span>pkgs.bash<span class="sc">}</span><span class="st">/bin/bash</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a><span class="st">    bski=</span><span class="sc">${</span>pkgs.ski<span class="sc">}</span><span class="st">/bin/bski</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a><span class="st">    bootloader=</span><span class="sc">${</span>targetKernel.dev<span class="sc">}</span><span class="st">/bootloader</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a><span class="st">    vmlinux=</span><span class="sc">${</span>targetKernel.dev<span class="sc">}</span><span class="st">/vmlinux</span></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a><span class="st">    rootfs=</span><span class="sc">${</span>rootfs<span class="sc">}</span></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a><span class="st">    image_size=1G</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a><span class="st">    image=./sdc</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a><span class="st">    set -e</span></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a><span class="st">    if [ ! -e &quot;$image&quot; ]; then</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a><span class="st">        echo &quot;Populating '$image' with '$rootfs'...&quot;</span></span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a><span class="st">        fallocate -l &quot;$image_size&quot; &quot;$image&quot;</span></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a><span class="st">        mke2fs -d </span><span class="sc">${</span>rootfs<span class="sc">}</span><span class="st">/ &quot;$image&quot;</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a><span class="st">    fi</span></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a><span class="st">    $bski $bootloader $vmlinux root=/dev/sda simscsi=./sd init=/init rw TERM=xterm &quot;$@&quot;</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We define 3 build targets above:</p>
<ul>
<li><code>init-script</code>: our target’s init script which will run first in a
guest VM.</li>
<li><code>rootfs</code>: magic command to copy all the dependency closure context
into a single <code>$out</code> directory.</li>
<li><code>run-script</code>: our host’s script to run the virtual machine.</li>
</ul>
<p>The whole thing can be built and ran in a single command as:</p>
<pre><code>$ $(nix-build busybox-and-re2c.nix -A run-script)/bin/run-ia64-ski

loading /nix/store/jiqn22d0yp80vvysib16xjnb8w6j7c1v-linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux...
starting kernel...
Linux version 4.19.255 (nixbld@localhost) (gcc version 13.0.0 20220814 (experimental) (GCC)) #2 SMP Fri Aug 19 07:53:12 UTC 2022
EFI v1.00 by Hewlett-Packard:
...
Run /init as init process
sh: can't access tty; job control turned off
/ # random: crng init done

/ # mount
/dev/root on / type ext4 (rw,relatime)
proc on /proc type proc (rw,relatime)
devtmpfs on /dev type devtmpfs (rw,relatime,size=53184k,nr_inodes=831,mode=755)

/ # ls /
dev         init        lost+found  nix         proc

/ # ls -l /
total 20
drwxr-xr-x    3 0        0             2300 Aug 20 00:29 dev
lrwxrwxrwx    1 0        0               57 Jan  1  1970 init -&gt; /nix/store/ri7n3q59q042ddgzdanrsg5l4jrs85b8-init/bin/init
drwx------    2 0        0            16384 Aug 20 00:29 lost+found
dr-xr-xr-x    3 0        0             4096 Jan  1  1970 nix
dr-xr-xr-x   92 0        0                0 Aug 20 00:29 proc

/ # du -hs /nix/store/*
4.7M    /nix/store/1mrb68yaa7cn2x8lzq13vgd4gy6icz2i-re2c-ia64-unknown-linux-gnu-3.0
12.0K   /nix/store/ri7n3q59q042ddgzdanrsg5l4jrs85b8-init
31.9M   /nix/store/rr5mdcdw22ab7k78i6z6laywxdflhsj9-glibc-ia64-unknown-linux-gnu-2.35-163
6.3M    /nix/store/x83rlqm5ww1d6ggdkxlv48l0rzb0gwjc-ia64-unknown-linux-gnu-stage-final-gcc-13.0.0-lib
2.7M    /nix/store/xhkazsq7p21kj6853vfv7w244bbfa854-busybox-ia64-unknown-linux-gnu-1.35.0

/ # re2c --version
re2c 3.0</code></pre>
<p>Just <code>44MB</code> uncompressed! We can shrink it down to <code>9MB</code> by compressing
it:</p>
<pre><code>$ xz -9 sdc
$ LANG=C ls -lh
-rw-r--r-- 1 slyfox users 8.6M Aug 20 08:02 sdc.xz</code></pre>
<p>That’s even smaller than uncompressed kernel, which is around <code>21MB</code>:</p>
<pre><code>$ ls -lh /nix/store/jiqn22d0yp80vvysib16xjnb8w6j7c1v-linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux |unnix
-r-xr-xr-x 2 root root 21M Jan  1  1970 /&lt;&lt;NIX&gt;&gt;/linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux</code></pre>
<p>You can also inspect rootfs from the host side without having to deal
with filesystem image or booting an OS:</p>
<pre><code>$ nix-build busybox-and-re2c.nix -A rootfs
/nix/store/11ig1jh624l5dniilcp2p8s2zjigrz44-rootfs

$ ls -1 result/nix/store/
1mrb68yaa7cn2x8lzq13vgd4gy6icz2i-re2c-ia64-unknown-linux-gnu-3.0
ri7n3q59q042ddgzdanrsg5l4jrs85b8-init
rr5mdcdw22ab7k78i6z6laywxdflhsj9-glibc-ia64-unknown-linux-gnu-2.35-163
x83rlqm5ww1d6ggdkxlv48l0rzb0gwjc-ia64-unknown-linux-gnu-stage-final-gcc-13.0.0-lib
xhkazsq7p21kj6853vfv7w244bbfa854-busybox-ia64-unknown-linux-gnu-1.35.0</code></pre>
<p>That alone allowed me to fix a bunch of packages in <code>nixpkgs</code> (example
<a href="https://midnight-commander.org/changeset/0ef7237eea2ef97e92b793c0429be4d1ea6ffc77">upstream mc fix</a>).</p>
<p>It’s such a fun toy to play with!</p>
<h3 id="hp_sim-mode-limitations">HP_SIM mode limitations</h3>
<p>To do a full system emulation <code>Ski</code> relies on <code>HP_SIM</code> mode of kernel
build. It’s very different from the real <code>ia64</code> kernel you build for a
real device. And different from <code>KVM</code>! A few points on why <code>HP_SIM</code> is
special:</p>
<ul>
<li>Separate <code>bootloader</code> binary is required to boot <code>vmlinux</code>
(<code>bootloader</code> is built as part of <code>linux</code> kernel)</li>
<li>No firmware initialization code, to memory map discovery. The map is
hardcoded in <code>bootloader</code> code.</li>
<li>Paravirtual devices (<code>simserial</code>, <code>simeth</code>, <code>simscsi</code>) require
<code>Ski</code>-specific hypercalls from guest kernel to <code>Ski</code>.</li>
<li>No support for <code>virtio</code> from <code>Ski</code>.</li>
<li>No ACPI bus.</li>
<li>No PCI bus.</li>
<li>No initramfs support (lack of interface to pass it to <code>bootloader</code>)</li>
</ul>
<h3 id="possible-next-steps-for-ski">Possible next steps for Ski</h3>
<p>The above are not fundamental limitations. I think it would not be hard
to get rid of custom device code and switch over to <code>virtio-mmio</code>
entirely. I imagine it would be something like:</p>
<ul>
<li><code>simserial</code> -&gt; <code>virtio-console</code></li>
<li><code>simscsi</code> -&gt; <code>virtio-blk</code></li>
<li><code>simeth</code> -&gt; <code>virtio-net</code></li>
</ul>
<p>It will require a bit of code on <code>Ski</code> side to handle virtio queues.
Maybe we can borrow parts of <code>qemu</code> as is? Otherwise implementing them
does not sound too hard.</p>
<p>Lack of buses is fine as well. VMs for other architectures seem to do
it for ages and rely on device trees or manual kernel config options.
We can do there same here. It would be useful though to get closer to
real <code>ia64</code> for interface discovery eventually.</p>
<p>Lack of platform initialization code should not be a big problem either:
<code>ia64</code> paltform is defined in terms of <code>PAL</code> and <code>SAL</code> calls which are
very similar (at least in spirit) to current <code>HP_SIM</code> hypercalls.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>Ski</code> is still alive! Try <a href="https://github.com/trofi/ski/releases/tag/v1.4.0">1.4.0</a> :)</p>
<p><code>ia64</code> code can still be emulated and be debugged with <code>Ski</code>. Both can
still expose generic bugs in various projects.</p>
<p><code>Ski</code> is a great example of project on how little one needs to add to
guest <code>linux</code> kernel and to hypervisor to boot the kernel and get
userspace running there.</p>
<p>Instruction emulation is a large part of <code>Ski</code>. I still don’t quite get
it. But I also never had a reason for deeper investigation. Maybe one day.
Meanwhile it just works!</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 20, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>binutils 2.39</title>
    <link href="http://trofi.github.io/posts/254-binutils-2.39.html" />
    <id>http://trofi.github.io/posts/254-binutils-2.39.html</id>
    <published>2022-08-12T00:00:00Z</published>
    <updated>2022-08-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A week ago new <a href="https://sourceware.org/pipermail/binutils/2022-August/122246.html">2.39 release</a>
of <code>binutils</code> saw the light of day.</p>
<h2 id="new-features">New features</h2>
<p>I found interesting these additions:</p>
<ul>
<li>colors in <code>objdump -d --disassembler-color=color</code> output</li>
<li><code>gprofng</code> tool is enabled by default now (<a href="https://sourceware.org/pipermail/binutils/2021-August/117665.html">gprofng announcement</a>)</li>
</ul>
<p>Colored <code>objdump</code> looks good:</p>
<p><img src="http://trofi.github.io/posts.data/254-binutils-2.39/objdump.svg" /></p>
<p>The blue-on-black text is a bit hard to read. <a href="https://sourceware.org/pipermail/binutils/2022-August/122351.html">Soon</a>
it will be tweakable via <code>OBJDUMP_COLORS</code> environment variable.</p>
<p><code>gprofng</code> requires some work to finish the packaging:</p>
<ul>
<li><a href="https://sourceware.org/PR29479">PR29479</a>: <code>javac</code> is not optional</li>
<li><a href="https://sourceware.org/PR29477">PR29477</a>: <code>musl</code> needs some porting</li>
</ul>
<p>With a bit of tweaking I was able to get <code>gprofng</code> to run:</p>
<pre><code>$ gprofng collect app $(which htop)
Creating experiment directory test.1.er (Process ID: 3545207) ...

$ gprofng display text -functions test.1.er/
Functions sorted by metric: Exclusive Total CPU Time

Excl. Total   Incl. Total    Name
CPU           CPU
 sec.      %   sec.      %
0.420 100.00  0.420 100.00   &lt;Total&gt;
0.150  35.71  0.150  35.71   read
0.060  14.29  0.060  14.29   openat
0.040   9.52  0.040   9.52   __strchr_avx2
0.030   7.14  0.030   7.14   write
0.020   4.76  0.020   4.76   __getdents
0.010   2.38  0.030   7.14   LinuxProcessList_readStatFile.constprop.0
0.010   2.38  0.320  76.19   LinuxProcessList_recurseProcTree.isra.0
0.010   2.38  0.020   4.76   RichString_appendWide
0.010   2.38  0.010   2.38   RichString_appendnAscii
0.010   2.38  0.010   2.38   __close_nocancel
0.010   2.38  0.010   2.38   __gconv_transform_internal_utf8
0.010   2.38  0.010   2.38   __memchr_avx2
0.010   2.38  0.010   2.38   __vfprintf_internal
0.010   2.38  0.010   2.38   _nc_tiparm
0.010   2.38  0.170  40.48   fgets
0.010   2.38  0.010   2.38   iswprint
0.010   2.38  0.020   4.76   onscreen_mvcur
0.      0.    0.410  97.62   CommandLine_run
...</code></pre>
<p>In the output above both individual and cumulative times are reported
for each function. Nothing fancy.</p>
<p>Output of the same sampling data with a <code>calltree</code> view:</p>
<pre><code>$ gprofng display text -calltree test.1.er/
Functions Call Tree. Metric: Attributed Total CPU Time

Attr. Total    Name
CPU
 sec.      %
0.420 100.00   +-&lt;Total&gt;
0.410  97.62     +-__libc_start_call_main
0.410  97.62     |  +-CommandLine_run
0.360  85.71     |    +-ScreenManager_run
0.270  64.29     |    |  +-ProcessList_scan
0.270  64.29     |    |  |  +-LinuxProcessList_recurseProcTree.isra.0
0.150  35.71     |    |  |    +-fgets
0.140  33.33     |    |  |    |  +-_IO_getline_info
0.130  30.95     |    |  |    |    +-_IO_default_uflow
0.130  30.95     |    |  |    |    |  +-_IO_new_file_underflow
0.130  30.95     |    |  |    |    |    +-read
0.010   2.38     |    |  |    |    +-__memchr_avx2
0.030   7.14     |    |  |    +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |    |  |    |  +-openat
0.010   2.38     |    |  |    |  +-LinuxProcessList_recurseProcTree.isra.0
0.010   2.38     |    |  |    |    +-openat
0.020   4.76     |    |  |    +-__GI_strstr
0.020   4.76     |    |  |    |  +-__strchr_avx2
0.020   4.76     |    |  |    +-__strchr_avx2
0.020   4.76     |    |  |    +-readdir
0.020   4.76     |    |  |    |  +-__getdents
0.010   2.38     |    |  |    +-LinuxProcessList_readStatFile.constprop.0
0.010   2.38     |    |  |    +-__new_fclose
0.010   2.38     |    |  |      +-_IO_new_file_close_it
0.010   2.38     |    |  |        +-__close_nocancel
0.060  14.29     |    |  +-wgetch
0.060  14.29     |    |  |  +-_nc_wgetch
0.060  14.29     |    |  |    +-wrefresh
0.060  14.29     |    |  |      +-doupdate_sp
0.060  14.29     |    |  |        +-TransformLine
0.040   9.52     |    |  |          +-_nc_mvcur_sp
0.020   4.76     |    |  |          |  +-_nc_flush_sp
0.020   4.76     |    |  |          |  |  +-write
0.020   4.76     |    |  |          |  +-_nc_real_mvcur.part.0
0.020   4.76     |    |  |          |    +-onscreen_mvcur
0.010   2.38     |    |  |          |      +-_nc_tiparm
0.010   2.38     |    |  |          +-EmitRange
0.010   2.38     |    |  |          |  +-_nc_is_charable
0.010   2.38     |    |  |          |    +-wctob
0.010   2.38     |    |  |          |      +-__gconv_transform_internal_utf8
0.010   2.38     |    |  |          +-PutRange
0.010   2.38     |    |  |            +-_nc_mvcur_sp
0.010   2.38     |    |  |              +-_nc_flush_sp
0.010   2.38     |    |  |                +-write
0.030   7.14     |    |  +-Panel_draw
0.030   7.14     |    |    +-Process_display
0.030   7.14     |    |      +-LinuxProcess_writeField
0.030   7.14     |    |        +-Process_writeField
0.020   4.76     |    |          +-Process_writeCommand
0.020   4.76     |    |          |  +-RichString_appendWide
0.010   2.38     |    |          |    +-iswprint
0.010   2.38     |    |          +-Process_printBytes
0.010   2.38     |    |            +-RichString_appendnAscii
0.050  11.90     |    +-ProcessList_scan
0.050  11.90     |      +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |        +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |        |  +-LinuxProcessList_readStatFile.constprop.0
0.020   4.76     |        |    +-xReadfileat
0.020   4.76     |        |      +-openat
0.020   4.76     |        +-fgets
0.020   4.76     |        |  +-_IO_getline_info
0.020   4.76     |        |    +-_IO_default_uflow
0.020   4.76     |        |      +-_IO_new_file_underflow
0.020   4.76     |        |        +-read
0.010   2.38     |        +-openat
0.010   2.38     +-__vfprintf_internal</code></pre>
<p>This view is a bit more interesting: we can instantly see where all those
string operations get called from.</p>
<p><code>gprofng</code> seems to work \o/.</p>
<h2 id="new-bugs">New bugs</h2>
<p>Having sorted basic <code>gprofng</code> stuff I attempted to package <code>binutils-2.39</code>
in <code>nixpkgs</code> in <a href="https://github.com/NixOS/nixpkgs/pull/185297">PR185297</a>.
I got a few problems when I tried to build the system against it. I’ll list
a few of them below.</p>
<h3 id="breaking-api-change-init_disassemble_info">Breaking API change: init_disassemble_info()</h3>
<p>One of the unfortunate side-effects of added colouring is the
disassembler API change (<a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=60a3da00bd5407f07d64dff82a4dae98230dfaac">patch</a>):
<code>init_disassemble_info()</code> got an extra formatter parameter. The crucial
bit of the patch is the extra <code>fprintf_styled_func</code> parameter added:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -394,11 +470,13 @@ extern bool generic_symbol_is_valid</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a> /* Method to initialize a disassemble_info struct.  This should be</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    called by all applications creating such a struct.  */</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a> extern void init_disassemble_info (struct disassemble_info *dinfo, void *stream,</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="st">-                                  fprintf_ftype fprintf_func);</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                  fprintf_ftype fprintf_func,</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="va">+                                  fprintf_styled_ftype fprintf_styled_func);</span></span></code></pre></div>
<p>I noticed it as a <code>perf</code> build breakage against <code>linux.git</code> tree:</p>
<pre><code>util/annotate.c: In function 'symbol__disassemble_bpf':
util/annotate.c:1765:9: error: too few arguments to function 'init_disassemble_info'
 1765 |         init_disassemble_info(&amp;info, s,
      |         ^~~~~~~~~~~~~~~~~~~~~</code></pre>
<p>The fix got merged into <code>linux#master</code> a few days ago as a set
of <a href="https://github.com/torvalds/linux/compare/00b32625982e0c796f0abb8effcac9c05ef55bd3...600b7b26c07a070d0153daa76b3806c1e52c9e00">patches</a>.</p>
<p>The gist of the fix is added feature detection against parameter count
(<code>DISASM_INIT_STYLED</code>) and use of the feature to wrap
<code>init_disassemble_info()</code> variants:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- /dev/null</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/tools/include/tools/dis-asm-compat.h</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -0,0 +1,55 @@</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="va">+static inline int fprintf_styled(void *out,</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="va">+                                enum disassembler_style style,</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                const char *fmt, ...)</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="va">+{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_list args;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+       int r;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_start(args, fmt);</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="va">+       r = vfprintf(out, fmt, args);</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_end(args);</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="va">+       return r;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="va">+}</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="va">+static inline void init_disassemble_info_compat(struct disassemble_info *info,</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               void *stream,</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               fprintf_ftype unstyled_func,</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               fprintf_styled_ftype styled_func)</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="va">+{</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="va">+#ifdef DISASM_INIT_STYLED</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="va">+       init_disassemble_info(info, stream,</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a><span class="va">+                             unstyled_func,</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a><span class="va">+                             styled_func);</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="va">+#else</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="va">+       (void)styled_func;</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="va">+       init_disassemble_info(info, stream,</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="va">+                             unstyled_func);</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="va">+#endif</span></span></code></pre></div>
<p>We will need to backport this fix to older kernel versions. Or pin
<code>perf</code> to older version of <code>libbfd</code>.</p>
<h3 id="new-warnings-around-executable-stack">New warnings around executable stack</h3>
<p>Another <code>binutils-2.39</code> change was to enable warnings around
RWX sections (like stack and data) in
<a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=ba951afb99912da01a6e8434126b8fac7aa75107">this change</a>.
The announcement warns:</p>
<blockquote>
<p>The ELF linker will now generate a warning message if the stack is made executable.</p>
</blockquote>
<p>Some linux distributions already implement similar warning for a while
as a way to catch unintended executable stack on code base with assembly
<code>.S</code> files. I am glad to see it getting upstream now. It makes upstreaming
so much easier when people can easily reproduce the warning on their
distribution.</p>
<p>Some projects do not tolerate warnings from the linker. <a href="https://github.com/systemd/systemd/issues/24226">systemd</a>
or <a href="https://github.com/rhboot/efivar/pull/164">efi-vars</a> come to mind.
Users can disable new warning with <code>--enable-warn-execstack=no</code> if a
proper fix is too complicated.</p>
<p>In case of <code>systemd</code>, the upstream decided to be more lenient to warning
for <code>EFI</code> linking code. The proper fix was also trivial in this case:
<code>gnu-efi</code> library needed <a href="https://sourceforge.net/p/gnu-efi/code/ci/803b49c40bb0b720b90d9c31d372911f1b946aa7/">a few annotations</a>.</p>
<p>The idea is simple: all manually written assembly <code>.S</code> files need
a note section that declares non-executable stack:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/apps/trivial.S</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/apps/trivial.S</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -41,3 +41,7 @@ _start:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a> hello: .byte 'h',0,'e',0,'l',0,'l',0,'o',0,'\n',0,'\r',0,0,0</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+#if defined(__ELF__) &amp;&amp; defined(__linux__)</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+       .section .note.GNU-stack,&quot;&quot;,%progbits</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="va">+#endif</span></span></code></pre></div>
<p>It’s a lot of boilerplate to add the note to every <code>.S</code> file.</p>
<h3 id="dwarf-output-regression">DWARF output regression</h3>
<p>Another fallout was an <code>elfutils-0.187</code> test failure:</p>
<pre><code>FAIL: run-low_high_pc.sh
========================

[b] main.c
[2d] main

[b] ../sysdeps/i386/start.S
[26] _start
[40] ../sysdeps/x86/abi-note.c
[b52] init.c
[b8e] static-reloc.c
[2dba] _dl_relocate_static_pie
[2dd8] ../sysdeps/i386/crti.S
[2def] _init
lowpc: 8049000, highpc: 8049000lx
../sysdeps/i386/crti.S: [2def] '_init' highpc &lt;= lowpc
FAIL run-low_high_pc.sh (exit status: 255)</code></pre>
<p>Here the test <a href="https://sourceware.org/git/?p=elfutils.git;a=blob;f=tests/low_high_pc.c;h=cd022b1cc5e446520be675859b01c0df04bb5521;hb=HEAD#l70">low_high_pc</a>
complains about something about <code>_init</code> symbol.
Looking at the reported values the condition is <code>highpc == lowpc</code>.</p>
<p><a href="https://en.wikipedia.org/wiki/DWARF">DWARF</a> specification describes
Debug Info Entries (<code>DIEs</code>) each of which consists of:</p>
<ul>
<li>a tag (<code>DW_TAG_*</code>) like subprogram, <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/dwarf2.h;h=8a0ae403529e87cfc3a1366799a027bcb941cd2c;hb=HEAD#l38">others</a></li>
<li>a set of attributes key-value pairs (<code>DW_AT_*</code>) like source language name, file ranges, file names and <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/dwarf2.h;h=8a0ae403529e87cfc3a1366799a027bcb941cd2c;hb=HEAD#l133">others</a></li>
</ul>
<p><code>DWARF</code> debug sections are named <code>.debug*</code>. We can inspect them using
<code>readelf --debug-dump</code>:</p>
<pre><code>$ printf &quot;int main(){}&quot; | gcc -g -x c - -o a
$ readelf --debug-dump a
...
Contents of the .debug_info section:
...
  Compilation Unit @ offset 0x2dea:
   Length:        0x50 (32-bit)
   Version:       5
   Unit Type:     DW_UT_compile (1)
   Abbrev Offset: 0x4a2
   Pointer Size:  8
 &lt;0&gt;&lt;2df6&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;2df7&gt;   DW_AT_producer    : (indirect string, offset: 0x19f6): GNU C17 12.1.0 -mtune=generic -march=x86-64 -g
    &lt;2dfb&gt;   DW_AT_language    : 29     (C11)
    &lt;2dfc&gt;   DW_AT_name        : (indirect line string, offset: 0x5): &lt;stdin&gt;
    &lt;2e00&gt;   DW_AT_comp_dir    : (indirect line string, offset: 0x0): /tmp
    &lt;2e04&gt;   DW_AT_low_pc      : 0x401106
    &lt;2e0c&gt;   DW_AT_high_pc     : 0xb
    &lt;2e14&gt;   DW_AT_stmt_list   : 0x96c
 &lt;1&gt;&lt;2e18&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;2e19&gt;   DW_AT_external    : 1
    &lt;2e19&gt;   DW_AT_name        : (indirect string, offset: 0x1a25): main
    &lt;2e1d&gt;   DW_AT_decl_file   : 1
    &lt;2e1e&gt;   DW_AT_decl_line   : 1
    &lt;2e1f&gt;   DW_AT_decl_column : 5
    &lt;2e20&gt;   DW_AT_type        : &lt;0x2e36&gt;
    &lt;2e24&gt;   DW_AT_low_pc      : 0x401106
    &lt;2e2c&gt;   DW_AT_high_pc     : 0xb
    &lt;2e34&gt;   DW_AT_frame_base  : 1 byte block: 9c       (DW_OP_call_frame_cfa)
    &lt;2e36&gt;   DW_AT_call_all_calls: 1
 &lt;1&gt;&lt;2e36&gt;: Abbrev Number: 3 (DW_TAG_base_type)
    &lt;2e37&gt;   DW_AT_byte_size   : 4
    &lt;2e38&gt;   DW_AT_encoding    : 5      (signed)
    &lt;2e39&gt;   DW_AT_name        : int
 &lt;1&gt;&lt;2e3d&gt;: Abbrev Number: 0
...</code></pre>
<p>Here we can see that <code>&lt;stdin&gt;</code> file (<code>DW_TAG_compile_unit</code>) was using
<code>C11</code> language, <code>main</code> symbol is a subprogram (<code>DW_TAG_subprogram</code>)
defined in line 1 column 5 of the file. <code>DW_AT_low_pc</code> / <code>DW_AT_high_pc</code>
encode a range where code of subprogram is located in virtual memory.</p>
<p>Back to our <code>elfutils</code> example
<code>../sysdeps/i386/crti.S: [2def] '_init' highpc &lt;= lowpc</code> was complaining
about invalid code location in virtual memory. It looks like the
encoding claimed that <code>_init</code> is 0 bytes long. Failure happened only on
<code>i686-linux</code> and not <code>x96_64-linux</code>. It’s because <code>_init</code> code is very
different on <code>i686</code> and <code>x86_64</code>.</p>
<p>Here is the reproducer:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a> .<span class="bu">section</span> <span class="op">.</span>init<span class="op">,</span><span class="st">&quot;ax&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a> .p2align <span class="dv">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a> .globl _init</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> .hidden _init</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a> .type _init<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="fu">_init:</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  .<span class="bu">section</span> <span class="op">.</span>text<span class="op">.</span>__x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span><span class="st">&quot;axG&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits<span class="op">,</span>__x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span>comdat</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    .globl __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    .hidden __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    .p2align <span class="dv">4</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    .type __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span><span class="fu">@f</span>unction</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">__x86.get_pc_thunk.bx:</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>      <span class="bu">ud2</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    .size __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span> <span class="op">.</span> <span class="op">-</span> __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    .previous</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  <span class="bu">ud2</span></span></code></pre></div>
<p>The code above defines <code>_init</code> symbol in <code>.init</code> section with a single
<code>ud2</code> instruction and <code>__x86.get_pc_thunk.bx</code> symbol in
<code>.text.__x86.get_pc_thunk.bx</code> section with a single <code>ud2</code> instruction.
Note that <code>.size</code> directive (to specify size of function) is not set on
<code>_init</code> and present only on <code>__x86.get_pc_thunk.bx</code>.</p>
<p><code>binutils-2.38</code> used to generate the following <code>DIE</code>s:</p>
<pre><code>$ as-2.38 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/dev/bugs/binutils-2.39-crti-size/delta
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x3d): GNU AS 2.38
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)</code></pre>
<p><code>binutils-2.39</code> started emitting a bit more info:</p>
<pre><code>$ as-2.39 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/dev/bugs/binutils-2.39-crti-size/delta
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x3d): GNU AS 2.39
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)
 &lt;1&gt;&lt;22&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;23&gt;   DW_AT_name        : (strp) (offset: 0x49): _init
    &lt;27&gt;   DW_AT_external    : (flag) 1
    &lt;28&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;2c&gt;   DW_AT_high_pc     : (addr) 0x0
 &lt;1&gt;&lt;30&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;31&gt;   DW_AT_name        : (strp) (offset: 0x4f): __x86.get_pc_thunk.bx
    &lt;35&gt;   DW_AT_external    : (flag) 1
    &lt;36&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;3a&gt;   DW_AT_high_pc     : (addr) 0x2
 &lt;1&gt;&lt;3e&gt;: Abbrev Number: 0</code></pre>
<p>Note that <code>DW_TAG_subprogram</code> was not present for any of two symbols in
<code>binutils-2.38</code>. And <code>binutils-2.39</code> defines both: <code>__x86.get_pc_thunk.bx</code>
of size 2 and <code>_init</code> of size … 0! It ended up being a <code>gas</code> bug and
Jan fixed with <a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=e8cf73215187b0c08679d726a5cc7c019fa3ea2e">the patch</a>.</p>
<p>After the fix <code>DWARF</code> sections have the following look:</p>
<pre><code>$ as-2.39 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x2d (32-bit)
   Version:       2
   Abbrev Offset: 0x0
   Pointer Size:  4
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/n
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x18): GNU AS 2.39
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)
 &lt;1&gt;&lt;22&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;23&gt;   DW_AT_name        : (strp) (offset: 0x24): __x86.get_pc_thunk.bx
    &lt;27&gt;   DW_AT_external    : (flag) 1
    &lt;28&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;2c&gt;   DW_AT_high_pc     : (addr) 0x2
 &lt;1&gt;&lt;30&gt;: Abbrev Number: 0</code></pre>
<p>As expected <code>_init</code> does not have <code>DW_AT_low_pc</code> / <code>DW_AT_high_pc</code>
values anymore and <code>elfutils</code> tests run successfully.</p>
<p>As <code>crti.S</code> is a file from <code>glibc</code> that made me wonder why <code>crti.o</code>
was not stripped off <code>.debug*</code> sections. It ended up being a <code>nixpkgs</code>
bug in a debuginfo separation hook. The hook was meant to move all <code>.debug*</code> sections
from <code>ELF</code> files in <code>/lib</code> to <code>/lib/debug</code>. For files where the hook
did not work it did not apply stripping at all. Fixed with
<a href="https://github.com/NixOS/nixpkgs/pull/185537">PR185537</a> now.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>binutils-2.39</code> does not look too problematic so far. It will need a bit
of backporting to fix <code>linux</code> and <code>perf</code>. But otherwise the release look
benign.</p>
<p><code>gas</code> bug uncovered <code>nixpkgs</code>’s stripping code bug. It’s funny how one
is required to trigger another. Luckily both are fixed now.</p>
<p>Once I get <code>perf</code> fixed I’ll ask for a full <code>hydra</code> run to get more
potential failures.</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 12, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>one-liner to fix CSS on phones</title>
    <link href="http://trofi.github.io/posts/253-one-liner-to-fix-css-on-phones.html" />
    <id>http://trofi.github.io/posts/253-one-liner-to-fix-css-on-phones.html</id>
    <published>2022-08-04T00:00:00Z</published>
    <updated>2022-08-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I noticed that this blog was unreadable on the phones: main text was
readable, but code snippets had 2.5x smaller fonts and required manual
zooming in to see anything at all.</p>
<p>Apparently it was happening because on small screens browsers try to
be smart and scale some UI elements up. But not all of the HTML
tags get the same treatment. As a result you get size inconsistencies
where none were before.</p>
<p>Apparently you can (and need) to opt out of that behaviour! The
magic <code>HTML5</code> one-liner is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;meta</span> <span class="er">name</span><span class="ot">=</span><span class="st">&quot;viewport&quot;</span> <span class="er">content</span><span class="ot">=</span><span class="st">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="kw">&gt;</span></span></code></pre></div>
<p>There are many other subtleties one needs to account for, like scaling
pictures accordingly or handling sidebars to overflow in a neat way.
The set of techniquest are called <code>HTML Responsive Web Design</code>.</p>
<p>Luckily I don’t need to care about any of that.</p>

<div class="info">
    Posted on August  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nixpkgs overlay nano howto</title>
    <link href="http://trofi.github.io/posts/252-nixpkgs-overlay-nano-howto.html" />
    <id>http://trofi.github.io/posts/252-nixpkgs-overlay-nano-howto.html</id>
    <published>2022-07-31T00:00:00Z</published>
    <updated>2022-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p><code>nixpkgs</code> is a huge repository of various packages. But what if you want
to package a tiny package and don’t plan to share it with anyone. Is it
hard? How would you go about it?</p>
<p>There are many ways to do it: maintain a <code>nixpkgs</code> fork, use
<code>packageOverrides</code>, <code>overlays</code>, <code>flakes</code> and many others methods.</p>
<p>I’ll focus here only on <code>overlays</code> method as it feels to me like the
simplest way to write packages readily copyable to (or from) <code>nixpkgs</code>.</p>
<h2 id="nixpkgs-stucture">nixpkgs stucture</h2>
<p>before we start with an example let’s have a look at <code>nixpkgs</code>
“schema”. <code>nixpkgs</code> provides a <code>pkgs</code> map (“attribute set”) from package
name to package definition (it’s nested in a few places):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>pkgs = <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">callPackage</span> <span class="op">=</span> <span class="va">pkgPath</span><span class="op">:</span> ...somehow<span class="op">-</span>load<span class="op">-</span>the<span class="op">-</span>package<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># unnested examples:</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">glibc</span> <span class="op">=</span> callPackage <span class="ss">../development/libraries/glibc</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">re2c</span> <span class="op">=</span> callPackage <span class="ss">../development/tools/parsing/re2c</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co"># nested examples:</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">python39Packages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      <span class="co"># the name is slightly changed for clarity</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      <span class="va">callPythonPackage</span> <span class="op">=</span> <span class="va">pkgPath</span><span class="op">:</span> ...somehow<span class="op">-</span>load<span class="op">-</span>python<span class="op">-</span>package<span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">black</span> <span class="op">=</span> callPackage <span class="ss">../development/python-modules/black</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>      <span class="va">blessed</span> <span class="op">=</span> callPackage <span class="ss">../development/python-modules/blessed</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>      <span class="co"># ...</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>;</span></code></pre></div>
<p>Our goal here is to inject something very simple into top-level
<code>pkgs = { ... };</code> sturcture. We’ll ignore nested attributes.</p>
<p><code>overlays</code> allow us to override existing attributes in <code>pkgs</code> or
introduce the existing ones. Until you get familiar with the way
attributes interact with one another I suggest adding only new
attributes.</p>
<h2 id="an-example">an example</h2>
<p>Our running example will be <a href="https://github.com/trofi/ski">ski</a> package.
It’s an <code>autotools</code>-based package with very conventional dependencies.
Let’s package it!</p>
<p>I’ll do 3 things below:</p>
<ol type="1">
<li>create <code>/tmp/overlay/ski/default.nix</code> expression ready to be included
into <code>nixpkgs</code> repository</li>
<li>create <code>/tmp/overlay/local-packages.nix</code> expression ready to be used
in <code>/etc/nixos/configuration.nix</code> and/or in <code>~/.config/nixpkgs/overlays/</code>.</li>
<li>add our overlay to <code>/etc/nixos/configuration.nix</code>.</li>
</ol>
<p>Here is a simple <code>/tmp/overlay/ski/default.nix</code> expression enough to
build it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /tmp/overlay/ski/default.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span> <span class="op">,</span> <span class="va">stdenv</span> <span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">autoconf</span><span class="op">,</span> <span class="va">automake</span><span class="op">,</span> <span class="va">bison</span><span class="op">,</span> <span class="va">flex</span><span class="op">,</span> <span class="va">gperf</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libtool</span><span class="op">,</span> <span class="va">pkg-config</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">elfutils</span><span class="op">,</span> <span class="va">libbfd</span><span class="op">,</span> <span class="va">libiberty</span> <span class="op">,</span> <span class="va">ncurses</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;ski&quot;</span><span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2022-07-07&quot;</span><span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;ski&quot;</span><span class="op">;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;568efd789fab1f932aa926b1db86dcb75e9c115c&quot;</span><span class="op">;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-dwHccL89bXzsjDr8O1DmVHlBQQ6aHgNLEaHJCJqHG9w=&quot;</span><span class="op">;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>  <span class="va">postPatch</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="st">    ./autogen.sh</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> autoconf automake</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    bison flex gperf libtool pkg-config <span class="op">];</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> elfutils libbfd libiberty ncurses <span class="op">];</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>  <span class="va">meta</span> <span class="op">=</span> <span class="kw">with</span> lib<span class="op">;</span> <span class="op">{</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;ia64 (Itanium) instruction set simulator.&quot;</span><span class="op">;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>    <span class="va">homepage</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/ski&quot;</span><span class="op">;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>    <span class="va">license</span> <span class="op">=</span> licenses.gpl2Only<span class="op">;</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>    <span class="va">platforms</span> <span class="op">=</span> platforms.linux<span class="op">;</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we need to create an actual overlay expression. I’ll put it in a
separate <code>/tmp/overlay/local-packages.nix</code> file as well:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /tmp/overlay/local-packages.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># we create new 'ski' attribute here!</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">ski</span> <span class="op">=</span> final.callPackage <span class="ss">./ski</span> <span class="op">{};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co"># add more packages below:</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we are ready to use the overlay in our
<code>/etc/nixos/configuration.nix</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Add an overlay to augment existing 'pkgs' map.</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixpkgs</span>.<span class="va">overlays</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="bu">import</span> <span class="ss">/tmp/overlay/local-packages.nix</span><span class="op">)</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="co"># use augmented 'pkgs':</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">environment</span>.<span class="va">systemPackages</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">[</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    ski</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we can get <code>ski</code> installed into our system:</p>
<pre><code>$ sudo nixos-rebuild switch
$ ski -help
Options:
    -help        Display command-line options
    -i &lt;file&gt;    Process initialization file at startup
    -rest &lt;file&gt; Restore simulation state from &lt;file&gt;
    -nonet       Disable networking feature
    -srcroot     Source Root Directory
    -forceuser   Force user-level simulation
    -forcesystem Force system-level simulation
    -strace      Trace system call execution
    -simroot     Simulated root directory
    -conslog &lt;file&gt; Log the console output to the specified file
    -palen &lt;n&gt;      Implemented physical address bits.  Default: 63
    -valen &lt;n&gt;      Implemented virtual address bits.  Default: 61
    -ridlen &lt;n&gt;     Implemented RR.rid bits.  Default: 24
    -keylen &lt;n&gt;     Implemented PKR.key bits.  Default: 24
    -grfile &lt;n&gt;     GR file size.  Default: 128</code></pre>
<p>Seems to work!</p>
<p>We can also get the packages pulled into user’s <code>&lt;nixpkgs&gt;</code> expression:</p>
<pre><code>$ mkdir -p ~/.config/nixpkgs/overlays/
$ ln -s /tmp/overlay/local-packages.nix ~/.config/nixpkgs/overlays/</code></pre>
<p>Now we can use it as a <code>nixpkgs</code> attribute:</p>
<pre><code>$ nix-build '&lt;nixpkgs&gt;' -A ski
/nix/store/rpb5iikr6p0x49zkpw5cjwp9lg8lnl7d-ski-unstable-2022-07-07</code></pre>
<p>A few relevant links:</p>
<ul>
<li><a href="https://nixos.org/manual/nixpkgs/stable/#sec-overlays-install">overlays in nixpkgs manual</a></li>
<li><a href="https://nixos.wiki/wiki/Overlays">overlays in nixos.wiki</a></li>
</ul>
<p>Done!</p>

<div class="info">
    Posted on July 31, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nixpkgs cross-compilation improvements</title>
    <link href="http://trofi.github.io/posts/251-nixpkgs-cross-compilation-improvements.html" />
    <id>http://trofi.github.io/posts/251-nixpkgs-cross-compilation-improvements.html</id>
    <published>2022-07-30T00:00:00Z</published>
    <updated>2022-07-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">TL;DR</h2>
<p><code>gcc</code> cross-compilers are now stripped!
For example <a href="https://github.com/NixOS/nixpkgs/pull/182513">nixpkgs/182513</a>
decreases <code>wine</code> closure (or any other <code>pkgsCross.*.stdenv</code>)
by a ~1GB.</p>
<p><a href="https://github.com/NixOS/nixpkgs/pull/182513">nixpkgs/182513</a> also fixes
stripping of static libraries. You can now remove existing <code>dontStrip = true;</code>
workarounds in <code>nixpkgs</code> if you had to put them in to restore linkage.
For example <a href="https://github.com/NixOS/nixpkgs/pull/183484">nixpkgs/183484</a>
decreases <code>mingw</code> closure by 200MB.</p>
<p>With <a href="https://github.com/NixOS/nixpkgs/pull/181943">nixpkgs/181943</a> <code>gcc</code>
cross-compilers and cross-built <code>gcc</code>s now enable expected features based
on target’s libc headers. Previously libc headers were not passed correctly.
That caused cross-<code>gcc</code> and cross-build <code>gcc</code> to assume too conservative
assumptions about libc like use of <code>libssp</code> on targets or use of executable
stack support.</p>
<h2 id="story-mode">Story mode</h2>
<p>I like cross-compilation. It’s a great way to peek at other
CPU architectures’ properties without having to deal with
real hardware.</p>
<p>Cross-compilation is fundamentally just a compilation. The compiler
should emit code for that one CPU type. Should be a solved problem by
now, right? If you ever tried to cross-compile something large you
probably already know the complications that usually arise from it.</p>
<h2 id="the-problem">The problem</h2>
<p>Scrolling through open <code>nixpkgs</code> PRs I stopped on this one:
<a href="https://github.com/NixOS/nixpkgs/pull/181802">stdenv: lib{gmp,mpc,mpfr,isl}-stage3: isPower64 -&gt; no -fstack-protector</a>.
It looked like something I could review. A few month ago I fiddled with
<a href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html">stdenv bootstrap</a> when I dealt
with <code>glibc-2.35</code> update. If nothing else I knew <code>stdenv</code> is a bit hard
to reason about when it comes to figuring out bootstrap dependency tower.</p>
<p>In the PR Adam Joseph shared the problem he was trying to address. Somewere
at bootstrap time on <code>powerpc64le-linux</code> platform one of the intermediate
<code>gcc</code> builds failed to link as:</p>
<pre><code>/tmp/nix-build-gcc-10.3.0.drv-0/build/./prev-gcc/xg++ \
    -o cc1plus \
    cp/cp-lang.o ... main.o ... ../libdecnumber/libdecnumber.a ... -lz
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.a(mpfr-gmp.o):
  (.toc+0x8): undefined reference to `__stack_chk_guard'
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.a(mpfr-gmp.o):
  (.toc+0x8): undefined reference to `__stack_chk_guard'
...</code></pre>
<p>Adam suggested disabling stack protector just for a few bootstrap
packages (<code>mpfr</code> and the similar) to get past the errro. While it probably
gets the job done it also flags an assumption incompatibility between
compilers. It should not normally happen.</p>
<h2 id="what-is-libssp">What is libssp?</h2>
<p>What is that <code>__stack_chk_guard</code> thing anyway? What is supposed to
provide it?</p>
<p>It has something to do with <code>-fstack-protector*</code> set of options in
<code>gcc</code>. Let’s pick a trivial <code>void wr(char * p, char v){ *p = v; }</code>
function and build it with and without stack protector to get a
feel of it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fno<span class="op">-</span>stack<span class="op">-</span>protector <span class="op">-</span>O2</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>       <span class="co">; Our `*p = v;` code</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 12.1.0&quot;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>The actual code takes 1 line here: <code>movq    %rsi, (%rdi)</code>. It stores
64-bit value at <code>%rsi</code> register (<code>long v</code> parameter) to memory pointed
by <code>%rdi</code> (<code>long * p</code> parameter). The rest is a bit of metadata to get
the code placed properly into the <code>ELF</code> file.</p>
<p>Now let’s add stack protector code to it with <code>-fstack-protector-all</code>
option:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fstack<span class="op">-</span>protector<span class="op">-</span>all <span class="op">-</span>O2</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span>          <span class="co">; allocated a bit of space for canary on stack</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">32</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">fs</span><span class="op">:</span><span class="dv">40</span><span class="op">,</span> <span class="op">%</span><span class="kw">rax</span>       <span class="co">; canary = %fs:40</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span>      <span class="co">; store canary on stack</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        xorl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span>         <span class="co">; clean registers up</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>       <span class="co">; initial `*p = v;` code</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>      <span class="co">; load canary value back from stack</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">%</span><span class="kw">fs</span><span class="op">:</span><span class="dv">40</span><span class="op">,</span> <span class="op">%</span><span class="kw">rax</span>       <span class="co">; compare to the reference value</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>L5                <span class="co">; exit if canary comparison failed</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        .cfi_remember_state</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">8</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span>                        <span class="co">; exit `wr()`</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        .cfi_restore_state</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    __stack_chk_fail   <span class="co">; handle failure</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 12.1.0&quot;</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>Now our original code was diluted with 9(!) extra instructions related
to stack protector checks. To make the checking work the compiler uses
<code>%fs:40</code> thread-local memory location as a canary value. At start of
each function code places canary on stack (with <code>movq %rax, 8(%rsp)</code>)
and at the end of function code reads the canary value back from the
same location (with <code>movq 8(%rsp), %rax</code>) and checks if it was unchanged
(with <code>subq %fs:40, %rax</code> and <code>jne .L5</code>). If the canary check
failed then <code>__stack_chk_fail()</code> is called.</p>
<p>If we generalize the above to pseudo-code <code>gcc</code> turned our program to
something like:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> wr<span class="op">(</span><span class="dt">long</span> <span class="op">*</span> p<span class="op">,</span> <span class="dt">long</span> v<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">long</span> canary <span class="op">=</span> __stack_chk_guard<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>p <span class="op">=</span> v<span class="op">;</span> <span class="co">// original code</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>canary <span class="op">!=</span> __stack_chk_guard<span class="op">)</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        __stack_chk_fail<span class="op">();</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Something has to provide that <code>__stack_chk_fail()</code> function. In case
of <code>glibc</code> that function is provided by <code>libc.so.6</code> library starting
from <code>2.4</code> version:</p>
<pre><code>$ nm -D &lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6  | fgrep __stack
0000000000116de0 T __stack_chk_fail@@GLIBC_2.4</code></pre>
<p>Something also has to arrange addressable <code>%fs:40</code> memory. In case of
<code>glibc</code> that value is placed by <code>glibc</code>
<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=csu/libc-start.c;h=543560f36c33b07a1fbe1b7e4578374fe8007b1f;hb=da3b9f445195bdbe77e66e4fc137a5732637b85f#l311">itself</a>
in the early startup code. <code>%fs</code> is a <code>TLS</code> segment register for a
segment maintained by kernel: kernel changes the segment address
on thread switch.</p>
<p>Thus the above assembly code generated by <code>gcc</code> implies presence of
operating system and supporting libc.</p>
<p>Not all architectures have a way to address thread-local data in that
fashion. For targets without <code>TLS</code> <code>glibc</code> emulates a bit of stack
protection with a global variable <code>uintptr_t __stack_chk_guard attribute_relro;</code>.</p>
<p>Turns out it’s not the only implementation of stack protector prologue
and epilogue even on <code>x86_64</code>. What happens on <code>glibc-2.0</code>? Or on other
libcs or kernels?</p>
<p>The implementation we saw above was the default case of <code>--disable-libssp</code>
mode of <code>gcc</code>. We can also build <code>gcc</code> in <code>--enable-libssp</code>. In this
case we get a bit different code:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a># Locally built <span class="op">`</span>gcc<span class="op">`</span> build with <span class="op">`./</span>configure <span class="op">--</span>enable<span class="op">-</span>libssp<span class="op">`:</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc<span class="op">/</span>xgcc <span class="op">-</span>Bgcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fstack<span class="op">-</span>protector<span class="op">-</span>all <span class="op">-</span>O2</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span>                       <span class="co">; allocated a bit of space for canary on stack</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">32</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    __stack_chk_guard<span class="op">(%</span>rip<span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>   <span class="co">; canary = __stack_chk_guard</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span>                   <span class="co">; store canary on stack</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>        xorl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span>                      <span class="co">; clean registers up</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>                    <span class="co">; initial `*p = v;` code</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>                   <span class="co">; load canary value back from stack</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        subq    __stack_chk_guard<span class="op">(%</span>rip<span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>   <span class="co">; compare to the reference value</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>L5                             <span class="co">; exit if canary comparison failed</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>        .cfi_remember_state</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">8</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span>                                     <span class="co">; exit `wr()`</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>        .cfi_restore_state</span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    __stack_chk_fail                <span class="co">; handle failure</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 13.0.0 20220724 (experimental)&quot;</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>The assembly code is very close to <code>--disable-libssp</code> case. The
difference is how canary is read:
instead of using thread-local <code>%fs:40</code> location <code>gcc</code> now resorts
to using a global <code>__stack_chk_guard</code> variable.</p>
<p>Note that <code>glibc</code> does not provde <code>__stack_chk_guard</code> symbol. In <code>gcc</code>’s
case expected to come from <code>libssp</code> library we just enabled. <code>gcc</code>’s spec
files add <code>-lssp</code> (or equivalent) to all link commands.</p>
<p>This means that binaries produced by <code>--enable-libssp</code> and by
<code>--disable-libssp</code> are slightly incompatible: the final result needs
to be linked by <code>--enable-libssp</code> <code>gcc</code>. Otherwise we’ll get linker
failures:</p>
<pre><code>$ printf &quot;void wr(long * p, long v){ *p = v; }&quot; | gcc/xgcc -Bgcc -c -x c - -fPIC -o a.o -fstack-protector-all -O2
$ gcc -shared a.o -o liba.so -Wl,-no-undefined
&lt;&lt;NIX&gt;&gt;/binutils-2.38/bin/ld: a.o: in function `wr':
&lt;stdin&gt;:(.text+0x7): undefined reference to `__stack_chk_guard'
collect2: error: ld returned 1 exit status</code></pre>
<p>Looks familiar? That’s exactly the same failure we started with.</p>
<h2 id="so-why-do-we-get-a-mix-of-gcc-flavours">So why do we get a mix of gcc flavours?</h2>
<p>Not all libc versions provide stack protector infrastructure. <code>gcc</code>
tries to guess at <code>./configure</code> time by
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l6734">peeking</a>
at target libc’s headers:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode m4"><code class="sourceCode m4"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>[if test <span class="ch">-</span>f $target_header_dir<span class="ch">/</span>features.h \</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="ch">&amp;&amp;</span> glibc_version_major_define<span class="ch">=</span>`$EGREP '<span class="ch">^</span>[     ]<span class="ch">*</span><span class="co">#[    ]*define[       ]+__GLIBC__[</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>   ]<span class="ch">+</span>[<span class="dv">0</span><span class="ch">-</span><span class="dv">9</span>]' $target_header_dir<span class="ch">/</span>features.h` \</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="ch">&amp;&amp;</span> glibc_version_minor_define<span class="ch">=</span>`$EGREP '<span class="ch">^</span>[     ]<span class="ch">*</span><span class="co">#[    ]*define[       ]+__GLIBC_MIN</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>OR__[   ]<span class="ch">+</span>[<span class="dv">0</span><span class="ch">-</span><span class="dv">9</span>]' $target_header_dir<span class="ch">/</span>features.h`; then</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  glibc_version_major<span class="ch">=</span>`echo &quot;$glibc_version_major_define&quot; <span class="ch">|</span> sed <span class="ch">-</span>e 's<span class="ch">/</span>.<span class="ch">*</span>__GLIBC__[</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>     ]<span class="ch">*//</span>'`</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  glibc_version_minor<span class="ch">=</span>`echo &quot;$glibc_version_minor_define&quot; <span class="ch">|</span> sed <span class="ch">-</span>e 's<span class="ch">/</span>.<span class="ch">*</span>__GLIBC_MINOR</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>__[     ]<span class="ch">*//</span>'`</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>fi]</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co"># Test for stack protector support in target C library.</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>AC_CACHE_CHECK<span class="ch">(</span>__stack_chk_fail in target C library<span class="ch">,</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  gcc_cv_libc_provides_ssp<span class="ch">,</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>  [gcc_cv_libc_provides_ssp<span class="ch">=</span>no</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    case &quot;$target&quot; in</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*-*-</span>musl<span class="ch">*)</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>         <span class="co"># All versions of musl provide stack protector</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>         gcc_cv_libc_provides_ssp<span class="ch">=</span>yes;;</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*-*-</span>linux<span class="ch">*</span> <span class="ch">|</span> <span class="ch">*-*-</span>kfreebsd<span class="ch">*-</span>gnu<span class="ch">)</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>      <span class="co"># glibc 2.4 and later provides __stack_chk_fail and</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># either __stack_chk_guard, or TLS access to stack guard canary.</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>      GCC_GLIBC_VERSION_GTE_IFELSE<span class="ch">(</span>[<span class="dv">2</span>]<span class="ch">,</span> [<span class="dv">4</span>]<span class="ch">,</span> [gcc_cv_libc_provides_ssp<span class="ch">=</span>yes]<span class="ch">,</span> [</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>      ...</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*)</span> gcc_cv_libc_provides_ssp<span class="ch">=</span>no ;;</span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    esac</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>  fi]<span class="ch">)</span></span></code></pre></div>
<p>Here <code>configure.ac</code> just greps <code>glibc</code>’s <code>features.h</code> header for library
version. It does not do usual linking probing as bootstrap frequently
starts from <code>gcc</code> and <code>glibc</code> headers alone.</p>
<p>In <code>nixpkgs</code>’s case <code>gcc</code> build in <code>cross-compile</code> case
(<code>host != target</code>) was looking at a wrong directory location by
attempting to add sysroot
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l2438">prefix</a>:</p>
<pre><code>if test x$host != x$target || test &quot;x$TARGET_SYSTEM_ROOT&quot; != x ||
   test x$build != x$host || test &quot;x$with_build_sysroot&quot; != x; then
  if test &quot;x$with_build_sysroot&quot; != x; then
    BUILD_SYSTEM_HEADER_DIR=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'
  else
    BUILD_SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'
  fi

  if test x$host != x$target
  then
    CROSS=&quot;-DCROSS_DIRECTORY_STRUCTURE&quot;
    ALL=all.cross
    SYSTEM_HEADER_DIR=$BUILD_SYSTEM_HEADER_DIR
  elif test &quot;x$TARGET_SYSTEM_ROOT&quot; != x; then
    SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'
  fi

  if test &quot;x$with_build_sysroot&quot; != &quot;x&quot;; then
    target_header_dir=&quot;${with_build_sysroot}${native_system_header_dir}&quot;
  elif test &quot;x$with_sysroot&quot; = x; then
    target_header_dir=&quot;${test_exec_prefix}/${target_noncanonical}/sys-include&quot;
  elif test &quot;x$with_sysroot&quot; = xyes; then
    target_header_dir=&quot;${test_exec_prefix}/${target_noncanonical}/sys-root${native_system_header_dir}&quot;
  else
    target_header_dir=&quot;${with_sysroot}${native_system_header_dir}&quot;
  fi
else
  target_header_dir=${native_system_header_dir}
fi</code></pre>
<p>Note how hard <code>gcc</code> tries:</p>
<ul>
<li><code>${buildsysroot}/${native_system_header_dir}</code></li>
<li><code>${exec_prefix}/${target}/sys-include</code></li>
<li><code>${exec_prefix}/${target}/sys-root${native_system_header_dir}</code></li>
<li><code>${sysroot}${native_system_header_dir}</code></li>
</ul>
<p><code>nixpkgs</code> provided none of these directories and build was falling back
to outdated <code>glibc-0.0</code> assumption.</p>
<p>Thus initial fix was simple: just add <code>--with-build-sysroot=/</code> option to
<code>gcc</code>’s <code>./configure</code> to trick it to use <code>/${native_system_header_dir}</code> path.</p>
<p>One-liner change! This allowed me to cross-build <code>gcc</code> for
<code>powerpc64le-linux</code> and make sure stack protector is using <code>glibc</code>
support code. Are we done?</p>
<h2 id="pandoras-box">Pandora’s box</h2>
<p>The <code>--with-build-sysroot=/</code> now started enabling all sorts of
libc-specific features. That should be fine on it’s own, but for
<code>nixpkgs</code> cross-build (<code>build != host == target</code>) case it was
like that for the first time.</p>
<p>Varios linux targets just worked with the fix. Mostly because
we are compiling from <code>glibc</code> to <code>glibc</code>. Or from <code>glibc</code> to <code>musl</code>.
It’s usually not that bad to miss a feature or two.</p>
<p>I was confident of the fix, but <a href="https://github.com/NixOS/ofborg">ofborg</a>
presubmit test told me that I broke <code>x86_64-darwin</code> <code>gcc</code> build:</p>
<pre><code>impure path `//' used in link
collect2: error: ld returned 1 exit status</code></pre>
<p>After a bit of debugging I found it to be just a false positive check
failure in <code>nixpkgs</code>-specific <code>ld</code> wrapper script. Wrapper complained
that <code>-syslibroot //</code> refers outside <code>/nix/store</code> path and thus breaks
the sandboxing. But in reality it’s a no-op flag. Thus I just skipped
this specific path in the wrapper.</p>
<p>I tried to cross-build <code>gcc</code>. It failed again. This time <code>ofborg</code> was
still unhappy and complained about missing <code>sys/sdt.h</code> header~</p>
<p>That was surprising: <code>darwin's</code> libc does provide <code>sys/sdt.h</code>,
while <code>glibc</code> does not. Why does it even try to use that header?
Normally <code>gcc</code>’s <code>configure.ac</code> <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l6807">probes it</a>
as a target header as well:</p>
<pre class="shell"><code># Test for &lt;sys/sdt.h&gt; on the target.
GCC_TARGET_TEMPLATE([HAVE_SYS_SDT_H])
AC_MSG_CHECKING(sys/sdt.h in the target C library)
have_sys_sdt_h=no
if test -f $target_header_dir/sys/sdt.h; then
  have_sys_sdt_h=yes
  AC_DEFINE(HAVE_SYS_SDT_H, 1,
            [Define if your target C library provides sys/sdt.h])
fi
AC_MSG_RESULT($have_sys_sdt_h)</code></pre>
<p>The answer was straightforward: <code>nixpkgs</code> incorrectly used host’s
headers as target headers!</p>
<p>After I sorted this failure yet another failure came up: <code>pkgsLLVM</code>
bootstrap was broken because <code>gcc</code> enables corss-compilation mode
for <code>build != host || host != target</code> case. But <code>nixpkgs</code> uses
<code>x86_64-unknown-linux-gnu</code> for both <code>gcc</code> (host) and <code>llvm</code>
(target) toolchains and bootstraps it as a proper cross-compiler.
That was easy to fix with <a href="https://github.com/NixOS/nixpkgs/pull/182666">nixpkgs/182666</a>.</p>
<p>Is that it? I’m not sure. I think we have a few more workarounds
buried in <code>nixpkgs</code> that stemmed from the fact that we used wrong
headers. One bug at a time.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nixpkgs</code> makes it trivial to try various cross-compilers with a
single command. <code>darwin</code> port was very useful to expose two bugs
in generic include layour scheme <code>nixpkgs</code> was using.</p>
<p>Reproducible environment made it possible to debug early stage of
<code>gcc</code> bootstrap when libc is not yet present for target. When I did
a similar work on Gentoo’s <code>crossdev</code> I was frequently tricked by
the fact that building initiall cross-toolchain frequently results
in a different result than after a <code>crossdev</code> rerun.</p>
<p><code>gcc</code>’s <code>./configure</code> is surprisingly resilient to all the invalid
configurations you throw at it. It always manages to produce something
that mostly works and gets you going as an initial porting effort.
I think it’s a good thing in the toolchain world as target environments
are so diverse. But it takes some time to debug it efficiently.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 30, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Dynamic linking is hard (SuperH version)</title>
    <link href="http://trofi.github.io/posts/250-dynamic-linking-is-hard-superh-version.html" />
    <id>http://trofi.github.io/posts/250-dynamic-linking-is-hard-superh-version.html</id>
    <published>2022-07-10T00:00:00Z</published>
    <updated>2022-07-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I got a bit more free weekend time and I’m slowly going through a
backlog of topics to write about.</p>
<p>Today I’ll write about the <code>GHC</code> bug from 4 years ago.</p>
<h2 id="the-problem">The problem</h2>
<p>John Paul Adrian Glaubitz found yet another interesting case of <strong>GHC</strong> doing
<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/15338">something very unusual</a>.</p>
<p>Namely <strong>ghc-pkg</strong> was not able to print it’s own version when (and only when)
redirected to a … pipe(!):</p>
<pre><code># good:
$ ghc-pkg --version
GHC package manager version 8.2.2

# bad:
$ ghc-pkg --version | cat
</code></pre>
<p>“Looks like a very simple coding error” was my thought. I attempted the
same test on <strong>ghc-HEAD</strong> and reproduced strange behaviour.</p>
<p><strong>ghc-pkg</strong> is a
<a href="https://gitlab.haskell.org/ghc/ghc/-/blob/master/utils/ghc-pkg/Main.hs">simple single-source tool</a>.
It was easy to reduce the original down to the following minimal example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- a.hs</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.IO</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    hSetBuffering stdout (<span class="dt">BlockBuffering</span> <span class="dt">Nothing</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    hPutStrLn stdout <span class="st">&quot;hello&quot;</span></span></code></pre></div>
<p>Quiz question: what do you think is a bug here?</p>
<p>The caveat is that all this happens on
<a href="https://en.wikipedia.org/wiki/SuperH">SuperH</a> architecture.</p>
<pre><code>$ inplace/bin/ghc-stage1 --make a.hs -O1 -dynamic
$ /usr/bin/qemu-sh4 -L /usr/sh4-unknown-linux-gnu/ ./a
&lt;empty&gt;</code></pre>
<p>Already see the bug? Me neiter.</p>
<h2 id="what-is-superh">What is SuperH?</h2>
<p><strong>SuperH</strong> (or <strong>sh</strong>) is a 32-bit <strong>RISC</strong> architecture designed by
<strong>Hitachi</strong>. <strong>Sega Saturn</strong>, <strong>Sega 32X</strong> and <strong>Sega Dreamcast</strong>
all use <strong>sh</strong>-based chips. <strong>SuperH</strong> also hides in many controllers
like <strong>CD-ROM</strong>.</p>
<p><strong>SuperH</strong> recently got new life in development community
after a bunch of related patents expired in 2015.</p>
<p>From a software development standpoint (as in, shared bugs) <strong>sh</strong>
feels like <strong>m68k</strong>. For example it’s instruction length is 2 bytes
which drives some low-level toolchain decisions to be similar to <strong>m68k</strong>.</p>
<p>Let’s have a look at a disassembly of a <strong>fabs</strong> function in
<strong>glibc</strong> to get a feel for this architecture:</p>
<pre><code>000213cc &lt;fabs@@GLIBC_2.2&gt;:
   213cc:       c6 2f           mov.l   r12,@-r15
   213ce:       0e c7           mova    21408 &lt;fabs@@GLIBC_2.2+0x3c&gt;,r0
   213d0:       0d dc           mov.l   21408 &lt;fabs@@GLIBC_2.2+0x3c&gt;,r12        ! 76c00
   213d2:       0e d3           mov.l   2140c &lt;fabs@@GLIBC_2.2+0x40&gt;,r3 ! 48
   213d4:       0c 3c           add     r0,r12
   213d6:       4c f0           fmov    fr4,fr0
   213d8:       22 4f           sts.l   pr,@-r15
   213da:       c3 62           mov     r12,r2
   213dc:       3c 32           add     r3,r2
   213de:       22 62           mov.l   @r2,r2
   213e0:       fc 7f           add     #-4,r15
   213e2:       5c f1           fmov    fr5,fr1
   213e4:       22 63           mov.l   @r2,r3
   213e6:       32 2f           mov.l   r3,@r15
   213e8:       00 e3           mov     #0,r3
   213ea:       f2 67           mov.l   @r15,r7
   213ec:       22 63           mov.l   @r2,r3
   213ee:       70 33           cmp/eq  r7,r3
   213f0:       00 e7           mov     #0,r7
   213f2:       00 e3           mov     #0,r3
   213f4:       04 8f           bf.s    21400 &lt;fabs@@GLIBC_2.2+0x34&gt;
   213f6:       5d f0           fabs    fr0
   213f8:       04 7f           add     #4,r15
   213fa:       26 4f           lds.l   @r15+,pr
   213fc:       0b 00           rts
   213fe:       f6 6c           mov.l   @r15+,r12
   21400:       03 d7           mov.l   21410 &lt;fabs@@GLIBC_2.2+0x44&gt;,r7 ! fffe5a52
   21402:       03 07           bsrf    r7
   21404:       09 00           nop
   21406:       09 00           nop
   21408:       00 6c           mov.b   @r0,r12
   2140a:       07 00           mul.l   r0,r0
   2140c:       48 00           .word 0x0048
   2140e:       00 00           .word 0x0000
   21410:       52 5a           mov.l   @(8,r5),r10
   21412:       fe ff           fmac    fr0,fr15,fr15</code></pre>
<p>A few things to note here:</p>
<ul>
<li><p>Instructions are only 2 bytes long. This makes the task of
encoding large branch offsets especially tricky: you need to
store 32-bit offset somere in nearby memory. In the example
above it’s <strong>.word 0x0048; .word 0x0000</strong>.</p></li>
<li><p><strong>r15</strong> is a stack pointer</p></li>
<li><p><strong>SuperH</strong> support increments/decrements as part of the main
instruction:</p>
<ul>
<li><strong>sts.l pr,@-r15</strong>: push return address on stack (pre-decrement)</li>
<li><strong>lds.l <span class="citation" data-cites="r15">@r15</span>+,pr</strong>: pop return address from stack (post-increment)</li>
</ul></li>
<li><p>There are <strong>FPU</strong> instructions like <strong>fabs</strong> itself.</p></li>
</ul>
<p>Handy! But it does not really matter all that for our particular bug :)</p>
<h2 id="the-gist-of-the-bug">The gist of the bug</h2>
<p>Before digging deeper into the bug I tried the same reproducer on a
bunch of targets using <strong>qemu</strong> and using real hardware where I could
reach. Results were:</p>
<ul>
<li>broken: <strong>sh4</strong> and <strong>m68k</strong></li>
<li>working: <strong>x86_64</strong>, <strong>mipsn32</strong>, <strong>powerpc</strong>, <strong>powerpc64</strong>, <strong>sparc</strong></li>
</ul>
<p><strong>x86_64</strong> and <strong>powerpc{,64}</strong> are targets with native <strong>GHC</strong> code
generation. <strong>mips</strong>, <strong>sparc</strong>, <strong>sh4</strong> and <strong>m68k</strong> are <strong>via-C</strong>
(<strong>unregisterised</strong>) targets. Thus it’s probably not just a bug in
unregisterised backend.</p>
<p>It also not just 32 vs 64 bit bug (<strong>sparc</strong> is 32-bit here).</p>
<p>I dug a bit more into the failure and found that <strong>haskell</strong>-level
<strong>System.IO.stdout</strong> closure (rough equivalent of <strong>C</strong>’s <strong>stdout</strong>
global) is present in memory in multiple places! And different
pieces of code access different copies of it.</p>
<p>Specifically the code that initialises <strong>System.IO.stdout</strong> fills
all fields diligently. But code that writes to it uses default
object full of zeros.</p>
<p>Jessica Clarke pointed at <strong>GHC</strong>’s use of <strong>-Bsymbolic</strong> linker
option that breaks various <strong>C</strong>-level assumptions. <strong>GHC</strong>’s native
code generator specifically tries to generate code compatible with
<strong>-Bsymbolic</strong>. But when unregisterised backend is used <strong>GHC</strong> has
no control of what <strong>gcc</strong> produces. And <strong>gcc</strong> breaks the assumptions.</p>
<p>In <strong>GHC</strong>’s case <strong>-Bsymbolic</strong> is a performance optimization. It’s not
a requirement to get haskell compiler on a platform. Thus the simple fix
was to avoid use of it in unregisterised codegen with
<a href="https://gitlab.haskell.org/ghc/ghc/-/commit/8ec48990fee9e245bb2fe40dc6f65b61b8612157">the patch</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/compiler/main/SysTools.hs</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/compiler/main/SysTools.hs</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -548,1 +548,1 @@ linkDynLib dflags0 o_files dep_packages</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>             let bsymbolicFlag = -- ...</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="st">-                                [&quot;-Wl,-Bsymbolic&quot;]</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                [&quot;-Wl,-Bsymbolic&quot; | not unregisterised]</span></span></code></pre></div>
<h2 id="but-how-exactly-did-it-break">But how exactly did it break?</h2>
<p>The above probably does not make much sense. What is <strong>-Bsymbolic</strong>?
Why does it make things worse if it’s just an optimization? Why do some
unreg targets are not affected?</p>
<p>Let’s look at a smaller example in <strong>C</strong>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* lib.c: */</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> g <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> lib_g<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> g<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* prog.c */</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">/* declarations from lib.c */</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> g<span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> lib_g<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;before: main.g=%i; lib_g()=%i</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> g<span class="op">,</span> lib_g<span class="op">());</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    g <span class="op">=</span> <span class="dv">12345678</span><span class="op">;</span> <span class="co">/* Was 42. */</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;after:  main.g=%i; lib_g()=%i</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> g<span class="op">,</span> lib_g<span class="op">());</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here we have library code with one global variable <strong>g</strong> and
a getter function <strong>lib_g()</strong>. And a main program where
<strong>main()</strong> function prints initial value of <strong>g</strong> global directly
and via <strong>lib_g()</strong> getter. We also change <strong>g</strong> value directly
and print result again.</p>
<p>Nothing too complicated.</p>
<p>Here is how things work when we build it as a single executable:</p>
<pre><code>$ gcc -O1 lib.c prog.c -o good
$ ./good
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>No surprise here:</p>
<ul>
<li>before the store both <strong>g</strong> and <strong>lib_g()</strong> return <strong>42</strong></li>
<li>after the store both <strong>g</strong> and <strong>lib_g()</strong> return <strong>12345678</strong></li>
</ul>
<p>It’s trivial. What could possible go wrong here?</p>
<p>Now let’s try to build the same source as a pair of executable
and it’s shared library:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o good-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ ./good-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>Same thing.</p>
<p>To be even clearer the data flow is the following:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-1.svg" /></p>
<p>Here green arrows denote data reads, light green boxes
denote intructions that perform reads. Cyan shade shows the
writes and write instructions.</p>
<p>All the paths directly or indirectly read and write the same <strong>g</strong> location.
Seems like no place to go wrong, right?</p>
<p>Now let’s add a <strong>-Wl,-Bsymbolic</strong> linker option used by <strong>GHC</strong>. <strong>man ld</strong>
says:</p>
<pre><code>   -Bsymbolic
       When creating a shared library, bind references to global symbols to the
       definition within the shared library, if any.  Normally, it is possible for
       a program linked against a shared library to override the definition within
       the shared library.  This option is only meaningful on ELF platforms which
       support shared libraries.</code></pre>
<p>Overrides usually happen when we define a symbol in multiple places: one in shared
library and another in executable program. One of them has to win. <strong>LD_PRELOAD</strong>
frequently relies on symbol override semantics.</p>
<p>But does our program override any definitions? If feels like we don’t do
anything special: we define all the things once and use them the simplest
way possible, right?</p>
<p>Let’s try:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ ./symbolic-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=42</code></pre>
<p>Whoops. What happens here? Why do <strong>g</strong> and <strong>lib_g()</strong> see different values?</p>
<p>Let’s look at final generated code. I’ll start from simplest case without an
external library where things stil worked. Building:</p>
<pre><code>$ gcc -O1 lib.c prog.c -o good
$ objdump -DR good</code></pre>
<p>Peeking inside:</p>
<pre><code>Disassembly of section .text:
        ...
0000000000401126 &lt;lib_g&gt;:
  401126:       8b 05 04 2f 00 00       mov    0x2f04(%rip),%eax        # 404030 &lt;g&gt;
  40112c:       c3                      ret

000000000040112d &lt;main&gt;:
  40112d:       48 83 ec 08             sub    $0x8,%rsp
  401131:       e8 f0 ff ff ff          call   401126 &lt;lib_g&gt;
  401136:       89 c2                   mov    %eax,%edx
  401138:       8b 35 f2 2e 00 00       mov    0x2ef2(%rip),%esi        # 404030 &lt;g&gt;
  40113e:       bf 08 20 40 00          mov    $0x402008,%edi
  401143:       b8 00 00 00 00          mov    $0x0,%eax
  401148:       e8 e3 fe ff ff          call   401030 &lt;printf@plt&gt;
  40114d:       c7 05 d9 2e 00 00 4e    movl   $0xbc614e,0x2ed9(%rip)   # 404030 &lt;g&gt;
  401154:       61 bc 00
  401157:       e8 ca ff ff ff          call   401126 &lt;lib_g&gt;
  40115c:       89 c2                   mov    %eax,%edx
  40115e:       8b 35 cc 2e 00 00       mov    0x2ecc(%rip),%esi        # 404030 &lt;g&gt;
  401164:       bf 28 20 40 00          mov    $0x402028,%edi
  401169:       b8 00 00 00 00          mov    $0x0,%eax
  40116e:       e8 bd fe ff ff          call   401030 &lt;printf@plt&gt;
  401173:       b8 00 00 00 00          mov    $0x0,%eax
  401178:       48 83 c4 08             add    $0x8,%rsp
  40117c:       c3                      ret

Disassembly of section .data:
        ...
0000000000404030 &lt;g&gt;:
  404030:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>Here our global variable <strong>g</strong> is located in <strong>.data</strong> section at <strong>0x404030</strong> address.
<strong>gcc</strong> used most efficient code to access it by using <strong>RIP</strong>-relative addressing:</p>
<ul>
<li>read via: <strong>mov 0x2ef2(%rip),%esi # 404030 &lt;g&gt;</strong>.</li>
<li>write via: <strong>movl $0xbc614e,0x2ed9(%rip) # 404030 &lt;g&gt;</strong></li>
</ul>
<p>Note that <strong>0x2ef2(%rip)</strong> is a fixed offset from the current instruction. In this case
it always refers to <strong>0x404030</strong> address of <strong>g</strong> and does not depend on any other
library that could be loaded into address space along the program.</p>
<p>There is the picture form of the above (same legend as in previous picture):</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-2.svg" /></p>
<p>It should be obvious from the picture that all the reads and writes to <strong>g</strong> happen at
the same <strong>0x404030</strong> location.</p>
<p>Now let’s have a look at our broken example. Building:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ objdump -DR libbug.so
$ objdump -DR symbolic-shared</code></pre>
<p>Peeking inside.</p>
<p>Let’s first look at <strong>libbug.so</strong>:</p>
<pre><code>Disassembly of section .text:
00000000000010f9 &lt;lib_g&gt;:
    10f9:       48 8d 05 20 2f 00 00    lea    0x2f20(%rip),%rax        # 4020 &lt;g&gt;
    1100:       8b 00                   mov    (%rax),%eax
    1102:       c3                      ret

Disassembly of section .data:
        ...
0000000000004020 &lt;g&gt;:
    4020:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>The code (<strong>.text</strong>) part is almost identical to our <strong>prog</strong> case. Except that instead of
direct <strong>mov 0x2f04(%rip),%eax</strong> instruction it uses a pair of instructions:
<strong>lea 0x2f20(%rip),%rax</strong> / <strong>mov (%rax),%eax</strong>. Both forms are semantically
equivalent.</p>
<p>Homework question: why does <strong>libbug.so</strong> use less efficient encoding?</p>
<p>The data (<strong>.data</strong>) part hosts <strong>g</strong> global variable at <strong>0x4020</strong> address. It’s not a real address
as shared libraries could normally be loaded at any address. We would need to add a
base address to every address we see. But we can pretend for now the library will be
loaded at address <strong>0</strong> and all the addresses we see are real and valid.</p>
<p><strong>symbolic-shared</strong> has a few new things:</p>
<pre><code>Disassembly of section .text:
        ...
0000000000401136 &lt;main&gt;:
  401136:       48 83 ec 08             sub    $0x8,%rsp
  40113a:       e8 f1 fe ff ff          call   401030 &lt;lib_g@plt&gt;
  40113f:       89 c2                   mov    %eax,%edx
  401141:       8b 35 f1 2e 00 00       mov    0x2ef1(%rip),%esi        # 404038 &lt;g@@Base&gt;
  401147:       bf 08 20 40 00          mov    $0x402008,%edi
  40114c:       b8 00 00 00 00          mov    $0x0,%eax
  401151:       e8 ea fe ff ff          call   401040 &lt;printf@plt&gt;
  401156:       c7 05 d8 2e 00 00 4e    movl   $0xbc614e,0x2ed8(%rip)   # 404038 &lt;g@@Base&gt;
  40115d:       61 bc 00
  401160:       e8 cb fe ff ff          call   401030 &lt;lib_g@plt&gt;
  401165:       89 c2                   mov    %eax,%edx
  401167:       8b 35 cb 2e 00 00       mov    0x2ecb(%rip),%esi        # 404038 &lt;g@@Base&gt;
  40116d:       bf 28 20 40 00          mov    $0x402028,%edi
  401172:       b8 00 00 00 00          mov    $0x0,%eax
  401177:       e8 c4 fe ff ff          call   401040 &lt;printf@plt&gt;
  40117c:       b8 00 00 00 00          mov    $0x0,%eax
  401181:       48 83 c4 08             add    $0x8,%rsp
  401185:       c3                      ret
...
Disassembly of section .bss:

0000000000404038 &lt;g&gt;:
  404038:       00 00                   add    %al,(%rax)
                        404038: R_X86_64_COPY   g@@Base
        ...</code></pre>
<p>On the surface <strong>main()</strong> has identical code to our <strong>prog</strong> case as well:
same <strong>RIP-relative</strong> addressing to reach local <strong>g</strong>. Except that <strong>g</strong> is
not supposed to be local! It’s loaded from unknown address in external shared
library! How did it get into our binary?</p>
<p><strong>gcc</strong> code generator assumes it’s local and relies on so called <strong>COPY</strong>
relocation (<strong>R_X86_64_COPY</strong> in our case) to copy data from external library
into the executable binary.</p>
<p>Effectively that means that at load time we will have two independen copies of <strong>g</strong>:</p>
<ul>
<li>one in <strong>libbug.so</strong> at address <strong>0x4020</strong> used by <strong>lib_g()</strong> function</li>
<li>and another in <strong>symbolic-shared</strong> binary at address <strong>0x404038</strong> used
by <strong>main()</strong> direct references.</li>
</ul>
<p>Or the same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-3.svg" /></p>
<p>Compared to previous pictures blue arrows show load-time data copy from
library data into binary data. And red arrow shows reads from stale source
location.</p>
<p>Note that <strong>main()</strong> always reads and write only local copy of <strong>g</strong>.
It never looks at <strong>libbug.so</strong>’s original. While <strong>lib_g()</strong> only
ever uses <strong>libbug.so</strong>’s original.</p>
<p>That is the negative effect of <strong>-Wl,-Bsymbolic</strong>: we effectively got
two independent <strong>g</strong> global variables that only happen to share initial
value at startup time.</p>
<p>So how does it work at all without <strong>-Wl,-Bsymbolic</strong>? We did not pass that
linker flag to the final binary. Only shared library was “corrupted” by it.</p>
<p>Quick quiz: what is you guess? Would the <strong>COPY</strong> relocation disappear magically?
Or library code would transform into something else?</p>
<p>Let’s have a look at a working shared library example now. Building:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o good-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ objdump -DR libbug.so
$ objdump -DR good-shared</code></pre>
<p>Peeking inside. <strong>libbug.so</strong>:</p>
<pre><code>Disassembly of section .text:
        ...
00000000000010f9 &lt;lib_g&gt;:
    10f9:       48 8b 05 e8 2e 00 00    mov    0x2ee8(%rip),%rax        # 3fe8 &lt;g@@Base-0x38&gt;
    1100:       8b 00                   mov    (%rax),%eax
    1102:       c3                      ret

Disassembly of section .got:

0000000000003fd8 &lt;.got&gt;:
        ...
                        3fe8: R_X86_64_GLOB_DAT g@@Base
Disassembly of section .data:
        ...
0000000000004020 &lt;g&gt;:
    4020:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>This time the code is a bit different from <strong>prog</strong> and <strong>-Bsymbolic</strong> case.</p>
<p><strong>g</strong> is read not by one <strong>mov</strong> instruction as before, but by two. Now we have
an indirection (via <strong>.got</strong>, Global Offset Table) where real address of <strong>g</strong>
is stored. And library does not know it’s own global variable address!</p>
<p>And <strong>good-shared</strong> executable is exactly the same as <strong>symbolic-shared</strong>:</p>
<pre><code>Disassembly of section .text:
0000000000401136 &lt;main&gt;:
  401136:       48 83 ec 08             sub    $0x8,%rsp
  40113a:       e8 f1 fe ff ff          call   401030 &lt;lib_g@plt&gt;
  40113f:       89 c2                   mov    %eax,%edx
  401141:       8b 35 f1 2e 00 00       mov    0x2ef1(%rip),%esi        # 404038 &lt;g@@Base&gt;
  401147:       bf 08 20 40 00          mov    $0x402008,%edi
  40114c:       b8 00 00 00 00          mov    $0x0,%eax
  401151:       e8 ea fe ff ff          call   401040 &lt;printf@plt&gt;
  401156:       c7 05 d8 2e 00 00 4e    movl   $0xbc614e,0x2ed8(%rip)   # 404038 &lt;g@@Base&gt;
  40115d:       61 bc 00
  401160:       e8 cb fe ff ff          call   401030 &lt;lib_g@plt&gt;
  401165:       89 c2                   mov    %eax,%edx
  401167:       8b 35 cb 2e 00 00       mov    0x2ecb(%rip),%esi        # 404038 &lt;g@@Base&gt;
  40116d:       bf 28 20 40 00          mov    $0x402028,%edi
  401172:       b8 00 00 00 00          mov    $0x0,%eax
  401177:       e8 c4 fe ff ff          call   401040 &lt;printf@plt&gt;
  40117c:       b8 00 00 00 00          mov    $0x0,%eax
  401181:       48 83 c4 08             add    $0x8,%rsp
  401185:       c3                      ret
...
Disassembly of section .bss:

0000000000404038 &lt;g&gt;:
  404038:       00 00                   add    %al,(%rax)
                        404038: R_X86_64_COPY   g@@Base
        ...</code></pre>
<p>Here we see the same pattern: again <strong>g</strong> is copied out of it’s real
location (<strong>libbug.so</strong> provides symbol contents) and the rest of
program uses this copy.</p>
<p>The same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-4.svg" /></p>
<p>Magenta arrows shows the code that reads final address of <strong>g</strong> global
variable. Note that now nothing (aside from <strong>COPY</strong> relocation) reads
original <strong>g</strong> global variable at <strong>0x4020</strong> address: everything including
<strong>libbug.so</strong> uses executable’s copy of <strong>g</strong> at address <strong>0x404038</strong>.</p>
<p>Now we can make <strong>-Wl,-Bsymbolic</strong> work for us by enabling <strong>-fPIC</strong>
code on final executable:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN' -fPIC
./symbolic-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>Works as expected! Homework quiz: why does it work?</p>
<h2 id="parting-words">Parting words</h2>
<p>Note that with <strong>-fPIC</strong> <strong>gcc</strong> generates the code to always go through
<strong>.got</strong> indirection to both allow for easy override (interposition) and
to allow final executables to have more efficient access to globals without
<strong>.got</strong> indirection.</p>
<p>This effectively penaizes library code in favour of speeding up binary code.
This tradeoff implies that most of the time library globals will be accessed
from outside the library (rather than inside the library). To get these
limitations around performance critical libraries (like <strong>glibc</strong>) go to the
great lengths to avoid use of externally visible global symbols and use
sorts of <strong><strong>attribute</strong>((visibility(“hidden”)))</strong> / <strong>-fvisibility=hidden</strong>
to get performance back.</p>
<p><strong>GHC</strong>’s strategy is to use <strong>-Bsymbolic</strong> to prioritize library code access
and be careful about using <strong>-fPIC</strong> style code on executables.</p>
<p><strong>COPY</strong> relocations have all sorts of unusual side-effects. They actually copy
data (which might take a considerable startup time for large programs), they
leak object sizes across binaries (as one needs to know how much to copy).
<a href="http://trofi.github.io/posts/195-dynamic-linking-ABI-is-hard.html">Nettle bug</a> is an interesting case
of <strong>ABI</strong> breakage of the past.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 10, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>A small update on 'make --shuffle' mode</title>
    <link href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html" />
    <id>http://trofi.github.io/posts/249-an-update-on-make-shuffle.html</id>
    <published>2022-06-21T00:00:00Z</published>
    <updated>2022-06-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="tldr">Tl;DR</h1>
<p>GNU Make --shuffle mode <a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=621d3196fae94e9006a7e9c5ffdaf5ec209bf832">entered upstream git repository</a> \o/.</p>
<p>For testing convenience I also tarballed the development <strong>GNU make</strong>
snapshot from today’s <a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=84ed34ba5a32dd52600c756445f3724c9e23cf95">git state</a>:
<a href="https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619.tar.lz" class="uri">https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619.tar.lz</a>.</p>
<p>Note that <strong>--shuffle</strong> is not enabled by default. You can enable it
by any of below methods whichever matches best your environment:</p>
<ul>
<li><p>Run <strong>make --shuffle</strong>. For casual testing.</p></li>
<li><p>Export <strong>GNUMAKEFLAGS=--shuffle</strong> environment variable. For
day-to-day development or distribution-wide testing. It is also a
safe value for <strong>GNU make</strong> that does not yet understand <strong>--shuffle</strong> option.</p>
<p>Update: changed <del>MAKEFLAGS</del> to <strong>GNUMAKEFLAGS</strong> as <strong>bmake</strong> does not
skip unknown options and fails. Noticed by Toralf.</p></li>
<li><p>Apply <a href="https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619-random-by-default.patch" class="uri">https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619-random-by-default.patch</a>
on top of snapshot tarball. Useful for environments where there is no
easy way to pass a parameter to <strong>make</strong> or to set <strong>GNUMAKEFLAGS</strong>
variable.</p></li>
</ul>
<h1 id="minor-improvements">minor improvements</h1>
<p>Compared to the initial patch announced as a
<a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">proof of concept</a>
there is one extra change: presence of <strong>.NOTPARALLEL:</strong> directive
in a <strong>Makefile</strong> now disables shuffling in that file.</p>
<p>It was done to accommodate rare projects that rely on execution order
specified in <strong>Makefile</strong> and don’t plan to make dependencies correct
in near future. The example is <strong>netpbm</strong>:
<a href="https://sourceforge.net/p/netpbm/code/HEAD/tree/trunk/GNUmakefile#l110" class="uri">https://sourceforge.net/p/netpbm/code/HEAD/tree/trunk/GNUmakefile#l110</a></p>
<h1 id="failure-examples">failure examples</h1>
<p>A few new bugs were found and/or fixed:</p>
<ul>
<li>vim: <a href="https://github.com/vim/vim/pull/9978" class="uri">https://github.com/vim/vim/pull/9978</a></li>
<li>groff: <a href="https://savannah.gnu.org/bugs/?62084" class="uri">https://savannah.gnu.org/bugs/?62084</a></li>
<li>gpm: <a href="https://github.com/telmich/gpm/pull/43" class="uri">https://github.com/telmich/gpm/pull/43</a></li>
<li>gnu-efi: <a href="https://sourceforge.net/p/gnu-efi/patches/84/" class="uri">https://sourceforge.net/p/gnu-efi/patches/84/</a></li>
<li>cmigemo: <a href="https://github.com/koron/cmigemo/pull/29" class="uri">https://github.com/koron/cmigemo/pull/29</a></li>
<li>harvid: <a href="https://github.com/NixOS/nixpkgs/pull/178647" class="uri">https://github.com/NixOS/nixpkgs/pull/178647</a></li>
<li>subversion: <a href="https://issues.apache.org/jira/browse/SVN-4901" class="uri">https://issues.apache.org/jira/browse/SVN-4901</a></li>
<li>ocamlbuild: <a href="https://github.com/ocaml/ocamlbuild/pull/318" class="uri">https://github.com/ocaml/ocamlbuild/pull/318</a></li>
<li>ghc(!): <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8531" class="uri">https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8531</a></li>
<li>slang: fixed in slang-pre2.3.3-77 snapshot in 5d36d7c2410cbd640470a9c97cc544d257c64660 commit. Could not find web UI for repository.</li>
<li>strace: <a href="https://github.com/strace/strace/pull/215" class="uri">https://github.com/strace/strace/pull/215</a></li>
<li>ski: <a href="https://github.com/trofi/ski/commit/7cc1ced067bf3822ef87c323b6110f38bc0ca1b5" class="uri">https://github.com/trofi/ski/commit/7cc1ced067bf3822ef87c323b6110f38bc0ca1b5</a></li>
<li>heimdal: <a href="https://github.com/heimdal/heimdal/pull/999" class="uri">https://github.com/heimdal/heimdal/pull/999</a></li>
<li>src-highlite: <a href="https://savannah.gnu.org/patch/index.php?10262" class="uri">https://savannah.gnu.org/patch/index.php?10262</a></li>
<li>gcc: <a href="https://gcc.gnu.org/PR106162" class="uri">https://gcc.gnu.org/PR106162</a>, <a href="https://gcc.gnu.org/pipermail/gcc-patches/2022-September/601708.html" class="uri">https://gcc.gnu.org/pipermail/gcc-patches/2022-September/601708.html</a></li>
<li>openipmi: <a href="https://sourceforge.net/p/openipmi/patches/37/" class="uri">https://sourceforge.net/p/openipmi/patches/37/</a></li>
<li>avldrums.lv2: <a href="https://github.com/x42/avldrums.lv2/pull/22" class="uri">https://github.com/x42/avldrums.lv2/pull/22</a></li>
<li>exifprobe: <a href="https://github.com/hfiguiere/exifprobe/pull/21" class="uri">https://github.com/hfiguiere/exifprobe/pull/21</a></li>
<li>x264: <a href="https://code.videolan.org/videolan/x264/-/merge_requests/114" class="uri">https://code.videolan.org/videolan/x264/-/merge_requests/114</a></li>
<li>ispell: will be fixed in 3.4.06. Could not find web UI for the repository.</li>
<li>mingw-w64: <a href="https://sourceforge.net/p/mingw-w64/mingw-w64/ci/e1b0c1420bbd52ef505c71737c57393ac1397b0a/" class="uri">https://sourceforge.net/p/mingw-w64/mingw-w64/ci/e1b0c1420bbd52ef505c71737c57393ac1397b0a/</a></li>
<li>notion: <a href="https://github.com/raboof/notion/pull/346" class="uri">https://github.com/raboof/notion/pull/346</a></li>
<li>jhead: <a href="https://github.com/Matthias-Wandel/jhead/pull/67" class="uri">https://github.com/Matthias-Wandel/jhead/pull/67</a></li>
<li>ldns: <a href="https://github.com/NLnetLabs/ldns/pull/192" class="uri">https://github.com/NLnetLabs/ldns/pull/192</a></li>
<li>bitlbee-facebook: <a href="https://github.com/bitlbee/bitlbee-facebook/pull/217" class="uri">https://github.com/bitlbee/bitlbee-facebook/pull/217</a></li>
<li>blahtexml: <a href="https://github.com/gvanas/blahtexml/pull/9" class="uri">https://github.com/gvanas/blahtexml/pull/9</a></li>
</ul>
<p>Nothing complicated. Just a few missing dependencies.</p>
<p>Give it a try!</p>

<div class="info">
    Posted on June 21, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>How do shared library collisions break?</title>
    <link href="http://trofi.github.io/posts/248-how-do-shared-library-collisions-break.html" />
    <id>http://trofi.github.io/posts/248-how-do-shared-library-collisions-break.html</id>
    <published>2022-06-18T00:00:00Z</published>
    <updated>2022-06-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h1 id="background">background</h1>
<p>Shared libraries are fun. The concept is simple in theory: we move a
piece of code out of the main application into a separate (dynamically
loadable) binary and nothing changes:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-1.svg" /></p>
<p>In practice we get two moving parts where each could be updated
separately. People still don’t agree if shared libraries are a net win
or a net loss as a concept :)</p>
<p>When you maintain both application and library as a single code base the
difference does not really matter. Things get interesting when library
starts it’s own life as a separate project and gets it’s own dependencies
over time.</p>
<p>What if we want to use two different versions of the same library project
within a single application. Say, use <strong>gtk-2</strong> and <strong>gtk-3</strong> together or
<strong>ffmpeg-4</strong> and <strong>ffmpeg-5</strong>.</p>
<p>You might even do it by accident by including two dependencies that rely
on different <strong>ffmpeg</strong> versions:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-2.svg" /></p>
<p>Is it a safe combination? Can we just link against both versions of a
library and be done with it? Let’s try!</p>
<h1 id="toy-example">toy example</h1>
<p>We’ll need an executable and two libraries to play with. Library API
provides a single function to tell us it’s name:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat lib.h</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> lib_name <span class="op">(</span><span class="dt">void</span><span class="op">);</span></span></code></pre></div>
<p>Library sources implement the API by returning pointer to source file name:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat lib1.c</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lib.h&quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> lib_name <span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span>  <span class="cf">return</span> __FILE__<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat lib2.c</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lib.h&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> lib_name <span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span>  <span class="cf">return</span> __FILE__<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>Main program:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat main.c</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lib.h&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* important part: */</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;lib_name() = %s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> lib_name<span class="op">());</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* library loading introspection: */</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;My address space:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> cmd<span class="op">[</span><span class="dv">1000</span><span class="op">];</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* search for code segments (should be at most one per loaded ELF) */</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    snprintf<span class="op">(</span>cmd<span class="op">,</span> <span class="kw">sizeof</span> <span class="op">(</span>cmd<span class="op">),</span> <span class="st">&quot;grep 'r-x' /proc/%u/maps&quot;</span><span class="op">,</span> getpid<span class="op">());</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    system<span class="op">(</span>cmd<span class="op">);</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The important bit here is <strong>fprintf (stderr, “lib_name() = %s”, lib_name());</strong>.
The rest is convenience debugging to see what libraries are loaded
into address space.</p>
<p>What happens if we link <strong>main.c</strong> dynamically against both <strong>lib1.c</strong> and
<strong>lib2.c</strong> together as external shared libraries?</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-3.svg" /></p>
<p>Would linker complain? Would it pick first library? Or maybe the second one? It depends!</p>
<p>Let’s build shared libraries the simplest way possible and link
our program against them:</p>
<pre><code>$ mkdir -p l1 l2

# no SONAME

$ gcc -fPIC -shared lib1.c -o l1/libl1.so
$ gcc -fPIC -shared lib2.c -o l2/libl2.so

$ gcc main.c -o main1 -Ll1 -Ll2 -ll1 -ll2 -Wl,-rpath,'$ORIGIN/l1' -Wl,-rpath,'$ORIGIN/l2'
$ gcc main.c -o main2 -Ll1 -Ll2 -ll2 -ll1 -Wl,-rpath,'$ORIGIN/l1' -Wl,-rpath,'$ORIGIN/l2'</code></pre>
<p>Quiz question: what would these <strong>./main1</strong> and
<strong>./main2</strong> programs print when executed?</p>
<p>Now let’s compare the results:</p>
<pre><code>$ ./main1 | unnix
lib_name() = lib1.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404344872                         /home/slyfox/dev/c/shared-libs/main1
7f994d9e2000-7f994db4c000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f994dbb9000-7f994dbba000 r-xp 00001000 00:1b 1404344871                 /home/slyfox/dev/c/shared-libs/l2/libl2.so
7f994dbbe000-7f994dbbf000 r-xp 00001000 00:1b 1404344870                 /home/slyfox/dev/c/shared-libs/l1/libl1.so
7f994dbc5000-7f994dbea000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7fff98b52000-7fff98b54000 r-xp 00000000 00:00 0                          [vdso]

$ ./main2 | unnix
lib_name() = lib2.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404344873                         /home/slyfox/dev/c/shared-libs/main2
7f95c8773000-7f95c88dd000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f95c894a000-7f95c894b000 r-xp 00001000 00:1b 1404344870                 /home/slyfox/dev/c/shared-libs/l1/libl1.so
7f95c894f000-7f95c8950000 r-xp 00001000 00:1b 1404344871                 /home/slyfox/dev/c/shared-libs/l2/libl2.so
7f95c8956000-7f95c897b000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7ffdbb255000-7ffdbb257000 r-xp 00000000 00:00 0                          [vdso]</code></pre>
<p>Note: <strong>lib_name()</strong> returns two very different results. And that is for
a program that is linked against the same set of libraries and headers
in both cases!</p>
<p>A few more observations:</p>
<ul>
<li><strong>ld</strong> did not complain about <strong>lib_name()</strong> presence in both
<strong>libl1.so</strong> and <strong>libl2.so</strong>.</li>
<li>Both libraries are loaded into address space (visible in address space
dumps).</li>
<li><strong>./main{1,2}</strong> also did not complain about <strong>lib_name()</strong> presence in
both <strong>libl1.so</strong> and <strong>libl2.so</strong>.</li>
<li>Libraries happen to be loaded in order specified by <strong>-l</strong> options.</li>
</ul>
<p>Now let’s pretend that <strong>libl1.so</strong> and <strong>libl2.so</strong> don’t have material
difference and implement identical ABI and semantics. On <strong>ELF</strong> platforms
<strong>ABI</strong> and semantics are usualy reflected by a <strong>DT_SONAME</strong> tag attached
to a library. We can assign <strong>SONAME</strong> to built library with
<strong>-Wl,-soname,…</strong> flag. Let’s specify identical <strong>SONAME</strong> to both
libraries (I also had to create symlinks to <strong>SONAME</strong> name):</p>
<pre><code>$ mkdir -p l1 l2

# same SONAME

$ gcc -fPIC -shared lib1.c -o l1/libl1.so -Wl,-soname,libname.so.1
$ ln -s libl1.so l1/libname.so.1
$ gcc -fPIC -shared lib2.c -o l2/libl2.so -Wl,-soname,libname.so.1
$ ln -s libl2.so l2/libname.so.1

$ gcc main.c -o main1 -Ll1 -Ll2 -ll1 -ll2 -Wl,-rpath,'$ORIGIN/l1' -Wl,-rpath,'$ORIGIN/l2'
$ gcc main.c -o main2 -Ll1 -Ll2 -ll1 -ll2 -Wl,-rpath,'$ORIGIN/l2' -Wl,-rpath,'$ORIGIN/l1'</code></pre>
<p>Quiz question: how would these result differ compared to previous run?</p>
<p>Comparing the results again:</p>
<pre><code>$ ./main1 | unnix
lib_name() = lib1.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404345186                         /home/slyfox/dev/c/shared-libs/main1
7f3bf33c3000-7f3bf352d000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f3bf359a000-7f3bf359b000 r-xp 00001000 00:1b 1404345184                 /home/slyfox/dev/c/shared-libs/l1/libl1.so
7f3bf35a1000-7f3bf35c6000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7ffcb5934000-7ffcb5936000 r-xp 00000000 00:00 0                          [vdso]

$ ./main2 | unnix
lib_name() = lib2.c
My address space:
00401000-00402000 r-xp 00001000 00:1b 1404345187                         /home/slyfox/dev/c/shared-libs/main2
7f2c1a48d000-7f2c1a5f7000 r-xp 00028000 00:1b 1350927183                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
7f2c1a664000-7f2c1a665000 r-xp 00001000 00:1b 1404345185                 /home/slyfox/dev/c/shared-libs/l2/libl2.so
7f2c1a66b000-7f2c1a690000 r-xp 00001000 00:1b 1350927176                 /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
7ffd7c1ba000-7ffd7c1bc000 r-xp 00000000 00:00 0                          [vdso]</code></pre>
<p>Note:</p>
<ul>
<li>Only one example of a library with a specified <strong>SONAME</strong> is loaded into
memory: either <strong>libl1.so</strong> or <strong>libl2.so</strong>, but never both.</li>
<li>First library is loaded as specified by <strong>DT_RUNPATH</strong> tag (not by
<strong>-l</strong> option).</li>
</ul>
<p>Library order matters materially only if a symbol is present
in multiple shared libraries (a symbol collision is present). Otherwise
you don’t have to worry about it.</p>
<p>Another important assumption here is that <strong>lib.h</strong> is identical for both
<strong>libl1.so</strong> and <strong>libl2.so</strong>. It’s not always the case for more complex
scenarios: <strong>ffmpeg</strong> and <strong>gtk</strong> certainly change their API and data
structures across major releases (or even in different build configurations
for the same library release).</p>
<h1 id="diamond-dependency-trees">diamond dependency trees</h1>
<p>Is it a frequent problem to get a mix of libraries like that in a single
process? Or it’s a purely hypothetical problem not worth worrying about?</p>
<p>Let’s pick <strong>gdb</strong> executable (command line debugger) as an example.</p>
<p>Quiz question: how many libraries does <strong>gdb</strong> use as dependencies. Should it be just <strong>libc</strong>?
Maybe <strong>ncurses</strong> as well?</p>
<p><strong>ELF</strong> files have <strong>DT_NEEDED</strong> entries in <strong>.dynamic</strong> section. Those
list all immediate shared library dependencies. We can dump
<strong>DT_NEEDED</strong> entries with tools like <strong>objdump</strong>, <strong>readelf</strong>, <strong>scanelf</strong>,
<strong>patchelf</strong> and many others. I’ll use <strong>patchelf</strong>:</p>
<pre><code>$ patchelf --print-needed `which gdb` | nl
     1  libreadline.so.8
     2  libz.so.1
     3  libncursesw.so.6
     4  libpython3.9.so.1.0
     5  libdl.so.2
     6  libcrypt.so.1
     7  libm.so.6
     8  libexpat.so.1
     9  libipt.so.2
    10  libmpfr.so.6
    11  libgmp.so.10
    12  libsource-highlight.so.4
    13  libboost_regex.so.1.77.0
    14  libstdc++.so.6
    15  libgcc_s.so.1
    16  libpthread.so.0
    17  libc.so.6
    18  ld-linux-x86-64.so.2</code></pre>
<p>18 immediate libraries! Some of them have their own dependencies.
We can dump the whole tree with <strong>lddtree</strong>:</p>
<pre><code>$ lddtree `which gdb` | unnix | nl
lddtree `which gdb` | unnix | nl
     1  gdb =&gt; /run/current-system/sw/bin/gdb (interpreter =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2)
     2      libreadline.so.8 =&gt; /&lt;&lt;NIX&gt;&gt;/readline-8.1p2/lib/libreadline.so.8
     3      libz.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/zlib-1.2.12/lib/libz.so.1
     4      libncursesw.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507/lib/libncursesw.so.6
     5      libpython3.9.so.1.0 =&gt; /&lt;&lt;NIX&gt;&gt;/python3-3.9.13/lib/libpython3.9.so.1.0
     6      libdl.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libdl.so.2
     7      libcrypt.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libcrypt.so.1
     8      libm.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libm.so.6
     9      libexpat.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/expat-2.4.8/lib/libexpat.so.1
    10      libipt.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/libipt-2.0.4/lib/libipt.so.2
    11      libmpfr.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.so.6
    12      libgmp.so.10 =&gt; /&lt;&lt;NIX&gt;&gt;/gmp-with-cxx-6.2.1/lib/libgmp.so.10
    13      libsource-highlight.so.4 =&gt; /&lt;&lt;NIX&gt;&gt;/source-highlight-3.1.9/lib/libsource-highlight.so.4
    14      libboost_regex.so.1.77.0 =&gt; /&lt;&lt;NIX&gt;&gt;/boost-1.77.0/lib/libboost_regex.so.1.77.0
    15          librt.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/librt.so.1
    16          libicudata.so.71 =&gt; /&lt;&lt;NIX&gt;&gt;/icu4c-71.1/lib/libicudata.so.71
    17          libicui18n.so.71 =&gt; /&lt;&lt;NIX&gt;&gt;/icu4c-71.1/lib/libicui18n.so.71
    18          libicuuc.so.71 =&gt; /&lt;&lt;NIX&gt;&gt;/icu4c-71.1/lib/libicuuc.so.71
    19      libstdc++.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/gcc-11.3.0-lib/lib/libstdc++.so.6
    20      libgcc_s.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libgcc_s.so.1
    21      libpthread.so.0 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libpthread.so.0
    22      libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
    23      ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2</code></pre>
<p>Just 4 more libraries added by <strong>boost</strong> internals: <strong>libboost_regex.so.1.77.0</strong> -&gt; <strong>librt.so.1</strong>, <strong>libicudata.so.71</strong>, <strong>libicui18n.so.71</strong>,
<strong>libicuuc.so.71</strong>.</p>
<p>From <strong>lddtree</strong> output it might look like it’s a rare occasion when shared libraries
have their owne dependencies. That is misleading: <strong>lddtree</strong> hides already printed
entries by default.</p>
<p>Quiz question: guess how many dependencies does <strong>gdb</strong> have if we consider all the
duplicates.</p>
<p>We’ll use <strong>lddtree -a</strong> option to answer that question:</p>
<pre><code>$ lddtree -a `which gdb` | unnix | nl
     1  gdb =&gt; /run/current-system/sw/bin/gdb (interpreter =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2)
     2      libreadline.so.8 =&gt; /&lt;&lt;NIX&gt;&gt;/readline-8.1p2/lib/libreadline.so.8
     3          libncursesw.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507/lib/libncursesw.so.6
     4              libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
     5                  ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
     6          libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
     7              ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
     8      libz.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/zlib-1.2.12/lib/libz.so.1
     9          libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
    10              ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
    11      libncursesw.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507/lib/libncursesw.so.6
    12          libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
    13              ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
    14      libpython3.9.so.1.0 =&gt; /&lt;&lt;NIX&gt;&gt;/python3-3.9.13/lib/libpython3.9.so.1.0
    15          libdl.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libdl.so.2
    16              libc.so.6 =&gt; not found
    17          libcrypt.so.1 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libcrypt.so.1
    18              libc.so.6 =&gt; not found
...
   263      libc.so.6 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6
   264          ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2
   265      ld-linux-x86-64.so.2 =&gt; /&lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/ld-linux-x86-64.so.2</code></pre>
<p>265! It’s more than 10x compared to the output without duplicates. A thing
to note here is that <strong>libc.so.6</strong> is a frequent guest here. The 265 number
is also inflated as many subtrees repeat multiple times here.</p>
<p>If we use something more heavyweight like <strong>i3</strong> window manager we’ll
get even bigger dependency tree:</p>
<pre><code>$ lddtree `which i3` | wc -l
61
$ lddtree -a `which i3` | wc -l
1528</code></pre>
<p>Let’s draw <strong>gdb</strong> dependencies as a graph. I find the result less scary:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-4.svg" /></p>
<p>OK, it’s still unreadable.</p>
<p>Let’s remove all the <strong>glibc</strong> and <strong>gcc</strong> dependencies. They are
present almost everywhere and clutter our graph. Here is the result
of graph with noise removed:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-5.svg" /></p>
<p>Now it should be more obvious what <strong>gdb</strong> usually uses.</p>
<p><strong>Diamond dependencies</strong> are the ones that have more than one input arrow:
they cause dependency graph to be a <strong>graph</strong> instead of a <strong>tree</strong>.</p>
<p>Another way to look at it applied to library dependencies: <strong>diamond
dependencies have more than one path in the graph from dependency
root</strong>.</p>
<p>For example <strong>libncursesw.so.6</strong> can be reached via two distinct paths:</p>
<ul>
<li><strong>gdb</strong> -&gt; <strong>libncursesw.so.6</strong> (direct dependency)</li>
<li><strong>gdb</strong> -&gt; <strong>libreadline.so.8</strong> -&gt; <strong>libncursesw.so.6</strong> (indirect dependency)</li>
</ul>
<p>From the toy example above we know that the same library does not
get loaded multiple times if the absolute library path is the same.</p>
<p>Problems happen when such a diamond dependency is slightly different
in two branches. There are many ways to break this diamond by accident.
The most popular one is to have slightly different <strong>SONAMEs</strong> in two
branches:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-6.svg" /></p>
<p>To make it work at all <strong>libfoo.so.1</strong> and <strong>libfoo.so.2</strong> need to
have no colliding symbols or make this mix and match work via other
means. Most <strong>C</strong> libraries don’t handle such coexistence. They assume
that everyone can update to <strong>libfoo.so.2</strong> and <strong>libfoo.so.1</strong> would
never compete with it:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-7.svg" /></p>
<h1 id="example-failures">Example failures</h1>
<p>Unfortunately nothing prevents such inconsistent diamonds with a
library version mix to appear. We just did it ourselves in our toy
example. How come do we not get into that state all the time? Or
maybe we do?</p>
<p>Normally distributions try hard to avoid such version mix by not
providing two versions of a library at any point in time: there
are no two <strong>glibc</strong> version installed, no two <strong>ffmpeg</strong> versions
present and so on.</p>
<p>But to each rule there is an exception: not all applications have
migrated from <strong>python2</strong> to <strong>python3</strong>, some applications are
still on <strong>gtk-2</strong>, most on <strong>gtk-3</strong> and some are already on
<strong>gtk-4</strong>. In these cases you might find all these libraries in
your system. Their presence might create false confidence that it’s
a safe setup. It is not.</p>
<p>Here are a few examples I saw the past:</p>
<h2 id="gdb-and-tinfotinfow">gdb and tinfo/tinfow</h2>
<p>This example is based on <a href="https://bugs.gentoo.org/669096" class="uri">https://bugs.gentoo.org/669096</a> where <strong>gdb</strong>
crashed at start. <strong>ncurses</strong> provides a few flavours of roughtly the
same library with slightly different APIs: <strong>ncurses</strong> (no unicode
support) and <strong>ncursesw</strong> (has unicode support). Sometimes distributions
also enable split-library version of <strong>ncurses</strong>: <strong>ncursesw.so</strong>+<strong>tinfow.so</strong>
and <strong>ncurses.so</strong>+<strong>tinfo.so</strong>.</p>
<p>In 2022 you would normally use <strong>ncursesw</strong> library everywhere (or
<strong>ncursesw.so</strong>+<strong>tinfow.so</strong> everywhere in distributions with split
setup).</p>
<p>Due to a minor <strong>configure.ac</strong> glitch <strong>gdb</strong> managed to pull in the
following library dependency graph:</p>
<pre><code>  $ lddtree /usr/bin/gdb
  /usr/bin/gdb (interpreter =&gt; /lib64/ld-linux-x86-64.so.2)
    libtinfo.so.6 =&gt; /lib64/libtinfo.so.6
    libreadline.so.7 =&gt; /lib64/libreadline.so.7
        libncurses.so.6 =&gt; /lib64/libncurses.so.6
    libncursesw.so.6 =&gt; /lib64/libncursesw.so.6
        libtinfow.so.6 =&gt; /lib64/libtinfow.so.6
    ...</code></pre>
<p>See the problem already? Picture form might help a bit:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-8.svg" /></p>
<p>I see two problems:</p>
<ul>
<li>unicode and non-unicode flavors are both present: <strong>ncurses.so</strong> + <strong>ncursesw.so</strong></li>
<li>unicode and non-unicode parts: <strong>ncursesw.so</strong> + <strong>tinfo.so</strong> (or <strong>ncursesw.so</strong> + <strong>tinfow.so</strong>)</li>
</ul>
<p><strong>libncursesw.so.6</strong> and <strong>libncurses.so.6</strong> export
the same symbol names. That on it’s own might work. But ABI assumptions
around private data structures in <strong>w</strong> and non-<strong>w</strong> librarues are
different. For example <strong>WINDOWLIST</strong> structure has different size and
has extra fields:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Somewhere in ncurses/curses.priv.h</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> _win_list <span class="op">{</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> _win_list <span class="op">*</span>next<span class="op">;</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>        SCREEN <span class="op">*</span>screen<span class="op">;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>        WINDOW win<span class="op">;</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#if NCURSES_WIDECHAR</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> addch_work<span class="op">[(</span>MB_LEN_MAX <span class="op">*</span> <span class="dv">9</span><span class="op">)</span> <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> addch_used<span class="op">;</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> addch_x<span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> addch_y<span class="op">;</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>If such a structure would be allocated in <strong>libncurses.so</strong> (without
<strong>NCURSES_WIDECHAR</strong>) and be used as <strong>libncursesw.so</strong> there will
likely be data corruption in an attempt to write to non-existent tail
of structure (fields <strong>addch_work</strong>, <strong>addch_used</strong>, <strong>addch_x</strong>,
<strong>addch_y</strong> don’t get allocated in <strong>libncurses.so</strong>).</p>
<p>The fix was to update <strong>gdb</strong> to always link to <strong>tinfow</strong> if
<strong>ncursesw</strong> is present. And to fix <strong>readline</strong> to link to <strong>ncursesw</strong>
to match the default of the rest of distribution.</p>
<p>Case of <strong>readline</strong> is especially worrying: if <strong>libreadline.so.7</strong> -&gt;
<strong>libncurses.so.6</strong> was a conscious decision by <strong>readline</strong> packagers
then <strong>gdb</strong>
would have to inspect it’s dependency first to match it’s defaults when
picking the <strong>ncurses</strong> flavor at <strong>gdb</strong> build time. Nobody analyzes
transitive dependencies in C land and assumes that build environment
provides consistent and unambiguous
environment: there should be just one library of <strong>ncurses</strong> discoverable
via <strong>pkgconfig</strong> (or similar) and that version should be used when building
both <strong>readline</strong> and <strong>gdb</strong>.</p>
<p>I would say that providing both <strong>libncurses.so</strong> and <strong>libncursesw.so</strong>
in the same system is proven to be dangerous. Perhaps providing just
<strong>SONAMEs</strong> like <strong>libncurses.so.6</strong> would be slightly less prone to
accidental linkage of unintended library.</p>
<h2 id="binutils-and-multitarget">binutils and multitarget</h2>
<p>Another example from Gentoo’s bugzilla: <a href="https://bugs.gentoo.org/666100" class="uri">https://bugs.gentoo.org/666100</a>.</p>
<p>It starts off very similar to <strong>ncurses</strong>: Gentoo provides a way to
install multiple versions of <strong>libbfd.so</strong> library:</p>
<ul>
<li>via <strong>sys-devel/binutils</strong> package, install target is <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong></li>
<li>via <strong>sys-libs/binutils-libs</strong> package, install target is <strong>/usr/lib64/libbfd-2.38.so</strong></li>
</ul>
<p>Gentoo allows multiple parallel major versions of <strong>sys-devel/binutils</strong>
to be present in the system at the same time. And allows only one version of
<strong>sys-libs/binutils-libs</strong>. The split
is needed for limitations of package manager library handling. The idea
is that <strong>sys-devel/binutils</strong> libraries will ever be used only by
<strong>sys-devel/binutils</strong> itself: <strong>strip</strong>, <strong>ld</strong> and friends will use
private library. While external users (like <strong>perf</strong> or <strong>ghc</strong>) will
never use it and will always pull in <strong>sys-libs/binutils-libs</strong> library:</p>
<ul>
<li><strong>strip-2.38</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong> (<strong>SONAME=libbfd-2.38.so</strong>)</li>
<li><strong>ld-2.38</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong> (<strong>SONAME=libbfd-2.38.so</strong>)</li>
<li><strong>ld-2.37</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.37/libbfd-2.37.so</strong> (<strong>SONAME=libbfd-2.37.so</strong>)</li>
<li><strong>perf</strong> -&gt; <strong>/usr/lib64/libbfd-2.38.so</strong> (<strong>SONAME=libbfd-2.38.so</strong>)</li>
</ul>
<p>Or the same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-9.svg" /></p>
<p>The sets are seemingly disjoint. It should be fine, right? Wrong.</p>
<p>The problem happens when some build system decides to use <strong>LD_LIBRARY_PATH=/usr/lib</strong>
override (like <strong>firefox</strong> <a href="https://bugs.gentoo.org/645222">one</a>). It
looks cosmetic as <strong>/usr/lib</strong> is already a default library search path. It should not
hurt. But in practice it redirects <strong>libbfd-2.38.so</strong> from:</p>
<ul>
<li><strong>ld-2.38</strong> -&gt; <strong>/usr/lib64/binutils/x86_64-pc-linux-gnu/2.38/libbfd-2.38.so</strong></li>
</ul>
<p>to:</p>
<ul>
<li><strong>ld-2.38</strong> -&gt; <strong>/usr/lib64/libbfd-2.38.so</strong></li>
</ul>
<p>After the redirect effective runtime dependency graph looks as:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-10.svg" /></p>
<p>Is it a big deal? Shouldn’t these libraries already be identical?
They share <strong>SONAME=libbfd-2.38.so</strong> after all.</p>
<p>Unfortunately, no.: <strong>binutils</strong> can be built in a few different incompatible
modes that affect library <strong>ABI</strong> compatibility:</p>
<ol type="1">
<li>default mode: support only current target and use default file offsets
(32-bit offsets on 32-bit systems, 64-bit offsets on 64-bit systems).</li>
<li>64-bit mode (<strong>--enable-64-bit-bfd</strong>): support only current target
and use 64-bit file offsets</li>
<li>multi-target mode (<strong>--enable-targets=all</strong>): support multiple target
architectures and use 64-bit file offsets.</li>
</ol>
<p>All these 3 modes produce the same <strong>SONAME=libbfd-2.38.so</strong>, but
it’s ABIs differ quite a bit: 64-bit mode switches public API from
<strong>typedef unsigned long bfd_vma;</strong> to <strong>typedef uint64_t bfd_size_type</strong>.
This breaks global <strong>_bfd_std_section</strong> array size and breaks ABI similar
to <a href="http://trofi.github.io/posts/195-dynamic-linking-ABI-is-hard.html">nettle ABI breakage</a>.</p>
<p>As a result attempt to force <strong>LD_LIBRARY_PATH=/usr/lib</strong> on 32-bit systems
fails as:</p>
<pre><code>$ LD_LIBRARY_PATH=/usr/lib ld --eh-frame-hdr -m elf_i386 -dynamic-linker /lib/ld-linux.so.2 -o z /usr/lib/Scrt1.o
ld: internal error /dev/shm/portage/sys-devel/binutils-2.38/work/binutils-2.38/ld/ldlang.c 6635</code></pre>
<p>The fix (or workaround) was straightforward: change <strong>SONAME=libbfd-2.38.so</strong>
to something that depends on the configuration: <strong>SONAME=libbfd-2.38-64-bit.so</strong>
or similar:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-11.svg" /></p>
<p>Mike also suggested another fix: use <strong>DT_RPATH</strong> <strong>ELF</strong> tags in <strong>binutils</strong>
binaries instead of <strong>DT_RUNPATH</strong> to get higher precedence over <strong>LD_LIBRARY_PATH</strong>:
<a href="https://en.wikipedia.org/wiki/Rpath" class="uri">https://en.wikipedia.org/wiki/Rpath</a>.</p>
<p>I think this bug is a good example why you should try hard to avoid multiple
libraries in the system with the same <strong>SONAME</strong>: seemingly uncontroversial
<strong>LD_LIBRARY_PATH</strong> can cause so much trouble.</p>
<h2 id="mpfrmpc-version-mismatch">mpfr/mpc version mismatch</h2>
<p>Another case is <a href="https://wiki.gentoo.org/wiki/Mpfr4-update-guide" class="uri">https://wiki.gentoo.org/wiki/Mpfr4-update-guide</a>.</p>
<p>In a steady state <strong>gcc</strong> and it’s <strong>mpc</strong> dependency both depend on <strong>mpfr</strong>.
All three are distinct packages in Gentoo and can only be updated one at a time
on a live system.</p>
<p>Once <strong>mpfr</strong> is updated it brings into the system a new library: <strong>libmpfr.so.4</strong>.
On it’s own it’s fine as <strong>gcc</strong> and <strong>mpc</strong> still refer to <strong>libmpfr.so.3</strong> (which
does not get deleted as long as there are referrers to it).</p>
<p>The problem happens when we try to update <strong>mpc</strong>: we introduce a
broken diamond dependency as two versions of <strong>mpfr</strong> get pulled into <strong>gcc</strong>:</p>
<p><img src="http://trofi.github.io/posts.data/248-shlib-clash/fig-12.svg" /></p>
<p>By luck it did not render <strong>gcc</strong> broken as <strong>gcc</strong> was able to recompile itself.
Otherwise user would have to redownload broken compiler. Or an ad-hoc upgrade
tool would have to be written just for this case.</p>
<p>I wonder how other distributions solve this class of lockstep upgrade problems
in their build systems.</p>
<h1 id="does-nix-magically-solve-diamond-dependency-problem">does nix magically solve diamond dependency problem?</h1>
<p>The short answer is: no, it does not fundamentally prevent such
relations from happening. It is even more prone to accidentally
inconsistent diamonds as it allows you to install multiple versions
of the same library in parallel (say, <strong>glibc</strong> or <strong>ncurses</strong>)
and be pulled in both as a dependency.</p>
<p>The typical example would be an incorrect attempt to enable debugging
mode for some popular dependency. Say, <strong>ncurses</strong> for <strong>gdb</strong>:</p>
<pre><code># DO NOT USE IT AS IS
$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; gdb.override { ncurses = ncurses.overrideAttrs(oa: { NIX_CFLAGS_COMPILE = &quot;-O0&quot;; }); }'</code></pre>
<p>Looks benign, isn’t it? We pass slightly modified unoptimised
<strong>ncurses</strong> dependency to <strong>gdb</strong>.</p>
<p>Unfortunately <strong>gdb</strong>’s <strong>readline</strong> dependency also uses <strong>ncurses</strong>.
And in this case it uses unmodified version of <strong>ncurses</strong>. We
can see it in the resulting binary:</p>
<pre><code>lddtree -a ./result/bin/gdb |&amp; fgrep -B1 ncurses
    libreadline.so.8 =&gt; /nix/store/87g044p2zq221fvjzyrqyrkzxxayy1p9-readline-8.1p2/lib/libreadline.so.8
        libncursesw.so.6 =&gt; /nix/store/7ji068smnymqz2lg2fd42hjnjd5czbl6-ncurses-6.3-p20220507/lib/libncursesw.so.6
--
            ld-linux-x86-64.so.2 =&gt; /nix/store/fz33c1mfi2krpg1lwzizfw28kj705yg0-glibc-2.34-210/lib/ld-linux-x86-64.so.2
    libncursesw.so.6 =&gt; /nix/store/3hwz3archcn9z8y93b2qdnkrgdf7g5jb-ncurses-6.3-p20220507/lib/libncursesw.so.6</code></pre>
<p>To be fair this output is slightly misleading as both
<strong>libncursesw.so.6</strong> shold be loaded by <strong>DT_RUNPTH</strong> and would probably
end up being pulled in from the same location. There would be no
double-load. But it’s hard to predict which of the two would win.</p>
<p>To sidestep this kind of problems <strong>nixpkgs</strong> tries hard to use a
single version of a library throughout the tree. As a result the
whole system you build will use the same <strong>ncurses</strong> library.
And it does not have to be the same <strong>ncurses</strong> you used for
older version of your system.</p>
<p>The less incorrect way to achieve the <strong>-O0</strong> effect for <strong>ncurses</strong>
would be to override the <strong>ncurses</strong> attribute itself and let
all the packages (up to <strong>gdb</strong>) use it. One way to do it
is via <a href="https://nixos.wiki/wiki/Overlays" class="uri">https://nixos.wiki/wiki/Overlays</a>:</p>
<pre><code># slightly better
$ nix build --impure --expr 'with import &lt;nixpkgs&gt; { overlays = [(final: prev: { ncurses = prev.ncurses.overrideAttrs(oa: { NIX_CFLAGS_COMPILE = &quot;-O0&quot;; }); })]; }; gdb'
[2/0/33 built, 5 copied (0.8/0.8 MiB), 0.2 MiB DL] building readline-8.1p2 (buildPhase): mv search.o search.so
...</code></pre>
<p>Note: this command attepts to rebuild 33 packages:</p>
<pre><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; { overlays = [(final: prev: { ncurses = prev.ncurses.overrideAttrs(oa: { NIX_CFLAGS_COMPILE = &quot; -O0&quot;; }); })]; }; gdb' --dry-run |&amp; unnix
these 34 derivations will be built:
  /&lt;&lt;NIX&gt;&gt;/ncurses-6.3-p20220507.drv
  /&lt;&lt;NIX&gt;&gt;/readline-6.3p08.drv
  /&lt;&lt;NIX&gt;&gt;/python3-3.9.13.drv
  /&lt;&lt;NIX&gt;&gt;/hook.drv
  /&lt;&lt;NIX&gt;&gt;/audit-2.8.5.drv
  /&lt;&lt;NIX&gt;&gt;/linux-pam-1.5.2.drv
  /&lt;&lt;NIX&gt;&gt;/libxml2-2.9.14.drv
  /&lt;&lt;NIX&gt;&gt;/itstool-2.0.6.drv
  /&lt;&lt;NIX&gt;&gt;/libxslt-1.1.35.drv
  /&lt;&lt;NIX&gt;&gt;/shadow-4.11.1.drv
  /&lt;&lt;NIX&gt;&gt;/util-linux-minimal-2.37.4.drv
  /&lt;&lt;NIX&gt;&gt;/re2c-3.0.drv
  /&lt;&lt;NIX&gt;&gt;/asciidoc-9.1.0.drv
  /&lt;&lt;NIX&gt;&gt;/ninja-1.10.2.drv
  /&lt;&lt;NIX&gt;&gt;/setuptools-setup-hook.drv
  /&lt;&lt;NIX&gt;&gt;/pip-install-hook.drv
  /&lt;&lt;NIX&gt;&gt;/setuptools-61.2.0-sdist.tar.gz.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-bootstrapped-pip-22.0.4.drv
  /&lt;&lt;NIX&gt;&gt;/python-imports-check-hook.sh.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-setuptools-61.2.0.drv
  /&lt;&lt;NIX&gt;&gt;/python-catch-conflicts-hook.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-wheel-0.37.1.drv
  /&lt;&lt;NIX&gt;&gt;/setuptools-setup-hook.drv
  /&lt;&lt;NIX&gt;&gt;/python3.9-pip-22.0.4.drv
  /&lt;&lt;NIX&gt;&gt;/pip-install-hook.drv
  /&lt;&lt;NIX&gt;&gt;/meson-0.61.2.drv
  /&lt;&lt;NIX&gt;&gt;/fuse-3.10.5.drv
  /&lt;&lt;NIX&gt;&gt;/fuse-2.9.9.drv
  /&lt;&lt;NIX&gt;&gt;/e2fsprogs-1.46.5.drv
  /&lt;&lt;NIX&gt;&gt;/libarchive-3.6.1.drv
  /&lt;&lt;NIX&gt;&gt;/cmake-3.22.3.drv
  /&lt;&lt;NIX&gt;&gt;/libipt-2.0.4.drv
  /&lt;&lt;NIX&gt;&gt;/readline-8.1p2.drv
  /&lt;&lt;NIX&gt;&gt;/gdb-12.1.drv</code></pre>
<p>Now we can verify that all <strong>libncursesw.so.6</strong> instances are pulled in from a single path:</p>
<pre><code>$ lddtree -a ./result/bin/gdb |&amp; fgrep -B1 ncurses
    libreadline.so.8 =&gt; /nix/store/k8p8sj27cgblad8f0zavpzwwyvv5gn0d-readline-8.1p2/lib/libreadline.so.8
        libncursesw.so.6 =&gt; /nix/store/3hwz3archcn9z8y93b2qdnkrgdf7g5jb-ncurses-6.3-p20220507/lib/libncursesw.so.6
--
            ld-linux-x86-64.so.2 =&gt; /nix/store/fz33c1mfi2krpg1lwzizfw28kj705yg0-glibc-2.34-210/lib/ld-linux-x86-64.so.2
    libncursesw.so.6 =&gt; /nix/store/3hwz3archcn9z8y93b2qdnkrgdf7g5jb-ncurses-6.3-p20220507/lib/libncursesw.so.6</code></pre>
<h1 id="allowed-symbol-collisions">allowed symbol collisions</h1>
<p>There are a few cases when it is natural to have symbol collisions:</p>
<ul>
<li><p>when final executable wants to override function implementation from a library it can
define the function with the same prototype. I’ll carefully ignore details of <strong>hidden</strong>
visibility symbols here.</p></li>
<li><p>when executable or library wants to provide a fallback function in case it’s not
present anywhere else it can use weak symbol: <a href="https://en.wikipedia.org/wiki/Weak_symbol" class="uri">https://en.wikipedia.org/wiki/Weak_symbol</a></p></li>
</ul>
<p>If you use neither of the above you still can load libraries with
clashing symbols. You would have to use <strong>dlopen(“path/to/lib.so”, RTLD_LOCAL)</strong>
/ <strong>dlsym()</strong> to extract symbols under non-ambiguous names. Plugins frequently
use this technique to avoid namespace pollution and to simplify plugin unloading.</p>
<p>Typical examples of <strong>LD_PRELOAD</strong> users that rely on runtime symbol overload are:</p>
<ul>
<li><strong>jemalloc</strong>: <a href="https://github.com/jemalloc/jemalloc/wiki/Getting-Started" class="uri">https://github.com/jemalloc/jemalloc/wiki/Getting-Started</a> (overrides <strong>malloc()</strong> and friends)</li>
<li><strong>tcmalloc</strong>: <a href="https://gperftools.github.io/gperftools/tcmalloc.html" class="uri">https://gperftools.github.io/gperftools/tcmalloc.html</a> (overrides <strong>malloc()</strong> and friends)</li>
<li><strong>tsocks</strong>: <a href="https://linux.die.net/man/8/tsocks" class="uri">https://linux.die.net/man/8/tsocks</a> (overrides <strong>socket()</strong> and friends)</li>
<li><strong>fakeroot</strong>: <a href="https://linux.die.net/man/1/fakeroot-tcp" class="uri">https://linux.die.net/man/1/fakeroot-tcp</a> (overrides file APIs)</li>
<li><strong>sandbox</strong>: <a href="https://github.com/gentoo/sandbox/blob/master/README.md" class="uri">https://github.com/gentoo/sandbox/blob/master/README.md</a> (overrides file APIs)</li>
<li><strong>libeatmydata</strong>: <a href="https://www.flamingspork.com/projects/libeatmydata/" class="uri">https://www.flamingspork.com/projects/libeatmydata/</a> (overrides <strong>fsync()</strong> API)</li>
</ul>
<h1 id="parting-words">parting words</h1>
<p>Symbol clashes are nasty. They are most frequent to appear when multiple
versions of the same library are loaded into the program over different
dependency paths.</p>
<p>Default toolchain support does not help much in catching duplicate symbols.
You might have to resort to local hacks to detect such cases. Or you can add
a feature to your favorite linker!</p>
<p>Luckily there is a simple rule to follow to avoid it most if the time:
try hard not to expose more than one version of a library in your depgraph.</p>
<p>Have fun!</p>

<div class="info">
    Posted on June 18, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>NixOS 22.05 release</title>
    <link href="http://trofi.github.io/posts/247-NixOS-22.05-release.html" />
    <id>http://trofi.github.io/posts/247-NixOS-22.05-release.html</id>
    <published>2022-06-11T00:00:00Z</published>
    <updated>2022-06-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Last month NixOS-22.05 release <a href="https://nixos.org/blog/announcements.html#nixos-22.05">came out</a>.
If you never seent it you should give it a try: <a href="https://nixos.org/download.html#nixos-iso" class="uri">https://nixos.org/download.html#nixos-iso</a>.</p>
<p>I took the release event as a good excude to share a few tips.</p>
<h1 id="nicer-logs">Nicer logs</h1>
<p>Nix is full of boring paths with long prefixes like
<strong>/nix/store/xk0rdw0sj3ysnjyh90z85mlx3w0kab5s-coreutils-full-9.1/bin/ls</strong>.
It’s a lot longer than <strong>/usr/bin/ls</strong>. But with all the noise it contains
useful hint that <strong>ls</strong> comes from <strong>coreutils</strong> package.</p>
<pre><code>$ ls -l /run/current-system/sw/bin/ls
lrwxrwxrwx 9 root root 69 Jan  1  1970 /run/current-system/sw/bin/ls -&gt; /nix/store/xk0rdw0sj3ysnjyh90z85mlx3w0kab5s-coreutils-full-9.1/bin/ls</code></pre>
<p>To save some space and keep useful detail I’m using <strong>~/bin/unnix</strong> one-liner:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="fu">sed</span> <span class="at">-r</span> <span class="st">'s@/nix/store/[0-9a-z]{32}-@/&lt;&lt;NIX&gt;&gt;/@g'</span></span></code></pre></div>
<p>It leaves out hashes but not package names or versions:</p>
<pre><code>$ ls -l /run/current-system/sw/bin/ls |&amp; unnix
lrwxrwxrwx 9 root root 69 Jan  1  1970 /run/current-system/sw/bin/ls -&gt; /&lt;&lt;NIX&gt;&gt;/coreutils-full-9.1/bin/ls</code></pre>
<p>I frequently use <strong>unnix</strong> to compare build logs from different environments.</p>
<h1 id="running-binaries-from-arbitrary-nixpkgs-commits">Running binaries from arbitrary nixpkgs commits</h1>
<p>Normally you can pull in a program in your environment by installing
it. Or by running it directly:</p>
<pre><code>$ nix run nixpkgs#re2c -- --version
re2c 3.0</code></pre>
<p>But sometimes it’s useful to run a program from a specific commit
of a repository. Flake syntax allows you to do it as is:</p>
<pre><code>$ nix run github:NixOS/nixpkgs/4a7f99d55d299453a9c2397f90b33d1120669775#re2c -- --version
re2c 1.3</code></pre>
<p>With GitHub’s synthetic branches you can even run tools right from yet unmerged
PRs against <strong>nixpkgs</strong>:</p>
<pre><code># Use firefox from (then) yet unmerged PR: https://github.com/NixOS/nixpkgs/pull/175618
$ nix run github:NixOS/nixpkgs/pull/175618/merge#firefox</code></pre>
<p>Be careful to review the commit first. You are running something that is not yet a
part of <strong>nixpkgs</strong> proper.</p>
<h1 id="pulling-cross-compiler-environments-with-pkgscross">Pulling cross-compiler environments with pkgsCross</h1>
<p><strong>nixpkgs</strong> has a <strong>pkgsCross.*</strong> package prefix with a ton of cross-compilers available.
It makes portability related work a breeze. We can pull the cross-compiler in with
a simple <strong>nix develop</strong> run:</p>
<pre><code>$ nix develop nixpkgs#pkgsCross.mingw32.re2c
$ dev&gt;LANG=C i686-w64-mingw32-gcc -v |&amp; unnix
Using built-in specs.
COLLECT_GCC=/&lt;&lt;NIX&gt;&gt;/i686-w64-mingw32-stage-final-gcc-debug-10.3.0/bin/i686-w64-mingw32-gcc
COLLECT_LTO_WRAPPER=/&lt;&lt;NIX&gt;&gt;/i686-w64-mingw32-stage-final-gcc-debug-10.3.0/libexec/gcc/i686-w64-mingw32/10.3.0/lto-wrapper
Target: i686-w64-mingw32
Configured with:
Thread model: mcf
Supported LTO compression algorithms: zlib
gcc version 10.3.0 (GCC)</code></pre>
<h1 id="mass-updates-for-maintained-packages">Mass updates for maintained packages</h1>
<p>I have a bunch if local packages I occasionally update.
<strong>nixpkgs</strong> has a script to update them automatically:</p>
<pre><code># run from nixpkgs checkout:
$ nix-shell maintainers/scripts/update.nix --argstr maintainer trofi --arg include-overlays true
Going to be running update for following packages:
 - CorsixTH-unstable-2022-05-23
 - dwarffs-unstable-2022-03-06
 - multitextor-unstable-2022-04-22
 - seekwatcher-0.14
 - ski-unstable-2022-04-18
 - vcmi-unstable-2022-05-28

Press Enter key to continue...

Running update for:
 - CorsixTH-unstable-2022-05-23: UPDATING ...
 - dwarffs-unstable-2022-03-06: UPDATING ...
 - multitextor-unstable-2022-04-22: UPDATING ...
 - seekwatcher-0.14: UPDATING ...
 - seekwatcher-0.14: DONE.
 - ski-unstable-2022-04-18: UPDATING ...
 - dwarffs-unstable-2022-03-06: DONE.
 - vcmi-unstable-2022-05-28: UPDATING ...
 - multitextor-unstable-2022-04-22: DONE.
 - ski-unstable-2022-04-18: DONE.
 - CorsixTH-unstable-2022-05-23: DONE.
 - vcmi-unstable-2022-05-28: DONE.</code></pre>
<p>Now all it takes is to build/run the packages to see if things still work.
We got 2 updates ready to commit as is:</p>
<pre><code>$ LANG=C git status
On branch main
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git restore &lt;file&gt;...&quot; to discard changes in working directory)
        modified:   corsix-th/default.nix
        modified:   vcmi/default.nix

$ nix build -f. corsix-th vcmi

$ LANG=C ls -l | unnix
...
lrwxrwxrwx 1 slyfox users   72 Jun 11 19:06 result -&gt; /&lt;&lt;NIX&gt;&gt;/CorsixTH-unstable-2022-06-07
lrwxrwxrwx 1 slyfox users   68 Jun 11 19:06 result-1 -&gt; /&lt;&lt;NIX&gt;&gt;/vcmi-unstable-2022-06-11

$ ./result/bin/corsix-th
$ ./result-1/bin/vcmiclient</code></pre>
<p>Ready to be committed.</p>

<div class="info">
    Posted on June 11, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>dropping disqus comments</title>
    <link href="http://trofi.github.io/posts/246-dropping-disqus-comments.html" />
    <id>http://trofi.github.io/posts/246-dropping-disqus-comments.html</id>
    <published>2022-06-01T00:00:00Z</published>
    <updated>2022-06-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This personal blog gets roughly one comment a month. For some reason
disqus decided to add automatically generated advertisement section
around comments.</p>
<p>I think disqus decided that this page does not qualify as a personal
blog anymore.</p>
<p>I dropped the integration. Now each post has a footer with an
<a href="mailto:slyich@gmail.com">email</a> and <a href="https://github.com/trofi/trofi.github.io.gen">GitHub repo</a>
reference.</p>
<p>I do understand that it’s very inconvenient in case you want to reach
out. My apologies.</p>

<div class="info">
    Posted on June  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>-fno-common legacy</title>
    <link href="http://trofi.github.io/posts/245-fno-common-legacy.html" />
    <id>http://trofi.github.io/posts/245-fno-common-legacy.html</id>
    <published>2022-05-13T00:00:00Z</published>
    <updated>2022-05-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="fno-commn-in-gentoo">-fno-commn in ::gentoo</h2>
<p>Around January 2020 (more than 2 years ago) <strong>gcc</strong> development version
switched the default from <strong>-fcommon</strong> to <strong>-fno-common</strong>: <a href="https://gcc.gnu.org/PR85678" class="uri">https://gcc.gnu.org/PR85678</a>.</p>
<p>I personally like <strong>-fno-common</strong> as it catches accidental
global variable name collision like the one in
<a href="https://github.com/FreeSpacenav/spacenavd/commit/7c271fa265613bd7d47601daaeb0e08e7c5b5a75">spacenavd</a>
or in <strong>iozone</strong>. Occasional upstreams’
<a href="https://github.com/FreeSpacenav/spacenavd/issues/17">reluctance</a>
to make code <strong>-fno-common</strong>-compatible was a big surprise to me. I just
don’t see any benefit of commoning. Luckily such a reluctance is rare.</p>
<p>I built local system with <strong>-fno-common</strong> toolchain and found 16 buggy
packages: <strong>syslinux</strong>, <strong>tftp-hpa</strong>, <strong>minicom</strong>, <strong>freeglut</strong>, <strong>openrc</strong>,
<strong>iproute2</strong>, <strong>gpm</strong>, <strong>xorg-server</strong>, <strong>logrotate</strong>, <strong>gnupg</strong>, <strong>libtirpc</strong>,
<strong>gdbm</strong>, <strong>cpio</strong>, <strong>postfix</strong>, <strong>xfsprogs</strong> and even <strong>glibc</strong>. Some are
very high profile packages. I had ~2K packages installed locally.</p>
<p>I extrapolated 16 failures per 2K packages to 20K packages
of the whole ::gentoo repository (~10x) and hoped that we won’t get
more than 160 failures. My intuition was saying that most of other
packages should be <strong>python</strong>, <strong>ruby</strong>, <strong>perl</strong>, <strong>php</strong> packages
and are probably unaffeched. Thus the final number could be lower
than 100. That sounded like a manageable fallout.</p>
<p>When Toralf started <strong>CFLAGS=-fno-common</strong> <strong>tinderbox</strong> build test
on the whole ::gentoo repository he began discovering more failures.
I proposed fixes for first few tens of failure and was quicly overwhelmed
with more failure reports. After a few weeks of <strong>tinderbox</strong> run
the <a href="https://bugs.gentoo.org/705764">bug list</a> collected ~800 failures!</p>
<p>800 is 5 times worse than I estimated. It’s 4% of the repository. Some of those
reports are probably duplicates but vast majority are unique real failures.
If I knew it’s so widespread I might have taken another way to roll it out.
Alas. Anyway, by now <strong>-fno-common</strong> is a fixed problem for Gentoo.</p>
<h2 id="fno-common-in-nixpkgs">-fno-common in nixpkgs</h2>
<p>A few weeks ago I got commit access to <strong>nixpkgs</strong>. I’m still feeling a
bit uneasy about it as I don’t formally maintain any packages there. At
least I have a few PRs to merge :)</p>
<p>Scrolling through pull requests I noticed that <strong>nixpkgs</strong> actually flipped
<strong>gcc-10</strong> (and <strong>llvm-11</strong>) default back to <strong>-fcommon</strong> to avoid widespread
breakage. And there was a PR to restore the default:
<a href="https://github.com/NixOS/nixpkgs/pull/110571" class="uri">https://github.com/NixOS/nixpkgs/pull/110571</a>. Having a bit more
collaborative tools at my disposal I decided to sort it out for <strong>nixpkgs</strong>.
I messed it up once before and learned something. Should be easy this time :)</p>
<p><strong>-fno-commn</strong> default was relased as <strong>gcc-10.1.0</strong> on May 7. That
makes it almost exactly 2 years ago. Since then some projects adapted to
<strong>-fno-common</strong> uptream and released newer versions. But some did not.
What is the ratio of those?</p>
<p>For still broken packages I usually write a patch against dormant
upstream and attach it to the bug tracker so others could use patch
as is even if patch does not get merged in any form.</p>
<p>Sometimes there is no place upstream to make patch publicly available.
In this case I resort to <strong>NIX_CFLAGS_COMPILE = “-fcommon”</strong> in <strong>.nix</strong>
expressions. So far I had to do it in 10 packages (maybe 30% of all
I tried to fix?). I hope it will save some time to others.</p>
<p>If you are the author of a package that had no release in past 2 years
and have a few minor tweaks then consider releasing it. Maybe you even
have a <strong>-fno-common</strong> fix pending?</p>
<h2 id="update-from-8-july-2022">Update from 8 July 2022</h2>
<p><strong>-fno-common</strong> change was merged into <strong>nixpkgs</strong>. Some stats:</p>
<ul>
<li>240 packages were broken (down from 800 in Gentoo). Only 30% were
still affected and 70% were already fixed upstream and trickled down
to downstream.</li>
<li>About 140 of unfixed packages got <strong>-fcommon</strong> workaround in <strong>nixpkgs</strong>.
This means ~60% did not have any form of an upstream fix and 40% did
(or do now).</li>
<li>It took me 2 months to do it.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on May 13, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>xmms2 0.9.1 is out</title>
    <link href="http://trofi.github.io/posts/244-xmms2-0.9.1-is-out.html" />
    <id>http://trofi.github.io/posts/244-xmms2-0.9.1-is-out.html</id>
    <published>2022-05-02T00:00:00Z</published>
    <updated>2022-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Tl;DR: <strong>xmms2-0.9.1</strong> is out and you can get it at
<a href="https://github.com/xmms2/xmms2-devel/releases/tag/0.9.1" class="uri">https://github.com/xmms2/xmms2-devel/releases/tag/0.9.1</a>!</p>
<p><a href="https://en.wikipedia.org/wiki/XMMS2">xmms2</a> is a music player daemon
with various plugins to support stream decoding and transformation.</p>
<h1 id="xmms2-most-basic-usage">xmms2 most basic usage</h1>
<p>To play a song you need to add it to database and then play it:</p>
<pre><code>$ xmms2 clear
$ xmms2 add .
$ xmms2 play</code></pre>
<p>To check on current status:</p>
<pre><code>$ xmms2 list
-&gt;[1/3096] mind.in.a.box - Lament for Lost Dreams (snippet) (00:26)

Total playtime: 0:00:26

$ xmms2 status

   (n) jump to next song
   (p) jump to previous song
   (SPACE) toggle playback
   (ENTER) exit status mode

Paused: mind.in.a.box - Lament for Lost Dreams (snippet): 00:05 of 00:26</code></pre>
<p><strong>xmms2</strong> CLI has many more options:</p>
<pre><code>xmms2 help
usage: xmms2 &lt;command&gt; [args]

Available commands:
   add
   current
   exit
   help
   info
   jump
   list
   move
   next
   pause
   play
   prev
   remove
   stop
   search
   seek
   toggle
   collection &lt;subcommand&gt;
   playlist &lt;subcommand&gt;
   server &lt;subcommand&gt;

Type 'help &lt;command&gt;' for detailed help about a command.</code></pre>
<p>You really want some frontend to manipulate the player.</p>
<p>I usually run a shell wrapper in a directory I want to play.
Effectively I’m using my window manager as a frontend:</p>
<ul>
<li><strong>mc</strong> in <strong>alacritty</strong> to run <strong>m</strong> in a directory I want to play: <a href="https://github.com/trofi/home/blob/master/.bash/funs#L19">script</a></li>
<li><strong>i3</strong> key bindings to navigate through song and playlist: <a href="https://github.com/trofi/home/blob/master/.config/i3/config#L30">config</a></li>
<li><strong>xmobar</strong> (with <a href="https://github.com/trofi/home/blob/master/bin/player-status-entry-persist.py">a formatter</a>) as a status output.</li>
</ul>
<h1 id="other-bits">other bits</h1>
<p><strong>xmms2</strong> supports a ton of plugins to play all sorts of formats.
Here is what I have installed (it’s not a complete list):</p>
<pre><code>$ xmms2 server plugins
airplay         - Airport Express output plugin
alsa            - Advanced Linux Sound Architecture output plugin
ao              - libao output plugin
apefile         - Monkey's Audio file format demuxer
asf             - Advanced Systems Format demuxer
asx             - Playlist plugin for Advanced Stream Redirector files.
avcodec         - ffmpeg libavcodec decoder
converter       - Sample format converter
cue             - Playlist parser for cue files
curl            - HTTP transport using CURL
diskwrite       - Dumps audio data to disk
equalizer       - Equalizer effect
faad            - Advanced Audio Coding decoder
file            - Plain local file transport
flac            - Free Lossless Audio Codec decoder
fluidsynth      - MIDI synthesiser
flv             - Extracts an audio stream from an FLV
gme             - Game Music Emulator music decoder
gvfs            - Transport for glibs virtual filesystem
html            - Reads HTML playlists
icymetaint      - Decode &amp; use shoutcast stream metadata
id3v2           - ID3v2 tag container handler
karaoke         - Voice removal effect plugin
m3u             - Playlist parser for m3u's
mad             - MPEG Layer 1/2/3 decoder
magic           - Magic file identifier
mid1            - MIDI file format-1 demuxer
midsquash       - Multitrack MIDI squasher
mms             - Microsoft Media Services xform
modplug         - Module file decoder
mp4             - MPEG-4 Part 14 file format demuxer
mpg123          - mpg123 decoder for MPEG 1.0/2.0/2.5 layer 1/2/3 audio
nibbler         - Discarding padding using auxdata startsamples/stopsamples
normalize       - Volume normalizer
null            - null output plugin
nulstripper     - Strips leading NUL bytes
ofa             - Open Fingerprint calculator
opus            - Xiph's Ogg/Opus decoder
oss             - OpenSoundSystem output plugin
pls             - Playlist parser for PLS files.
pulse           - Output to a PulseAudio server
replaygain      - Replaygain effect
ringbuf         - Buffer
segment         - Handling segment information specified by startms/stopms
sndfile         - Libsndfile decoder
speex           - Speex decoder
tremor          - Xiph's Ogg/Vorbis decoder (integer-only version)
tta             - True Audio Codec TTA file format parser
visualization   - visualization hook
vorbis          - Xiph's Ogg/Vorbis decoder
wave            - Wave decoder
wavpack         - WavPack decoder
xml             - XML plugin</code></pre>
<h1 id="why-xmms2">why xmms2?</h1>
<p>My path to <strong>xmms2</strong> was fun. My first audio player program was
<a href="https://en.wikipedia.org/wiki/Winamp#Winamp_2">winamp 2</a> on windows 98.
When I switched to linux I picked closest alternative (and even brought
my favourite hacker skin). It was <a href="https://en.wikipedia.org/wiki/XMMS">xmms</a>.</p>
<p><strong>xmms</strong> was a good player. But it’s upstream development stalled. It
was using <strong>gtk-1</strong> at the time when everyone else was migrating to
<strong>gtk-2</strong>. A bunch of <strong>gtk-2</strong> forks appeared and none looked close
enough to <strong>xmms</strong>. Some had too thick UI buttons, some had problems
playing enough audio formats I had. Most did not support <strong>xmms</strong> skins
and were not able to present their status as a 16-pixel high window
somewhere on the desktop.</p>
<p><strong>xmms2</strong> was a new project that aimed to be <strong>xmms</strong> done right
architecturally. I read the initial announcement at the
time and though it will eventually be just like <strong>xmms</strong>. Haha. I tried
<strong>xmms2</strong> out and was able to play all song formats I had. I was surprised
to see how quickly it builds from source.</p>
<p><strong>xmms2</strong> felt incomplete as it planned but never implemented GUI
client. Eventually <strong>abraca</strong> materialized but I never got to run
it: I already settled on my set of CLI hacks to play things.</p>
<p>Eventually <strong>xmms2</strong> development pace was slowing down. I was wondering
if there are any direct alternatives to <strong>xmms2</strong> out there. <strong>mpd</strong>
looked like a close match. But when I tried it I found <strong>xmms2</strong>
snappier to add files to the database and to scroll along the playlists
with <strong>i3</strong> keybindings. I suspect <strong>mpd</strong> was not optimised for that
use case. I never moved off <strong>xmms2</strong>. I still plan to add <strong>UNI</strong> module
file format support to <strong>xmms2</strong> via <strong>libmikmod</strong> or similar :)</p>

<div class="info">
    Posted on May  2, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>gcc profiler internals</title>
    <link href="http://trofi.github.io/posts/243-gcc-profiler-internals.html" />
    <id>http://trofi.github.io/posts/243-gcc-profiler-internals.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I occasionally encounter profiler bugs in gcc. Two related examples I
remember are <a href="https://gcc.gnu.org/PR96394">tauthon (python-2 fork)</a> and
<a href="https://gcc.gnu.org/PR105282">python</a> ICEs in <strong>PGO</strong> build mode. <strong>PGO</strong>
profile-guided optimisation.</p>
<p>I keep forgetting <strong>gcc</strong>’s internals aroung profiling handling and keep
re-tracing the same steps every time it comes up. I decided to write a
few words on it. I’ll cover a few generic details first and then we’ll
explore today’s <a href="https://gcc.gnu.org/PR105282">python</a> bug.</p>
<h1 id="using-gcc-profiler--fprofile-generate--fprofile-use">using gcc profiler: -fprofile-generate / -fprofile-use</h1>
<p>Let’s start from a trivial example. To build our program we run <strong>gcc</strong>
on it:</p>
<pre><code>$ gcc $CFLAGS prog.c -o prog</code></pre>
<p>To build an optimised program using profile feedback we need to perform
3 steps:</p>
<pre><code>$ gcc $CFLAGS -fprofile-generate prog.c -o prog
$ ./prog some-training-input-data
$ gcc $CFLAGS -fprofile-use      prog.c -o prog</code></pre>
<p>These are:</p>
<ol type="1">
<li>build instrumented program</li>
<li>run it to get a profile</li>
<li>build optimized program:</li>
</ol>
<p><strong>PGO</strong> build mode is not the only use of profile instrumentation.
<strong>GCC</strong> allows gathering runtime execution stats using different types
and formats (<a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html">instrumentation options</a>).</p>
<p>A few frequent uses are:</p>
<ul>
<li>call graph style profiling (<strong>-pg</strong> option): used to explore call
graph in <strong>gprof</strong> format.</li>
<li>execution statictics coverage (<strong>-ftest-coverage</strong> option): used to
extract close to line-by-line execution coverage in <strong>gcno</strong> format.</li>
<li>execution statistics profiles (<strong>-fprofile-generate</strong>): used to guide
optimization in future compilation (<strong>PGO</strong>) in <strong>gcda</strong> format.</li>
</ul>
<p>All these modes are not fundamentally different. They share
implementation and in-memory/on-disk format. I’ll look at a <strong>gcda</strong>
form. We’ll use the following sample code as our running example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* Keep the functions around to have real indirect calls. */</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DECL_F(fn) static void fn(void) __attribute__((noipa))</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define  DEF_F(fn) static void fn(void) {}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f0<span class="op">);</span> DEF_F<span class="op">(</span>f0<span class="op">);</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f1<span class="op">);</span> DEF_F<span class="op">(</span>f1<span class="op">);</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f2<span class="op">);</span> DEF_F<span class="op">(</span>f2<span class="op">);</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main <span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">&lt;</span> <span class="dv">2</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> <span class="dt">void</span><span class="op">(*</span>ft<span class="op">[])(</span><span class="dt">void</span><span class="op">)</span> <span class="op">=</span> <span class="op">{</span> <span class="op">&amp;</span>f0<span class="op">,</span> <span class="op">&amp;</span>f1<span class="op">,</span> <span class="op">&amp;</span>f2<span class="op">,</span> <span class="op">};</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> p <span class="op">=</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">];</span> <span class="op">*</span>p<span class="op">;</span> p<span class="op">++)</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        ft<span class="op">[*</span>p <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This program accepts one string argument (<strong>argv[1]</strong>) and calls
function <strong>f0()</strong>, <strong>f1()</strong>, or <strong>f2()</strong> somewhat randomly (based on
char modulo) against each byte of input string. The idea is that
it’s not immediately obvious which of the functions is called most
frequently.</p>
<p>This program has a few conditional branches and indirect calls. Let’s
profile it and see what stats we can collect. Building:</p>
<pre><code>$ gcc a.c -o a -fprofile-generate -fprofile-arcs -ftest-coverage -O2</code></pre>
<p>Running our program 5 times:</p>
<pre><code>$ ./a
$ ./a 123456789
$ ./a aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
$ ./a aa
$ ./a aaaa
$ ls
a  a.c  a.gcda  a.gcno</code></pre>
<p>Note that each <strong>./a</strong> run creates or updates <strong>a.gcda</strong> and <strong>a.gcno</strong>.
We can dump profiling statistics with <strong>gcov</strong>:</p>
<pre><code>$ gcov -a -b -c -f a
$ cat a.c.gcov
        -:    0:Source:a.c
        -:    0:Graph:a.gcno
        -:    0:Data:a.gcda
        -:    0:Runs:5
        -:    1:#include &lt;stddef.h&gt;
        -:    2:
        -:    3:/* Keep the functions around to have real indirect calls. */
        -:    4:#define DECL_F(fn) static void fn(void) __attribute__((noipa))
        -:    5:#define  DEF_F(fn) static void fn(void) {}
        -:    6:
function f0 called 3 returned 100% blocks executed 100%
        3:    7:DECL_F(f0); DEF_F(f0);
function f1 called 53 returned 100% blocks executed 100%
       53:    8:DECL_F(f1); DEF_F(f1);
function f2 called 3 returned 100% blocks executed 100%
        3:    9:DECL_F(f2); DEF_F(f2);
        -:   10:
function main called 5 returned 100% blocks executed 100%
        5:   11:int main (int argc, char *argv[]) {
        5:   12:    if (argc &lt; 2) return 0;
        5:   12-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -:   13:
        -:   14:    static const void(*ft[])(void) = { &amp;f0, &amp;f1, &amp;f2, };
        -:   15:    size_t sz = sizeof (ft) / sizeof (ft[0]);
        -:   16:
       63:   17:    for (const char * p = argv[1]; *p; p++)
        4:   17-block  0
       63:   17-block  1
branch  0 taken 59
branch  1 taken 4 (fallthrough)
       59:   18:        ft[*p % sz]();
       59:   18-block  0
call    0 returned 59
        -:   19:
        -:   20:    return 0;
        -:   21:}</code></pre>
<p>Here we see that:</p>
<ul>
<li><strong>ft[*p % sz]()</strong> gets called 59 times: 3 (<strong>f0</strong>) + 53 (<strong>f1</strong>) + 3 (<strong>f2</strong>)</li>
<li>function <strong>main()</strong> gets called 5 times; a full length of all the inputs we passed to <strong>./a</strong> program</li>
</ul>
<p>We also see frequency of <strong>if (argc &lt; 2) return 0;</strong> branches:</p>
<ul>
<li>was taken once (<strong>./a</strong> case, no arguments)</li>
<li>was not taken 4 times (all the other <strong>./a …</strong> calls)</li>
</ul>
<p>After profile collection we can build new binary using <strong>.gcda</strong> files
by changing <strong>-fprofile-generate</strong> to <strong>-fprofile-use</strong> in our <strong>gcc</strong>
calls:</p>
<pre><code>$ gcc a.c -o a -fprofile-use -O2</code></pre>
<p>Let’s compare the result against unprofiled build:</p>
<pre><code>$ gcc a.c -o a-unprof -O2</code></pre>
<p>I’ll skip disassembly as instructions do not change materially (the
program is too simple). The code order is slightly different in the two
binaries. Let’s have a look:</p>
<pre><code>$ nm -n a-unprof
...
0000000000400390 r __abi_tag
0000000000401000 T _init
0000000000401020 T main
0000000000401090 T _start
00000000004010c0 T _dl_relocate_static_pie
00000000004010d0 t deregister_tm_clones
0000000000401100 t register_tm_clones
0000000000401140 t __do_global_dtors_aux
0000000000401170 t frame_dummy
0000000000401180 t f0
0000000000401190 t f1
00000000004011a0 t f2
...</code></pre>
<pre><code>$ nm -n a
...
0000000000400390 r __abi_tag
0000000000401000 T _init
0000000000401020 T main
0000000000401080 t f1
0000000000401090 T _start
...</code></pre>
<p><strong>nm -n</strong> orders symbols in their in-memory order so we could
get the idea what goes where.</p>
<p>One can spot that in unprofiled build <strong>main()</strong> is quite far away from most
frequently called <strong>f1()</strong> function. While in profiled build
<strong>f1()</strong> immediately follows <strong>main()</strong>.</p>
<p>In more practical scenarios the effects are more pronounced:</p>
<ul>
<li>likely to execute code is laid out in a way that does not require branching</li>
<li>inlining can rely on execution statistics instead of function size heuristics</li>
<li><strong>-flto</strong> could perform global program code reordering to speedup binary loading from disk</li>
<li>and many other effects</li>
</ul>
<p>The main takeaway here is that <strong>PGO</strong> requires two full builds
(<strong>-fprofile-generate</strong> and <strong>-fprofile-use</strong>) and a program training
run.</p>
<p>In our example training data is biased towards inputs with <strong>‘a’</strong>
symbols and thus our program is probably slightly more efficient at
handling those.</p>
<p>In <strong>PGO</strong> builds the trick is to find suitable input training data.
Typical rookie mistake is to use <strong>./prog –help</strong> as a training run.
Do not do that: you will get program optimised for printing help text.
The rest will perform worse than typical unprofiled build.</p>
<h1 id="internals-gcov-dump-tool">internals: gcov-dump tool</h1>
<p>What exactly do these <strong>.gcda</strong> files contain? Let’s have a peek with
<strong>gcov-dump</strong> tool shipped with <strong>gcc</strong>:</p>
<pre><code>$ gcov-dump a.gcda

a.gcda:data:magic `gcda':version `B12*'
a.gcda:stamp 1137774494
a.gcda:  a1000000:   2:OBJECT_SUMMARY runs=5, sum_max=60
a.gcda:  01000000:   3:FUNCTION ident=108032747, lineno_checksum=0x0a7a17ea, cfg_checksum=0xc835c602
a.gcda:    01a10000:   8:COUNTERS arcs 4 counts
a.gcda:    01a90000:  16:COUNTERS indirect_call 8 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1567133468, lineno_checksum=0xdadb6f0d, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1025457522, lineno_checksum=0x745daa69, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1634904005, lineno_checksum=0x432c0dd4, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts</code></pre>
<p>Here we something about <strong>a.gcda</strong> contents. It has something about:</p>
<ul>
<li><p>5 program runs (<strong>OBJECT_SUMMARY runs=5</strong>)</p></li>
<li><p>4 FUNCTIONs, each contains information about:</p>
<ul>
<li><strong>arcs</strong>: conditional or unconditional branches</li>
<li><strong>indirect_call</strong> indirect branch targets</li>
<li><strong>time_profiler</strong>: count of times basic block was executed</li>
</ul></li>
</ul>
<p>Note that functions are identified not by name, but by a triple:</p>
<ul>
<li><strong>ident</strong>: name hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l548">coverage_compute_profile_id()</a></li>
<li><strong>lineno_checksum</strong>: source file name and line number hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l531">coverage_compute_lineno_checksum()</a></li>
<li><strong>cfg_checksum</strong>: control flow graph hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l588">coverage_compute_cfg_checksum()</a>
identifier stability can survive minor source code changes.</li>
</ul>
<p>You need a <strong>.gcno</strong> file to resolve these obscure identifiers back
to source line numbers.</p>
<p>Let’s look into individual counters of <strong>.gcda</strong> files. We can extract
then with <strong>-l</strong> option:</p>
<pre><code>$ gcov-dump -l a.gcda

a.gcda:data:magic `gcda':version `B12*'
a.gcda:stamp 1137774494
a.gcda:  a1000000:   2:OBJECT_SUMMARY runs=5, sum_max=60
a.gcda:  01000000:   3:FUNCTION ident=108032747, lineno_checksum=0x0a7a17ea, cfg_checksum=0xc835c602
a.gcda:    01a10000:   8:COUNTERS arcs 4 counts
a.gcda:                   0: 1 4 59 4
a.gcda:    01a90000:  16:COUNTERS indirect_call 8 counts
a.gcda:                   0: 59 3 1025457522 53 1567133468 3 1634904005 3
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 1
a.gcda:  01000000:   3:FUNCTION ident=1567133468, lineno_checksum=0xdadb6f0d, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 3
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 3
a.gcda:  01000000:   3:FUNCTION ident=1025457522, lineno_checksum=0x745daa69, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 53
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 2
a.gcda:  01000000:   3:FUNCTION ident=1634904005, lineno_checksum=0x432c0dd4, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 3
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 4</code></pre>
<p>Counters are harder to interpret without the context.</p>
<p>For example <strong>arcs</strong>
just list count of each branch taken known to the current function.
The string “FUNCTION ident=108032747: arcs 4 counts: 1 4 59 4” means that first
arc was taken once, third was taken 59 times.</p>
<p>Looking at the above <strong>a.c.gcov</strong> I
would guess <strong>FUNCTION ident=108032747</strong> is our <strong>main()</strong> function,
first counter is our <strong>if (argc &lt; 2) return 0;</strong> branch and the rest
are indirect call arcs to <strong>f1()</strong>, <strong>f2()</strong>, <strong>f3()</strong>.</p>
<p><strong>indirect_call</strong> is more complicated: the string “indirect_call 8 counts: 59 3 1025457522 53 1567133468 3 1634904005 3”
means that there were 59 indirect calls, top 3 are listed, first
indirection had 53 calls (with <strong>ident=1025457522</strong> as a target, probably <strong>f1()</strong>),
second and third are taken 3 times (probably <strong>f0()</strong> and <strong>f2()</strong> are the targets).</p>
<p><strong>time_profiler</strong> is the simplest one: it says how many times the
function itself was called.</p>
<p>Quiz question: why does <strong>ident=108032747</strong> (<strong>main()</strong> function) has
only one <strong>time_profile</strong> call and not 5?</p>
<h1 id="internals-libgcov">internals: libgcov</h1>
<p><strong>.gcda</strong> files are read at program startup and written at program
shutdown. Multiple program runs have an effect of merged profile statictics
from each run.</p>
<p>Some staticstics like <strong>runs</strong> are easy to merge:
just sum values together. But some like <strong>arcs</strong> are trickier:
how do we handle indirect calls with an unbound target fanout?
Should we store all of them? Or set a static or dynamic limit?</p>
<p>All these cases are handled by <strong>-lgcov</strong> library linked into
instrumented binaries. It’s API resides in
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov.h;h=487bd1464cd8e6f9ae4dc1ca25a68b0c8d836a74;hb=95874f95095f401405d3386e2e6695351b3f97b5#l282">libgcc/libgcov.h</a>
and has a few things to note:</p>
<ul>
<li>entry and exit points: <strong>__gcov_init()</strong> / <strong>__gcov_exit()</strong>.</li>
<li>profiler conters: <strong>__gcov_interval_profiler()</strong> / <strong>__gcov_time_profiler()</strong> / <strong>__gcov_indirect_call_profiler_v4()</strong></li>
<li>profile mergers: <strong>__gcov_merge_add()</strong> / <strong>__gcov_merge_time_profile()</strong> / <strong>__gcov_merge_topn()</strong></li>
<li>counter readers: <strong>gcov_get_counter()</strong> / <strong>gcov_get_counter_ignore_scaling()</strong> / <strong>gcov_get_counter_target()</strong></li>
<li>hooks to catch program re-execution: <strong>__gcov_fork()</strong> / <strong>__gcov_execl()</strong></li>
</ul>
<p>Let’s look at indirect call profiler details as an exampe. The other
metric types follow the same pattern.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-profiler.c;h=57617857a93197fcbf99c682df11c66b9fb2b589;hb=95874f95095f401405d3386e2e6695351b3f97b5#l169">__gcov_indirect_call_profiler_v4()</a>
implements an increment (in-memory) for <strong>indirect_call</strong>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>__gcov_indirect_call_profiler_v4 <span class="op">(</span>gcov_type value<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>cur_func<span class="op">)</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  __gcov_indirect_call_profiler_body <span class="op">(</span>value<span class="op">,</span> cur_func<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co">/* By default, the C++ compiler will use function addresses in the</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="co">   vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="co">   tells the compiler to use function descriptors instead.  The value</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co">   of this macro says how many words wide the descriptor is (normally 2).</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="co">   It is assumed that the address of a function descriptor may be treated</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="co">   as a pointer to a function.  */</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="co">/* Tries to determine the most common value among its inputs. */</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>__gcov_indirect_call_profiler_body <span class="op">(</span>gcov_type value<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>cur_func<span class="op">,</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>                                    <span class="dt">int</span> use_atomic<span class="op">)</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* If the C++ virtual tables contain function descriptors then one</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co">     function may have multiple descriptors and we need to dereference</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="co">     the descriptors to see if they point to the same function.  */</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>cur_func <span class="op">==</span> __gcov_indirect_call<span class="op">.</span>callee</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>      <span class="op">||</span> <span class="op">(</span>__LIBGCC_VTABLE_USES_DESCRIPTORS__</span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>          <span class="op">&amp;&amp;</span> <span class="op">*(</span><span class="dt">void</span> <span class="op">**)</span> cur_func <span class="op">==</span> <span class="op">*(</span><span class="dt">void</span> <span class="op">**)</span> __gcov_indirect_call<span class="op">.</span>callee<span class="op">))</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>    __gcov_topn_values_profiler_body <span class="op">(</span>__gcov_indirect_call<span class="op">.</span>counters<span class="op">,</span> value<span class="op">,</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>                                      use_atomic<span class="op">);</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>  __gcov_indirect_call<span class="op">.</span>callee <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="co">/* Tries to determine N most commons value among its inputs.  */</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>__gcov_topn_values_profiler_body <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>                                  <span class="dt">int</span> use_atomic<span class="op">)</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>  gcov_topn_add_value <span class="op">(</span>counters<span class="op">,</span> value<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> use_atomic<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a><span class="co">/* Add key value pair VALUE:COUNT to a top N COUNTERS.  When INCREMENT_TOTAL</span></span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a><span class="co">   is true, add COUNT to total of the TOP counter.  If USE_ATOMIC is true,</span></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a><span class="co">   do it in atomic way.  Return true when the counter is full, otherwise</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a><span class="co">   return false.  */</span></span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">unsigned</span></span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>gcov_topn_add_value <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span> gcov_type count<span class="op">,</span></span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">int</span> use_atomic<span class="op">,</span> <span class="dt">int</span> increment_total<span class="op">)</span></span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span></code></pre></div>
<p>Here we see that <strong>indirect_call</strong> is a <strong>topn</strong> style counter as it’s handled by
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov.h;h=487bd1464cd8e6f9ae4dc1ca25a68b0c8d836a74;hb=95874f95095f401405d3386e2e6695351b3f97b5#l487">gcov_topn_add_value()</a>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">unsigned</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>gcov_topn_add_value <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span> gcov_type count<span class="op">,</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">int</span> use_atomic<span class="op">,</span> <span class="dt">int</span> increment_total<span class="op">)</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>increment_total<span class="op">)</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* In the multi-threaded mode, we can have an already merged profile</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">         with a negative total value.  In that case, we should bail out.  */</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>counters<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>      gcov_counter_add <span class="op">(&amp;</span>counters<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">,</span> use_atomic<span class="op">);</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>prev_node <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>minimal_node <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>current_node  <span class="op">=</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*)(</span><span class="dt">intptr_t</span><span class="op">)</span>counters<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>current_node<span class="op">)</span></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>current_node<span class="op">-&gt;</span>value <span class="op">==</span> value<span class="op">)</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>          gcov_counter_add <span class="op">(&amp;</span>current_node<span class="op">-&gt;</span>count<span class="op">,</span> count<span class="op">,</span> use_atomic<span class="op">);</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>          <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>A few things to note here:</p>
<ul>
<li><strong>gcov_topn_add_value()</strong> increments <strong>counters[ix]</strong> where <strong>ix</strong> matches <strong>value</strong> being counted.</li>
<li><strong>gcov_topn_add_value()</strong> increments <strong>counters[0]</strong> as it treats it as “total”</li>
<li>negative “total” values are special and are related to merged values (how?)</li>
</ul>
<p>Let’s look at the merge function for <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-merge.c;h=89741f637e1efae86d193762b668015c36243098;hb=95874f95095f401405d3386e2e6695351b3f97b5#l89">__gcov_merge_topn()</a>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* The profile merging function for choosing the most common value.</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="co">   It is given an array COUNTERS of N_COUNTERS old counters and it</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="co">   reads the same number of counters from the gcov file.  The counters</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="co">   are split into pairs where the members of the tuple have</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="co">   meanings:</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="co">   -- the stored candidate on the most common value of the measured entity</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="co">   -- counter</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="co">   We use -TOTAL for situation when merging dropped some values.</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a><span class="co">   The information is used for -fprofile-reproducible flag.</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="co">   */</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>__gcov_merge_topn <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> <span class="dt">unsigned</span> n_counters<span class="op">)</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>  gcc_assert <span class="op">(!(</span>n_counters <span class="op">%</span> GCOV_TOPN_MEM_COUNTERS<span class="op">));</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span>n_counters <span class="op">/</span> GCOV_TOPN_MEM_COUNTERS<span class="op">);</span> i<span class="op">++)</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* First value is number of total executions of the profiler.  */</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>      gcov_type all <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>      gcov_type n <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>      <span class="dt">unsigned</span> full <span class="op">=</span> all <span class="op">&lt;</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>      gcov_type <span class="op">*</span>total <span class="op">=</span> <span class="op">&amp;</span>counters<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">];</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>      <span class="op">*</span>total <span class="op">+=</span> full <span class="op">?</span> <span class="op">-</span>all <span class="op">:</span> all<span class="op">;</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> n<span class="op">;</span> j<span class="op">++)</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a>          gcov_type value <span class="op">=</span> gcov_get_counter_target <span class="op">();</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a>          gcov_type count <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a>          <span class="co">// </span><span class="al">TODO</span><span class="co">: we should use atomic here</span></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a>          full <span class="op">|=</span> gcov_topn_add_value <span class="op">(</span>counters <span class="op">+</span> GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">,</span></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a>                                       value<span class="op">,</span> count<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>full<span class="op">)</span></span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>total <span class="op">=</span> <span class="op">-(*</span>total<span class="op">);</span></span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Once again we see that first pair of key/value is treated as “total” count
of calls. Merger is the place where overflow of <strong>gcov_topn_add_value()</strong>
is detected and “total” is stored as a negative value to show this fact.</p>
<p>All the counter types are written on disk with
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-driver.c;h=d4517d269eb32ca84ee1dfa069bda4e872a1ac98;hb=95874f95095f401405d3386e2e6695351b3f97b5#l502">write_once_data()</a>.
From there we see that
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-driver.c;h=d4517d269eb32ca84ee1dfa069bda4e872a1ac98;hb=95874f95095f401405d3386e2e6695351b3f97b5#l432">write_topn_counters()</a>
dumps them as:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Store all TOP N counters where each has a dynamic length.  */</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>write_topn_counters <span class="op">(</span><span class="dt">const</span> <span class="kw">struct</span> gcov_ctr_info <span class="op">*</span>ci_ptr<span class="op">,</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">unsigned</span> t_ix<span class="op">,</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>                     gcov_unsigned_t n_counts<span class="op">,</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">(*</span>dump_fn<span class="op">)</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">void</span> <span class="op">*,</span> <span class="dt">unsigned</span><span class="op">,</span> <span class="dt">void</span> <span class="op">*),</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*(*</span>allocate_fn<span class="op">)(</span><span class="dt">unsigned</span><span class="op">,</span> <span class="dt">void</span> <span class="op">*),</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*</span>arg<span class="op">)</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> disk_size <span class="op">=</span> GCOV_TOPN_DISK_COUNTERS <span class="op">*</span> counters <span class="op">+</span> <span class="dv">2</span> <span class="op">*</span> pair_total<span class="op">;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>  dump_unsigned <span class="op">(</span>GCOV_TAG_FOR_COUNTER <span class="op">(</span>t_ix<span class="op">),</span> dump_fn<span class="op">,</span> arg<span class="op">),</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>  dump_unsigned <span class="op">(</span>GCOV_TAG_COUNTER_LENGTH <span class="op">(</span>disk_size<span class="op">),</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> counters<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>      dump_counter <span class="op">(</span>ci_ptr<span class="op">-&gt;</span>values<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">],</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>      dump_counter <span class="op">(</span>list_sizes<span class="op">[</span>i<span class="op">],</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>      gcov_type start <span class="op">=</span> ci_ptr<span class="op">-&gt;</span>values<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i <span class="op">+</span> <span class="dv">2</span><span class="op">];</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>      <span class="dt">unsigned</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*</span>node <span class="op">=</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*)(</span>__INTPTR_TYPE__<span class="op">)</span>start<span class="op">;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>           j <span class="op">&lt;</span> list_sizes<span class="op">[</span>i<span class="op">];</span> node <span class="op">=</span> node<span class="op">-&gt;</span>next<span class="op">,</span> j<span class="op">++)</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a>          dump_counter <span class="op">(</span>node<span class="op">-&gt;</span>value<span class="op">,</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a>          dump_counter <span class="op">(</span>node<span class="op">-&gt;</span>count<span class="op">,</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This just writes key/value pairs on disk. Nothing fancy. No special handling
of negative values. This makes on-disk format rougly match in-memory format.</p>
<p>Now we can alswer our quiz question on why <strong>time_profiler</strong> still has a
value of <strong>1</strong> for <strong>main()</strong> even after 5 program runs.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-merge.c;h=89741f637e1efae86d193762b668015c36243098;hb=95874f95095f401405d3386e2e6695351b3f97b5#l68">__gcov_merge_time_profile()</a>
tells us:</p>
<pre><code>/* Time profiles are merged so that minimum from all valid (greater than zero)
   is stored. There could be a fork that creates new counters. To have
   the profile stable, we chosen to pick the smallest function visit time.  */
void
__gcov_merge_time_profile (gcov_type *counters, unsigned n_counters)
{
  unsigned int i;
  gcov_type value;

  for (i = 0; i &lt; n_counters; i++)
    {
      value = gcov_get_counter_target ();

      if (value &amp;&amp; (!counters[i] || value &lt; counters[i]))
        counters[i] = value;
    }
}</code></pre>
<p>The counter stores fastest execution for the function. Not a sum of
execution times (as I thought initially).</p>
<p>The takeaways here are:</p>
<ul>
<li><strong>gcc</strong> implements a few types of counters: histogram-style <strong>TOPN</strong> counters,
simpler numeric counters and a few others.</li>
<li>merge policies for counters are dependent on their exact meaning; they are not cimplicated but have a few
gotchas like negative values.</li>
<li><strong>libgcov</strong> provides runtime for both program being profiled and <strong>gcov</strong> standalone tool</li>
</ul>
<h1 id="internals-gcc-emitted-code">internals: gcc-emitted code</h1>
<p>Let’s check how counters are embedded into our program. I suggest looking at the
optimised <strong>GIMPLE</strong> tree. Here is our original program:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* Keep the functions around to have real indirect calls. */</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DECL_F(fn) static void fn(void) __attribute__((noipa))</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define  DEF_F(fn) static void fn(void) {}</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f0<span class="op">);</span> DEF_F<span class="op">(</span>f0<span class="op">);</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f1<span class="op">);</span> DEF_F<span class="op">(</span>f1<span class="op">);</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f2<span class="op">);</span> DEF_F<span class="op">(</span>f2<span class="op">);</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main <span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">&lt;</span> <span class="dv">2</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> <span class="dt">void</span><span class="op">(*</span>ft<span class="op">[])(</span><span class="dt">void</span><span class="op">)</span> <span class="op">=</span> <span class="op">{</span> <span class="op">&amp;</span>f0<span class="op">,</span> <span class="op">&amp;</span>f1<span class="op">,</span> <span class="op">&amp;</span>f2<span class="op">,</span> <span class="op">};</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> p <span class="op">=</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">];</span> <span class="op">*</span>p<span class="op">;</span> p<span class="op">++)</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>        ft<span class="op">[*</span>p <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We will dump final <strong>GIMPLE</strong> with <strong>-fdump-tree-optimized</strong> flag.
I’ll paste the output in 3 pieces (as the output is quite big):</p>
<ul>
<li><strong>main()</strong> function</li>
<li><strong>f0()</strong> function</li>
<li>constructor/destructor</li>
</ul>
<p>Let’s dump <strong>GIMPLE</strong> first:</p>
<pre><code>$ gcc -c a.c -fprofile-generate -fprofile-arcs -ftest-coverage -O2 -fdump-tree-optimized
$ cat a.c.244t.optimized</code></pre>
<p>Her is our <strong>main()</strong>:</p>
<pre><code>;; Function main (main, funcdef_no=3, decl_uid=1966, cgraph_uid=4, symbol_order=3) (executed once)

__attribute__((access (&quot;^1[ ]&quot;, )))
int main (int argc, char * * argv)
{
  const char * p;
  static void (*&lt;T34b&gt;) (void) ft[3] = {f0, f1, f2};
  long unsigned int _1;
  long unsigned int _2;
  void (*&lt;T34b&gt;) (void) _3;
  char _4;
  long int PROF_edge_counter_14;
  long int PROF_edge_counter_15;
  long int PROF_edge_counter_16;
  long int PROF_edge_counter_17;
  long int PROF_edge_counter_18;
  long int PROF_edge_counter_19;
  long int PROF_edge_counter_20;
  long int PROF_edge_counter_21;
  long int _23;
  long int time_profile_24;
  long int time_profile_25;
  void * _26;
  char _39;
  char _40;

  &lt;bb 2&gt; [local count: 160390549]:
  _26 = __gcov_indirect_call.D.1993;
  if (_26 != 0B)
    goto &lt;bb 3&gt;; [20.00%]
  else
    goto &lt;bb 4&gt;; [80.00%]

  &lt;bb 3&gt; [local count: 160390549]:
  __gcov_indirect_call_profiler_v4 (108032747, main);

  &lt;bb 4&gt; [local count: 160390549]:
  _23 = __gcov7.main[0];
  if (_23 == 0)
    goto &lt;bb 5&gt;; [20.00%]
  else
    goto &lt;bb 6&gt;; [80.00%]

  &lt;bb 5&gt; [local count: 160390549]:
  time_profile_24 = __gcov_time_profiler_counter;
  time_profile_25 = time_profile_24 + 1;
  __gcov7.main[0] = time_profile_25;
  __gcov_time_profiler_counter = time_profile_25;

  &lt;bb 6&gt; [local count: 160390549]:
  if (argc_8(D) &lt;= 1)
    goto &lt;bb 7&gt;; [26.36%]
  else
    goto &lt;bb 8&gt;; [73.64%]

  &lt;bb 7&gt; [local count: 42278949]:
  PROF_edge_counter_14 = __gcov0.main[0];
  PROF_edge_counter_15 = PROF_edge_counter_14 + 1;
  __gcov0.main[0] = PROF_edge_counter_15;
  goto &lt;bb 11&gt;; [100.00%]

  &lt;bb 8&gt; [local count: 118111600]:
  PROF_edge_counter_16 = __gcov0.main[1];
  PROF_edge_counter_17 = PROF_edge_counter_16 + 1;
  __gcov0.main[1] = PROF_edge_counter_17;
  p_11 = MEM[(char * *)argv_10(D) + 8B];
  _39 = *p_11;
  if (_39 != 0)
    goto &lt;bb 9&gt;; [89.00%]
  else
    goto &lt;bb 10&gt;; [11.00%]

  &lt;bb 9&gt; [local count: 955630226]:
  # _40 = PHI &lt;_4(9), _39(8)&gt;
  # p_41 = PHI &lt;p_13(9), p_11(8)&gt;
  _1 = (long unsigned int) _40;
  _2 = _1 % 3;
  _3 = ft[_2];
  __gcov_indirect_call.D.1994 = &amp;__gcov4.main[0];
  __gcov_indirect_call.D.1993 = _3;
  _3 ();
  PROF_edge_counter_18 = __gcov0.main[2];
  PROF_edge_counter_19 = PROF_edge_counter_18 + 1;
  __gcov0.main[2] = PROF_edge_counter_19;
  p_13 = p_41 + 1;
  _4 = MEM[(const char *)p_13];
  if (_4 != 0)
    goto &lt;bb 9&gt;; [89.00%]
  else
    goto &lt;bb 10&gt;; [11.00%]

  &lt;bb 10&gt; [local count: 118111600]:
  PROF_edge_counter_20 = __gcov0.main[3];
  PROF_edge_counter_21 = PROF_edge_counter_20 + 1;
  __gcov0.main[3] = PROF_edge_counter_21;

  &lt;bb 11&gt; [local count: 160390549]:
  return 0;

}</code></pre>
<p>While it’s a lot of code each counter handling is straightforward:</p>
<ul>
<li>read the counter out</li>
<li>update the counter</li>
<li>write it back</li>
</ul>
<p>Here we already see a few glbal variables being updated:</p>
<ul>
<li><strong>__gcov_time_profiler_counter</strong>: global timer counter gets incremented once.</li>
<li><strong>__gcov7.main[0]</strong>: <strong>main</strong> timer counter gets incremented once.</li>
<li><strong>__gcov0.main[0,1,2,3]</strong>: <strong>main</strong> arc counters (to <strong>f0()</strong>, <strong>f1()</strong>, <strong>f2()</strong>)</li>
</ul>
<p>Note that <strong>main()</strong> does build explicitl arcs to
<strong>f0()</strong>/<strong>f1()f2()</strong> but it does not know where indirections leads
it to. Thus <strong>gcc</strong> stores indirection to <strong>__gcov_indirect_call.D.1993</strong>
global.</p>
<p>TO maintain the indirect counters <strong>gcc</strong> relies on target to increment it:</p>
<pre><code>;; Function f2 (f2, funcdef_no=2, decl_uid=1960, cgraph_uid=3, symbol_order=2)

__attribute__((noipa, noinline, noclone, no_icf))
void f2 ()
{
  long int PROF_edge_counter_2;
  long int PROF_edge_counter_3;
  long int _4;
  long int time_profile_5;
  long int time_profile_6;
  void * _7;

  &lt;bb 2&gt; [local count: 1073741824]:
  _7 = __gcov_indirect_call.D.1993;
  if (_7 != 0B)
    goto &lt;bb 3&gt;; [20.00%]
  else
    goto &lt;bb 4&gt;; [80.00%]

  &lt;bb 3&gt; [local count: 1073741824]:
  __gcov_indirect_call_profiler_v4 (1567133468, f2);

  &lt;bb 4&gt; [local count: 1073741824]:
  PROF_edge_counter_2 = __gcov0.f2[0];
  PROF_edge_counter_3 = PROF_edge_counter_2 + 1;
  __gcov0.f2[0] = PROF_edge_counter_3;
  _4 = __gcov7.f2[0];
  if (_4 == 0)
    goto &lt;bb 5&gt;; [20.00%]
  else
    goto &lt;bb 6&gt;; [80.00%]

  &lt;bb 5&gt; [local count: 1073741824]:
  time_profile_5 = __gcov_time_profiler_counter;
  time_profile_6 = time_profile_5 + 1;
  __gcov7.f2[0] = time_profile_6;
  __gcov_time_profiler_counter = time_profile_6;

  &lt;bb 6&gt; [local count: 1073741824]:
  return;

}

;; Function f1 (f1, funcdef_no=1, decl_uid=1955, cgraph_uid=2, symbol_order=1)
... same as f0
;; Function f2 (f0, funcdef_no=0, decl_uid=1950, cgraph_uid=1, symbol_order=0)
... same as f2</code></pre>
<p>Here the same <strong>__gcov_indirect_call.D.1993</strong> is being used to increment the counter
in case <strong>f2()</strong> is indirection target. If <strong>f2()</strong> is called directly then this
global would not be populated.</p>
<pre><code>;; Function _sub_I_00100_0 (_sub_I_00100_0, funcdef_no=4, decl_uid=2028, cgraph_uid=6, symbol_order=17) (executed once)

void _sub_I_00100_0 ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  __gcov_init (&amp;*.LPBX0); [tail call]
  return;

}

;; Function _sub_D_00100_1 (_sub_D_00100_1, funcdef_no=5, decl_uid=2031, cgraph_uid=7, symbol_order=18) (executed once)

void _sub_D_00100_1 ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  __gcov_exit (); [tail call]
  return;
}</code></pre>
<p>And here we see <strong>-lgcov</strong> startup and shutdown code in constructor and
destructor. Simple!</p>
<h1 id="the-actual-bug">the actual bug</h1>
<p>Now if all the above has some sense to you then <a href="https://gcc.gnu.org/PR105282" class="uri">https://gcc.gnu.org/PR105282</a>
should look less mysterious. There <strong>python</strong> managed to ICE <strong>gcc</strong> when
program was optimised with training data available.</p>
<p>Let’s look at the minimised example:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">void</span> <span class="op">(*</span>cb_t<span class="op">)(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define F(__fn) static void __fn(void) {}</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f00<span class="op">);</span>F<span class="op">(</span>f01<span class="op">);</span>F<span class="op">(</span>f02<span class="op">);</span>F<span class="op">(</span>f03<span class="op">);</span>F<span class="op">(</span>f04<span class="op">);</span>F<span class="op">(</span>f05<span class="op">);</span>F<span class="op">(</span>f06<span class="op">);</span>F<span class="op">(</span>f07<span class="op">);</span>F<span class="op">(</span>f08<span class="op">);</span>F<span class="op">(</span>f09<span class="op">);</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f10<span class="op">);</span>F<span class="op">(</span>f11<span class="op">);</span>F<span class="op">(</span>f12<span class="op">);</span>F<span class="op">(</span>f13<span class="op">);</span>F<span class="op">(</span>f14<span class="op">);</span>F<span class="op">(</span>f15<span class="op">);</span>F<span class="op">(</span>f16<span class="op">);</span>F<span class="op">(</span>f17<span class="op">);</span>F<span class="op">(</span>f18<span class="op">);</span>F<span class="op">(</span>f19<span class="op">);</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f20<span class="op">);</span>F<span class="op">(</span>f21<span class="op">);</span>F<span class="op">(</span>f22<span class="op">);</span>F<span class="op">(</span>f23<span class="op">);</span>F<span class="op">(</span>f24<span class="op">);</span>F<span class="op">(</span>f25<span class="op">);</span>F<span class="op">(</span>f26<span class="op">);</span>F<span class="op">(</span>f27<span class="op">);</span>F<span class="op">(</span>f28<span class="op">);</span>F<span class="op">(</span>f29<span class="op">);</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f30<span class="op">);</span>F<span class="op">(</span>f31<span class="op">);</span>F<span class="op">(</span>f32<span class="op">);</span>F<span class="op">(</span>f33<span class="op">);</span>F<span class="op">(</span>f34<span class="op">);</span>F<span class="op">(</span>f35<span class="op">);</span>F<span class="op">(</span>f36<span class="op">);</span>F<span class="op">(</span>f37<span class="op">);</span>F<span class="op">(</span>f38<span class="op">);</span>F<span class="op">(</span>f39<span class="op">);</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f40<span class="op">);</span>F<span class="op">(</span>f41<span class="op">);</span>F<span class="op">(</span>f42<span class="op">);</span>F<span class="op">(</span>f43<span class="op">);</span>F<span class="op">(</span>f44<span class="op">);</span>F<span class="op">(</span>f45<span class="op">);</span>F<span class="op">(</span>f46<span class="op">);</span>F<span class="op">(</span>f47<span class="op">);</span>F<span class="op">(</span>f48<span class="op">);</span>F<span class="op">(</span>f49<span class="op">);</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> f<span class="op">(</span><span class="dt">int</span> i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Needs to be bigger than gcc's GCOV_TOPN_MAXIMUM_TRACKED_VALUES == 32</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a><span class="co">     * to overflow GCOV_COUNTER_V_INDIR couter type.</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a><span class="co">     */</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> cb_t fs<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f00<span class="op">,&amp;</span>f01<span class="op">,&amp;</span>f02<span class="op">,&amp;</span>f03<span class="op">,&amp;</span>f04<span class="op">,&amp;</span>f05<span class="op">,&amp;</span>f06<span class="op">,&amp;</span>f07<span class="op">,&amp;</span>f08<span class="op">,&amp;</span>f09<span class="op">,</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f10<span class="op">,&amp;</span>f11<span class="op">,&amp;</span>f12<span class="op">,&amp;</span>f13<span class="op">,&amp;</span>f14<span class="op">,&amp;</span>f15<span class="op">,&amp;</span>f16<span class="op">,&amp;</span>f17<span class="op">,&amp;</span>f18<span class="op">,&amp;</span>f19<span class="op">,</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f20<span class="op">,&amp;</span>f21<span class="op">,&amp;</span>f22<span class="op">,&amp;</span>f23<span class="op">,&amp;</span>f24<span class="op">,&amp;</span>f25<span class="op">,&amp;</span>f26<span class="op">,&amp;</span>f27<span class="op">,&amp;</span>f28<span class="op">,&amp;</span>f29<span class="op">,</span></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f30<span class="op">,&amp;</span>f31<span class="op">,&amp;</span>f32<span class="op">,&amp;</span>f33<span class="op">,&amp;</span>f34<span class="op">,&amp;</span>f35<span class="op">,&amp;</span>f36<span class="op">,&amp;</span>f37<span class="op">,&amp;</span>f38<span class="op">,&amp;</span>f39<span class="op">,</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f40<span class="op">,&amp;</span>f41<span class="op">,&amp;</span>f42<span class="op">,&amp;</span>f43<span class="op">,&amp;</span>f44<span class="op">,&amp;</span>f45<span class="op">,&amp;</span>f46<span class="op">,&amp;</span>f47<span class="op">,&amp;</span>f48<span class="op">,&amp;</span>f49<span class="op">,</span></span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>fs<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>fs<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a>    fs<span class="op">[</span>i <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> l<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[]);</span></span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">==</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">25</span><span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">==</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">25</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">50</span><span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb23-36"><a href="#cb23-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE on <strong>gcc-12</strong> or <strong>gcc-11</strong>:</p>
<pre><code>$ gcc -flto -O0 a.c -fprofile-generate -o a
$ ./a # populate first 25 buckets
$ ./a 1 # populate 25 more buckets, cause overflow
$ gcc -flto -O0 a.c -fprofile-use -o a

during IPA pass: modref
a.c:36:1: internal compiler error: in stream_out_histogram_value, at value-prof.cc:340
   36 | }
      | ^
0x8351fb stream_out_histogram_value(output_block*, histogram_value_t*)
        ../../gcc-12-20220410/gcc/value-prof.cc:340
0x1c848c0 output_gimple_stmt
        ../../gcc-12-20220410/gcc/gimple-streamer-out.cc:192
0x1c848c0 output_bb(output_block*, basic_block_def*, function*)
        ../../gcc-12-20220410/gcc/gimple-streamer-out.cc:227
0xdc91ad output_function
        ../../gcc-12-20220410/gcc/lto-streamer-out.cc:2453
0xdc91ad lto_output()
        ../../gcc-12-20220410/gcc/lto-streamer-out.cc:2796
0xe57b11 write_lto
        ../../gcc-12-20220410/gcc/passes.cc:2762
0xe57b11 ipa_write_summaries_1
        ../../gcc-12-20220410/gcc/passes.cc:2826
0xe57b11 ipa_write_summaries()
        ../../gcc-12-20220410/gcc/passes.cc:2882
0xaac060 ipa_passes
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2209
0xaac060 symbol_table::compile()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2282
0xaaea77 symbol_table::compile()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2262
0xaaea77 symbol_table::finalize_compilation_unit()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2530</code></pre>
<p>Here the bug is in <strong>stream_out_histogram_value()</strong> function which
tried to stream out on disk perfectly valid profile details around
<strong>main()</strong>:</p>
<pre><code>$ gcov-dump -l a.gcda
...
a.gcda:    01a90000: 528:COUNTERS indirect_call 66 counts
a.gcda:                   0: -50 32 1456173180 1 1792104613 1 918340114 1
a.gcda:                   8: 1406444659 1 263798468 1 1664310260 1 1063174467 1
a.gcda:                  16: 1596551981 1 54847898 1 533075953 1 1135316294 1
a.gcda:                  24: 601636648 1 2142348703 1 450479102 1 1186224457 1
a.gcda:                  32: 416313568 1 1153296983 1 617240633 1 2024260238 1
a.gcda:                  40: 1680162021 1 944285266 1 1480528956 1 72519307 1
a.gcda:                  48: 1631250666 1 1029141085 1 941945699 1 1682532820 1
a.gcda:                  56: 71228346 1 1481851149 1 1154596710 1 414983633 1
a.gcda:                  64: 2026608575 1</code></pre>
<p>The <strong>-50</strong> is our “total” count of indirections. It’s negative because
<strong>25</strong> calls from first run were merged with <strong>25</strong> calls from second call.
Histograms have a limit of <strong>32</strong> unique values. The other 18 were discarded.
Negative count signals this fact.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/value-prof.c;h=42748771192f8302cfe637d23d589848d9b8fcb7;hb=1eee4e08a64f6e931b0c5dd1bb854a2b7ad3d58f#l311">gcc/value-prof.cc:stream_out_histogram_value()</a>
was too strict on it’s assumption around counter types:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode cc"><code class="sourceCode cpp"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>stream_out_histogram_value <span class="op">(</span><span class="kw">struct</span> output_block <span class="op">*</span>ob<span class="op">,</span> histogram_value hist<span class="op">)</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> hist<span class="op">-&gt;</span>n_counters<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* When user uses an unsigned type with a big value, constant converted</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a><span class="co">         to gcov_type (a signed type) can be negative.  */</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">gcov_type</span> value <span class="op">=</span> hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>counters<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>hist<span class="op">-&gt;</span>type <span class="op">==</span> HIST_TYPE_TOPN_VALUES</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a>          <span class="op">||</span> hist<span class="op">-&gt;</span>type <span class="op">==</span> HIST_TYPE_IOR<span class="op">)</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* Note that the IOR counter tracks pointer values and these can have</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="co">           sign bit set.  */</span></span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">;</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a>      <span class="cf">else</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>        gcc_assert <span class="op">(</span>value <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>      streamer_write_gcov_count <span class="op">(</span>ob<span class="op">,</span> value<span class="op">);</span></span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>next<span class="op">)</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>    stream_out_histogram_value <span class="op">(</span>ob<span class="op">,</span> hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>next<span class="op">);</span></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <strong>gcc</strong> asserts that every value in <strong>TOPN</strong> couters has to be non-negative.
Was trivial <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=7b879564ec2bda6b5441fbaf231d70ec6359db01">to fix</a>
by skipping first “total” counter that could be negative on overflows like above:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/value-prof.c</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/value-prof.c</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -336,6 +336,10 @@ stream_out_histogram_value (struct output_block *ob, histogram_value hist)</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>        /* Note that the IOR counter tracks pointer values and these can have</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>           sign bit set.  */</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>        ;</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="va">+      else if (hist-&gt;type == HIST_TYPE_INDIR_CALL &amp;&amp; i == 0)</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a><span class="va">+       /* 'all' counter overflow is stored as a negative value. Individual</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="va">+          counters and values are expected to be non-negative.  */</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a><span class="va">+       ;</span></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>       else</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>        gcc_assert (value &gt;= 0);</span></code></pre></div>
<p>So much behind this three-liner.</p>
<h1 id="final-words">final words</h1>
<p>Profiler bugs are frequently hard. Mechanical reduction on real program
is usually very fragile: most material code changes change both generated
instrumented code and break the program on training run. It’s “infeasible”
to incrementally reduce both program and input data for large projects
like <strong>firefox</strong> or <strong>python</strong>.</p>
<p>I say “infeasible” as I successully reduced
<strong>tauthon</strong> once in <a href="https://gcc.gnu.org/PR96394" class="uri">https://gcc.gnu.org/PR96394</a>. It took me almost 2 months
to extract small reproducer manually. I don’t think I’ll do it ever again :)</p>
<p>First time it was fun: I found a lot more than I imagined about <strong>python</strong>
implementation: how it embeds it’s own bytecode into executable, how bootstrap
python loads the rest of python modules using this bootstrap code.</p>
<p>When faced with another prof failure in <strong>python</strong> in <a href="https://gcc.gnu.org/PR105282" class="uri">https://gcc.gnu.org/PR105282</a>
I initially thought it would be impossible for me to do it again from
scratch. On top of that it added <strong>-flto</strong> to make things even less
manageable. But I was lucky to reproduce the crash and derive the
reproducer out of <strong>gdb</strong> backtrace.</p>
<p><strong>PGO</strong>-style builds have another unusual property: they are very dependent
on input training data and on any internal non-determinism your program
has. For example, if your program uses random-seeded hash tables you
will get slightly different profile outputs from run to run.</p>
<p>Slightly different profile outputs lead to slightly different
optimization decision during compilation. Different decisions lead to
different output binaries. Without special effort you will probably get
unique binary every time you build a real world project with <strong>PGO</strong>
support.</p>
<p>It might not be a big deal with regards to performance of final binary.
But it might be quite a headache if one of such rare states causes
compiler to generate invalid result. It might be very hard to reproduce
(and fix).</p>
<p>But if you have to deal with <strong>PGO</strong> bugs then try to look straight into
what <strong>gcc</strong> is doing.</p>
<p>Have fun!</p>

<div class="info">
    Posted on May  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>gcc-12 journey</title>
    <link href="http://trofi.github.io/posts/242-gcc-12-journey.html" />
    <id>http://trofi.github.io/posts/242-gcc-12-journey.html</id>
    <published>2022-04-24T00:00:00Z</published>
    <updated>2022-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>It’s the end of April. This <a href="https://gcc.gnu.org/releases.html">means</a>
<strong>gcc-12</strong> will likely get released soon.</p>
<p>6 months passed since I wrote about fancy bugs in development versions
of <strong>gcc</strong>. Nowadays I use <a href="https://gcc.gnu.org/pub/gcc/snapshots/LATEST-12/">weekly gcc snapshots</a>
against <strong>nixpkgs</strong> tree. Usually I rebuild just my system against
weekly <strong>gcc</strong> shapshots. But sometimes I build random packages to check
how <strong>gcc</strong> behaves on more exotic code bases. Most of the time
everything Just Works. It would be too boring if things worked all the
time.</p>
<p>Since November 2021 I encountered ~30 <strong>gcc</strong> bugs which
makes it roughly one bug a week. I could hardly handle more than that.</p>
<p>I’ll list most of these bugs below. ICEs (internal compiler errors) are
usually the easiest to find and report. Wrong-code bugs are more
interesting and are also way harder to minimize and report.</p>
<p>I usually get to know a lot more about <strong>gcc</strong> from wrong-code cases.
This time I got only two of them. I’ll start from them.</p>
<h1 id="fipa-modref-strikes-again">-fipa-modref strikes again</h1>
<p><a href="https://gcc.gnu.org/PR103432">ipa/103432</a>: <strong>gcc</strong> miscompiled
<strong>libjxl</strong> in a way that test suite started failing.</p>
<p>I can’t provide a small failure example as the bug requires specific
inline to happen within one compilation.</p>
<p>The effect program result difference when built with <strong>-O0</strong> versus
<strong>-O2</strong>. The test was a floating point workload. Those always have a
potential of being not-a-bug, but an expected precision loss (like
<strong>fma()</strong> precision increase).</p>
<p>It took me a while to reduce original test manually to something that
is still a valid program but is small enough to be able to debug it.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a70faf6e4df7481c2c9a08a06657c20beb3043de">The fix</a>
tells us what kind of error it was in <strong>gcc</strong>: information about inferred
effects of functions was calculated but not actually used, something
else’s ditails were used. It’s a nasty kind of bugs: things work for
smaller programs and break only in non-trivial scenarios.</p>
<p>I’m glad I spent some time to extract the reproducer.</p>
<h1 id="global-constructors-wrong-code">global constructors wrong code</h1>
<p><a href="https://gcc.gnu.org/PR104031">c++/104031</a>: <strong>gcc</strong> generated
wrong global initializer for <strong>nix</strong>. Minimal example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> vector</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  vector<span class="op">(){}</span>  <span class="op">~</span>vector<span class="op">(){}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Info <span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    vector args<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> arity <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> RegisterPrimOp</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">[[</span><span class="ex">gnu::noipa</span><span class="op">,</span><span class="at"> </span><span class="ex">gnu::noinline</span><span class="op">]]</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    RegisterPrimOp<span class="op">(</span>Info info<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>info<span class="op">.</span>arity <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>            <span class="fu">__builtin_trap</span><span class="op">();</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> RegisterPrimOp <span class="va">s_op</span><span class="op">({</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>args <span class="op">=</span> vector<span class="op">{},</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>arity <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{}</span></span></code></pre></div>
<p>The code’s idea is to always have <strong>arity</strong> initialized to <strong>0</strong>. In
practice <strong>gcc-12</strong> managed to put something else into <strong>arity</strong>:</p>
<pre><code># ok:
$ g++-11.2.0 main.cc -o main -O2 &amp;&amp; ./main

# bad:
$ g++-12.0.0 main.cc -o main -O2 &amp;&amp; ./main
Illegal instruction (core dumped)</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=aeca44768d54b089243004d1ef00d34dfa9f6530">The fix</a>
sheds some light into why it happens: this declaration syntax is special
and it was not handled in some definitions. As a result <strong>arity</strong> was
uninitialized.</p>
<h1 id="type-comparison-ice">type comparison ICE</h1>
<p><a href="https://gcc.gnu.org/PR103279">c++/101715</a>: <strong>gcc</strong> ICE
on clang’s <strong>compiler-rt</strong> library. Minimized example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> A<span class="op">&gt;</span> <span class="kw">struct</span> S <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> bar<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">);</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> foo<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">);</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> A<span class="op">&gt;</span> S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> S<span class="op">&lt;</span>A<span class="op">&gt;::</span>foo<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">)</span> <span class="op">{}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 -c a.c.cpp -std=c++14
# no crash

$ g++-12.0.0 -c a.c.cpp -std=c++17
a.c.cpp:6:56: internal compiler error: canonical types differ for identical types 'S&lt;A&gt;&amp; (S&lt;A&gt;::)() noexcept (A::value)' and 'S&lt;A&gt;&amp; (S&lt;A&gt;::)() noexcept (A::value)'
    6 | template &lt;class A&gt; S&lt;A&gt; &amp; S&lt;A&gt;::foo() noexcept(A::value) {}
      |                                                        ^
0xc3f6ee comptypes(tree_node*, tree_node*, int)
        ../../gcc-12-20211226/gcc/cp/typeck.c:1558
...</code></pre>
<p>Note that <strong>-std=c++14</strong> is not enough to trigger the failure. <strong>gcc-11</strong>
did change the default from <strong>gnu++14</strong> to <strong>gnu++17</strong>.</p>
<p>Sometimes <strong>gcc</strong> needs to compare types for equality. That usually
happens in template instantiation when closest specialization is picked.
It might sound easy, but the subtlety is in details: template types can
refer to other (possibly not yet defined) template types in their
definition.</p>
<p>When instantiation happens it’s crucial to resolve identical types into
the same canonical type.</p>
<p>In the <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=3abcbf243239f9576a60f4ce7f8ee4b3fa14784b">commit message</a>
Marek added great explataion how canonical types came into divergence.</p>
<h1 id="null-warnings-in-dynamic_cast-expressions">null warnings in dynamic_cast expressions</h1>
<p><a href="https://gcc.gnu.org/PR96003">c++/96003</a>: <strong>gcc</strong> failed to build
<strong>firefox</strong> (due to <strong>-Werror=null</strong>). Minimized example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>A <span class="op">();</span> <span class="op">};</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>B <span class="op">();</span> <span class="dt">void</span> f <span class="op">();</span> <span class="op">};</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f <span class="op">(</span>A <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span><span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">))</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">)-&gt;</span>f <span class="op">();</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Build error:</p>
<pre><code>$ gcc -O2 -S -Wall t.C
t.C: In function ‘void f(A*)’:
t.C:7:29: warning: ‘this’ pointer is null [-Wnonnull]
    7 |     dynamic_cast&lt;B*&gt;(p)-&gt;f ();
      |                             ^
t.C:2:32: note: in a call to non-static member function ‘void B::f()’
    2 | struct B { virtual ~B (); void f (); };
      |                                ^</code></pre>
<p>This time it’s not an <strong>ICE</strong> but a seemingly reasonable warning.
Ideally original code should be restructured into something simpler, like:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>A <span class="op">();</span> <span class="op">};</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>B <span class="op">();</span> <span class="dt">void</span> f <span class="op">();</span> <span class="op">};</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f <span class="op">(</span>A <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    B <span class="op">*</span> b <span class="op">=</span> <span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">);</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>b<span class="op">)</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        b<span class="op">-&gt;</span>f <span class="op">();</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=df5cf47a978aaeb53fc2b18ff0b22eb4531a27d8">The fix</a>
suppressed warnings for some cases where similar code is generated by
<strong>gcc</strong> itself (instead of being handwritten). More complicated cases
will still issue warnings.</p>
<p>You might need to clean your code up to avoid similar warnings.</p>
<h1 id="vectored-intrinsics-ice">vectored intrinsics ICE</h1>
<p><a href="https://gcc.gnu.org/PR102080">middle-end/102080</a>: <strong>gcc</strong> ICE
on <strong>firefox</strong> build. Minimized example:</p>
<pre class="c+++"><code>// cat dec_reconstruct.cc.cc
#pragma GCC target &quot;avx&quot;
typedef float __m256 __attribute__((__vector_size__(32)));
__m256 _mm256_blendv_ps___Y, _mm256_blendv_ps___M, _mm256_mul_ps___A,
    _mm256_mul_ps___B, IfThenElse___trans_tmp_9;
void IfThenElse(__m256 no) {
  IfThenElse___trans_tmp_9 = __builtin_ia32_blendvps256(
      no, _mm256_blendv_ps___Y, _mm256_blendv_ps___M);
}
#pragma GCC target &quot;avx512vl&quot;
void EncodedFromDisplay() {
  __m256 __trans_tmp_11 = _mm256_mul_ps___A * _mm256_mul_ps___B;
  IfThenElse(__trans_tmp_11);
}</code></pre>
<p>ICE:</p>
<pre><code>$ /tmp/gcc-c/gcc/xg++ -B/tmp/gcc-c/gcc -c dec_reconstruct.cc.cc -O0
# no crash

$ /tmp/gcc-c/gcc/xg++ -B/tmp/gcc-c/gcc -c dec_reconstruct.cc.cc -O2
during RTL pass: expand
dec_reconstruct.cc.cc: In function 'void EncodedFromDisplay()':
dec_reconstruct.cc.cc:10:6: internal compiler error: in expand_insn, at optabs.c:7946
   10 | void EncodedFromDisplay() {
      |      ^~~~~~~~~~~~~~~~~~</code></pre>
<p>The sample is not very readable but it’s essentially a direct call of
<strong>__builtin_ia32_blendvps256()</strong> <strong>AVX</strong> intrinsic. Those usually get
translated 1-to-1 into CPU instructions.</p>
<p>Here the crash happens in <strong>expand_insn()</strong> where middle end expands
<strong>GIMPLE</strong> (C style tree-like representation) into <strong>RTL</strong> (assembly style
instruction-like representation). Assertion complains about unexpected
arguments.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a26ff83ed07e33c4aa46f3314553c0d15ca21100">The fix</a>
adjusts one of <strong>GIMPLE</strong> simplifiers to not generate invalid <strong>GIMPLE</strong>
around vectored conditionals.</p>
<h1 id="atomics-intrinsics-ice">atomics intrinsics ICE</h1>
<p><a href="https://gcc.gnu.org/PR103268">tree-optimization/103268</a>: <strong>gcc</strong> ICE
on <strong>glib</strong> build. Minimized example:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> si<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>test_types <span class="op">(</span><span class="dt">long</span> n<span class="op">)</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> <span class="dt">int</span> u2 <span class="op">=</span> __atomic_fetch_xor <span class="op">(&amp;</span>si<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">5</span><span class="op">);</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> u2<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ gcc -O2 -S x.c
during GIMPLE pass: fab
x.c: In function ‘test_types’:
x.c:3:1: internal compiler error: in optimize_atomic_bit_test_and, at tree-ssa-ccp.c:3645
    3 | test_types (long n)
      | ^~~~~~~~~~
0x1515c9d optimize_atomic_bit_test_and
    /export/gnu/import/git/gitlab/x86-gcc/gcc/tree-ssa-ccp.c:3645</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=074ee8d9a91d7573c1e8774a22e4e08f923adb18">The fix</a>
suggests the tree matcher had an accident fall-through code.
It was supposed to reject unhandled cases instead of attempting
to generate something nonsensical.</p>
<h1 id="vectored-instructions-selector-ice">vectored instructions selector ICE</h1>
<p><a href="https://gcc.gnu.org/PR103557">target/103557</a>: <strong>gcc</strong> ICE
on <strong>tpm2-tss</strong> build. Minimized example:</p>
<pre><code>struct {
  char sm3_256[32];
} TPMU_HA;
typedef struct {
  short size;
  char buffer[sizeof(TPMU_HA)];
} TPM2B_DIGEST;
typedef struct {
  TPM2B_DIGEST auths[3];
} TSS2L_SYS_AUTH_COMMAND;

void Tss2_Sys_Clear(TSS2L_SYS_AUTH_COMMAND);

void sysContext(void) {
  TPM2B_DIGEST nonce = {};
  TSS2L_SYS_AUTH_COMMAND sessionsDataIn = {{nonce}};
  Tss2_Sys_Clear(sessionsDataIn);
}</code></pre>
<p>ICE:</p>
<pre><code>$ gcc-12.0.0 -O2  -c a.c.c -o a.o
during RTL pass: sched2
a.c.c: In function 'sysContext':
a.c.c:19:1: internal compiler error: Segmentation fault
   19 | }
      | ^
0x1e22687 internal_error(char const*, ...)
        ???:0
0xe7e43c memory_operand(rtx_def*, machine_mode)
        ???:0
0x167e598 get_attr_memory(rtx_insn*)
        ???:0
0x19a4bc0 insn_default_latency_generic(rtx_insn*)
        ???:0
0x1c74ad3 insn_sched_cost(rtx_insn*)
        ???:0
0x1c77934 dep_cost_1(_dep*, unsigned int)
        ???:0
0x1c79d7f set_priorities(rtx_insn*, rtx_insn*)
        ???:0
0xec28e2 compute_priorities()
        ???:0</code></pre>
<p>In this case instruction selector fails to fetch the details
around memory reference accessed by instruction.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc">The change</a>
fixes <strong>x86</strong>-specific vectored instruction definitions to accept
expected inputs.</p>
<h1 id="another-atomics-ice">another atomics ICE</h1>
<p><a href="https://gcc.gnu.org/PR103682">tree-optimization/103682</a>: <strong>gcc</strong> ICE
on some cryptographic code. Minimized example:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;atomic&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> bug<span class="op">(</span><span class="bu">std::</span>atomic<span class="op">&lt;</span><span class="dt">unsigned</span><span class="op">&gt;</span> <span class="op">&amp;</span> ready<span class="op">,</span> <span class="dt">unsigned</span> u<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">(</span>ready<span class="op">.</span>fetch_and<span class="op">(~</span>u<span class="op">)</span> <span class="op">&amp;</span> u<span class="op">);</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 -Ofast -c bug.cpp
during GIMPLE pass: fab
bug.cpp: In function 'bool bug(std::atomic&lt;unsigned int&gt;&amp;, unsigned int)':
bug.cpp:6:6: internal compiler error: gimple check: expected gimple_assign(error_mark), have gimple_nop() in gimple_assign_rhs_code, at gimple.h:2852
    6 | bool bug(std::atomic&lt;unsigned&gt; &amp; ready, unsigned u) {
      |      ^~~
0x20a58f7 internal_error(char const*, ...)
        ???:0
0x7c76dd gimple_check_failed(gimple const*, char const*, int, char const*, gimple_code, tree_code)
        ???:0</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a2a0c91b47537b16908981e206f4e42db8425eca">The fix</a>
shows us it was another case where one particular case of <strong>GIMPLE</strong>
form was not handled.</p>
<h1 id="another-template-instantiation-ice">another template instantiation ICE</h1>
<p><a href="https://gcc.gnu.org/PR103769">c++/103769</a>: <strong>gcc</strong> ICE
on <strong>openttd</strong>. Minimized example:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">&gt;</span> <span class="kw">using</span> t <span class="op">=</span> T<span class="op">;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">...&gt;</span> <span class="kw">struct</span> s<span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">...</span> Args<span class="op">&gt;</span> s<span class="op">&lt;</span>t<span class="op">&lt;</span>Args<span class="op">&gt;...&gt;</span> f<span class="op">()</span> <span class="op">{</span> f<span class="op">&lt;</span><span class="dt">void</span><span class="op">&gt;();</span> <span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 --param=hash-table-verification-limit=1000 -O1 -o a.o -c bug.cpp

hash table checking failed: equal operator returns true for a pair of values with a different hash value
bug.cpp: In substitution of 'template&lt;class ... Args&gt; s&lt;Args ...&gt; f() [with Args = {void}]':
bug.cpp:3:56:   required from here
bug.cpp:3:43: internal compiler error: in hashtab_chk_error, at hash-table.c:137
    3 | template &lt;typename... Args&gt; s&lt;t&lt;Args&gt;...&gt; f() { f&lt;void&gt;(); }
      |                                           ^
0x9c316d hashtab_chk_error()
        ../../gcc-12-20220102/gcc/hash-table.c:137
0xbeca15 hash_table&lt;spec_hasher, false, xcallocator&gt;::verify(spec_entry* const&amp;, unsigned int)
        ../../gcc-12-20220102/gcc/hash-table.h:1036
0xbecb6f hash_table&lt;spec_hasher, false, xcallocator&gt;::find_with_hash(spec_entry* const&amp;, unsigned int)
        ../../gcc-12-20220102/gcc/hash-table.h:921
0xbd58bc lookup_template_class_1
        ../../gcc-12-20220102/gcc/cp/pt.c:9905</code></pre>
<p>This is aanother <strong>c++</strong> frontend bug where identical types have
different objects. Here I found out about <strong>--param=hash-table-verification-limit=1000</strong>
option which enables more frequent type mismatches like this.
Without this option the bug disappears when program is still large.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=07be8f8da4c6840a1fd6b2229b147e50cc6f03dc">The change</a>
shows it was a case of reused type object in typedef simplification.</p>
<h1 id="yet-another-vectored-expansion-ice">yet another vectored expansion ICE</h1>
<p><a href="https://gcc.gnu.org/PR103842">target/103842</a>: <strong>gcc</strong> ICE
on <strong>ilmbase-2.5.7</strong>. Minimized example:</p>
<pre><code>void abs(float *);
struct Matrix33 {
  float x[3][3];
  float *operator[](int i) { return x[i]; }
  Matrix33();
  Matrix33(float f, float g) {
    x[1][0] = x[1][1] = x[1][2] = f;
    x[2][0] = g;
  }
  void equalWithAbsError();
  Matrix33 inverse() {
    Matrix33 s(x[1][2] - x[1][2], x[1][1] - x[1][1]);
    float r = s[2][0];
    if (r)
      for (int i = 0; i &lt; 3; ++i)
        for (int j = 0; j &lt; 3; ++j)
          s[i][j] /= r;
    for (int i = 0;;) {
      float *__trans_tmp_2 = s[i];
      abs(__trans_tmp_2);
    }
  }
};
void __assert_fail() {
  Matrix33 m, inv1 = m.inverse(), ident1 = inv1;
  ident1.equalWithAbsError();
}</code></pre>
<p>ICE:</p>
<pre><code>
$ g++-12.0.0 -O3 -c bug.cpp.cpp
during RTL pass: expand
bug.cpp.cpp: In function 'void __assert_fail()':
bug.cpp.cpp:27:5: internal compiler error: Segmentation fault
   27 |     }
      |     ^
0x21196c6 internal_error(char const*, ...)
        ???:0</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=242783c52c22ed96eae722b2fa9847711ac84699">The change</a>
fixes another case of <strong>x86</strong>-specific instruction selector that
generates unexpected instruction parameters.</p>
<h1 id="one-more-vectored-instruction-ice">one more vectored instruction ICE</h1>
<p><a href="https://gcc.gnu.org/PR103894">target/103894</a>: <strong>gcc</strong> ICE
on <strong>valgrind</strong>.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=1096ab1775636f35de9c6661f8f71f03299af998">The change</a>
fixes marking of available SSE instructions in 32-bit mode.</p>
<h1 id="precompiled-headers">precompiled headers</h1>
<p><a href="https://gcc.gnu.org/PR103910">target/103910</a>: <strong>gcc</strong> ICE
on <strong>openjdk</strong>. Minimized example:</p>
<pre><code>#include &quot;precompiled.hpp&quot;
void *operator new(unsigned long, void *__p) { return __p; }
#define MEMORY_TYPES_DO(f) f(mtNone, )
enum MEMFLAGS {};
#define MEMORY_TYPE_SHORTNAME(type, human_readable) MEMFLAGS type;
MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME) struct GrowableArrayView {
  GrowableArrayView(int *, int, int);
};
int *GrowableArrayWithAllocator_data;
struct GrowableArrayWithAllocator : GrowableArrayView {
  GrowableArrayWithAllocator(int initial_max)
      : GrowableArrayView(GrowableArrayWithAllocator_data, initial_max, 0) {
    for (int i = 0; i &lt; initial_max; i++)
      new (&amp;GrowableArrayWithAllocator_data[i]) int();
  }
};
struct GrowableArrayMetadata {
  GrowableArrayMetadata(MEMFLAGS);
};
struct GrowableArray : GrowableArrayWithAllocator {
  GrowableArrayMetadata _metadata;
  GrowableArray(int initial_max)
      : GrowableArrayWithAllocator(initial_max), _metadata(mtNone) {}
};
struct SourceObjList {
  SourceObjList();
};
SourceObjList::SourceObjList() { GrowableArray(128 * 1024); }</code></pre>
<p>ICE:</p>
<pre><code>$ rm -rf ph
$ mkdir -p ph
$ touch precompiled_.hpp # create empty file
$ ./xg++ -B. -O3 -march=opteron -fcheck-new -c precompiled_.hpp -o ph/precompiled.hpp.gch
$ ./xg++ -B. -O3 -march=opteron -fcheck-new -Iph -c archiveBuilder.cpp -o a.o

during GIMPLE pass: aprefetch
archiveBuilder.cpp: In constructor ‘SourceObjList::SourceObjList()’:
archiveBuilder.cpp:28:1: internal compiler error: in gimple_build_call, at gimple.c:267
   28 | SourceObjList::SourceObjList() { GrowableArray(128 * 1024); }
      | ^~~~~~~~~~~~~
0xd2845f gimple_build_call(tree_node*, unsigned int, ...)
        gcc/gimple.c:267
0x12880c8 emit_mfence_after_loop
        gcc/tree-ssa-loop-prefetch.c:1300
0x12880c8 mark_nontemporal_stores
        gcc/tree-ssa-loop-prefetch.c:1359
0x12880c8 loop_prefetch_arrays
        gcc/tree-ssa-loop-prefetch.c:1955
0x12880c8 tree_ssa_prefetch_arrays()
        gcc/tree-ssa-loop-prefetch.c:2031
0x1288be9 execute
        gcc/tree-ssa-loop-prefetch.c:2097</code></pre>
<p>This is an unusual and scary case: precompiled headers are implemented
as a serialization of part of <strong>gcc</strong> heap. The serialization tries
hard to be very fast and cuts corners in various places. Up to the point
where building positional-independent <strong>gcc</strong> binary breaks <strong>GCH</strong>:
<a href="https://gcc.gnu.org/PR71934" class="uri">https://gcc.gnu.org/PR71934</a>. It’s very fragile. It does not have to be.</p>
<p>To make <strong>GCH</strong> somehow work <strong>gcc</strong>’s internals have garbage collector
implementation. It requires global variables to be annotated with
<strong>gcc</strong>-specific <a href="https://gcc.gnu.org/onlinedocs//gccint/GTY-Options.html">GTY markings</a>
that describe heap layout.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=d243f4009d8071b734df16cd70f4c5d09a373769">The change</a>
hints at an <strong>x86_mfence</strong> global variable that did not have the marking.</p>
<p>Why did it break only with <strong>GCH</strong>?</p>
<p>Without <strong>GCH</strong>, <strong>x86_mfence</strong> is referenced via another global object which
has <strong>GTY</strong> marking. Both are constructed via normal means of <strong>gcc</strong>
parsing the source.</p>
<p>With GCH, that another global object is restored at a different location
and the decl that is refenced by <strong>x86_mfence</strong> is GC’ed out.</p>
<h1 id="c-frontend-constructor-ice">C++ frontend constructor ICE</h1>
<p><a href="https://gcc.gnu.org/PR104583">c++/103910</a>: <strong>gcc</strong> ICE
on <strong>dolphin-emu</strong>. Minimized example:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> TVec3 <span class="op">{</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>  TVec3<span class="op">();</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> data<span class="op">;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>using Vec3 <span class="op">=</span> TVec3<span class="op">;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>  Vec3 position<span class="op">{};</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> EmulatePoint_state<span class="op">;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> EmulatePoint<span class="op">()</span> <span class="op">{</span> EmulatePoint_state <span class="op">=</span> <span class="op">{};</span> <span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/gcc/xg++ -B/tmp/gcc -c bug.cc -freport-bug
bug.cc: In function ‘void EmulatePoint()’:
bug.cc:9:42: internal compiler error: in cp_gimplify_expr, at cp/cp-gimplify.cc:746
    9 | void EmulatePoint() { EmulatePoint_state = {}; }
      |                       ~~~~~~~~~~~~~~~~~~~^~~~
0x7a0fb2 cp_gimplify_expr(tree_node**, gimple**, gimple**)
        gcc/cp/cp-gimplify.cc:746
0xd9fb80 gimplify_expr(tree_node**, gimple**, gimple**, bool (*)(tree_node*), int)
        gcc/gimplify.cc:14893
0xdab095 gimplify_init_ctor_preeval
        gcc/gimplify.cc:4678</code></pre>
<p>In this case <strong>gcc</strong> was unable to generate <strong>GIMPLE</strong> out of
<strong>EmulatePoint_state = {};</strong> statement.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb">The change</a>
expands set of cases that look like a constructor call.</p>
<h1 id="fun-option-handling-bug">fun option handling bug</h1>
<p><a href="https://gcc.gnu.org/PR104705">middle-end/104705</a>: <strong>gcc</strong> ICEs when
tried to build <strong>ghc</strong>.</p>
<p>Normally I would expect <strong>ghc</strong> to be the last project to crash <strong>gcc</strong>
as it does not do anything fancy in C land. And yet here we are.
Minimized example:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC optimize &quot;foo&quot;</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC push_options</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC pop_options</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/bg/gcc/xgcc -B/tmp/bg/gcc -c a.c  -O2 -Wall
a.c:1:9: warning: bad option ‘-ffoo’ to pragma ‘optimize’ [-Wpragmas]
    1 | #pragma GCC optimize &quot;foo&quot;
      |         ^~~
a.c:3:9: internal compiler error: ‘global_options’ are modified in local context
    3 | #pragma GCC pop_options
      |         ^~~</code></pre>
<p>A cryptic assert.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=111754595cf8d3a8ae7063a42ac4cea18a304711">The fix</a>
says that <strong>-g*</strong> option was not accounted for when option contexts are
created and destroyed with pragmas.</p>
<h1 id="unexpected-analyzer-ices">unexpected analyzer ICEs</h1>
<p><a href="https://gcc.gnu.org/PR105074">analyzer/105074</a>: <strong>gcc</strong> ICE when
tried to build <strong>gnutls</strong>.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> _gnutls_log<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*);</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> _gnutls_ocsp_verify_mandatory_stapling<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>  _gnutls_log<span class="op">(</span>__func__<span class="op">);</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> check_ocsp_response_gnutls_x509_cert_verify_peers<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>  _gnutls_ocsp_verify_mandatory_stapling<span class="op">();</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/gb/gcc/xgcc -B/tmp/gb/gcc -O2 -fanalyzer -c cert-session.c

during IPA pass: analyzer
In function ‘_gnutls_ocsp_verify_mandatory_stapling’,
    inlined from ‘check_ocsp_response_gnutls_x509_cert_verify_peers’ at cert-session.c:7:3:
cert-session.c:4:3: internal compiler error: Segmentation fault
    4 |   _gnutls_log(__func__);
      |   ^~~~~~~~~~~~~~~~~~~~~
0xdd6bc3 crash_signal
        gcc/toplev.cc:322
0x8a8120 cgraph_node::get_edge(gimple*)
        gcc/cgraph.cc:744
0x121059c ipa_ref_requires_tracking
        gcc/analyzer/region.cc:1192
0x121059c symnode_requires_tracking_p
        gcc/analyzer/region.cc:1235
0x121059c ana::decl_region::calc_tracked_p(tree_node*)
        gcc/analyzer/region.cc:1254
0x1234786 ana::decl_region::decl_region(unsigned int, ana::region const*, tree_node*)</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=1203e8f7880c9751ece5f5302e413b20f4608a00">The change</a>
adjusts the checks for expressions without explicit declaration.</p>
<p>On a surface side it’s an obscure <strong>-fanalyzer</strong> crash on <strong><strong>func</strong></strong>
expression that should not pop up frequently. Perhaps <strong>gnutls</strong> is a
rare package that enables <strong>-fanalyser</strong>?</p>
<p>No. If we look at the source of <strong>-fanalyzer</strong> flag we’ll find that it’s
one of default warnings of … <a href="https://git.savannah.gnu.org/cgit/gnulib.git/commit/?id=3831e2e9f355c557b0c0ed9712548b62feaf694f"><strong>gnulib(!)</strong></a>.</p>
<p>We will probably see a lot more analyser crashes as it’s one of the
more complex pieces of <strong>gcc</strong>.</p>
<h1 id="ia64-rtl-mach-ice">ia64 RTL mach ICE</h1>
<p><a href="https://gcc.gnu.org/PR105215">target/105215</a>: <strong>gcc</strong> ICE
on <strong>openssl</strong> (<strong>ia64</strong> target).</p>
<p>Not fixed yet.</p>
<h1 id="ia64-rtl-mach-ice-1">ia64 RTL mach ICE</h1>
<p><a href="https://gcc.gnu.org/PR105247">target/105247</a>: <strong>gcc</strong> ICE
on <strong>sqlite-3.38.2</strong> (<strong>ia64</strong> target). Minimal example:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> sqlite3CodeVerifySchemaAtToplevel_pToplevel_0<span class="op">;</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3CodeVerifySchema<span class="op">();</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3FindInIndex_pParse<span class="op">()</span> <span class="op">{</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> i <span class="op">=</span> <span class="op">-</span><span class="dv">8</span><span class="op">;</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>  sqlite3CodeVerifySchema<span class="op">(</span>sqlite3FindInIndex_pParse<span class="op">,</span> i<span class="op">);</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3CodeVerifySchema<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span> iDb<span class="op">)</span> <span class="op">{</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>  sqlite3CodeVerifySchemaAtToplevel_pToplevel_0 <span class="op">|=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> iDb<span class="op">;</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ ia64-unknown-linux-gnu-gcc -O1 -c sqlite3-sqlite3.o.c -o a.o

during RTL pass: cse1
sqlite3-sqlite3.o.c: In function 'sqlite3FindInIndex_pParse':
sqlite3-sqlite3.o.c:7:1: internal compiler error: in decompose, at rtl.h:2288
    7 | }
      | ^
0xa02263 wi::int_traits&lt;&gt;::decompose()
        ../../gcc-12-20220410/gcc/rtl.h:2288
0xa02263 wide_int_ref_storage&lt;&gt;::wide_int_ref_storage&lt;&gt;()
        ../../gcc-12-20220410/gcc/wide-int.h:1024
0xa02263 generic_wide_int&lt;&gt;::generic_wide_int&lt;&gt;()
        ../../gcc-12-20220410/gcc/wide-int.h:782
0xa02263 wide_int_storage::wide_int_storage&lt;&gt;()</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=ba2f60499dd4a3bc1bb4e99fa12dda3bc1548519">The change</a>
has a great explanation of the details by Jakub: arithmetic shift
(to implement <strong>1 &lt;&lt; iDb</strong>) on <strong>ia64</strong> is slightly different from
other targets: it’s defined only for 64-bit type (<strong>long</strong> /
<strong>unsigned ulong</strong> types).</p>
<h1 id="popcount-and-libgcc">popcount and libgcc</h1>
<p><a href="https://gcc.gnu.org/PR105253">middle-end/105253</a>: <strong>gcc</strong> fails
to build <strong>linux</strong>. Minimal example:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>foo <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> i<span class="op">,</span> cnt <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> elem<span class="op">;</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span><span class="dv">256</span> <span class="op">/</span> <span class="dv">64</span><span class="op">);</span> i<span class="op">++)</span></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>      elem <span class="op">=</span> p<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(;</span> elem<span class="op">;</span> cnt<span class="op">++)</span></span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a>        elem <span class="op">&amp;=</span> elem <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> cnt<span class="op">;</span></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Link error:</p>
<pre><code>ERROR: modpost: &quot;__popcountdi2&quot; [drivers/net/ethernet/broadcom/bnx2x/bnx2x.ko] undefined!
ERROR: modpost: &quot;__popcountdi2&quot; [drivers/gpu/drm/amd/amdgpu/amdgpu.ko] undefined!</code></pre>
<p>Long time ago <strong>gcc</strong> used to produce direct CPU instructions to
implement this code. Nowadays <strong>gcc</strong> recognises this pattern
and converts it to a <strong>__builtin_popcountl()</strong> call.</p>
<p>If CPU supports <strong>popcnt</strong> instruction then <strong>gcc</strong> emits it as is.
But if CPU has no support for it <strong>gcc</strong> generates <strong>__popcountdi2</strong>
external function call. <strong>__popcountdi2</strong> is implemented in <strong>libgcc</strong>
for all targets.</p>
<p>Normally such a replacement just works. But linux kernel does not use <strong>libgcc</strong> for
various rasons and prefers to re-implement such builtins (division,
shifts, memcpy, strlen operations). But <strong>popcout</strong> ones did not
occur frequently enough to be re-implemented in kernel.</p>
<p>One of the fixes would be to extend linux kernel with <strong>popcount</strong>.
But so far <strong>gcc</strong>
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=29c46490de4616b911fccb34a9479f768fb51e94">tweaked</a>
cost heuristics to avoid such conversion for targets that don’t have
efficient <strong>popcnt</strong>.</p>
<p>Until next time perhaps :)</p>
<h1 id="parting-words">Parting words</h1>
<p>Most of these bugs are short-lived and would have no chance to slip
into a release. Most ICEs are also not hard to workaround when
encountered.</p>
<p>The wrong-code bugs are the subtlest. These usually live for a while
until they get noticed.</p>
<p>Bug stats by subsystem:</p>
<ul>
<li>6 <strong>target</strong>: 3 vectorisation bugs, 2 <strong>ia64</strong> bugs, 1 <strong>GCH</strong> bug</li>
<li>5 <strong>c++</strong> frontend</li>
<li>3 <strong>middle-end</strong>: vectorisation, option parsing and popcount instruction one bug each</li>
<li>2 <strong>tree-opt</strong>: both are atomics bugs</li>
<li>1 <strong>ipa</strong></li>
<li>1 <strong>analyzer</strong></li>
</ul>
<p>If not for <strong>ia64</strong> bugs <strong>c++</strong> would be the primary source of bugs.</p>
<p><strong>gcc-12</strong> is very close to a release cut date. I hope it to be smooth.</p>
<p>As usual here is a list if notable changes for upcoming release:
<a href="https://gcc.gnu.org/gcc-12/changes.html" class="uri">https://gcc.gnu.org/gcc-12/changes.html</a></p>
<p>If you feel like it do give the <strong>gcc</strong> snapshot a try.</p>
<p>Have fun!</p>

<div class="info">
    Posted on April 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nix gc speedup improvements</title>
    <link href="http://trofi.github.io/posts/241-nix-gc-speedup-improvements.html" />
    <id>http://trofi.github.io/posts/241-nix-gc-speedup-improvements.html</id>
    <published>2022-04-04T00:00:00Z</published>
    <updated>2022-04-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I wondered the other day: why my <strong>nix store gc</strong> takes an hour to run
on a system with a few terabytes of garbage packages to clean up. Is it
a typical time or could something be optimised to make it slightly
faster?</p>
<p>I ran <strong>top</strong> while <strong>nix store gc</strong> was churning and noticed it was a
CPU-bound task. That was unusual.</p>
<h1 id="background">Background</h1>
<p><strong>nix</strong> package manager never changes files inplace when it installs new
packages into <strong>/nix/store</strong>. This makes installation and uninstallation
operations cheap: no need for <strong>sync()</strong>-style calls or file locks.</p>
<p>Single package installation could be viewed as 2 steps:</p>
<ol type="1">
<li>unpack new package to <strong>/nix/store/…-package-version</strong> (if it does
not already exist)</li>
<li>refer to unpacked files (usually via symlinks, via
scripts, configs or embedded binary)</li>
</ol>
<p>Uninstallation is just one step of undoing “[2.]”:</p>
<ol type="1">
<li>stop referring to the package (by creating a new closure of needed packages)</li>
</ol>
<p>This procedure does not require any file or directory removal.
On <strong>NixOS</strong> it’s a matter of updating a single <strong>/run/current-system</strong>
symlink.</p>
<p>As a result over normal lifetime the system accumulates unreferenced
packages as files and directories in <strong>/nix/store/</strong>. If you have enough
storage you can completely ignore these unreferenced files.</p>
<p>But sometimes it’s useful to delete unreferenced data to free up some
space or to check that there are no missing references in current package
closure. Such cleaning is done with <strong>nix-collect-garbage</strong>
(or <strong>nix store gc</strong>). Or their lower level sibling
<strong>nix-store --delete …</strong> (or <strong>nix store delete …</strong>).</p>
<h1 id="actual-gc-speed">Actual GC speed</h1>
<p>All the above sounds nice, but how fast that garbage collection is in
practice? Should it take 1 second, 1 minute or 1 hour on an average
system? On a heavily cluttered system?</p>
<p>Let’s find out! I have 2 systems:</p>
<ol type="1">
<li><p><strong>i7</strong> host: <strong>HDD</strong>-based 10+ years old web server with daily updates
which never saw a garbage collection run. It’s whole <strong>/nix/store</strong>
is 26GB.</p></li>
<li><p><strong>nz</strong> host: <strong>NVMe</strong>-based 1 year old desktop where I build A Lot of
packages daily and run garbage collection once a month. It’s whole
<strong>/nix/store</strong> is <strong>380GB</strong>.</p></li>
</ol>
<p><strong>i7</strong> dry run:</p>
<pre><code>$ time nix store gc --dry-run

real 3m18.522s
...</code></pre>
<p>~200 seconds. Is it a lot? The process touches no disk. According to
<strong>top</strong> it’s a CPU-bound problem. What does it do? Runnig
<strong>perf top -p $pid</strong> shows the following:</p>
<pre><code>$ sudo perf top -p 6217
&lt;wait 5 seconds&gt;
   6.82%  libstdc++.so.6.0.28  [.] std::istream::get
   6.12%  libc-2.33.so         [.] __memcmp_sse4_1
   4.51%  libcrypto.so.1.1     [.] sha256_block_data_order_avx
   4.18%  libstdc++.so.6.0.28  [.] std::istream::sentry::sentry
   3.91%  libnixstore.so       [.] nix::parseString
   2.73%  libc-2.33.so         [.] malloc
   2.55%  libsqlite3.so.0.8.6  [.] sqlite3VdbeExec
   2.31%  [kernel]             [k] syscall_exit_to_user_mode</code></pre>
<p>Looks like some string parsing and <strong>sqlite3</strong> reading. Could be
optimised a bit around that strange <strong>std::istream::get</strong> but
otherwise looks reasonable. Not exactly an interactive latency,
but not too bad if ran infrequently. Maybe there is just a lot
to do in this case?</p>
<p><strong>nz</strong> run:</p>
<pre><code>$ time nix store gc --dry-run

real    28m24,295s
...</code></pre>
<p>~1800 seconds. Almost half an hour! That is already way outside
interactive use of the tool. But maybe it’s fine for a system
with large amount of clutter? Let’s find out!</p>
<p>Checking for profile picture:</p>
<pre><code>$ sudo perf top -p 2531652
&lt;wait 5 seconds&gt;
  10,15%  libstdc++.so.6.0.28  [.] std::istream::get
   5,42%  libstdc++.so.6.0.28  [.] std::istream::sentry::sentry
   5,16%  libc-2.33.so         [.] __memcmp_avx2_movbe
   4,14%  [kernel]             [k] copy_user_enhanced_fast_string
   3,90%  libc-2.33.so         [.] _int_malloc
   3,03%  libc-2.33.so         [.] malloc
   2,38%  libnixstore.so       [.] nix::parseString
   2,30%  libsqlite3.so.0.8.6  [.] sqlite3VdbeExec</code></pre>
<p>The profile is very close to <strong>i7</strong> one: same <strong>std::istream::get</strong>
at the top and a <strong>memcmp()</strong> implementation that follows.</p>
<h1 id="the-first-attempt">The first attempt</h1>
<p>Profile clearly tells us that <strong>istream</strong> related parsing is the
bottleneck.</p>
<p>Quick quiz: does it?</p>
<p>The parser is supposed to extract <strong>/nix/store</strong> references out of
<strong>.drv</strong> files which usually look like the example below:</p>
<pre><code>$ nix show-derivation /nix/store/6xcvz9zp757knf005g4q1p451p6wslpk-ninja-1.10.2.drv

{
  &quot;/nix/store/6xcvz9zp757knf005g4q1p451p6wslpk-ninja-1.10.2.drv&quot;: {
    &quot;outputs&quot;: {
      &quot;out&quot;: {
        &quot;hashAlgo&quot;: &quot;r:sha256&quot;
      }
    },
    &quot;inputSrcs&quot;: [
      &quot;/nix/store/27axb57ya2ddmaa9m5fv700ww65z5hcd-docbook-xml-4.5&quot;,
      &quot;/nix/store/2wald1adsn6bxzmvypzjk5z2zk9dlgwh-stdenv-linux&quot;,
      &quot;/nix/store/34v3hflhcklq44jigh2banjwkcyqjc5k-python3-3.9.9&quot;,
      &quot;/nix/store/7z1wzf51i7jxi9nl2dg3yqmsfb70s4fm-docbook-xsl-nons-1.79.2&quot;,
      &quot;/nix/store/8m2rhn4jgz0bj52m7fx53jbj9qiswy6q-re2c-2.2&quot;,
      &quot;/nix/store/8x4aqaqaiyylvcpnhn1phypkb4n6ady0-source&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;,
      &quot;/nix/store/mcm0l38vgh9l24dgl94gj4hjvxp91g8j-libxslt-1.1.34-bin&quot;,
      &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12&quot;,
      &quot;/nix/store/y9yz15h8mlpggmr3jidjdhjpddsx7d25-setup-hook.sh&quot;,
      &quot;/nix/store/yyaxnsqm849wwi901m6g7nbi1hqy7vsp-asciidoc-9.1.0&quot;
    ],
    &quot;inputDrvs&quot;: {},
    &quot;system&quot;: &quot;x86_64-linux&quot;,
    &quot;builder&quot;: &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12/bin/bash&quot;,
    &quot;args&quot;: [
      &quot;-e&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;
    ],
    &quot;env&quot;: {
      &quot;buildInputs&quot;: &quot;&quot;,
      &quot;buildPhase&quot;: &quot;python configure.py --bootstrap\n# \&quot;./ninja -vn manual\&quot; output copied here to support cross compilation.\nasciidoc -b docbook -d book -o build/manual.xml doc/manual.asciidoc\nxsltproc --nonet doc/docbook.xsl build/manual.xml &gt; doc/manual.html\n&quot;,
      &quot;builder&quot;: &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12/bin/bash&quot;,
...</code></pre>
<p>Here <strong>inputDrvs</strong>, <strong>inputSrcs</strong> and some <strong>env</strong> references are
interesting edges for garbage collector. But some are possibly not
(like build-only <strong>env.builder</strong>).</p>
<p>The parsing format looked trivial and I tried a quick hack to
substitute <strong>istream</strong> for a manual parser in <a href="https://github.com/NixOS/nix/pull/6266" class="uri">https://github.com/NixOS/nix/pull/6266</a>.</p>
<p>This gave a 25% speedup (7 minutes faster on <strong>nz</strong>). Sounds like a
lot for a simple 80-line change.</p>
<p>But Eelco did not see any speedup improvement on his system. Moreover
Eelso’s GC times were ridiculously short: 17 seconds instead of minutes.</p>
<p>That made me think: what is parser’s parse speed if I see so large
an improvement? My system has to parse A Lot of <strong>.drv</strong> files to make
it measurable.</p>
<p>To put the example into some abstract numbers:
if parse speed is even as low as 100MB/s then running it for 7 minutes
would be able to parse ~40GB of <strong>.drv</strong> files. I don’t have that many.
All my <strong>/nix/store/*.drv</strong> files are ~1GB (~270K files).</p>
<p>Does it mean my system parses the same files multiple times? Is my system
somehow special to have many of them?</p>
<p>Running <strong>strace -f</strong> against the <strong>nix-daemon</strong> confirmed that some of
<strong>.drv</strong> files were opened and read repeatedly. That’s strange.</p>
<h1 id="the-second-attempt">The second attempt</h1>
<p>My naive understanding of graph traversal for garbage collection purposes
told me that each node should be traversed once.</p>
<p>I added a few <strong>debug()</strong> calls to
<a href="https://github.com/NixOS/nix/blob/master/src/libstore/gc.cc">src/libstore/gc.cc</a>
around repeated <strong>.drv</strong> visits and found … a bug!</p>
<p>For some <strong>nix.conf</strong> setups (like the ones with
<strong>keep-derivations = true</strong>) <strong>.drv</strong> files are themselves considered
(implicit) referrers. They should be retained on garbage
collection (live paths). By keeping related <strong>.drv</strong> files around
we keep possible prerequisites in case we want to rebuild a derivation.
Which is handy for package development.</p>
<p>The bug was in treatment of the <strong>.drv</strong> files: they were correctly traversed
as referrers, but they were not added to <strong>alive</strong> set of visited nodes.
As a result <strong>.drv</strong> file was visited every time some path pulled a <strong>.drv</strong> in.</p>
<p>Thus the fix was a two-liner: <a href="https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e" class="uri">https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e</a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/libstore/gc.cc</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/libstore/gc.cc</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -678,7 +678,8 @@ void LocalStore::collectGarbage(const GCOptions &amp; options, GCResults &amp; results)</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                 alive.insert(start);</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>                 try {</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>                     StorePathSet closure;</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="st">-                    computeFSClosure(*path, closure);</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+                    computeFSClosure(*path, closure,</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+                        /* flipDirection */ false, gcKeepOutputs, gcKeepDerivations);</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>                     for (auto &amp; p : closure)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>                         alive.insert(p);</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>                 } catch (InvalidPath &amp;) { }</span></code></pre></div>
<p>Before the change <strong>computeFSClosure()</strong> was called with implicit default
<strong>gcKeepDerivations = false</strong> argument. After the change it started honoring
user’s configuration.</p>
<p>The fun thing is that <strong>keep-derivations = true</strong> is a default enabled option!
Unless you switched it off explicitly you probably have it enabled on <strong>NixOS</strong>.</p>
<h1 id="benchmarks">Benchmarks</h1>
<p>Let’s benchmark this change on the same setup as above. I plugged the patch
into <strong>configuration.nix</strong> as:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  nixpkgs.overlays = <span class="op">[</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span> <span class="va">nix</span> <span class="op">=</span> prev.nix.overrideAttrs <span class="op">(</span><span class="va">oa</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>      <span class="va">patches</span> <span class="op">=</span> <span class="op">(</span>oa.patches <span class="kw">or</span> <span class="op">[])</span> <span class="op">++</span> <span class="op">[</span> <span class="op">(</span>prev.fetchpatch <span class="op">({</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;fix-gc-drv-re-parse.patch&quot;</span><span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e.patch&quot;</span><span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">hash</span> <span class="op">=</span> <span class="st">&quot;sha256-QiBFJVRWNTXyVFch1zoNJL3ZfF4ZD9JKNlID4v+eUVc=&quot;</span><span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">}))</span> <span class="op">];</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">});})</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">]</span>;</span></code></pre></div>
<p><strong>i7</strong>:</p>
<pre><code>$ time nix store gc --dry-run

real    0m7.403s
...</code></pre>
<p>7 seconds compared to previous 200 seconds. ~29x speedup.</p>
<p><strong>nz</strong>:</p>
<pre><code>$ time nix store gc --dry-run

real    1m0,140s
...</code></pre>
<p>60 seconds compared to previous 1800 seonds. ~30x speedup as well.</p>
<h1 id="full-run">Full run</h1>
<p>Time to run the actual garbage collection that includes file removal
from disk and path unregistration from database:</p>
<p><strong>i7</strong>:</p>
<pre><code># dry run
$ time nix store gc --dry-run

real    0m7.403s
...

# full run
$ time nix store gc

2250 store paths deleted, 18751.92 MiB freed

real    0m32.695s
...

# full re-run
$ time nix store gc

0 store paths deleted, 0.00 MiB freed

real    0m7.708s
...</code></pre>
<p>Note that actual package removal is 5 times slower than
GC dry run. This ratio depends a lot on how many files are
to delete, what filesystem and what mode you are using.
But the gist of it is that the difference is not that big
compared to dry run.</p>
<p>Dry-run before and after garbage collection did not change
much. This means we did not delete that many packages
compared to alive set of packages. After the cleanup
<strong>/nix/store</strong> is only 2.3GB with 2300 store paths.</p>
<p>Thus we deleted about the half the store paths and about
90% of content size.</p>
<p>The speed of removal is about 70 store paths (packages)
per second.</p>
<p><strong>nz</strong>:</p>
<pre><code># dry run
$ time nix store gc --dry-run

real    1m0,140s
...

# full run
$ time nix store gc

319698 store paths deleted, 332762.52 MiB freed

real    5m54,990s
...

# full re-run
$ time nix store gc

0 store paths deleted, 0.00 MiB freed

real    0m4,528s
...</code></pre>
<p>Again, actual file deletion is only 6 times slower than GC dry run.
Alive set after GC is 15K packages with 34GB storage.</p>
<p>The speed of removal is about ~800 store paths (packages)
per second.</p>
<p>How many packages per second can your distribution delete?
Does it scale well with amount of packages already installed in system?</p>
<h1 id="parting-words">Parting words</h1>
<p>Garbage collection should take no more than one minute :)</p>
<p>It was surprisingly easy to get ~30x speedup of garbage collector with
a two-liner patch. The improvement will help systems with default
<strong>nix.conf</strong> configuration. Upcoming <strong>nix-2.8</strong> will contain the
improvement.</p>
<p>Initially I was fooled by <strong>perf top</strong> output and optimised the parser
to get 25% speedup. The real bug was in tracking visited nodes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on April  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>

</feed>
