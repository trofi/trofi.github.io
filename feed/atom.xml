<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>trofi - All posts</title>
    <link href="http://trofi.github.io/feed/atom.xml" rel="self" />
    <link href="http://trofi.github.io" />
    <id>http://trofi.github.io/feed/atom.xml</id>
    <author>
        <name>Sergei Trofimovich</name>
        <email>slyfox@inbox.ru</email>
    </author>
    <updated>2022-06-01T00:00:00Z</updated>
    <entry>
    <title>dropping disqus comments</title>
    <link href="http://trofi.github.io/posts/246-dropping-disqus-comments.html" />
    <id>http://trofi.github.io/posts/246-dropping-disqus-comments.html</id>
    <published>2022-06-01T00:00:00Z</published>
    <updated>2022-06-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: dropping disqus comments</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>dropping disqus comments</h1>

            <p>This personal blog gets roughly one comment a month. For some reason
disqus decided to add automatically generated advertisement section
around comments.</p>
<p>I think disqus decided that this page does not qualify as a personal
blog anymore.</p>
<p>I dropped the integration. Now each post has a footer with an
<a href="mailto:slyich@gmail.com">email</a> and <a href="https://github.com/trofi/trofi.github.io.gen">GitHub repo</a>
reference.</p>
<p>I do understand that it’s very inconvenient in case you want to reach
out. My apologies.</p>

<div class="info">
    Posted on June  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>-fno-common legacy</title>
    <link href="http://trofi.github.io/posts/245-fno-common-legacy.html" />
    <id>http://trofi.github.io/posts/245-fno-common-legacy.html</id>
    <published>2022-05-13T00:00:00Z</published>
    <updated>2022-05-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: -fno-common legacy</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>-fno-common legacy</h1>

            <p>Around January 2020 (more than 2 years ago) <strong>gcc</strong> development version
switched from <strong>-fcommon</strong> to <strong>-fno-common</strong> by default:
<a href="https://gcc.gnu.org/PR85678" class="uri">https://gcc.gnu.org/PR85678</a>.</p>
<p>I personally like <strong>-fno-common</strong> default as it catches accidental
global variable sharing like the one in
<a href="https://github.com/FreeSpacenav/spacenavd/commit/7c271fa265613bd7d47601daaeb0e08e7c5b5a75">spacenavd</a>
or <strong>iozone</strong>. Occasional upstreams’
<a href="https://github.com/FreeSpacenav/spacenavd/issues/17">reluctance</a>
to make code <strong>-fno-common</strong>-clean was a bigsurprise to me. I just don’t
see any benefits of commoning like that. Luckily such reluctance is rare.</p>
<p>When I built my system with <strong>-fno-common</strong> toolchains I found 16 buggy
packages: <strong>syslinux</strong>, <strong>tftp-hpa</strong>, <strong>minicom</strong>, <strong>freeglut</strong>, <strong>openrc</strong>,
<strong>iproute2</strong>, <strong>gpm</strong>, <strong>xorg-server</strong>, <strong>logrotate</strong>, <strong>gnupg</strong>, <strong>libtirpc</strong>,
<strong>gdbm</strong>, <strong>cpio</strong>, <strong>postfix</strong>, <strong>xfsprogs</strong> and even <strong>glibc</strong>.</p>
<p>Some are very high profile packages. I would not expect such bugs in them.
My excuse for myself was that those are ancient code bases. Perhaps they
were initially written in a style that did not expect large size of project
and were never cleaned up later?</p>
<p>I had ~2K packages installed locally. I extrapolated 16 failures to 20K packages
of the whole repository (~10x) and hoped that we won’t get more than 160
failures. My intuition was saying that most of those packages should
be <strong>python</strong>, <strong>ruby</strong>, <strong>perl</strong>, <strong>php</strong> packages (probably unaffeched)
and thus the final number would be lower than 100.</p>
<p>When Toralf ran <strong>CFLAGS=-fno-common</strong> <strong>tinderbox</strong> build test
on the repository he started discovering more failures. I proposed fixes for
first few ten and was quickly overwhelmed. After a few weeks of <strong>tinderbox</strong>
run the bug list
contained ~800 failures! That is 5 times worse than I expected. Some of those
reports are probably duplicates but vast majority are unique real failures.
If I knew it’s so widespread I might have taken another way to roll it out.
Alas. Anyway, by now <strong>-fno-common</strong> is a fixed problem for Gentoo.</p>
<p>A few weeks ago I got commit access to <strong>nixpkgs</strong>. I’m feeling a bit uneasy
about it as I don’t formally maintain any packages there. At least I have
a few PRs to merge :)</p>
<p>Scrolling through pull requests I noticed that <strong>nixpkgs</strong> actually flipped
<strong>gcc-10</strong> (and <strong>llvm-11</strong>) back to <strong>-fcommon</strong> to avoid widespread breakage
and there was a PR to restore the default:
<a href="https://github.com/NixOS/nixpkgs/pull/110571" class="uri">https://github.com/NixOS/nixpkgs/pull/110571</a>. Now having a bit more
collaborative tools at my disposal I decided to sort it out for <strong>nixpkgs</strong>.
I did it once before :)</p>
<p><strong>gcc-10.1.0</strong> was released on May 7. That makes it almost exactly 2 years ago.
Some projects incorporated <strong>-fno-common</strong> fixes uptream and released
newer versions. But some did not. What would be the ratio of those?</p>
<p>So far I found <strong>80</strong> still broken packages in <strong>nixpkgs</strong>:
<a href="https://github.com/NixOS/nixpkgs/pull/110571#issuecomment-1119343199">incomplete list</a>.
From the list we can see that upstream mostly caught up.
That is only 10% from what we saw 2 years before. The caveat is that
it’s also an incomplete list of failures. It’s what I managed to build
in past 4 days. Once we sort most of there out I’ll request one full
hydra run.</p>
<p>We can see that vast majority of high-profile packages are fixed and
released. But there still are counterexamples like <strong>cpio</strong> (fixed in
git, no release yet) and <strong>syslinux</strong> (no fix upstream).</p>
<p>Some of packages are completely abandoned and should be removed like
a standalone <strong>dirmngr</strong> package.</p>
<p>For still broken packages I usually write a patch against dormant
upstream and attach it to the bug tracker so others could use patch
as is even if patch does not get merged in any form.</p>
<p>Sometimes there is no place upstream to make patch publicly available.
Then I have to resort to <strong>NIX_CFLAGS_COMPILE = “-fcommon”</strong> in <strong>.nix</strong>
expressions. So far I had to do it in 10 packages (maybe 30% of all
I tried to fix?). I hope it will save some time to others.</p>
<p>If you are the author of a package that had no release in past 2 years
and have a few minor tweaks then consider releasing it. You might save
some time for others. Maybe you even have a <strong>-fno-common</strong> fix pending?
:)</p>
<p>If you’d like to contribute to <strong>nixpkgs</strong> consider fixing a
<strong>-fno-common</strong> bug from the list above :) TO get you started the
reproducer is usually simple. Something like:</p>
<pre><code>$ nix build -L --impure --expr 'with import &lt;nixpkgs&gt; {}; jfsutils.overrideAttrs (oa: { NIX_CFLAGS_COMPILE = ([&quot;-fno-common&quot;] ++ [oa.NIX_CFLAGS_COMPILE or &quot;&quot;]); })'
...
jfsutils&gt; /nix/store/rs684lgm8k7akkgbisb49z4vpxxc2zns-binutils-2.38/bin/ld: extract.o:/build/jfsutils-1.1.15/fscklog/extract.c:67: multiple definition of `xchklog_buffer'; display.o:/build/jfsutils-1.1.15/fscklog/display.c:57: first defined here
jfsutils&gt; collect2: error: ld returned 1 exit status
jfsutils&gt; make[2]: *** [Makefile:373: jfs_fscklog] Error 1
jfsutils&gt; make[2]: Leaving directory '/build/jfsutils-1.1.15/fscklog'
jfsutils&gt; make[1]: *** [Makefile:363: all-recursive] Error 1
jfsutils&gt; make[1]: Leaving directory '/build/jfsutils-1.1.15'
jfsutils&gt; make: *** [Makefile:302: all] Error 2
error: builder for '/nix/store/cp4wavdy1x3rpbswzx141g794m0qsca7-jfsutils-1.1.15.drv' failed with exit code 2;</code></pre>
<p>That should get you started. See <a href="https://discourse.nixos.org/t/help-disabling-fno-common-hack/19031" class="uri">https://discourse.nixos.org/t/help-disabling-fno-common-hack/19031</a>
for more details.</p>
<p>Have fun!</p>

<div class="info">
    Posted on May 13, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>xmms2 0.9.1 is out</title>
    <link href="http://trofi.github.io/posts/244-xmms2-0.9.1-is-out.html" />
    <id>http://trofi.github.io/posts/244-xmms2-0.9.1-is-out.html</id>
    <published>2022-05-02T00:00:00Z</published>
    <updated>2022-05-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: xmms2 0.9.1 is out</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>xmms2 0.9.1 is out</h1>

            <p>Tl;DR: <strong>xmms2-0.9.1</strong> is out and you can get it at
<a href="https://github.com/xmms2/xmms2-devel/releases/tag/0.9.1" class="uri">https://github.com/xmms2/xmms2-devel/releases/tag/0.9.1</a>!</p>
<p><a href="https://en.wikipedia.org/wiki/XMMS2">xmms2</a> is a music player daemon
with various plugins to support stream decoding and transformation.</p>
<h1 id="xmms2-most-basic-usage">xmms2 most basic usage</h1>
<p>To play a song you need to add it to database and then play it:</p>
<pre><code>$ xmms2 clear
$ xmms2 add .
$ xmms2 play</code></pre>
<p>To check on current status:</p>
<pre><code>$ xmms2 list
-&gt;[1/3096] mind.in.a.box - Lament for Lost Dreams (snippet) (00:26)

Total playtime: 0:00:26

$ xmms2 status

   (n) jump to next song
   (p) jump to previous song
   (SPACE) toggle playback
   (ENTER) exit status mode

Paused: mind.in.a.box - Lament for Lost Dreams (snippet): 00:05 of 00:26</code></pre>
<p><strong>xmms2</strong> CLI has many more options:</p>
<pre><code>xmms2 help
usage: xmms2 &lt;command&gt; [args]

Available commands:
   add
   current
   exit
   help
   info
   jump
   list
   move
   next
   pause
   play
   prev
   remove
   stop
   search
   seek
   toggle
   collection &lt;subcommand&gt;
   playlist &lt;subcommand&gt;
   server &lt;subcommand&gt;

Type 'help &lt;command&gt;' for detailed help about a command.</code></pre>
<p>You really want some frontend to manipulate the player.</p>
<p>I usually run a shell wrapper in a directory I want to play.
Effectively I’m using my window manager as a frontend:</p>
<ul>
<li><strong>mc</strong> in <strong>alacritty</strong> to run <strong>m</strong> in a directory I want to play: <a href="https://github.com/trofi/home/blob/master/.bash/funs#L19">script</a></li>
<li><strong>i3</strong> key bindings to navigate through song and playlist: <a href="https://github.com/trofi/home/blob/master/.config/i3/config#L30">config</a></li>
<li><strong>xmobar</strong> (with <a href="https://github.com/trofi/home/blob/master/bin/player-status-entry-persist.py">a formatter</a>) as a status output.</li>
</ul>
<h1 id="other-bits">other bits</h1>
<p><strong>xmms2</strong> supports a ton of plugins to play all sorts of formats.
Here is what I have installed (it’s not a complete list):</p>
<pre><code>$ xmms2 server plugins
airplay         - Airport Express output plugin
alsa            - Advanced Linux Sound Architecture output plugin
ao              - libao output plugin
apefile         - Monkey's Audio file format demuxer
asf             - Advanced Systems Format demuxer
asx             - Playlist plugin for Advanced Stream Redirector files.
avcodec         - ffmpeg libavcodec decoder
converter       - Sample format converter
cue             - Playlist parser for cue files
curl            - HTTP transport using CURL
diskwrite       - Dumps audio data to disk
equalizer       - Equalizer effect
faad            - Advanced Audio Coding decoder
file            - Plain local file transport
flac            - Free Lossless Audio Codec decoder
fluidsynth      - MIDI synthesiser
flv             - Extracts an audio stream from an FLV
gme             - Game Music Emulator music decoder
gvfs            - Transport for glibs virtual filesystem
html            - Reads HTML playlists
icymetaint      - Decode &amp; use shoutcast stream metadata
id3v2           - ID3v2 tag container handler
karaoke         - Voice removal effect plugin
m3u             - Playlist parser for m3u's
mad             - MPEG Layer 1/2/3 decoder
magic           - Magic file identifier
mid1            - MIDI file format-1 demuxer
midsquash       - Multitrack MIDI squasher
mms             - Microsoft Media Services xform
modplug         - Module file decoder
mp4             - MPEG-4 Part 14 file format demuxer
mpg123          - mpg123 decoder for MPEG 1.0/2.0/2.5 layer 1/2/3 audio
nibbler         - Discarding padding using auxdata startsamples/stopsamples
normalize       - Volume normalizer
null            - null output plugin
nulstripper     - Strips leading NUL bytes
ofa             - Open Fingerprint calculator
opus            - Xiph's Ogg/Opus decoder
oss             - OpenSoundSystem output plugin
pls             - Playlist parser for PLS files.
pulse           - Output to a PulseAudio server
replaygain      - Replaygain effect
ringbuf         - Buffer
segment         - Handling segment information specified by startms/stopms
sndfile         - Libsndfile decoder
speex           - Speex decoder
tremor          - Xiph's Ogg/Vorbis decoder (integer-only version)
tta             - True Audio Codec TTA file format parser
visualization   - visualization hook
vorbis          - Xiph's Ogg/Vorbis decoder
wave            - Wave decoder
wavpack         - WavPack decoder
xml             - XML plugin</code></pre>
<h1 id="why-xmms2">why xmms2?</h1>
<p>My path to <strong>xmms2</strong> was fun. My first audio player program was
<a href="https://en.wikipedia.org/wiki/Winamp#Winamp_2">winamp 2</a> on windows 98.
When I switched to linux I picked closest alternative (and even brought
my favourite hacker skin). It was <a href="https://en.wikipedia.org/wiki/XMMS">xmms</a>.</p>
<p><strong>xmms</strong> was a good player. But it’s upstream development stalled. It
was using <strong>gtk-1</strong> at the time when everyone else was migrating to
<strong>gtk-2</strong>. A bunch of <strong>gtk-2</strong> forks appeared and none looked close
enough to <strong>xmms</strong>. Some had too thick UI buttons, some had problems
playing enough audio formats I had. Most did not support <strong>xmms</strong> skins
and were not able to present their status as a 16-pixel high window
somewhere on the desktop.</p>
<p><strong>xmms2</strong> was a new project that aimed to be <strong>xmms</strong> done right
architecturally. I read the initial announcement at the
time and though it will eventually be just like <strong>xmms</strong>. Haha. I tried
<strong>xmms2</strong> out and was able to play all song formats I had. I was surprised
to see how quickly it builds from source.</p>
<p><strong>xmms2</strong> felt incomplete as it planned but never implemented GUI
client. Eventually <strong>abraca</strong> materialized but I never got to run
it: I already settled on my set of CLI hacks to play things.</p>
<p>Eventually <strong>xmms2</strong> development pace was slowing down. I was wondering
if there are any direct alternatives to <strong>xmms2</strong> out there. <strong>mpd</strong>
looked like a close match. But when I tried it I found <strong>xmms2</strong>
snappier to add files to the database and to scroll along the playlists
with <strong>i3</strong> keybindings. I suspect <strong>mpd</strong> was not optimised for that
use case. I never moved off <strong>xmms2</strong>. I still plan to add <strong>UNI</strong> module
file format support to <strong>xmms2</strong> via <strong>libmikmod</strong> or similar :)</p>

<div class="info">
    Posted on May  2, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>gcc profiler internals</title>
    <link href="http://trofi.github.io/posts/243-gcc-profiler-internals.html" />
    <id>http://trofi.github.io/posts/243-gcc-profiler-internals.html</id>
    <published>2022-05-01T00:00:00Z</published>
    <updated>2022-05-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: gcc profiler internals</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>gcc profiler internals</h1>

            <p>I occasionally encounter profiler bugs in gcc. Two related examples I
remember are <a href="https://gcc.gnu.org/PR96394">tauthon (python-2 fork)</a> and
<a href="https://gcc.gnu.org/PR105282">python</a> ICEs in <strong>PGO</strong> build mode. <strong>PGO</strong>
profile-guided optimisation.</p>
<p>I keep forgetting <strong>gcc</strong>’s internals aroung profiling handling and keep
re-tracing the same steps every time it comes up. I decided to write a
few words on it. I’ll cover a few generic details first and then we’ll
explore today’s <a href="https://gcc.gnu.org/PR105282">python</a> bug.</p>
<h1 id="using-gcc-profiler--fprofile-generate--fprofile-use">using gcc profiler: -fprofile-generate / -fprofile-use</h1>
<p>Let’s start from a trivial example. To build our program we run <strong>gcc</strong>
on it:</p>
<pre><code>$ gcc $CFLAGS prog.c -o prog</code></pre>
<p>To build an optimised program using profile feedback we need to perform
3 steps:</p>
<pre><code>$ gcc $CFLAGS -fprofile-generate prog.c -o prog
$ ./prog some-training-input-data
$ gcc $CFLAGS -fprofile-use      prog.c -o prog</code></pre>
<p>These are:</p>
<ol type="1">
<li>build instrumented program</li>
<li>run it to get a profile</li>
<li>build optimized program:</li>
</ol>
<p><strong>PGO</strong> build mode is not the only use of profile instrumentation.
<strong>GCC</strong> allows gathering runtime execution stats using different types
and formats (<a href="https://gcc.gnu.org/onlinedocs/gcc/Instrumentation-Options.html">instrumentation options</a>).</p>
<p>A few frequent uses are:</p>
<ul>
<li>call graph style profiling (<strong>-pg</strong> option): used to explore call
graph in <strong>gprof</strong> format.</li>
<li>execution statictics coverage (<strong>-ftest-coverage</strong> option): used to
extract close to line-by-line execution coverage in <strong>gcno</strong> format.</li>
<li>execution statistics profiles (<strong>-fprofile-generate</strong>): used to guide
optimization in future compilation (<strong>PGO</strong>) in <strong>gcda</strong> format.</li>
</ul>
<p>All these modes are not fundamentally different. They share
implementation and in-memory/on-disk format. I’ll look at a <strong>gcda</strong>
form. We’ll use the following sample code as our running example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* Keep the functions around to have real indirect calls. */</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DECL_F(fn) static void fn(void) __attribute__((noipa))</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define  DEF_F(fn) static void fn(void) {}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f0<span class="op">);</span> DEF_F<span class="op">(</span>f0<span class="op">);</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f1<span class="op">);</span> DEF_F<span class="op">(</span>f1<span class="op">);</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f2<span class="op">);</span> DEF_F<span class="op">(</span>f2<span class="op">);</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main <span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">&lt;</span> <span class="dv">2</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> <span class="dt">void</span><span class="op">(*</span>ft<span class="op">[])(</span><span class="dt">void</span><span class="op">)</span> <span class="op">=</span> <span class="op">{</span> <span class="op">&amp;</span>f0<span class="op">,</span> <span class="op">&amp;</span>f1<span class="op">,</span> <span class="op">&amp;</span>f2<span class="op">,</span> <span class="op">};</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> p <span class="op">=</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">];</span> <span class="op">*</span>p<span class="op">;</span> p<span class="op">++)</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        ft<span class="op">[*</span>p <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This program accepts one string argument (<strong>argv[1]</strong>) and calls
function <strong>f0()</strong>, <strong>f1()</strong>, or <strong>f2()</strong> somewhat randomly (based on
char modulo) against each byte of input string. The idea is that
it’s not immediately obvious which of the functions is called most
frequently.</p>
<p>This program has a few conditional branches and indirect calls. Let’s
profile it and see what stats we can collect. Building:</p>
<pre><code>$ gcc a.c -o a -fprofile-generate -fprofile-arcs -ftest-coverage -O2</code></pre>
<p>Running our program 5 times:</p>
<pre><code>$ ./a
$ ./a 123456789
$ ./a aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
$ ./a aa
$ ./a aaaa
$ ls
a  a.c  a.gcda  a.gcno</code></pre>
<p>Note that each <strong>./a</strong> run creates or updates <strong>a.gcda</strong> and <strong>a.gcno</strong>.
We can dump profiling statistics with <strong>gcov</strong>:</p>
<pre><code>$ gcov -a -b -c -f a
$ cat a.c.gcov
        -:    0:Source:a.c
        -:    0:Graph:a.gcno
        -:    0:Data:a.gcda
        -:    0:Runs:5
        -:    1:#include &lt;stddef.h&gt;
        -:    2:
        -:    3:/* Keep the functions around to have real indirect calls. */
        -:    4:#define DECL_F(fn) static void fn(void) __attribute__((noipa))
        -:    5:#define  DEF_F(fn) static void fn(void) {}
        -:    6:
function f0 called 3 returned 100% blocks executed 100%
        3:    7:DECL_F(f0); DEF_F(f0);
function f1 called 53 returned 100% blocks executed 100%
       53:    8:DECL_F(f1); DEF_F(f1);
function f2 called 3 returned 100% blocks executed 100%
        3:    9:DECL_F(f2); DEF_F(f2);
        -:   10:
function main called 5 returned 100% blocks executed 100%
        5:   11:int main (int argc, char *argv[]) {
        5:   12:    if (argc &lt; 2) return 0;
        5:   12-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 1
        -:   13:
        -:   14:    static const void(*ft[])(void) = { &amp;f0, &amp;f1, &amp;f2, };
        -:   15:    size_t sz = sizeof (ft) / sizeof (ft[0]);
        -:   16:
       63:   17:    for (const char * p = argv[1]; *p; p++)
        4:   17-block  0
       63:   17-block  1
branch  0 taken 59
branch  1 taken 4 (fallthrough)
       59:   18:        ft[*p % sz]();
       59:   18-block  0
call    0 returned 59
        -:   19:
        -:   20:    return 0;
        -:   21:}</code></pre>
<p>Here we see that:</p>
<ul>
<li><strong>ft[*p % sz]()</strong> gets called 59 times: 3 (<strong>f0</strong>) + 53 (<strong>f1</strong>) + 3 (<strong>f2</strong>)</li>
<li>function <strong>main()</strong> gets called 5 times; a full length of all the inputs we passed to <strong>./a</strong> program</li>
</ul>
<p>We also see frequency of <strong>if (argc &lt; 2) return 0;</strong> branches:</p>
<ul>
<li>was taken once (<strong>./a</strong> case, no arguments)</li>
<li>was not taken 4 times (all the other <strong>./a …</strong> calls)</li>
</ul>
<p>After profile collection we can build new binary using <strong>.gcda</strong> files
by changing <strong>-fprofile-generate</strong> to <strong>-fprofile-use</strong> in our <strong>gcc</strong>
calls:</p>
<pre><code>$ gcc a.c -o a -fprofile-use -O2</code></pre>
<p>Let’s compare the result against unprofiled build:</p>
<pre><code>$ gcc a.c -o a-unprof -O2</code></pre>
<p>I’ll skip disassembly as instructions do not change materially (the
program is too simple). The code order is slightly different in the two
binaries. Let’s have a look:</p>
<pre><code>$ nm -n a-unprof
...
0000000000400390 r __abi_tag
0000000000401000 T _init
0000000000401020 T main
0000000000401090 T _start
00000000004010c0 T _dl_relocate_static_pie
00000000004010d0 t deregister_tm_clones
0000000000401100 t register_tm_clones
0000000000401140 t __do_global_dtors_aux
0000000000401170 t frame_dummy
0000000000401180 t f0
0000000000401190 t f1
00000000004011a0 t f2
...</code></pre>
<pre><code>$ nm -n a
...
0000000000400390 r __abi_tag
0000000000401000 T _init
0000000000401020 T main
0000000000401080 t f1
0000000000401090 T _start
...</code></pre>
<p><strong>nm -n</strong> orders symbols in their in-memory order so we could
get the idea what goes where.</p>
<p>One can spot that in unprofiled build <strong>main()</strong> is quite far away from most
frequently called <strong>f1()</strong> function. While in profiled build
<strong>f1()</strong> immediately follows <strong>main()</strong>.</p>
<p>In more practical scenarios the effects are more pronounced:</p>
<ul>
<li>likely to execute code is laid out in a way that does not require branching</li>
<li>inlining can rely on execution statistics instead of function size heuristics</li>
<li><strong>-flto</strong> could perform global program code reordering to speedup binary loading from disk</li>
<li>and many other effects</li>
</ul>
<p>The main takeaway here is that <strong>PGO</strong> requires two full builds
(<strong>-fprofile-generate</strong> and <strong>-fprofile-use</strong>) and a program training
run.</p>
<p>In our example training data is biased towards inputs with <strong>‘a’</strong>
symbols and thus our program is probably slightly more efficient at
handling those.</p>
<p>In <strong>PGO</strong> builds the trick is to find suitable input training data.
Typical rookie mistake is to use <strong>./prog –help</strong> as a training run.
Do not do that: you will get program optimised for printing help text.
The rest will perform worse than typical unprofiled build.</p>
<h1 id="internals-gcov-dump-tool">internals: gcov-dump tool</h1>
<p>What exactly do these <strong>.gcda</strong> files contain? Let’s have a peek with
<strong>gcov-dump</strong> tool shipped with <strong>gcc</strong>:</p>
<pre><code>$ gcov-dump a.gcda

a.gcda:data:magic `gcda':version `B12*'
a.gcda:stamp 1137774494
a.gcda:  a1000000:   2:OBJECT_SUMMARY runs=5, sum_max=60
a.gcda:  01000000:   3:FUNCTION ident=108032747, lineno_checksum=0x0a7a17ea, cfg_checksum=0xc835c602
a.gcda:    01a10000:   8:COUNTERS arcs 4 counts
a.gcda:    01a90000:  16:COUNTERS indirect_call 8 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1567133468, lineno_checksum=0xdadb6f0d, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1025457522, lineno_checksum=0x745daa69, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:  01000000:   3:FUNCTION ident=1634904005, lineno_checksum=0x432c0dd4, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts</code></pre>
<p>Here we something about <strong>a.gcda</strong> contents. It has something about:</p>
<ul>
<li><p>5 program runs (<strong>OBJECT_SUMMARY runs=5</strong>)</p></li>
<li><p>4 FUNCTIONs, each contains information about:</p>
<ul>
<li><strong>arcs</strong>: conditional or unconditional branches</li>
<li><strong>indirect_call</strong> indirect branch targets</li>
<li><strong>time_profiler</strong>: count of times basic block was executed</li>
</ul></li>
</ul>
<p>Note that functions are identified not by name, but by a triple:</p>
<ul>
<li><strong>ident</strong>: name hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l548">coverage_compute_profile_id()</a></li>
<li><strong>lineno_checksum</strong>: source file name and line number hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l531">coverage_compute_lineno_checksum()</a></li>
<li><strong>cfg_checksum</strong>: control flow graph hash, calculated with <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/coverage.cc;h=8ece5db680e614f8225d9e8407dd89bd27020b4d;hb=95874f95095f401405d3386e2e6695351b3f97b5#l588">coverage_compute_cfg_checksum()</a>
identifier stability can survive minor source code changes.</li>
</ul>
<p>You need a <strong>.gcno</strong> file to resolve these obscure identifiers back
to source line numbers.</p>
<p>Let’s look into individual counters of <strong>.gcda</strong> files. We can extract
then with <strong>-l</strong> option:</p>
<pre><code>$ gcov-dump -l a.gcda

a.gcda:data:magic `gcda':version `B12*'
a.gcda:stamp 1137774494
a.gcda:  a1000000:   2:OBJECT_SUMMARY runs=5, sum_max=60
a.gcda:  01000000:   3:FUNCTION ident=108032747, lineno_checksum=0x0a7a17ea, cfg_checksum=0xc835c602
a.gcda:    01a10000:   8:COUNTERS arcs 4 counts
a.gcda:                   0: 1 4 59 4
a.gcda:    01a90000:  16:COUNTERS indirect_call 8 counts
a.gcda:                   0: 59 3 1025457522 53 1567133468 3 1634904005 3
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 1
a.gcda:  01000000:   3:FUNCTION ident=1567133468, lineno_checksum=0xdadb6f0d, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 3
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 3
a.gcda:  01000000:   3:FUNCTION ident=1025457522, lineno_checksum=0x745daa69, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 53
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 2
a.gcda:  01000000:   3:FUNCTION ident=1634904005, lineno_checksum=0x432c0dd4, cfg_checksum=0xa43083b8
a.gcda:    01a10000:   2:COUNTERS arcs 1 counts
a.gcda:                   0: 3
a.gcda:    01a90000:   0:COUNTERS indirect_call 0 counts
a.gcda:    01af0000:   2:COUNTERS time_profiler 1 counts
a.gcda:                   0: 4</code></pre>
<p>Counters are harder to interpret without the context.</p>
<p>For example <strong>arcs</strong>
just list count of each branch taken known to the current function.
The string “FUNCTION ident=108032747: arcs 4 counts: 1 4 59 4” means that first
arc was taken once, third was taken 59 times.</p>
<p>Looking at the above <strong>a.c.gcov</strong> I
would guess <strong>FUNCTION ident=108032747</strong> is our <strong>main()</strong> function,
first counter is our <strong>if (argc &lt; 2) return 0;</strong> branch and the rest
are indirect call arcs to <strong>f1()</strong>, <strong>f2()</strong>, <strong>f3()</strong>.</p>
<p><strong>indirect_call</strong> is more complicated: the string “indirect_call 8 counts: 59 3 1025457522 53 1567133468 3 1634904005 3”
means that there were 59 indirect calls, top 3 are listed, first
indirection had 53 calls (with <strong>ident=1025457522</strong> as a target, probably <strong>f1()</strong>),
second and third are taken 3 times (probably <strong>f0()</strong> and <strong>f2()</strong> are the targets).</p>
<p><strong>time_profiler</strong> is the simplest one: it says how many times the
function itself was called.</p>
<p>Quiz question: why does <strong>ident=108032747</strong> (<strong>main()</strong> function) has
only one <strong>time_profile</strong> call and not 5?</p>
<h1 id="internals-libgcov">internals: libgcov</h1>
<p><strong>.gcda</strong> files are read at program startup and written at program
shutdown. Multiple program runs have an effect of merged profile statictics
from each run.</p>
<p>Some staticstics like <strong>runs</strong> are easy to merge:
just sum values together. But some like <strong>arcs</strong> are trickier:
how do we handle indirect calls with an unbound target fanout?
Should we store all of them? Or set a static or dynamic limit?</p>
<p>All these cases are handled by <strong>-lgcov</strong> library linked into
instrumented binaries. It’s API resides in
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov.h;h=487bd1464cd8e6f9ae4dc1ca25a68b0c8d836a74;hb=95874f95095f401405d3386e2e6695351b3f97b5#l282">libgcc/libgcov.h</a>
and has a few things to note:</p>
<ul>
<li>entry and exit points: <strong>__gcov_init()</strong> / <strong>__gcov_exit()</strong>.</li>
<li>profiler conters: <strong>__gcov_interval_profiler()</strong> / <strong>__gcov_time_profiler()</strong> / <strong>__gcov_indirect_call_profiler_v4()</strong></li>
<li>profile mergers: <strong>__gcov_merge_add()</strong> / <strong>__gcov_merge_time_profile()</strong> / <strong>__gcov_merge_topn()</strong></li>
<li>counter readers: <strong>gcov_get_counter()</strong> / <strong>gcov_get_counter_ignore_scaling()</strong> / <strong>gcov_get_counter_target()</strong></li>
<li>hooks to catch program re-execution: <strong>__gcov_fork()</strong> / <strong>__gcov_execl()</strong></li>
</ul>
<p>Let’s look at indirect call profiler details as an exampe. The other
metric types follow the same pattern.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-profiler.c;h=57617857a93197fcbf99c682df11c66b9fb2b589;hb=95874f95095f401405d3386e2e6695351b3f97b5#l169">__gcov_indirect_call_profiler_v4()</a>
implements an increment (in-memory) for <strong>indirect_call</strong>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>__gcov_indirect_call_profiler_v4 <span class="op">(</span>gcov_type value<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>cur_func<span class="op">)</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>  __gcov_indirect_call_profiler_body <span class="op">(</span>value<span class="op">,</span> cur_func<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co">/* By default, the C++ compiler will use function addresses in the</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="co">   vtable entries.  Setting TARGET_VTABLE_USES_DESCRIPTORS to nonzero</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="co">   tells the compiler to use function descriptors instead.  The value</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co">   of this macro says how many words wide the descriptor is (normally 2).</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="co">   It is assumed that the address of a function descriptor may be treated</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="co">   as a pointer to a function.  */</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="co">/* Tries to determine the most common value among its inputs. */</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>__gcov_indirect_call_profiler_body <span class="op">(</span>gcov_type value<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>cur_func<span class="op">,</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>                                    <span class="dt">int</span> use_atomic<span class="op">)</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* If the C++ virtual tables contain function descriptors then one</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co">     function may have multiple descriptors and we need to dereference</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="co">     the descriptors to see if they point to the same function.  */</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>cur_func <span class="op">==</span> __gcov_indirect_call<span class="op">.</span>callee</span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>      <span class="op">||</span> <span class="op">(</span>__LIBGCC_VTABLE_USES_DESCRIPTORS__</span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>          <span class="op">&amp;&amp;</span> <span class="op">*(</span><span class="dt">void</span> <span class="op">**)</span> cur_func <span class="op">==</span> <span class="op">*(</span><span class="dt">void</span> <span class="op">**)</span> __gcov_indirect_call<span class="op">.</span>callee<span class="op">))</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>    __gcov_topn_values_profiler_body <span class="op">(</span>__gcov_indirect_call<span class="op">.</span>counters<span class="op">,</span> value<span class="op">,</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>                                      use_atomic<span class="op">);</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>  __gcov_indirect_call<span class="op">.</span>callee <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="co">/* Tries to determine N most commons value among its inputs.  */</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>__gcov_topn_values_profiler_body <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>                                  <span class="dt">int</span> use_atomic<span class="op">)</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>  gcov_topn_add_value <span class="op">(</span>counters<span class="op">,</span> value<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> use_atomic<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a><span class="co">/* Add key value pair VALUE:COUNT to a top N COUNTERS.  When INCREMENT_TOTAL</span></span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a><span class="co">   is true, add COUNT to total of the TOP counter.  If USE_ATOMIC is true,</span></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a><span class="co">   do it in atomic way.  Return true when the counter is full, otherwise</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a><span class="co">   return false.  */</span></span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">unsigned</span></span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>gcov_topn_add_value <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span> gcov_type count<span class="op">,</span></span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">int</span> use_atomic<span class="op">,</span> <span class="dt">int</span> increment_total<span class="op">)</span></span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span></code></pre></div>
<p>Here we see that <strong>indirect_call</strong> is a <strong>topn</strong> style counter as it’s handled by
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov.h;h=487bd1464cd8e6f9ae4dc1ca25a68b0c8d836a74;hb=95874f95095f401405d3386e2e6695351b3f97b5#l487">gcov_topn_add_value()</a>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">unsigned</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>gcov_topn_add_value <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> gcov_type value<span class="op">,</span> gcov_type count<span class="op">,</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">int</span> use_atomic<span class="op">,</span> <span class="dt">int</span> increment_total<span class="op">)</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>increment_total<span class="op">)</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* In the multi-threaded mode, we can have an already merged profile</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">         with a negative total value.  In that case, we should bail out.  */</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>counters<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>      gcov_counter_add <span class="op">(&amp;</span>counters<span class="op">[</span><span class="dv">0</span><span class="op">],</span> <span class="dv">1</span><span class="op">,</span> use_atomic<span class="op">);</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>prev_node <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>minimal_node <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> gcov_kvp <span class="op">*</span>current_node  <span class="op">=</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*)(</span><span class="dt">intptr_t</span><span class="op">)</span>counters<span class="op">[</span><span class="dv">2</span><span class="op">];</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>current_node<span class="op">)</span></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>current_node<span class="op">-&gt;</span>value <span class="op">==</span> value<span class="op">)</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>          gcov_counter_add <span class="op">(&amp;</span>current_node<span class="op">-&gt;</span>count<span class="op">,</span> count<span class="op">,</span> use_atomic<span class="op">);</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>          <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>A few things to note here:</p>
<ul>
<li><strong>gcov_topn_add_value()</strong> increments <strong>counters[ix]</strong> where <strong>ix</strong> matches <strong>value</strong> being counted.</li>
<li><strong>gcov_topn_add_value()</strong> increments <strong>counters[0]</strong> as it treats it as “total”</li>
<li>negative “total” values are special and are related to merged values (how?)</li>
</ul>
<p>Let’s look at the merge function for <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-merge.c;h=89741f637e1efae86d193762b668015c36243098;hb=95874f95095f401405d3386e2e6695351b3f97b5#l89">__gcov_merge_topn()</a>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* The profile merging function for choosing the most common value.</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="co">   It is given an array COUNTERS of N_COUNTERS old counters and it</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="co">   reads the same number of counters from the gcov file.  The counters</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="co">   are split into pairs where the members of the tuple have</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="co">   meanings:</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="co">   -- the stored candidate on the most common value of the measured entity</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="co">   -- counter</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a><span class="co">   We use -TOTAL for situation when merging dropped some values.</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a><span class="co">   The information is used for -fprofile-reproducible flag.</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a><span class="co">   */</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>__gcov_merge_topn <span class="op">(</span>gcov_type <span class="op">*</span>counters<span class="op">,</span> <span class="dt">unsigned</span> n_counters<span class="op">)</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>  gcc_assert <span class="op">(!(</span>n_counters <span class="op">%</span> GCOV_TOPN_MEM_COUNTERS<span class="op">));</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span>n_counters <span class="op">/</span> GCOV_TOPN_MEM_COUNTERS<span class="op">);</span> i<span class="op">++)</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* First value is number of total executions of the profiler.  */</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>      gcov_type all <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>      gcov_type n <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>      <span class="dt">unsigned</span> full <span class="op">=</span> all <span class="op">&lt;</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>      gcov_type <span class="op">*</span>total <span class="op">=</span> <span class="op">&amp;</span>counters<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">];</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>      <span class="op">*</span>total <span class="op">+=</span> full <span class="op">?</span> <span class="op">-</span>all <span class="op">:</span> all<span class="op">;</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> n<span class="op">;</span> j<span class="op">++)</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a>          gcov_type value <span class="op">=</span> gcov_get_counter_target <span class="op">();</span></span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a>          gcov_type count <span class="op">=</span> gcov_get_counter_ignore_scaling <span class="op">(-</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a>          <span class="co">// </span><span class="al">TODO</span><span class="co">: we should use atomic here</span></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a>          full <span class="op">|=</span> gcov_topn_add_value <span class="op">(</span>counters <span class="op">+</span> GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">,</span></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a>                                       value<span class="op">,</span> count<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>full<span class="op">)</span></span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>total <span class="op">=</span> <span class="op">-(*</span>total<span class="op">);</span></span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Once again we see that first pair of key/value is treated as “total” count
of calls. Merger is the place where overflow of <strong>gcov_topn_add_value()</strong>
is detected and “total” is stored as a negative value to show this fact.</p>
<p>All the counter types are written on disk with
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-driver.c;h=d4517d269eb32ca84ee1dfa069bda4e872a1ac98;hb=95874f95095f401405d3386e2e6695351b3f97b5#l502">write_once_data()</a>.
From there we see that
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-driver.c;h=d4517d269eb32ca84ee1dfa069bda4e872a1ac98;hb=95874f95095f401405d3386e2e6695351b3f97b5#l432">write_topn_counters()</a>
dumps them as:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Store all TOP N counters where each has a dynamic length.  */</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>write_topn_counters <span class="op">(</span><span class="dt">const</span> <span class="kw">struct</span> gcov_ctr_info <span class="op">*</span>ci_ptr<span class="op">,</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">unsigned</span> t_ix<span class="op">,</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>                     gcov_unsigned_t n_counts<span class="op">,</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">(*</span>dump_fn<span class="op">)</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">void</span> <span class="op">*,</span> <span class="dt">unsigned</span><span class="op">,</span> <span class="dt">void</span> <span class="op">*),</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*(*</span>allocate_fn<span class="op">)(</span><span class="dt">unsigned</span><span class="op">,</span> <span class="dt">void</span> <span class="op">*),</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*</span>arg<span class="op">)</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> disk_size <span class="op">=</span> GCOV_TOPN_DISK_COUNTERS <span class="op">*</span> counters <span class="op">+</span> <span class="dv">2</span> <span class="op">*</span> pair_total<span class="op">;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>  dump_unsigned <span class="op">(</span>GCOV_TAG_FOR_COUNTER <span class="op">(</span>t_ix<span class="op">),</span> dump_fn<span class="op">,</span> arg<span class="op">),</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>  dump_unsigned <span class="op">(</span>GCOV_TAG_COUNTER_LENGTH <span class="op">(</span>disk_size<span class="op">),</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> counters<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>      dump_counter <span class="op">(</span>ci_ptr<span class="op">-&gt;</span>values<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i<span class="op">],</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>      dump_counter <span class="op">(</span>list_sizes<span class="op">[</span>i<span class="op">],</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>      gcov_type start <span class="op">=</span> ci_ptr<span class="op">-&gt;</span>values<span class="op">[</span>GCOV_TOPN_MEM_COUNTERS <span class="op">*</span> i <span class="op">+</span> <span class="dv">2</span><span class="op">];</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>      <span class="dt">unsigned</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*</span>node <span class="op">=</span> <span class="op">(</span><span class="kw">struct</span> gcov_kvp <span class="op">*)(</span>__INTPTR_TYPE__<span class="op">)</span>start<span class="op">;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a>           j <span class="op">&lt;</span> list_sizes<span class="op">[</span>i<span class="op">];</span> node <span class="op">=</span> node<span class="op">-&gt;</span>next<span class="op">,</span> j<span class="op">++)</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a>          dump_counter <span class="op">(</span>node<span class="op">-&gt;</span>value<span class="op">,</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a>          dump_counter <span class="op">(</span>node<span class="op">-&gt;</span>count<span class="op">,</span> dump_fn<span class="op">,</span> arg<span class="op">);</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This just writes key/value pairs on disk. Nothing fancy. No special handling
of negative values. This makes on-disk format rougly match in-memory format.</p>
<p>Now we can alswer our quiz question on why <strong>time_profiler</strong> still has a
value of <strong>1</strong> for <strong>main()</strong> even after 5 program runs.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=libgcc/libgcov-merge.c;h=89741f637e1efae86d193762b668015c36243098;hb=95874f95095f401405d3386e2e6695351b3f97b5#l68">__gcov_merge_time_profile()</a>
tells us:</p>
<pre><code>/* Time profiles are merged so that minimum from all valid (greater than zero)
   is stored. There could be a fork that creates new counters. To have
   the profile stable, we chosen to pick the smallest function visit time.  */
void
__gcov_merge_time_profile (gcov_type *counters, unsigned n_counters)
{
  unsigned int i;
  gcov_type value;

  for (i = 0; i &lt; n_counters; i++)
    {
      value = gcov_get_counter_target ();

      if (value &amp;&amp; (!counters[i] || value &lt; counters[i]))
        counters[i] = value;
    }
}</code></pre>
<p>The counter stores fastest execution for the function. Not a sum of
execution times (as I thought initially).</p>
<p>The takeaways here are:</p>
<ul>
<li><strong>gcc</strong> implements a few types of counters: histogram-style <strong>TOPN</strong> counters,
simpler numeric counters and a few others.</li>
<li>merge policies for counters are dependent on their exact meaning; they are not cimplicated but have a few
gotchas like negative values.</li>
<li><strong>libgcov</strong> provides runtime for both program being profiled and <strong>gcov</strong> standalone tool</li>
</ul>
<h1 id="internals-gcc-emitted-code">internals: gcc-emitted code</h1>
<p>Let’s check how counters are embedded into our program. I suggest looking at the
optimised <strong>GIMPLE</strong> tree. Here is our original program:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="co">/* Keep the functions around to have real indirect calls. */</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define DECL_F(fn) static void fn(void) __attribute__((noipa))</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#define  DEF_F(fn) static void fn(void) {}</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f0<span class="op">);</span> DEF_F<span class="op">(</span>f0<span class="op">);</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f1<span class="op">);</span> DEF_F<span class="op">(</span>f1<span class="op">);</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>DECL_F<span class="op">(</span>f2<span class="op">);</span> DEF_F<span class="op">(</span>f2<span class="op">);</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main <span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">&lt;</span> <span class="dv">2</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> <span class="dt">void</span><span class="op">(*</span>ft<span class="op">[])(</span><span class="dt">void</span><span class="op">)</span> <span class="op">=</span> <span class="op">{</span> <span class="op">&amp;</span>f0<span class="op">,</span> <span class="op">&amp;</span>f1<span class="op">,</span> <span class="op">&amp;</span>f2<span class="op">,</span> <span class="op">};</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>ft<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> p <span class="op">=</span> argv<span class="op">[</span><span class="dv">1</span><span class="op">];</span> <span class="op">*</span>p<span class="op">;</span> p<span class="op">++)</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>        ft<span class="op">[*</span>p <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We will dump final <strong>GIMPLE</strong> with <strong>-fdump-tree-optimized</strong> flag.
I’ll paste the output in 3 pieces (as the output is quite big):</p>
<ul>
<li><strong>main()</strong> function</li>
<li><strong>f0()</strong> function</li>
<li>constructor/destructor</li>
</ul>
<p>Let’s dump <strong>GIMPLE</strong> first:</p>
<pre><code>$ gcc -c a.c -fprofile-generate -fprofile-arcs -ftest-coverage -O2 -fdump-tree-optimized
$ cat a.c.244t.optimized</code></pre>
<p>Her is our <strong>main()</strong>:</p>
<pre><code>;; Function main (main, funcdef_no=3, decl_uid=1966, cgraph_uid=4, symbol_order=3) (executed once)

__attribute__((access (&quot;^1[ ]&quot;, )))
int main (int argc, char * * argv)
{
  const char * p;
  static void (*&lt;T34b&gt;) (void) ft[3] = {f0, f1, f2};
  long unsigned int _1;
  long unsigned int _2;
  void (*&lt;T34b&gt;) (void) _3;
  char _4;
  long int PROF_edge_counter_14;
  long int PROF_edge_counter_15;
  long int PROF_edge_counter_16;
  long int PROF_edge_counter_17;
  long int PROF_edge_counter_18;
  long int PROF_edge_counter_19;
  long int PROF_edge_counter_20;
  long int PROF_edge_counter_21;
  long int _23;
  long int time_profile_24;
  long int time_profile_25;
  void * _26;
  char _39;
  char _40;

  &lt;bb 2&gt; [local count: 160390549]:
  _26 = __gcov_indirect_call.D.1993;
  if (_26 != 0B)
    goto &lt;bb 3&gt;; [20.00%]
  else
    goto &lt;bb 4&gt;; [80.00%]

  &lt;bb 3&gt; [local count: 160390549]:
  __gcov_indirect_call_profiler_v4 (108032747, main);

  &lt;bb 4&gt; [local count: 160390549]:
  _23 = __gcov7.main[0];
  if (_23 == 0)
    goto &lt;bb 5&gt;; [20.00%]
  else
    goto &lt;bb 6&gt;; [80.00%]

  &lt;bb 5&gt; [local count: 160390549]:
  time_profile_24 = __gcov_time_profiler_counter;
  time_profile_25 = time_profile_24 + 1;
  __gcov7.main[0] = time_profile_25;
  __gcov_time_profiler_counter = time_profile_25;

  &lt;bb 6&gt; [local count: 160390549]:
  if (argc_8(D) &lt;= 1)
    goto &lt;bb 7&gt;; [26.36%]
  else
    goto &lt;bb 8&gt;; [73.64%]

  &lt;bb 7&gt; [local count: 42278949]:
  PROF_edge_counter_14 = __gcov0.main[0];
  PROF_edge_counter_15 = PROF_edge_counter_14 + 1;
  __gcov0.main[0] = PROF_edge_counter_15;
  goto &lt;bb 11&gt;; [100.00%]

  &lt;bb 8&gt; [local count: 118111600]:
  PROF_edge_counter_16 = __gcov0.main[1];
  PROF_edge_counter_17 = PROF_edge_counter_16 + 1;
  __gcov0.main[1] = PROF_edge_counter_17;
  p_11 = MEM[(char * *)argv_10(D) + 8B];
  _39 = *p_11;
  if (_39 != 0)
    goto &lt;bb 9&gt;; [89.00%]
  else
    goto &lt;bb 10&gt;; [11.00%]

  &lt;bb 9&gt; [local count: 955630226]:
  # _40 = PHI &lt;_4(9), _39(8)&gt;
  # p_41 = PHI &lt;p_13(9), p_11(8)&gt;
  _1 = (long unsigned int) _40;
  _2 = _1 % 3;
  _3 = ft[_2];
  __gcov_indirect_call.D.1994 = &amp;__gcov4.main[0];
  __gcov_indirect_call.D.1993 = _3;
  _3 ();
  PROF_edge_counter_18 = __gcov0.main[2];
  PROF_edge_counter_19 = PROF_edge_counter_18 + 1;
  __gcov0.main[2] = PROF_edge_counter_19;
  p_13 = p_41 + 1;
  _4 = MEM[(const char *)p_13];
  if (_4 != 0)
    goto &lt;bb 9&gt;; [89.00%]
  else
    goto &lt;bb 10&gt;; [11.00%]

  &lt;bb 10&gt; [local count: 118111600]:
  PROF_edge_counter_20 = __gcov0.main[3];
  PROF_edge_counter_21 = PROF_edge_counter_20 + 1;
  __gcov0.main[3] = PROF_edge_counter_21;

  &lt;bb 11&gt; [local count: 160390549]:
  return 0;

}</code></pre>
<p>While it’s a lot of code each counter handling is straightforward:</p>
<ul>
<li>read the counter out</li>
<li>update the counter</li>
<li>write it back</li>
</ul>
<p>Here we already see a few glbal variables being updated:</p>
<ul>
<li><strong>__gcov_time_profiler_counter</strong>: global timer counter gets incremented once.</li>
<li><strong>__gcov7.main[0]</strong>: <strong>main</strong> timer counter gets incremented once.</li>
<li><strong>__gcov0.main[0,1,2,3]</strong>: <strong>main</strong> arc counters (to <strong>f0()</strong>, <strong>f1()</strong>, <strong>f2()</strong>)</li>
</ul>
<p>Note that <strong>main()</strong> does build explicitl arcs to
<strong>f0()</strong>/<strong>f1()f2()</strong> but it does not know where indirections leads
it to. Thus <strong>gcc</strong> stores indirection to <strong>__gcov_indirect_call.D.1993</strong>
global.</p>
<p>TO maintain the indirect counters <strong>gcc</strong> relies on target to increment it:</p>
<pre><code>;; Function f2 (f2, funcdef_no=2, decl_uid=1960, cgraph_uid=3, symbol_order=2)

__attribute__((noipa, noinline, noclone, no_icf))
void f2 ()
{
  long int PROF_edge_counter_2;
  long int PROF_edge_counter_3;
  long int _4;
  long int time_profile_5;
  long int time_profile_6;
  void * _7;

  &lt;bb 2&gt; [local count: 1073741824]:
  _7 = __gcov_indirect_call.D.1993;
  if (_7 != 0B)
    goto &lt;bb 3&gt;; [20.00%]
  else
    goto &lt;bb 4&gt;; [80.00%]

  &lt;bb 3&gt; [local count: 1073741824]:
  __gcov_indirect_call_profiler_v4 (1567133468, f2);

  &lt;bb 4&gt; [local count: 1073741824]:
  PROF_edge_counter_2 = __gcov0.f2[0];
  PROF_edge_counter_3 = PROF_edge_counter_2 + 1;
  __gcov0.f2[0] = PROF_edge_counter_3;
  _4 = __gcov7.f2[0];
  if (_4 == 0)
    goto &lt;bb 5&gt;; [20.00%]
  else
    goto &lt;bb 6&gt;; [80.00%]

  &lt;bb 5&gt; [local count: 1073741824]:
  time_profile_5 = __gcov_time_profiler_counter;
  time_profile_6 = time_profile_5 + 1;
  __gcov7.f2[0] = time_profile_6;
  __gcov_time_profiler_counter = time_profile_6;

  &lt;bb 6&gt; [local count: 1073741824]:
  return;

}

;; Function f1 (f1, funcdef_no=1, decl_uid=1955, cgraph_uid=2, symbol_order=1)
... same as f0
;; Function f2 (f0, funcdef_no=0, decl_uid=1950, cgraph_uid=1, symbol_order=0)
... same as f2</code></pre>
<p>Here the same <strong>__gcov_indirect_call.D.1993</strong> is being used to increment the counter
in case <strong>f2()</strong> is indirection target. If <strong>f2()</strong> is called directly then this
global would not be populated.</p>
<pre><code>;; Function _sub_I_00100_0 (_sub_I_00100_0, funcdef_no=4, decl_uid=2028, cgraph_uid=6, symbol_order=17) (executed once)

void _sub_I_00100_0 ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  __gcov_init (&amp;*.LPBX0); [tail call]
  return;

}

;; Function _sub_D_00100_1 (_sub_D_00100_1, funcdef_no=5, decl_uid=2031, cgraph_uid=7, symbol_order=18) (executed once)

void _sub_D_00100_1 ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  __gcov_exit (); [tail call]
  return;
}</code></pre>
<p>And here we see <strong>-lgcov</strong> startup and shutdown code in constructor and
destructor. Simple!</p>
<h1 id="the-actual-bug">the actual bug</h1>
<p>Now if all the above has some sense to you then <a href="https://gcc.gnu.org/PR105282" class="uri">https://gcc.gnu.org/PR105282</a>
should look less mysterious. There <strong>python</strong> managed to ICE <strong>gcc</strong> when
program was optimised with training data available.</p>
<p>Let’s look at the minimised example:</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stddef.h&gt;</span></span>
<span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">void</span> <span class="op">(*</span>cb_t<span class="op">)(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define F(__fn) static void __fn(void) {}</span></span>
<span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f00<span class="op">);</span>F<span class="op">(</span>f01<span class="op">);</span>F<span class="op">(</span>f02<span class="op">);</span>F<span class="op">(</span>f03<span class="op">);</span>F<span class="op">(</span>f04<span class="op">);</span>F<span class="op">(</span>f05<span class="op">);</span>F<span class="op">(</span>f06<span class="op">);</span>F<span class="op">(</span>f07<span class="op">);</span>F<span class="op">(</span>f08<span class="op">);</span>F<span class="op">(</span>f09<span class="op">);</span></span>
<span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f10<span class="op">);</span>F<span class="op">(</span>f11<span class="op">);</span>F<span class="op">(</span>f12<span class="op">);</span>F<span class="op">(</span>f13<span class="op">);</span>F<span class="op">(</span>f14<span class="op">);</span>F<span class="op">(</span>f15<span class="op">);</span>F<span class="op">(</span>f16<span class="op">);</span>F<span class="op">(</span>f17<span class="op">);</span>F<span class="op">(</span>f18<span class="op">);</span>F<span class="op">(</span>f19<span class="op">);</span></span>
<span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f20<span class="op">);</span>F<span class="op">(</span>f21<span class="op">);</span>F<span class="op">(</span>f22<span class="op">);</span>F<span class="op">(</span>f23<span class="op">);</span>F<span class="op">(</span>f24<span class="op">);</span>F<span class="op">(</span>f25<span class="op">);</span>F<span class="op">(</span>f26<span class="op">);</span>F<span class="op">(</span>f27<span class="op">);</span>F<span class="op">(</span>f28<span class="op">);</span>F<span class="op">(</span>f29<span class="op">);</span></span>
<span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f30<span class="op">);</span>F<span class="op">(</span>f31<span class="op">);</span>F<span class="op">(</span>f32<span class="op">);</span>F<span class="op">(</span>f33<span class="op">);</span>F<span class="op">(</span>f34<span class="op">);</span>F<span class="op">(</span>f35<span class="op">);</span>F<span class="op">(</span>f36<span class="op">);</span>F<span class="op">(</span>f37<span class="op">);</span>F<span class="op">(</span>f38<span class="op">);</span>F<span class="op">(</span>f39<span class="op">);</span></span>
<span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>F<span class="op">(</span>f40<span class="op">);</span>F<span class="op">(</span>f41<span class="op">);</span>F<span class="op">(</span>f42<span class="op">);</span>F<span class="op">(</span>f43<span class="op">);</span>F<span class="op">(</span>f44<span class="op">);</span>F<span class="op">(</span>f45<span class="op">);</span>F<span class="op">(</span>f46<span class="op">);</span>F<span class="op">(</span>f47<span class="op">);</span>F<span class="op">(</span>f48<span class="op">);</span>F<span class="op">(</span>f49<span class="op">);</span></span>
<span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> f<span class="op">(</span><span class="dt">int</span> i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Needs to be bigger than gcc's GCOV_TOPN_MAXIMUM_TRACKED_VALUES == 32</span></span>
<span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a><span class="co">     * to overflow GCOV_COUNTER_V_INDIR couter type.</span></span>
<span id="cb23-15"><a href="#cb23-15" aria-hidden="true" tabindex="-1"></a><span class="co">     */</span></span>
<span id="cb23-16"><a href="#cb23-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">static</span> <span class="dt">const</span> cb_t fs<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb23-17"><a href="#cb23-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f00<span class="op">,&amp;</span>f01<span class="op">,&amp;</span>f02<span class="op">,&amp;</span>f03<span class="op">,&amp;</span>f04<span class="op">,&amp;</span>f05<span class="op">,&amp;</span>f06<span class="op">,&amp;</span>f07<span class="op">,&amp;</span>f08<span class="op">,&amp;</span>f09<span class="op">,</span></span>
<span id="cb23-18"><a href="#cb23-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f10<span class="op">,&amp;</span>f11<span class="op">,&amp;</span>f12<span class="op">,&amp;</span>f13<span class="op">,&amp;</span>f14<span class="op">,&amp;</span>f15<span class="op">,&amp;</span>f16<span class="op">,&amp;</span>f17<span class="op">,&amp;</span>f18<span class="op">,&amp;</span>f19<span class="op">,</span></span>
<span id="cb23-19"><a href="#cb23-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f20<span class="op">,&amp;</span>f21<span class="op">,&amp;</span>f22<span class="op">,&amp;</span>f23<span class="op">,&amp;</span>f24<span class="op">,&amp;</span>f25<span class="op">,&amp;</span>f26<span class="op">,&amp;</span>f27<span class="op">,&amp;</span>f28<span class="op">,&amp;</span>f29<span class="op">,</span></span>
<span id="cb23-20"><a href="#cb23-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f30<span class="op">,&amp;</span>f31<span class="op">,&amp;</span>f32<span class="op">,&amp;</span>f33<span class="op">,&amp;</span>f34<span class="op">,&amp;</span>f35<span class="op">,&amp;</span>f36<span class="op">,&amp;</span>f37<span class="op">,&amp;</span>f38<span class="op">,&amp;</span>f39<span class="op">,</span></span>
<span id="cb23-21"><a href="#cb23-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">&amp;</span>f40<span class="op">,&amp;</span>f41<span class="op">,&amp;</span>f42<span class="op">,&amp;</span>f43<span class="op">,&amp;</span>f44<span class="op">,&amp;</span>f45<span class="op">,&amp;</span>f46<span class="op">,&amp;</span>f47<span class="op">,&amp;</span>f48<span class="op">,&amp;</span>f49<span class="op">,</span></span>
<span id="cb23-22"><a href="#cb23-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb23-23"><a href="#cb23-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> sz <span class="op">=</span> <span class="kw">sizeof</span> <span class="op">(</span>fs<span class="op">)</span> <span class="op">/</span> <span class="kw">sizeof</span> <span class="op">(</span>fs<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb23-24"><a href="#cb23-24" aria-hidden="true" tabindex="-1"></a>    fs<span class="op">[</span>i <span class="op">%</span> sz<span class="op">]();</span></span>
<span id="cb23-25"><a href="#cb23-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb23-26"><a href="#cb23-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-27"><a href="#cb23-27" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> l<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[]);</span></span>
<span id="cb23-28"><a href="#cb23-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb23-29"><a href="#cb23-29" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span> <span class="op">{</span></span>
<span id="cb23-30"><a href="#cb23-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">==</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb23-31"><a href="#cb23-31" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">25</span><span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb23-32"><a href="#cb23-32" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb23-33"><a href="#cb23-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>argc <span class="op">==</span> <span class="dv">2</span><span class="op">)</span></span>
<span id="cb23-34"><a href="#cb23-34" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">25</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">50</span><span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb23-35"><a href="#cb23-35" aria-hidden="true" tabindex="-1"></a>        f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb23-36"><a href="#cb23-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE on <strong>gcc-12</strong> or <strong>gcc-11</strong>:</p>
<pre><code>$ gcc -flto -O0 a.c -fprofile-generate -o a
$ ./a # populate first 25 buckets
$ ./a 1 # populate 25 more buckets, cause overflow
$ gcc -flto -O0 a.c -fprofile-use -o a

during IPA pass: modref
a.c:36:1: internal compiler error: in stream_out_histogram_value, at value-prof.cc:340
   36 | }
      | ^
0x8351fb stream_out_histogram_value(output_block*, histogram_value_t*)
        ../../gcc-12-20220410/gcc/value-prof.cc:340
0x1c848c0 output_gimple_stmt
        ../../gcc-12-20220410/gcc/gimple-streamer-out.cc:192
0x1c848c0 output_bb(output_block*, basic_block_def*, function*)
        ../../gcc-12-20220410/gcc/gimple-streamer-out.cc:227
0xdc91ad output_function
        ../../gcc-12-20220410/gcc/lto-streamer-out.cc:2453
0xdc91ad lto_output()
        ../../gcc-12-20220410/gcc/lto-streamer-out.cc:2796
0xe57b11 write_lto
        ../../gcc-12-20220410/gcc/passes.cc:2762
0xe57b11 ipa_write_summaries_1
        ../../gcc-12-20220410/gcc/passes.cc:2826
0xe57b11 ipa_write_summaries()
        ../../gcc-12-20220410/gcc/passes.cc:2882
0xaac060 ipa_passes
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2209
0xaac060 symbol_table::compile()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2282
0xaaea77 symbol_table::compile()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2262
0xaaea77 symbol_table::finalize_compilation_unit()
        ../../gcc-12-20220410/gcc/cgraphunit.cc:2530</code></pre>
<p>Here the bug is in <strong>stream_out_histogram_value()</strong> function which
tried to stream out on disk perfectly valid profile details around
<strong>main()</strong>:</p>
<pre><code>$ gcov-dump -l a.gcda
...
a.gcda:    01a90000: 528:COUNTERS indirect_call 66 counts
a.gcda:                   0: -50 32 1456173180 1 1792104613 1 918340114 1
a.gcda:                   8: 1406444659 1 263798468 1 1664310260 1 1063174467 1
a.gcda:                  16: 1596551981 1 54847898 1 533075953 1 1135316294 1
a.gcda:                  24: 601636648 1 2142348703 1 450479102 1 1186224457 1
a.gcda:                  32: 416313568 1 1153296983 1 617240633 1 2024260238 1
a.gcda:                  40: 1680162021 1 944285266 1 1480528956 1 72519307 1
a.gcda:                  48: 1631250666 1 1029141085 1 941945699 1 1682532820 1
a.gcda:                  56: 71228346 1 1481851149 1 1154596710 1 414983633 1
a.gcda:                  64: 2026608575 1</code></pre>
<p>The <strong>-50</strong> is our “total” count of indirections. It’s negative because
<strong>25</strong> calls from first run were merged with <strong>25</strong> calls from second call.
Histograms have a limit of <strong>32</strong> unique values. The other 18 were discarded.
Negative count signals this fact.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/value-prof.c;h=42748771192f8302cfe637d23d589848d9b8fcb7;hb=1eee4e08a64f6e931b0c5dd1bb854a2b7ad3d58f#l311">gcc/value-prof.cc:stream_out_histogram_value()</a>
was too strict on it’s assumption around counter types:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode cc"><code class="sourceCode cpp"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>stream_out_histogram_value <span class="op">(</span><span class="kw">struct</span> output_block <span class="op">*</span>ob<span class="op">,</span> histogram_value hist<span class="op">)</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> hist<span class="op">-&gt;</span>n_counters<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* When user uses an unsigned type with a big value, constant converted</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a><span class="co">         to gcov_type (a signed type) can be negative.  */</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>      <span class="dt">gcov_type</span> value <span class="op">=</span> hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>counters<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(</span>hist<span class="op">-&gt;</span>type <span class="op">==</span> HIST_TYPE_TOPN_VALUES</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a>          <span class="op">||</span> hist<span class="op">-&gt;</span>type <span class="op">==</span> HIST_TYPE_IOR<span class="op">)</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">/* Note that the IOR counter tracks pointer values and these can have</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a><span class="co">           sign bit set.  */</span></span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">;</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a>      <span class="cf">else</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>        gcc_assert <span class="op">(</span>value <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>      streamer_write_gcov_count <span class="op">(</span>ob<span class="op">,</span> value<span class="op">);</span></span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>next<span class="op">)</span></span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>    stream_out_histogram_value <span class="op">(</span>ob<span class="op">,</span> hist<span class="op">-&gt;</span>hvalue<span class="op">.</span>next<span class="op">);</span></span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <strong>gcc</strong> asserts that every value in <strong>TOPN</strong> couters has to be non-negative.
Was trivial <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=7b879564ec2bda6b5441fbaf231d70ec6359db01">to fix</a>
by skipping first “total” counter that could be negative on overflows like above:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/value-prof.c</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/value-prof.c</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -336,6 +336,10 @@ stream_out_histogram_value (struct output_block *ob, histogram_value hist)</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>        /* Note that the IOR counter tracks pointer values and these can have</span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>           sign bit set.  */</span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>        ;</span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a><span class="va">+      else if (hist-&gt;type == HIST_TYPE_INDIR_CALL &amp;&amp; i == 0)</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a><span class="va">+       /* 'all' counter overflow is stored as a negative value. Individual</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a><span class="va">+          counters and values are expected to be non-negative.  */</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a><span class="va">+       ;</span></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>       else</span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>        gcc_assert (value &gt;= 0);</span></code></pre></div>
<p>So much behind this three-liner.</p>
<h1 id="final-words">final words</h1>
<p>Profiler bugs are frequently hard. Mechanical reduction on real program
is usually very fragile: most material code changes change both generated
instrumented code and break the program on training run. It’s “infeasible”
to incrementally reduce both program and input data for large projects
like <strong>firefox</strong> or <strong>python</strong>.</p>
<p>I say “infeasible” as I successully reduced
<strong>tauthon</strong> once in <a href="https://gcc.gnu.org/PR96394" class="uri">https://gcc.gnu.org/PR96394</a>. It took me almost 2 months
to extract small reproducer manually. I don’t think I’ll do it ever again :)</p>
<p>First time it was fun: I found a lot more than I imagined about <strong>python</strong>
implementation: how it embeds it’s own bytecode into executable, how bootstrap
python loads the rest of python modules using this bootstrap code.</p>
<p>When faced with another prof failure in <strong>python</strong> in <a href="https://gcc.gnu.org/PR105282" class="uri">https://gcc.gnu.org/PR105282</a>
I initially thought it would be impossible for me to do it again from
scratch. On top of that it added <strong>-flto</strong> to make things even less
manageable. But I was lucky to reproduce the crash and derive the
reproducer out of <strong>gdb</strong> backtrace.</p>
<p><strong>PGO</strong>-style builds have another unusual property: they are very dependent
on input training data and on any internal non-determinism your program
has. For example, if your program uses random-seeded hash tables you
will get slightly different profile outputs from run to run.</p>
<p>Slightly different profile outputs lead to slightly different
optimization decision during compilation. Different decisions lead to
different output binaries. Without special effort you will probably get
unique binary every time you build a real world project with <strong>PGO</strong>
support.</p>
<p>It might not be a big deal with regards to performance of final binary.
But it might be quite a headache if one of such rare states causes
compiler to generate invalid result. It might be very hard to reproduce
(and fix).</p>
<p>But if you have to deal with <strong>PGO</strong> bugs then try to look straight into
what <strong>gcc</strong> is doing.</p>
<p>Have fun!</p>

<div class="info">
    Posted on May  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>gcc-12 journey</title>
    <link href="http://trofi.github.io/posts/242-gcc-12-journey.html" />
    <id>http://trofi.github.io/posts/242-gcc-12-journey.html</id>
    <published>2022-04-24T00:00:00Z</published>
    <updated>2022-04-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: gcc-12 journey</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>gcc-12 journey</h1>

            <p>It’s the end of April. This <a href="https://gcc.gnu.org/releases.html">means</a>
<strong>gcc-12</strong> will likely get released soon.</p>
<p>6 months passed since I wrote about fancy bugs in development versions
of <strong>gcc</strong>. Nowadays I use <a href="https://gcc.gnu.org/pub/gcc/snapshots/LATEST-12/">weekly gcc snapshots</a>
against <strong>nixpkgs</strong> tree. Usually I rebuild just my system against
weekly <strong>gcc</strong> shapshots. But sometimes I build random packages to check
how <strong>gcc</strong> behaves on more exotic code bases. Most of the time
everything Just Works. It would be too boring if things worked all the
time.</p>
<p>Since November 2021 I encountered ~30 <strong>gcc</strong> bugs which
makes it roughly one bug a week. I could hardly handle more than that.</p>
<p>I’ll list most of these bugs below. ICEs (internal compiler errors) are
usually the easiest to find and report. Wrong-code bugs are more
interesting and are also way harder to minimize and report.</p>
<p>I usually get to know a lot more about <strong>gcc</strong> from wrong-code cases.
This time I got only two of them. I’ll start from them.</p>
<h1 id="fipa-modref-strikes-again">-fipa-modref strikes again</h1>
<p><a href="https://gcc.gnu.org/PR103432">ipa/103432</a>: <strong>gcc</strong> miscompiled
<strong>libjxl</strong> in a way that test suite started failing.</p>
<p>I can’t provide a small failure example as the bug requires specific
inline to happen within one compilation.</p>
<p>The effect program result difference when built with <strong>-O0</strong> versus
<strong>-O2</strong>. The test was a floating point workload. Those always have a
potential of being not-a-bug, but an expected precision loss (like
<strong>fma()</strong> precision increase).</p>
<p>It took me a while to reduce original test manually to something that
is still a valid program but is small enough to be able to debug it.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a70faf6e4df7481c2c9a08a06657c20beb3043de">The fix</a>
tells us what kind of error it was in <strong>gcc</strong>: information about inferred
effects of functions was calculated but not actually used, something
else’s ditails were used. It’s a nasty kind of bugs: things work for
smaller programs and break only in non-trivial scenarios.</p>
<p>I’m glad I spent some time to extract the reproducer.</p>
<h1 id="global-constructors-wrong-code">global constructors wrong code</h1>
<p><a href="https://gcc.gnu.org/PR104031">c++/104031</a>: <strong>gcc</strong> generated
wrong global initializer for <strong>nix</strong>. Minimal example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> vector</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  vector<span class="op">(){}</span>  <span class="op">~</span>vector<span class="op">(){}</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Info <span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    vector args<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> arity <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> RegisterPrimOp</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">[[</span><span class="ex">gnu::noipa</span><span class="op">,</span><span class="at"> </span><span class="ex">gnu::noinline</span><span class="op">]]</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    RegisterPrimOp<span class="op">(</span>Info info<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>info<span class="op">.</span>arity <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>            <span class="fu">__builtin_trap</span><span class="op">();</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> RegisterPrimOp <span class="va">s_op</span><span class="op">({</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>args <span class="op">=</span> vector<span class="op">{},</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">.</span>arity <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="op">});</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{}</span></span></code></pre></div>
<p>The code’s idea is to always have <strong>arity</strong> initialized to <strong>0</strong>. In
practice <strong>gcc-12</strong> managed to put something else into <strong>arity</strong>:</p>
<pre><code># ok:
$ g++-11.2.0 main.cc -o main -O2 &amp;&amp; ./main

# bad:
$ g++-12.0.0 main.cc -o main -O2 &amp;&amp; ./main
Illegal instruction (core dumped)</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=aeca44768d54b089243004d1ef00d34dfa9f6530">The fix</a>
sheds some light into why it happens: this declaration syntax is special
and it was not handled in some definitions. As a result <strong>arity</strong> was
uninitialized.</p>
<h1 id="type-comparison-ice">type comparison ICE</h1>
<p><a href="https://gcc.gnu.org/PR103279">c++/101715</a>: <strong>gcc</strong> ICE
on clang’s <strong>compiler-rt</strong> library. Minimized example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> A<span class="op">&gt;</span> <span class="kw">struct</span> S <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> bar<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">);</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> foo<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">);</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> A<span class="op">&gt;</span> S<span class="op">&lt;</span>A<span class="op">&gt;</span> <span class="op">&amp;</span> S<span class="op">&lt;</span>A<span class="op">&gt;::</span>foo<span class="op">()</span> <span class="kw">noexcept</span><span class="op">(</span>A<span class="op">::</span>value<span class="op">)</span> <span class="op">{}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 -c a.c.cpp -std=c++14
# no crash

$ g++-12.0.0 -c a.c.cpp -std=c++17
a.c.cpp:6:56: internal compiler error: canonical types differ for identical types 'S&lt;A&gt;&amp; (S&lt;A&gt;::)() noexcept (A::value)' and 'S&lt;A&gt;&amp; (S&lt;A&gt;::)() noexcept (A::value)'
    6 | template &lt;class A&gt; S&lt;A&gt; &amp; S&lt;A&gt;::foo() noexcept(A::value) {}
      |                                                        ^
0xc3f6ee comptypes(tree_node*, tree_node*, int)
        ../../gcc-12-20211226/gcc/cp/typeck.c:1558
...</code></pre>
<p>Note that <strong>-std=c++14</strong> is not enough to trigger the failure. <strong>gcc-11</strong>
did change the default from <strong>gnu++14</strong> to <strong>gnu++17</strong>.</p>
<p>Sometimes <strong>gcc</strong> needs to compare types for equality. That usually
happens in template instantiation when closest specialization is picked.
It might sound easy, but the subtlety is in details: template types can
refer to other (possibly not yet defined) template types in their
definition.</p>
<p>When instantiation happens it’s crucial to resolve identical types into
the same canonical type.</p>
<p>In the <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=3abcbf243239f9576a60f4ce7f8ee4b3fa14784b">commit message</a>
Marek added great explataion how canonical types came into divergence.</p>
<h1 id="null-warnings-in-dynamic_cast-expressions">null warnings in dynamic_cast expressions</h1>
<p><a href="https://gcc.gnu.org/PR96003">c++/96003</a>: <strong>gcc</strong> failed to build
<strong>firefox</strong> (due to <strong>-Werror=null</strong>). Minimized example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>A <span class="op">();</span> <span class="op">};</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>B <span class="op">();</span> <span class="dt">void</span> f <span class="op">();</span> <span class="op">};</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f <span class="op">(</span>A <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span><span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">))</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">)-&gt;</span>f <span class="op">();</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Build error:</p>
<pre><code>$ gcc -O2 -S -Wall t.C
t.C: In function ‘void f(A*)’:
t.C:7:29: warning: ‘this’ pointer is null [-Wnonnull]
    7 |     dynamic_cast&lt;B*&gt;(p)-&gt;f ();
      |                             ^
t.C:2:32: note: in a call to non-static member function ‘void B::f()’
    2 | struct B { virtual ~B (); void f (); };
      |                                ^</code></pre>
<p>This time it’s not an <strong>ICE</strong> but a seemingly reasonable warning.
Ideally original code should be restructured into something simpler, like:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> A <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>A <span class="op">();</span> <span class="op">};</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> B <span class="op">{</span> <span class="kw">virtual</span> <span class="op">~</span>B <span class="op">();</span> <span class="dt">void</span> f <span class="op">();</span> <span class="op">};</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f <span class="op">(</span>A <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    B <span class="op">*</span> b <span class="op">=</span> <span class="kw">dynamic_cast</span><span class="op">&lt;</span>B<span class="op">*&gt;(</span>p<span class="op">);</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>b<span class="op">)</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        b<span class="op">-&gt;</span>f <span class="op">();</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=df5cf47a978aaeb53fc2b18ff0b22eb4531a27d8">The fix</a>
suppressed warnings for some cases where similar code is generated by
<strong>gcc</strong> itself (instead of being handwritten). More complicated cases
will still issue warnings.</p>
<p>You might need to clean your code up to avoid similar warnings.</p>
<h1 id="vectored-intrinsics-ice">vectored intrinsics ICE</h1>
<p><a href="https://gcc.gnu.org/PR102080">middle-end/102080</a>: <strong>gcc</strong> ICE
on <strong>firefox</strong> build. Minimized example:</p>
<pre class="c+++"><code>// cat dec_reconstruct.cc.cc
#pragma GCC target &quot;avx&quot;
typedef float __m256 __attribute__((__vector_size__(32)));
__m256 _mm256_blendv_ps___Y, _mm256_blendv_ps___M, _mm256_mul_ps___A,
    _mm256_mul_ps___B, IfThenElse___trans_tmp_9;
void IfThenElse(__m256 no) {
  IfThenElse___trans_tmp_9 = __builtin_ia32_blendvps256(
      no, _mm256_blendv_ps___Y, _mm256_blendv_ps___M);
}
#pragma GCC target &quot;avx512vl&quot;
void EncodedFromDisplay() {
  __m256 __trans_tmp_11 = _mm256_mul_ps___A * _mm256_mul_ps___B;
  IfThenElse(__trans_tmp_11);
}</code></pre>
<p>ICE:</p>
<pre><code>$ /tmp/gcc-c/gcc/xg++ -B/tmp/gcc-c/gcc -c dec_reconstruct.cc.cc -O0
# no crash

$ /tmp/gcc-c/gcc/xg++ -B/tmp/gcc-c/gcc -c dec_reconstruct.cc.cc -O2
during RTL pass: expand
dec_reconstruct.cc.cc: In function 'void EncodedFromDisplay()':
dec_reconstruct.cc.cc:10:6: internal compiler error: in expand_insn, at optabs.c:7946
   10 | void EncodedFromDisplay() {
      |      ^~~~~~~~~~~~~~~~~~</code></pre>
<p>The sample is not very readable but it’s essentially a direct call of
<strong>__builtin_ia32_blendvps256()</strong> <strong>AVX</strong> intrinsic. Those usually get
translated 1-to-1 into CPU instructions.</p>
<p>Here the crash happens in <strong>expand_insn()</strong> where middle end expands
<strong>GIMPLE</strong> (C style tree-like representation) into <strong>RTL</strong> (assembly style
instruction-like representation). Assertion complains about unexpected
arguments.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a26ff83ed07e33c4aa46f3314553c0d15ca21100">The fix</a>
adjusts one of <strong>GIMPLE</strong> simplifiers to not generate invalid <strong>GIMPLE</strong>
around vectored conditionals.</p>
<h1 id="atomics-intrinsics-ice">atomics intrinsics ICE</h1>
<p><a href="https://gcc.gnu.org/PR103268">tree-optimization/103268</a>: <strong>gcc</strong> ICE
on <strong>glib</strong> build. Minimized example:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> si<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>test_types <span class="op">(</span><span class="dt">long</span> n<span class="op">)</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> <span class="dt">int</span> u2 <span class="op">=</span> __atomic_fetch_xor <span class="op">(&amp;</span>si<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">5</span><span class="op">);</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> u2<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ gcc -O2 -S x.c
during GIMPLE pass: fab
x.c: In function ‘test_types’:
x.c:3:1: internal compiler error: in optimize_atomic_bit_test_and, at tree-ssa-ccp.c:3645
    3 | test_types (long n)
      | ^~~~~~~~~~
0x1515c9d optimize_atomic_bit_test_and
    /export/gnu/import/git/gitlab/x86-gcc/gcc/tree-ssa-ccp.c:3645</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=074ee8d9a91d7573c1e8774a22e4e08f923adb18">The fix</a>
suggests the tree matcher had an accident fall-through code.
It was supposed to reject unhandled cases instead of attempting
to generate something nonsensical.</p>
<h1 id="vectored-instructions-selector-ice">vectored instructions selector ICE</h1>
<p><a href="https://gcc.gnu.org/PR103557">target/103557</a>: <strong>gcc</strong> ICE
on <strong>tpm2-tss</strong> build. Minimized example:</p>
<pre><code>struct {
  char sm3_256[32];
} TPMU_HA;
typedef struct {
  short size;
  char buffer[sizeof(TPMU_HA)];
} TPM2B_DIGEST;
typedef struct {
  TPM2B_DIGEST auths[3];
} TSS2L_SYS_AUTH_COMMAND;

void Tss2_Sys_Clear(TSS2L_SYS_AUTH_COMMAND);

void sysContext(void) {
  TPM2B_DIGEST nonce = {};
  TSS2L_SYS_AUTH_COMMAND sessionsDataIn = {{nonce}};
  Tss2_Sys_Clear(sessionsDataIn);
}</code></pre>
<p>ICE:</p>
<pre><code>$ gcc-12.0.0 -O2  -c a.c.c -o a.o
during RTL pass: sched2
a.c.c: In function 'sysContext':
a.c.c:19:1: internal compiler error: Segmentation fault
   19 | }
      | ^
0x1e22687 internal_error(char const*, ...)
        ???:0
0xe7e43c memory_operand(rtx_def*, machine_mode)
        ???:0
0x167e598 get_attr_memory(rtx_insn*)
        ???:0
0x19a4bc0 insn_default_latency_generic(rtx_insn*)
        ???:0
0x1c74ad3 insn_sched_cost(rtx_insn*)
        ???:0
0x1c77934 dep_cost_1(_dep*, unsigned int)
        ???:0
0x1c79d7f set_priorities(rtx_insn*, rtx_insn*)
        ???:0
0xec28e2 compute_priorities()
        ???:0</code></pre>
<p>In this case instruction selector fails to fetch the details
around memory reference accessed by instruction.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=9519b694afbf9a35c36cf9f14d35d1c0e9e8cacc">The change</a>
fixes <strong>x86</strong>-specific vectored instruction definitions to accept
expected inputs.</p>
<h1 id="another-atomics-ice">another atomics ICE</h1>
<p><a href="https://gcc.gnu.org/PR103682">tree-optimization/103682</a>: <strong>gcc</strong> ICE
on some cryptographic code. Minimized example:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;atomic&gt;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> bug<span class="op">(</span><span class="bu">std::</span>atomic<span class="op">&lt;</span><span class="dt">unsigned</span><span class="op">&gt;</span> <span class="op">&amp;</span> ready<span class="op">,</span> <span class="dt">unsigned</span> u<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">(</span>ready<span class="op">.</span>fetch_and<span class="op">(~</span>u<span class="op">)</span> <span class="op">&amp;</span> u<span class="op">);</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 -Ofast -c bug.cpp
during GIMPLE pass: fab
bug.cpp: In function 'bool bug(std::atomic&lt;unsigned int&gt;&amp;, unsigned int)':
bug.cpp:6:6: internal compiler error: gimple check: expected gimple_assign(error_mark), have gimple_nop() in gimple_assign_rhs_code, at gimple.h:2852
    6 | bool bug(std::atomic&lt;unsigned&gt; &amp; ready, unsigned u) {
      |      ^~~
0x20a58f7 internal_error(char const*, ...)
        ???:0
0x7c76dd gimple_check_failed(gimple const*, char const*, int, char const*, gimple_code, tree_code)
        ???:0</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=a2a0c91b47537b16908981e206f4e42db8425eca">The fix</a>
shows us it was another case where one particular case of <strong>GIMPLE</strong>
form was not handled.</p>
<h1 id="another-template-instantiation-ice">another template instantiation ICE</h1>
<p><a href="https://gcc.gnu.org/PR103769">c++/103769</a>: <strong>gcc</strong> ICE
on <strong>openttd</strong>. Minimized example:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">&gt;</span> <span class="kw">using</span> t <span class="op">=</span> T<span class="op">;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">...&gt;</span> <span class="kw">struct</span> s<span class="op">;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">...</span> Args<span class="op">&gt;</span> s<span class="op">&lt;</span>t<span class="op">&lt;</span>Args<span class="op">&gt;...&gt;</span> f<span class="op">()</span> <span class="op">{</span> f<span class="op">&lt;</span><span class="dt">void</span><span class="op">&gt;();</span> <span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ g++-12.0.0 --param=hash-table-verification-limit=1000 -O1 -o a.o -c bug.cpp

hash table checking failed: equal operator returns true for a pair of values with a different hash value
bug.cpp: In substitution of 'template&lt;class ... Args&gt; s&lt;Args ...&gt; f() [with Args = {void}]':
bug.cpp:3:56:   required from here
bug.cpp:3:43: internal compiler error: in hashtab_chk_error, at hash-table.c:137
    3 | template &lt;typename... Args&gt; s&lt;t&lt;Args&gt;...&gt; f() { f&lt;void&gt;(); }
      |                                           ^
0x9c316d hashtab_chk_error()
        ../../gcc-12-20220102/gcc/hash-table.c:137
0xbeca15 hash_table&lt;spec_hasher, false, xcallocator&gt;::verify(spec_entry* const&amp;, unsigned int)
        ../../gcc-12-20220102/gcc/hash-table.h:1036
0xbecb6f hash_table&lt;spec_hasher, false, xcallocator&gt;::find_with_hash(spec_entry* const&amp;, unsigned int)
        ../../gcc-12-20220102/gcc/hash-table.h:921
0xbd58bc lookup_template_class_1
        ../../gcc-12-20220102/gcc/cp/pt.c:9905</code></pre>
<p>This is aanother <strong>c++</strong> frontend bug where identical types have
different objects. Here I found out about <strong>--param=hash-table-verification-limit=1000</strong>
option which enables more frequent type mismatches like this.
Without this option the bug disappears when program is still large.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=07be8f8da4c6840a1fd6b2229b147e50cc6f03dc">The change</a>
shows it was a case of reused type object in typedef simplification.</p>
<h1 id="yet-another-vectored-expansion-ice">yet another vectored expansion ICE</h1>
<p><a href="https://gcc.gnu.org/PR103842">target/103842</a>: <strong>gcc</strong> ICE
on <strong>ilmbase-2.5.7</strong>. Minimized example:</p>
<pre><code>void abs(float *);
struct Matrix33 {
  float x[3][3];
  float *operator[](int i) { return x[i]; }
  Matrix33();
  Matrix33(float f, float g) {
    x[1][0] = x[1][1] = x[1][2] = f;
    x[2][0] = g;
  }
  void equalWithAbsError();
  Matrix33 inverse() {
    Matrix33 s(x[1][2] - x[1][2], x[1][1] - x[1][1]);
    float r = s[2][0];
    if (r)
      for (int i = 0; i &lt; 3; ++i)
        for (int j = 0; j &lt; 3; ++j)
          s[i][j] /= r;
    for (int i = 0;;) {
      float *__trans_tmp_2 = s[i];
      abs(__trans_tmp_2);
    }
  }
};
void __assert_fail() {
  Matrix33 m, inv1 = m.inverse(), ident1 = inv1;
  ident1.equalWithAbsError();
}</code></pre>
<p>ICE:</p>
<pre><code>
$ g++-12.0.0 -O3 -c bug.cpp.cpp
during RTL pass: expand
bug.cpp.cpp: In function 'void __assert_fail()':
bug.cpp.cpp:27:5: internal compiler error: Segmentation fault
   27 |     }
      |     ^
0x21196c6 internal_error(char const*, ...)
        ???:0</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=242783c52c22ed96eae722b2fa9847711ac84699">The change</a>
fixes another case of <strong>x86</strong>-specific instruction selector that
generates unexpected instruction parameters.</p>
<h1 id="one-more-vectored-instruction-ice">one more vectored instruction ICE</h1>
<p><a href="https://gcc.gnu.org/PR103894">target/103894</a>: <strong>gcc</strong> ICE
on <strong>valgrind</strong>.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=1096ab1775636f35de9c6661f8f71f03299af998">The change</a>
fixes marking of available SSE instructions in 32-bit mode.</p>
<h1 id="precompiled-headers">precompiled headers</h1>
<p><a href="https://gcc.gnu.org/PR103910">target/103910</a>: <strong>gcc</strong> ICE
on <strong>openjdk</strong>. Minimized example:</p>
<pre><code>#include &quot;precompiled.hpp&quot;
void *operator new(unsigned long, void *__p) { return __p; }
#define MEMORY_TYPES_DO(f) f(mtNone, )
enum MEMFLAGS {};
#define MEMORY_TYPE_SHORTNAME(type, human_readable) MEMFLAGS type;
MEMORY_TYPES_DO(MEMORY_TYPE_SHORTNAME) struct GrowableArrayView {
  GrowableArrayView(int *, int, int);
};
int *GrowableArrayWithAllocator_data;
struct GrowableArrayWithAllocator : GrowableArrayView {
  GrowableArrayWithAllocator(int initial_max)
      : GrowableArrayView(GrowableArrayWithAllocator_data, initial_max, 0) {
    for (int i = 0; i &lt; initial_max; i++)
      new (&amp;GrowableArrayWithAllocator_data[i]) int();
  }
};
struct GrowableArrayMetadata {
  GrowableArrayMetadata(MEMFLAGS);
};
struct GrowableArray : GrowableArrayWithAllocator {
  GrowableArrayMetadata _metadata;
  GrowableArray(int initial_max)
      : GrowableArrayWithAllocator(initial_max), _metadata(mtNone) {}
};
struct SourceObjList {
  SourceObjList();
};
SourceObjList::SourceObjList() { GrowableArray(128 * 1024); }</code></pre>
<p>ICE:</p>
<pre><code>$ rm -rf ph
$ mkdir -p ph
$ touch precompiled_.hpp # create empty file
$ ./xg++ -B. -O3 -march=opteron -fcheck-new -c precompiled_.hpp -o ph/precompiled.hpp.gch
$ ./xg++ -B. -O3 -march=opteron -fcheck-new -Iph -c archiveBuilder.cpp -o a.o

during GIMPLE pass: aprefetch
archiveBuilder.cpp: In constructor ‘SourceObjList::SourceObjList()’:
archiveBuilder.cpp:28:1: internal compiler error: in gimple_build_call, at gimple.c:267
   28 | SourceObjList::SourceObjList() { GrowableArray(128 * 1024); }
      | ^~~~~~~~~~~~~
0xd2845f gimple_build_call(tree_node*, unsigned int, ...)
        gcc/gimple.c:267
0x12880c8 emit_mfence_after_loop
        gcc/tree-ssa-loop-prefetch.c:1300
0x12880c8 mark_nontemporal_stores
        gcc/tree-ssa-loop-prefetch.c:1359
0x12880c8 loop_prefetch_arrays
        gcc/tree-ssa-loop-prefetch.c:1955
0x12880c8 tree_ssa_prefetch_arrays()
        gcc/tree-ssa-loop-prefetch.c:2031
0x1288be9 execute
        gcc/tree-ssa-loop-prefetch.c:2097</code></pre>
<p>This is an unusual and scary case: precompiled headers are implemented
as a serialization of part of <strong>gcc</strong> heap. The serialization tries
hard to be very fast and cuts corners in various places. Up to the point
where building positional-independent <strong>gcc</strong> binary breaks <strong>GCH</strong>:
<a href="https://gcc.gnu.org/PR71934" class="uri">https://gcc.gnu.org/PR71934</a>. It’s very fragile. It does not have to be.</p>
<p>To make <strong>GCH</strong> somehow work <strong>gcc</strong>’s internals have garbage collector
implementation. It requires global variables to be annotated with
<strong>gcc</strong>-specific <a href="https://gcc.gnu.org/onlinedocs//gccint/GTY-Options.html">GTY markings</a>
that describe heap layout.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=d243f4009d8071b734df16cd70f4c5d09a373769">The change</a>
hints at an <strong>x86_mfence</strong> global variable that did not have the marking.</p>
<p>Why did it break only with <strong>GCH</strong>?</p>
<p>Without <strong>GCH</strong>, <strong>x86_mfence</strong> is referenced via another global object which
has <strong>GTY</strong> marking. Both are constructed via normal means of <strong>gcc</strong>
parsing the source.</p>
<p>With GCH, that another global object is restored at a different location
and the decl that is refenced by <strong>x86_mfence</strong> is GC’ed out.</p>
<h1 id="c-frontend-constructor-ice">C++ frontend constructor ICE</h1>
<p><a href="https://gcc.gnu.org/PR104583">c++/103910</a>: <strong>gcc</strong> ICE
on <strong>dolphin-emu</strong>. Minimized example:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> TVec3 <span class="op">{</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>  TVec3<span class="op">();</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> data<span class="op">;</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>using Vec3 <span class="op">=</span> TVec3<span class="op">;</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>  Vec3 position<span class="op">{};</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> EmulatePoint_state<span class="op">;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> EmulatePoint<span class="op">()</span> <span class="op">{</span> EmulatePoint_state <span class="op">=</span> <span class="op">{};</span> <span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/gcc/xg++ -B/tmp/gcc -c bug.cc -freport-bug
bug.cc: In function ‘void EmulatePoint()’:
bug.cc:9:42: internal compiler error: in cp_gimplify_expr, at cp/cp-gimplify.cc:746
    9 | void EmulatePoint() { EmulatePoint_state = {}; }
      |                       ~~~~~~~~~~~~~~~~~~~^~~~
0x7a0fb2 cp_gimplify_expr(tree_node**, gimple**, gimple**)
        gcc/cp/cp-gimplify.cc:746
0xd9fb80 gimplify_expr(tree_node**, gimple**, gimple**, bool (*)(tree_node*), int)
        gcc/gimplify.cc:14893
0xdab095 gimplify_init_ctor_preeval
        gcc/gimplify.cc:4678</code></pre>
<p>In this case <strong>gcc</strong> was unable to generate <strong>GIMPLE</strong> out of
<strong>EmulatePoint_state = {};</strong> statement.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=f8c1f29a0b47b4b4a3c1506678f7ca2ce4b7ffbb">The change</a>
expands set of cases that look like a constructor call.</p>
<h1 id="fun-option-handling-bug">fun option handling bug</h1>
<p><a href="https://gcc.gnu.org/PR104705">middle-end/104705</a>: <strong>gcc</strong> ICEs when
tried to build <strong>ghc</strong>.</p>
<p>Normally I would expect <strong>ghc</strong> to be the last project to crash <strong>gcc</strong>
as it does not do anything fancy in C land. And yet here we are.
Minimized example:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC optimize &quot;foo&quot;</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC push_options</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma GCC pop_options</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/bg/gcc/xgcc -B/tmp/bg/gcc -c a.c  -O2 -Wall
a.c:1:9: warning: bad option ‘-ffoo’ to pragma ‘optimize’ [-Wpragmas]
    1 | #pragma GCC optimize &quot;foo&quot;
      |         ^~~
a.c:3:9: internal compiler error: ‘global_options’ are modified in local context
    3 | #pragma GCC pop_options
      |         ^~~</code></pre>
<p>A cryptic assert.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=111754595cf8d3a8ae7063a42ac4cea18a304711">The fix</a>
says that <strong>-g*</strong> option was not accounted for when option contexts are
created and destroyed with pragmas.</p>
<h1 id="unexpected-analyzer-ices">unexpected analyzer ICEs</h1>
<p><a href="https://gcc.gnu.org/PR105074">analyzer/105074</a>: <strong>gcc</strong> ICE when
tried to build <strong>gnutls</strong>.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> _gnutls_log<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*);</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> _gnutls_ocsp_verify_mandatory_stapling<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>  _gnutls_log<span class="op">(</span>__func__<span class="op">);</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> check_ocsp_response_gnutls_x509_cert_verify_peers<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>  _gnutls_ocsp_verify_mandatory_stapling<span class="op">();</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ /tmp/gb/gcc/xgcc -B/tmp/gb/gcc -O2 -fanalyzer -c cert-session.c

during IPA pass: analyzer
In function ‘_gnutls_ocsp_verify_mandatory_stapling’,
    inlined from ‘check_ocsp_response_gnutls_x509_cert_verify_peers’ at cert-session.c:7:3:
cert-session.c:4:3: internal compiler error: Segmentation fault
    4 |   _gnutls_log(__func__);
      |   ^~~~~~~~~~~~~~~~~~~~~
0xdd6bc3 crash_signal
        gcc/toplev.cc:322
0x8a8120 cgraph_node::get_edge(gimple*)
        gcc/cgraph.cc:744
0x121059c ipa_ref_requires_tracking
        gcc/analyzer/region.cc:1192
0x121059c symnode_requires_tracking_p
        gcc/analyzer/region.cc:1235
0x121059c ana::decl_region::calc_tracked_p(tree_node*)
        gcc/analyzer/region.cc:1254
0x1234786 ana::decl_region::decl_region(unsigned int, ana::region const*, tree_node*)</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=1203e8f7880c9751ece5f5302e413b20f4608a00">The change</a>
adjusts the checks for expressions without explicit declaration.</p>
<p>On a surface side it’s an obscure <strong>-fanalyzer</strong> crash on <strong><strong>func</strong></strong>
expression that should not pop up frequently. Perhaps <strong>gnutls</strong> is a
rare package that enables <strong>-fanalyser</strong>?</p>
<p>No. If we look at the source of <strong>-fanalyzer</strong> flag we’ll find that it’s
one of default warnings of … <a href="https://git.savannah.gnu.org/cgit/gnulib.git/commit/?id=3831e2e9f355c557b0c0ed9712548b62feaf694f"><strong>gnulib(!)</strong></a>.</p>
<p>We will probably see a lot more analyser crashes as it’s one of the
more complex pieces of <strong>gcc</strong>.</p>
<h1 id="ia64-rtl-mach-ice">ia64 RTL mach ICE</h1>
<p><a href="https://gcc.gnu.org/PR105215">target/105215</a>: <strong>gcc</strong> ICE
on <strong>openssl</strong> (<strong>ia64</strong> target).</p>
<p>Not fixed yet.</p>
<h1 id="ia64-rtl-mach-ice-1">ia64 RTL mach ICE</h1>
<p><a href="https://gcc.gnu.org/PR105247">target/105247</a>: <strong>gcc</strong> ICE
on <strong>sqlite-3.38.2</strong> (<strong>ia64</strong> target). Minimal example:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> sqlite3CodeVerifySchemaAtToplevel_pToplevel_0<span class="op">;</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3CodeVerifySchema<span class="op">();</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3FindInIndex_pParse<span class="op">()</span> <span class="op">{</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> i <span class="op">=</span> <span class="op">-</span><span class="dv">8</span><span class="op">;</span></span>
<span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a>  sqlite3CodeVerifySchema<span class="op">(</span>sqlite3FindInIndex_pParse<span class="op">,</span> i<span class="op">);</span></span>
<span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> sqlite3CodeVerifySchema<span class="op">(</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span> iDb<span class="op">)</span> <span class="op">{</span></span>
<span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>  sqlite3CodeVerifySchemaAtToplevel_pToplevel_0 <span class="op">|=</span> <span class="dv">1</span> <span class="op">&lt;&lt;</span> iDb<span class="op">;</span></span>
<span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>ICE:</p>
<pre><code>$ ia64-unknown-linux-gnu-gcc -O1 -c sqlite3-sqlite3.o.c -o a.o

during RTL pass: cse1
sqlite3-sqlite3.o.c: In function 'sqlite3FindInIndex_pParse':
sqlite3-sqlite3.o.c:7:1: internal compiler error: in decompose, at rtl.h:2288
    7 | }
      | ^
0xa02263 wi::int_traits&lt;&gt;::decompose()
        ../../gcc-12-20220410/gcc/rtl.h:2288
0xa02263 wide_int_ref_storage&lt;&gt;::wide_int_ref_storage&lt;&gt;()
        ../../gcc-12-20220410/gcc/wide-int.h:1024
0xa02263 generic_wide_int&lt;&gt;::generic_wide_int&lt;&gt;()
        ../../gcc-12-20220410/gcc/wide-int.h:782
0xa02263 wide_int_storage::wide_int_storage&lt;&gt;()</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=ba2f60499dd4a3bc1bb4e99fa12dda3bc1548519">The change</a>
has a great explanation of the details by Jakub: arithmetic shift
(to implement <strong>1 &lt;&lt; iDb</strong>) on <strong>ia64</strong> is slightly different from
other targets: it’s defined only for 64-bit type (<strong>long</strong> /
<strong>unsigned ulong</strong> types).</p>
<h1 id="popcount-and-libgcc">popcount and libgcc</h1>
<p><a href="https://gcc.gnu.org/PR105253">middle-end/105253</a>: <strong>gcc</strong> fails
to build <strong>linux</strong>. Minimal example:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>foo <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> <span class="op">*</span>p<span class="op">)</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> i<span class="op">,</span> cnt <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> elem<span class="op">;</span></span>
<span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="op">(</span><span class="dv">256</span> <span class="op">/</span> <span class="dv">64</span><span class="op">);</span> i<span class="op">++)</span></span>
<span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>      elem <span class="op">=</span> p<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(;</span> elem<span class="op">;</span> cnt<span class="op">++)</span></span>
<span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a>        elem <span class="op">&amp;=</span> elem <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> cnt<span class="op">;</span></span>
<span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Link error:</p>
<pre><code>ERROR: modpost: &quot;__popcountdi2&quot; [drivers/net/ethernet/broadcom/bnx2x/bnx2x.ko] undefined!
ERROR: modpost: &quot;__popcountdi2&quot; [drivers/gpu/drm/amd/amdgpu/amdgpu.ko] undefined!</code></pre>
<p>Long time ago <strong>gcc</strong> used to produce direct CPU instructions to
implement this code. Nowadays <strong>gcc</strong> recognises this pattern
and converts it to a <strong>__builtin_popcountl()</strong> call.</p>
<p>If CPU supports <strong>popcnt</strong> instruction then <strong>gcc</strong> emits it as is.
But if CPU has no support for it <strong>gcc</strong> generates <strong>__popcountdi2</strong>
external function call. <strong>__popcountdi2</strong> is implemented in <strong>libgcc</strong>
for all targets.</p>
<p>Normally such a replacement just works. But linux kernel does not use <strong>libgcc</strong> for
various rasons and prefers to re-implement such builtins (division,
shifts, memcpy, strlen operations). But <strong>popcout</strong> ones did not
occur frequently enough to be re-implemented in kernel.</p>
<p>One of the fixes would be to extend linux kernel with <strong>popcount</strong>.
But so far <strong>gcc</strong>
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=29c46490de4616b911fccb34a9479f768fb51e94">tweaked</a>
cost heuristics to avoid such conversion for targets that don’t have
efficient <strong>popcnt</strong>.</p>
<p>Until next time perhaps :)</p>
<h1 id="parting-words">Parting words</h1>
<p>Most of these bugs are short-lived and would have no chance to slip
into a release. Most ICEs are also not hard to workaround when
encountered.</p>
<p>The wrong-code bugs are the subtlest. These usually live for a while
until they get noticed.</p>
<p>Bug stats by subsystem:</p>
<ul>
<li>6 <strong>target</strong>: 3 vectorisation bugs, 2 <strong>ia64</strong> bugs, 1 <strong>GCH</strong> bug</li>
<li>5 <strong>c++</strong> frontend</li>
<li>3 <strong>middle-end</strong>: vectorisation, option parsing and popcount instruction one bug each</li>
<li>2 <strong>tree-opt</strong>: both are atomics bugs</li>
<li>1 <strong>ipa</strong></li>
<li>1 <strong>analyzer</strong></li>
</ul>
<p>If not for <strong>ia64</strong> bugs <strong>c++</strong> would be the primary source of bugs.</p>
<p><strong>gcc-12</strong> is very close to a release cut date. I hope it to be smooth.</p>
<p>As usual here is a list if notable changes for upcoming release:
<a href="https://gcc.gnu.org/gcc-12/changes.html" class="uri">https://gcc.gnu.org/gcc-12/changes.html</a></p>
<p>If you feel like it do give the <strong>gcc</strong> snapshot a try.</p>
<p>Have fun!</p>

<div class="info">
    Posted on April 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>nix gc speedup improvements</title>
    <link href="http://trofi.github.io/posts/241-nix-gc-speedup-improvements.html" />
    <id>http://trofi.github.io/posts/241-nix-gc-speedup-improvements.html</id>
    <published>2022-04-04T00:00:00Z</published>
    <updated>2022-04-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: nix gc speedup improvements</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>nix gc speedup improvements</h1>

            <p>I wondered the other day: why my <strong>nix store gc</strong> takes an hour to run
on a system with a few terabytes of garbage packages to clean up. Is it
a typical time or could something be optimised to make it slightly
faster?</p>
<p>I ran <strong>top</strong> while <strong>nix store gc</strong> was churning and noticed it was a
CPU-bound task. That was unusual.</p>
<h1 id="background">Background</h1>
<p><strong>nix</strong> package manager never changes files inplace when it installs new
packages into <strong>/nix/store</strong>. This makes installation and uninstallation
operations cheap: no need for <strong>sync()</strong>-style calls or file locks.</p>
<p>Single package installation could be viewed as 2 steps:</p>
<ol type="1">
<li>unpack new package to <strong>/nix/store/…-package-version</strong> (if it does
not already exist)</li>
<li>refer to unpacked files (usually via symlinks, via
scripts, configs or embedded binary)</li>
</ol>
<p>Uninstallation is just one step of undoing “[2.]”:</p>
<ol type="1">
<li>stop referring to the package (by creating a new closure of needed packages)</li>
</ol>
<p>This procedure does not require any file or directory removal.
On <strong>NixOS</strong> it’s a matter of updating a single <strong>/run/current-system</strong>
symlink.</p>
<p>As a result over normal lifetime the system accumulates unreferenced
packages as files and directories in <strong>/nix/store/</strong>. If you have enough
storage you can completely ignore these unreferenced files.</p>
<p>But sometimes it’s useful to delete unreferenced data to free up some
space or to check that there are no missing references in current package
closure. Such cleaning is done with <strong>nix-collect-garbage</strong>
(or <strong>nix store gc</strong>). Or their lower level sibling
<strong>nix-store --delete …</strong> (or <strong>nix store delete …</strong>).</p>
<h1 id="actual-gc-speed">Actual GC speed</h1>
<p>All the above sounds nice, but how fast that garbage collection is in
practice? Should it take 1 second, 1 minute or 1 hour on an average
system? On a heavily cluttered system?</p>
<p>Let’s find out! I have 2 systems:</p>
<ol type="1">
<li><p><strong>i7</strong> host: <strong>HDD</strong>-based 10+ years old web server with daily updates
which never saw a garbage collection run. It’s whole <strong>/nix/store</strong>
is 26GB.</p></li>
<li><p><strong>nz</strong> host: <strong>NVMe</strong>-based 1 year old desktop where I build A Lot of
packages daily and run garbage collection once a month. It’s whole
<strong>/nix/store</strong> is <strong>380GB</strong>.</p></li>
</ol>
<p><strong>i7</strong> dry run:</p>
<pre><code>$ time nix store gc --dry-run

real 3m18.522s
...</code></pre>
<p>~200 seconds. Is it a lot? The process touches no disk. According to
<strong>top</strong> it’s a CPU-bound problem. What does it do? Runnig
<strong>perf top -p $pid</strong> shows the following:</p>
<pre><code>$ sudo perf top -p 6217
&lt;wait 5 seconds&gt;
   6.82%  libstdc++.so.6.0.28  [.] std::istream::get
   6.12%  libc-2.33.so         [.] __memcmp_sse4_1
   4.51%  libcrypto.so.1.1     [.] sha256_block_data_order_avx
   4.18%  libstdc++.so.6.0.28  [.] std::istream::sentry::sentry
   3.91%  libnixstore.so       [.] nix::parseString
   2.73%  libc-2.33.so         [.] malloc
   2.55%  libsqlite3.so.0.8.6  [.] sqlite3VdbeExec
   2.31%  [kernel]             [k] syscall_exit_to_user_mode</code></pre>
<p>Looks like some string parsing and <strong>sqlite3</strong> reading. Could be
optimised a bit around that strange <strong>std::istream::get</strong> but
otherwise looks reasonable. Not exactly an interactive latency,
but not too bad if ran infrequently. Maybe there is just a lot
to do in this case?</p>
<p><strong>nz</strong> run:</p>
<pre><code>$ time nix store gc --dry-run

real    28m24,295s
...</code></pre>
<p>~1800 seconds. Almost half an hour! That is already way outside
interactive use of the tool. But maybe it’s fine for a system
with large amount of clutter? Let’s find out!</p>
<p>Checking for profile picture:</p>
<pre><code>$ sudo perf top -p 2531652
&lt;wait 5 seconds&gt;
  10,15%  libstdc++.so.6.0.28  [.] std::istream::get
   5,42%  libstdc++.so.6.0.28  [.] std::istream::sentry::sentry
   5,16%  libc-2.33.so         [.] __memcmp_avx2_movbe
   4,14%  [kernel]             [k] copy_user_enhanced_fast_string
   3,90%  libc-2.33.so         [.] _int_malloc
   3,03%  libc-2.33.so         [.] malloc
   2,38%  libnixstore.so       [.] nix::parseString
   2,30%  libsqlite3.so.0.8.6  [.] sqlite3VdbeExec</code></pre>
<p>The profile is very close to <strong>i7</strong> one: same <strong>std::istream::get</strong>
at the top and a <strong>memcmp()</strong> implementation that follows.</p>
<h1 id="the-first-attempt">The first attempt</h1>
<p>Profile clearly tells us that <strong>istream</strong> related parsing is the
bottleneck.</p>
<p>Quick quiz: does it?</p>
<p>The parser is supposed to extract <strong>/nix/store</strong> references out of
<strong>.drv</strong> files which usually look like the example below:</p>
<pre><code>$ nix show-derivation /nix/store/6xcvz9zp757knf005g4q1p451p6wslpk-ninja-1.10.2.drv

{
  &quot;/nix/store/6xcvz9zp757knf005g4q1p451p6wslpk-ninja-1.10.2.drv&quot;: {
    &quot;outputs&quot;: {
      &quot;out&quot;: {
        &quot;hashAlgo&quot;: &quot;r:sha256&quot;
      }
    },
    &quot;inputSrcs&quot;: [
      &quot;/nix/store/27axb57ya2ddmaa9m5fv700ww65z5hcd-docbook-xml-4.5&quot;,
      &quot;/nix/store/2wald1adsn6bxzmvypzjk5z2zk9dlgwh-stdenv-linux&quot;,
      &quot;/nix/store/34v3hflhcklq44jigh2banjwkcyqjc5k-python3-3.9.9&quot;,
      &quot;/nix/store/7z1wzf51i7jxi9nl2dg3yqmsfb70s4fm-docbook-xsl-nons-1.79.2&quot;,
      &quot;/nix/store/8m2rhn4jgz0bj52m7fx53jbj9qiswy6q-re2c-2.2&quot;,
      &quot;/nix/store/8x4aqaqaiyylvcpnhn1phypkb4n6ady0-source&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;,
      &quot;/nix/store/mcm0l38vgh9l24dgl94gj4hjvxp91g8j-libxslt-1.1.34-bin&quot;,
      &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12&quot;,
      &quot;/nix/store/y9yz15h8mlpggmr3jidjdhjpddsx7d25-setup-hook.sh&quot;,
      &quot;/nix/store/yyaxnsqm849wwi901m6g7nbi1hqy7vsp-asciidoc-9.1.0&quot;
    ],
    &quot;inputDrvs&quot;: {},
    &quot;system&quot;: &quot;x86_64-linux&quot;,
    &quot;builder&quot;: &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12/bin/bash&quot;,
    &quot;args&quot;: [
      &quot;-e&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;
    ],
    &quot;env&quot;: {
      &quot;buildInputs&quot;: &quot;&quot;,
      &quot;buildPhase&quot;: &quot;python configure.py --bootstrap\n# \&quot;./ninja -vn manual\&quot; output copied here to support cross compilation.\nasciidoc -b docbook -d book -o build/manual.xml doc/manual.asciidoc\nxsltproc --nonet doc/docbook.xsl build/manual.xml &gt; doc/manual.html\n&quot;,
      &quot;builder&quot;: &quot;/nix/store/v3rml3r7liky77iwipjg9bxmm874ra6g-bash-5.1-p12/bin/bash&quot;,
...</code></pre>
<p>Here <strong>inputDrvs</strong>, <strong>inputSrcs</strong> and some <strong>env</strong> references are
interesting edges for garbage collector. But some are possibly not
(like build-only <strong>env.builder</strong>).</p>
<p>The parsing format looked trivial and I tried a quick hack to
substitute <strong>istream</strong> for a manual parser in <a href="https://github.com/NixOS/nix/pull/6266" class="uri">https://github.com/NixOS/nix/pull/6266</a>.</p>
<p>This gave a 25% speedup (7 minutes faster on <strong>nz</strong>). Sounds like a
lot for a simple 80-line change.</p>
<p>But Eelco did not see any speedup improvement on his system. Moreover
Eelso’s GC times were ridiculously short: 17 seconds instead of minutes.</p>
<p>That made me think: what is parser’s parse speed if I see so large
an improvement? My system has to parse A Lot of <strong>.drv</strong> files to make
it measurable.</p>
<p>To put the example into some abstract numbers:
if parse speed is even as low as 100MB/s then running it for 7 minutes
would be able to parse ~40GB of <strong>.drv</strong> files. I don’t have that many.
All my <strong>/nix/store/*.drv</strong> files are ~1GB (~270K files).</p>
<p>Does it mean my system parses the same files multiple times? Is my system
somehow special to have many of them?</p>
<p>Running <strong>strace -f</strong> against the <strong>nix-daemon</strong> confirmed that some of
<strong>.drv</strong> files were opened and read repeatedly. That’s strange.</p>
<h1 id="the-second-attempt">The second attempt</h1>
<p>My naive understanding of graph traversal for garbage collection purposes
told me that each node should be traversed once.</p>
<p>I added a few <strong>debug()</strong> calls to
<a href="https://github.com/NixOS/nix/blob/master/src/libstore/gc.cc">src/libstore/gc.cc</a>
around repeated <strong>.drv</strong> visits and found … a bug!</p>
<p>For some <strong>nix.conf</strong> setups (like the ones with
<strong>keep-derivations = true</strong>) <strong>.drv</strong> files are themselves considered
(implicit) referrers. They should be retained on garbage
collection (live paths). By keeping related <strong>.drv</strong> files around
we keep possible prerequisites in case we want to rebuild a derivation.
Which is handy for package development.</p>
<p>The bug was in treatment of the <strong>.drv</strong> files: they were correctly traversed
as referrers, but they were not added to <strong>alive</strong> set of visited nodes.
As a result <strong>.drv</strong> file was visited every time some path pulled a <strong>.drv</strong> in.</p>
<p>Thus the fix was a two-liner: <a href="https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e" class="uri">https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e</a></p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/libstore/gc.cc</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/libstore/gc.cc</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -678,7 +678,8 @@ void LocalStore::collectGarbage(const GCOptions &amp; options, GCResults &amp; results)</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                 alive.insert(start);</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>                 try {</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>                     StorePathSet closure;</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="st">-                    computeFSClosure(*path, closure);</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+                    computeFSClosure(*path, closure,</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+                        /* flipDirection */ false, gcKeepOutputs, gcKeepDerivations);</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>                     for (auto &amp; p : closure)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>                         alive.insert(p);</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>                 } catch (InvalidPath &amp;) { }</span></code></pre></div>
<p>Before the change <strong>computeFSClosure()</strong> was called with implicit default
<strong>gcKeepDerivations = false</strong> argument. After the change it started honoring
user’s configuration.</p>
<p>The fun thing is that <strong>keep-derivations = true</strong> is a default enabled option!
Unless you switched it off explicitly you probably have it enabled on <strong>NixOS</strong>.</p>
<h1 id="benchmarks">Benchmarks</h1>
<p>Let’s benchmark this change on the same setup as above. I plugged the patch
into <strong>configuration.nix</strong> as:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>  nixpkgs.overlays = <span class="op">[</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span> <span class="va">nix</span> <span class="op">=</span> prev.nix.overrideAttrs <span class="op">(</span><span class="va">oa</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>      <span class="va">patches</span> <span class="op">=</span> <span class="op">(</span>oa.patches <span class="kw">or</span> <span class="op">[])</span> <span class="op">++</span> <span class="op">[</span> <span class="op">(</span>prev.fetchpatch <span class="op">({</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;fix-gc-drv-re-parse.patch&quot;</span><span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/NixOS/nix/commit/d58453f72ea584cac2e3362fd6a73fcf0e3b615e.patch&quot;</span><span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="va">hash</span> <span class="op">=</span> <span class="st">&quot;sha256-QiBFJVRWNTXyVFch1zoNJL3ZfF4ZD9JKNlID4v+eUVc=&quot;</span><span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>      <span class="op">}))</span> <span class="op">];</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">});})</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">]</span>;</span></code></pre></div>
<p><strong>i7</strong>:</p>
<pre><code>$ time nix store gc --dry-run

real    0m7.403s
...</code></pre>
<p>7 seconds compared to previous 200 seconds. ~29x speedup.</p>
<p><strong>nz</strong>:</p>
<pre><code>$ time nix store gc --dry-run

real    1m0,140s
...</code></pre>
<p>60 seconds compared to previous 1800 seonds. ~30x speedup as well.</p>
<h1 id="full-run">Full run</h1>
<p>Time to run the actual garbage collection that includes file removal
from disk and path unregistration from database:</p>
<p><strong>i7</strong>:</p>
<pre><code># dry run
$ time nix store gc --dry-run

real    0m7.403s
...

# full run
$ time nix store gc

2250 store paths deleted, 18751.92 MiB freed

real    0m32.695s
...

# full re-run
$ time nix store gc

0 store paths deleted, 0.00 MiB freed

real    0m7.708s
...</code></pre>
<p>Note that actual package removal is 5 times slower than
GC dry run. This ratio depends a lot on how many files are
to delete, what filesystem and what mode you are using.
But the gist of it is that the difference is not that big
compared to dry run.</p>
<p>Dry-run before and after garbage collection did not change
much. This means we did not delete that many packages
compared to alive set of packages. After the cleanup
<strong>/nix/store</strong> is only 2.3GB with 2300 store paths.</p>
<p>Thus we deleted about the half the store paths and about
90% of content size.</p>
<p>The speed of removal is about 70 store paths (packages)
per second.</p>
<p><strong>nz</strong>:</p>
<pre><code># dry run
$ time nix store gc --dry-run

real    1m0,140s
...

# full run
$ time nix store gc

319698 store paths deleted, 332762.52 MiB freed

real    5m54,990s
...

# full re-run
$ time nix store gc

0 store paths deleted, 0.00 MiB freed

real    0m4,528s
...</code></pre>
<p>Again, actual file deletion is only 6 times slower than GC dry run.
Alive set after GC is 15K packages with 34GB storage.</p>
<p>The speed of removal is about ~800 store paths (packages)
per second.</p>
<p>How many packages per second can your distribution delete?
Does it scale well with amount of packages already installed in system?</p>
<h1 id="parting-words">Parting words</h1>
<p>Garbage collection should take no more than one minute :)</p>
<p>It was surprisingly easy to get ~30x speedup of garbage collector with
a two-liner patch. The improvement will help systems with default
<strong>nix.conf</strong> configuration. Upcoming <strong>nix-2.8</strong> will contain the
improvement.</p>
<p>Initially I was fooled by <strong>perf top</strong> output and optimised the parser
to get 25% speedup. The real bug was in tracking visited nodes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on April  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>nixpkgs bootstrap intro</title>
    <link href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html" />
    <id>http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html</id>
    <published>2022-03-24T00:00:00Z</published>
    <updated>2022-03-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: nixpkgs bootstrap intro</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>nixpkgs bootstrap intro</h1>

            <p>This post is an informal walk through bootstrap setup of <strong>nixpkgs</strong>.
It’s quite long and has many facets we look at here. If you don’t
understand some bits of it don’t worry: it’s both a complicated topic
and I did a bad job at explaining it.</p>
<p>Initially I tried to cram everything into a single post and got
largest post ever. Once I realized it became unreadable I moved out
details on <strong>glibc</strong> into a separate <a href="../posts/239-hacking-on-glibc.html">hacking-on-glibc post</a>.
Now this post is “only” on par with other larges posts /o\.</p>
<p>Good luck :)</p>
<h1 id="intro">Intro</h1>
<p><strong>nixpkgs</strong> is a package repository for <strong>NixOS</strong> linux distribution.
<strong>nixpkgs</strong> can also be used outside <strong>NixOS</strong> on other <strong>linux</strong> (and
non-<strong>linux</strong>!) distributions.</p>
<p>Each <strong>nixpkgs</strong> package is built in a container environment where
build process sees only explicitly specified dependencies (via mount
namespace). That way we get more deterministic (and ideally fully
reproducible) build environment and result when ran on another machine.</p>
<p>Such a setup makes it trivial to notice missing required dependencies.
I frequently write a <strong>nixpkgs</strong> recipe for a package before trying
to package it on another distributions :)</p>
<p>Precise dependencies sound great in theory, but how does such a system
deal with circular dependencies and bootstrap dependencies? For example
<strong>gcc</strong> depends on some C compiler presence. How do they get satisfied?</p>
<h1 id="bootstrap-binaries">Bootstrap binaries</h1>
<p><strong>nixpkgs</strong> solves it by providing a set of pre-built seed binaries
called <strong>bootstrap-files</strong> (or <strong>bootstrapTools</strong>). These binaries were
at some previous point built on an already working <strong>nixpkgs</strong> system.
One can also build them manually.</p>
<p>Seed binaries don’t change until someone decides to refresh them.
Specifically they don’t get rebuil on each <strong>nixpkgs</strong> commit. In theory
<strong>bootstrap-files</strong> could be left untouched forever at least for existing
target systems. In practice bugs do occasinally happen in <strong>bootstrap-files</strong>
and we need to fix them. It’s also useful to have some up-to-date
baseline when building other fresh packages: building <strong>gcc-11</strong>
with <strong>gcc-8</strong> (seed binary) is a lot simpler than building <strong>gcc-11</strong>
with <strong>gcc-3</strong>.</p>
<p>To get the idea what it takes to bet a set of bootstrap files let’s build
fresh set of them ourselves. We’ll use default definition in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix">make-bootstrap-tools.nix</a>:</p>
<pre class="shell"><code>$ nix build -f ./pkgs/stdenv/linux/make-bootstrap-tools.nix bootstrapFiles</code></pre>
<p>We can even cross-compile bootstrap files for a differen (potentially not yet
supported) target:</p>
<pre class="shell"><code>$ nix build -f ./pkgs/stdenv/linux/make-bootstrap-tools.nix bootstrapFiles --argstr crossSystem powerpc64le-linux</code></pre>
<p>Is it big? Inspecting the final result:</p>
<pre class="shell"><code>$ readlink result
/nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz

$ LANG=C ls -lh /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz
-r--r--r-- 2 root root 21M Jan  1  1970 /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz</code></pre>
<p>Archive size is 21MB. This size is smaller than compressed <strong>nixpkgs</strong>
tree (~26MB today). Let’s peek at things that hide inside:</p>
<pre class="shell"><code>$ tar --list -f /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz
./bin/
./bin/[
./bin/ar
...
./bin/yes
./include/
./include/c++/
./include/c++/10.3.0/
./include/c++/10.3.0/algorithm
...
./include-glibc/
./include-glibc/a.out.h
./include-glibc/aio.h
...
./include-glibc/xen/privcmd.h
./lib/
./lib/crt1.o
./lib/crti.o
./lib/crtn.o
./lib/gcc/
./lib/gcc/x86_64-unknown-linux-gnu/
./lib/gcc/x86_64-unknown-linux-gnu/10.3.0/
...
./lib/gcc/x86_64-unknown-linux-gnu/10.3.0/libgcov.a
./lib/ld-2.33.so
./lib/ld-linux-x86-64.so.2
./lib/libbfd-2.35.2.so
./lib/libbfd.la
...
./lib/libz.so.1.2.11
./libexec/
./libexec/gcc/
./libexec/gcc/x86_64-unknown-linux-gnu/
./libexec/gcc/x86_64-unknown-linux-gnu/10.3.0/
./libexec/gcc/x86_64-unknown-linux-gnu/10.3.0/cc1
...</code></pre>
<p>The contents (once again) are defined by
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/make-bootstrap-tools.nix</a>.
It tells ut that the following packages are present in the final tarball:</p>
<ul>
<li><strong>busybox</strong> (statically linked against <strong>musl</strong>)</li>
<li><strong>glibc</strong></li>
<li><strong>gcc</strong> (this package and below are dynamically linked against <strong>glibc</strong>)</li>
<li><strong>binutils</strong></li>
<li><strong>coreutils</strong></li>
<li><strong>tar</strong></li>
<li><strong>bash</strong></li>
<li><strong>findutils</strong></li>
<li><strong>diffutils</strong></li>
<li><strong>sed</strong></li>
<li><strong>grep</strong></li>
<li><strong>awk</strong></li>
<li><strong>gzip</strong></li>
<li><strong>bzip</strong></li>
<li><strong>patch</strong></li>
<li><strong>patchelf</strong></li>
<li><strong>gmp</strong></li>
<li><strong>mpfr</strong></li>
<li><strong>mpc</strong></li>
<li><strong>zlib</strong></li>
<li><strong>isl</strong></li>
<li><strong>libelf</strong></li>
</ul>
<p>Just 21 package! Most are very cross-compiler friendly. Some of packages
have reduced functionality not needed for simplest build requirements:</p>
<pre><code>  coreutilsMinimal = coreutils.override (args: { aclSupport = false; attrSupport = false; /*...*/ })
  tarMinimal = gnutar.override { acl = null; };
  busyboxMinimal = busybox.override { useMusl = true; enableStatic = true; /*...*/ }
  bootGCC = gcc.cc.override { enableLTO = false; };
  bootBinutils = binutils.bintools.override { withAllTargets = false; gold = false; enableShared = false; /*...*/ }</code></pre>
<p>The tarball generaion process is literally copying build files to make
self-contained archive:</p>
<pre><code>  build = stdenv.mkDerivation {
    name = &quot;stdenv-bootstrap-tools&quot;;

    buildCommand = ''
        set -x
        mkdir -p $out/bin $out/lib $out/libexec

        # Copy what we need of Glibc.
        cp -d ${libc.out}/lib/ld*.so* $out/lib
        cp -d ${libc.out}/lib/libc*.so* $out/lib
        # ...
        cp -d ${coreutilsMinimal.out}/bin/* $out/bin
        (cd $out/bin &amp;&amp; rm vdir dir sha*sum pinky factor pathchk runcon shuf who whoami shred users)
        cp ${bash.out}/bin/bash $out/bin
        cp ${findutils.out}/bin/find $out/bin
        cp ${findutils.out}/bin/xargs $out/bin
        cp -d ${diffutils.out}/bin/* $out/bin
        # ...
        nuke-refs $out/bin/*
        nuke-refs $out/lib/*
        # ...
    '';
    //...</code></pre>
<p>Once these bootstrap binaries are built they are referred explicitly
as a <strong>fetchurl{}</strong> “source” tarball input:
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-files/i686.nix" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-files/i686.nix</a></p>
<p>There is a caveat: we can’t run these binaries as is if we just unpack the tarball.
I’ll try anyway:</p>
<pre class="shell"><code>$ mkdir /tmp/b
$ cd /tmp/b
$ tar xf /nix/store/3xq6in2gn3z3cvjjf51fyn53bg3k4nh6-bootstrap-tools.tar.xz
$ ls bin/bash
bin/bash
$ unshare --user --map-root-user chroot . /bin/bash
chroot: failed to run command ‘/bin/bash’: No such file or directory</code></pre>
<p>It happens because binaries intentionally hardcode invalid absolute paths to dynamic linker:</p>
<pre class="shell"><code>$ lddtree bin/bash
bash =&gt; bin/bash (interpreter =&gt; /nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-glibc-2.33-108/lib/ld-linux-x86-64.so.2)
    libdl.so.2 =&gt; not found
    libc.so.6 =&gt; not found</code></pre>
<p>These invalid paths are meant to be relocated at install time: <strong>patchelf</strong>
binary patching tool is used for that in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh</a></p>
<p>Note that <strong>patchelf</strong> is also a dynamically linked binary. How can we run it against
broken interpreter? You might have already noticed it in <strong>unpack-bootstrap-tools.sh</strong> above:
dynamic loader is called by absolute path and it’s search paths are overridden
by <strong>LD_LIBRARY_PATH</strong> variable.</p>
<p>Trying running <strong>bash</strong> using the same trick:</p>
<pre class="shell"><code>$ PS1='foo&gt; ' unshare --user --map-root-user chroot . /lib/ld-linux-x86-64.so.2 --library-path /lib /bin/bash

foo&gt; echo /*
/bin /include /include-glibc /lib /libexec

foo&gt; ls /
bash: ls: command not found
foo&gt; LD_LIBRARY_PATH=/lib /lib/ld-linux-x86-64.so.2 /bin/ls
bin  include  include-glibc  lib  libexec</code></pre>
<p>Seems to work :)</p>
<p>I used <strong>--library-path /lib</strong> to step aside the complications of mixing
<strong>LD_LIBRARY_PATH</strong> value for host’s <strong>chroot</strong> command. But once in a chroot
<strong>LD_LIBRARY_PATH=/lib</strong> does the trick as well.</p>
<p>Another way to make <strong>chroot</strong> to Just Work without <strong>LD_LIBRARY_PATH=</strong>
is to fake relocation with this funny symlink:</p>
<pre class="shell"><code>$ ln -s ../../../lib nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-glibc-2.33-108/lib
$ unshare --user --map-root-user chroot . /bin/bash
$ export PATH=/bin PS1='minimal&gt; '
minimal&gt; ls /
bin  include  include-glibc  lib  libexec  nix
minimal&gt;  gcc --version
gcc (GCC) 10.3.0

minimal&gt; echo 'int main(){}' &gt; a.c
minimal&gt; gcc a.c -o a
minimal&gt; ./a
bash: ./a: No such file or directory</code></pre>
<p>Now we are able to run <strong>gcc</strong> (and also <strong>bash</strong>).</p>
<p>The environment is able to compile simple executables. Why do compiled binaries
still fail to run? That is is an exercise for the reader :)
Hint: it can be hacked with yet another symlink. Try to find which one.
<a href="../posts/239-hacking-on-glibc.html">hacking-on-glibc post</a> also provides another way of solving it.</p>
<h1 id="stdenv">stdenv</h1>
<p>So how do we bootstrap fresh <strong>nixpkgs</strong> out of outdated <strong>gcc</strong> and
<strong>glibc</strong> from <strong>bootstrap-tools</strong>?</p>
<p>To provide minimal build environment for most packages <strong>nixpkgs</strong> has a
special package: <strong>stdenv</strong>. Let’s inspect it’s contents:</p>
<pre><code>$ nix-shell --pure -p stdenv

[nix-shell]$ echo $PATH | tr ':' $'\n' | ~/bin/unnix
/&lt;&lt;NIX&gt;&gt;/bash-interactive-5.1-p12/bin
/&lt;&lt;NIX&gt;&gt;/patchelf-0.14.3/bin
/&lt;&lt;NIX&gt;&gt;/gcc-wrapper-10.3.0/bin
/&lt;&lt;NIX&gt;&gt;/gcc-10.3.0/bin
/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-bin/bin
/&lt;&lt;NIX&gt;&gt;/coreutils-9.0/bin
/&lt;&lt;NIX&gt;&gt;/binutils-wrapper-2.35.2/bin
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin
/&lt;&lt;NIX&gt;&gt;/coreutils-9.0/bin
/&lt;&lt;NIX&gt;&gt;/findutils-4.8.0/bin
/&lt;&lt;NIX&gt;&gt;/diffutils-3.8/bin
/&lt;&lt;NIX&gt;&gt;/gnused-4.8/bin
/&lt;&lt;NIX&gt;&gt;/gnugrep-3.7/bin
/&lt;&lt;NIX&gt;&gt;/gawk-5.1.1/bin
/&lt;&lt;NIX&gt;&gt;/gnutar-1.34/bin
/&lt;&lt;NIX&gt;&gt;/gzip-1.11/bin
/&lt;&lt;NIX&gt;&gt;/bzip2-1.0.6.0.2-bin/bin
/&lt;&lt;NIX&gt;&gt;/gnumake-4.3/bin
/&lt;&lt;NIX&gt;&gt;/bash-5.1-p12/bin
/&lt;&lt;NIX&gt;&gt;/patch-2.7.6/bin
/&lt;&lt;NIX&gt;&gt;/xz-5.2.5-bin/bin</code></pre>
<p>The list of binaries is suspiciously close to our <strong>bootstrap-tools</strong>
tarball. That is not a coincidence: if it’s good enough for most packages
it should be enough for <strong>gcc</strong>.</p>
<p>In theory we could just use <strong>bootstrap-tools</strong> to define <strong>stdenv</strong>
and use it to build things like <strong>xorg</strong>. However such a scheme would
complicate updating <strong>gcc</strong> (and all other <strong>stdenv</strong> packages):
(once again) bootstrap archive does not get updated frequently.
We would need to refresh bootstrap tarballs routinely just to get
a <strong>gcc</strong> update.</p>
<p>To solve an update problem <strong>nixpkgs</strong> uses a level of indirection:
first <strong>nixpkgs</strong> defines <strong>bootstrap-stdenv</strong> as <strong>bootstrap-tools</strong>
and then builds <strong>stdenv</strong> out of <strong>bootstrap-stdenv</strong>. The rest of
<strong>nixpkgs</strong> uses only <strong>stdenv</strong> and avoids <strong>bootstrap-stdenv</strong>.</p>
<p>Thus our example <strong>xorg</strong> chain of build-time dependencies is:
<strong>bootstrap-tools</strong> -&gt; <strong>bootstrap-stdenv</strong> -&gt; <strong>stdenv</strong> -&gt; <strong>xorg</strong>.</p>
<p>Simple, eh?</p>
<p>Let’s look at a <strong>stdenv.mkDerivation</strong> function normally used to define
packages. We define a one-liner <strong>foo</strong> package that prints contents
of it’s build environment at build time:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; stdenv.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;echo $CC; $CC -v; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; gcc
foo&gt; Using built-in specs.
foo&gt; COLLECT_GCC=/nix/store/2dv93bbc06c7zg866qid73j3r36zz3jx-gcc-10.3.0/bin/gcc
foo&gt; COLLECT_LTO_WRAPPER=/nix/store/2dv93bbc06c7zg866qid73j3r36zz3jx-gcc-10.3.0/libexec/gcc/x86_64-unknown-linux-gnu/10.3.0/lto-wrapper
foo&gt; Target: x86_64-unknown-linux-gnu
foo&gt; Configured with:
foo&gt; Thread model: posix
foo&gt; Supported LTO compression algorithms: zlib
foo&gt; gcc version 10.3.0 (GCC)
...</code></pre>
<p>As a small detour there are also other popular <strong>stdenv</strong>s, like an
<strong>LLVM</strong>-based one:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; pkgsLLVM.stdenv.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;echo $CC; $CC -v; exit 1&quot;; }' -L

foo-x86_64-unknown-linux-gnu&gt; unpacking sources
foo-x86_64-unknown-linux-gnu&gt; x86_64-unknown-linux-gnu-clang
foo-x86_64-unknown-linux-gnu&gt; clang version 11.1.0
foo-x86_64-unknown-linux-gnu&gt; Target: x86_64-unknown-linux-gnu
foo-x86_64-unknown-linux-gnu&gt; Thread model: posix
foo-x86_64-unknown-linux-gnu&gt; InstalledDir: /nix/store/y61l0kbqfchdk39i319ycrfblc6zz3s8-clang-11.1.0/bin
...</code></pre>
<p><strong>nixpkgs</strong> provides many toolchains via various
<strong>stdenv</strong>s. To name a few (assuming <strong>x86_64-linux</strong> system):</p>
<ul>
<li><strong>stdenv</strong>: <strong>gcc</strong> and <strong>glibc</strong></li>
<li><strong>pkgsLLVM.stdenv</strong>: <strong>clang</strong> and <strong>glibc</strong></li>
<li><strong>pkgsMusl.stdenv</strong>: <strong>gcc</strong> and <strong>musl</strong></li>
<li><strong>pkgsi686Linux.stdenv</strong>: <strong>gcc</strong> and <strong>glibc</strong> for 32-bit ABI on x86_64 (<strong>CFLAGS=-m32</strong>)</li>
<li><strong>pkgsCross.ppc64.stdenv</strong>: <strong>gcc</strong> and <strong>glibc</strong> cross-compiler to <strong>powerpc64-unknown-linux-gnu</strong> target</li>
<li>… and many many more</li>
</ul>
<p>Finding out how those interact to one another (which <strong>stdenv</strong> is
defined in terms of which) is an exercise for the reader :)</p>
<h1 id="stdenv-tower">stdenv tower</h1>
<p>So how exactly do we ascend from not-quite-working <strong>bootstrapTools</strong> to
<strong>stdenv</strong>? What is hiding behind the arrow in
“<strong>bootstrap-stdenv</strong> -&gt; <strong>stdenv</strong>” part above?</p>
<p>The precise answer is hidden in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix">stdenv.nix</a>.</p>
<p>The main take away from there is that there are multiple stages of
<strong>stdenv</strong>:</p>
<p><strong>bootstrap-stdenv</strong> -&gt; <strong>?</strong> -&gt; <strong>??</strong> -&gt; <strong>???</strong> -&gt; <strong>…</strong> -&gt; <strong>stdenv</strong>.</p>
<p>Instead of trying to figure out what each stage does exactly out of definition
above let’s debug it and see what we can find out.</p>
<p>Let’s inject a <strong>prev</strong> attribute to each intermediate instance of
<strong>stdenv</strong> and walk along that chain. Here is the full local patch:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/generic/default.nix</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/generic/default.nix</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -54,0 +55,3 @@ argsStdenv@{ name ? &quot;stdenv&quot;, preHook ? &quot;&quot;, initialPath</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="va">+, # debug reference to previous stdenv</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="va">+  prev ? {}</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -145,0 +149,2 @@ let</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      inherit prev;</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -106,0 +107,2 @@ let</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        prev = prevStage.stdenv;</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -437,0 +440,2 @@ in</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a><span class="va">+      prev = prevStage.stdenv;</span></span></code></pre></div>
<p>I left out almost all of patch context on purpose. It’s not very
readable as a diff. Now we can access all <strong>stdenv</strong> iterations via
<strong>stdenv.prev</strong>.</p>
<p>First, let’s find out how many hops are there from bootstrap to final <strong>stdenv</strong>:</p>
<pre class="shell"><code>nixpkgs $ nix repl .
nix-repl&gt; stdenv
«derivation /nix/store/s6l15yfxq567as8wdw7cfvy6c3p9wscw-stdenv-linux.drv»
nix-repl&gt; stdenv.prev
«derivation /nix/store/q3dsgi310i9r5b1pgdym2fnvlxbkxls2-bootstrap-stage4-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev
«derivation /nix/store/b5hwd6s4b2xq2l6nidhklypn69vhlfap-bootstrap-stage3-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev
«derivation /nix/store/bkbn1y2593jqclaq2kjcx5iambylsafq-bootstrap-stage2-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev.prev
«derivation /nix/store/1wklspdwi7c03jrqjbh2f6ymmpqshcif-bootstrap-stage1-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev.prev.prev
«derivation /nix/store/bvkp4zp1kidp9wfk2f46yyy73y3n38mx-bootstrap-stage0-stdenv-linux.drv»
nix-repl&gt; stdenv.prev.prev.prev.prev.prev.prev
error: attribute 'stdenv' missing</code></pre>
<p>5(!) intermediate steps! Let’s check out
compiler version of the intial one and the one right after:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import ./. {}; stdenv.prev.prev.prev.prev.prev.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;$CC --version; exit 1&quot;; }' -L
foo&gt; unpacking sources
foo&gt; /nix/store/hbppa2cjx9929jrv796fpni2m06j3fzw-bootstrap-stage0-stdenv-linux/setup: line 1358: --version: command not found</code></pre>
<p>The very first (or zeroth) bootstrap stdenv does not even provide basic
“$CC” variable. It’s not really a usable stdenv just yet. We can also guess
it from it’s empty definition:</p>
<pre><code>  ({}: {
    __raw = true;

    gcc-unwrapped = null;
    binutils = null;
    coreutils = null;
    gnugrep = null;
  })</code></pre>
<p>It’s only a default case that will gradually grow a piece on each step.
Let’s look at the next one:</p>
<pre><code>$ nix build --impure --expr 'with import ./. {}; stdenv.prev.prev.prev.prev.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;$CC --version; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; gcc (GCC) 8.3.0
...</code></pre>
<p>The next <strong>stdenv</strong> provides build environment based on <strong>gcc-8.3.0</strong>
(which is way older than default <strong>nixpkgs</strong> <strong>gcc-10.3.0</strong> version).</p>
<p>Now we have a tool to check what is the actual difference between all
these <strong>stdenv</strong> iterations! I usually use <strong>NIX_DEBUG=1</strong> variable to
look at what <strong>nixpkgs</strong> injects in the search paths and default
options of <strong>gcc</strong>:</p>
<pre class="shell"><code>nix build --impure --expr 'with import ./. {}; stdenv.prev.prev.prev.prev.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;NIX_DEBUG=1 $CC --version; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; HARDENING: disabled flags: pie
foo&gt; HARDENING: Is active (not completely disabled with &quot;all&quot; flag)
foo&gt; HARDENING: enabling fortify
foo&gt; HARDENING: enabling stackprotector
foo&gt; HARDENING: enabling strictoverflow
foo&gt; HARDENING: enabling format
foo&gt; HARDENING: enabling pic
foo&gt; extra flags before to /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/bin/gcc:
foo&gt;   -O2
foo&gt;   -D_FORTIFY_SOURCE=2
foo&gt;   -fstack-protector-strong
foo&gt;   --param
foo&gt;   ssp-buffer-size=4
foo&gt;   -fno-strict-overflow
foo&gt;   -Wformat
foo&gt;   -Wformat-security
foo&gt;   -Werror=format-security
foo&gt;   -fPIC
foo&gt; original flags to /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/bin/gcc:
foo&gt;   --version
foo&gt; extra flags after to /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/bin/gcc:
foo&gt;   -B/nix/store/39k40hf9z4wr5wac5xbnznza1ym2f8kz-bootstrap-stage0-glibc-bootstrap/lib/
foo&gt;   -idirafter
foo&gt;   /nix/store/39k40hf9z4wr5wac5xbnznza1ym2f8kz-bootstrap-stage0-glibc-bootstrap/include
foo&gt;   -idirafter
foo&gt;   /nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/lib/gcc/x86_64-unknown-linux-gnu/8.3.0/include-fixed
foo&gt;   -B/nix/store/i3ibpx67yncp4w4mpkf5pwvjjsd0aqln-bootstrap-tools/lib
foo&gt;   -B/nix/store/8wmhf2pbmx0vbs60yk6x9w5lm0zrqjlz-bootstrap-stage1-gcc-wrapper-/bin/
foo&gt;   -frandom-seed=dhfkc7mzra
foo&gt; gcc (GCC) 8.3.0
foo&gt; Copyright (C) 2018 Free Software Foundation, Inc.
foo&gt; This is free software; see the source for copying conditions.  There is NO
foo&gt; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre>
<p>Here the important parts are the paths specified with <strong>-L</strong> flag (library lookup
paths) and by <strong>-B</strong> flag (objects and tools for compiler itself). Both should be
familiar by now from “hello world” dissection section at <a href="../posts/239-hacking-on-glibc.html">hacking-on-glibc post</a>.</p>
<p>Also note that <strong>nixpkgs</strong> builds files with default <strong>-O2</strong> optimization level
until specified otherwise (also note a few warning options on top enabled by default).</p>
<p>Let’s check out our final <strong>stdenv</strong>:</p>
<pre class="shell"><code>$ nix build --impure --expr 'with import ./. {}; stdenv.mkDerivation { name = &quot;foo&quot;; unpackPhase = &quot;NIX_DEBUG=1 $CC --version; exit 1&quot;; }' -L

foo&gt; unpacking sources
foo&gt; HARDENING: disabled flags: pie
foo&gt; HARDENING: Is active (not completely disabled with &quot;all&quot; flag)
foo&gt; HARDENING: enabling pic
foo&gt; HARDENING: enabling format
foo&gt; HARDENING: enabling stackprotector
foo&gt; HARDENING: enabling fortify
foo&gt; HARDENING: enabling strictoverflow
foo&gt; extra flags before to /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/bin/gcc:
foo&gt;   -fPIC
foo&gt;   -Wformat
foo&gt;   -Wformat-security
foo&gt;   -Werror=format-security
foo&gt;   -fstack-protector-strong
foo&gt;   --param
foo&gt;   ssp-buffer-size=4
foo&gt;   -O2
foo&gt;   -D_FORTIFY_SOURCE=2
foo&gt;   -fno-strict-overflow
foo&gt; original flags to /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/bin/gcc:
foo&gt;   --version
foo&gt; extra flags after to /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/bin/gcc:
foo&gt;   -B/nix/store/km6a4zxn29liy6l2xq441p2yap1ka1j4-glibc-2.35/lib/
foo&gt;   -idirafter
foo&gt;   /nix/store/6xn0firi6hlz6x161drdj0p0jzcrrfla-glibc-2.35-dev/include
foo&gt;   -idirafter
foo&gt;   /nix/store/j5pl47x8yplyfpbbgvcrzjwbm08n9rvi-gcc-12.0.0/lib/gcc/x86_64-unknown-linux-gnu/12.0.1/include-fixed
foo&gt;   -B/nix/store/fi0acb9a2fscg7afnwjmglj55rqwj8kj-gcc-12.0.0-lib/lib
foo&gt;   -B/nix/store/v9s3sv5c4rr9r067qw66c1iq5i0ffsvc-gcc-wrapper-12.0.0/bin/
foo&gt;   -frandom-seed=rw1fgisg1r
foo&gt; gcc (GCC) 12.0.1 20220213 (experimental)
foo&gt; Copyright (C) 2022 Free Software Foundation, Inc.
foo&gt; This is free software; see the source for copying conditions.  There is NO
foo&gt; warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</code></pre>
<p>Note how all the <strong>-B</strong> and <strong>-L</strong> paths flipped from bootstrap variants
of the package (like <strong>-B/nix/store/39k40hf9z4wr5wac5xbnznza1ym2f8kz-bootstrap-stage0-glibc-bootstrap/lib/</strong>)
to nice final package names (like <strong>-B/nix/store/km6a4zxn29liy6l2xq441p2yap1ka1j4-glibc-2.35/lib/</strong>).</p>
<p>Such a long <strong>stdenv</strong> tower reaches it’s main goal: <strong>bootstrap-tools</strong>
must not be used in final <strong>stdenv</strong> directly or as runtime depends.
<strong>stdenv</strong> must only be defined by source packages from <strong>nixpkgs</strong>.</p>
<p>Ideally changing <strong>bootstrap-tools</strong> archive should not affect contents of
final <strong>stdenv</strong> at all. In practice it happens only when <strong>content-addressed</strong>
mode is enabled: <a href="https://nixos.wiki/wiki/Ca-derivations" class="uri">https://nixos.wiki/wiki/Ca-derivations</a>.</p>
<p>To achieve independence from bootstrap binaries <strong>nixpkgs</strong> gradually
substitutes parts of <strong>bootstrap-stdenv</strong> from <strong>bootstrap-tools</strong> to
packages defined by <strong>nixpkgs</strong> expressions:</p>
<ul>
<li><strong>dummy</strong>: provide dummy empty base case. Nothing works here</li>
<li><strong>stage0</strong>: provides runnable prebuilt <strong>bootstrap-tools</strong> in <strong>PATH</strong> as <strong>gcc</strong>, <strong>binutils</strong>, <strong>coreutils</strong>, <strong>grep</strong>. From now on we can compile simple tools.</li>
<li><strong>stage1</strong>: build <strong>binutils</strong> and <strong>perl</strong> (using <strong>stage0</strong>’s <strong>gcc</strong>, <strong>glibc</strong>, <strong>coreutils</strong>)</li>
<li><strong>stage2</strong>: build <strong>glibc</strong> (and it’s library depends) (using <strong>stage1</strong>’s <strong>binutils</strong> and <strong>stage0</strong>’s <strong>gcc</strong>, <strong>coreutils</strong>), relink <strong>binutils</strong> against new <strong>glibc</strong>.</li>
<li><strong>stage3</strong>: build <strong>gmp</strong>/<strong>mpfr</strong> to prepare <strong>gcc</strong> rebuild (using <strong>stage2</strong>’s <strong>glibc</strong>, <strong>stage1</strong>’s <strong>binutils</strong>, <strong>stage0</strong>’s <strong>gcc</strong>, <strong>coreutils</strong>)</li>
<li><strong>stage4</strong>: build <strong>gcc</strong> itself (using <strong>stage3</strong>’s <strong>gmp</strong>/<strong>mpfr</strong>, <strong>stage2</strong>’s <strong>glibc</strong>, <strong>stage1</strong>’s <strong>binutils</strong>, <strong>stage0</strong>’s <strong>gcc</strong>, <strong>coreutils</strong>)</li>
<li><strong>final</strong>: build <strong>binutils</strong>, <strong>coreutils</strong> and everything else (using <strong>stage3</strong>’s <strong>gcc</strong>, <strong>stage2</strong>’s glibc, <strong>stage1</strong>’s binutils, <strong>stage0</strong>’s <strong>coreutils</strong>)</li>
</ul>
<p>Sounds simple? Heh, not really. I probably got a few details above wrong.
I was still not sure what are the exact dependencies that are being rebuilt.</p>
<p>Let’s first look at the <strong>final</strong> <strong>stdenv</strong>’s references after it’s fully built:</p>
<pre class="shell"><code>$ nix-store --query --graph $(nix-build -A stdenv) | dot -Tsvg &gt; stdenv-final-runtime.svg</code></pre>
<p>Rendered svg: <a href="../posts.data/240-nixpkgs-bootstrap/stdenv-final-runtime.svg">stdenv-final graph</a></p>
<p>Note that there are no (runtime) references to <strong>bootstrap-tools</strong> packages.</p>
<p>Let’s look at <strong>stage4</strong> for comparison:</p>
<pre class="shell"><code>$ nix-store --query --graph $(nix-build -A stdenv.prev) | dot -Tsvg &gt; stdenv-stage4-runtime.svg</code></pre>
<p>Rendered svg: <a href="../posts.data/240-nixpkgs-bootstrap/stdenv-stage4-runtime.svg">stdenv-stage4 graph</a></p>
<p>Note how <strong>patchelf</strong> and <strong>binutils</strong> still use <strong>glibc</strong> which was built using <strong>bootstrap-tools</strong>
compiler.</p>
<p>The above graphs don’t show build-time dependencies. Ideally <strong>stdenv-final</strong> should not directly
depend on anything related to <strong>boostrap-tools</strong>. We can get the graph by looking at the derivation
instead of final store path:</p>
<pre class="shell"><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) | dot -Tsvg &gt; stdenv-drv-final-runtime.svg</code></pre>
<p>Rendered svg: <a href="../posts.data/240-nixpkgs-bootstrap/stdenv-drv-final-runtime.svg">stdenv-drv graph</a></p>
<p>It’s not really readable: there are too many mostly irrelevant minor details like patches and source
tarballs. Can we rearrange nodes explicitly as they are pulled in into each stage?</p>
<p>The simplest (but somewhat incomplete) seems to be the use of <strong>nix-diff</strong> derivation differ:</p>
<pre><code>$ nix store diff-closures $(nix-instantiate -A stdenv.prev) $(nix-instantiate -A stdenv)

acl: ∅ → 2.3.1, +109.0 KiB
attr: ∅ → 2.5.1, +78.9 KiB
bash: ∅ → 5.1-p16, +1519.2 KiB
binutils: +6390.2 KiB
binutils-wrapper: +9.9 KiB
bootstrap: ε → ∅, -129542.0 KiB
bootstrap-stage0-glibc: ε → ∅
bootstrap-stage4-gcc-wrapper: 12.0.0 → ∅, -47.5 KiB
bootstrap-stage4-stdenv: ε → ∅, -41.7 KiB
busybox: ε → ∅, -117.2 KiB
bzip2: ∅ → 1.0.6.0.2, +147.6 KiB
coreutils: ∅ → 9.0, +1769.5 KiB
diffutils: ∅ → 3.8, +1450.5 KiB
ed: ∅ → 1.18, +134.7 KiB
expand-response: -17.0 KiB
findutils: ∅ → 4.9.0, +1472.3 KiB
gawk: ∅ → 5.1.1, +2374.2 KiB
gcc-wrapper: ∅ → 12.0.0, +47.5 KiB
gnugrep: ∅ → 3.7, +773.2 KiB
gnumake: ∅ → 4.3, +1391.1 KiB
gnused: ∅ → 4.8, +725.0 KiB
gnutar: ∅ → 1.34, +2834.7 KiB
gzip: ∅ → 1.11, +152.0 KiB
patch: ∅ → 2.7.6, +222.3 KiB
pcre: ∅ → 8.45, +514.5 KiB
stdenv: ∅ → ε, +42.1 KiB
zlib: -121.4 KiB</code></pre>
<p>Here we see exact list of packages that differ in the whole tree between <strong>stdenv</strong>
and it’s immediate predecessor.</p>
<p>Or we can look at just compiler wrapper difference of <strong>stdenv</strong> (let’s try <strong>nix-diff</strong>
for a change):</p>
<pre><code>$ nix-diff $(nix-instantiate -A stdenv.prev.cc) $(nix-instantiate -A stdenv.cc) --line-oriented | cat

- /nix/store/d0ivnqxcmjdg9ihdl4ww9a0c79pyl0nd-bootstrap-stage4-gcc-wrapper-10.3.0.drv:{out}
+ /nix/store/45fs8hhm6afg0m0p2d635zhjh608bqsj-gcc-wrapper-10.3.0.drv:{out}
• The set of input derivation names do not match:
    - bootstrap-stage0-stdenv-linux
    + bash-5.1-p12
    + bootstrap-stage4-stdenv-linux
    + coreutils-9.0
    + gnugrep-3.7
• The input derivation named `binutils-wrapper-2.35.2` differs
  - /nix/store/gcyaki78ksxg9s211y4zr4ppnrq1jwlm-binutils-wrapper-2.35.2.drv:{out}
  + /nix/store/9g4r35k465xg4p02c5krbxqnwvihpmbx-binutils-wrapper-2.35.2.drv:{out}
  • The set of outputs do not match:
      + {info}
      + {man}
  • The set of input source names do not match:
      + gnu-binutils-strip-wrapper.sh
  • The set of input derivation names do not match:
      - bootstrap-stage1-stdenv-linux
      + bash-5.1-p12
      + bootstrap-stage4-stdenv-linux
      + coreutils-9.0
      + gnugrep-3.7
  • The set of input derivations named `binutils-2.35.2` do not match
      - /nix/store/l343vxcc5ik63ccrggff3js03y1l9154-binutils-2.35.2.drv:{out}
      + /nix/store/vfzsbipvxkbj9m4yh5is0shfxn3p7b2m-binutils-2.35.2.drv:{info,man,out}
  • The input derivation named `expand-response-params` differs
    - /nix/store/5y71wc7khvy8m2qh6vvrvwx31dhk68r7-expand-response-params.drv:{out}
    + /nix/store/w07x2k4wi8xvmh2nyxvx50nw5pxaga6y-expand-response-params.drv:{out}
    • The set of input derivation names do not match:
        - bootstrap-stage1-stdenv-linux
        + bootstrap-stage3-stdenv-linux
    • The environments do not match:
        stdenv=''
        - /nix/store/7wafj75gbf8kr9i3isdajc5vlm0r8jjp-bootstrap-stage1-stdenv-linux
        + /nix/store/n89rpfsfs317j2qbm57905qzzq0amyhy-bootstrap-stage3-stdenv-linux
    ''
  • Skipping environment comparison
• Skipping environment comparison</code></pre>
<p>The above helps getting some intuition on what packages change from one <strong>stdenv</strong>
to another.</p>
<p>This still does not show crucial details of where do those <strong>-B</strong> / <strong>-L</strong> options come
from into the <strong>gcc-wrapper</strong>. And why they matter at all.</p>
<h1 id="option-stacking">option stacking</h1>
<p>In contrast to <strong>FHS</strong> distributions <strong>nix</strong> explicitly allows and encourages previous
versions of software to co-exist with newer ones.</p>
<p>In our case of <strong>stdenv-stage2</strong> just rebuilds <strong>glibc</strong>. On <strong>FHS</strong> system
we would update <strong>glibc</strong> inplace and would rely on it’s backwards compatibility to
avoid system breakage right after such an update. It is practical for simle use cases but
sometimes this causes complications. For example it’s hard to downgrade <strong>glibc</strong>
once you have rebuilt a few dependencies (say, <strong>gcc</strong>) against a newer version.
And inplace glibc update can cause issues with already running executables that lazily load
<strong>nss</strong> resolver libraries.</p>
<p>Simplistically <strong>nixpkgs</strong> sidesteps the problem by effectively building multiple separate
worlds against different libcs (libc usually come with <strong>stdenv</strong> update or by using
non-default stdenv, like <strong>pkgsMusl.stdenv</strong>).</p>
<p>For our bootstrap case we somehow need to transition:</p>
<ul>
<li>from: <strong>gcc</strong> (provided by <strong>bootstrap-tools</strong>) linked against <strong>glibc</strong> (provided by <strong>bootstrap-tools</strong>)</li>
<li>to: <strong>gcc</strong> (provided by <strong>nixpkgs</strong>) linked against <strong>glibc</strong> (provided by <strong>nixpkgs</strong>)</li>
</ul>
<p>One of the ways to do it is:</p>
<ul>
<li>build <strong>glibc</strong></li>
<li>redirect <strong>gcc</strong> (from <strong>bootstrap-tools</strong>) to built <strong>glibc</strong></li>
<li>build new <strong>gcc</strong></li>
<li>[optional] build <strong>glibc</strong> and <strong>gcc</strong> again (to disentangle from
<strong>bootstrap-tools</strong>’s <strong>gcc</strong> code generator)</li>
</ul>
<p>The “redirect <strong>gcc</strong>” part is a tricky but too much: all it needs is the
override of default <strong>-B</strong> / <strong>-L</strong> / <strong>-Wl,-dynamic-linker,</strong> set of flags
mentioned in <a href="../posts/239-hacking-on-glibc.html">hacking-on-glibc post</a>.</p>
<p>We need to watch for option order if we already specify our toolchain
explicitly. Let’s look at the following example artificial:</p>
<pre><code># prepare library copies to see the effect:

$ mkdir -p a b
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o a/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o b/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so a/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6 a/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so b/
$ cp /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6 b/
$ cp /glibc-2.33-108/lib/ld-linux-x86-64.so.2 a/
$ cp /glibc-2.33-108/lib/ld-linux-x86-64.so.2 b/

$ tree
.
├── a
│   ├── crt1.o
│   ├── ld-linux-x86-64.so.2
│   ├── libc.so
│   └── libc.so.6
├── a.c
├── b
│   ├── crt1.o
│   ├── ld-linux-x86-64.so.2
│   ├── libc.so
│   └── libc.so.6</code></pre>
<p>Above I placed idential copies of <strong>glibc</strong> into a new directory (suppose
we built slightly newer version of <strong>glibc</strong>) and then pointed <strong>gcc</strong> there.</p>
<p>Quiz time: try to take some time and guess what the following command would print:</p>
<pre><code>$ LANG=C gcc hello.c -o c -Wl,--verbose \
    -La -Lb \
    -Bb -Ba \
    -Wl,--dynamic-linker=$PWD/a/ld-linux-x86-64.so.2 -Wl,--dynamic-linker=$PWD/b/ld-linux-x86-64.so.2 \
    |&amp; fgrep succeeded | unnix | uniq</code></pre>
<p>Note that <strong>-L</strong> options go in a-then-b order, <strong>-B</strong> options go in b-then-a
order and dynamic-linker again goes in a-then-b.</p>
<p>Guess which files get picked from which directory.</p>
<p>Here is the result:</p>
<pre><code>$ gcc a.c -o c -Wl,--verbose -La -Lb -Bb -Ba -Wl,--dynamic-linker=$PWD/a/ld-linux-x86-64.so.2 -Wl,--dynamic-linker=$PWD/b/ld-linux-x86-64.so.2 |&amp; fgrep succeeded | unnix | uniq
attempt to open b/crt1.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crti.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtbegin.o succeeded
attempt to open /tmp/cctmOQBK.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open a/libc.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc_nonshared.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtend.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crtn.o succeeded</code></pre>
<p>Surprisingly (or not so surprisingly) <strong>crt1.o</strong> came from <strong>-Bb</strong>
(first option in the list), <strong>libc.so</strong> came from <strong>-La</strong> (also first
option in the list). But dynamic linker was … ignored?</p>
<p>Yeah. Note that <strong>gcc</strong> is already a thick wrapper in <strong>nixpkgs</strong>.
Let’s expand it with <strong>NIX_DEBUG=1</strong>:</p>
<pre><code>$ NIX_DEBUG=1 gcc a.c -o c -La -Lb -Bb -Ba -Wl,--dynamic-linker=$PWD/a/ld-linux-x86-64.so.2 -Wl,--dynamic-linker=$PWD/b/ld-linux-x86-64.so.2 |&amp; unnix

HARDENING: disabled flags: pie pic format stackprotector fortify strictoverflow
extra flags before to /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/bin/gcc:
  -Wl\,-dynamic-linker=/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2
original flags to /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/bin/gcc:
  a.c
  -o
  c
  -La
  -Lb
  -Bb
  -Ba
  -Wl\,--dynamic-linker=/tmp/zz/a/ld-linux-x86-64.so.2
  -Wl\,--dynamic-linker=/tmp/zz/b/ld-linux-x86-64.so.2
extra flags after to /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/bin/gcc:
  -B/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0-lib/lib
  -B/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/
  -idirafter
  /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include
  -idirafter
  /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/include-fixed
  -B/&lt;&lt;NIX&gt;&gt;/gcc-wrapper-11.2.0/bin/
  -L/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib
  -L/&lt;&lt;NIX&gt;&gt;/gcc-11.2.0-lib/lib
HARDENING: disabled flags: relro pie bindnow
extra flags before to /&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld:
  ''
...</code></pre>
<p>Note that <strong>gcc</strong> already injects <strong>-Wl,-dynamic-linker=/&lt;<NIX>&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2</strong>
as the very first parameter (even before our options). As a result it gets
picked first. Inability to override the dynamic linker looks like minor a bug
of <strong>nixpkgs</strong> wrapper. I think wrapper should consistently treat all
libc overrides. It’s unsafe to mix different parts of <strong>glibc</strong>
(we already saw <strong>SIGSEGV</strong> on <strong>hello.c</strong> above).</p>
<p>If you guessed this output right you already know a lot more than me
on this topic :)</p>
<p>Given that option order matters a lot <strong>nixpkgs</strong> needs to make sure
that overrides work as expected at least most of the time:
if we override <strong>-L</strong> option for <strong>glibc</strong>, then <strong>-B</strong> option override
should be present and should follow order specified by <strong>-L</strong> (and not
the other way around).</p>
<p>I found out about these details only because <strong>nixpkgs</strong> was actually
getting the option order wrong until
<a href="https://github.com/NixOS/nixpkgs/pull/158047/commits/649ebfbed65189d7d62e4f2fe0e491552308a6f1" class="uri">https://github.com/NixOS/nixpkgs/pull/158047/commits/649ebfbed65189d7d62e4f2fe0e491552308a6f1</a>
was applied.</p>
<p>For quite a while <strong>nixpkgs</strong> was using <strong>crt1.o</strong> from wrong <strong>glibc</strong>
which made <strong>stdenv</strong> slightly contaminated by <strong>bootstrap-tools</strong>.
It used to work because <strong>crt1.o</strong> contents did not change for many
<strong>glibc</strong> releases. Until <strong>glibc-2.34</strong>. Then we started getting all
sorts of linkage failures at bootstrap:</p>
<pre><code>    expand-response-params&gt; ld: /nix/store/p4s4jf7aq6v6z9iazll1aiqwb34aqxq9-bootstrap-tools/lib/crt1.o: in function `_start':
    expand-response-params&gt; /build/glibc-2.27/csu/../sysdeps/x86_64/start.S:101: undefined reference to `__libc_csu_fini'
    expand-response-params&gt; ld: /build/glibc-2.27/csu/../sysdeps/x86_64/start.S:102: undefined reference to `__libc_csu_init'
    expand-response-params&gt; collect2: error: ld returned 1 exit status</code></pre>
<p>Once understood the fix (or workaround) was trivial.</p>
<p>There are many ways to avoid the mix-up in future. The simplest would be
to never pass more than one <strong>glibc</strong> via <strong>-B</strong> / <strong>-L</strong> and always
disable defaul search paths. But that’s for another time :)</p>
<p>Have fun!</p>

<div class="info">
    Posted on March 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Hacking on glibc</title>
    <link href="http://trofi.github.io/posts/239-hacking-on-glibc.html" />
    <id>http://trofi.github.io/posts/239-hacking-on-glibc.html</id>
    <published>2022-03-13T00:00:00Z</published>
    <updated>2022-03-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Hacking on glibc</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Hacking on glibc</h1>

            <h1 id="intro">Intro</h1>
<p>Sometimes it’s useful to check fresh <strong>glibc</strong> out and test a fix
against it. Or add a few <strong>printf()</strong> statements into relevant modules.
Fun past cases of the above are
<a href="../posts/189-glibc-on-ia64-or-how-relocations-bootstrap.html">here</a>,
<a href="../posts/205-stack-protection-on-mips64.html">here</a> and
<a href="../posts/209-tracking-down-mysterious-memory-corruption.html">here</a>.</p>
<p>We’ll look in more detail how to build and use local glibc for debugging
purposes. I’ll focus on redirecting the toolchain (and not on the ways to
break glibc with rare <strong>CFLAGS</strong> or configure <strong>--options</strong>). That would
be a separate big and entertaining topic :)</p>
<p>It also might be useful for folks who deal with systems that involve
multiple <strong>glibc</strong> versions present in the system simultaneously
(for bootstrap, embedded development or testing purposes).</p>
<h1 id="hello-world-anatomy">Hello World anatomy</h1>
<p>Suppose you have just built a fresh experimental <strong>glibc</strong> version.
How do you build and run a simple “hello world” program against it
without modifying already installed system <strong>glibc</strong> and <strong>gcc</strong>?</p>
<p>Let’s dissect a simple “hello world” in detail and try to extract
a few assumptions that <strong>gcc</strong> and <strong>binutils</strong> already embeds.
Here is our specimen:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// hello.c:</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> puts <span class="op">(</span><span class="st">&quot;hello!&quot;</span><span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>The example compiles and runs just fine:</p>
<pre><code>$ gcc -c hello.c -o hello.o
$ gcc hello.o -o hello
$ ./hello
hello!</code></pre>
<p>If you are somewhat familiar with the C toolchain you might already know
that there are a few stages involved:</p>
<ul>
<li><strong>compilation</strong>: C-source preprocessing (include substitution) and
translation of preprocessed C-source file into <strong>.o</strong> file</li>
<li><strong>linkage</strong>: <strong>.o</strong> files and their dependencies are joined together into
final executable file</li>
</ul>
<p>Let’s look at the preprocessing stage. Where do preprocessed headers
come from? We can have a peek at it by looking at preprocessed output
using <strong>-E</strong> flag:</p>
<pre><code>$ gcc -E hello.c -o - | head -n 10 | unnix

# 0 &quot;hello.c&quot;
# 0 &quot;&lt;built-in&gt;&quot;
# 0 &quot;&lt;command-line&gt;&quot;
# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdc-predef.h&quot; 1 3 4
# 0 &quot;&lt;command-line&gt;&quot; 2
# 1 &quot;hello.c&quot;

# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdio.h&quot; 1 3 4
# 27 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdio.h&quot; 3 4
# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/bits/libc-header-start.h&quot; 1 3 4
...</code></pre>
<p>As expected <strong>&lt;stdio.h&gt;</strong> comes from <strong>glibc</strong>. On <strong>FHS</strong> systems
that is usually <strong>/usr/include</strong>.</p>
<p>There also is another mysterious header: <strong>stdc-predef.h</strong> (also a <strong>glibc</strong>
one). It gets added even into empty files:</p>
<pre><code>$ echo | gcc -E - -o - | head -n 10 | unnix

# 0 &quot;&lt;stdin&gt;&quot;
# 0 &quot;&lt;built-in&gt;&quot;
# 0 &quot;&lt;command-line&gt;&quot;
# 1 &quot;/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108-dev/include/stdc-predef.h&quot; 1 3 4
# 0 &quot;&lt;command-line&gt;&quot; 2
# 1 &quot;&lt;stdin&gt;&quot;</code></pre>
<p><strong>stdc-predef.h</strong> is a header <strong>gcc</strong> knows to import if it targets <strong>glibc</strong>
(but not other libcs): <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/config/glibc-c.cc" class="uri">https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/config/glibc-c.cc</a>.</p>
<p>Preprocessing was straightforward. Ideally translation should not
depend on glibc specifics. In practice it might but we’ll ignore it here.</p>
<p>Let’s now look at linking phase.
We’ll use <strong>-Wl,--verbose</strong> flag to get details of what linker actually
pulls in:</p>
<pre><code>$ LANG=C gcc hello.o -o hello -Wl,--verbose | fgrep succeeded | unnix

attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crti.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtbegin.o succeeded
attempt to open hello.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc.so.6 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libc_nonshared.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtend.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crtn.o succeeded</code></pre>
<p>That is a lot of output! But be not afraid. Some things repeat here 4
times and inflate the output a bit.</p>
<p>All these files above are used in linking process:</p>
<ul>
<li><strong>crt{1,i,n}.o</strong>: <strong>glibc</strong>’s runtime startup and shutdown support files (<strong>__attribute__((contructor))</strong> support)</li>
<li><strong>crt{begin,end}</strong>: <strong>gcc</strong>’s runtime startup and shutdown support files (c++ global constructor and destructor support)</li>
<li><strong>hello.o</strong>: our own file!</li>
<li><strong>libgcc.a</strong>, <strong>libgcc_s.so</strong>: <strong>gcc</strong>’s runtime support for primitives that compiler
needs when CPU does not always provide as instructions (128-bit integer multiplication, stack unwinders,
atomic promitives on unusual type size and similar).</li>
<li><strong>libc.so</strong>, <strong>libc_nonshared.a</strong>: actual C library that implements <strong>puts()</strong> (<strong>printf()</strong>) and friends.</li>
<li><strong>ld-linux-x86-64.so.2</strong>: <strong>glibc</strong>’s dynamic loader.</li>
</ul>
<h1 id="custom-glibc">Custom glibc</h1>
<p>We found out that <strong>glibc</strong> provides us at least:</p>
<ul>
<li>include headers</li>
<li><strong>crt{1,i,n}.o</strong> object files</li>
<li><strong>libc.so</strong> shared object files</li>
<li><strong>libc_nonshared.a</strong> static library files</li>
<li><strong>ld-linux-x86-64.so.2</strong>: dynamic loader</li>
</ul>
<p>Now we should be able to redirect all these pieces. Let’ build our custom glibc first:</p>
<pre><code>$ git clone https://sourceware.org/git/glibc.git /tmp/custom-glibc-src
$ mkdir -p /tmp/custom-glibc-build /tmp/custom-glibc-install

$ cd /tmp/custom-glibc-build
$ /tmp/custom-glibc-src/configure --prefix=/tmp/custom-glibc-install
$ make &amp;&amp; make install</code></pre>
<p>We can already use resulting <strong>glibc</strong> to run other programs:</p>
<pre><code>$ /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 --library-path /tmp/custom-glibc-install/lib $(which id)

uid=1000(slyfox) gid=100(users) groups=100(users),1(wheel),26(video)

$ LD_DEBUG=all /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 --library-path /tmp/custom-glibc-install/lib $(which id) |&amp; fgrep relocation | unnix
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/libc.so.6 (lazy)
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/libdl.so.2 (lazy)
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/libpthread.so.0 (lazy)
   2844932:     relocation processing: /&lt;&lt;NIX&gt;&gt;/attr-2.5.1/lib/libattr.so.1
   2844932:     relocation processing: /&lt;&lt;NIX&gt;&gt;/acl-2.3.1/lib/libacl.so.1
   2844932:     relocation processing: /&lt;&lt;NIX&gt;&gt;/openssl-1.1.1m/lib/libcrypto.so.1.1
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/librt.so.1 (lazy)
   2844932:     relocation processing: /run/current-system/sw/bin/id
   2844932:     relocation processing: /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2</code></pre>
<p>I’m searching for “relocation” here as a hack to see all loaded files in memory.</p>
<p>From the above we see that <strong>libc.so</strong>, <strong>libdl.so</strong> and
<strong>libpthread.so</strong> are used from our custom <strong>glibc</strong>. But <strong>libattr.so</strong>
(<strong>attr</strong> package), <strong>libacl.so</strong> (<strong>acl</strong> package), <strong>libcrypto.so</strong>
(<strong>openssl</strong> package) are used from their current locations. It is safe
to load such libraries only if they were built against same or older
<strong>glibc</strong> versions. All thanks to <strong>glibc</strong> being backwards compatible.</p>
<p>If we would, say, use use <strong>glibc-2.8</strong> as a custom version thighs would
probaby fail to load as those libraries depend on fresh symbols:</p>
<pre><code>$ LD_DEBUG=all /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 --library-path /tmp/custom-glibc-install/lib $(which id) |&amp; fgrep libcrypto | fgrep GLIBC_2.17 | unnix
    532869:     checking for version `GLIBC_2.17' in file /tmp/custom-glibc-install/lib/libc.so.6 [0] required by file /&lt;&lt;NIX&gt;&gt;/openssl-1.1.1m/lib/libcrypto.so.1.1 [0]</code></pre>
<p>In this case <strong>id</strong> binary requires at least <strong>glibc-2.17</strong> (via <strong>libcrypto.so</strong> dependency).</p>
<p>Ok, so running against modified glibc is straightforward. It would be
useful to rebuild <strong>id</strong> (and <strong>openssl</strong>) against older <strong>glibc</strong>.
Let’s now try building our toy example against modified <strong>glibc</strong>.</p>
<p>To deal with preprocessor we can use <strong>-I</strong> option:</p>
<pre><code>$ gcc -E hello.c -o - -I/tmp/custom-glibc-install/include | head -n 10 | unnix
# 0 &quot;hello.c&quot;
# 0 &quot;&lt;built-in&gt;&quot;
# 0 &quot;&lt;command-line&gt;&quot;
# 1 &quot;/tmp/custom-glibc-install/include/stdc-predef.h&quot; 1
# 0 &quot;&lt;command-line&gt;&quot; 2
# 1 &quot;hello.c&quot;

# 1 &quot;/tmp/custom-glibc-install/include/stdio.h&quot; 1
# 27 &quot;/tmp/custom-glibc-install/include/stdio.h&quot;
# 1 &quot;/tmp/custom-glibc-install/include/bits/libc-header-start.h&quot; 1
...</code></pre>
<p>For complex cases <strong>gcc</strong> supports many other flavours of handling include
paths: <strong>-isystem</strong>, <strong>-idirafter</strong>, <strong>-isysroot</strong>, <strong>-Iquote</strong> and
many more :) We will use simplest <strong>-I</strong>.</p>
<p>Now let’s deal with the <strong>libc.so</strong> location. Normally <strong>-L</strong> option would
be enough to specify library lookup path:</p>
<pre><code>{ LANG=C gcc hello.o -o hello -Wl,--verbose -L/tmp/custom-glibc-install/lib | fgrep succeeded; } |&amp; unnix
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o: in function `_start':
/build/glibc-2.33/csu/../sysdeps/x86_64/start.S:101: undefined reference to `__libc_csu_fini'
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /build/glibc-2.33/csu/../sysdeps/x86_64/start.S:102: undefined reference to `__libc_csu_init'
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: link errors found, deleting executable `hello'
collect2: error: ld returned 1 exit status
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crt1.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crti.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtbegin.o succeeded
attempt to open hello.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so.6 succeeded
attempt to open /tmp/custom-glibc-install/lib/libc_nonshared.a succeeded
attempt to open /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtend.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/crtn.o succeeded</code></pre>
<p>Almost worked!</p>
<ul>
<li><p>good: we successfully redirected <strong>libc.so.6</strong> and <strong>libc_nonshared.a</strong>
(as expected); and even <strong>ld-linux-x86-64.so.2</strong> was redirected!</p></li>
<li><p>bad: <strong>crt{1,i,n}.o</strong> set of files were not redirected; they are not exactly libraries, thus it’s fine.</p></li>
</ul>
<p><strong>crt{1,i,n}.o</strong> are still pulled in from system <strong>glibc</strong>. Such a mix of parts from different <strong>glibc</strong> versions causes linkage failure: <strong>undefined reference to ‘__libc_csu_fini’</strong>.</p>
<p>Object files can be redirected with <strong>-B</strong> (or can be redirected with <strong>-nostartfiles /path/to/crt{1,i,n}.o</strong>):</p>
<pre><code>$ LANG=C gcc hello.o -o hello -Wl,--verbose -L/tmp/custom-glibc-install/lib -B/tmp/custom-glibc-install/lib | fgrep succeeded |&amp; unnix
attempt to open /tmp/custom-glibc-install/lib/crt1.o succeeded
attempt to open /tmp/custom-glibc-install/lib/crti.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtbegin.o succeeded
attempt to open hello.o succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so succeeded
attempt to open /tmp/custom-glibc-install/lib/libc.so.6 succeeded
attempt to open /tmp/custom-glibc-install/lib/libc_nonshared.a succeeded
attempt to open /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/libgcc_s.so.1 succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/libgcc.a succeeded
attempt to open /&lt;&lt;NIX&gt;&gt;/gcc-11.2.0/lib/gcc/x86_64-unknown-linux-gnu/11.2.0/crtend.o succeeded
attempt to open /tmp/custom-glibc-install/lib/crtn.o succeeded</code></pre>
<p>Let’s ignore <strong>libgcc_s.so</strong> for now. It’s not really a part of <strong>glibc</strong> but
a <strong>nixpkgs</strong> idiosyncrasy. The rest of <strong>glibc</strong> files is successfully redirected!</p>
<p>Does final result look good now? Let’s try!</p>
<pre><code>$ LANG=C ./hello
Segmentation fault (core dumped)</code></pre>
<p>Our program can’t even run. Why is that?</p>
<pre><code>$ LD_DEBUG=all ./hello |&amp; fgrep reloc | unnix
   1359934:     relocation processing: /tmp/custom-glibc-install/lib/libc.so.6 (lazy)
   1359934:     relocation processing: ./hello (lazy)
   1359934:     relocation processing: /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-linux-x86-64.so.2</code></pre>
<p><strong>LD_DEBUG=all</strong> hints at dynamic loader from our system <strong>glibc</strong>
and not from custom <strong>glibc</strong>. That path is embedded into *gcc** itself:</p>
<pre><code>gcc -dumpspecs |&amp; fgrep ld-linux | unnix
...
    -dynamic-linker %{muclibc:/lib/ld64-uClibc.so.0;:
                    %{mbionic:/system/bin/linker64;:
                    %{mmusl:/&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib/ld-musl-x86_64.so.1;:
                    /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib64/ld-linux-x86-64.so.2}}}
...</code></pre>
<p>Here linker spec always passes <strong>-dynamic-linker /&lt;&lt;NIX&gt;&gt;/glibc-2.33-108/lib64/ld-linux-x86-64.so.2</strong>
path to the linker until it’s expliictly overridden. Let’s override it explicitly.</p>
<p>Here is our final combined result of overriding headers, libraries,
object files and dynamic linker:</p>
<pre><code>$ gcc hello.c -o hello \
    -I/tmp/custom-glibc-install/include \
    \
    -L/tmp/custom-glibc-install/lib \
    -B/tmp/custom-glibc-install/lib \
    -Wl,-dynamic-linker,/tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2

$ ./hello
hello!

$ LD_DEBUG=all ./hello |&amp; fgrep reloc | unnix
   1398510:     relocation processing: /tmp/custom-glibc-install/lib/libc.so.6 (lazy)
   1398510:     relocation processing: ./hello (lazy)
   1398510:     relocation processing: /tmp/custom-glibc-install/lib/ld-linux-x86-64.so.2</code></pre>
<p>Success! We completely untangled from host’s <strong>glibc</strong>.</p>
<p>Sometimes (usually in bare-metal space) it’s easier to drop defaults
entirely and specify all the dependencies as explicit arguments.
A few related options you might want to explore in <strong>gcc</strong> are:</p>
<ul>
<li><strong>-nostdinc</strong></li>
<li><strong>-nostdlib</strong></li>
<li><strong>-nolibc</strong></li>
<li><strong>-nodefaultlibs</strong></li>
<li><strong>-nostartfiles</strong></li>
<li><strong>-ffreestanding</strong></li>
</ul>
<p>They explicitly disable search paths for: include paths, startup files or
standard and runtime support libraries. Their interaction is subtle. I won’t
get into detail here either.</p>
<h1 id="parting-words">Parting words</h1>
<p>It is straightforward to experiment with new <strong>glibc</strong> without damaging
your main install on most Linux distributions. Just make sure you set the
environment up correctly and override all the bits.</p>
<p><strong>glibc</strong> has many moving parts to watch for when you replace parts of
it: headers (<strong>-I</strong>), object files (<strong>-B</strong>), shared libraris (<strong>-L</strong>),
static libraries (also <strong>-L</strong>) and dynamic linker (<strong>ld-linux-x86-64.so.2</strong>).</p>
<p><strong>LD_DEBUG=</strong> is extremely useful for dynamic loader debugging.</p>
<p>Mixing parts from different <strong>glibc</strong> versions in a single binary is a
sure way to get build failure and even runtime crashes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on March 13, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>New make --shuffle mode</title>
    <link href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html" />
    <id>http://trofi.github.io/posts/238-new-make-shuffle-mode.html</id>
    <published>2022-02-23T00:00:00Z</published>
    <updated>2022-02-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: New make --shuffle mode</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>New make --shuffle mode</h1>

            <h1 id="tldr">TL;DR:</h1>
<p>I implemented new <strong>--shuffle</strong> option for <strong>GNU make</strong> to simulate
non-deterministic build order in parallel makefiles.</p>
<h1 id="background">Background</h1>
<p>About 11 years ago I was a year old Gentoo dev who just started getting
downstream bug reports on mysterious <strong>ghc</strong> build failures like
<a href="https://bugs.gentoo.org/326347" class="uri">https://bugs.gentoo.org/326347</a>.</p>
<p>The symptoms were seemingly simple: some file was inacessible while
it was being written to, or executed.</p>
<p>Years later I mastered the intricacies of <strong>ghc</strong>’s build system on how
to debug it effectively. But at that time I did not really know what to
do. My main working machine was a Core 2 duo HP laptop which could not do
more than <strong>-j2</strong>. And even that required a bit of swap for <strong>ghc</strong>’s
linking stage. Throwing more parallelism was not really an option to
trigger such bugs.</p>
<h1 id="makefile-target-ordering">Makefile target ordering</h1>
<p><strong>Makefiles</strong> are fundamentally simple: it’s a graph of dependencies
with a sequence of shell commands attached to a node. There are numerous
caveats, but they should not break this model too much.</p>
<p>In theory you can topologically sort the graph and execute the dependencies
in various conformant orders and expect the same result. Modulo missing
dependencies in the graph.</p>
<p>In practice <strong>GNU make</strong> happens to traverse the graph in very specific
topological order: it maintains syntactic order as much as possible.</p>
<p>Here is an example <strong>Makefile</strong>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co"># cat Makefile</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> a b c</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dv">b:</span><span class="dt"> b1 b2 b3</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span><span class="dt"> a1 a2 a3</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dv">c:</span><span class="dt"> c1 c2 c3</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="dv">a b c a1 a2 a3 b1 b2 b3 c1 c2 c3:</span><span class="dt">; @echo </span><span class="ch">$@</span><span class="dt"> &amp;&amp; sleep 1</span></span></code></pre></div>
<p>(I added <strong>sleep 1</strong> to make it more visible when next goal schedules).</p>
<p>Here is the sequential execution by <strong>GNU make</strong>:</p>
<pre><code>$ make
a1
a2
a3
a
b1
b2
b3
b
c1
c2
c3
c</code></pre>
<p>The seen order is exactly <strong>all</strong>’s prerequisites left-to-right
recursively.</p>
<p>Adding parallelism does not change the order too much: <strong>make</strong> still
traverses prerequisited in the same order and starts as many targets
with satisfied dependencies as possible.</p>
<p>Parallel example:</p>
<pre><code>$ make -j4
a1
a2
a3
b1

b2
b3
c1
c2

c3
a
b

c</code></pre>
<p>I added newlines where 1-second pauses visibly happen.</p>
<p>Note that in this example <strong>a1</strong> does not depend on
<strong>c2</strong>. But <strong>c2</strong> practically always starts execution after <strong>a1</strong>
finishes.</p>
<p>The “only” way to run <strong>a1</strong> and <strong>c2</strong> in parallel is to run
<strong>make</strong> with at least <strong>-j8</strong>. Which is a lot.</p>
<p>Or do something with the system that stalls task execution for
indefinite amount of time (like, adding various nice levels
or put system under high memory or CPU pressure).</p>
<p>Very occasionally already stressed system naturally gets into
unusual task execution order. You get the one-off failure and
struggle to repeat it ever again. Which makes it very hard to
test the fix unless you know where exactly to put the <strong>sleep</strong>
command to make it more reproducible.</p>
<h1 id="an-old-idea">An old idea</h1>
<p>Even then it was clear that CPU count per device will only increase
and it will be increasingly painful to work with sequentially built
projects :) Bugs will come back again and again on you the more cores
you throw at the <strong>Makefiles</strong>.</p>
<p>I had a silly idea back then (post <a href="../posts/143-make-idea.html">in russian</a>):
what if we arbitrarily reorder the prerequisites in <strong>Makefile</strong>s? Or
maybe even trace spawned processes to know for sure what files targets
access? That might allow us to weed out most of the parallel bugs with
some sort of stress test on a low-core machine.</p>
<p>Fast forward 11 years I attempted to enable build parallelism by default
in <a href="https://discourse.nixos.org/t/rfc-make-stdenv-to-build-in-parallel-by-default/15684/8">nixpkgs</a>.
A few packages still had <a href="../posts/230-when-make-j-nproc-fails.html">some issues</a>.</p>
<p>I recalled the idea and tried to implement target random shuffle within
<strong>GNU make</strong>!</p>
<h1 id="better-reproducer-make---shuffle">Better reproducer: make --shuffle</h1>
<p>Initial idea was very simple: pick target order at <strong>Makefile</strong>
parse time and reshuffle the lists randomly. To pick an example
above one of the example shuffles would be:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ch">$ </span>cat Makefile</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> c b a</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dv">b:</span><span class="dt"> b2 b1 b3</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span><span class="dt"> a3 a2 a1</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="dv">c:</span><span class="dt"> c1 c2 c3</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="dv">a b c a1 a2 a3 b1 b2 b3 c1 c2 c3:</span><span class="dt">; @echo </span><span class="ch">$@</span><span class="dt"> &amp;&amp; sleep 1</span></span></code></pre></div>
<p>I wrote a patch and proposed it to GNU make community:
<a href="https://lists.gnu.org/archive/html/bug-make/2022-02/msg00005.html" class="uri">https://lists.gnu.org/archive/html/bug-make/2022-02/msg00005.html</a>.</p>
<p>The example run of patched <strong>make</strong> shows less determinism now:</p>
<pre><code>$ ~/dev/git/make/make --shuffle -j4
c2
c3
c1
a2

a1
b2
a3
b3

b1

c
b
a</code></pre>
<p>Paul did not seem to object too much to the idea and pointed out
that implementation will break more complex <strong>Makefiles</strong> as there
is a simple way to refer to individual prerequisites by number.</p>
<p>To pick Pauls’ example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o :</span><span class="dt"> %.c</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> -c -o <span class="ch">$@</span> <span class="ch">$&lt;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.o:</span><span class="dt"> foo.c foo.h bar.h baz.h</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co">#</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="dv">foo%:</span><span class="dt"> arg%1 arg%2 arg%3 arg%4</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>	bld <span class="ch">$&lt;</span> <span class="ch">$(</span><span class="kw">word</span><span class="st"> 3</span><span class="kw">,</span><span class="ch">$^)</span> <span class="ch">$(</span><span class="kw">word</span><span class="st"> 2</span><span class="kw">,</span><span class="ch">$^)</span> <span class="ch">$(</span><span class="kw">word</span><span class="st"> 4</span><span class="kw">,</span><span class="ch">$^)</span></span></code></pre></div>
<p>In both cases syntactic reshuffling breaks the build rules
by passing wrong file name.</p>
<p>To fix it I came up with a way to store two orders at the same time:
syntactic and shuffled and posted patch as
<a href="https://lists.gnu.org/archive/html/bug-make/2022-02/msg00042.html" class="uri">https://lists.gnu.org/archive/html/bug-make/2022-02/msg00042.html</a>.</p>
<h1 id="running-make---shuffle-on-real-projects">Running ‘make --shuffle’ on real projects</h1>
<p>While I was waiting for the feedback I ran the build tests against
<strong>nixpkgs</strong> packages.</p>
<p>First, I almost instantly got build failures on the projects that already
explicitly disable parallel builds to avoid known failures: <strong>groff</strong>,
<strong>source-highlight</strong>, <strong>portaudio</strong>, <strong>slang</strong>, <strong>gnu-efi</strong>, <strong>bind</strong>,
<strong>pth</strong>, <strong>libomxil</strong>, <strong>dhcp</strong>, <strong>directfb</strong>, <strong>doxygen</strong>, <strong>gpm</strong>,
<strong>judy</strong> and a few others. That was a good sign.</p>
<p>A bit later I started getting failures I did not encounter before in
<strong>ghc</strong>(!), <strong>gcc</strong>(!!), <strong>automake</strong>(!!!), <strong>pulseaudio</strong>,
<strong>libcanberra</strong>, many <strong>ocaml</strong> and some <strong>perl</strong> packages.</p>
<p>All the failures looked genuine missing dependencies. For example
<strong>gcc</strong>’s <strong>libgfortran</strong> is missing a <strong>libquadmath</strong> build dependency.
It is natural not to encounter it in real world as <strong>libquadmath</strong> is
usually built along with other small runtimes way before <strong>g++</strong> or
<strong>gfortran</strong> is ready.</p>
<p>Fun fact: while running the build I stumbled on a <strong>GNU make</strong> bug
not related to my change: <a href="https://lists.gnu.org/archive/html/bug-make/2022-02/msg00037.html" class="uri">https://lists.gnu.org/archive/html/bug-make/2022-02/msg00037.html</a>.
The following snippet tricks <strong>GNU make</strong> to loop for a while until
it crashes with argument list exhaustion (or inode exhaustion in
<strong>/tmp</strong>):</p>
<pre><code>$ printf 'all:\n\techo $(CC)' | ./make -sf -
&lt;hung&gt;</code></pre>
<p>This bug is not present in any releases yet. And hopefully will not be.</p>
<p>I’d like to land the <strong>--shuffle</strong> change upstream in some form before
sending bug reports and trivial fixes to upstreams.</p>
<h1 id="how-you-can-test-it">How you can test it</h1>
<p>If you are keen to try this shuffling mode on your <strong>make</strong>-based
projects (be it manually written, <strong>automake</strong>-based ro <strong>cmake</strong>-based)
here is a rough instruction to do it:</p>
<ul>
<li>grab current git tree of <strong>GNU make</strong> at <a href="https://git.savannah.gnu.org/git/make.git" class="uri">https://git.savannah.gnu.org/git/make.git</a></li>
<li>apply <a href="https://savannah.gnu.org/bugs/download.php?file_id=52908">v4-0001-Add-shuffle-argument-support.patch</a> from <a href="https://savannah.gnu.org/bugs/index.php?62100" class="uri">https://savannah.gnu.org/bugs/index.php?62100</a></li>
<li>build <strong>make</strong> as typical <strong>./bothstrap &amp;&amp; configure &amp;&amp; make</strong></li>
<li>use it as <strong>path/to/make --shuffle &lt;your-typical-make-arguments&gt;</strong> against your project</li>
<li>check if the build succeeds, run it a few times</li>
</ul>
<p>Both sequential and parallel modes should work fine. I suggest trying
both. The shuffling overhead should be negligible.</p>
<h1 id="how-do-failures-look-like">How do failures look like</h1>
<p>When build fails it reports the shuffling mode and seed used. Let’s try it
on a concrete <strong>cramfsswap</strong> example:</p>
<pre><code>$ git clone https://github.com/julijane/cramfsswap.git
$ cd cramfsswap

$ ~/dev/git/make/make clean &amp;&amp; ~/dev/git/make/make
rm -f cramfsswap
gcc -Wall -g -O -o cramfsswap -lz cramfsswap.c
strip cramfsswap

$ ~/dev/git/make/make clean &amp;&amp; ~/dev/git/make/make
rm -f cramfsswap
strip cramfsswap
/nix/store/v56r6fqg2z5yc5nyjn737hiakc2xm0gh-binutils-2.38/bin/strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370</code></pre>
<p>Here we see a successful run and a failed run. Failed run reports
specific seed that might trigger the failure: <strong>--shuffle=1645603370</strong>.</p>
<p>We can use this seed explicitly:</p>
<pre><code>$ ~/dev/git/make/make --shuffle=1645603370
strip cramfsswap
strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370
$ ~/dev/git/make/make --shuffle=1645603370
strip cramfsswap
strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370
$ ~/dev/git/make/make --shuffle=1645603370
strip cramfsswap
strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1 --shuffle=1645603370</code></pre>
<p>Note how ordering is preserved across the runs with fixed seed.</p>
<h1 id="parting-words">Parting words</h1>
<p>Implementing the shuffling idea took a weekend. I should have tried
it earlier :) The result instantly found existing and new missing
dependencies in a small subset of real projects. Some of these failures
are very hard to trigger otherwise.</p>
<p>It would be nice to get <strong>--shuffle</strong> upstreamed to ease reporting
ordering problems to other projects without too much detail on how to get
unusual build orders. Otherwise this post would have to do.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February 23, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Nix and Guix in Gentoo in 2022</title>
    <link href="http://trofi.github.io/posts/237-nix-and-guix-and-gentoo-in-2022.html" />
    <id>http://trofi.github.io/posts/237-nix-and-guix-and-gentoo-in-2022.html</id>
    <published>2022-02-09T00:00:00Z</published>
    <updated>2022-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Nix and Guix in Gentoo in 2022</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Nix and Guix in Gentoo in 2022</h1>

            <h1 id="a-new-home">A new home</h1>
<p>In 2020 <strong>sys-apps/nix</strong> and <strong>sys-apps/guix</strong> were removed from
the main <strong>::gentoo</strong> tree into their own <strong>::nix-guix</strong> overlay:
<a href="https://github.com/trofi/nix-guix-gentoo/" class="uri">https://github.com/trofi/nix-guix-gentoo/</a></p>
<p>The move makes the installation process slightly more cumbersome
than before (<a href="../posts/196-nix-on-gentoo-howto.html">nix in 2017</a>,
<a href="../197-guix-on-gentoo-howto.html">guix in 2017</a>): overlays are
not the first thing users have to deal with.</p>
<p>Maciej moved setup basics out to overlay’s own readme files:
<a href="https://github.com/trofi/nix-guix-gentoo/#readme" class="uri">https://github.com/trofi/nix-guix-gentoo/#readme</a>. I added a standard
blurb on how one enables the overlay to make it slightly easier
for newcomers.</p>
<p><strong>::nix-guix</strong> overlay is still safe to use on a daily basis on top
of stable or unstable Gentoo system: it provides the minimum of extra
packages needed to get any of both package managers running.</p>
<h1 id="please-contribute">Please contribute :)</h1>
<p>PSA: I personally don’t use the overlay on a regular basis as I don’t
use Gentoo as my main system. Thus bugs might creep in and stay there
for quite a while until I notice. Please file the
<a href="https://github.com/trofi/nix-guix-gentoo/issues">issues</a> if you notice
something odd. Or just send the fixes straight away. These packages are
not that complicated. We’ll try to figure something out.</p>
<p>I’ll try to get a minimal CI locally but it will take some time.</p>
<h1 id="some-updates-meanwhile">Some updates meanwhile</h1>
<ul>
<li><strong>nix</strong> is updated to latest <strong>2.6.0</strong> version.
Normally it would be a trivial version update, but in case of <strong>nix</strong>
<strong>DESTDIR=</strong> support does not quite work and needs a few lines of
<strong>Makefile</strong> code: <a href="https://github.com/NixOS/nix/issues/5781" class="uri">https://github.com/NixOS/nix/issues/5781</a>.</li>
<li><strong>nix-9999</strong> and <strong>guix-9999</strong> ebuilds are in a reasonable shape for
day-to-day use.</li>
<li><strong>guix-1.3.0</strong> was fixed to pull successfully <strong>zstd</strong> binaries from
cache.</li>
</ul>
<h1 id="tip-of-the-day">Tip of the day</h1>
<p>The other day I found out that <strong>nixpkgs</strong> already has a script to update
packages automatically to latest version available. For <strong>github</strong> based
projects it’s a matter of adding one line:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>passthru.updateScript = nix<span class="op">-</span>update<span class="op">-</span>script <span class="op">{</span> <span class="va">attrPath</span> <span class="op">=</span> pname<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>Recent real world example is <strong>re2c</strong>: <a href="https://github.com/NixOS/nixpkgs/pull/156972" class="uri">https://github.com/NixOS/nixpkgs/pull/156972</a></p>
<p>For others you can add arbitrary code to extract current version. I tried
ot on <strong>poke</strong> recently: <a href="https://github.com/NixOS/nixpkgs/pull/157108" class="uri">https://github.com/NixOS/nixpkgs/pull/157108</a></p>
<p>Then package update becomes trivial by running <strong>nix-update</strong>.</p>
<p>Enjoy!</p>

<div class="info">
    Posted on February  9, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>A rust bug</title>
    <link href="http://trofi.github.io/posts/236-a-rust-bug.html" />
    <id>http://trofi.github.io/posts/236-a-rust-bug.html</id>
    <published>2022-02-09T00:00:00Z</published>
    <updated>2022-02-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: A rust bug</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>A rust bug</h1>

            <p>This is a post that documents a few tips to track down elusive problem
in a <strong>rust</strong> codebase of medium size: a few crates a few megabytes
of code each.</p>
<h1 id="the-exhibit">The exhibit</h1>
<p>It all started from seemingly minor problem: after an update of <strong>rust</strong>
from <strong>1.56.1</strong> to <strong>1.57.0</strong> testsuite of <strong>rav1e-0.4.1</strong> project started
<a href="https://github.com/NixOS/nixpkgs/pull/148358#issuecomment-985934315">failing in <strong>nixpkgs</strong></a></p>
<pre><code>failures:
    src/api/config/mod.rs - api::config::Config::new_context (line 232)
    src/api/context.rs - api::context::Context&lt;T&gt;::new_frame (line 41)
    src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 197)
    src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 222)
    src/api/context.rs - api::context::Context&lt;T&gt;::send_frame (line 75)</code></pre>
<p>Normally testsuite failures are a better starting point than a bug on
real application: the inputs are usually trivial, they exercise small
part of the library, you could run a test under debugger and check the
place where crash happens and so on.</p>
<p>Here is how our failing test
<a href="https://github.com/xiph/rav1e/blob/v0.5.1/src/api/context.rs#L278-L290">looks like</a>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">/// # fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let mut enc = EncoderConfig::default();</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     // So it runs faster.</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     enc.width = 16;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     enc.height = 16;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let cfg = Config::new().with_encoder_config(enc);</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let mut ctx: Context&lt;u8&gt; = cfg.new_context()?;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co">/// #</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     let frames = vec![ctx.new_frame(); 4].into_iter();</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     encode_frames(&amp;mut ctx, frames);</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">/// #</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co">/// #     Ok(())</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">/// # }</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span></code></pre></div>
<p>Looks simple. Testing against git checkout of <strong>rav1e</strong> shown the same failure:</p>
<pre><code>$ cargo test --release
failures:
     ...
     src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 204)
     src/api/context.rs - api::context::Context&lt;T&gt;::receive_packet (line 229)
 test result: FAILED. 4 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out; finished in 14.40s</code></pre>
<p>Using this data Jörg filed <a href="https://github.com/xiph/rav1e/issues/2851">upstream report</a>
at which point I thought the failure would be obvious to upstream developers.</p>
<h1 id="into-the-rabbit-hole">Into the rabbit hole</h1>
<p>I’m usually wary of filing bugs where it’s not very clear if it’s a fault of
my environment or a fault of some underlying package way below the affected
one.</p>
<p>In this case it looked like a simple <strong>rav1e</strong> bug to my unexperienced eye.</p>
<p>Unfortunately unspream’s suspiction fell on <strong>NixOS</strong> almost immediately :)
Luckily others were able to reproduce the same failure with recent enough
compiler. The failure nature remained to be a complete mystery to others.</p>
<p>I gave it a try.</p>
<p>First, this test is a doctest: it’s a part of source’s comment that <strong>doctest</strong>
tool extracts, compiles and runs. In theory if we do the same extraction
mechanically and write this code snippet to a text file it will fail the same.
It did not. Test kept failing only as a part of doctest run.</p>
<p>This proved to be a bit complicated to debug on release compiler: support for
collecting intermediate binaries from <strong>doctest</strong> is an unstable feature.</p>
<p>To avoid dealing with nightly compiler I resorted to patching the test with
<strong>sleep()</strong> to quickly hook into failure with a debugger in hopes of an obvious
bug:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/api/context.rs</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/api/context.rs</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -78,8 +78,10 @@ impl&lt;T: Pixel&gt; Context&lt;T&gt; {</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>   ///</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>   /// ```</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>   /// use rav1e::prelude::*;</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  /// use std::{thread, time};</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>   ///</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>   /// # fn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="va">+  /// thread::sleep(time::Duration::from_millis(1000 * 30));</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>   /// let cfg = Config::default();</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>   /// let mut ctx: Context&lt;u8&gt; = cfg.new_context().unwrap();</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>   /// let f1 = ctx.new_frame();</span></code></pre></div>
<p>The result somewhat worked:</p>
<pre><code>$ RUSTDOCFLAGS='-C debuginfo=2' cargo test --release --doc --verbose 'api::context::Context&lt;T&gt;::send_frame'
...
$ gdb -p $pid
(gdb) continue
Continuing.
[New Thread 0x7f4cf799e640 (LWP 503344)]
[New Thread 0x7f4cf779a640 (LWP 503345)]

Thread 2 &quot;rust_out&quot; received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7f4cf799e640 (LWP 503344)]
0x00007f4cf799d9d0 in ?? ()
(gdb) bt
#0  0x00007f4cf799d9d0 in ?? ()
#1  0x00007f4cf799e5f8 in ?? ()
#2  0x00007f4cf799da80 in ?? ()
#3  0x000055b1d909d861 in rayon_core::registry::WorkerThread::set_current (thread=0x7f4cf799d600)
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:636
#4  rayon_core::registry::main_loop (registry=..., index=0, worker=...)
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:807
#5  rayon_core::registry::ThreadBuilder::run (self=...)
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:55
#6  0x000055b1d90a41dd in rayon_core::registry::{impl#2}::spawn::{closure#0} ()
    at /home/slyfox/.cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.9.1/src/registry.rs:100
#7  std::sys_common::backtrace::__rust_begin_short_backtrace&lt;rayon_core::registry::{impl#2}::spawn::{closure#0}, ()&gt; (f=...)
    at /build/rustc-1.57.0-src/library/std/src/sys_common/backtrace.rs:123
#8  0x000055b1d90975dc in std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&lt;rayon_core::registry::{impl#2}::spawn::{closure#0}, ()&gt; () at /build/rustc-1.57.0-src/library/std/src/thread/mod.rs:483
#9  core::panic::unwind_safe::{impl#23}::call_once&lt;(), std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt; (self=...,
    _args=&lt;optimized out&gt;) at /build/rustc-1.57.0-src/library/core/src/panic/unwind_safe.rs:271
#10 0x000055b1d90a11cf in std::panicking::try::do_call&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt;, ()&gt; (data=&lt;optimized out&gt;) at /build/rustc-1.57.0-src/library/std/src/panicking.rs:403
#11 std::panicking::try&lt;(), core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt;&gt;
    (f=&lt;error reading variable: Cannot access memory at address 0x0&gt;) at /build/rustc-1.57.0-src/library/std/src/panicking.rs:367
#12 0x000055b1d90a42d0 in std::panic::catch_unwind&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}::{closure#0}&gt;, ()&gt; (f=...) at /build/rustc-1.57.0-src/library/std/src/panic.rs:133
#13 0x000055b1d90960cb in std::thread::{impl#0}::spawn_unchecked::{closure#1}&lt;rayon_core::registry::{impl#2}::spawn::{closure#0}, ()&gt; ()
    at /build/rustc-1.57.0-src/library/std/src/thread/mod.rs:482
#14 core::ops::function::FnOnce::call_once&lt;std::thread::{impl#0}::spawn_unchecked::{closure#1}, ()&gt; ()
    at /build/rustc-1.57.0-src/library/core/src/ops/function.rs:227
#15 0x000055b1d91d65a5 in std::sys::unix::thread::Thread::new::thread_start ()
#16 0x00007f4cf83fdd40 in start_thread () from /nix/store/s9qbqh7gzacs7h68b2jfmn9l6q4jwfjz-glibc-2.33-59/lib/libpthread.so.0
#17 0x00007f4cf81e443f in clone () from /nix/store/s9qbqh7gzacs7h68b2jfmn9l6q4jwfjz-glibc-2.33-59/lib/libc.so.6</code></pre>
<p>We got a detailed backtrace that gets into the depths of <strong>rayon-core</strong>
crate (it implements internals of parallel execution of tasks). I had
no idea what this trace showed me.</p>
<p>Having looked at the bits above <strong>rav1e</strong> upstream suggested filing a
bug against <strong>rayon-core</strong>.</p>
<p>By this time I realized there will be no easy way out and I’ll have to
build something manageable to understand where the error really happens:
in <strong>rav1e</strong>, <strong>rayon-core</strong> or somewher else.</p>
<p>Quick quiz: which component do you think will end up having a bug?</p>
<h1 id="rust-minimizer-howto">Rust minimizer HOWTO</h1>
<p>So how does one shring the example? My mechanical trick is to remove
dead code unrelated to our bug trigger.</p>
<p><strong>rust</strong> has a useful feature of warning user of unused code.
Let’s look at this toy example:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat a.rs</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> g()<span class="op">{}</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> pg()<span class="op">{}</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{}</span></span></code></pre></div>
<p>Building it:</p>
<pre><code>$ rustc a.rs
warning: function is never used: `g`
 --&gt; a.rs:1:4
  |
1 | fn g(){}
  |    ^
  |
  = note: `#[warn(dead_code)]` on by default

warning: 1 warning emitted</code></pre>
<p>In this case <strong>g()</strong> is a clearly unused function: it’s visibility is
limited to current module. Note that <strong>pg()</strong> is also unused for that
specific program. It’s considered to be used because it’s explicitly
exported for all external modules and crates.</p>
<p>To minimize a test we can safely assume that nothing should be exported
outside current crate except maybe <strong>main()</strong> function of the test itself.</p>
<p>Thus I came up with a hack: change all “pub” exports to “pub(crate)” exports
with a single sed line:</p>
<pre><code>$ sed -e 's@pub @pub(crate) @g' -i *.rs</code></pre>
<p>That’s it! The rest comiler will do for us:</p>
<pre><code>$ rustc a.rs
warning: function is never used: `g`
 --&gt; a.rs:1:4
  |
1 | fn g(){}
  |    ^
  |
  = note: `#[warn(dead_code)]` on by default

warning: function is never used: `pg`
 --&gt; a.rs:2:15
  |
2 | pub(crate) fn pg(){}
  |               ^^

warning: 2 warnings emitted</code></pre>
<p>Yay! Now <strong>pg()</strong> is also reported as unused.</p>
<p>Now we just need to manually delete <strong>pg()</strong> definition from the source code
and make sure the hypothetical bug still triggers. Would be nice if
<strong>cargo fix</strong> removed this unused code automatically.</p>
<p>I have applied this <strong>sed</strong> hack to all of <strong>rav1e</strong> and almost immediately
got this reproducer:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat src/lib.rs</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rayon::iter::</span>IntoParallelIterator<span class="op">;</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">rayon::iter::</span>ParallelIterator<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co">/// # Examples</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="co">/// use bug::do_bug;</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="co">/// # fn main() {</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="co">/// bug::do_bug()</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="co">/// # }</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> do_bug() <span class="op">{</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span><span class="op">..</span><span class="dv">1</span>)<span class="op">.</span>into_par_iter()<span class="op">.</span>for_each(<span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span><span class="op">..</span><span class="dv">1</span>)<span class="op">.</span>into_par_iter()<span class="op">.</span>for_each(<span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>  (<span class="dv">0</span><span class="op">..</span><span class="dv">1</span>)<span class="op">.</span>into_par_iter()<span class="op">.</span>for_each(<span class="op">|</span>_<span class="op">|</span> <span class="op">{}</span>)<span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Clearly a <strong>rayon</strong> bug, right? There is nothing <strong>rav1e</strong> specific in this code.</p>
<p>I filed the <a href="https://github.com/rayon-rs/rayon/issues/911">bug report</a>
being quite confident I got the culprit. Alas once again suspiction fell
on my <strong>NixOS</strong> environment :)</p>
<p>I tried <strong>Ubuntu</strong> and got the same <strong>SIGSEGV</strong> there. I felt that I’ll need
to keep digging if I want this bug get solved. My example still relied on a
few other crates: <strong>rayon-core</strong>, standard library and something else.</p>
<p>I applied <strong>pub(crate)</strong> hack to <strong>rayon-core</strong> as well and got this beauty:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat src/lib.rs</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="pp">thread_local!</span> <span class="op">{</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">static</span> THREAD_LOCAL_GLOBAL<span class="op">:</span> <span class="pp">std::cell::</span>Cell<span class="op">&lt;</span><span class="dt">usize</span><span class="op">&gt;</span> <span class="op">=</span> <span class="pp">std::cell::Cell::</span>new(<span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>inline<span class="at">(</span>never<span class="at">)]</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> set_state_func(t<span class="op">:</span> <span class="op">&amp;</span><span class="pp">std::cell::</span>Cell<span class="op">&lt;</span><span class="dt">usize</span><span class="op">&gt;</span>) <span class="op">{</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    t<span class="op">.</span>set(<span class="dv">42</span>)<span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>inline<span class="at">(</span>never<span class="at">)]</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> thread_func() <span class="op">{</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    THREAD_LOCAL_GLOBAL<span class="op">.</span>with(set_state_func)<span class="op">;</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a><span class="co">/// # Examples</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="co">/// use bug::do_bug;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="co">///</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a><span class="co">/// # fn main() {</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="co">/// bug::do_bug()</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a><span class="co">/// # }</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a><span class="co">/// ```</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a><span class="at">#[</span>inline<span class="at">(</span>never<span class="at">)]</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="kw">pub</span> <span class="kw">fn</span> do_bug() <span class="op">{</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">// to ease catching the test with gdb</span></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a>  <span class="co">//std::thread::sleep(std::time::Duration::from_secs(10));</span></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> _ <span class="kw">in</span> <span class="dv">0</span><span class="op">..</span><span class="dv">128</span> <span class="op">{</span></span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true" tabindex="-1"></a>    <span class="pp">std::thread::</span>spawn(thread_func)<span class="op">.</span>join()<span class="op">.</span>unwrap()<span class="op">;</span></span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I used <strong>#[inline(never)]</strong> to make sure we don’t get affected by
optimizer decisions during reduction. I don’t know if it has any
effect :)</p>
<p>Here we spawn 128 no-op threads that set some thread-local global
variable. There is just nothing to break here! Note that <strong>main()</strong>
still has to hide out in <strong>doctest</strong> comment to trigger <strong>SIGSEGV</strong>.</p>
<p>I filed the <a href="https://github.com/rust-lang/rust/issues/92869">bug against <strong>rust</strong></a>.</p>
<p>In there Josh and Nikita quickly found the code gnerator discrepancy in <strong>llvm</strong>
and fixed it with <a href="https://reviews.llvm.org/D117489">D117489 patch</a>.</p>
<p>The bug was so elusive because <strong>rav1e</strong>’s <strong>Cargo.toml</strong> managed to
hit a few unique properties:</p>
<ul>
<li>build uses <strong>debug = true / lto = “thin”</strong> configuration in <strong>[profile.release]</strong></li>
<li><strong>cargo test --doc --release</strong> does not enable <strong>-O</strong> optimisations for tests
but does enable <strong>lto = “thin”</strong> (a <strong>cargo test</strong> perhaps?). This matches
neither debug nor release configuration for proper (non-doctest) tests.</li>
</ul>
<h1 id="parting-words">Parting words</h1>
<p>Test case reduction is a simple and mechanical process for rust crates.</p>
<ul>
<li>Simple compiler bugs are a thing for <strong>rust</strong> as well as <strong>C++</strong></li>
<li><strong>gdb</strong> renders meaningful stack frames for rust crashes.</li>
<li>“pub” -&gt; “pub(crate)” substitution is surprisingly effective for
test minimization.</li>
<li><strong>cargo test --doc --release</strong> should be more consistent with <strong>-O</strong>
optmisation flags to make error less unique to <strong>rustdoc</strong>.</li>
<li><strong>cargo fix</strong> does not delete unused functions :)</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on February  9, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Minor atl1c kernel driver bug</title>
    <link href="http://trofi.github.io/posts/235-minor-atl1c-kernel-driver-bug.html" />
    <id>http://trofi.github.io/posts/235-minor-atl1c-kernel-driver-bug.html</id>
    <published>2022-01-22T00:00:00Z</published>
    <updated>2022-01-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Minor atl1c kernel driver bug</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Minor atl1c kernel driver bug</h1>

            <p>This weekend I converted my last physical non-NixOS machine to NixOS.
I was postponing it for a while as it’s an internet facing machine that
was installed in 2009. I’d prefer smaller downtime if reasonably
possible. It does not have that many serices: <strong>sshd</strong>, <strong>https</strong>
serving a few static files, <strong>IPv6</strong> tunnel and a local CI builder.</p>
<p>This device has 1Gbit ethernet card supported by <strong>atl1c</strong> linux kernel
driver. It always functioned without any problems for me. But one minor
thing always bothered me: on a high network load <strong>top</strong> output shown
kernel threads with suspicious <strong>%d</strong> names:</p>
<pre class><code># ping -f 172.16.0.1  # from remove host
$ top  # atl1c host
...
621 root 20 0 0 0 0 S 11.0 0.0 0:05.01 napi/eth%d-385
622 root 20 0 0 0 0 S  5.6 0.0 0:02.64 napi/eth%d-386</code></pre>
<p>These look like unsubstituted format strings.</p>
<p>I spent some time in <strong>linux.git</strong> and got nowhere. After that I reported
bug to <a href="https://lore.kernel.org/netdev/YewoxYh2jNBnanUM@lunn.ch/T/">netdev@ ML</a>
and instantly got the patch from Andrew to try:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/drivers/net/ethernet/atheros/atl1c/atl1c_main.c</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/drivers/net/ethernet/atheros/atl1c/atl1c_main.c</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -2706,6 +2706,15 @@ static int atl1c_probe(struct pci_dev *pdev, const struct pci_device_id *ent)</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        goto err_alloc_etherdev;</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="va">+	if (rtnl_lock_killable()) {</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="va">+		err = -EINTR;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="va">+		goto err_init_netdev;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="va">+	}</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="va">+	err = dev_alloc_name(netdev, netdev-&gt;name);</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="va">+	rtnl_unlock();</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="va">+	if (err &lt; 0)</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="va">+		goto err_init_netdev;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    err = atl1c_init_netdev(netdev, pdev);</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    if (err) {</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        dev_err(&amp;pdev-&gt;dev, &quot;init netdevice failed\n&quot;);</span></code></pre></div>
<h1 id="nixos-kernel-patching-nano-howto">NixOS kernel patching nano howto</h1>
<p>What is the simplest way to try it out on a live system?</p>
<p>I gave <a href="https://nixos.wiki/wiki/Linux_kernel#Custom_configuration">boot.kernelPatches</a>
mechanism a try:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># in /etc/nixos/configuration.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">boot</span>.<span class="va">kernelPatches</span> = [</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    ({ <span class="va">name</span> = &quot;<span class="va">atl1c-netdev</span>&quot;; <span class="va">patch</span> = ./<span class="va">atl1c-netdev</span>.<span class="va">patch</span>; <span class="op">}</span>)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  ];</span></code></pre></div>
<p>This change applies extra local patche to current kernel. Building
patched kernel for the next boot:</p>
<pre class><code># nixos-rebuild boot
...
# systemctl reboot</code></pre>
<p>Checking thread names after reboot:</p>
<pre class><code># ping -f 172.16.0.1  # from remove host
$ top  # atl1c host
...
613 root 20 0 0 0 0 S 11.0 0.0 0:07.46 napi/eth0-385
614 root 20 0 0 0 0 R  5.3 0.0 0:03.96 napi/eth0-386</code></pre>
<p>The patch made things better!</p>
<h1 id="testing-in-a-vm-before-giving-it-a-go-on-real-device">Testing in a VM before giving it a go on real device</h1>
<p>It’s not very useful for this specific case as we are testing changes to
a hardware driver without emulation available. But for many other kernel
changes before booting into a brand new kernel we could use <strong>qemu</strong> to
have a smoke test for new functionality.</p>
<p>I do it all the time when I poke at kernel’s VM subsystem.</p>
<p>You can even boot up your full system up to desktop environment:</p>
<pre class><code>$ nixos-rebuild build-vm
...
Done.  The virtual machine can be started by running /nix/store/bnl5jjic2rpbxc8p7y92znyzzp1xz59i-nixos-vm/bin/run-nz-vm
$ /nix/store/bnl5jjic2rpbxc8p7y92znyzzp1xz59i-nixos-vm/bin/run-nz-vm</code></pre>
<p>On my desktop this boots up my <strong>i3</strong> desktop in a second. After a session
shutdown disk image takes only <strong>8MB</strong> of space:</p>
<pre class><code>$ ls -lh
total 8.5M
-rw-r--r-- 1 slyfox users 8.5M Jan 22 20:24 nz.qcow2
lrwxrwxrwx 1 slyfox users   52 Jan 22 20:22 result -&gt; /nix/store/bnl5jjic2rpbxc8p7y92znyzzp1xz59i-nixos-vm</code></pre>
<p>It was instructive for me to have a peek at what the <strong>run-nz-vm</strong> script actually does:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">#! /nix/store/pbfraw351mksnkp2ni9c4rkc9cpp89iv-bash-5.1-p12/bin/bash</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="va">NIX_DISK_IMAGE</span><span class="op">=</span><span class="va">$(</span><span class="fu">readlink</span> <span class="at">-f</span> <span class="st">&quot;</span><span class="va">${NIX_DISK_IMAGE</span><span class="op">:-</span>./nz.qcow2<span class="va">}</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="ot">! </span><span class="bu">test</span> <span class="at">-e</span> <span class="st">&quot;</span><span class="va">$NIX_DISK_IMAGE</span><span class="st">&quot;</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="ex">/nix/store/k48rmda1r7is6v2n0jdpfmaax74l8lbq-qemu-host-cpu-only-6.1.0/bin/qemu-img</span> create <span class="at">-f</span> qcow2 <span class="st">&quot;</span><span class="va">$NIX_DISK_IMAGE</span><span class="st">&quot;</span> <span class="dt">\</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>       1024M</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Create a directory for storing temporary data of the running VM.</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">&quot;</span> <span class="bu">]</span> <span class="kw">||</span> <span class="bu">[</span> <span class="ot">-z</span> <span class="st">&quot;</span><span class="va">$USE_TMPDIR</span><span class="st">&quot;</span> <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">TMPDIR</span><span class="op">=</span><span class="va">$(</span><span class="fu">mktemp</span> <span class="at">-d</span> nix-vm.XXXXXXXXXX <span class="at">--tmpdir</span><span class="va">)</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Create a directory for exchanging data with the VM.</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> <span class="at">-p</span> <span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">/xchg&quot;</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">&quot;</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Start QEMU.</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="bu">exec</span> /nix/store/k48rmda1r7is6v2n0jdpfmaax74l8lbq-qemu-host-cpu-only-6.1.0/bin/qemu-kvm <span class="at">-cpu</span> qemu64 <span class="dt">\</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>    <span class="at">-name</span> nz <span class="dt">\</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    <span class="at">-m</span> 1024 <span class="dt">\</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>    <span class="at">-smp</span> 1 <span class="dt">\</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>    <span class="at">-device</span> virtio-rng-pci <span class="dt">\</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>    <span class="at">-net</span> nic,netdev=user.0,model=virtio <span class="at">-netdev</span> user,id=user.0,<span class="st">&quot;</span><span class="va">$QEMU_NET_OPTS</span><span class="st">&quot;</span> <span class="dt">\</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>    <span class="at">-virtfs</span> local,path=/nix/store,security_model=none,mount_tag=nix-store <span class="dt">\</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>    <span class="at">-virtfs</span> local,path=<span class="st">&quot;</span><span class="va">${SHARED_DIR</span><span class="op">:-</span><span class="va">$TMPDIR</span>/xchg<span class="va">}</span><span class="st">&quot;</span>,security_model=none,mount_tag=shared <span class="dt">\</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    <span class="at">-virtfs</span> local,path=<span class="st">&quot;</span><span class="va">$TMPDIR</span><span class="st">&quot;</span>/xchg,security_model=none,mount_tag=xchg <span class="dt">\</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>    <span class="at">-drive</span> cache=writeback,file=<span class="st">&quot;</span><span class="va">$NIX_DISK_IMAGE</span><span class="st">&quot;</span>,id=drive1,if=none,index=1,werror=report <span class="at">-device</span> virtio-blk-pci,drive=drive1 <span class="dt">\</span></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>    <span class="at">-device</span> virtio-keyboard <span class="dt">\</span></span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>    <span class="at">-usb</span> <span class="dt">\</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    <span class="at">-device</span> usb-tablet,bus=usb-bus.0 <span class="dt">\</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>    <span class="at">-kernel</span> /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/kernel <span class="dt">\</span></span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>    <span class="at">-initrd</span> /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd <span class="dt">\</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>    <span class="at">-append</span> <span class="st">&quot;</span><span class="va">$(</span><span class="fu">cat</span> /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/kernel-params<span class="va">)</span><span class="st"> init=/nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/init regInfo=/nix/store/n3phlr6zmr84gfmm03pq9hfi8p1i51qy-closure-info/registration console=ttyS0,115200n8 console=tty0 </span><span class="va">$QEMU_KERNEL_PARAMS</span><span class="st">&quot;</span> <span class="dt">\</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>    <span class="va">$QEMU_OPTS</span> <span class="dt">\</span></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span></span></code></pre></div>
<p>Here the script creates <strong>nz.qcow2</strong> disk in <strong>qcow2</strong> format of <strong>1GB</strong>
size max. But even that space is not populated! The whole of <strong>/nix/store</strong>
gets exported via <strong>virtfs</strong> which allows not to copy most of packages into
a VM at all! Do we even have a root device here?</p>
<p>Let’s peek at <strong>initrd</strong> contents. How does it make the magic happen?</p>
<pre class><code>$ cat /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd | file -
/dev/stdin: Zstandard compressed data (v0.8+), Dictionary ID: None
$ cat /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd | zstd -d | file -
/dev/stdin: ASCII cpio archive (SVR4 with no CRC)
$ mkdir initramfs &amp;&amp; cd initramfs
$ cat /nix/store/0cqyh4p5jr4dklzvh97b3ip9ky52596l-nixos-system-nz-22.05pre346004.5aaed40d22f/initrd | zstd -d | cpio -id --no-preserve-owner
$ ls
dev  etc  init  nix  proc  sys
$ find nix/store/ -maxdepth 1
nix/store/
nix/store/...-mdadm.conf
nix/store/...-libunistring-0.9.10
nix/store/...-pcre-8.45
nix/store/...-mounts.sh
nix/store/...-glibc-2.33-59
nix/store/...-acl-2.3.1
nix/store/...-udev-rules
nix/store/...-linux-5.16-modules-shrunk
nix/store/...-stage-1-init.sh
nix/store/...-gnugrep-3.7
nix/store/...-extra-utils
nix/store/...-libidn2-2.3.2
nix/store/...-findutils-4.8.0
nix/store/...-kmod-debian-aliases-22-1.1.conf
nix/store/...-keymap
nix/store/...-link-units
nix/store/...-attr-2.5.1
nix/store/...-initrd-fsinfo
nix/store/...-coreutils-9.0
nix/store/...-initrd-kmod-blacklist-ubuntu</code></pre>
<p>Here we see that <strong>initramfs</strong> already has a bit (actually, <strong>40MB</strong> due
to glibc) of <strong>/nix/store</strong> embedded in to support <strong>init</strong> top-level script.
<strong>init</strong> is a big but straightforward script. It does a few things:</p>
<ul>
<li>formats <strong>/dev/vda</strong> if filesystem is absent and places minimal
root NixOS directory structure on it.</li>
<li>mounts root device into <strong>$target</strong> (it suports discovery of ISO, standard NixOS,
conversions from other distibutions, aka “lustrations”). One of the steps
here is to mount passed in virtfs as a <strong>$target/nix/store</strong>. And make it writeble
by overlaying <strong>tmpfs</strong> on top. For live ISO images this allows you to upgrade
live image im-memory before installing it on disk.</li>
<li>switches root to a new target</li>
</ul>
<p>We can also boot <strong>qemu</strong> VM in text mode to ease copying terminal
output and poke at just created root:</p>
<pre class><code>$ ./result/bin/run-nz-vm -nographic
...
&lt;&lt;&lt; Welcome to NixOS 22.05pre346004.5aaed40d22f (x86_64) - ttyS0 &gt;&gt;&gt;
Run 'nixos-help' for the NixOS manual.
login: foo (automatic login)
$ mkdir /tmp/r
$ sudo mount --bind / /tmp/r
$ find /tmp/r/
/tmp/r/
/tmp/r/proc
/tmp/r/dev
/tmp/r/etc
/tmp/r/etc/.clean
/tmp/r/etc/binfmt.d
/tmp/r/etc/binfmt.d/nixos.conf
/tmp/r/etc/nscd.conf
/tmp/r/etc/ssh
...</code></pre>
<p>If you plan to work on boot loader changes you can build a VM with boot loader as
<strong>nixos-rebuild build-vm-with-bootloader</strong>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on January 22, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>seekwatcher 0.14</title>
    <link href="http://trofi.github.io/posts/234-seekwatcher-0.14.html" />
    <id>http://trofi.github.io/posts/234-seekwatcher-0.14.html</id>
    <published>2022-01-17T00:00:00Z</published>
    <updated>2022-01-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: seekwatcher 0.14</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>seekwatcher 0.14</h1>

            <p>About 10 years ago I <a href="../posts/169-seekwatcher.html">tried</a> <strong>seekwatcher</strong>
for the first time (unfortunately past videos and pictures did not survive host
migrations). There I explored slowness of <strong>btrfs</strong> on my spinning drive and
concluded IO was seek-bound.</p>
<p>Believe it or not <strong>seekwatcher</strong> code did not change at all since then. It was
abandoned upstream in favour of <strong>iowatcher</strong>: <a href="http://masoncoding.com/iowatcher/">http://masoncoding.com/iowatcher/</a>.
I never knew there was a replacement and kept tweaking <strong>seekwatcher</strong> for minor
failures like <strong>dash</strong> incompatibilities. Eventually (8 years later) I released
the result as <strong>0.13</strong>. Looking at it 2 years later effectively nobody uses <strong>0.13</strong>:
<a href="https://repology.org/project/seekwatcher/versions">https://repology.org/project/seekwatcher/versions</a>. This is fine. Most distributions
effectively abandoned <strong>seekwatcher</strong> or never had it packages in the first place.
I myself did not have a reason to use it for years and did not notice it’s build
broke again.</p>
<p>I spent this weekend to refurbish it a bit. The result is a new
<a href="https://github.com/trofi/seekwatcher/releases/tag/v0.14">0.14 release</a>! It should
be able to run on modern Python 3.10 (and something less modern as well).</p>
<p>As a demo today’s video and picture will be a read-only workload for <strong>btrfs scrub</strong>
against a 35% filled root SSD partition for my desktop:</p>
<pre class><code>$ seekwatcher -t scrub.trace -p 'echo 3 &gt; /proc/sys/vm/drop_caches; sync; btrfs scrub start -B /' -d /dev/nvme0n1p3
$ seekwatcher -t scrub.trace -o scrub.ogg --movie
$ seekwatcher -t scrub.trace -o scrub.png</code></pre>
<p>The output of the above commands is also instructive:</p>
<pre class><code>blktrace -d /dev/nvme0n1p3 -o scrub.trace -D . -a queue -a complete -a issue
running :echo 3 &gt; /proc/sys/vm/drop_caches; sync; btrfs scrub start -B /:
scrub done for 6b160f29-1dbb-4020-a36d-c233f1dffaf6
Scrub started:    Mon Jan 17 07:52:29 2022
Status:           finished
Duration:         0:01:08
Total to scrub:   404.02GiB
Rate:             2.17GiB/s
Error summary:    no errors found
done running echo 3 &gt; /proc/sys/vm/drop_caches; sync; btrfs scrub start -B /
=== nvme0n1p3 ===
  CPU  0:               876508 events,    41087 KiB data
  CPU  1:               693423 events,    32505 KiB data
  CPU  2:               537656 events,    25203 KiB data
  CPU  3:               592174 events,    27759 KiB data
  CPU  4:               511254 events,    23966 KiB data
  CPU  5:               495733 events,    23238 KiB data
  CPU  6:               503972 events,    23624 KiB data
  CPU  7:               593066 events,    27800 KiB data
  CPU  8:               783384 events,    36722 KiB data
  CPU  9:               626492 events,    29367 KiB data
  CPU 10:               938655 events,    44000 KiB data
  CPU 11:               815019 events,    38205 KiB data
  CPU 12:               765571 events,    35887 KiB data
  CPU 13:               603239 events,    28277 KiB data
  CPU 14:               813953 events,    38155 KiB data
  CPU 15:               686623 events,    32186 KiB data
  Total:              10836722 events (dropped 0),   507972 KiB data
blktrace done

using tracefile ./scrub.trace
saving graph to trace.png
using tracefile ./scrub.trace
total frames is 300 secs per frame = 0.23

start 0.00 secs end 0.23 secs frame 0
start 0.23 secs end 0.46 secs frame 1
start 0.46 secs end 0.68 secs frame 2
start 0.68 secs end 0.91 secs frame 3
start 0.91 secs end 1.14 secs frame 4
...
MEncoder 1.4-10.3.0 (C) 2000-2019 MPlayer Team
...</code></pre>
<p>Note that <strong>seekwatcher</strong> is a wrapper around <strong>blktrace</strong> and <strong>mencoder</strong>:
it’s main job is to build a 30-second clip off any data by donwsampling things.</p>
<p>Here is the result of the above commands:</p>
<ul>
<li><a href="../posts.data/234-seekwatcher/scrub.png">image</a> (143K)</li>
<li><a href="../posts.data/234-seekwatcher/scrub.ogv">video</a> (700K)</li>
</ul>
<p>The average read speed is 2.2GB/s with 17K IO/s of them seeks are 2.5K/s.</p>
<p>The equivalent <strong>iowatcher</strong> commands should look identical.</p>
<p>That’s it!</p>

<div class="info">
    Posted on January 17, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>ncurses update journey</title>
    <link href="http://trofi.github.io/posts/233-ncurses-update-journey.html" />
    <id>http://trofi.github.io/posts/233-ncurses-update-journey.html</id>
    <published>2022-01-03T00:00:00Z</published>
    <updated>2022-01-03T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: ncurses update journey</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>ncurses update journey</h1>

            <p>A few months ago I decided to upgrade a few packages in <strong>nixpkgs</strong> to
the latest available versions upstream. Some packages like <strong>gzip</strong>,
<strong>grep</strong>, <strong>texinfo</strong>, <strong>linuxHeaders</strong> or <strong>terminus_font</strong> were
straightforward to handle. Most of them required 1-2 (or none) reverse
dependencies to fix. Sometimes upstream already had available fixes to pull.</p>
<h1 id="ncurses-breakage">ncurses breakage</h1>
<p>But one surprising package was <strong>ncurses</strong>: upstream had <strong>6.3</strong> version
released for a while while <strong>nixpkgs</strong> had <strong>6.2</strong>. Should be trivial to
update I thought. Probably just a bunch of new terminals added into <strong>terminfo</strong>.</p>
<p>I updated <strong>ncurses</strong> locally and instantly got a few build failures. Most
of those looked similar to the following <strong>mtr</strong> failure:</p>
<pre class><code>ui/curses.c:765:42:
  error: format not a string literal and no format arguments [-Werror=format-security]
  765 |         mvprintw(rowstat - 1, startstat, msg);
      |                                          ^~~</code></pre>
<p>The build error popped up because new release of <strong>ncurses</strong> enabled
<strong>printf</strong>-like annotations to a few it’s frequently used functions:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/include/curses.h.in</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/include/curses.h.in</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -559,7 +557,7 @@</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a> #ifndef GCC_PRINTFLIKE</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="st">-#if defined(GCC_PRINTF) &amp;&amp; !defined(printf)</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="va">+#ifndef printf</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a> #define GCC_PRINTFLIKE(fmt,var) __attribute__((format(printf,fmt,var)))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a> #else</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a> #define GCC_PRINTFLIKE(fmt,var) /*nothing*/</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -822,2 +816,4 @@</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="st">-extern NCURSES_EXPORT(int) vwprintw (WINDOW *, const char *,va_list) GCC_DEPRECATED(use vw_printw);    /* implemented */</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="st">-extern NCURSES_EXPORT(int) vw_printw (WINDOW *, const char *,va_list); /* implemented */</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="va">+extern NCURSES_EXPORT(int) vwprintw (WINDOW *, const char *, va_list) GCC_DEPRECATED(use vw_printw)    /* implemented */</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="va">+               GCC_PRINTFLIKE(2,0);</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="va">+extern NCURSES_EXPORT(int) vw_printw (WINDOW *, const char *, va_list) /* implemented */</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="va">+               GCC_PRINTFLIKE(2,0);</span></span></code></pre></div>
<p>This change enables <strong>GCC_PRINTF</strong> by default and adds extra annotations
to <strong>vwprintw</strong> and friends. I think <strong>mtr</strong> was broken by <strong>GCC_PRINTF</strong>
default change.</p>
<p>The package fixes are usually trivial. <strong>mtr</strong> one looks like
<a href="https://github.com/traviscross/mtr/pull/411">https://github.com/traviscross/mtr/pull/411</a>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/ui/curses.c</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/ui/curses.c</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -675,1 +675,1 @@</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="st">-                mvprintw(rowstat - 1, startstat, msg);</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="va">+                mvprintw(rowstat - 1, startstat, &quot;%s&quot;, msg);</span></span></code></pre></div>
<h1 id="does-error-flag-a-real-problem">Does error flag a real problem?</h1>
<p>Is this kind of build errors a big deal or just a nuisance? After all
all these programs probably work just fine if nobody noticed the infelicity.</p>
<p>Let’s craft a small example:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $cat a.c</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(GCC_PRINTF)</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#    define GCC_PRINTFLIKE(fmt,var) __attribute__((format(printf,fmt,var)))</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#    define GCC_PRINTFLIKE(fmt,var) </span><span class="co">/* nope */</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> just_like_printf<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> fmt<span class="op">,</span> <span class="op">...)</span> GCC_PRINTFLIKE<span class="op">(</span><span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">);</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> just_like_printf<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> fmt<span class="op">,</span> <span class="op">...)</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">va_list</span> ap<span class="op">;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    va_start<span class="op">(</span>ap<span class="op">,</span> fmt<span class="op">);</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    va_end<span class="op">(</span>ap<span class="op">);</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span>argv<span class="op">[])</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    just_like_printf<span class="op">(</span>argv<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre class><code>$ gcc a.c -o a -Wall
$ ./a
./a</code></pre>
<p>Here we just print program’s name as is via <strong>printf(argv[0])</strong>.
Does not look too bad, right?</p>
<p>No. Uncontrolled format strings allow for arbitrary memory access.</p>
<p>We can read register and stack values (needs a tiny bit of platform
<strong>ABI</strong> knowledge):</p>
<pre class><code>$ ln -s a '%#lx%#lx%#lx%#lx%#lx%#lx%#lx%#lx'
$ ./%#lx%#lx%#lx%#lx%#lx%#lx%#lx%#lx
./0x7ffcc15c01c80x7ffcc15c01d80x7fe1dbea759800x7fe1dbea97e00x7ffcc15c01c80x1000000000x401200</code></pre>
<p>And if we are creative we can also write chosen data at addresses in
registers or stack:</p>
<pre class><code>$ ln -s a '%n%n%n%n%n%n%n%n%n%n'
$ ./%n%n%n%n%n%n%n%n%n%n
Segmentation fault (core dumped)</code></pre>
<p><strong>suid</strong> CLI tools are especially vulnerable as commandline
arguments and environment also reside on stack. We can store
“any” address there just by running the tool with extra
environment variables.</p>
<p><strong>sudo</strong> had a similiar vulnerability in the past that allows
arbitrary code execution: <a href="https://www.vnsecurity.net/research/2012/02/16/exploiting-sudo-format-string-vunerability.html">https://www.vnsecurity.net/research/2012/02/16/exploiting-sudo-format-string-vunerability.html</a></p>
<p>Mounting a shell exploit on modern systems is an exercise for the reader :)</p>
<p>Thus yes, passing uncontrolled text to <strong>printf()</strong>-like function is a
direct path to arbitrary code execution. In case of networking services
it’s an RCE. In case of CLI tools that interpret external input (say,
mp3 players or network packet visualisers) it can easily become
user-assisted RCE.</p>
<h1 id="wformat">-Wformat=</h1>
<p>This kind of bugs used to be a very common programming error until
compilers learned to catch it when asked:</p>
<pre class><code>$ gcc a.c -o a -Wall -DGCC_PRINTF -Wformat=2
a.c: In function 'main':
a.c:25:5: warning: format not a string literal and no format arguments [-Wformat-security]
   25 |     just_like_printf(argv[0]);
      |     ^~~~~~~~~~~~~~~~</code></pre>
<p>Note that by default it’s just a warning that you need to opt into with
<strong>-Wformat=2</strong>. Many distributions enable <strong>-Wformat=2</strong> by default either
in toolchain directly or in package build process.</p>
<p>For quite a while <strong>nixpkgs</strong> enables <strong>-Werror=format-security</strong> by
default which turns warnings on suspicious code into errors:</p>
<pre class><code>$ gcc a.c -o a -Wall -DGCC_PRINTF -Werror=format-security
a.c: In function 'main':
a.c:25:5: error: format not a string literal and no format arguments [-Werror=format-security]
   25 |     just_like_printf(argv[0]);
      |     ^~~~~~~~~~~~~~~~
cc1: some warnings being treated as errors</code></pre>
<p>Package maintainers usually weed out all these problems when they add a
new package version to the distribution.</p>
<p>But case of <strong>ncurses</strong> is a bit special: it’s a very popular decades
old library with many users. For dacedes there were plenty chances
of using it’s interfaces in an unsafe manner.</p>
<h1 id="fixing-all-the-failures">Fixing all the failures</h1>
<p>Given that <strong>mtr</strong> had this deficiency how many more tools would be broken
like that? I hoped for “under 10” and started fixing packages one by one.</p>
<p>After fixing 40 packages (<strong>mtr</strong>, <strong>libcdio</strong>, <strong>aewan</strong>, <strong>tty-solitaire</strong>,
<strong>bastet</strong>, <strong>mcabber</strong>, <strong>bwm_ng</strong>, <strong>toxic</strong>, <strong>nudoku</strong>, <strong>ecasound</strong>,
<strong>bemenu</strong>, <strong>tasknc</strong>, <strong>smemstat</strong>, <strong>freesweep</strong>, <strong>gfs2-utils</strong>, <strong>gmu</strong>,
<strong>hexcurse</strong>, <strong>irqbalance</strong>, <strong>hstr</strong>, <strong>pinfo</strong>, <strong>lifelines</strong>, <strong>tty-clock</strong>,
<strong>nethogs</strong>, <strong>host</strong>, <strong>jnettop</strong>, <strong>mp3blaster</strong>, <strong>multitail</strong>, <strong>musikcube</strong>,
<strong>ncdc</strong>, <strong>pacvim</strong>, <strong>powertop</strong>, <strong>profanity</strong>, <strong>sngrep</strong>, <strong>tiptop</strong>,
<strong>trafficserver</strong>, <strong>vimpc</strong>, <strong>wiimms-iso-tools</strong>, <strong>souffle</strong>)
I realized I would not be able to find (or fix) all the breakages myself and would
need help.</p>
<p>Having asked around I found out I could get a <strong>hydra</strong> build run against a
<a href="https://github.com/NixOS/nixpkgs/pull/146685">https://github.com/NixOS/nixpkgs/pull/146685</a> pull request. I requested a run
on <strong>#infra:nixos.org</strong> matrix room.</p>
<p>Vladimir suggested basing the PR against <strong>master</strong> commit with already present
<strong>hydra</strong> run. That way <strong>hydra</strong> UI would allow for easy regression comparison
via “compare-to” drop down. First run (targeted <strong>x86_64-linux</strong> only) took ~5
days: 1 to 6 Dec. It was a full rebuild of all packages as <strong>ncurses</strong> is a
<strong>bash</strong> dependency via <strong>readline</strong>. 5 days felt as very quick given that this
run had low priority against other preempting jobs: builds of <strong>master</strong> itself
and builds of <strong>staging-next</strong>.</p>
<p>The initial run looked promising: <a href="https://hydra.nixos.org/eval/1727143?compare=1727080&amp;full=0">https://hydra.nixos.org/eval/1727143?compare=1727080&amp;full=0</a>.</p>
<p>It reported “Newly Failing Jobs (94)”. Some of these were unrelated flaky failures
but ~10 of them were more <strong>ncurses</strong> fallouts that I missed from local runs:
<strong>postgresqlPackages.pg_auto_failover</strong>, <strong>rogue</strong>, <strong>wyrd</strong>, <strong>squishyball</strong>,
<strong>haskellPackages.ncurses</strong>, <strong>liboping</strong>, <strong>linuxPackages.sysdig</strong>, <strong>tcptrack</strong>,
<strong>pamix</strong>, <strong>tlf</strong>. Fixing them was straightforward.</p>
<p>While hydra was running through packages I fixed ~10 more:
<strong>_2048-in-terminal</strong>, <strong>liboping</strong>, <strong>noice</strong>, <strong>samtools</strong>,
<strong>libviper</strong>, <strong>vwm</strong>, <strong>gptfdisk</strong>, <strong>spdk</strong>, <strong>nfstrace</strong>.</p>
<p>I hope to get <strong>ncurses-6.3</strong> merged within first days of 2022 \o/</p>
<h1 id="does-it-scale">Does it scale?</h1>
<p>Fixing 60 packages took 2 months. Usually it takes sending a fix
upstream, proposing a pull request to <strong>nixpkgs</strong> and following
up both down to acceptance :)</p>
<p>That gives us one fix per day on average.</p>
<p>I have a vague plan of trying to get <strong>gcc-10</strong> updated to <strong>gcc-11</strong>.
That has order of magnitude more failures lurking. <strong>gcc-12</strong> has even
more surprises pending. I won’t be able to fix or even report all the
failures and will need more scalable plan.</p>
<h1 id="tldr">Tl;DR</h1>
<ul>
<li><strong>__attribute__((format(…)))</strong> with <strong>-Wformat=…</strong> is still
a good way to catch trivial format string vulnerabilities.</li>
<li>While disruptive it’s still useful to add format attributes to
<strong>printf()</strong>-like library APIs.</li>
<li>There were ~60 packages to fix after <strong>ncurses</strong> update.</li>
<li>It takes about 5 days to build all of <strong>x86_64-linux</strong> <strong>nixpkgs</strong>
on <strong>hydra</strong>.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on January  3, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>AoC in rust</title>
    <link href="http://trofi.github.io/posts/232-AoC-in-rust.html" />
    <id>http://trofi.github.io/posts/232-AoC-in-rust.html</id>
    <published>2021-12-25T00:00:00Z</published>
    <updated>2021-12-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: AoC in rust</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>AoC in rust</h1>

            <h1 id="tldr">Tl;DR</h1>
<p>For me <strong>rust</strong> was pleasant to write small code snippets like AoC
solutions. Rust has a decent REPL in form of <strong>evcxr</strong>.</p>
<h1 id="story-mode">Story mode</h1>
<p>Following Bill’s suggestion I gave <a href="https://adventofcode.com/">Advent of Code</a>
a try this year.</p>
<p>I did not know how much time it would take me. I hoped it would not be
more than 30 minutes per morning for each of the problems. It was true
for most problems, but some took a lot more than that.</p>
<h2 id="haskell">haskell</h2>
<p>Problems 1 to 7 I solved in haskell as I’m most familiar with it compared
to other languages when it comes to one liners and throw-away scripts.
Here is an example of solution for
<a href="https://adventofcode.com/2021/day/5">Problem 5 part 1</a> to get the feeling
of how I would write things:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# OPTIONS_GHC -Wall #-}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Control.Monad</span> <span class="kw">as</span> <span class="dt">CM</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Char</span> <span class="kw">as</span> <span class="dt">DC</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.List</span> <span class="kw">as</span> <span class="dt">DL</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">I</span> <span class="ot">=</span> <span class="dt">Integer</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">L</span> <span class="ot">=</span> <span class="dt">H</span> <span class="dt">I</span> <span class="dt">I</span> <span class="dt">I</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>       <span class="op">|</span> <span class="dt">V</span> <span class="dt">I</span> <span class="dt">I</span> <span class="dt">I</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>       <span class="op">|</span> <span class="dt">Unsupported</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="ot">solve ::</span> [<span class="dt">L</span>] <span class="ot">-&gt;</span> <span class="dt">Integer</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>solve <span class="ot">=</span> DL.genericLength</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> <span class="fu">filter</span> (\g <span class="ot">-&gt;</span> <span class="fu">length</span> g <span class="op">&gt;</span> <span class="dv">1</span>)</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> DL.group</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> DL.sort</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>      <span class="op">.</span> <span class="fu">concatMap</span> expand</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> expand (<span class="dt">H</span> y x1 x2) <span class="ot">=</span> [ (x,y) <span class="op">|</span> x <span class="ot">&lt;-</span> [x1<span class="op">..</span>x2]]</span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>          expand (<span class="dt">V</span> x y1 y2) <span class="ot">=</span> [ (x,y) <span class="op">|</span> y <span class="ot">&lt;-</span> [y1<span class="op">..</span>y2]]</span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>          expand <span class="dt">Unsupported</span> <span class="ot">=</span> []</span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="ot">readInput ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">L</span>]</span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>readInput inp <span class="ot">=</span> parseL <span class="op">&lt;$&gt;</span> <span class="fu">lines</span> inp</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="kw">where</span> parseL s <span class="ot">=</span> norm ((x1, y1), (x2, y2))</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>              <span class="kw">where</span> [x1,y1,x2,y2] <span class="ot">=</span> <span class="fu">read</span> <span class="op">&lt;$&gt;</span> <span class="fu">words</span> (<span class="fu">map</span> (\c <span class="ot">-&gt;</span> <span class="kw">if</span> DC.isDigit c <span class="kw">then</span> c <span class="kw">else</span> <span class="ch">' '</span>) s)</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>          norm ((x1, y1), (x2, y2)) <span class="ot">=</span> <span class="kw">case</span> () <span class="kw">of</span></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">|</span> x1 <span class="op">==</span> x2 <span class="ot">-&gt;</span> <span class="dt">V</span> x1 (<span class="fu">min</span> y1 y2) (<span class="fu">max</span> y1 y2)</span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">|</span> y1 <span class="op">==</span> y2 <span class="ot">-&gt;</span> <span class="dt">H</span> y1 (<span class="fu">min</span> x1 x2) (<span class="fu">max</span> x1 x2)</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>            <span class="co">-- _            -&gt; error $ &quot;Unexpected line: &quot; ++ show l</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>            _            <span class="ot">-&gt;</span> <span class="dt">Unsupported</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> CM.forM_ [<span class="st">&quot;example&quot;</span>, <span class="st">&quot;input&quot;</span>] <span class="op">$</span> \fn <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    f <span class="ot">&lt;-</span> <span class="fu">readFile</span> fn</span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> inp <span class="ot">=</span> readInput f</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        ans <span class="ot">=</span> solve inp</span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    <span class="fu">print</span> <span class="op">$</span> (fn, ans)</span></code></pre></div>
<p>Error handling is virtually non-existent. Efficiency (list sorting
instead of using something like <strong>Data.Set</strong>) is probably crippled
in favour of smaller code length.</p>
<h2 id="rust">rust</h2>
<p>The 1-7 problems looked too simple and I gave <strong>rust</strong> a try starting
from problem 8.</p>
<p>My <strong>rust</strong> background is tiny: I read a few rust books before but never
tried writing anything more than a hello world. AoC set of challenges
looked like a good opportunity to get used to syntax and some basics of
it’s standard library.</p>
<p>Here is my solution for <a href="https://adventofcode.com/2021/day/8">Problem 8 part 1</a>
and my first “non-trivial” rust program:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">use</span> <span class="pp">std::</span><span class="op">{*,</span> <span class="pp">fs::</span><span class="op">*,</span> <span class="pp">io::</span><span class="op">*};</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> get_input(input_file<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">String</span><span class="op">&gt;&gt;</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> r <span class="op">=</span> <span class="pp">BufReader::</span>new(<span class="pp">File::</span>open(input_file)<span class="op">.</span>unwrap())<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> r<span class="op">.</span>lines()<span class="op">.</span>map(<span class="op">|</span>l<span class="op">|</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        l<span class="op">.</span>unwrap()</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>split(<span class="ch">' '</span>)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>map(<span class="op">|</span>s<span class="op">|</span> <span class="dt">String</span><span class="pp">::</span>from(s))</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>skip_while(<span class="op">|</span>e<span class="op">|</span> e <span class="op">!=</span> <span class="st">&quot;|&quot;</span>)<span class="op">.</span>skip(<span class="dv">1</span>)</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>         <span class="op">.</span>collect()</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    )<span class="op">.</span>collect()<span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> main() <span class="op">{</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> input_file <span class="kw">in</span> [<span class="st">&quot;example&quot;</span><span class="op">,</span> <span class="st">&quot;input&quot;</span>] <span class="op">{</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> input <span class="op">=</span> get_input(input_file)<span class="op">;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> ans <span class="op">=</span> input<span class="op">.</span>into_iter()</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>                       <span class="op">.</span>flatten()</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>                       <span class="op">.</span>filter(<span class="op">|</span>e<span class="op">|</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>                           [<span class="dv">2usize</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">,</span><span class="dv">7</span>]<span class="op">.</span>contains(<span class="op">&amp;</span>e<span class="op">.</span>len())</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>                       )</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>                       <span class="op">.</span>count()<span class="op">;</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        <span class="pp">println!</span>(<span class="st">&quot;{}: {}&quot;</span><span class="op">,</span> input_file<span class="op">,</span> ans)<span class="op">;</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Rust certainly has a feel of haskell at least when it comes to chaining
operations on sequences. It’s non-idiomatic in absent error handling,
inefficient in terms of excessive lifetimes for temporaries. But look
quite readable.</p>
<h2 id="rust-resources">rust resources</h2>
<p>To get more familiarity with the language I reread <a href="https://doc.rust-lang.org/book/">https://doc.rust-lang.org/book/</a>
and used <a href="https://doc.rust-lang.org/std/index.html">https://doc.rust-lang.org/std/index.html</a> extensively to look up
useful helper in a standard library.</p>
<h2 id="rust-repl">rust REPL</h2>
<p>As a playground I was initially using <a href="https://godbolt.org/">https://godbolt.org/</a> and <strong>rustc</strong>
in the command line. But it was a bit tedious when it comes down to
exploration of simple operations. I needed a <strong>ghci</strong> equivalent
(a haskell REPL environment).</p>
<p>Looks like <strong>evcxr</strong> (<a href="https://github.com/google/evcxr/blob/main/evcxr_repl/README.md">https://github.com/google/evcxr/blob/main/evcxr_repl/README.md</a>)
is a popular <strong>rust</strong> REPL out there. Luckily <strong>nixpkgs</strong> providesit in
the standard repository:</p>
<pre class><code>$ nix run nixpkgs#evcxr
Welcome to evcxr. For help, type :help
&gt;&gt; 'a'.to_up&lt;TAB&gt;
&gt;&gt; 'a'.to_uppercase()
ToUppercase(One('A'))
&gt;&gt; String::from_iter('a'.to_uppercase())
       ^^^^^^^^^ function or associated item not found in `String`
no function or associated item named `from_iter` found for struct `String` in the current scope
help: items from traits can only be used if the trait is in scope
help: the following trait is implemented but not in scope; perhaps add a `use` for it:

use std::iter::FromIterator;
help: there is an associated function with a similar name

from_utf8
&gt;&gt; use std::iter::FromIterator;
&gt;&gt; String::from_iter('a'.to_uppercase())
&quot;A&quot;</code></pre>
<p>It supports type inspection for bound variables:</p>
<pre class><code>&gt;&gt; let v = [1,2,3];
&gt;&gt; :vars
v: [i32; 3]</code></pre>
<p>And even supports use of external crates:</p>
<pre class><code>&gt;&gt; :dep &quot;quickcheck&quot;
&gt;&gt; fn is_ok(b: bool)-&gt;bool { b }
&gt;&gt; quickcheck::quickcheck(is_ok as fn(bool)-&gt;bool)
thread '&lt;unnamed&gt;' panicked at '[quickcheck] TEST FAILED. Arguments: (false)', .../quickcheck-1.0.3/src/tester.rs:165:28</code></pre>
<p>I spent a few hours poking at various containers, iterators and
available methods.</p>
<p>Prepared with these basics I managed to solve the rest of AoC challenges.</p>
<h2 id="nice-aoc-challenges">Nice AoC challenges</h2>
<p>Most AoC problems were straightforward and did not really pose a real challenge.</p>
<p>But some of them were not so simple. Here is my list of the nicest ones:</p>
<ul>
<li><a href="https://adventofcode.com/2021/day/14">Problem 14</a>: “Extended Polymerization”</li>
<li><a href="https://adventofcode.com/2021/day/19">Problem 19</a>: “Beacon Scanner”</li>
<li><a href="https://adventofcode.com/2021/day/23">Problem 23</a>: “Amphipod”</li>
<li><a href="https://adventofcode.com/2021/day/24">Problem 24</a>: “Arithmetic Logic Unit”</li>
</ul>
<p>“Extended Polymerization” is a susprisingly concise problem that managed to trick me
more than once. First, I did not notice exponential growth. Then it took me a while
to reformulate correctly it in a form suitable for dynamic programming solution.
And then I missed a few subtleties.</p>
<p>“Beacon Scanner” looked like a tedious problem, but it has many fun angles to explore.
For some reason on my input not all expected pairs in the solution had 12+ points
overlap. That wedged me for a day of debugging exploration of data.</p>
<p>“Amphipod” reminded me of a Norvig’s online AI class I took almost 10 years ago.
Second best problem of this year’s AoC I’d say.</p>
<p>“Arithmetic Logic Unit” is the only problem I managed to solve using pen and paper.
Best problem of this year’s AoC on my rating :) It has a few hidden layers that
transform a problem statement in leasantly surprising ways. It remindedme of
<a href="https://www.hacker.org">https://www.hacker.org</a> challenges. These are the best :)</p>
<h2 id="parting-words">Parting words</h2>
<p>While coding the solutions I made many mistakes like use-after-free, index
out-of-bounds and similar. Borrow checker errors are great at explaining
the lifetimes and sources of references. Integer overflow runtime checks
are also nice.</p>
<p>It feels like <strong>rust</strong> is very explicit about value moves and copies. It’s a
nice feeling of confidence where you create (potentially expensive) object
copies and when you can just cheaply move them around.</p>
<p>Compiler warnings are also superb: superfluous <strong>mut</strong> annotations, dead code,
even accidental camel case!</p>
<p>If you are thinking of trying <strong>rust</strong> but did not yet you certainly should.</p>
<ul>
<li><strong>rust</strong> is very friendly to newcomers like me</li>
<li><strong>evcxr</strong> is a nice REPL</li>
<li>AoC is cool!</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on December 25, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Trying out gcc-12</title>
    <link href="http://trofi.github.io/posts/231-trying-out-gcc-12.html" />
    <id>http://trofi.github.io/posts/231-trying-out-gcc-12.html</id>
    <published>2021-11-14T00:00:00Z</published>
    <updated>2021-11-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Trying out gcc-12</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Trying out gcc-12</h1>

            <p>Having updated locally new <strong>NixOS</strong> system to <strong>gcc-11.2.0</strong> I decided
I’m familiar enough with <strong>NixOS</strong> to try yet unreleased <strong>gcc-12</strong> on
a main system.</p>
<p>Would it just work? That would be boring :)</p>
<p>First I added new <strong>gcc</strong> snapshot to <strong>nixpkgs</strong> locally. It was only a
matter of pulling in <strong>flex</strong> as a dependency (<strong>gcc</strong> does not provide
genrated lexers for snapshots, only does fore releases and release candidates):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- pkgs/development/compilers/gcc/11/default.nix       2021-10-27 07:15:23.996869137 +0100</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ pkgs/development/compilers/gcc/12/default.nix       2021-11-14 07:34:59.850516073 +0000</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -34,6 +34,9 @@</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a> , gnused ? null</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a> , cloog # unused; just for compat with gcc4, as we override the parameter on some places</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a> , buildPackages</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="va">+# snapshots don't have all the environment in front of them</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="va">+, flex</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a> }:</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a> # LTO needs libelf and zlib.</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -56,8 +59,9 @@</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a> with lib;</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a> with builtins;</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="st">-let majorVersion = &quot;11&quot;;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="st">-    version = &quot;${majorVersion}.2.0&quot;;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="va">+let majorVersion = &quot;12&quot;;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="va">+    version = &quot;${majorVersion}.0.0&quot;;</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="va">+    snapDate = &quot;20211107&quot;;</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>     inherit (stdenv) buildPlatform hostPlatform targetPlatform;</span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -94,8 +102,8 @@</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>   builder = ../builder.sh;</span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>   src = fetchurl {</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="st">-    url = &quot;mirror://gcc/releases/gcc-${version}/gcc-${version}.tar.xz&quot;;</span></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;sha256-0I7cU2tUw3KhAQ/2YZ3SdMDxYDqkkhK6IPeqLNo2+os=&quot;;</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="va">+    url = &quot;mirror://gcc/snapshots/${majorVersion}-${snapDate}/gcc-${majorVersion}-${snapDate}.tar.xz&quot;;</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="va">+    sha256 = &quot;sha256-YrpYs8GHGjpxto8h7JZI3VJLZAn4aRekbCvx+e1WjII=&quot;;</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>   inherit patches;</span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -161,7 +169,7 @@</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>     libcCross crossMingw;</span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>   depsBuildBuild = [ buildPackages.stdenv.cc ];</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a><span class="st">-  nativeBuildInputs = [ texinfo which gettext ]</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a><span class="va">+  nativeBuildInputs = [ flex texinfo which gettext ]</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>     ++ (optional (perl != null) perl)</span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>     ++ (optional langAda gnatboot)</span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>;</span></code></pre></div>
<p>And a few more lines to set <strong>gcc-12</strong> as a default.</p>
<p>I attempted to rebuild packages in my system with <strong>nix build -f nixos system</strong>.</p>
<p>First failure was a mysterious early <strong>ed-1.17</strong> test failure. I updated
<strong>ed</strong> to <strong>1.18-pre3</strong> locally and that fixed the test. I made a mental note
to get back to it a bit later to find out what fixed the test.</p>
<p>Then there was a long list of minor failures related to standard library
header interdependencies where fix is a one-liner to add required header.
A few examples are:</p>
<ul>
<li>oggvideotools: <a href="https://sourceforge.net/p/oggvideotools/bugs/13/">https://sourceforge.net/p/oggvideotools/bugs/13/</a></li>
<li>libopenmpt: <a href="https://github.com/OpenMPT/openmpt/pull/8">https://github.com/OpenMPT/openmpt/pull/8</a></li>
<li>jfx</li>
</ul>
<p>This is the most typical breakage for compiler updates.</p>
<p>Then there were a few failures related to now forbidden <strong>std::string(NULL)</strong>
constructor. The fix is to use simpler <strong>std::string()</strong> constructor.
A few affected projects are:</p>
<ul>
<li>binutils: <a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=068a039b8bd7c7386bb0d88f0ae245b0fe4132e9">https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=068a039b8bd7c7386bb0d88f0ae245b0fe4132e9</a></li>
<li>nlohmann/json (bug only): <a href="https://github.com/nlohmann/json/issues/3138">https://github.com/nlohmann/json/issues/3138</a></li>
<li>ccache</li>
</ul>
<p>Then I noticed another change in ADL resolution, where <strong>operator&lt;&lt;</strong> was not
searched in current namespace if none of arguments are in current namespace.
<strong>clang</strong> had this behaviour for a while. Now <strong>gcc</strong> follows the lead.
Only one project is affected so far:</p>
<ul>
<li>source-highlighting: <a href="https://git.savannah.gnu.org/cgit/src-highlite.git/commit/?id=ab9fe5cb9b85c5afab94f2a7f4b6d7d473c14ee9">https://git.savannah.gnu.org/cgit/src-highlite.git/commit/?id=ab9fe5cb9b85c5afab94f2a7f4b6d7d473c14ee9</a></li>
</ul>
<p>After getting through this trivia I got an unusual build failure for <strong>libX11</strong>.
Here is a shorter example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> extract<span class="op">(</span><span class="dt">char</span><span class="op">*);</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> XReadBitmapFileData <span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> name_and_type<span class="op">[</span><span class="dv">255</span><span class="op">];</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(;;)</span> <span class="op">{</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        extract <span class="op">(</span>name_and_type<span class="op">);</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> <span class="op">*</span> type <span class="op">=</span> strrchr <span class="op">(</span>name_and_type<span class="op">,</span> <span class="ch">'_'</span><span class="op">);</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>type<span class="op">)</span> type<span class="op">++;</span> <span class="cf">else</span> type <span class="op">=</span> name_and_type<span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>strcmp <span class="op">(</span><span class="st">&quot;hot&quot;</span><span class="op">,</span> type<span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>type<span class="op">--</span> <span class="op">==</span> name_and_type <span class="op">||</span> type<span class="op">--</span> <span class="op">==</span> name_and_type<span class="op">)</span> <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>strcmp <span class="op">(</span><span class="st">&quot;ax_hot&quot;</span><span class="op">,</span> type<span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It took me a while to wrap my head around what is being done here. And
after that while I still got it wrong :) (but not by too much).</p>
<p>Here is what <strong>gcc-12</strong> has to say about the code:</p>
<pre class><code># ok:
$ gcc-11.2.0 -Wall -Werror=array-bounds -fno-strict-aliasing -O2 -c bug.c -o bug.o
# bad:
$ gcc-12.0.0 -Wall -Werror=array-bounds -fno-strict-aliasing -O2 -c bug.c -o bug.o
bug.c: In function 'XReadBitmapFileData':
bug.c:10:48: error: array subscript -2 is outside array bounds of 'char[9223372036854775807]' [-Werror=array-bounds]
   10 |             if (type-- == name_and_type || type-- == name_and_type) continue;
      |                                            ~~~~^~
bug.c:4:14: note: at offset [0, 253] into object 'name_and_type' of size 255
    4 |         char name_and_type[255];
      |              ^~~~~~~~~~~~~
cc1: some warnings being treated as errors</code></pre>
<p>Note: it’s normally just a warning. But <strong>libX11</strong> explicitly uses
“-Werror=array-bounds” as part of it’s build system assuming this
warning can catch important problems.</p>
<p>The error makes no sense in tis case: a) there is no array dereference,
b) there should be no out-of-bounds pointers here.</p>
<p>I was also not sure if <strong>(type– == name_and_type || type– == name_and_type)</strong>
is a valid construct. I filed <a href="https://gcc.gnu.org/PR103215">https://gcc.gnu.org/PR103215</a>. There Andrew
explained that <strong>||</strong> is a sequence point and it has expected defined
behaviour. In hindsight it’s obvious as <strong>||</strong> is also a lazy evaluation
device.</p>
<p>Apparently this build failure is somewhat common. Same failure on
identical code is present in:</p>
<ul>
<li>libXmu</li>
<li>gdk-pixbuf</li>
</ul>
<p>Having sorted the above I returned to <strong>ed-1.17</strong> failure. I assumed it
was some ancient undefined behaviour in <strong>ed</strong> uncovered by new <strong>gcc</strong>
optimisations (like recent <strong>modref</strong> improvements). I looked at
the diff between <strong>ed-1.17</strong> and <strong>ed-1.18-pre3</strong> tarballs but found
nothing suspicious.</p>
<p><strong>ed</strong> is an old and short codebase. Instead of staring a lot at generated
assembly I decided to shrink it down to something I could easily understand
and possibly fix. In the hindsight it was a good decision.</p>
<p>After I arrived to a 2KB self-contained example of C code I still could
not see what exactly <strong>gcc-12</strong> does to it to make it fail.</p>
<p>I filed <a href="https://gcc.gnu.org/PR103202">https://gcc.gnu.org/PR103202</a> and Aldy instantly fixed very obscure
<strong>PHI</strong> importing order bug. From what I understand we used stale variable
names before a “rename” and used incorrect metadata attached to them
(like value ranges).</p>
<p>These kinds of bugs are very hard to extract from large projects. Even for
<strong>ed</strong> case it took me 3 evenings. On a positive side now I know <strong>ed</strong>’s
editor model :)</p>
<p>After getting <strong>ed</strong> fixed I encountered an (already fixed) ICE on
<strong>gperftools</strong>: <a href="https://gcc.gnu.org/PR103099">https://gcc.gnu.org/PR103099</a>.</p>
<p>Currently I can build almost all packages for my system with <strong>gcc-12</strong>.
I have a few local hacks too dirty to share, but they are mostly about
getting headers imported correctly and getting around too aggressive
warnings-as-errors in a few packages libe <strong>libjxl</strong>.</p>
<p>The only yet unsolved mystery is 4 newly failing tests on <strong>llvm-13</strong>
package. Somehow <strong>llvm</strong> generates FunctionLength=0 unwind information
for learly non-empty functions. I suspect (hope) it’s another <strong>gcc</strong> bug.
I’m trying to debug it right now. <strong>UPDATE:</strong> confirmed and extracted
example to illustrate <strong>gcc</strong> bug <a href="https://gcc.gnu.org/PR103266">https://gcc.gnu.org/PR103266</a></p>
<h1 id="fun-facts">Fun facts</h1>
<ul>
<li>It took me 2.5 months to get to gcc-from-git after switching the distribution :)</li>
<li>Not too much was broken for these past two months.</li>
<li>Most package failures are legitimate code bugs: missing includes, invalid or
tautological code.</li>
<li>Some failures against <strong>gcc-12</strong> are still good old compiler bugs :)</li>
<li>Package test on <strong>nixpkgs</strong> are great at catching real bugs.</li>
</ul>
<p>I think <strong>gcc-12</strong> is quite usable for early experiments.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November 14, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>When make -j$(nproc) fails</title>
    <link href="http://trofi.github.io/posts/230-when-make-j-nproc-fails.html" />
    <id>http://trofi.github.io/posts/230-when-make-j-nproc-fails.html</id>
    <published>2021-10-28T00:00:00Z</published>
    <updated>2021-10-28T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: When make -j$(nproc) fails</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>When make -j$(nproc) fails</h1>

            <p>The other day I noticed that <strong>nixpkgs</strong> repository has slightly outdated <strong>bison-3.7.6</strong>
package while <strong>3.8.2</strong> was available upstream. I tried to update it. Usually it
takes a 2 line change: update version and update upstream tarball hash. Something like:
<a href="https://github.com/NixOS/nixpkgs/commit/88bdfc3b6cdd489abf480880aa01d71b6965a53c">https://github.com/NixOS/nixpkgs/commit/88bdfc3b6cdd489abf480880aa01d71b6965a53c</a></p>
<div class="sourceCode" id="cb1"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/tools/parsing/bison/default.nix</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/tools/parsing/bison/default.nix</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -7,11 +7,11 @@</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a> stdenv.mkDerivation rec {</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>   pname = &quot;bison&quot;;</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="st">-  version = &quot;3.7.6&quot;;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="va">+  version = &quot;3.8.2&quot;;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>   src = fetchurl {</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>     url = &quot;mirror://gnu/${pname}/${pname}-${version}.tar.gz&quot;;</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;sha256-adwLtG6o/DB9TKHgthyMNV6yB9Cwxp9PhGIyjnTXueo=&quot;;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="va">+    sha256 = &quot;sha256-BsnhO99+sk1M62tZIFpPZ8LH5yExGWREMP6C+9FKCrs=&quot;;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>   };</span></code></pre></div>
<p>I updated it locally and noticed that <strong>bison</strong> was somewhat slow to build.
The build process looked sequential:</p>
<pre class><code>$ time nix build --impure --expr 'with import ./.{}; bison' --rebuild
real    0m28,695s</code></pre>
<p>I tried to enable parallelism and got 1.5x speedup:</p>
<pre class><code>$ time nix build --impure --expr 'with import ./.{}; bison.overrideAttrs (oa: { enableParallelBuilding = true; })'
real    0m19,090s</code></pre>
<p>And then applied the same to <strong>bison/default.nix</strong> build definition: <a href="https://github.com/NixOS/nixpkgs/commit/faf06a88de74364d4544e1ae8adbc5a31b51e4fe">https://github.com/NixOS/nixpkgs/commit/faf06a88de74364d4544e1ae8adbc5a31b51e4fe</a></p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/tools/parsing/bison/default.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/tools/parsing/bison/default.nix</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -17,8 +17,10 @@ stdenv.mkDerivation rec {</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>   nativeBuildInputs = [ m4 perl ] ++ lib.optional stdenv.isSunOS help2man;</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>   propagatedBuildInputs = [ m4 ];</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="st">-  doCheck = false; # fails</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="st">-  doInstallCheck = false; # fails</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="va">+  enableParallelBuilding = true;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="va">+  doCheck = true;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="va">+  doInstallCheck = true;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>   meta = {</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>     homepage = &quot;https://www.gnu.org/software/bison/&quot;;</span></code></pre></div>
<p>While at it I also enabled bison tests and slowed build down to 1m22s.
<strong>bison</strong> has ~700 tests. 3x slowdown compared to initial state. But at
least tests now use all the CPUs I have :) Leaving it for another day.</p>
<p><strong>bison</strong> happens to be a bootstrap package that causes rebuild of almost
all packages. None of ~2400 failed for my system. Yay! While at it I noticed
that a few other packages were running sequentially, like <strong>coreutils</strong>:</p>
<pre class><code>$ time nix build --impure --expr 'with import ./. {}; coreutils' --rebuild
real    3m4,589s

$ time nix build --impure --expr 'with import ./. {}; coreutils.overrideAttrs (oa: { enableParallelBuilding = true; })'
real    0m52,312s</code></pre>
<p>3.5x speedup just like that. At this point I wondered why parallelism is not a default.
I suspected I have a lot more packages that build sequentially for no real reason.</p>
<p>Mechanically it’s a tiny change in <strong>stdenv.mkDerivation</strong> function:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/generic/make-derivation.nix</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/generic/make-derivation.nix</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -60,6 +60,8 @@ in</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>     (stdenv.hostPlatform != stdenv.buildPlatform)</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>     [ &quot;build&quot; &quot;host&quot; ]</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">+, enableParallelBuilding ? true</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a> # TODO(@Ericson2314): Make unconditional / resolve #33599</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a> # Check phase</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a> , doCheck ? config.doCheckByDefault or false</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -310,7 +312,8 @@ else let</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>           llvm-config = 'llvm-config-native'</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>         '';</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>       in [ &quot;--cross-file=${crossFile}&quot; ] ++ mesonFlags;</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="st">-    } // lib.optionalAttrs (attrs.enableParallelBuilding or false) {</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="va">+    } // lib.optionalAttrs enableParallelBuilding {</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="va">+      inherit enableParallelBuilding;</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>       enableParallelChecking = attrs.enableParallelChecking or true;</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>     } // lib.optionalAttrs (hardeningDisable != [] || hardeningEnable != [] || stdenv.hostPlatform.isMusl) {</span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>       NIX_HARDENING_ENABLE = enabledHardeningOptions;</span></code></pre></div>
<p>It is safe? Some packages will likely fail horribly when they get built
in parallel. Scary and so tempting!</p>
<p>With the change above I built all the packages my system had with
<strong>nix build -f nixos system --keep-going</strong> and immediately uncovered a
bunch of failures:</p>
<ul>
<li>cramfsswap</li>
<li>discount</li>
<li>perlPackages.X11XCB</li>
<li>libomxil-bellagio</li>
<li>vde2</li>
<li>adns</li>
<li>portaudio</li>
<li>dmraid</li>
<li>directfb</li>
<li>ocaml</li>
<li>cdparanoiaIII</li>
<li>gnome2.ORBit2</li>
</ul>
<p>12 packages out of ~2400 is not too much. Worst case I could mark them
with <strong>enableParallelChecking = false;</strong> and move on.</p>
<p>I decided to spend some time on each of failures to possibly fix them
upstream or at least get some insight into why build systems sometimes
fail at this.</p>
<p>I love build system failures. Most of the time they are trivial to debug
and fix. And when they are not it’s always a mystery to find out what a
fancy failure mode awaits us there.</p>
<h1 id="cramfsswap">cramfsswap</h1>
<p><strong>cramfsswap</strong> was easy to reproduce on rerun:</p>
<pre class><code>$ nix build --impure --expr 'with import ./.{}; cramfsswap.overrideAttrs (oa: { enableParallelBuilding = true; })' -L
...
cramfsswap&gt; build flags: -j16 -l16 SHELL=/nix/store/wadmyilr414n7bimxysbny876i2vlm5r-bash-5.1-p8/bin/bash
cramfsswap&gt; gcc -Wall -g -O    -o cramfsswap cramfsswap.c -lz
cramfsswap&gt; strip cramfsswap
cramfsswap&gt; strip: 'cramfsswap': No such file
cramfsswap&gt; make: *** [Makefile:10: strip] Error 1
cramfsswap&gt; make: *** Waiting for unfinished jobs....</code></pre>
<p>Looks like <strong>strip</strong> is called a bit early. Let’s check the <strong>Makefile</strong> contents
(<strong>nix develop -f. cramfsswap --phase unpack</strong>):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode Makefile"><code class="sourceCode makefile"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> cramfsswap strip</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dv">cramfsswap:</span><span class="dt"> cramfsswap.c</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> -Wall -g -O <span class="ch">$(</span><span class="dt">CPPFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LDFLAGS</span><span class="ch">)</span> -o cramfsswap cramfsswap.c -lz</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="dv">strip:</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>        strip cramfsswap</span></code></pre></div>
<p>Can you spot the failure?</p>
<p><strong>strip</strong> target should depend on <strong>cramfsswap</strong> target. Nice thing
about such bugs is that these are easy to verify by running an individual
target with incomplete depends:</p>
<pre class><code>$ LANG=C make strip
strip cramfsswap
strip: 'cramfsswap': No such file
make: *** [Makefile:10: strip] Error 1</code></pre>
<p>The fix is trivial:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -6,7 +6,7 @@ debian: cramfsswap</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a> cramfsswap: cramfsswap.c</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        $(CC) -Wall -g -O $(CPPFLAGS) $(CFLAGS) $(LDFLAGS) -o cramfsswap cramfsswap.c -lz</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="st">-strip:</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="va">+strip: cramfsswap</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>        strip cramfsswap</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a> install: cramfsswap</span></code></pre></div>
<p>Even better would be to get rid of <strong>strip</strong> entirely. But let’s keep the
build system’s behaviour unchanged for now.</p>
<p>Reported upstream as <a href="https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=996964">https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=996964</a>.</p>
<p>This is an example of class of bugs where direct dependency is missing
in <strong>Makefile</strong>.</p>
<p>Very similar failures were found in:</p>
<ul>
<li>discount: <a href="https://github.com/Orc/discount/commit/c00ad392bf96d723f4ae01edebb3328290d11a5c">https://github.com/Orc/discount/commit/c00ad392bf96d723f4ae01edebb3328290d11a5c</a></li>
<li>X11-XCB: <a href="https://github.com/stapelberg/X11-XCB/commit/813608dacdae1ae35c9eb0f171a958617e014520">https://github.com/stapelberg/X11-XCB/commit/813608dacdae1ae35c9eb0f171a958617e014520</a></li>
<li>libomxil-bellagio (no upstream fix yet)</li>
<li>vde2: <a href="https://github.com/virtualsquare/vde-2/commit/7dd9ed46d5dca125ca45d679ac9f3acbfb0f9300">https://github.com/virtualsquare/vde-2/commit/7dd9ed46d5dca125ca45d679ac9f3acbfb0f9300</a></li>
</ul>
<h1 id="adns">adns</h1>
<p><strong>adns</strong> was more elusive and required a bit of persistence to reproduce again:</p>
<pre class><code>$ nix build --impure --expr 'with import ./.{}; adns.overrideAttrs (oa: { enableParallelBuilding = true; })' -L
...
m4 -P -I. hredirect.h.m4 &gt;hredirect.h-a.new
sed -e 's/hm_comma/,/g; s/hm_squote/'\''/g; /^[  ]*$/d' &lt;hredirect.h-a.new &gt;hredirect.h-b.new
m4 -P -I. hfuzzraw.c.m4 &gt;hfuzzraw.c-a.new
sed -e 's/hm_comma/,/g; s/hm_squote/'\''/g; /^[  ]*$/d' &lt;hfuzzraw.c-a.new &gt;hfuzzraw.c-b.new
gcc -g -O2 -Wall -Wmissing-prototypes -Wwrite-strings -Wstrict-prototypes -Wcast-qual -Wpointer-arith -Wno-pointer-sign -Wno-unused-value  -I../src -I. -I./../src  -DADNS_REGRESS_TEST -I. -I ./../src -c -g -o adnsresfilter_c.o ../client/adnsresfilter.c
In file included from ../client/adnsresfilter.c:46:
./hredirect.h:3:10: fatal error: hsyscalls.h: No such file or directory
    3 | #include &quot;hsyscalls.h&quot;
      |          ^~~~~~~~~~~~~
compilation terminated.
make[1]: *** [Makefile:130: adnsresfilter_c.o] Error 1</code></pre>
<p>In this case very occasionally <strong>hsyscalls.h</strong> file was not present. In
this case <strong>hsyscalls.h</strong> was autogenerated from <strong>Makefile</strong> itself
(as opposed to <strong>./configure</strong>-time generation) in <strong>regress/Makefile.in</strong>:
<a href="http://www.chiark.greenend.org.uk/ucgi/~ianmdlvl/git?p=adns.git;a=blob;f=regress/Makefile.in;h=993c1af66e2fbda331aee965ac2bfc8d3665c43e;hb=HEAD">http://www.chiark.greenend.org.uk/ucgi/~ianmdlvl/git?p=adns.git;a=blob;f=regress/Makefile.in;h=993c1af66e2fbda331aee965ac2bfc8d3665c43e;hb=HEAD</a></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode Makefile"><code class="sourceCode makefile"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="dt">REDIRLIBOBJS</span><span class="ch">=</span><span class="st">   </span><span class="ch">$(</span><span class="kw">addsuffix</span><span class="st"> _d.o</span><span class="kw">,</span><span class="st"> </span><span class="ch">$(</span><span class="kw">basename</span><span class="st"> </span><span class="ch">$(</span><span class="dt">LIBOBJS</span><span class="ch">)))</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="dt">HARNLOBJS</span><span class="ch">=</span><span class="st">      hcommon.o </span><span class="ch">$(</span><span class="dt">REDIRLIBOBJS</span><span class="ch">)</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="dt">ALL_OBJS</span><span class="ch">=</span><span class="st">       </span><span class="ch">$(</span><span class="dt">HARNLOBJS</span><span class="ch">)</span><span class="st"> dtest.o hrecord.o hplayback.o hnonfuzz.o hfuzz.o</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="dv">%_c.o:</span><span class="dt">          </span><span class="ch">$(</span><span class="dt">srcdir</span><span class="ch">)</span><span class="dt">/../client/%.c hredirect.h</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>            <span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">HCPPFLAGS</span><span class="ch">)</span> -I <span class="ch">$(</span><span class="dt">srcdir</span><span class="ch">)</span>/../src -c -g -o <span class="ch">$@</span> <span class="ch">$&lt;</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="dv">$(ALL_OBJS):</span><span class="dt">    </span><span class="ch">$(</span><span class="dt">srcdir</span><span class="ch">)</span><span class="dt">/../src/adns.h </span><span class="ch">$(</span><span class="dt">srcdir</span><span class="ch">)</span><span class="dt">/../src/internal.h</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="dv">$(ALL_OBJS):</span><span class="dt">    harness.h hsyscalls.h</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="dv">%:</span><span class="dt">:     %.m4 hmacros.i4 hsyscalls.i4</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>    <span class="ch">$(</span><span class="dt">M4</span><span class="ch">)</span> -P -I<span class="ch">$(</span><span class="dt">srcdir</span><span class="ch">)</span> <span class="ch">$&lt;</span> &gt;<span class="ch">$@</span>-a.new</span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    sed -e <span class="st">'s/hm_comma/,/g; s/hm_squote/'</span>\<span class="st">''</span>/g; /^[  ]*<span class="ch">$$</span>/d<span class="st">' &lt;</span><span class="ch">$@</span><span class="st">-a.new &gt;</span><span class="ch">$@</span><span class="st">-b.new</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>    <span class="ch">@</span><span class="fu">mv -f </span><span class="ch">$@</span><span class="fu">-b.new </span><span class="ch">$(</span><span class="dt">srcdir</span><span class="ch">)</span><span class="fu">/</span><span class="ch">$@</span><span class="fu">; rm -f </span><span class="ch">$@</span><span class="fu">-a.new</span></span></code></pre></div>
<p>Here <strong>hsyscalls.h.m4</strong> is used to produce <strong>hsyscalls.h</strong>,
but <strong>adnsresfilter_c.o</strong> in no way specifies the dependency against it. It should.</p>
<p>Minor note: <strong>../client/adnsresfilter.c</strong> includes <strong>hsyscalls.h</strong> only indirectly
via <strong>hredirect.h</strong> and thus requires some care to specify actual dependency.
Should <strong>adnsresfilter.c</strong> require <strong>hsyscalls.h</strong> dependency? Or should
<strong>hredirect.h</strong> require <strong>hsyscalls.h</strong> as a depdendency? Up to build system author.</p>
<p>Upstream report: <a href="https://debbugs.gnu.org/cgi/bugreport.cgi?bug=51329">https://debbugs.gnu.org/cgi/bugreport.cgi?bug=51329</a></p>
<p>This is a class of bugs where source dependency is autogenerated, but <strong>Makefile</strong>
does not specify object dependency on generated source.</p>
<p>Very similar failures were found in:</p>
<ul>
<li>portaudio</li>
<li>dmraid</li>
<li>directfb</li>
</ul>
<h1 id="ocaml">ocaml</h1>
<p><strong>ocaml</strong> is a a big project that takes a while to compile.
Normally such projects have <strong>Makefile</strong> ready for parallel build as is.
And yet:</p>
<pre class><code>$ nix build --impure --expr 'with import ./.{}; ocaml.overrideAttrs (oa: { enableParallelBuilding = true; })' -L
...
ocaml&gt; build flags: -j16 -l16 SHELL=/nix/store/wadmyilr414n7bimxysbny876i2vlm5r-bash-5.1-p8/bin/bash world bootstrap world.opt
ocaml&gt; make -C runtime  all
ocaml&gt; make promote-cross
ocaml&gt; make coldstart
ocaml&gt; make[1]: Entering directory '/build/ocaml-4.12.0/runtime'
ocaml&gt; make[1]: Entering directory '/build/ocaml-4.12.0'
ocaml&gt; make[1]: Entering directory '/build/ocaml-4.12.0'
ocaml&gt; make -C runtime  all
ocaml&gt; cp ocamlc boot/ocamlc
ocaml&gt; make[2]: Entering directory '/build/ocaml-4.12.0/runtime'
ocaml&gt; cp: cannot stat 'ocamlc': No such file or directory
ocaml&gt; make[1]: *** [Makefile:179: promote-common] Error 1
ocaml&gt; make[1]: Leaving directory '/build/ocaml-4.12.0'
ocaml&gt; make: *** [Makefile:233: coreboot] Error 2
ocaml&gt; make: *** Waiting for unfinished jobs....</code></pre>
<p>Such an early failure! Note that bulder calls <strong>make</strong> with multiple targets: <strong>make -j16 world bootstrap world.opt</strong>.
Looking at <strong>Makefile</strong> reveals an interesting pattern: <a href="https://github.com/ocaml/ocaml/blob/trunk/Makefile#L305">https://github.com/ocaml/ocaml/blob/trunk/Makefile#L305</a></p>
<div class="sourceCode" id="cb14"><pre class="sourceCode Makefile"><code class="sourceCode makefile"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> world</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dv">world:</span><span class="dt"> coldstart</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> all</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a><span class="co"># Compile also native code compiler and libraries, fast</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> world.opt</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="dv">world.opt:</span><span class="dt"> checknative</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> coldstart</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> opt.opt</span></code></pre></div>
<p>Normally I would expect it to be something like:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode Makefile"><code class="sourceCode makefile"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="dv">world:</span><span class="dt"> coldstart all</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="dv">world.opt:</span><span class="dt"> checknative coldstart opt.opt</span></span></code></pre></div>
<p>Otherwise nothing prevents <strong>coldstrat</strong> to be built from both <strong>world</strong>
and <strong>world.opt</strong> targets in parallel. That’s what happens in our case.</p>
<p>To workaround this failure my suggestion is to artificially sequence targets
together:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode Makefile"><code class="sourceCode makefile"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="dv">nixpkgs_world_bootstrap_world_opt:</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> world</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> bootstrap</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> world.opt</span></code></pre></div>
<p>That way we can still preserve the ordering and have each component to build
in parallel. Longer term the build system should allow us to specify multiple
top-level targets. They should not be special in any way.</p>
<p>This change speeds ocaml buuild time from <strong>6m55s</strong> to <strong>1m35s</strong> on my machines.
A 4.3x speedup does not sound bad for 4 lines of <strong>Makefile</strong>.</p>
<h1 id="cdparanoiaiii">cdparanoiaIII</h1>
<p><strong>cdparanoiaIII</strong> took me quite a while to be able to reproduce the failure.
The following managed to trigger rebuild eventually:</p>
<pre class><code>$ while nix build -f . cdparanoiaIII --rebuild --cores 64; do echo again; done
...
make libcdda_interface.a CFLAGS=&quot;-O2 -fsigned-char -g -O2&quot;
make[2]: Entering directory '/build/cdparanoia-III-10.2/interface'
gcc -O2 -fsigned-char -g -O2 -c scan_devices.c
...
make[2]: Leaving directory '/build/cdparanoia-III-10.2/interface'
make libcdda_interface.so CFLAGS=&quot;-O2 -fsigned-char -g -O2 -fpic&quot;
...
gcc -O2 -fsigned-char -g -O2 -fpic -c scan_devices.c
...
gcc -fpic -shared -o libcdda_interface.so.0.10.2 -Wl,-soname -Wl,libcdda_interface.so.0 scan_devices.o  common_interface.o cooked_interface.o interface.o scsi_interface.o smallft.o toc.o test_interface.o -lm -lrt
scan_devices.o: file not recognized: file format not recognized
collect2: error: ld returned 1 exit status
make[2]: *** [Makefile:49: libcdda_interface.so] Error 1</code></pre>
<p>Here <strong>scan_devices.o</strong> gets rebuilt twice within a single <strong>make</strong> invocation:
once with <strong>-fpic</strong> option (to build shared library) and once without (to build
static library): <a href="https://svn.xiph.org/trunk/cdparanoia/interface/Makefile.in">https://svn.xiph.org/trunk/cdparanoia/interface/Makefile.in</a></p>
<p><strong>interface/Makefile.in</strong> is very illustrative in this case:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode Makefile"><code class="sourceCode makefile"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> lib slib</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="dv">lib:</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> libcdda_interface.a CFLAGS=<span class="st">&quot;</span><span class="ch">$(</span><span class="dt">OPT</span><span class="ch">)</span><span class="st">&quot;</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="dv">slib:</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">MAKE</span><span class="ch">)</span> libcdda_interface.so CFLAGS=<span class="st">&quot;</span><span class="ch">$(</span><span class="dt">OPT</span><span class="ch">)</span><span class="st"> -fpic&quot;</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="dv">libcdda_interface.a:</span><span class="dt">    </span><span class="ch">$(</span><span class="dt">OFILES</span><span class="ch">)</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">AR</span><span class="ch">)</span> -r libcdda_interface.a <span class="ch">$(</span><span class="dt">OFILES</span><span class="ch">)</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">RANLIB</span><span class="ch">)</span> libcdda_interface.a</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="dv">libcdda_interface.so:</span><span class="dt">   </span><span class="ch">$(</span><span class="dt">OFILES</span><span class="ch">)</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> -fpic -shared -o libcdda_interface.so.0.<span class="ch">$(</span><span class="dt">VERSION</span><span class="ch">)</span> -Wl,-soname -Wl,libcdda_interface.so.0 <span class="ch">$(</span><span class="dt">OFILES</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LIBS</span><span class="ch">)</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a><span class="ot">.c.o:</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>        <span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> -c <span class="ch">$&lt;</span></span></code></pre></div>
<p>Note that <strong>$(OFILES)</strong>
are shared across <strong>libcdda_interface.a</strong> and <strong>libcdda_interface.so</strong>.
Nothing prevented both to run on parallel.</p>
<p>Nowadays those have slightly different names (or paths) to allow for
parallel build. Reusing file names in different parts of a single build
is very tricky.</p>
<h1 id="is-12-failures-a-lot">Is 12 failures a lot?</h1>
<p>Getting 12 failures for my local system was a bit worrying: most of the
failures happened in somewhat niche but not that rare packages. What if
we try to build really obscure ones?</p>
<p>I attempted to build a few random packages from the whole of <strong>nixpkgs</strong> as:</p>
<pre class><code>$ nix-env -qaP | awk '{print $1}' | sed -e 's/^nixos.//g' | shuf | xargs -n 10 nix build -f. --no-link</code></pre>
<p>Over one night 20 more failures popped up in over ~5000 built packages:</p>
<ul>
<li>pth</li>
<li>openjdk</li>
<li>libb64</li>
<li>m17n_lib</li>
<li>xalanc</li>
<li>ion3</li>
<li>espeak-ng</li>
<li>dhcp</li>
<li>judy</li>
<li>ocaml-ng.ocamlPackages_4_12.stdcompat</li>
<li>mlton20130715, mltonHEAD</li>
<li>mlkit</li>
<li>clisp</li>
<li>cloog</li>
<li>xfce.garcon</li>
<li>munin</li>
<li>jade</li>
<li>ocamlPackages.camlidl</li>
<li>lazarus-qt</li>
<li>ocamlPackages_4_03.camlp4</li>
<li>gengetopt</li>
</ul>
<p>I think we are heading towards ~200 failures over all of <strong>nixpkgs</strong>.</p>
<p>~200 a lot more than I personally could triage and fix myself but is
very reasonable to offload to individual maintainers or enthusiasts
who would like to get their feet wet by fixing a simple package build
failure problem.</p>
<h1 id="bonus-question">Bonus question</h1>
<p>So these are examples of failures when sequential build normally
succeeds due to deterministic rule execution order.</p>
<p>Do you think there could be a bug when parallel build almost always
succeeds while sequential would always fail?</p>
<p>I encountered it once in my life: <a href="https://bugs.gentoo.org/566620">https://bugs.gentoo.org/566620</a>. By
There missing dependency was alwasy satisfied by a builder from other
rules runnig in parallel.</p>
<p>The fix adds missing dependency (as expected):
<a href="https://github.com/skvadrik/re2c/commit/88a7cec2e644c6d890f68133ed8fd6362e5beeab">https://github.com/skvadrik/re2c/commit/88a7cec2e644c6d890f68133ed8fd6362e5beeab</a></p>
<h1 id="parting-words">Parting words</h1>
<p>To state the obvious: building packages in parallell speeds builds up. Sometimes by a lot.</p>
<p>Vast majority of packages do support parallel builds. Probably not a surprise to anyone.
I think we can flip a default on in <strong>nixpkgs</strong> and sort out the fallout.</p>
<p>Recursive calls to <strong>$(MAKE)</strong> work as is only if you build non-overlapping targets (say,
disjoint selfcontained subdirectories). They blow up when you try to do clever things like
slignt environment change to rebuild the same target and reuse intermediate file names or
have cross-directory dependencies.</p>
<p>There is a list of yet unfixed packages at <a href="https://github.com/NixOS/nixpkgs/issues/142338">https://github.com/NixOS/nixpkgs/issues/142338</a>.
Feel free to grab one and give it a try.</p>
<p>Have fun!</p>

<div class="info">
    Posted on October 28, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>A month on NixOS</title>
    <link href="http://trofi.github.io/posts/229-a-month-on-nixos.html" />
    <id>http://trofi.github.io/posts/229-a-month-on-nixos.html</id>
    <published>2021-10-11T00:00:00Z</published>
    <updated>2021-10-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: A month on NixOS</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>A month on NixOS</h1>

            <p>About a month ago I decided to give NixOS a try on my main desktop. I was
slightly worried I could not use it due to lack of software I usually use.
Thus I installed it into a btrfs subvolume along with existing system.</p>
<h1 id="installation">Installation</h1>
<p>The installation process is very lightweight if you already have <strong>nix</strong>
package manager in some form. Otheriwse you can boot from from KDE-based ISO
image. Here my full installation procedure log:</p>
<pre class><code># btrfs su cr /nixos
# nixos-generate-config --root /nixos
# $EDITOR /nixos/etc/nixos/configuration.nix
# nixos-install --root /nixos</code></pre>
<p>The only thing I added to <strong>configuration.nix</strong> was a new root:</p>
<pre class><code>fileSystems.&quot;/&quot; = {
  device = &quot;/dev/disk/by-uuid/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa&quot;;
  fsType = &quot;btrfs&quot;;
  options = [ &quot;subvol=nixos&quot; &quot;noatime&quot; &quot;compress=zstd&quot; ];
};</code></pre>
<p>That was surprisingly smooth.</p>
<p>Once I got something that boots tweaking system was also straightforward:</p>
<pre class><code># from configuration.nix
..
services.openssh.enable = true;
services.unbound.enable = true;
#
zramSwap.enable = true;
zramSwap.memoryPercent = 150;</code></pre>
<p>Here I flipped on <strong>openssh</strong>, <strong>unbound</strong> and <strong>zram</strong>. Those flags
control what contents generated files will have in <span class="title-ref">/etc</span>. It’s a tiny
layer of indirection.</p>
<p>Of already available packages I lacked only <strong>xmms2</strong> which was
trivial to package.</p>
<h1 id="exotic-platforms">Exotic platforms</h1>
<p>How about getting binaries for other targets?</p>
<p><strong>nixpkgs</strong> package repository makes it trivial to add new platform
support as a cross-compilation target.</p>
<p>For example it takes 5 simple lines of “code” to add <strong>s390x</strong> support:
<a href="https://github.com/NixOS/nixpkgs/commit/34e468dc4268cee86aa019ae9bc52768e60fb5f7">https://github.com/NixOS/nixpkgs/commit/34e468dc4268cee86aa019ae9bc52768e60fb5f7</a>.
It’s somewhat a cheat as <strong>s390</strong> was already there. But it does not
get much worse for a brand new linux target.</p>
<p>Testing it on <strong>x86_64</strong> host is trivial by overriding <strong>crossSystem</strong>
parameter:</p>
<pre class><code>$ nix-build --arg crossSystem '{ config = &quot;s390x-unknown-linux-gnu&quot;; }' -A re2c
$ file ./result/bin/re2c
$ ./result/bin/re2c: ELF 64-bit MSB executable, IBM S/390, version 1 (SYSV),
dynamically linked, interpreter ...-gnu-2.33-50/lib/ld64.so.1, for GNU/Linux 2.6.32, not stripped
$ qemu-s390x ./result/bin/re2c --version
re2c 2.2</code></pre>
<h1 id="the-joy-of-hacking">The joy of hacking</h1>
<p>The above <strong>re2c</strong> example did not require privileged user operations on
any step. It it true for almost any build operation.</p>
<p>Unprivileged “installs” make <strong>nix</strong> and <strong>NixOS</strong> a great interactive
environment for hacking on system itself and on upstream packages without
fear of damage to the main system.</p>
<p>For example <strong>NixOS</strong> still uses <strong>gcc-10</strong> by default. How hard would
it be to switch over to <strong>gcc-11</strong> and attempt to build my whole system
against it? It takes 3 commands to try (all unprivileed as well):</p>
<pre class><code>$ git clone https://github.com/NixOS/nixpkgs.git
$ cd nixpkgs
$ $EDITOR pkgs/top-level/all-packages.nix
$ nix build -f nixos system</code></pre>
<p>Here is the full one-liner change I applied to <strong>pkgs/top-level/all-packages.nix</strong>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/top-level/all-packages.nix</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/top-level/all-packages.nix</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -11225,7 +11225,7 @@ with pkgs;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>         if (with stdenv.targetPlatform; isVc4 || libc == &quot;relibc&quot;) then 6</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>         else if (stdenv.targetPlatform.isAarch64 &amp;&amp; stdenv.isDarwin) then 11</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>         else if stdenv.targetPlatform.isAarch64 then 9</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="st">-        else 10;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+        else 11;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>       numS = toString num;</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>     in {</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>       gcc = pkgs.${&quot;gcc${numS}&quot;};</span></code></pre></div>
<p>There are more elaborate and maintainable ways to achieve the similar effect.
But that’s the gist of configurability.</p>
<p>Rebuilding system instantly shown up quite a few yet unfixed packages. Typical
two liner fix looks like that:
<a href="https://github.com/NixOS/nixpkgs/commit/646e7aa079fbe894e49efb6aa3a4fe3585bf8163">https://github.com/NixOS/nixpkgs/commit/646e7aa079fbe894e49efb6aa3a4fe3585bf8163</a></p>
<h1 id="binary-substitutions">Binary substitutions</h1>
<p>As a general rule any minor change in package definition triggers rebuild of the
package and all it’s reverse dependencies. This usually menas you need to rebuild
A Lot if you change frequently used package and plan to rebuild it’s reverse
dependencies.</p>
<p>To avoid local rebuilds <strong>NixOS</strong> runs a CI system called Hydra. Hydra
continuously attempts to build every package definition on
<strong>x86_64-linux</strong> and a few other targets:
<a href="https://hydra.nixos.org/jobset/nixpkgs/trunk">https://hydra.nixos.org/jobset/nixpkgs/trunk</a></p>
<p>Build failures are a great source for low hanging fruit to fix for newcomers.
Most failures have one last successful and first failed commit against <strong>nixpkgs</strong>
repository. This makes bisection trivial and fun to get the idea what change
caused breakage:
<a href="http://trofi.github.io/posts/228-bisects-all-the-way-down.html">http://trofi.github.io/posts/228-bisects-all-the-way-down.html</a></p>
<p>As a general rule most packages run some test suite after the build (and
even install!). Those also tend to flag regressions or even old bugs. Recent
example is a <a href="https://github.com/Changaco/python-libarchive-c/pull/116">https://github.com/Changaco/python-libarchive-c/pull/116</a> where
python object was garbage collected before it was accessed from C code where
it was registered before.</p>
<h1 id="nix-repl">nix repl</h1>
<p><strong>nixpks</strong> is a huge package library. To navigate through it there are a few
tools like <strong>nix search</strong> or even <strong>git grep</strong>.</p>
<p>I personally use <strong>nix repl</strong> to poke at package definitions as is and fetch,
build or edit anything related to them. TAB completion is just great. Here is
my typical session:</p>
<pre class><code>$ nix repl '&lt;nixpkgs&gt;' # or &quot;nix repl .&quot;
nix-repl&gt; python3Packages.libarchive-c.src.urls
[ &quot;https://github.com/Changaco/python-libarchive-c/archive/3.1.tar.gz&quot; ]

nix-repl&gt; :p python3Packages.libarchive-c.meta
{ ... description = &quot;Python interface to libarchive&quot;; homepage = &quot;https://github.com/Changaco/python-libarchive-c&quot;; license = { ... shortName = &quot;cc0&quot;; ...

nix-repl&gt; python3Packages.libarchive-c.meta.homepage
&quot;https://github.com/Changaco/python-libarchive-c&quot;

nix-repl&gt; :b python3Packages.libarchive-c
this derivation produced the following outputs:
  out -&gt; /nix/store/w0sibclvsx4jjp85nnrxy66jzm1yfxgk-python3.9-libarchive-c-3.1</code></pre>
<p>We looked at package metadata and built it. The output ended up in “/nix/store/…”.
<strong>:e</strong> command would allow editing it.</p>
<p>Another example is poking at build toolchain details for a given package:</p>
<pre class><code>nix-repl&gt; re2c.stdenv.cc
«derivation /nix/store/fs3448rnjfypqz20wxxjv766zfjz53a0-gcc-wrapper-10.3.0.drv»
# looks like gcc-10!

nix-repl&gt; (re2c.override { stdenv = gcc11Stdenv; }).stdenv.cc
«derivation /nix/store/ni2cpxgyyhh9pmzysgjb53afxv5q3kjq-gcc-wrapper-11.1.0.drv»
# now it's gcc-11!

nix-repl&gt; :b re2c
  out -&gt; /nix/store/fmf0hd26h8cssbvy848aswqdrspnnbr3-re2c-2.2
nix-repl&gt; :b re2c.override { stdenv = gcc11Stdenv; }
  out -&gt; /nix/store/sdcf0q26x2xa8x49010prk985zay542n-re2c-2.2

nix-repl&gt; re2c.&lt;TAB&gt;
re2c.__ignoreNulls                re2c.nativeBuildInputs
re2c.all                          re2c.out
re2c.args                         re2c.outPath
re2c.buildInputs                  re2c.outputName
re2c.builder                      re2c.outputUnspecified
re2c.configureFlags               re2c.outputs
re2c.depsBuildBuild               re2c.override
re2c.depsBuildBuildPropagated     re2c.overrideAttrs
re2c.depsBuildTarget              re2c.overrideDerivation
re2c.depsBuildTargetPropagated    re2c.passthru
re2c.depsHostHost                 re2c.patches
re2c.depsHostHostPropagated       re2c.pname
re2c.depsTargetTarget             re2c.preCheck
re2c.depsTargetTargetPropagated   re2c.propagatedBuildInputs
re2c.doCheck                      re2c.propagatedNativeBuildInputs
re2c.doInstallCheck               re2c.src
re2c.drvAttrs                     re2c.stdenv
re2c.drvPath                      re2c.strictDeps
re2c.enableParallelBuilding       re2c.system
re2c.enableParallelChecking       re2c.type
re2c.inputDerivation              re2c.userHook
re2c.meta                         re2c.version
re2c.name</code></pre>
<p>Now we have a package built with two toolchain versions and can do various
side-by-side comparisons. I usually use something similar when track down
regressions. Recent example is broken <strong>firefox</strong> when built with <strong>gcc-12</strong>.</p>
<p>Or you could have a look at a difference between two builds:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>$ diffoscope /nix/store/fmf0hd26h8cssbvy848aswqdrspnnbr3-re2c-2.2 /nix/store/sdcf0q26x2xa8x49010prk985zay542n-re2c-2.2</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>readelf --wide --sections {}</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,39 +1,39 @@</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  -Symbol table '.dynsym' contains 98 entries:</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  +Symbol table '.dynsym' contains 99 entries:</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  -    37: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strftime@GLIBC_2.2.5 (4)</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>  +    37: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND _ZSt28__throw_bad_array_new_lengthv@GLIBCXX_3.4.29 (8)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  +    38: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND strftime@GLIBC_2.2.5 (4)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>  ...</span></code></pre></div>
<p>Or you could build and run <strong>php</strong> or <strong>cmake</strong> against this version of <strong>re2c</strong>.</p>
<h1 id="general-impression">General impression</h1>
<p>I think <strong>NixOS</strong> is very much usable as a desktop system. I’ll try it
for a little while longer to see how it goes.</p>
<p>I would say <strong>NixOS</strong> requires basic understanding of <strong>nix</strong> expression
language to effectively debug and explore less documented parts of the
system. <strong>nix</strong> as a tool has it’s warts on UI side. But they are not serious.</p>
<p>Otherwise it’s a nice system that provides large set of packages software
and allows for very easy plugging of local overrides of existing packages
or adding own packages not present in main repository.</p>
<p>There are various user-maintained overlays and repositories I did not yet
have a chance to look at. Focus on reproducible builds makes it trivial to
verify locally that fetched build matches locally built one bit for bit
(and when it does not <strong>diffoscope</strong> can point at exact diff).</p>
<p>Large binary cache makes is trivial trying out various packages with huge
dependency trees even as one-off run.</p>
<p>Autogenerated <strong>/etc/</strong> is very lean and never contains leftover configs
from a service you have uninstalled 5 years ago. It’s a nice feeling.</p>
<p>Precise dependencies and immutable store allow for high parallelism of
package installs (or rebuilds). Final build result is more likely be the
same on various systems.</p>
<p>Immutable style of the store makes package “deletion” instant and garbage
collection very fast. Certainly way faster than typical package uninstall
times in Debian or Gentoo.</p>
<p>Functional-style dependency declaration effectively does not require any
dependency conflict or upgrade resolution complexity. You just install a
version of a package without touching existing one. Activation of the newly built
system is a single symlink switch:</p>
<pre class><code>$ ls -ld /run/current-system
lrwxrwxrwx 1 root root 81 окт  9 21:22 /run/current-system -&gt; /nix/store/js6s88x1gfsnf1ggh690chfmbibdpbvk-nixos-system-nz-21.11.git.4793d22a4c7</code></pre>
<p>Same for the whole system rollback.</p>
<p>It is trivial to mix multiple versions of the package or flavours of the
package with different dimensions in the same system: optimization flags,
target system settings (cross-compilation), libc swapping, older version
of <strong>nixpkgs</strong> repository and many more.</p>
<p>Have fun!</p>

<div class="info">
    Posted on October 11, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Bisects all the way down</title>
    <link href="http://trofi.github.io/posts/228-bisects-all-the-way-down.html" />
    <id>http://trofi.github.io/posts/228-bisects-all-the-way-down.html</id>
    <published>2021-09-01T00:00:00Z</published>
    <updated>2021-09-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Bisects all the way down</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Bisects all the way down</h1>

            <p>Bisect is a great tool to nail down regression in a project like
<strong>linux</strong> where you usually have no slightest idea what broke
your
<a href="https://fa.linux.kernel.narkive.com/hk0pvpD8/bisected-regression-v3-6-rc1-resume-from-s2ram-does-not-restore-ata-piix-v3-5-worked">suspend</a>,
<a href="https://www.spinics.net/lists/kernel/msg3840785.html">boot</a>,
<a href="https://linux-kernel.vger.kernel.narkive.com/epI9yBFu/bisected-i915-linux-2-6-32-rc3-regression">video</a>,
<a href="https://lore.kernel.org/lkml/YKUjvoaKKggAmpIR@sf/">more video</a>,
<a href="http://yhbt.net/lore/all/20091225162528.5dbbbea0@mosly/">audio</a>,
<a href="https://gitlab.freedesktop.org/pulseaudio/pulseaudio/-/issues/164">tcp</a>,
<a href="https://linux-kernel.vger.kernel.narkive.com/v3qKMlzd/oops-2-6-31-rc1-tun">tun</a>,
<a href="https://www.spinics.net/lists/kernel/msg3840823.html">toaster</a>
and whatnot.</p>
<p>Example of other complex projects are <strong>firefox</strong>, <strong>gcc</strong>, <strong>glibc</strong>
and … complete linux distributions!</p>
<p>Rolling release linux distributions tend to have frequent incremental
updates where each update produces mostly working system. And when
update breaks roll back is cheap and feedback loop to upstream is fast.</p>
<p>The key for rolling release system to work is to be able to narrow down
quickly on faulty component to be able to isolate it.</p>
<p>A typical example of distribution regression would be Firefox failure to
render fonts correctly. What package update caused the regression?
Sometimes we might guess easily if font-related package updated recently
and we might try rolling it back to verify.</p>
<p>But sometimes it’s a compiler or even build environment bug (like bash
<a href="https://gcc.gnu.org/PR88936">miscompilation</a> caused by a gcc bug).
In that case it will take a while until we get to the culprit. Or it
might be a <strong>glibc</strong> regression which is not trivial to rollback at all.</p>
<p>Wouldn’t it be nice to mechanically bisect package repository the same
way we do projects like linux?</p>
<p>Today’s real world example is <a href="https://github.com/NixOS/nixpkgs">nixpkgs</a>
repository. <strong>nixpkgs</strong> is a package tree available via <strong>nix</strong> tool.</p>
<p>One of <strong>nix</strong>’s fancy features is the ability to install packages (and
it’s dependencies) as an unprivileged user. Or even fetch the package
into local cache for one-off use without installing it. Another feature
is precise hermetic dependencies tracking.</p>
<p>Example one-off package usage session:</p>
<pre class><code># existing systemwide package (installed outside nixpkgs)
$ re2c -v
re2c 2.2

# fetching version from nixpkgs:
$ nix-shell -p re2c
[nix-shell:~]$ re2c -v
re2c 2.1.1</code></pre>
<p><strong>nixpkgs</strong> repository has a few branches of different stabilities.
Most frequently encountered are:</p>
<ul>
<li><strong>staging</strong>: things are truly bleeding edge there, no binary cache,
very fresh versions</li>
<li><strong>staging-next</strong>: things are being stabilized here to build and pass
tests before merge to <strong>master</strong></li>
<li><strong>master</strong>: things mostly build there and have binary cache of most
packages</li>
</ul>
<p>More branching details are at <a href="https://github.com/NixOS/rfcs/blob/master/rfcs/0026-staging-workflow.md">https://github.com/NixOS/rfcs/blob/master/rfcs/0026-staging-workflow.md</a>.</p>
<p>I was foolish enough to try building <strong>ccache</strong> out of <strong>staging</strong>
branch (I planned to update it’s version there):</p>
<pre class><code># fetch repository:
$ cd /tmp
$ git clone https://github.com/NixOS/nixpkgs.git
$ cd nixpkgs
$ git checkout staging

# build ccache:
$ nix-build -A ccache
... &lt;a few minutes later&gt;
make[1]: *** [Makefile:998: fig2dev/Makefile] Error 1
make[1]: Leaving directory '/build/transfig.3.2.4'
make: [Makefile:1006: Makefiles] Error 2 (ignored)
make includes
including in ./fig2dev...
make[1]: Entering directory '/build/transfig.3.2.4/fig2dev'
make[1]: *** No rule to make target 'includes'.  Stop.
make[1]: Leaving directory '/build/transfig.3.2.4/fig2dev'
make: *** [Makefile:1064: includes] Error 2
error: builder for '/nix/store/149n49648mzf1c9g199jhq9qi6x35c9v-transfig-3.2.4.drv' failed with exit code 2;</code></pre>
<p>Here we fetched git repository of the whole <strong>nixpkgs</strong> repo and tried
to build <strong>ccache</strong> along with all it’s dependencies. One of them
(<strong>transfig</strong>) failed to build.</p>
<p><strong>transfig</strong> happens to use <strong>imake</strong> build system. I knew nothing
about it and had no idea how to debug it. I looked at the generated
<strong>Makefile</strong>s and still had no idea why (or if) things are wrong there.</p>
<p>Having failed at understanding the failure mode I checked if <strong>master</strong>
branch was able to build <strong>transfig</strong> (it’s normally expected to):</p>
<pre class><code>$ git checkout master

$ nix-build -A transfig
/nix/store/pfzhccslyzgl0wl127yahrk902gj54xs-transfig-3.2.4

$ nix-build -A transfig --check
... &lt;build log&gt;
/nix/store/pfzhccslyzgl0wl127yahrk902gj54xs-transfig-3.2.4</code></pre>
<p>Built fine. <strong>--check</strong> forces local rebuild instead of using binary
available in cache. I used it to get a build log from successful package
and to make sure I don’t have something else horribly broken in my
build environment.</p>
<p>Now I could bisect against <strong>master</strong> and <strong>staging</strong> states:</p>
<pre class><code>$ git bisect start staging master
$ git bisect run nix-build -A transfig
... &lt; a few minutes later&gt;
commit 8675ca0e947f7e847d82828e6bfd4d08822c489c
Date:   Wed Aug 4 08:29:53 2021 +0000

  xorg.xorgcffiles: 1.0.6 -&gt; 1.0.7

  https://lists.x.org/archives/xorg-announce/2021-August/003105.html</code></pre>
<p>Just two shell commands and wer are there! The commit looks vaguely
related to <strong>imake</strong>. Reverting:</p>
<pre class><code>$ git bisect reset
$ git checkout staging
$ git revert 8675ca0e947f7e847d82828e6bfd4d08822c489c # minor conflict fix
$ nix-build -A transfig
...
/nix/store/7z7q1a9176cy0adcs98l4dc8rh9ks4ki-transfig-3.2.4</code></pre>
<p>Revert worked. I looked at the difference between <strong>1.0.6</strong> and
<strong>1.0.7</strong> sources and found nothing obviously broken. I still had no
idea what I was looking at.</p>
<p>We can bisect <strong>xorg-cf-files</strong> project as well. For that we can repoint our
<strong>xorg.xorgcffiles</strong> package to local checkout we could modify:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/servers/x11/xorg/overrides.nix</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/servers/x11/xorg/overrides.nix</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -841,6 +841,7 @@ self: super:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>   });</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>   xorgcffiles = super.xorgcffiles.overrideAttrs (attrs: {</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">+    src = /tmp/cf; # added line</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>     postInstall = lib.optionalString stdenv.isDarwin ''</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>       substituteInPlace $out/lib/X11/config/darwin.cf --replace &quot;/usr/bin/&quot; &quot;&quot;</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>     '';</span></code></pre></div>
<p>Let’s prepare source tree in <strong>/tmp/cf</strong> as if it was just from tarball:</p>
<pre class><code>$ cd /tmp
$ git clone https://gitlab.freedesktop.org/xorg/util/cf.git
$ cd cf
$ ./autogen.sh</code></pre>
<p>Now we can build <strong>transfig</strong> against local checkout:</p>
<pre class><code>$ nix-build /tmp/nixpkgs -A transfig
... a few seconds later
make: *** No rule to make target 'install'.  Stop.</code></pre>
<p>Same problem.</p>
<p><strong>nix</strong> will rebuild <strong>xorg-cf-files</strong> from local checkout and then will
rebuild all dependencies that need to change automatically. No need to
manually calculate the effect of the update. Sometimes it means a lot of
rebuilds (say, if you bisect <strong>gcc</strong>). But in our case <strong>xorg-cf-files</strong>
dependencies are just <strong>imake</strong> and <strong>transfig</strong>:</p>
<pre class><code>$ nix why-depends -f . --derivation transfig xorg.xorgcffiles
/nix/store/...-transfig-3.2.4.drv
    → /nix/store/...-imake-1.0.8.drv
        → /nix/store/...-xorg-cf-files-1.0.7.drv</code></pre>
<p>Both are tiny packages. Bisecting:</p>
<pre class><code>$ git bisect start xorg-cf-files-1.0.7 xorg-cf-files-1.0.6
$ git bisect run nix-build /tmp/nixpkgs -A transfig
... a second later
commit d47131ed97ee491bb883c29ec0b106e8d5acfcd3
Date:   Thu Jul 5 10:42:09 2018 -0400

    linux: Update LinuxDistribution == LinuxRedHat section</code></pre>
<p>That was simpler than I thought! But still very confusing :) The
<a href="https://gitlab.freedesktop.org/xorg/util/cf/-/commit/d47131ed97ee491bb883c29ec0b106e8d5acfcd3">upstream commit</a>
is literally a few defines under seemingly unrelated <strong>#if</strong>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/linux.cf</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/linux.cf</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -190,7 +190,13 @@ InstallNamedTargetNoClobber(install,file.ad,$(INSTAPPFLAGS),$(XAPPLOADDIR),class</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> #endif /* LinuxDebian */</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a> #if LinuxDistribution == LinuxRedHat</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="st">-#define FSUseSyslog		YES</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="va">+# define FSUseSyslog		YES</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="va">+# define BuildRman		NO</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="va">+# define BuildHtmlManPages	NO</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="va">+# define ProjectRoot		/usr</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a><span class="va">+# define ManPath		/usr/share/man</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="va">+# define XAppLoadDir		/usr/share/X11/app-defaults</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="va">+# define ConfigDir		/usr/share/X11/config</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a> #ifndef HasDevRandom</span></code></pre></div>
<p><strong>nix</strong> does not use <strong>/usr</strong> host OS hierarchy (in my case host OS is
Gentoo) and always uses <strong>/nix/store</strong> path instead. Thus I would expect
<strong>LinuxDistribution</strong> to be something different from <strong>LinuxRedHat</strong>
(unless it’s a way for <strong>cf</strong> to say “any linux”).</p>
<p>Let’s check how <strong>LinuxDistribution</strong> gets defined. It’s hidden in
<strong>imake</strong> itself. We can extract unpatched and patched <strong>imake</strong>
right from <strong>nixpkgs</strong>:</p>
<pre class><code>$ cd /tmp/nixpkgs
$ nix-shell -A xorg.imake

# unpack vanilla source:
$$ unpackPhase
  unpacking source archive /nix/store/dfjcsfxf15zxrbcw62ml1zbczm8zf7d0-imake-1.0.8.tar.bz2
  source root is imake-1.0.8
  setting SOURCE_DATE_EPOCH to timestamp 1552778797 of file imake-1.0.8/INSTALL

# apply nixkpgs-specific patches:
$$ cd imake-1.0.8
$$ patchPhase
  applying patch /nix/store/9hl5c2sg2n6yfia0hy06wdf7yiry4arq-imake.patch
  patching file imake.c
  applying patch /nix/store/kmhjr434iv05bgazd5xbzwygn59pl9k0-imake-cc-wrapper-uberhack.patch
  patching file imake.c</code></pre>
<p>Here is the unpatched bit of <strong>LinuxRedHat</strong> definition from <a href="https://gitlab.freedesktop.org/xorg/util/imake/-/blob/master/imake.c#L1046">https://gitlab.freedesktop.org/xorg/util/imake/-/blob/master/imake.c#L1046</a>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined CROSSCOMPILE || defined linux || defined(__GLIBC__)</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>get_distrib<span class="op">(</span><span class="dt">FILE</span> <span class="op">*</span>inFile<span class="op">)</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> stat sb<span class="op">;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">static</span> <span class="dt">const</span> <span class="dt">char</span><span class="op">*</span>   suse <span class="op">=</span> <span class="st">&quot;/etc/SuSE-release&quot;</span><span class="op">;</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">static</span> <span class="dt">const</span> <span class="dt">char</span><span class="op">*</span> redhat <span class="op">=</span> <span class="st">&quot;/etc/redhat-release&quot;</span><span class="op">;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  <span class="dt">static</span> <span class="dt">const</span> <span class="dt">char</span><span class="op">*</span> debian <span class="op">=</span> <span class="st">&quot;/etc/debian_version&quot;</span><span class="op">;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxUnknown    0&quot;</span><span class="op">);</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxSuSE       1&quot;</span><span class="op">);</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxCaldera    2&quot;</span><span class="op">);</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxCraftworks 3&quot;</span><span class="op">);</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxDebian     4&quot;</span><span class="op">);</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxInfoMagic  5&quot;</span><span class="op">);</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxKheops     6&quot;</span><span class="op">);</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxPro        7&quot;</span><span class="op">);</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxRedHat     8&quot;</span><span class="op">);</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxSlackware  9&quot;</span><span class="op">);</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxTurbo      10&quot;</span><span class="op">);</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxWare       11&quot;</span><span class="op">);</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define LinuxYggdrasil  12&quot;</span><span class="op">);</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="pp"># ifdef CROSSCOMPILE</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>CrossCompiling<span class="op">)</span> <span class="op">{</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>      fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>           <span class="st">&quot;#define DefaultLinuxDistribution LinuxUnknown&quot;</span><span class="op">);</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>      fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistName Unknown&quot;</span><span class="op">);</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span><span class="op">;</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="pp"># endif</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>lstat <span class="op">(</span>suse<span class="op">,</span> <span class="op">&amp;</span>sb<span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistribution LinuxSuSE&quot;</span><span class="op">);</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistName SuSE&quot;</span><span class="op">);</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span><span class="op">;</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>lstat <span class="op">(</span>redhat<span class="op">,</span> <span class="op">&amp;</span>sb<span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistribution LinuxRedHat&quot;</span><span class="op">);</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistName RedHat&quot;</span><span class="op">);</span></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span><span class="op">;</span></span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>lstat <span class="op">(</span>debian<span class="op">,</span> <span class="op">&amp;</span>sb<span class="op">)</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistribution LinuxDebian&quot;</span><span class="op">);</span></span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistName Debian&quot;</span><span class="op">);</span></span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* You could also try to get the version of the Debian distrib by looking</span></span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a><span class="co">     * at the content of /etc/debian_version */</span></span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span><span class="op">;</span></span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* what's the definitive way to tell what any particular distribution is? */</span></span>
<span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-52"><a href="#cb13-52" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistribution LinuxUnknown&quot;</span><span class="op">);</span></span>
<span id="cb13-53"><a href="#cb13-53" aria-hidden="true" tabindex="-1"></a>  fprintf <span class="op">(</span>inFile<span class="op">,</span> <span class="st">&quot;%s</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="st">&quot;#define DefaultLinuxDistName Unknown&quot;</span><span class="op">);</span></span>
<span id="cb13-54"><a href="#cb13-54" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* would like to know what version of the distribution it is */</span></span>
<span id="cb13-55"><a href="#cb13-55" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Distribution flavour is defined by presence of <strong>/etc/redhat-release</strong>
file on disk. But I dont have it! I should have gotten <strong>LinuxUnknown</strong>.</p>
<p>The culprit is in that suspicious <strong>/nix/store/9hl5c2sg2n6yfia0hy06wdf7yiry4arq-imake.patch</strong>
patch we see in <strong>patchPhase</strong> log. It turns the code above to the
following:</p>
<pre class><code>#if defined CROSSCOMPILE || defined linux || defined(__GLIBC__)
static void
get_distrib(FILE *inFile)
{
#if 0
  struct stat sb;

  static const char*   suse = &quot;/etc/SuSE-release&quot;;
  static const char* redhat = &quot;/etc/redhat-release&quot;;
  static const char* debian = &quot;/etc/debian_version&quot;;

  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxUnknown    0&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxSuSE       1&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxCaldera    2&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxCraftworks 3&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxDebian     4&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxInfoMagic  5&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxKheops     6&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxPro        7&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxRedHat     8&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxSlackware  9&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxTurbo      10&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxWare       11&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxYggdrasil  12&quot;);

# ifdef CROSSCOMPILE
  if (CrossCompiling) {
      fprintf (inFile, &quot;%s\n&quot;,
               &quot;#define DefaultLinuxDistribution LinuxUnknown&quot;);
      fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName Unknown&quot;);
      return;
  }
# endif
  if (lstat (suse, &amp;sb) == 0) {
    fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxSuSE&quot;);
    fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName SuSE&quot;);
    return;
  }
  if (lstat (redhat, &amp;sb) == 0) {
    fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxRedHat&quot;);
    fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName RedHat&quot;);
    return;
  }
  if (lstat (debian, &amp;sb) == 0) {
    fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxDebian&quot;);
    fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName Debian&quot;);
    /* You could also try to get the version of the Debian distrib by looking
     * at the content of /etc/debian_version */
    return;
  }
#endif
  /* what's the definitive way to tell what any particular distribution is? */

  fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxUnknown&quot;);
  fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName Unknown&quot;);
  /* would like to know what version of the distribution it is */
}</code></pre>
<p>Note now <strong>#if 0</strong> removes not just <strong>#define DefaultLinuxDistName LinuxRedHat</strong>
but also <strong>#define LinuxUnknown 0</strong> and <strong>#define LinuxRedHat 8</strong>.</p>
<p>Or in diff form imake’s output change is:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,3 +1 @@</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="st">-#define LinuxUnknown    0</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="st">-#define LinuxRedHat     8</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a> #define DefaultLinuxDistName Unknown</span></code></pre></div>
<p>Is it a big deal? How does it change
<strong>#if LinuxDistribution == LinuxRedHat</strong> condition? Let’s try two
following examples:</p>
<pre class><code>$ printf &quot;#define a 1\n#define b 2\n#if a == b\n    EQUAL\n#else\n    DIFFERENT\n#endif\n&quot;
#define a 1
#define b 2
#if a == b
    EQUAL
#else
    DIFFERENT

$ printf &quot;#if a == b\n    EQUAL\n#else\n    DIFFERENT\n#endif\n&quot;
#if a == b
    EQUAL
#else
    DIFFERENT</code></pre>
<p>Running the preprocessor:</p>
<pre class><code>$ printf &quot;#define a 1\n#define b 2\n#if a == b\n    EQUAL\n#else\n    DIFFERENT\n#endif\n&quot; | gcc -E -
    DIFFERENT

$ printf &quot;#if a == b\n    EQUAL\n#else\n    DIFFERENT\n#endif\n&quot; | gcc -E -
    EQUAL</code></pre>
<p>According to great <strong>imake</strong> intro at <a href="http://www.snake.net/software/imake-stuff/config-X11R4.pdf">http://www.snake.net/software/imake-stuff/config-X11R4.pdf</a>
it’s one of the common <strong>imake</strong> pitfalls: in integer evaluation
contexts unknown symbols get turned onto zeros.</p>
<pre class><code>$ printf &quot;#if undef == 0\n    ZERO\n#endif\n&quot;
#if undef == 0
    ZERO
#endif
$ printf &quot;#if undef == 0\n    ZERO\n#endif\n&quot; | gcc -E -
    ZERO</code></pre>
<p>Thus the fix is trivial: don’t omit any enum definition
as other packages using <strong>imake</strong> actually rely on them being present.
Possible fix:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/imake.c</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/imake.c</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -998,121 +998,121 @@ get_libc_version(FILE *inFile)</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a> #if defined CROSSCOMPILE || defined linux || defined(__GLIBC__)</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a> static void</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a> get_distrib(FILE *inFile)</span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="st">-#if 0</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>   struct stat sb;</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>   static const char*   suse = &quot;/etc/SuSE-release&quot;;</span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>   static const char* redhat = &quot;/etc/redhat-release&quot;;</span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>   static const char* debian = &quot;/etc/debian_version&quot;;</span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxUnknown    0&quot;);</span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxSuSE       1&quot;);</span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxCaldera    2&quot;);</span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxCraftworks 3&quot;);</span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxDebian     4&quot;);</span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxInfoMagic  5&quot;);</span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxKheops     6&quot;);</span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxPro        7&quot;);</span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxRedHat     8&quot;);</span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxSlackware  9&quot;);</span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxTurbo      10&quot;);</span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxWare       11&quot;);</span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define LinuxYggdrasil  12&quot;);</span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a><span class="va">+#if 0</span></span>
<span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a> # ifdef CROSSCOMPILE</span>
<span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a>   if (CrossCompiling) {</span>
<span id="cb19-32"><a href="#cb19-32" aria-hidden="true" tabindex="-1"></a>       fprintf (inFile, &quot;%s\n&quot;,</span>
<span id="cb19-33"><a href="#cb19-33" aria-hidden="true" tabindex="-1"></a>               &quot;#define DefaultLinuxDistribution LinuxUnknown&quot;);</span>
<span id="cb19-34"><a href="#cb19-34" aria-hidden="true" tabindex="-1"></a>       fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName Unknown&quot;);</span>
<span id="cb19-35"><a href="#cb19-35" aria-hidden="true" tabindex="-1"></a>       return;</span>
<span id="cb19-36"><a href="#cb19-36" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb19-37"><a href="#cb19-37" aria-hidden="true" tabindex="-1"></a> # endif</span>
<span id="cb19-38"><a href="#cb19-38" aria-hidden="true" tabindex="-1"></a>   if (lstat (suse, &amp;sb) == 0) {</span>
<span id="cb19-39"><a href="#cb19-39" aria-hidden="true" tabindex="-1"></a>     fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxSuSE&quot;);</span>
<span id="cb19-40"><a href="#cb19-40" aria-hidden="true" tabindex="-1"></a>     fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName SuSE&quot;);</span>
<span id="cb19-41"><a href="#cb19-41" aria-hidden="true" tabindex="-1"></a>     return;</span>
<span id="cb19-42"><a href="#cb19-42" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb19-43"><a href="#cb19-43" aria-hidden="true" tabindex="-1"></a>   if (lstat (redhat, &amp;sb) == 0) {</span>
<span id="cb19-44"><a href="#cb19-44" aria-hidden="true" tabindex="-1"></a>     fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxRedHat&quot;);</span>
<span id="cb19-45"><a href="#cb19-45" aria-hidden="true" tabindex="-1"></a>     fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName RedHat&quot;);</span>
<span id="cb19-46"><a href="#cb19-46" aria-hidden="true" tabindex="-1"></a>     return;</span>
<span id="cb19-47"><a href="#cb19-47" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb19-48"><a href="#cb19-48" aria-hidden="true" tabindex="-1"></a>   if (lstat (debian, &amp;sb) == 0) {</span>
<span id="cb19-49"><a href="#cb19-49" aria-hidden="true" tabindex="-1"></a>     fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxDebian&quot;);</span>
<span id="cb19-50"><a href="#cb19-50" aria-hidden="true" tabindex="-1"></a>     fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName Debian&quot;);</span>
<span id="cb19-51"><a href="#cb19-51" aria-hidden="true" tabindex="-1"></a>     /* You could also try to get the version of the Debian distrib by looking</span>
<span id="cb19-52"><a href="#cb19-52" aria-hidden="true" tabindex="-1"></a>      * at the content of /etc/debian_version */</span>
<span id="cb19-53"><a href="#cb19-53" aria-hidden="true" tabindex="-1"></a>     return;</span>
<span id="cb19-54"><a href="#cb19-54" aria-hidden="true" tabindex="-1"></a>   }</span>
<span id="cb19-55"><a href="#cb19-55" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb19-56"><a href="#cb19-56" aria-hidden="true" tabindex="-1"></a>   /* what's the definitive way to tell what any particular distribution is? */</span>
<span id="cb19-57"><a href="#cb19-57" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-58"><a href="#cb19-58" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistribution LinuxUnknown&quot;);</span>
<span id="cb19-59"><a href="#cb19-59" aria-hidden="true" tabindex="-1"></a>   fprintf (inFile, &quot;%s\n&quot;, &quot;#define DefaultLinuxDistName Unknown&quot;);</span>
<span id="cb19-60"><a href="#cb19-60" aria-hidden="true" tabindex="-1"></a>   /* would like to know what version of the distribution it is */</span>
<span id="cb19-61"><a href="#cb19-61" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>We move <strong>#if 0</strong> below to always define <strong>#define LinuxRedHat 8</strong> and friends.</p>
<p>Original <a href="https://github.com/NixOS/nixpkgs/commit/7dba8848ed4bcceb4187a754f221af26f10b2063">imake.patch</a>
was added in 2006. This makes it 15 years old bug.</p>
<p>The fix is pending at <a href="https://github.com/NixOS/nixpkgs/pull/135414">https://github.com/NixOS/nixpkgs/pull/135414</a>
pull request. Fixing <strong>imake</strong> immediately broke <strong>xcruiser</strong>,
<strong>xvkbd</strong> and <strong>xxkb</strong> packages (reviewers++). It was failing for the
lack of path overrides that were now exposed on non-<strong>LinuxRedHat</strong>
systems. We will probably see more subtle breakages. I hope future
breakages will not be as magic as this one.</p>
<p>Now I can test my <strong>ccache</strong> update against <strong>nixpkgs/staging</strong>.</p>
<p><a href="http://www.snake.net/software/imake-stuff/config-X11R4.pdf">Imake doc</a>
shares a few amusing facts and subtle tips on how to workaround certain
C preprocessor behaviours to force it to generate valid makefiles. For
example if you want cpp to print ‘#’ you need to prepend it with … a
C comment!</p>
<pre class><code>$ printf '# Makefile comment\n'
# Makefile comment

$ printf '# Makefile comment\n' | gcc -traditional -E -
&lt;stdin&gt;:1:3: error: invalid preprocessing directive #Makefile

$ printf '/**/# Makefile comment\n' | gcc -traditional -E -
# Makefile comment</code></pre>
<h1 id="parting-words">Parting words</h1>
<p><strong>nixpkgs</strong> makes it trivial to bisect faulty package updates on
a package level as you would normally do it on project level.</p>
<p>I found a few new things along the way:</p>
<ul>
<li><strong>nixs</strong>’s dependency “resolution” is instant. Constructing
dependency graph is so much faster than trying to search a path in
existing graph (like Gentoo’s portage does).</li>
<li><strong>nix-shell</strong> is a nice way to poke at package unpacking,
building and intallation steps.</li>
<li><strong>imake</strong> is both fun and scary way to (ab)use C preprocessor to
generate <strong>Makefile</strong>s.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on September  1, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Having fun with bash completion</title>
    <link href="http://trofi.github.io/posts/227-having-fun-with-bash-completion.html" />
    <id>http://trofi.github.io/posts/227-having-fun-with-bash-completion.html</id>
    <published>2021-08-23T00:00:00Z</published>
    <updated>2021-08-23T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Having fun with bash completion</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Having fun with bash completion</h1>

            <p>I have a hard time navigating through directory structure in some
projects. I usualy know the leaf directory name exactly, but not
the intermediate path.</p>
<p>Some examples are:</p>
<ul>
<li>linux.git: <strong>i915</strong> -&gt; <strong>drivers/gpu/drm/i915</strong></li>
<li>gentoo.git: <strong>xmms2</strong> -&gt; <strong>media-sound/xmms2</strong></li>
<li>nixpkgs.git: <strong>re2c</strong> -&gt; <strong>pkgs/development/tools/parsing/re2c</strong></li>
</ul>
<p>First two I somehow tolerated for a while and was able to get away with
an equivalent of <strong>cd */xmms2</strong>. But for <strong>nixpkgs</strong> became too much to
type.</p>
<p>First, I wrote a one-liner to <strong>cd</strong> right into a subdir if it’s a unique
directory across all subdirectories:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">cdc()</span> <span class="kw">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-d</span> <span class="va">$1</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">fi</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="bu">local</span> <span class="va">candidates</span><span class="op">=</span><span class="va">()</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Be careful to handle directories with whitespace</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co"># and special characters that could break tokenization</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="va">IFS</span><span class="op">=</span> <span class="bu">read</span> <span class="at">-r</span> <span class="at">-d</span> <span class="st">$'</span><span class="dt">\0</span><span class="st">'</span> <span class="va">d</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">[[</span> <span class="va">$d</span> <span class="ot">==</span> <span class="st">'.'</span> <span class="kw">]]</span> <span class="kw">&amp;&amp;</span> <span class="cf">continue</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="va">candidates</span><span class="op">+=</span><span class="va">(</span><span class="st">&quot;</span><span class="va">${d</span><span class="op">#</span>./<span class="va">}</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">done</span> <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="fu">find</span> <span class="at">-path</span> <span class="st">&quot;*/</span><span class="va">$2</span><span class="st">&quot;</span> <span class="at">-type</span> d <span class="at">-print0</span> <span class="dv">2</span><span class="op">&gt;</span>/dev/null<span class="op">)</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">[[</span> <span class="va">${</span><span class="op">#</span><span class="va">candidates</span><span class="op">[@]</span><span class="va">}</span> <span class="ot">-eq</span> 1 <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cd</span> <span class="st">&quot;</span><span class="va">${candidates</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">fi</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="bu">echo</span> <span class="st">&quot;ERROR: cdc: '</span><span class="va">$1</span><span class="st">' is ambiguous (</span><span class="va">${</span><span class="op">#</span><span class="va">candidates</span><span class="op">[@]</span><span class="va">}</span><span class="st">) entries. Can't cd.&quot;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">1</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span></code></pre></div>
<p>Example usage session:</p>
<pre class><code>~ $ cdc re2c
ERROR: cdc: 're2c' is ambiguous (8) entries. Can't cd.
~ $ cd portage/gentoo
~/portage/gentoo $ cdc re2c
~/portage/gentoo/dev-util/re2c $</code></pre>
<p>Looks straightforward. Then I thought of hooking up bash completion to
avoid typing full intermediate directory. And to see interactively what
these ambiguities are.</p>
<p>For example, in case of <strong>pkgs/development/python-modules/importlib-metadata</strong> I’d like
to avoid typing <strong>importlib-metadata</strong> while being able to get to it quicker.</p>
<p>Apparently, <strong>bash</strong> does not require bash completion to be an exact
prefix for something and allows for any arbitrary substitution!</p>
<p>Here is a silly example to get basics of bash completion:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># complete-hia.bash</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co"># $1 - 'hia'</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co"># $2 - the word being completed</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co"># $3 - the word before completion</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="fu">_complete_hia()</span> <span class="kw">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="co"># generic completion results:</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">COMPREPLY</span><span class="op">=</span><span class="va">(</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        <span class="co"># just generate 5 random entries</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">$RANDOM</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">$RANDOM</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        <span class="va">$RANDOM</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="va">$RANDOM</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="va">$RANDOM</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="co"># and a fancy output</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;Hia! Here is your full arg list: '</span><span class="va">$*</span><span class="st">'&quot;</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">)</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># let's do something special on exact match</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">[[</span> <span class="va">$2</span> <span class="ot">==</span> secret <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        <span class="va">COMPREPLY</span><span class="op">=</span><span class="va">(</span> <span class="st">&quot;YOU GOT IT!&quot;</span><span class="va">)</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">fi</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="bu">complete</span> <span class="at">-F</span> _complete_hia hia</span></code></pre></div>
<p>Example session:</p>
<pre class><code>$ source complete-hia.bash
$ hia a&lt;TAB&gt;
1476    29762
14984   31708
15184   Hia! Here is your full arg list: 'hia a hia'
$ hia a&lt;TAB&gt;
22726  3483
24271  8982
32492  Hia! Here is your full arg list: 'hia a hia'
$ hia is it secret&lt;TAB&gt;
$ hia is it YOU GOT IT!</code></pre>
<p>There are many minor caveats like automatic prefix expansion
when all alternatives match (make sure to check <strong>compgen</strong>).</p>
<p>Let’s try arbitrary directory completion for <strong>cdc</strong> command
introduced above.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">_cdc()</span> <span class="kw">{</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">local</span> <span class="va">d</span> <span class="va">candidates</span><span class="op">=</span><span class="va">()</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="va">IFS</span><span class="op">=</span> <span class="bu">read</span> <span class="at">-r</span> <span class="at">-d</span> <span class="st">$'</span><span class="dt">\0</span><span class="st">'</span> <span class="va">d</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">[[</span> <span class="va">$d</span> <span class="ot">==</span> <span class="st">'.'</span> <span class="kw">]]</span> <span class="kw">&amp;&amp;</span> <span class="cf">continue</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        <span class="va">candidates</span><span class="op">+=</span><span class="va">(</span><span class="st">&quot;</span><span class="va">${d</span><span class="op">#</span>./<span class="va">}</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">done</span> <span class="op">&lt;</span> <span class="op">&lt;(</span><span class="fu">find</span> <span class="at">-path</span> <span class="st">&quot;*/</span><span class="va">$2</span><span class="st">&quot;</span> <span class="at">-type</span> d <span class="at">-print0</span> <span class="dv">2</span><span class="op">&gt;</span>/dev/null<span class="op">)</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">COMPREPLY</span><span class="op">=</span><span class="va">(</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        <span class="co"># multiple candidates, don't match on prefix. Just dump all.</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Also always quote output</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;</span><span class="va">${candidates</span><span class="op">[@]@</span><span class="va">Q}</span><span class="st">&quot;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="va">)</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">[[</span> <span class="va">${</span><span class="op">#</span><span class="va">candidates</span><span class="op">[@]</span><span class="va">}</span> <span class="ot">-gt</span> 1 <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="co"># If there is ambiguity do not mangle original argument</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="va">COMPREPLY</span><span class="op">+=</span><span class="va">(</span> <span class="st">&quot;</span><span class="va">${2}</span><span class="st">&quot;</span> <span class="va">)</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">fi</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="bu">complete</span> <span class="at">-F</span> _cdc cdc</span></code></pre></div>
<p>Here is the example session:</p>
<pre class><code>~ $ cdc *rtlib-*
'dev/git/nixpkgs/pkgs/development/python-modules/importlib-metadata'
'dev/git/nixpkgs/pkgs/development/python-modules/importlib-resources'
*rtlib-*
~ $ cdc *rtlib-m*&lt;TAB&gt;
~ $ cdc 'dev/git/nixpkgs/pkgs/development/python-modules/importlib-metadata'

~ $ cdc curseofwar&lt;TAB&gt;
curseofwar
'dev/git/nixpkgs/pkgs/games/curseofwar'
'portage/slyfox-gentoo/games-strategy/curseofwar'</code></pre>
<p>I made trailing globs to be clunky to use on purpose as I use exact
match most of the time. One could cook a version with many enhancements
like <strong>find</strong>’s case-insensitive match or do something smarter around
completion quoting.</p>
<p>More info is at <a href="https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html">Programmable Completion Builtins</a>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 23, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>farewell, gentoo dev</title>
    <link href="http://trofi.github.io/posts/226-farewell-gentoo-dev.html" />
    <id>http://trofi.github.io/posts/226-farewell-gentoo-dev.html</id>
    <published>2021-08-08T00:00:00Z</published>
    <updated>2021-08-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: farewell, gentoo dev</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>farewell, gentoo dev</h1>

            <p>PSA: I asked my <a href="mailto:slyfox@gentoo.org">slyfox@gentoo.org</a> account to be retired.</p>
<h1 id="a-bit-of-history">a bit of history</h1>
<p>Here is a bit of my history with gentoo (and Linux as it overlaps for 90%).</p>
<p>I started using Linux in 2003. It was an Alt Master 2.2(ish)
distribution (russian mandrake sibling). Year later quickly degraded (or
ascended) into BLFS.</p>
<p>I became gentoo user around 2005. I was an undergrad and not a fully
grown up person. Arguably I’m not yet either. Let’s check in 16 years.</p>
<p>To get a feeling of what I was like here is my first (well, second)
email sent from gentoo box:</p>
<pre class><code>Date: Thu, 3 Nov 2005 22:11:50 +0200
From: Sergei Trofimovich &lt;slyich@gmail.com&gt;
To: gqview@users.sourceforge.net
Subject: feature request
Message-ID: &lt;20051103221150.460d3cbf@SlyFox.SlyNet.org&gt;
X-Mailer: Sylpheed-Claws 1.9.99 (GTK+ 2.8.6; i686-pc-linux-gnu)
Mime-Version: 1.0
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit

Hello.
 I use GQview for a long time :], but i would like to see in 
 it _MOVING_ .GIFs. Thanks a lot!!! </code></pre>
<p>I think I was asking for animated .gif support in gqview.</p>
<p>Message-ID reminds me I had an odd notion of the way one claims their
own domains in internet. I pretended SlyNet.org belongs to me at least
in my local network of one computer.</p>
<p>I had just destroyed my main LFS system with
a <strong>./configure &amp;&amp; make &amp;&amp; make install</strong> of fresh weekly glibc CVS
snapshot. I set dual boot of Debian and gentoo to try those out until
I restore LFS.</p>
<p>I think I did my first meaningful contribution to nouveau project when they
collected BIOS dumps for video cards. At that time you would need to patch
your kernel with Pekka’s MMIO trace support and run glxgears on Nvidia’s
binary driver. Then run a script to generate C-looking BIOD dump.</p>
<p>If you paste it to nouveau kernel driver it would be enough to get your
card running under nouveau. Getting if to work for the first time for was
a great feeling!</p>
<p>Around 2008 I got into #gentoo-haskell trying to build <a href="https://wiki.haskell.org/Lambdabot">https://wiki.haskell.org/Lambdabot</a>
and trying to make any sense off haskell by looking at the regression tests
in GHC tree. Internet was still a dial-up thing for me at home.</p>
<p>One of first non-trivial bug reports I did was missing <strong>AC_LARGEFILE</strong>
in some parts of GHC. It was an inconsistent getrlimit struct size
and corrupted memory as a result: <a href="https://gitlab.haskell.org/ghc/ghc/-/issues/2038">https://gitlab.haskell.org/ghc/ghc/-/issues/2038</a></p>
<p>Around 2009 I was on board of midnight commander development team, got hackage
upload right, adopted abandoned <strong>fquery</strong> tool and subscribed to lkml to read
it every morning on train to work and back (2 hours per day). I also sent my
first non-trivial bug report to kernel around i915 chip and a month later got
my first trivial commit to linux kernel:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=168f5ac668f63dfb64439766e3ef9e866b83719d">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=168f5ac668f63dfb64439766e3ef9e866b83719d</a></p>
<p>I aspired to get at least one commit to linux, gcc, glibc and binutils
one day. I never dreamed of commit bit to those projects. They all looked
complex, magic and flawless. I thought the time order would be (in order
of perceived to be required knowledge): binutils, glibc, gcc, linux.
It ended up being exactly the opposite and has very little to do with knowledge
or complexity.</p>
<p>Also around 2009 I (as upstream) received first contribution to mc’s part
I am responsible for: ebuild file syntax highlighting in mcedit (a bunch
of keywords). It was from Lars, gentoo staffer by then. I though, wow,
being a gentoo dev is very cool! Maybe one day I’ll have a chance? I did
an <strong>mc</strong> live ebuild for my own use after all!</p>
<p>And by the end of 2009 Lennart mentored me as a new gentoo dev to help him
with haskell packages: <a href="https://bugs.gentoo.org/296463">https://bugs.gentoo.org/296463</a>. In 6 months I got
the CVS commit bit! My first ebuild was an <strong>xmms2</strong> one. Mike helped me
to shape it up in gentoo-dev@ ML.</p>
<p>It took me about 6 years to start meaningfully contribute to the FOSS
community. Such a long time. If you think of contributing and have not
started yet then start today. It is trivial and fun.</p>
<p>Gentoo gave me access to various exotic platforms. First thing first I tried
to refresh GHC binary on alpha, ia64, powerpc and sparc. GHC required fancy
fixes on each of them. In case of sparc Mike fixed glibc for me first:
<a href="https://bugs.gentoo.org/336792#c13">https://bugs.gentoo.org/336792#c13</a>. Years later I was able to debug similar
bugs PIE-related myself.</p>
<p>Roughly around that time Google contacted me for the first time and I failed
the onsite interview in Zurich. That was my first time to visit english
speaking Europe.</p>
<p>In 2010 a good friend of mine gave me sheevaplug armv5tel device to play with
embedding gentoo into it. He helped me to file <a href="https://bugs.gentoo.org/333679">https://bugs.gentoo.org/333679</a>.</p>
<p>In 2011 I managed to debug and fix very scary data corruption bug on btrfs:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3387206f26e1b48703e810175b98611a4fd8e8ea">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3387206f26e1b48703e810175b98611a4fd8e8ea</a>
and then severe degradation on --mixed btrfs filesystems:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c4f675cd40d955d539180506c09515c90169b15b">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=c4f675cd40d955d539180506c09515c90169b15b</a></p>
<p>On alpha in attempt to follow some outdated guide in alignment debugging I
accidentally fixed some very obscure <strong>setsysinfo()</strong> interface nobody seemed
to use:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2df7a7d1cd07626dd235ca102830ebfc6c01a09e">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=2df7a7d1cd07626dd235ca102830ebfc6c01a09e</a></p>
<p>That helped me to find a bug on alpha in OPENSSL_cleanse() function. My first
encounter of openssl’s perl scripts to generate the assembly.</p>
<p>Only later I found out that standard <strong>prctl --unaligned=signal</strong> Just Works
for the same purpose :)</p>
<p>In the same 2011 I mentored Mark to get on board with gentoo dev to help me
with haskell.</p>
<p>In the same 2011 I tried to fix a few prominent packages to support <strong>x32</strong>
ABI and stumbled on xorg devs who refused to accept that <strong>__x86_64__</strong> can
be an <strong>ilp32</strong> system. It was eventually accepted upstream but I gave up
quickly being blocked by xorg.</p>
<p>In 2012 at a day job I got to work at an x86 emulator and extended my interests
to <strong>qemu</strong> and interpreters. Few trivial fixes landed into <strong>qemu</strong>. I also
botched the qemu ebuild down to a state when qemu VMs could not boot anymore.
Doug was rightfully upset. I settled on butchering my own live ebuild.</p>
<p>About the same time I started taking on maintenance of other tiny packages,
like <strong>sys-block/seekwatcher</strong>, <strong>app-misc/bb</strong> and other non-haskell stuff.</p>
<p>I mentored Alexander on board of gentoo dev to help me with haskell packages.</p>
<p>In 2012 Google contacted me second time and I failed phone interview for a
Haskell position in Munich.</p>
<p>At the end of 2012 I mentored Heather to join gentoo devs and help me with
haskell. Heather also maintained C#-related packages that required very
special expertise nobody except Heather had.</p>
<p>I submitted my first tmpfilesd.eclass in 2012 for review and it was shot
down as unneded. Only to be added in 2016 by someone else. There are my
communication skills at that time (and now, really).</p>
<p>In 2013 my mentor Lennart retired from gentoo dev and moved on to Fedora.</p>
<p>I fixed a memory leak in long-running <strong>CVS</strong> sessions which allowed
me to convert whole of gentoo’s CVS tree into git as a single <strong>git cvsimport</strong>
run.</p>
<p>I took on GHC maintenance in gentoo: building binaries on a few stalled
arches, fixing obscure GHC or haskell bugs that happened only on exotic
arches. I found out all the gory details of how RTS adjustors worked
and how libffi was (slightly incorrectly) hooked to it.</p>
<p>Later I took on cross-compiler cleanup and maintenance of upstream GHC
around unregisterised backend. It was a great way to understand GHC’s
evaluation model and unique debugging tricks.</p>
<p>I upstreamed by Most Important Ever patch to linux kernel to enable
<strong>-Werror=implicit-int</strong> prompted by hardened-specific backport gone wrong
I had on btrfs:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=80970472179a45609c0b11b80619bc8c32b15f77">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=80970472179a45609c0b11b80619bc8c32b15f77</a></p>
<p>Reminds me I used a hardened kernel at work at that time and fixed a few
packages for it. Somehow it was the simplest way to fix hardened-specific
bugs. Many hardened users frequently refused to show any build.log and
described the problems as they see it without actual evidence.</p>
<p>I mentored Michael to join gentoo devs to work on various packages.</p>
<p>I was contacted by Google yet again and finally passed the interview.
In 2014 I moved to London. My first commit to gentoo’s portage also
happened that year.</p>
<p>I did my first substantial change to ghc-package.eclass to support new
style package database and while at it got rid of many orphan haskell
config files on gentoo. That was probably my first successful eclass work.</p>
<p>In 2015 I subscribed to gentoo-project@ because I was nominated for council@
for the first time /o\. I did not really know what happens in that list
until then as it never popped up in a day-to-day work.</p>
<p>I unsubscribed from lkml as I had no time to read after the move.
I subscribed to libc-alpha@ (glibc mailing list). I got my first
gcc patch upstreamed to properly fix <strong>ia64</strong> relocations:
<a href="http://trofi.github.io/posts/189-glibc-on-ia64-or-how-relocations-bootstrap.html">http://trofi.github.io/posts/189-glibc-on-ia64-or-how-relocations-bootstrap.html</a></p>
<p>gentoo moved from CVS to git which made it a lot easier for external users to
contribute. It felt like development speed accelerated quite a bit since.</p>
<p>In 2016 I fixed GHC on m68k to mostly test how easy it is to
cross-compile GHC on something I never tried before:
<a href="http://trofi.github.io/posts/191-ghc-on-m68k.html">http://trofi.github.io/posts/191-ghc-on-m68k.html</a></p>
<p>In 2017 I fixed kernel module loading on <strong>ia64</strong> that broke by my gcc
patch from 2015: <a href="http://trofi.github.io/posts/199-ia64-machine-emulation.html">http://trofi.github.io/posts/199-ia64-machine-emulation.html</a></p>
<p>I also was elected as a member of gentoo council@ for the first time. It
was an eye opening event: I had only vague idea what council actually does,
yet I nominated. I wonder if most of devs generally have as much feeling
about it. That’s a scary thought on how election process actually go and
what it achieves. It also explains why I was elected at all :)</p>
<p>Mike stopped contributing to toolchain packages. I joined newly formed
toolchain@ team in gentoo to maintain gcc. At that point I got some
expertise to fix GHC on various arches and was a very frequent user of
crossdev. This naturally exposed me to very rare arch-specific
cross-specific build bugs. First gcc I pushed to gentoo was gcc-6.4.0.
First major gcc was probably a gcc-7. I don’t remember anything special
about it. Probably because I had no idea what I was doing.</p>
<p>Later I found out about nix and guix as an elegant solution not to break
your existing system while building an update to the new one. It felt
a bit clunky as a gentoo replacement. It feels like the right solution,
but it also requires quite a bit of time investment.</p>
<p>Later gentoo enabled 17.0 profiles with pie-by-default. I hoped (and
asked) that clang, go, ocaml, crystal would follow gcc’s lead of -fPIE
byt defaults (and -fstack-protector while at it). But it never happened.
It keeps biting users and keeps providing inconsistent results when trying
to mix the binaries and libraries from different toolchains.</p>
<p>In 2017 I was kicked out of #gentoo-dev IRC channel over a seemingly
minor issue. It was not an isolated incident. By the time it was clear
part of gentoo dev community had different views and values from mine
on what is appropriate in casual conversations. I realized it was a big
effort to sift through bile and snarky comments on #gentoo-dev in search
of something constructive. I never came back.</p>
<p>I did not feel my contributions were welcomed at the time and started
thinking of resignation. New toolchain@ and council@ roles cheered me
up slightly and allowed me to distract from the thought.</p>
<p>That was the time when I could no longer safely expand my interests in
gentoo. I started explicitly avoiding quite a few areas and distance
myself from very toxic environments.</p>
<p>I realized I’ll eventually lose the connection with gentoo development
in general and fall behind the development practices. In this regard
I was probably the worst council@ member ever :)</p>
<p>sparc architecture support went from stable to exp for a short while
as we lost our last sparc dev box from HDD hardware failure.</p>
<p>I think demoting to exp was a good move. It signalled people to step in
and save the platform support by getting new fancy hardware, by setting
it up and starting more active stabilization process by. Rolf++ saved
sparc and hppa. He still diligently files bugs that ought to be filed
and fixed by maintainers themselves. I think over time we found a few
non-trivial bugs that benefit every arch as a result.</p>
<p>I personally think portability is a great asset of gentoo. Mechanically
it’s a great way to find future bugs. <a href="https://bugs.gentoo.org/613418">https://bugs.gentoo.org/613418</a> is
a good example when unexpected memory overlap in inplace arithmetics on
long numbers caused problems on sparc first but could (and will) happen
on x86_64.</p>
<p>In 2018 I debugged very fancy hardware memory fault on my machine related
to non-temporal instructions handling:
<a href="https://trofi.github.io/posts/209-tracking-down-mysterious-memory-corruption.html">https://trofi.github.io/posts/209-tracking-down-mysterious-memory-corruption.html</a></p>
<p>By then I saw everything :)</p>
<p>A bit later Alexander retired from gentoo and moved on to nixos ecosystem.</p>
<p>In 2019 I removed 13.0 profiles as their presence slowed repoman down
and gave an impression of 13.0 to stay forever while devs did not
normally test software on it: <a href="https://bugs.gentoo.org/672960">https://bugs.gentoo.org/672960</a>. As a result
we found out infra used 13.0 as well. Whoops.</p>
<p>In 2019 I joined riscv project to help with basic toolchain support.
I think I only made a minor glibc tweak.</p>
<p>In 2020 I started working on gcc-10 which (who knew!) lexicographically
is less than gcc-9 and that broke software in very unusual ways:
<a href="http://trofi.github.io/posts/213-gcc-10-in-gentoo.html">http://trofi.github.io/posts/213-gcc-10-in-gentoo.html</a></p>
<p>As you can see in that post gcc-10 was very harsh on it’s users.
It took us a long time to get reverse dependencies fixed. To isolate users
from simplest bugs and be able to discover breakages early I decided to
switch my main development box to gcc built from git. I hope I succeeded
at catching one or two of those before the release:
<a href="http://trofi.github.io/posts/224-a-year-on-gcc-from-git.html">http://trofi.github.io/posts/224-a-year-on-gcc-from-git.html</a></p>
<p>My goal as part of toolchain@ was to clean up and forward all gcc-related
failures that looked like compiler problems: be it LTO, PGO, exotic
-m* or -f* flags being used or cross-compiler support. It’s a joy to
see enthusiasts try out various fancy setups I could never come up with
myself and get it to work together.</p>
<p>And it’s always sad to see when people just disable certain optimizations
in ebuilds without a bug report or any specifics. Almost always there is
a proper fix lurking on toolchain side, client project or both.</p>
<p>To help Agostino find packages that don’t follow ${CHOST}-${tool} convention
I added USE=-native-symlinks to gcc-config and binutils-config:
<a href="https://wiki.gentoo.org/wiki/Project:Toolchain/use_native_symlinks">https://wiki.gentoo.org/wiki/Project:Toolchain/use_native_symlinks</a></p>
<p>This tiny effort shown an interesting detail of gentoo dev community:
everybody has slightly different notion of what gentoo provides as an
interface to the user.</p>
<p>This specific example is how many variables should user override
in make.conf to get CC applied? Just CC? Or also CC_FOR_BUILD?
Or maybe HOST_CC? How about CHOST override? Should it affect CC
automatically or user also has to specify CC?</p>
<p>My optimion is seemingly very simple: for native builds ${CHOST}-gcc
should be used for all build systems to (until overridden) But not
everyone shares it. Mismatch causes cross-compilation failures on a
regular basis.</p>
<p>Ideally QA would help us here to establish some guidance. Any
written convention would be fine. But that did not happen yet:
<a href="https://bugs.gentoo.org/726034">https://bugs.gentoo.org/726034</a>.</p>
<p>In 2020 I got commit bit in gcc, binutils and llvm projects for a few
small contributions. That gave me the confidence to contribute more.
That looks like a great model.</p>
<p>In 2021 Heather retired from gentoo dev.</p>
<p>Wolfgang (my mentee) was rejected as a gentoo dev candidate.
This was my failure as a mentor. It’s a sign I’m not up to speed
with current gentoo development practices and should step down.</p>
<p>I unassigned myself from all the packages I left all the gentoo teams.</p>
<p>Losing access to exotic arches if a bit unfortunate, but maybe it will
force me to improve <strong>qemu</strong> a bit. Or get hardware access via other
means :D</p>
<h1 id="possible-improvements">Possible improvements</h1>
<p>On developer pool size and their will to contribute. I personally think
quizzies cover both too much and too little of the scope to evaluate the
candidate for an ultimate question if having them onboarded now would be
net benefit or not. For example ::haskell occasionally gets active and
diligent contributors that don’t have much interest outside haskell
packages. I don’t see a reason not to allow them to sync their work to
::gentoo.</p>
<p>On information flow around gentoo-wide. council@, trustees@, qa@, infra@
topics like new policies or decisions being made. Would be nice to always
post those to gentoo-dev-announce@. As a crazy idea it might help gentoo
if each new member joined over past 2 years would personally be invited
to lurk in one of council meetings to get the idea what they are usually
about. And get meeting logs back over the email in case they could not
make it. For example I still have no idea what decisions qa@ did over
past 5 years.</p>
<p>On policy clarificaiton requests against qa@. Perhaps monthly meetings
could go through bug backlog to have follow-up and steps to closure.</p>
<p>On lack of basic tooling or tool fragmentation. I think gentoo needs more
trivial ubiquitous tools:</p>
<ul>
<li>tool to file a bug report based on failed build.log without much manual
fiddling. Or even better a portage prompt when encountered.</li>
<li>tool to file a stabilization (or keywording) request for users</li>
<li>tool to continuously perform builds for CCed arches in bugs and have the
ability to keyword/stable packages without manual interaction from arch team
(unless requested explicitly). It might also be a hatural place to maintain
some form of binpkgs in gentoo.</li>
<li>tool to setup and enter chroot</li>
<li>tool to run the QA checks against all the packages one maintains without
resort to hacking up their own big wrappers.</li>
<li>many other tools for daily use I forgot</li>
</ul>
<p>Most of them are implementable in 5 lines of code as a start. It would be
a great start to improve quality of reports and interaction.</p>
<h1 id="parting-words">Parting words</h1>
<p>I’ll probably still be around for a while as a gentoo user. No more <strong>ia64</strong>
access though :)</p>
<p>These past 11 years had their nice moments.</p>
<p>Good luck!</p>

<div class="info">
    Posted on August  8, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>ia64 ptrace: off-by-one yak</title>
    <link href="http://trofi.github.io/posts/225-updating-ia64-kernel.html" />
    <id>http://trofi.github.io/posts/225-updating-ia64-kernel.html</id>
    <published>2021-08-07T00:00:00Z</published>
    <updated>2021-08-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: ia64 ptrace: off-by-one yak</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>ia64 ptrace: off-by-one yak</h1>

            <p>Gentoo has one alive <strong>ia64</strong> machine: <strong>HP rx3600</strong> nicknamed <strong>guppy</strong>.
It’s an old box, and yet it’s specs are not too different from my
10 years old desktop: 32 GB RAM, 2 cores x 2 hyperthreads each.</p>
<p>Thus it’s suitable for on-host debugging of all sorts up to building
and running <strong>gcc</strong> testsuites or remote X client apps like pre-rust
version of firefox.</p>
<h1 id="kernel-upgrade">kernel upgrade</h1>
<p>There were a few major upstream kernel changes that made me a bit
nervous to update kernel on that machine from <strong>4.9</strong>:</p>
<ul>
<li><strong>cciss</strong> SCSI driver was removed in favour of <strong>hpsa</strong> one
(which among other things changed <strong>/dev/</strong> paths for device)</li>
<li>large scale memory management cleanups broke kernel build on
<strong>ia64</strong> for some memory models and that slipped to release tarball
prompting questions of <strong>ia64</strong> support status.</li>
</ul>
<p>Fast forward a few years and we were running <strong>4.9</strong> kernel in 2021.
Whoops. No fancy new <strong>statx()</strong> syscalls or modern container whistles.</p>
<p>Also John Paul Adrian started asking question if Gentoo were seeing
NUMA-related boot failures. I decided to upgrade a kernel to one of
recent releases.</p>
<p>First I attempted to upgrade straight to then most recent <strong>5.10</strong> (it
took me a while to write about it). Built <strong>5.10</strong> and booted
it without any problems (<strong>grub</strong>++ for ease of messing with <strong>root=</strong>
over BMC). I rebuilt a few hevyweight packages to check basic ability
to roll back if needed. No problems! Phew! End of the story!</p>
<p>Or not.</p>
<h1 id="the-quest-of-strace">the quest of strace</h1>
<p>A few days after kernel upgrade Dmitry (<strong>strace</strong> upstream maintainer)
reported a bug uncovered by <strong>strace</strong> testsuite: <a href="https://bugs.gentoo.org/769614">https://bugs.gentoo.org/769614</a>.
Many tests started failing for invalid syscall parameters as seen by
<strong>ptrace()</strong>.</p>
<p>Dmitry noticed that sometimes syscall parameters were off-by-one:</p>
<ul>
<li>expected: sys_foo(a1,a2,a3,…)</li>
<li>observed: sys_foo(__NR_foo,a1,a2,a3,…)</li>
</ul>
<p>Looks like a trivial bug, right?</p>
<p>Quiz: pause here for a minute and try to guess the nature of this bug.
It’s ok (and encouraged!) not to have any prior knowledge of kernels,
<strong>ptrace()</strong> facility or <strong>ia64</strong> architecture.</p>
<p>What kind of kernel change could trigger failures and what was the real
cause of the observed discrepancy? A few distractors to chose for you:</p>
<ul>
<li>mechanical coding bug in recent kernel (like using wrong register during
unwind)</li>
<li>subtle failed assumption like stack handling direction or syscall argument
passing</li>
<li>a dormant <strong>strace</strong> bug</li>
<li>CPU hardware failure</li>
<li>something else</li>
</ul>
<h1 id="the-clues">the clues</h1>
<p>At first I thought it to be a simpler form of
<a href="../posts/211-page-fault-handling-on-alpha.html">alpha’s off-by-one bug</a> where we
encoded incorrect offsets to <strong>struct pt_regs</strong>.</p>
<p>The fun and scary thing about <strong>ia64</strong> compared to many other arches
is that it’s use of <strong>pt_regs</strong> is a lot more <a href="../posts/210-ptrace-and-accidental-boot-fix-on-ia64.html">involved</a>:
register access requires kernel stack unwindind up to the userspace boundary.
But complex unwinnding also happens to make it more uniform compared to other arches:
most of the time you just use slow unwinder instead of hardcoding anything
fast or special cased.</p>
<p>I hoped the fix would be a simpler variant of the alpha bug. With that bit of
experience I hoped it would help.</p>
<p>The presence of unexpected syscall number in syscall parameters for
<strong>ptrace()</strong> bothered me a bit. Why does it appear in such a strange
place?</p>
<p>I skimmed through <strong>arch/ia64</strong> kernel commits in <strong>4.9..5.10</strong> range related
to <strong>ptrace()</strong>, found 5 of them, stared a lot at them and did not find anything
suspicious.</p>
<p>Then I skimmed through kernel’s side of intercepting syscall parameters. I looked
at a <strong>break</strong> trapping instruction handling. <strong>break</strong> instruction is similar
to <strong>x86</strong>’s <strong>int</strong>: it trigger interrupt style switch to kernel context. With
a caveat that everything on <strong>ia64</strong> is special.</p>
<p><strong>ptrace()</strong> handling path looked straightforward:</p>
<p>Tracee:</p>
<ul>
<li>entry point is <strong>ENTRY(break_fault)</strong> (at <strong>arch/ia64/kernel/ivt.S</strong>)
<ul>
<li>save only part of <strong>struct pt_regs</strong></li>
<li><strong>GLOBAL_ENTRY(ia64_trace_syscall)</strong> (at <strong>arch/ia64/kernel/entry.S</strong>):
<ul>
<li><strong>PT_REGS_SAVES</strong>: create new frame worth of <strong>struct pt_regs</strong></li>
<li><strong>f6-f11</strong> FPUs regs are saved</li>
<li><strong>syscall_trace_enter</strong> (asm-&gt;C boundary is crossed here, registers are
passed as arguments) (at <strong>arch/ia64/kernel/ptrace.c</strong>)
<ul>
<li><strong>tracehook_report_syscall_entry</strong> communicates state to tracer</li>
<li>tracer resumes and gets data</li>
</ul></li>
</ul></li>
</ul></li>
</ul>
<p>Tracer:</p>
<ul>
<li><strong>ptrace_get_syscall_info_entry</strong>
<ul>
<li><strong>info-&gt;entry.nr = syscall_get_nr(child, regs);</strong> // regs-&gt;r15</li>
</ul></li>
</ul>
<p>The complication here is to find out which of two paths is buggy:
tracer path or tracee path? Tracee path looks more involved and
has a higher chance to fail. I needed to poke at a real example
to match expected and observed states.</p>
<p>I attempted to reproduce the bug on <strong>strace</strong> test suite and
instantly got the same result. Yay! Sharing the machine with
the reporter is very convenient :)</p>
<p>I started sprinkling <strong>printk()</strong> statement all over the kernel.
Most interesting result was for <strong>syscall_get_set_args_cb()</strong> in
<strong>arch/ia64/kernel/ptrace.c</strong>.</p>
<pre class><code>syscall_get_set_args_cb: krbs: 0xe000000103800ec0
syscall_get_set_args_cb: ndirty: 0x0
syscall_get_set_args_cb: count: 6
syscall_get_set_args_cb: krbs[0]: 0x40a
syscall_get_set_args_cb: krbs[1]: 0x2000000800122590
syscall_get_set_args_cb: krbs[2]: 0xbad1fed1
syscall_get_set_args_cb: krbs[3]: 0xbad2fed2
syscall_get_set_args_cb: krbs[4]: 0xbad3fed3
syscall_get_set_args_cb: krbs[5]: 0xbad4fed4
syscall_get_set_args_cb:args[0]: 0x40a
syscall_get_set_args_cb:args[1]: 0x2000000800122590
syscall_get_set_args_cb:args[2]: 0xbad1fed1
syscall_get_set_args_cb:args[3]: 0xbad2fed2
syscall_get_set_args_cb:args[4]: 0xbad3fed3
syscall_get_set_args_cb:args[5]: 0xbad4fed4</code></pre>
<p>Here <strong>krbs</strong> is kernel’s register backing store in memory.</p>
<p><strong>RBS</strong> memory area (pointed at <strong>ar.bsp</strong> and <strong>ar.bspstore</strong> registers)
is where rotating registers are spilled on user’s request or automatically.
In case of <strong>ptrace()</strong> registers are spilled on kernel’s request with
<strong>flushrs</strong> instruction to make sure we can read them from memory.</p>
<p>Normally <strong>krbs</strong> should contain syscall arguments and maybe
local function variables. <strong>args</strong> array is actual syscall args.
We still see <strong>0x402</strong> (<strong>__NR_read</strong>) as first argument. That is probably
a manifestation of the bug we trace.</p>
<p>Fun fact: for some reason <strong>ia64</strong> linux syscalls start from 1024
(<strong>0x400</strong>). Perhaps lower numbers are reserved for binary
compatibility with <strong>HPUX</strong>?</p>
<h1 id="bisecting-the-kernel">bisecting the kernel</h1>
<p>I still did not get anything obvious. Why did syscall number kept
getting in the list? I decided to bisect the kernel.</p>
<p>I rebooted back to <strong>4.9</strong> kernel and made sure that bug disappeared.
Ok, that meant it’s not at least some parallel userspace update.</p>
<p>I bisected the kernel down to the following commit:</p>
<pre class><code>commit 201766a20e30f982ccfe36bebfad9602c3ff574a
Author: Elvira Khabirova &lt;lineprinter@altlinux.org&gt;
Date:   Tue Jul 16 16:29:42 2019 -0700

  ptrace: add PTRACE_GET_SYSCALL_INFO request

  PTRACE_GET_SYSCALL_INFO is a generic ptrace API that lets ptracer obtain
  details of the syscall the tracee is blocked in.

 include/linux/tracehook.h                     |   9 ++++++---
 include/uapi/linux/ptrace.h                   |  35 +++++++++++++++++++++++++++++++++++
 kernel/ptrace.c                               | 101 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 tools/testing/selftests/seccomp/seccomp_bpf.c |  13 +++++++++----
 4 files changed, 150 insertions(+), 8 deletions(-)</code></pre>
<p>Tl;DR is: it’s a new <strong>ptrace()</strong> API to fetch traced syscall arguments.</p>
<p>This means it’s not strictly a regression of existing code:</p>
<ul>
<li>before the kernel change <strong>strace</strong> used to manually
extract syscall arguments from <strong>ptrace(PTRACE_GETREGS)</strong>
knowing the syscall ABI for an architecture</li>
<li>after the change it calls <strong>ptrace(PTRACE_GET_SYSCALL_INFO)</strong> and gets
all the arguments as a nice portable array. No need to deal with register
numbers!</li>
</ul>
<p>That looked even more confusing! Arch-specific <strong>ptrace()</strong> code was not changed
in that commit and yet some part of <strong>ptrace()</strong> is somehow broken.
It meant that something was probably broken forever.</p>
<p>What next? I had to fall back to debugging the issue from the first
principles: carefully trace syscall entry into the kernel to debug
<strong>ptrace()</strong> hook being called and check how syscall arguments are
extracted.</p>
<p>Sounds tedious but straightforward.</p>
<h1 id="syscalls-on-ia64">syscalls on ia64</h1>
<p>So what IS the syscall ABI on <strong>ia64</strong>? I never looked into too much details
besides knowing that “it looks very close to calling a C function”. Is it
true though?</p>
<p>Actually, <strong>ia64</strong> has not one but two close but different syscall ABIs:</p>
<ul>
<li><strong>break</strong> instruction based kernel entry (similar to interrupt trap)</li>
<li><strong>epc</strong> magic instruction based (also called <strong>fsys</strong> mode, “fast syscall”)</li>
</ul>
<p><strong>break</strong> ABI is roughly the following:</p>
<ul>
<li>syscall number is placed into <strong>r15</strong> (non-rotating register)</li>
<li>syscall arguments go into rotating registers for output (not input or local)</li>
<li><strong>break 0x10000</strong> is executed to switch into kernel mode via
<strong>break</strong> interrupt vector <strong>ENTRY(break_fault)</strong> (at arch/ia64/kernel/ivt.S)</li>
</ul>
<p>Here argument layout for syscall matches argument layour for a standard C function
on <strong>i64</strong>. Only syscall number is passed via unusual <strong>r15</strong>.</p>
<p><strong>glibc</strong> syscall wrapper fully illustrates typical call:</p>
<pre class><code>ENTRY(syscall)
      /* We are called like so:
         {out0,out1,...,out6} registers -&gt; {NR, arg1, ..., arg6}
         Shift the register window so that {out1...out6} are available
         in {out0...out5} like the kernel syscall handler expects.  */
      alloc r2=ar.pfs,1,0,8,0
      mov r15=r32             /* syscall number */
      break __IA64_BREAK_SYSCALL
      ;;
      cmp.ne p6,p0=-1,r10     /* r10 = -1 on error */
(p6)  ret
      br.cond.spnt.few __syscall_error</code></pre>
<p>Not to go into too many details <strong>syscall’s</strong> proto is <strong>syscall(NR, arg1, arg2, arg3,…,arg8)</strong>
and kernel handles it as <strong>sys_NR(arg1,arg2,arg3,…,arg8)</strong>.</p>
<p>At this point I thought, “aha! off-by-one!”. But tracing through all the paths
of <strong>ia64</strong> assembly I was not able to find any problems. I had to read on stack
handling in branch calls and interrupts in excellent software development intel’s
manual to make sure I don’t miss any special cases. Nothing stood out.</p>
<p>Adding more debugging I realized <strong>break</strong> mechanism was not used at all
in failing cases!</p>
<p>After a bit of debugging I discovered that most of glibc syscalls are
actually done via <strong>epc</strong> (not <strong>break</strong>) mechanism! Gah! I never had
a chance to have a closer look at it and always assumed it’s an unimplemented
feature. So much for being a local expert in <strong>ia64-linux</strong> :D</p>
<p><strong>epc</strong> ABI is unusual: <strong>epc</strong> instruction (Enter Privileged Code)
itself does only one thing: it changes privileges of current execution from
userspace to kernel level and executes next instruction right after it.
This means no context switch, no traps executed. It’s almost like a <strong>nop</strong>.
next few instructions after <strong>epc</strong> need to manually perform all the necessary
context operations. Which might be none for simplest syscalls like <strong>getpid()</strong>!</p>
<p>If userspace could call <strong>epc</strong> from anywhere that would be a good way
to negate any kernel protection. Thus CPU has a few restrictions: code page
with <strong>epc</strong> needs to be marked as privileged for MMU so kernel could provide
safe code that is not easy to turn into an arbitrry privilege escalation</p>
<p>In practice kernel provides such a page as part of <strong>vDSO</strong>. <strong>linux</strong> calls it
<strong>GATE</strong> page. <strong>glibc</strong> finds the <strong>vDSO</strong> out and uses it as syscall
implementation. Linux calls the whole ABI an <strong>fsys</strong> mechanism:
<a href="https://www.kernel.org/doc/html/latest/ia64/fsys.html">https://www.kernel.org/doc/html/latest/ia64/fsys.html</a></p>
<p>The <strong>__kernel_syscall_via_epc()</strong> kernel entry in <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/ia64/kernel/gate.S#n300">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/ia64/kernel/gate.S#n300</a>
looks roughly like that:</p>
<pre class><code>GLOBAL_ENTRY(__kernel_syscall_via_epc)
  .prologue
  .altrp b6
  .body
  /*
   * Note: the kernel cannot assume that the first two instructions in this
   * bundle get executed.  The remaining code must be safe even if
   * they do not get executed.
   */
  adds r17=-1024,r15       // A
  mov r10=0                // A default to successful syscall execution
  epc                      // B causes split-issue
  ;;
  RSM_PSR_BE_I(r20, r22)   // M2 (5 cyc to srlz.d)
  LOAD_FSYSCALL_TABLE(r14) // X
  ...</code></pre>
<h1 id="the-argument-layout-bug">the argument layout bug</h1>
<p>Digging through <strong>break</strong> vs. <strong>epc</strong> mechanism I found that <strong>ptrace()</strong>
gets the syscall register frame in slightly different states:</p>
<p>for <strong>break</strong> the layout is:</p>
<pre class><code>outputs:
- arg8
- arg7
- arg6
- ...
- arg1

locals:
&lt;none&gt;

inputs:
- NR</code></pre>
<p><strong>epc</strong>:</p>
<pre class><code>outputs:
- arg8
- arg7
- arg6
- ...
- arg1

locals:
- NR

inputs:
&lt;none&gt;</code></pre>
<p>Both are perfectly valid states prepared to pass arguments to callee function.
And both require a <strong>br.call</strong> instruction to rotate <strong>outputs</strong> to the <strong>inputs</strong>
of callee target.</p>
<p>In normal syscall handling case (without <strong>ptrace()</strong> attached) <strong>br.call</strong>
is called for passing the control to syscall handler written in C. All arguments
are present in their <strong>r32,r33,…</strong> locations.</p>
<p>In tracing case <strong>ptrace()</strong> is executed right before <strong>br.call</strong>. There we
need to inspect syscall arguments (and possibly modify on user’s request)
in <strong>outputs regs</strong> part of the active register set.</p>
<p>The bug was in the fact that <strong>ia64</strong>-specific <strong>ptrace()</strong> code assumed that
locals are never present (as in <strong>break</strong> <strong>glibc</strong>’s wrapper case).</p>
<p>Once we know the problem the fix is easy: skip locals and always use <strong>output</strong>
regs when inspecting syscall arguments:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=0ceb1ace4a2778e34a5414e5349712ae4dc41d85">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=0ceb1ace4a2778e34a5414e5349712ae4dc41d85</a></p>
<p>Tl;DR of a patch: <strong>ia64</strong> has a <strong>cr.ifs</strong> register that tells us how many
inputs, local and output regusters are used in current function (register’s
value is maintained by <strong>alloc</strong> and <strong>br.call</strong> / <strong>br.ret</strong> instructions).
Before the change we collected both <strong>locals</strong> + <strong>outputs</strong>, after the change - only <strong>outputs</strong>.</p>
<p>Are we done?</p>
<h1 id="the-error-handling-bug">the error handling bug</h1>
<p>After the above patch applied I ran the <strong>strace</strong> test suite again.
It was a lot healtier with just a few failures. This time the error was in
syscall exit code (also new addition) of <strong>ptrace(PTRACE_SYSCALL_INFO_EXIT)</strong>.
This time sign of <strong>errno</strong> error was wrong.</p>
<p>Here we have a chance to see how <strong>ia64</strong> syscalls return status back to userspace:
two fixed registers are used for that:</p>
<ul>
<li><strong>r10</strong> for fail-or-not status</li>
<li><strong>r8</strong> for status-or-error.</li>
</ul>
<p>Here is the original code to set and get the status:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">long</span> syscall_get_error<span class="op">(</span><span class="kw">struct</span> task_struct <span class="op">*</span>task<span class="op">,</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>                                     <span class="kw">struct</span> pt_regs <span class="op">*</span>regs<span class="op">)</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> regs<span class="op">-&gt;</span>r10 <span class="op">==</span> <span class="op">-</span><span class="dv">1</span> <span class="op">?</span> regs<span class="op">-&gt;</span>r8<span class="op">:</span><span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">long</span> syscall_get_return_value<span class="op">(</span><span class="kw">struct</span> task_struct <span class="op">*</span>task<span class="op">,</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                                            <span class="kw">struct</span> pt_regs <span class="op">*</span>regs<span class="op">)</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> regs<span class="op">-&gt;</span>r8<span class="op">;</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> <span class="dt">void</span> syscall_set_return_value<span class="op">(</span><span class="kw">struct</span> task_struct <span class="op">*</span>task<span class="op">,</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>                                            <span class="kw">struct</span> pt_regs <span class="op">*</span>regs<span class="op">,</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>                                            <span class="dt">int</span> error<span class="op">,</span> <span class="dt">long</span> val<span class="op">)</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>error<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>                <span class="co">/* error &lt; 0, but ia64 uses &gt; 0 return value */</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>                regs<span class="op">-&gt;</span>r8 <span class="op">=</span> <span class="op">-</span>error<span class="op">;</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>                regs<span class="op">-&gt;</span>r10 <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>                regs<span class="op">-&gt;</span>r8 <span class="op">=</span> val<span class="op">;</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>                regs<span class="op">-&gt;</span>r10 <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>6 lines of code. Simple, eh? Can you spot the error?</p>
<p>Note how <strong>syscall_get_error()</strong> does not remove negation
added in <strong>syscall_set_return_value()</strong>.</p>
<p>The fix was obvious:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=61bf318eac2c13356f7bd1c6a05421ef504ccc8a">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=61bf318eac2c13356f7bd1c6a05421ef504ccc8a</a></p>
<p>Surely done now?</p>
<h1 id="signal-handling-bug">signal handling bug</h1>
<p>A few more test failures revealed another fun bug: signal handlers return
wrong signal masks.</p>
<p>In this case failed tests complained about status of blocked signals
in tracing <strong>rt_sigreturn()</strong> syscall.</p>
<p>When signal is delivered to userspace processes memory stack gets an extra
struct that describes delivered signal and a bit of context (on any arch AFAIU):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> sigframe <span class="op">{</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">long</span> arg0<span class="op">;</span> <span class="co">/* signum */</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">long</span> arg1<span class="op">;</span> <span class="co">/* siginfo pointer */</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">long</span> arg2<span class="op">;</span> <span class="co">/* sigcontext pointer */</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> __user <span class="op">*</span>handler<span class="op">;</span> <span class="co">/* pointer to the plabel of the signal handler */</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> siginfo info<span class="op">;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> sigcontext sc<span class="op">;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> sigcontext <span class="op">{</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    sigset_t sc_mask<span class="op">;</span> <span class="co">/* signal mask to restore after handler returns */</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>Somehow <strong>sc_mask</strong> had unexpected value. Was it incorrectly populated by kernel?</p>
<p><strong>ia64</strong> has two userspace stacks:</p>
<ul>
<li>usual C memory stack (tracked by <strong>r12</strong> register), userspace usually
keps there function-local buffers, variables that don’t fit in registers, etc.</li>
<li>register backing store stack (<strong>ar.bsp</strong> and friends point to it), this area is
managed by CPU to maintain rotating registers contents on <strong>br.call</strong> / <strong>br.ret</strong>.
It’s actually quite hard to interpret it’s contents even in steady state due to
fancy alignment restrictions, boundary framing with NaT marking. It’s memory
is also not synchronized with CPUs view of that memory to speed things up. You
almost never want to mess with it for something like passing a struct around.</li>
</ul>
<p>When it’s in <strong>rt_sigreturn()</strong> syscall return that is the simplest way to look at
sigframe on stack. Where stack is present as one of <strong>struct ptrace_syscall_info</strong>
fields:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> ptrace_syscall_info <span class="op">{</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    __u8 op<span class="op">;</span>        <span class="co">/* Type of system call stop */</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    __u32 arch<span class="op">;</span>     <span class="co">/* AUDIT_ARCH_* value; see seccomp(2) */</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    __u64 instruction_pointer<span class="op">;</span> <span class="co">/* CPU instruction pointer */</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    __u64 stack_pointer<span class="op">;</span>    <span class="co">/* CPU stack pointer */</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">union</span> <span class="op">{</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> <span class="op">{</span>    <span class="co">/* op == PTRACE_SYSCALL_INFO_ENTRY */</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>            __u64 nr<span class="op">;</span>       <span class="co">/* System call number */</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>            __u64 args<span class="op">[</span><span class="dv">6</span><span class="op">];</span>  <span class="co">/* System call arguments */</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> entry<span class="op">;</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> <span class="op">{</span>    <span class="co">/* op == PTRACE_SYSCALL_INFO_EXIT */</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>            __s64 rval<span class="op">;</span>     <span class="co">/* System call return value */</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>            __u8 is_error<span class="op">;</span>  <span class="co">/* System call error flag;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="co">                               Boolean: does rval contain</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co">                               an error value (-ERRCODE) or</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="co">                               a nonerror return value? */</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> exit<span class="op">;</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> <span class="op">{</span>    <span class="co">/* op == PTRACE_SYSCALL_INFO_SECCOMP */</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>            __u64 nr<span class="op">;</span>       <span class="co">/* System call number */</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>            __u64 args<span class="op">[</span><span class="dv">6</span><span class="op">];</span>  <span class="co">/* System call arguments */</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>            __u32 ret_data<span class="op">;</span> <span class="co">/* SECCOMP_RET_DATA portion</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="co">                               of SECCOMP_RET_TRACE</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="co">                               return value */</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> seccomp<span class="op">;</span></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>So which of two stacks should be present in <strong>stack_pointer</strong> field? <strong>r12</strong>
or <strong>ar.bspstore</strong>? As a result
our frame is something like that:</p>
<pre class><code>+-------
| ... &lt;registers for outer functions, their cfm, predicates&gt;
+-------
| ... &lt;- ar.bspstore
+-------
| ... &lt;- ar.bsp
| vvv grows down vvv
|
|
| ^^^ grows up ^^^
~~~~~~~~
| ... &lt;- r12
| &lt;signal frame&gt;
| &lt;16-bytes of scratch area&gt;
| &lt;rest of memory stack&gt;
+-------</code></pre>
<p>Kernel had to pick one and picked wrong <strong>ar.bspstore</strong>. It contains no
valid data at all. It consists of leftover values for previous register
flushes and loads.</p>
<p>As a result <strong>ptrace()</strong> looked at a part of register backing store to look up <strong>rt_sigreturn()</strong>.</p>
<p>Once this mismatch became clear the fix was obvious:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7ad1e366167837daeb93d0bacb57dee820b0b898">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=7ad1e366167837daeb93d0bacb57dee820b0b898</a></p>
<p>By then strace testsuite passed all tests o/</p>
<p>Can we cautiosly declare the endeavour done?</p>
<h1 id="plot-twist">plot twist</h1>
<p>Well, strace test suite now started hanging whole box on almost every
testsuite run. Looks like before it did not manage to get that far to destroy
kernel’s internal state. Example crash:</p>
<pre class><code>Unable to handle kernel NULL pointer dereference (address 0000000000000338)
sock_filter-v-X[6171]: Oops 11012296146944 [18]
Modules linked in: usb_storage e1000 acpi_ipmi ipmi_si ipmi_devintf ipmi_msghandler rtc_efi

CPU: 0 PID: 6171 Comm: sock_filter-v-X Tainted: G    B D W         5.12.0-rc2-00003-g97669c51470e-dirty #85
Hardware name: hp server rx3600                   , BIOS 04.03                                                            04/08/2008
psr : 0000121008026010 ifs : 800000000000040b ip  : [&lt;a00000010008d1f1&gt;]    Tainted: G    B D W         (5.12.0-rc2-00003-g97669c51470e-dirty)
ip is at ptrace_stop+0x2b1/0x860
unat: 0000000000000000 pfs : 000000000000040b rsc : 0000000000000003
rnat: 0000000000000000 bsps: 0000000000000000 pr  : 000000255aa66a15
ldrs: 0000000000000000 ccv : 00000000fffffa92 fpsr: 0009804c0270033f
csd : 0000000000000000 ssd : 0000000000000000
b0  : a00000010008d1b0 b6  : a0000001008b1b20 b7  : a00000010000d010
f6  : 000000000000000000000 f7  : 1003e8208208208208209
f8  : 1003effffffffffffffea f9  : 1003e0000000000000033
f10 : 1003e8208208208208209 f11 : 1003effffffffffffffe6
r1  : a000000101906440 r2  : 0000000000000010 r3  : 0000000000000000
r8  : 00000000b3a0d9d1 r9  : 00000000000059d0 r10 : 00000000b3a08001
r11 : 0000000000000001 r12 : e00000010f2d5880 r13 : e00000010f2d0000
r14 : a0000001015c8304 r15 : 00000000deaf1eed r16 : e00000010f2d0000
r17 : e00000010f2d100c r18 : a000000101706e70 r19 : e00000010f2d0018
r20 : 0000000000010289 r21 : e00000010f2d0450 r22 : 0000000000000000
r23 : 0000000000000338 r24 : 000000000000b3a2 r25 : 000000000000b3a2
r26 : e00000010f2d048c r27 : 0000000000010013 r28 : fffffffffff7ffff
r29 : 0000000000120000 r30 : 0000000000000000 r31 : e00000010f2d100c

Call Trace:
 [&lt;a000000100014d10&gt;] show_stack+0x90/0xc0
                                sp=e00000010f2d54b0 bsp=e00000010f2d3738
 [&lt;a000000100015410&gt;] show_regs+0x6d0/0xa40
                                sp=e00000010f2d5680 bsp=e00000010f2d36c8
 [&lt;a0000001000285e0&gt;] die+0x1e0/0x3c0
                                sp=e00000010f2d56a0 bsp=e00000010f2d3688
 [&lt;a00000010005b160&gt;] ia64_do_page_fault+0x820/0xb80
                                sp=e00000010f2d56a0 bsp=e00000010f2d35e8
 [&lt;a00000010000ca00&gt;] ia64_leave_kernel+0x0/0x270
                                sp=e00000010f2d56b0 bsp=e00000010f2d35e8
 [&lt;a00000010008d1f0&gt;] ptrace_stop+0x2b0/0x860
                                sp=e00000010f2d5880 bsp=e00000010f2d3590
 [&lt;a00000010008d8a0&gt;] ptrace_do_notify+0x100/0x120
                                sp=e00000010f2d5880 bsp=e00000010f2d3560
 [&lt;a00000010008d950&gt;] ptrace_notify+0x90/0x1a0
                                sp=e00000010f2d58c0 bsp=e00000010f2d3540
 [&lt;a000000100073700&gt;] do_exit+0x1540/0x1700
                                sp=e00000010f2d58c0 bsp=e00000010f2d34c8
 [&lt;a0000001000287b0&gt;] die+0x3b0/0x3c0
                                sp=e00000010f2d58d0 bsp=e00000010f2d3488</code></pre>
<p>It’s a <strong>NULL</strong> pointer dereference. How hard could it be to nail down and fix
(or at least workaround)?</p>
<p>To make the box less unstable I sprintled a few <strong>if (p == NULL) { WARN_ON(1); return; }</strong>
around. That allowed surviving a few strace testsuite runs in a row. Woohoo!</p>
<p><strong>guppy</strong> was able to survive a few days and then crashed with even more dire
and inscrutable panic.</p>
<p>Before digging into more details I first synced to latest kernel git to ease
upstreaming things bit by bit and using Latest and Greatest code.</p>
<p>Surprisingly latest <strong>linux.git</strong> did not even boot.</p>
<p>One of failures Jens quickly fixed right after successful bisection related
to task-level flag handling:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f5f4fc4649ae542b1a25670b17aaf3cbb6187acc">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f5f4fc4649ae542b1a25670b17aaf3cbb6187acc</a></p>
<p>Another failure was use of atomics against unaligned <strong>bool</strong> struct field
in a <strong>hpsa</strong> disk driver, was also easy to fix with help of Don and others:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=02ec144292bc424a5800d45d4cb472c66e97c520">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=02ec144292bc424a5800d45d4cb472c66e97c520</a></p>
<p>I was “lucky” to find those failures before another kernel release (or another
few years of negligence).</p>
<p>Latest <strong>linux.git</strong> was still crashing the box.</p>
<h1 id="more-kernel-debugging">more kernel debugging</h1>
<p>As a next step I enabled everything I could find related to memory corruption
debugging in linux kernel:</p>
<ul>
<li><strong>CONFIG_VM_DEBUG</strong></li>
<li><strong>page_poison=on</strong></li>
<li><strong>init_on_alloc=1</strong> <strong>init_on_free=1</strong></li>
<li><strong>page_owner=on</strong></li>
<li><strong>hardened_usercopy=1</strong></li>
<li><strong>memblock=debug</strong></li>
<li>various slab debugs</li>
</ul>
<p>As a result I got kernel to unbootable state /o\.</p>
<p>I hoped boot failures were related to underlying problem I observed.
One of the annoyances was that kernel silently crashed and did not
print errors to BMC’s serial output. I disabled most of debugging
flags back and left <strong>page_poison=on</strong> <strong>init_on_alloc=1</strong> <strong>init_on_free=1</strong>.</p>
<p>This allowed catching and fixing some minor warnings like:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f2a419cf495f95cac49ea289318b833477e1a0e2">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f2a419cf495f95cac49ea289318b833477e1a0e2</a>.</p>
<p>After a while (about a day) I started seeing the reports of arbitrarily corrupted
memory:</p>
<pre class><code>pagealloc: memory corruption
000000004a763954: 05 00 00 00 00 00 00 00 f8 b5 b0 ff ff 0f 00 60  ...............`
00000000b3626ed1: 60 b7 b0 ff ff 0f 00 60 50 68 1c 00 08 00 00 20  `......`Ph.....
00000000f59604da: 00 00 00 00 00 00 00 00 00 70 00 00 00 00 00 00  .........p......
00000000345d9313: e3 c2 9b 14 00 00 00 00 aa aa aa aa aa aa aa aa  ................
00000000d092c8b5: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa  ................
...
0000000088df4d5c: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa  ................
00000000f6e761a6: aa aa aa aa aa aa aa aa 45 78 63 65 65 64 65 64  ........Exceeded
0000000000d45288: 20 4d 61 78 53 74 61 72 74 75 70 73 0d 0a 00 aa   MaxStartups....
00000000c40693de: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa  ................
00000000cf8ee6dc: aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa aa  ................
...
000000005fa7b069: aa aa aa aa aa aa aa aa 10 00 00 00              ............
CPU: 1 PID: 25234 Comm: sshd Not tainted 5.12.0-rc2-00010-gd6be88a244a9-dirty #125
Hardware name: hp server rx3600                   , BIOS 04.03                                                            04/08/2008

Call Trace:
 [&lt;a000000100015210&gt;] show_stack+0x90/0xc0
 [&lt;a000000101161760&gt;] dump_stack+0x150/0x1c0
 [&lt;a0000001003f17b0&gt;] __kernel_unpoison_pages+0x3f0/0x400
 [&lt;a0000001003c1dc0&gt;] get_page_from_freelist+0x1460/0x2ca0
 [&lt;a0000001003c6540&gt;] __alloc_pages_nodemask+0x3c0/0x660
 [&lt;a0000001003ecfd0&gt;] alloc_pages_vma+0xb0/0x500
 [&lt;a000000100375580&gt;] wp_page_copy+0xe0/0x15e0
 [&lt;a0000001003799b0&gt;] do_wp_page+0x170/0xa00
 [&lt;a00000010037e0e0&gt;] __handle_mm_fault+0x1960/0x1fe0
 [&lt;a00000010037ea70&gt;] handle_mm_fault+0x310/0x4e0
 [&lt;a00000010005da50&gt;] ia64_do_page_fault+0x1f0/0xb80
 [&lt;a00000010000ca00&gt;] ia64_leave_kernel+0x0/0x270</code></pre>
<p>Yay! Maybe that’s it?</p>
<p>The backtrace tells us it’s a page fault handling code faulting in a page that
used to be in page freelist, but it’s already in a corruptted state: it should
be full of <strong>aa</strong> values, but it clearly has some unrelated data like
<strong>Exceeded MaxStartups</strong>.</p>
<p>I prepared for a deep dive into virtual memory management in *<em>linux</em>:</p>
<ul>
<li>got basic understanding of page fault handling on <strong>ia64</strong>, <strong>TLB</strong> population
(<strong>VHPT</strong>, <strong>TR</strong>, and <strong>TC</strong> registers management)</li>
<li>got basic understanding of memory management layout on <strong>ia64</strong>: where linear
mapping starts (aka “identity” + base offset), where vmalloc() starts it’s
address, how and when it gets freed</li>
<li>got basic understanding of linux 3-4-5 level page tables are maintained
and synced back to architecture-specific <strong>TLB</strong>.</li>
</ul>
<p>And after much debugging I found that this corruption is a bug in debugging
mechanism /o\</p>
<p><strong>init_on_alloc=1</strong>, <strong>init_on_free=1</strong> and <strong>page_poison=on</strong> are in direct
conflict (and a bit of redundancy) with each other:</p>
<ul>
<li>redundancy: if you have freed a page on <strong>init_on_free=1</strong> system then memory
page can be allocated without <strong>memset(0)</strong> even on <strong>init_on_alloc=1</strong> system
because <strong>init_on_free=1</strong> already guarantees it!</li>
<li>conflict: <strong>init_on_free=1</strong> does <strong>memset(0)</strong> while <strong>page_poison=1</strong> does <strong>memset(aa)</strong>.
Which one has more priority?</li>
</ul>
<p>The problem was that <strong>init_on_alloc=1</strong> + <strong>init_on_free=1</strong> + <strong>debug_pagealloc=1</strong>
led to page freeing with <strong>memset(aa)</strong> and allocation without any <strong>memset()</strong> at all.
This caused two problems:</p>
<ul>
<li>reports on corruption where it should not be</li>
<li>return pages with garbage data to the system even if system requested <strong>alloc_page(__GFP_ZERO)</strong></li>
</ul>
<p>In our case <strong>alloc_page(__GFP_ZERO)</strong> was used for page table (<strong>PTE</strong>) allocations
and instead of returning <strong>PTE</strong> of no pages it was full of bits that looked like
pointers to other pages.</p>
<p>Once this conflict was understood it was easy to report the bug and fix
it with help of <strong>mm</strong> folks:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9df65f522536719682bccd24245ff94db956256c">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9df65f522536719682bccd24245ff94db956256c</a></p>
<p>There are many nuances when exactly the bug could happen. For example architecture must
not support <strong>CONFIG_ARCH_SUPPORTS_DEBUG_PAGEALLOC</strong> (<strong>x86_64</strong> was not
affected by the bug). Otherwise different mechanisms kick in.</p>
<p>On a positive side a few month later I managed to fix a mirror image bug
on <strong>x86_64</strong>:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=69e5d322a2fb86173fde8bad26e8eb38cad1b1e9">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=69e5d322a2fb86173fde8bad26e8eb38cad1b1e9</a></p>
<p>I’ll spare you the details why there is a complication of handling static keys
and early parameters in a way that it could go out of sync like that.</p>
<h1 id="another-yak-page_owner">another yak: page_owner</h1>
<p>Linux kernel has a very cool facility enabled by both <strong>CONFIG_PAGE_OWNER=y</strong>
and <strong>page_owner=on</strong> boot option. It’s idea is to keep the history of most recent
callers who freed and who allocated the page including full backtrace and
page flags. You can see full state for each page in <strong>/sys/kernel/debug/page_owner</strong>:</p>
<pre class><code># cat /sys/kernel/debug/page_owner
  ...
  Page allocated via order 0, mask 0x12cc0(GFP_KERNEL|__GFP_NOWARN|__GFP_NORETRY),
   pid 1, ts 651931156 ns, free_ts 0 ns
  PFN 1049310 type Unmovable Block 1024 type Unmovable Flags 0x8000000000000200(sl
  ab|zone=2)
   get_page_from_freelist+0xa31/0xcd0
   __alloc_pages+0x161/0x2b0
   allocate_slab+0x382/0x420
   ___slab_alloc.constprop.0+0x512/0x730
   __slab_alloc.constprop.0+0x90/0xc0
   kmem_cache_alloc+0x3f2/0x430
   kmem_cache_create_usercopy+0x13e/0x2e0
   kmem_cache_create+0x18/0x20
   khugepaged_init+0x20/0x61
   hugepage_init+0x84/0x131
   do_one_initcall+0x41/0x200
   kernel_init_freeable+0x18e/0x1d6
   kernel_init+0x16/0x110
   ret_from_fork+0x1f/0x30
 ...</code></pre>
<p>Initially I hoped to use <strong>page_owner</strong> to dump at corruption detection time
and at random times when I want to see past page history manually (say,
at NULL-corruption detection time).</p>
<p>The problem was that setting <strong>page_owner=on</strong> rendered <strong>ia64</strong>
unbootable. It happened because on <strong>ia64</strong> stack unwinder requires memory
allocation (and gets into infinite recursion) while on other arches it’s not
required.</p>
<p>Fun fact: actually storing stack trace for page owner itself does require
memory allocation as well (on any architecture). It could have a potential
getting into recursion. <strong>page_owner</strong> code tried to prevent it by scanning
current backtrace for duplicate address entries.</p>
<p>I sidestepped <strong>page_owner=on</strong> recursion by storing single bit in currently running
task: <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8e9b16c47680f6e7d6e5864a37f313f905a91cf5">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8e9b16c47680f6e7d6e5864a37f313f905a91cf5</a></p>
<p>It should be slightly faster now.</p>
<p>While I have such a nice corruption reporter I attempted to explore and fix
a few tools available to debug it efficintly:</p>
<ul>
<li>added <strong>page_owner</strong> info reporting on detected page corruption: <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f58bd538e6a2deb2bcdfe527d9ed45643348a4e6">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=f58bd538e6a2deb2bcdfe527d9ed45643348a4e6</a></li>
<li>fixed <strong>page_owner=on</strong> to work the same as <strong>page_owner=1</strong> (for consistency): <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=608b5d668c8ea6734594a401c9adab4093ad9847">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=608b5d668c8ea6734594a401c9adab4093ad9847</a></li>
<li>fixed ia64-specific symbolizer crash on function descriptors: <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=99e729bd40fb3272fa4b0140839d5e957b58588a">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=99e729bd40fb3272fa4b0140839d5e957b58588a</a></li>
</ul>
<h1 id="back-to-strace-killer">back to strace killer</h1>
<p>strace testsuite was still able to kill the box. Example crash looked like:</p>
<pre class><code>Unable to handle kernel paging request at virtual address aaaaaaaaaaaaaab2
swapper/0[0]: Oops 8813272891392 [1]
Modules linked in: acpi_ipmi e1000 usb_storage ipmi_si ipmi_devintf ipmi_msghandler rtc_efi

CPU: 0 PID: 0 Comm: swapper/0 Not tainted 5.12.0-rc2-00010-gd6be88a244a9-dirty #129
Hardware name: hp server rx3600                   , BIOS 04.03                                                            04/08/2008
psr : 0000101008026010 ifs : 8000000000000307 ip  : [&lt;a000000100e8e670&gt;]    Not tainted (5.12.0-rc2-00010-gd6be88a244a9-dirty)
ip is at sk_filter_release_rcu+0x70/0x120
unat: 0000000000000000 pfs : 0000000000000895 rsc : 0000000000000003
rnat: 0000000000000468 bsps: 0000000000001000 pr  : 01606a5694556a55
ldrs: 0000000000000000 ccv : 000000001f020f81 fpsr: 0009804c0270033f
csd : 0000000000000000 ssd : 0000000000000000
b0  : a00000010018fd00 b6  : a000000100e8e600 b7  : e00000003f81c740
f6  : 1003e000000000003ae7e f7  : 1003e0000000002813e10
f8  : 1003e0019aba91335cd31 f9  : 1003e0019b4e1e1313911
f10 : 1003e0000038521a57b7f f11 : 1003e0000000000000000
r1  : a0000001019465c0 r2  : a000000200034004 r3  : 00000000aaaaaaaa
r8  : aaaaaaaaaaaaaab2 r9  : a00000010174d0c0 r10 : ffffffffffa3cd70
r11 : a00000010148bec8 r12 : a000000101607ba0 r13 : a000000101600000
r14 : e000000116287718 r15 : a000000200034040 r16 : a000000100e8e600
r17 : e00000010e6dfe80 r18 : a000000101607bc0 r19 : e000000005808fc0
r20 : e00000010e6dfe80 r21 : 0000000000000000 r22 : e00000010e6dfe80
r23 : e00000010e6dfe80 r24 : e000000005808f78 r25 : 0000000000001f04
r26 : 00000000000cf92c r27 : 0000000000000007 r28 : a00000010174dba8
r29 : 0000000000000007 r30 : 0000000000000007 r31 : 000000000000000a

Call Trace:
 [&lt;a000000100015210&gt;] show_stack+0x90/0xc0
 [&lt;a000000100015910&gt;] show_regs+0x6d0/0xa40
 [&lt;a000000100029420&gt;] die+0x1e0/0x3c0
 [&lt;a00000010005e370&gt;] ia64_do_page_fault+0xb10/0xb80
 [&lt;a00000010000ca00&gt;] ia64_leave_kernel+0x0/0x270
 [&lt;a000000100e8e670&gt;] sk_filter_release_rcu+0x70/0x120
 [&lt;a00000010018fd00&gt;] rcu_core+0x8c0/0x1440
 [&lt;a0000001001908a0&gt;] rcu_core_si+0x20/0x40
 [&lt;a000000101182cb0&gt;] __do_softirq+0x230/0x670
 [&lt;a000000100079d60&gt;] irq_exit+0x180/0x220
 [&lt;a000000100013a70&gt;] ia64_handle_irq+0x1b0/0x360
 [&lt;a00000010000ca00&gt;] ia64_leave_kernel+0x0/0x270
 [&lt;a0000001000143f0&gt;] ia64_pal_call_static+0x90/0xc0
 [&lt;a0000001000150c0&gt;] ia64_pal_halt_light.isra.0+0x40/0x80
 [&lt;a000000100016200&gt;] arch_cpu_idle+0x100/0x1c0
 [&lt;a0000001011818a0&gt;] default_idle_call+0xe0/0x140
 [&lt;a0000001000eb530&gt;] do_idle+0x330/0x4e0
 [&lt;a0000001000ebe30&gt;] cpu_startup_entry+0x50/0x80
 [&lt;a00000010116ded0&gt;] rest_init+0x230/0x250
 [&lt;a000000101490e70&gt;] arch_call_rest_init+0x20/0x40
 [&lt;a000000101491ad0&gt;] start_kernel+0xbf0/0xc20
 [&lt;a00000010116dc60&gt;] start_ap+0x760/0x780
Disabling lock debugging due to kernel taint
Kernel panic - not syncing: Fatal exception
---[ end Kernel panic - not syncing: Fatal exception ]---</code></pre>
<p>This time the victim is a <strong>swapper</strong> thread that happens to execute
deferred <strong>sk_filter_release_rcu</strong> execution: strace test allocated <strong>sk_filter</strong>
and someone else failed to free it. Virtual address <strong>aaaaaaaaaaaaaab2</strong> says
that it’s probably an use-after-free case.</p>
<p>Should be simple to debug, right?</p>
<p>As I already spent A Lot of time spelunking through memory management in
<strong>ia64</strong> I dropped a bit of dead code around <strong>DISCONTIGMEM</strong>:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9187592b96385e5060dfb2b182aa9ec93d5c0332">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=9187592b96385e5060dfb2b182aa9ec93d5c0332</a></p>
<p>From now on <strong>ia64</strong> is just a <strong>SPARSEMEM</strong> architecture (or <strong>FLATMEM</strong> if
you are lucky to get contiguous physical address layout, I am not: <strong>rx3600</strong>
has 1TB gap for me).</p>
<p>I minimized <strong>strace</strong> killer example down to:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;unistd.h&gt;</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;netinet/in.h&gt;</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/socket.h&gt;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;linux/filter.h&gt;</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> sock_filter bpf_filter<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>        BPF_STMT<span class="op">(</span>BPF_RET<span class="op">|</span>BPF_K<span class="op">,</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> sock_fprog prog <span class="op">=</span> <span class="op">{</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span>len <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">.</span>filter <span class="op">=</span> bpf_filter<span class="op">,</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> fd <span class="op">=</span> socket<span class="op">(</span>AF_INET<span class="op">,</span> SOCK_DGRAM<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a>    setsockopt<span class="op">(</span>fd<span class="op">,</span> SOL_SOCKET<span class="op">,</span> SO_ATTACH_FILTER<span class="op">,</span> <span class="op">&amp;</span>prog<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>prog<span class="op">));</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This crashes guppy in a second (usually takes 8 runs):</p>
<pre class><code>$ gcc bug.c -o bug; while ./bug; do echo again; done</code></pre>
<p>The sample program creates IPv4 socket and attackes BPF program to it.
Kernel crashes at the cleanup time.</p>
<p>Socket filters are special in kernel because they use slightly different
virtual memory freeing policy compared to rest of vmalloc()’ed regions:
it’s called <strong>VM_FLUSH_RESET_PERMS</strong>. This flag should eagerly unmap memory
and eagerly flush <strong>TLB</strong>. From my understanding it’s a security feature
that slightly pessimizes performance and does not affect correctness
(modulo bugs we probably observe here).</p>
<p>To get <strong>ia64</strong> box into a fully stable state I ignore any <strong>VM_FLUSH_RESET_PERMS</strong>
mappings with the following hack:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/mm/vmalloc.c</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/mm/vmalloc.c</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -2214,6 +2214,9 @@ static void vm_remove_mappings(struct vm_struct *area, int deallocate_pages)</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    remove_vm_area(area-&gt;addr);</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="va">+   /* workaround mysterious double-free on vmalloc() for bpf. */</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="va">+   return;</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>    /* If this is not VM_FLUSH_RESET_PERMS memory, no need for the below. */</span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>    if (!flush_reset)</span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>        return;</span></code></pre></div>
<p>Unfortunately I don’t know yet why crash happens and can only speculate at
this point. I suspect that <strong>mm</strong> code lacks a barrier somewhere that allows
page reuse before <strong>TLB</strong> flush happens.</p>
<p>To be continued.</p>
<h1 id="parting-words">Parting Words</h1>
<p><strong>strace</strong> has a great test suite to detect all sorts of corner cases in linux kernel.</p>
<p>Random factoids:</p>
<ul>
<li><strong>ia64</strong> linux syscalls start from <strong>1024</strong>.</li>
<li><strong>ia64</strong> got even better <strong>ptrace()</strong> support.</li>
<li><strong>page_owner=on</strong> is now usable on <strong>ia64</strong>!</li>
<li>I still did not get to the bottom of it. But it feels I’m very close :)</li>
<li><strong>VM_FLUSH_RESET_PERMS</strong> is a thing.</li>
<li>It took me about 2 months to get some progress on this problem.</li>
<li>It took <strong>guppy</strong> about 350 reboots to recover from machine lockups. I suspect it’s more
than this machine ever saw in it’s previous life.</li>
<li>Debugging tools can corrupt your data sometimes even if original setup is not supposed to.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on August  7, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>A year on gcc from git</title>
    <link href="http://trofi.github.io/posts/224-a-year-on-gcc-from-git.html" />
    <id>http://trofi.github.io/posts/224-a-year-on-gcc-from-git.html</id>
    <published>2021-03-07T00:00:00Z</published>
    <updated>2021-03-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: A year on gcc from git</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>A year on gcc from git</h1>

            <p>Almost <a href="../posts/213-gcc-10-in-gentoo.html">a year</a> passed since
<strong>gcc-10</strong> arrival in gentoo. This means <strong>gcc-11</strong> will release
very soon!</p>
<p>Around that time I decided to switch
my main workstation to <strong>gcc</strong> on git master branch to see how
long it would survive before it destroys something due to a grave
compiler bug. Nothing like that happened yet :)</p>
<p>Having volatile compiler version has all sorts of nasty consequences:
you could have a library or a binary miscompiled due to some transient
compiler issue that was fixed a day after it was introduced.</p>
<p>My solution to stale binaries is to rebuild all packages periodically.
To ease the load on the system I have a cron job that rebuilds all
the packages older than a month on my system. It has an effect of
upgrading compiler itself once a month and rebuilds about 3% of all
packages daily.</p>
<p>In this post I’ll share a few issues that came up for such a bleeding
edge system. It’s not quite a full list, but it touches majority of
encountered bugs.</p>
<h1 id="shf_gnu_retain-breaks-kernel-boot">SHF_GNU_RETAIN breaks kernel boot</h1>
<p>New <strong>SHF_GNU_RETAIN</strong> section flag managed to break kernel boot:
<a href="https://gcc.gnu.org/PR99113">https://gcc.gnu.org/PR99113</a> (originally reported as <a href="https://sourceware.org/PR27412">https://sourceware.org/PR27412</a>).</p>
<p>The problem: <strong>gcc-11</strong> changed semantics of existing
<strong>__attribute__((__used__))</strong> code (kernel happens to use it a lot):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> s <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">*</span>print_fmt<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> s print_fmt_napi_poll<span class="op">[</span><span class="dv">1</span><span class="op">];</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>__used__<span class="op">))</span> <span class="kw">struct</span> s event_napi_poll <span class="op">=</span> <span class="op">{</span>print_fmt_napi_poll<span class="op">};</span></span></code></pre></div>
<ul>
<li>Before <strong>gcc-11</strong>: variable was placed into <strong>.date</strong> section</li>
<li>In <strong>gcc-11</strong>: variable was placed into <strong>.data.event_napi_poll</strong></li>
</ul>
<p>Normally such a section name change is not a problem for userspace
programs as binutils linker script can handle both names.
But linux kernel has custom linker scripts that did not account for new names.</p>
<p>The fix: <strong>gcc-11</strong> reverted semantic change and now enables it only
with new <strong>__attribute__((__retain__))</strong> attribute: <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=6347f4a0904fce17eedf5c071be6f3c118680290">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=6347f4a0904fce17eedf5c071be6f3c118680290</a></p>
<p>The bug effect: kernel did not boot, kernel build log was full of
unknown section warnings.</p>
<h1 id="fipa-modref-breaks-glibcs-printf">-fipa-modref breaks glibc’s printf</h1>
<p>New <strong>-fipa-modref</strong> gcc optimisation managed to break <strong>glibc</strong>:
<a href="https://sourceware.org/PR26690">https://sourceware.org/PR26690</a> (originally reported as <a href="https://gcc.gnu.org/PR97264">https://gcc.gnu.org/PR97264</a>).</p>
<p>The problem: <strong>glibc</strong> had an interesting aliasing violation bug
in <strong>vfprintf</strong> family of functions. In it’s simpler form bug looked like that:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> vfprintf_internal<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> format_string<span class="op">,</span> <span class="op">...)</span> <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> p <span class="op">=</span> format_string<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// [1]: somewhere in another helper function:</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">++(</span><span class="dt">const</span> unsinged <span class="dt">char</span> <span class="op">**)&amp;</span>p<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// continue using 'p':</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<ul>
<li>Before <strong>gcc-11</strong>: variable <strong>p</strong> was advanced with <strong>[1]</strong></li>
<li>In <strong>gcc-11</strong>: variable <strong>p</strong> did not change with <strong>[1]</strong> as gcc assumed
<strong>char</strong> and <strong>unsinged char</strong> (and their pointers) are two different
types that don’t alias and thus operations on them are independent.</li>
</ul>
<p>The fix: the aliasing was fixed in <strong>glibc</strong> with <a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=c0e9ddf59e73e21afe15fca4e94cf7b4b7359bf2">https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=c0e9ddf59e73e21afe15fca4e94cf7b4b7359bf2</a></p>
<p>The bug effect: <strong>uname -p</strong> did hang up and caused
<strong>gcc-11</strong> Gentoo users some inconvenience: <a href="https://bugs.gentoo.org/750992">https://bugs.gentoo.org/750992</a>.</p>
<p>This bug is very scary: it specifically breaks digit parsing
in format strings like <strong>“%10s”</strong> and has the potential of causing
silent data corruption.</p>
<h1 id="fipa-modref-breaks-return-value-optimization">-fipa-modref breaks return value optimization</h1>
<p>New <strong>-fipa-modref</strong> gcc optimisation managed to break <strong>libsass</strong>
library tests and exposed a compiler flaw: <a href="https://gcc.gnu.org/PR98499">https://gcc.gnu.org/PR98499</a></p>
<p>The sample example is:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c++"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> string <span class="op">{</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">char</span> <span class="op">*</span> _M_buf<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">// local store</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">char</span> _M_local_buf<span class="op">[</span><span class="dv">16</span><span class="op">];</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  string<span class="op">()</span> <span class="op">:</span> _M_buf<span class="op">(</span>_M_local_buf<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">~</span>string<span class="op">()</span> <span class="op">{</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>_M_buf <span class="op">!=</span> _M_local_buf<span class="op">)</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>      <span class="fu">__builtin_trap</span><span class="op">();</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> string dir_name<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> string<span class="op">();</span> <span class="op">}</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>   <span class="op">...</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>   string s <span class="op">=</span> dir_name<span class="op">();</span> </span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>   <span class="op">...</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Before <strong>gcc-11</strong>:</p>
<pre class><code>$ g++-10.2.0 -O2 main.cc -o a &amp;&amp; ./a
&lt;ok&gt;</code></pre>
<p>In <strong>gcc-11</strong>:</p>
<pre class><code>$ g++-11.0.0 -O2 main.cc -o a &amp;&amp; ./a
Illegal instruction     (core dumped) ./a</code></pre>
<p><strong>gcc-11</strong> managed to optimize <strong>if (_M_buf != _M_local_buf) __builtin_trap();</strong>
into <strong>__builtin_trap();</strong> instead of expected no-op. It happened because <strong>gcc</strong>
<strong>moderf</strong> analysis wrongly assumed that if <strong>s</strong> is a local variable then
it’s <strong>s._M_buf</strong> is also a local variable and never escapes.</p>
<p>Unfortunately Return Value Optimization effectively turns local variables
into non-local variables as they escape outside the function they are defined.</p>
<p>The fix: <strong>gcc</strong> was fixed to make less optimistic escaping rules for values
touched by <strong>RVO</strong>: <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=11056ab7687f7156846e93557c9171b77713bd7e">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=11056ab7687f7156846e93557c9171b77713bd7e</a>.</p>
<p>Longer term <strong>gcc</strong> will improve on <strong>RVO</strong> tracking: <a href="https://gcc.gnu.org/PR98925">https://gcc.gnu.org/PR98925</a></p>
<p>The bug effect: <a href="https://github.com/sass/libsass">libsass</a> tests started
failing for <a href="https://github.com/jakubfijalkowski/hlibsass">libsass haskell bindings</a>.</p>
<p>It took me quite a while (perhaps a week of winter evenings) to extract the reasonably
sized test case. It was very elusive because bug only appears in cases when <strong>inliner</strong>
did not do a reasonable job due to various corner cases while <strong>ipa-modref</strong> did
(that’s why actual test case is full of <strong>__attribute__((noinline))</strong> annotations.</p>
<p>I also used it as an opportunity to explore and fix my first non-trivial <strong>gcc</strong> bug :)</p>
<h1 id="firefox-deadlock-in-ltopgo">firefox deadlock in LTO+PGO</h1>
<p>New change in <strong>-fprofile-generate</strong> around most frequent value
tracking introduced a deadlock scenario in <strong>firefox</strong>:
<a href="https://gcc.gnu.org/PR97461">https://gcc.gnu.org/PR97461</a>. Firefox’s code is similar to:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Override default malloc with it's own allocator</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span> malloc<span class="op">(</span><span class="dt">size_t</span> size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// something with TOPN profile, like:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> per_bucket_implementation<span class="op">[</span>size <span class="op">%</span> N<span class="op">]();</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="op">*</span> p <span class="op">=</span> malloc<span class="op">(</span><span class="dv">8</span><span class="op">);</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> p <span class="op">!=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Code, generated by <strong>gcc</strong> in <strong>-fprofile-generate</strong> mode converts it
to:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">// inserted by gcc</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> counter __gcov3_malloc<span class="op">;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">// Override default malloc with it's own allocator</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span> malloc<span class="op">(</span><span class="dt">size_t</span> size<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// something with TOPN profile, like:</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// inserted by gcc</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    gcov_topn_add_value<span class="op">(</span>__gcov3_malloc<span class="op">,</span> pper_bucket_implementation<span class="op">[</span>size <span class="op">%</span> N<span class="op">]);</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> per_bucket_implementation<span class="op">[</span>size <span class="op">%</span> N<span class="op">]();</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="op">*</span> p <span class="op">=</span> malloc<span class="op">(</span><span class="dv">8</span><span class="op">);</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> p <span class="op">!=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>New implementation of <strong>gcov_topn_add_value</strong> now uses dynamic
memory allocation: <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=871e5ada6d53d5eb">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=871e5ada6d53d5eb</a>
(previously it used static (<strong>GCOV_TOPN_VALUES = 4</strong>).</p>
<p>This started causing infinite recursion:
<strong>malloc() -&gt; gcov_topn_add_value() -&gt; malloc()</strong>.</p>
<p>The fix: <strong>gcc</strong>’s <strong>gcov</strong> library now uses <strong>mmap()</strong> directly to
track <strong>TOPN</strong> counters and avoids <strong>malloc()</strong>:
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=00d79dc4be0b86ec564cfa2b32c47de6c07449e6">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=00d79dc4be0b86ec564cfa2b32c47de6c07449e6</a></p>
<h1 id="array-attributes-typecheck">Array attributes typecheck</h1>
<p><strong>gcc</strong> failed to compile <strong>emacs-27.1</strong> that uses unusual <strong>VLA</strong> declaration
in function parameters: <a href="https://gcc.gnu.org/PR97413">https://gcc.gnu.org/PR97413</a></p>
<pre class><code>$ cat fns.c
int a(long b, const int a1[b], long c, const int a2[c], int a3[c]);

$ gcc-11.0.0 -c fns.c.c
fns.c.c:1:1: error: wrong number of arguments specified for 'access' attribute
    1 | int a(long b, const int a1[b], long c, const int a2[c], int a3[c]);
      | ^~~
fns.c.c:1:1: note: expected between 1 and 3, found 4</code></pre>
<p>The fix: <strong>gcc</strong> now correctly tracks function attributes:
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=34efa5c2a84a8c7c7beb855dec24a321eebcbd6b">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=34efa5c2a84a8c7c7beb855dec24a321eebcbd6b</a></p>
<h1 id="webkit-miscompilation">Webkit miscompilation</h1>
<p><strong>gcc</strong> incorrectly compiled <strong>webkit-gtk-2.28.4</strong> around placement new:
<a href="https://gcc.gnu.org/PR98130">https://gcc.gnu.org/PR98130</a>. The following code generates a crashing program:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c++"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;new&gt;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">int</span> <span class="op">*</span>T<span class="op">;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="dt">unsigned</span> <span class="dt">char</span> storage<span class="op">[</span><span class="kw">sizeof</span> <span class="op">(</span>T<span class="op">)]</span> <span class="kw">alignas</span> <span class="op">(</span>T<span class="op">);</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> T <span class="op">*</span>p <span class="op">=</span> <span class="op">(</span>T <span class="op">*)</span> storage<span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="at">static</span> <span class="kw">inline</span> <span class="ex">__attribute__((__always_inline__))</span> <span class="dt">void</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>foo <span class="op">(</span>T value<span class="op">)</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">new</span> <span class="op">(</span>p<span class="op">)</span> T<span class="op">(</span>value<span class="op">);</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>main <span class="op">()</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> a<span class="op">;</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>  foo <span class="op">(&amp;</span>a<span class="op">);</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!*</span>p<span class="op">)</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    <span class="fu">__builtin_abort</span> <span class="op">();</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <strong>gcc-11</strong> assumed that <strong>new (p) T(value);</strong> has no
side-effect and removed ’<em>p = value’ part entirely as a
dead store as it did not know ifp</em>* is dereferenced.</p>
<p>The fix: <strong>gcc-11</strong> avoids the optimization for placement operator new:
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=78c4a9feceaccf487516aa1eff417e0741556e10">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=78c4a9feceaccf487516aa1eff417e0741556e10</a></p>
<p>That was not the only <strong>webkit</strong> miscompilation related to pointer
handling.</p>
<h1 id="unhandled-template-specialization">Unhandled template specialization</h1>
<p>A few programs based on <strong>gtkmm</strong> library failed to type check:
<a href="https://gcc.gnu.org/PR98115">https://gcc.gnu.org/PR98115</a>. In my case it was <strong>pavucontrol</strong>.
Small examle:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>template <span class="op">&lt;</span>class<span class="op">&gt;</span> class Stringify<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>template <span class="op">&lt;</span><span class="dt">long</span> N<span class="op">&gt;</span> class Stringify<span class="op">&lt;</span><span class="dt">const</span> <span class="dt">char</span><span class="op">[</span>N<span class="op">]&gt;;</span></span></code></pre></div>
<pre class><code>$ g++ layout.ii -c
layout.ii:2:25: error: partial specialization ‘class Stringify&lt;const char [N]&gt;’ is not more specialized than [-fpermissive]
    2 | template &lt;long N&gt; class Stringify&lt;const char[N]&gt;;
      |                         ^~~~~~~~~~~~~~~~~~~~~~~~
layout.ii:1:24: note: primary template ‘template&lt;class&gt; class Stringify’
    1 | template &lt;class&gt; class Stringify;
      |                        ^~~~~~~~~</code></pre>
<p><strong>gcc</strong> considered <strong>class</strong> equally unspecialized to <strong>long N</strong>.</p>
<p>The fix: tweak type comparison in <strong>gcc</strong>’s type checker:
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=9d0eb0ae948f0fbee208cfb9a86133abea650f81">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=9d0eb0ae948f0fbee208cfb9a86133abea650f81</a></p>
<h1 id="overriding-target-attribute-behaviour">Overriding target attribute behaviour</h1>
<p>At some point <strong>gcc</strong> failed <strong>grub</strong> linking with very obscure linker
failure. I’ll provide only the source example without linker failure:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">// build as:</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">//    gcc-11.0.0 -O1 -mcmodel=large -S a.c</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">void</span> grub_memmove<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>__target__<span class="op">(</span><span class="st">&quot;bmi2&quot;</span><span class="op">)))</span> <span class="dt">void</span> a_bmi<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">// expect:</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">//   movabsq $grub_memmove, %rbx</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>  <span class="co">//   call    *%rbx</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// actual (bug):</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">//   call    grub_memmove</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(;;)</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    grub_memmove<span class="op">();</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <strong>gcc</strong> effectively removed <strong>-mcmodel=large</strong> due to presence
of <strong>__attribute__((__target__(“bmi2”)))</strong> and generated invalid
assembly (<strong>-mcmodel=medium</strong>, assumed <strong>.text</strong> is within 4GB reach).</p>
<p>The fix: <strong>gcc</strong> was fixed not to ignore <strong>-mcmodel=</strong> and friends
when overriding target attributes are used: <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5">https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=8f1cb70d7ca6a8da7f6bc7f43fb5e758c0ce88b5</a></p>
<p>This was a nasty bug. We were lucky that <strong>gcc</strong> managed to generate
a relocation that linker does not understand instead of silently
generating invalid <strong>grub</strong>.</p>
<h1 id="other-minor-gcc-bugs">Other minor gcc bugs</h1>
<p>A few more smaller bugs if you like that kind of stuff:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR98753">https://gcc.gnu.org/PR98753</a>: <strong>-Wfree-nonheap-object</strong> false positive</li>
<li><a href="https://gcc.gnu.org/PR98286">https://gcc.gnu.org/PR98286</a>: <strong>g++</strong> accepts <strong>void d(void) { typename foo; }</strong> as valid code</li>
<li><a href="https://gcc.gnu.org/PR98306">https://gcc.gnu.org/PR98306</a>: <strong>g++</strong> accepts invalid template code as valid</li>
<li><a href="https://gcc.gnu.org/PR97615">https://gcc.gnu.org/PR97615</a>: dolphin ICE in SLP (vectorization patterns need a tweak)</li>
<li><a href="https://gcc.gnu.org/PR96863">https://gcc.gnu.org/PR96863</a>: dolphin varasm ICE</li>
<li><a href="https://gcc.gnu.org/PR97206">https://gcc.gnu.org/PR97206</a>: array typecheck bug</li>
<li><a href="https://sourceware.org/PR27004">https://sourceware.org/PR27004</a>: glibc tls reference bug</li>
<li><a href="https://gcc.gnu.org/PR98403">https://gcc.gnu.org/PR98403</a>: grub build hangup</li>
<li><a href="https://gcc.gnu.org/PR98597">https://gcc.gnu.org/PR98597</a>: ICE in print_mem_ref</li>
<li><a href="https://gcc.gnu.org/PR97830">https://gcc.gnu.org/PR97830</a>: iCE in sccvn</li>
</ul>
<h1 id="parting-words">Parting words</h1>
<p>Running a compiler from a development branch is a lot of fun. Every
compiler upgrade fixed some existing bugs and introduced new ones.
It is important to make sure fixes are intentional and not just
masking bugs by other changes. And always keep a backup ready.
You will need it.</p>
<p>Many of the above regressions were not caught with regression tests
as they were frequently not trivial feature interactions. Real
world applications keep surprising <strong>gcc</strong>.</p>
<p><a href="https://www.gentoo.org/">Gentoo</a> makes it very easy to break
(and fix!) your system if you really want it. It’s perhaps the
primary reason I keep using it for about 15 years. You might want
to give it a try as well :)</p>
<p>Have fun!</p>

<div class="info">
    Posted on March  7, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Delay Slots strike back</title>
    <link href="http://trofi.github.io/posts/223-delay-slots-strike-back.html" />
    <id>http://trofi.github.io/posts/223-delay-slots-strike-back.html</id>
    <published>2021-02-27T00:00:00Z</published>
    <updated>2021-02-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Delay Slots strike back</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Delay Slots strike back</h1>

            <p>Jeroen found another problem on <strong>hppa</strong> (<strong>PA-RISC</strong>) after switch
to <strong>gcc-10</strong>: <strong>Python-3.9.0b3</strong> started crashing at build time:</p>
<pre class><code>$ ./configure ... --host=hppa2.0-unknown-linux-gnu ...
$ make
...

if test $? -ne 0 ; then \
echo &quot;generate-posix-vars failed&quot; ; \
rm -f ./pybuilddir.txt ; \
exit 1 ; \
fi
Python path configuration:
  PYTHONHOME = (not set)
  PYTHONPATH = (not set)
  program name = './python'
  isolated = 0
  environment = 0
  user site = 1
  import site = 0
  sys._base_executable = '/var/tmp/portage/dev-lang/python-3.9.0_beta3/work/Python-3.9.0b3/python'
  sys.base_prefix = '/usr'
  sys.base_exec_prefix = '/usr'
  sys.platlibdir = 'lib'
  sys.executable = '/var/tmp/portage/dev-lang/python-3.9.0_beta3/work/Python-3.9.0b3/python'
  sys.prefix = '/usr'
  sys.exec_prefix = '/usr'
  sys.path = [
    '/usr/lib/python39.zip',
    '/var/tmp/portage/dev-lang/python-3.9.0_beta3/work/Python-3.9.0b3/Lib',
    '/var/tmp/portage/dev-lang/python-3.9.0_beta3/work/Python-3.9.0b3/none\n',
  ]
Fatal Python error: init_fs_encoding: failed to get the Python codec of the filesystem encoding
Python runtime state: core initialized
Traceback (most recent call last):
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 1007, in _find_and_load
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 161, in __exit__
  File &quot;&lt;frozen importlib._bootstrap&gt;&quot;, line 116, in release
RuntimeError: cannot release un-acquired lock
generate-posix-vars failed
make: *** [Makefile:611: pybuilddir.txt] Error 1</code></pre>
<p>We have two strange errors here:</p>
<ol type="1">
<li><strong>Fatal Python error: init_fs_encoding: failed to get the Python codec of the filesystem encoding</strong></li>
<li><strong>RuntimeError: cannot release un-acquired lock</strong></li>
</ol>
<p>Both errors seem unrelated. They signal internal inconsistency in the interpreter.</p>
<h1 id="debugging">Debugging</h1>
<p>Is it a <strong>gcc</strong> bug? I usually assume it’s not and try to find inconsisyency
in the program. If it’s luck I’ll find the bug in the program. Otherwise I’ll
get a small reproducer to fix the compiler.</p>
<p>First, I double-checked it’s a <strong>gcc-10 -O2</strong>:</p>
<pre class><code># on hppa host
# CC=gcc-10.1.0 CFLAGS=-O2 emerge -v1 dev-lang/python:3.9
&lt;fails&gt;
# CC=gcc-10.1.0 CFLAGS=-O1 emerge -v1 dev-lang/python:3.9
&lt;works&gt;
# CC=gcc-9.3.0 CFLAGS=-O2 emerge -v1 dev-lang/python:3.9
&lt;works&gt;</code></pre>
<p>The bug is reproducible. Assuming it’s an obscure python bug I tried
<strong>AddressSanitizer</strong> and <strong>valigrind</strong> on <strong>amd64</strong>. Neither reported
any relevant errors. <strong>valgrind</strong> found a seemingly legitimate
<strong>use-after-free</strong>: <a href="https://bugs.gentoo.org/729570#c8">https://bugs.gentoo.org/729570#c8</a>.</p>
<p><strong>–with-valgrind</strong> makes that <strong>valgrind</strong> report go away.
It also makes original bug away. Which is not very useful. I expected
some diagnostic that would report heap corruption.</p>
<p>Falling back to original setup. We need to find a function where input
is the same but the output is different.</p>
<p>After much <strong>printf</strong> poking I found simple way to observe the problem:</p>
<pre class><code>$ git init .; git add .; git commit -m &quot;initial state&quot;
$ ./configure ... --host=hppa2.0-unknown-linux-gnu ...
$ make regen-importlib
$ git diff
--- a/Python/importlib_external.h
+++ b/Python/importlib_external.h
@@ -172,7 +172,7 @@ const unsigned char _Py_M__importlib_bootstrap_external[] = {
     83,0,113,44,100,3,124,0,102,2,83,0,41,4,122,32,
     82,101,112,108,97,99,101,109,101,110,116,32,102,111,114,32,
     111,115,46,112,97,116,104,46,115,112,108,105,116,40,41,46,
-    233,1,0,0,0,41,1,90,8,109,97,120,115,112,108,105,
+    114,15,0,0,0,41,1,90,8,109,97,120,115,112,108,105,
     116,218,0,41,6,114,23,0,0,0,114,31,0,0,0,218,
     10,114,112,97,114,116,105,116,105,111,110,114,35,0,0,0,
     218,8,114,101,118,101,114,115,101,100,218,6,114,115,112,108,
...</code></pre>
<p>This output means that freshly built interpreter generates bytecode
slightly different from already pre-generated. The diff is not expected
as building python with <strong>-O1</strong> produces no diff on the same test.</p>
<p>This is a simple enough test to move debugging from debugging on
<strong>hppa</strong> host to <strong>amd64</strong> host. With <strong>binfmt_misc</strong> wrappers I
was able to use exatly the same build commands on <strong>amd64</strong> to get
the same bytecode diff.</p>
<h1 id="shrinking-the-delta-down">Shrinking the delta down</h1>
<p>To narrow down on the trigger I wanted to find smallest piece of code
to build with <strong>-O1</strong> to see the bug disappear (while rest of code is
built with <strong>-O2</strong>).</p>
<p>Python build system outputs exact commands used to generate everything.
I dumped all commands and tweaked <strong>-O2</strong> to <strong>-O1</strong> in a binary search
fashion:</p>
<pre class><code>$ make clean
$ make | tee build.sh
hppa2.0-unknown-linux-gnu-gcc -c -Wno-unused-result -Wsign-compare -DNDEBUG  -O2 -fdelayed-branch -frecord-gcc-switches -fwrapv   -std=c99 -Wextra -Wno-unused-result -Wno-unused-parameter -Wno-missing-field-initializers -Werror=implicit-function-declaration -fvisibility=hidden  -I./Include/internal  -I. -I./Include -I/usr/include/ncursesw  -fPIC -DPy_BUILD_CORE -o Programs/python.o ./Programs/python.c
hppa2.0-unknown-linux-gnu-gcc -c -Wno-unused-result -Wsign-compare -DNDEBUG  -O2 -fdelayed-branch -frecord-gcc-switches -fwrapv   -std=c99 -Wextra -Wno-unused-result -Wno-unused-parameter -Wno-missing-field-initializers -Werror=implicit-function-declaration -fvisibility=hidden  -I./Include/internal  -I. -I./Include -I/usr/include/ncursesw  -fPIC -DPy_BUILD_CORE -o Parser/acceler.o Parser/acceler.c
...
./Programs/_freeze_importlib zipimport \
./Lib/zipimport.py \
./Python/importlib_zipimport.h.new
python3.9 ./Tools/scripts/update_file.py ./Python/importlib_zipimport.h ./Python/importlib_zipimport.h.new</code></pre>
<p>Now I can just edit <strong>build.sh</strong> slightly and rerun it. To avoid
recompilation impact I used <strong>ccache</strong> shadows for <strong>hppa2.0-unknown-linux-gnu-gcc</strong>:</p>
<pre class><code>$ which hppa2.0-unknown-linux-gnu-gcc
/usr/lib/ccache/bin/hppa2.0-unknown-linux-gnu-gcc</code></pre>
<p>That way our “full rebuild” is as cheap as incremental rebuild:</p>
<pre class><code>$ time bash build.sh
real 0m2,258s
user 0m1,673s
sys  0m0,595s</code></pre>
<p>2.5 seconds on my 10 years old machine. That gives us very
interactive debugging environment.</p>
<p>After a bit of poking I found that rebuilding <strong>Objects/longobject.c</strong>
with <strong>-O1</strong> is enough to make bug disappear:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/build.sh</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/build.sh</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -39 +39 @@ hppa2.0-unknown-linux-gnu-gcc -c -Wno-unused-result -Wsign-compare -DNDEBUG  -O2</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="st">-hppa2.0-unknown-linux-gnu-gcc ... -O2 ... Objects/longobject.c</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="va">+hppa2.0-unknown-linux-gnu-gcc ... -O1 ... Objects/longobject.c</span></span></code></pre></div>
<p>Now we can use advanced pragmas and attributes to re-enable <strong>-O2</strong>
only for subset of <strong>Objects/longobject.c</strong>. The tools are:</p>
<ol type="1">
<li><strong>#pragma GCC push_options</strong> / <strong>#pragma GCC optimize(2)</strong> / <strong>#pragma GCC pop_options</strong>:
change optimization level only for a subset of functions in a file to narrow down the code
which triggers problematic behaviour.</li>
<li><strong>__attribute__((noipa))</strong>: make a function
opaque to inliner as if it was in a separate compilation unit. Useful when shrinking test
example down to a single file.</li>
</ol>
<p>Usage example looks like that:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Objects/longobject.c</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Objects/longobject.c</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,3 +1,5 @@</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="va">+#pragma GCC push_options</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="va">+#pragma GCC optimize(2)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a> /* Long (arbitrary precision) integer object implementation */</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a> /* XXX The functional organization of this file is terrible */</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -3009,6 +3011,7 @@ PyLong_AsDouble(PyObject *v)</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    if a == b, return 0</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    if a &gt; b, return a positive number */</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a> static Py_ssize_t</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a> long_compare(PyLongObject *a, PyLongObject *b)</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -3027,6 +3030,8 @@ long_compare(PyLongObject *a, PyLongObject *b)</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>     return sign;</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="va">+static PyObject *</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="va">+long_richcompare(PyObject *self, PyObject *other, int op) __attribute__((noipa));</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a> static PyObject *</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a> long_richcompare(PyObject *self, PyObject *other, int op)</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -5807,3 +5812,4 @@ _PyLong_Fini(PyThreadState *tstate)</span></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>     }</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a><span class="va">+#pragma GCC pop_options</span></span></code></pre></div>
<p>With the above tricks I arrived at <strong>long_richcompare()</strong>. I could not see the immediate
bug in the code. It looks very clean and simple.</p>
<h1 id="shrinking-down-test-example">Shrinking down test example</h1>
<p><strong>long_richcompare()</strong> implements a comparison operator for ‘int’
class (arbitrary precision integer) in python. It’s a simple
mathematical operation.</p>
<p>I added a few <strong>printf()</strong> statements to extract exact exact inputs/outputs
where <strong>long_richcompare()</strong> changes it’s behaviour. It was <strong>long_richcompare(0xFFFFffff, 1, EQ)</strong>.</p>
<p>The full extracted example was:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="co">   The test is extracted from Python-3.9.0 miscompilation</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="co">   on hppa2.0: https://bugs.gentoo.org/729570</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">   Original bug happens as an invalid bytecode generation</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="co">   due to bad results from 'long_richcompare(0xFFFFffff, 1, EQ)' calls.</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="co">Failure example:</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="co">  $ hppa2.0-unknown-linux-gnu-gcc -lm -Wsign-compare -Wall -O1 bug_test.c -o good-bug</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="co">  $ hppa2.0-unknown-linux-gnu-gcc -lm -Wsign-compare -Wall -O2 bug_test.c -o bad-bug</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="co">  $ ./good-bug</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="co">  long_richcompare(2, 1, EQ) = FALSE (expect FALSE)</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="co">  $ ./bad-bug</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="co">  long_richcompare(2, 1, EQ) = TRUE (expect FALSE)</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="co">*/</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="co">// We use '__attribute__((noipa));' aggressively to simulate</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="co">// unavailable function definitions from outside translation units.</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> cmp<span class="op">(</span><span class="dt">int</span> <span class="op">*</span>lhs<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>rhs<span class="op">)</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> sign <span class="op">=</span> <span class="op">*</span>lhs <span class="op">-</span> <span class="op">*</span>rhs<span class="op">;</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">// semantically this should be 'return 0;' but this condition is not</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>    <span class="co">// supposed to trigger on our input data.</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>sign <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sign<span class="op">;</span></span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> yes<span class="op">(</span><span class="dt">void</span><span class="op">)</span> __attribute__<span class="op">((</span>noipa<span class="op">));</span></span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> yes<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> long_richcompare<span class="op">(</span><span class="dt">int</span> <span class="op">*</span>self<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>other<span class="op">,</span> <span class="dt">int</span> op<span class="op">)</span> __attribute__<span class="op">((</span>noipa<span class="op">));</span></span>
<span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> long_richcompare<span class="op">(</span><span class="dt">int</span> <span class="op">*</span>self<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>other<span class="op">,</span> <span class="dt">int</span> op<span class="op">)</span></span>
<span id="cb9-37"><a href="#cb9-37" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb9-38"><a href="#cb9-38" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> result<span class="op">;</span></span>
<span id="cb9-39"><a href="#cb9-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-40"><a href="#cb9-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>yes<span class="op">()</span> <span class="op">||</span> <span class="op">!</span>yes<span class="op">())</span></span>
<span id="cb9-41"><a href="#cb9-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-42"><a href="#cb9-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-43"><a href="#cb9-43" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>self <span class="op">==</span> other<span class="op">)</span></span>
<span id="cb9-44"><a href="#cb9-44" aria-hidden="true" tabindex="-1"></a>        result <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-45"><a href="#cb9-45" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb9-46"><a href="#cb9-46" aria-hidden="true" tabindex="-1"></a>        result <span class="op">=</span> cmp<span class="op">(</span>self<span class="op">,</span> other<span class="op">);</span></span>
<span id="cb9-47"><a href="#cb9-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-48"><a href="#cb9-48" aria-hidden="true" tabindex="-1"></a>    <span class="co">// has to force jump table</span></span>
<span id="cb9-49"><a href="#cb9-49" aria-hidden="true" tabindex="-1"></a>    <span class="cf">switch</span> <span class="op">(</span>op<span class="op">)</span> <span class="op">{</span></span>
<span id="cb9-50"><a href="#cb9-50" aria-hidden="true" tabindex="-1"></a>        <span class="co">// only 0 case is used on actual data</span></span>
<span id="cb9-51"><a href="#cb9-51" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="cf">return</span> <span class="op">(</span>result <span class="op">==</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb9-52"><a href="#cb9-52" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-53"><a href="#cb9-53" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-54"><a href="#cb9-54" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-55"><a href="#cb9-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">5</span><span class="op">:</span> <span class="cf">if</span> <span class="op">(</span>result <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span> <span class="cf">else</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb9-56"><a href="#cb9-56" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span>
<span id="cb9-57"><a href="#cb9-57" aria-hidden="true" tabindex="-1"></a>            __builtin_unreachable<span class="op">();</span></span>
<span id="cb9-58"><a href="#cb9-58" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb9-59"><a href="#cb9-59" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-60"><a href="#cb9-60" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-61"><a href="#cb9-61" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb9-62"><a href="#cb9-62" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-63"><a href="#cb9-63" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb9-64"><a href="#cb9-64" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> l <span class="op">=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb9-65"><a href="#cb9-65" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> r <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb9-66"><a href="#cb9-66" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-67"><a href="#cb9-67" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> res <span class="op">=</span> long_richcompare<span class="op">(&amp;</span>l<span class="op">,</span> <span class="op">&amp;</span>r<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb9-68"><a href="#cb9-68" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;long_richcompare(2, 1, EQ) = %s (expect FALSE)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> res <span class="op">?</span> <span class="st">&quot;TRUE&quot;</span> <span class="op">:</span> <span class="st">&quot;FALSE&quot;</span><span class="op">);</span></span>
<span id="cb9-69"><a href="#cb9-69" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Note: it’s not a real comparison anymore. <strong>cmp()</strong> is an elaborate no-op.
This file is very easy to trace through and verify that it has no problems
related to undefined behaviour.</p>
<p>I asked <strong>GCC</strong> developers for help in <a href="https://gcc.gnu.org/PR96015">https://gcc.gnu.org/PR96015</a> and Eric
immediately suggested trying <strong>-fno-delayed-branch</strong> to see if it makes a
difference. It did!</p>
<p>Using <strong>-fno-delayed-branch</strong> allowed me to simplify the example even further
with <strong>cvise</strong>. It produced the following example:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> b<span class="op">,</span> c<span class="op">;</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> a<span class="op">()</span> __attribute__<span class="op">((</span>noipa<span class="op">));</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> a<span class="op">(</span><span class="dt">int</span> <span class="op">*</span>d<span class="op">,</span> <span class="dt">int</span> <span class="op">*</span>f<span class="op">,</span> <span class="dt">int</span> g<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> e<span class="op">;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>d <span class="op">==</span> f<span class="op">)</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    e <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> <span class="co">// never gets here on our input data</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">else</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    e <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> <span class="co">// always gets here on our input data</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> <span class="op">(</span>g<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> e<span class="op">;</span> <span class="co">// 'return 1'; always gets here on our input data</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">case</span> <span class="dv">5</span><span class="op">:</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>e<span class="op">)</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="dv">10</span><span class="op">;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">default</span><span class="op">:</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>    __builtin_unreachable<span class="op">();</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> a<span class="op">(&amp;</span>b<span class="op">,</span> <span class="op">&amp;</span>c<span class="op">,</span> <span class="dv">0</span><span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<pre class><code>$ hppa2.0-unknown-linux-gnu-gcc -O2 bug_test.c -o bad; ./bad; echo $?
0
$ hppa2.0-unknown-linux-gnu-gcc -O2 bug_test.c -o good -fno-delayed-branch; ./good; echo $?
1</code></pre>
<h1 id="generated-code">Generated code</h1>
<p>Let’s peek at generated code in this example:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; hppa2.0-unknown-linux-gnu-gcc -O2 -S ../bug_test.c -o bug.S</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="fu">a:</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>        bv <span class="op">%</span>r0<span class="op">(%</span>r2<span class="op">)</span> <span class="co">; ret = 0; return ret;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>         ldi <span class="dv">0</span><span class="op">,%</span>r28 <span class="co">; delayed slot for 'ret = 0'</span></span></code></pre></div>
<p>This is very short and wrong ‘return 0’ code.</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">;; hppa2.0-unknown-linux-gnu-gcc -O2 -S ../bug_test.c -o bug.S -fno-delayed-branch</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="fu">a:</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>        comclr<span class="op">,&lt;&gt;</span> <span class="op">%</span>r26<span class="op">,%</span>r25<span class="op">,%</span>r0 <span class="co">; compare d == f</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>        b<span class="op">,</span>n <span class="op">.</span>L11                <span class="co">; if (d == f) goto .L11 else no-op;</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">nop</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="fu">.L4:</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="fu">.L12:</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        ldil L<span class="st">'.L6,%r28</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>        ldo R<span class="st">'.L6(%r28),%r28    ; load address of jump table at .L6</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>        ldwx<span class="op">,</span>s <span class="op">%</span>r24<span class="op">(%</span>r28<span class="op">),%</span>r28  <span class="co">; fetch .L6[g(arg2)] target address</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>        bv<span class="op">,</span>n <span class="op">%</span>r0<span class="op">(%</span>r28<span class="op">)</span>          <span class="co">; goto at .L6[g(arg2)]</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="fu">.L6:</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>        .begin_brtab</span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">word</span> <span class="op">.</span>L8 <span class="co">; 'case 0:' code (our case)</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">word</span> <span class="op">.</span>L5 <span class="co">; 'case 1:' code</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">word</span> <span class="op">.</span>L4 <span class="co">; 'case 2:' code</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">word</span> <span class="op">.</span>L5 <span class="co">; 'case 3:' code</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">word</span> <span class="op">.</span>L4 <span class="co">; 'case 4:' code</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">word</span> <span class="op">.</span>L5 <span class="co">; 'case 5:' code</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>        .end_brtab</span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>        ldi <span class="dv">10</span><span class="op">,%</span>r28   <span class="co">; ret = 10</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>        bv<span class="op">,</span>n <span class="op">%</span>r0<span class="op">(%</span>r2<span class="op">)</span> <span class="co">; return ret;</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="fu">.L11:</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>        ldi <span class="dv">0</span><span class="op">,%</span>r28    <span class="co">; ret = 0</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>        bv<span class="op">,</span>n <span class="op">%</span>r0<span class="op">(%</span>r2<span class="op">)</span> <span class="co">; return ret;</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a><span class="fu">.L8:</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>        ldi <span class="dv">1</span><span class="op">,%</span>r28    <span class="co">; ret = 1</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>        bv<span class="op">,</span>n <span class="op">%</span>r0<span class="op">(%</span>r2<span class="op">)</span> <span class="co">; return ret;</span></span></code></pre></div>
<p>This is somewhat long and correct code.</p>
<p>So what is so special about <strong>-fno-delayed-branch</strong>? Why does it turn things upside down?</p>
<h1 id="delay-slots">Delay slots</h1>
<p>Delay slot (<a href="https://en.wikipedia.org/wiki/Delay_slot">https://en.wikipedia.org/wiki/Delay_slot</a>) is a simple concept: on simple
architectures some instructions take not unual one clock but two clock cycles. Instead of
stalling the CPU pipeline for extra cycle CPU just executes next instruction (or a few of those)
following such heavyweight instruction (wat?). Such place in code is called a
a “delay slot”.</p>
<p>Simple example on <strong>hppa</strong>:</p>
<pre class><code>a:
    bv %r0(%r2) ; 'return ret' ; takes 2 cycles
     ldi 0,%r28 ; 'ret = 0'    ; takes 1 cycle, executes in parallel to 'bv'
; total execution time: 2 cycles</code></pre>
<p>Here <strong>bv</strong> (branch vectored) takes clock 2 cycles and CPU always
executes one instruction after it. The actual execution sequence
is equivalent to:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="fu">a:</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    ldi <span class="dv">0</span><span class="op">,%</span>r28  <span class="co">; takes 1 cycle</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    bv <span class="op">%</span>r0<span class="op">(%</span>r2<span class="op">)</span> <span class="co">; takes 2 cycles</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>     <span class="bu">nop</span>        <span class="co">; takes 1 cycle; executes in parallel to 'bv'</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="co">; total execution time: 3 cycles</span></span></code></pre></div>
<p>It sounds like a simple transformation. But it’s full of fancy corner cases:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="fu">a:</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; invalid</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    bv <span class="op">%</span>r0<span class="op">(%</span>r2<span class="op">)</span>  <span class="co">; 'return ret' ; takes 2 cycles</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>     bv <span class="op">%</span>r0<span class="op">(%</span>r2<span class="op">)</span> <span class="co">; 'return ret' ; takes 2 cycles, overlaps with previous</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>      <span class="bu">nop</span>        <span class="co">; does it get executed?</span></span></code></pre></div>
<p>Thankfuly <strong>hppa</strong> forbids putting branch instructions themselves into delay slot.</p>
<p>A few other architectures that use delay slot are: <strong>mips</strong>,
<strong>superh</strong>, <strong>sparc</strong>. But not <strong>arm</strong>, not <strong>powerpc</strong> and not <strong>riscv</strong>.</p>
<p>Having slightly tweaked my example I managed to reproduce the
same bug on <strong>sh4</strong>(<strong>superh</strong>): <a href="https://gcc.gnu.org/PR96015#c27">https://gcc.gnu.org/PR96015#c27</a>.</p>
<p>The bug ended up being in gcc’s <strong>reporg</strong> pass: a late pass that handles
instruction reordering to pick the better sequence. It made incorrect
assumptions about instructions with delay slots.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February 27, 2021 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>readline config</title>
    <link href="http://trofi.github.io/posts/222-readline-config.html" />
    <id>http://trofi.github.io/posts/222-readline-config.html</id>
    <published>2020-12-12T00:00:00Z</published>
    <updated>2020-12-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: readline config</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>readline config</h1>

            <p><strong>bash</strong> and a few other tools use <strong>readline</strong> library to implement
interactive coommandline interface with history support, tab completion
and text editing capabilities like copy/paste buffers and even macro
commands.</p>
<p>Here is my tiny <strong>~/.inputrc</strong> to enable a bit more completion color:</p>
<pre class><code># cat ~/.inputrc
set colored-completion-prefix on
set page-completions off
set colored-stats on
set show-all-if-ambiguous on
set blink-matching-paren on</code></pre>
<p>These all are minor visual and minor tab repeat changes.</p>

<div class="info">
    Posted on December 12, 2020 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Debugging wine</title>
    <link href="http://trofi.github.io/posts/221-debugging-wine.html" />
    <id>http://trofi.github.io/posts/221-debugging-wine.html</id>
    <published>2020-12-06T00:00:00Z</published>
    <updated>2020-12-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Debugging wine</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Debugging wine</h1>

            <p>Sometimes I test gcc toolchains against less popular targets
like <strong>i686-w64-mingw32</strong> (32-bit windows). As a cheap run time
test I use <a href="https://www.winehq.org/">Wine</a>. Today I tried to
run a simple executable:</p>
<pre class><code>$ echo 'int main() {}' | i686-w64-mingw32-gcc -x c - -o a.exe -ggdb3 &amp;&amp; wine a.exe
Segmentation fault</code></pre>
<p>It crashed! I attempted to run standard <strong>wine</strong> programs.
That also did not work:</p>
<pre class><code>$ winecfg
Segmentation fault</code></pre>
<p>Maybe <strong>wine</strong> itself is broken? (and not just runtime
linked into my <strong>a.exe</strong>).</p>
<p>The new quest has started \o/.</p>
<h1 id="what-is-wine">What is Wine?</h1>
<p><strong>wine</strong> is a rare sort of software: it executes
windows binaries on native system directly as much as reasonably
possible. No instruction level emulation is involved.</p>
<p><strong>wine</strong> loads
<a href="https://en.wikipedia.org/wiki/Portable_Executable">PE/COFF</a>
(windows native) executable file formats on systems that don’t
support it (Linux native format is
<a href="https://en.wikipedia.org/wiki/Executable_and_Linkable_Format">ELF</a>
for example).</p>
<p>Simpler windows-specific library calls are re-implemented in terms
of linux library calls. More complicated calls are implemented
by communicating with <strong>wineserver</strong> standalone daemon.</p>
<h1 id="debugging">Debugging</h1>
<p>I never investigated program crashes under wine before. Internetz say
<strong>wine</strong> comes with
<a href="https://wiki.winehq.org/Wine_Developer%27s_Guide/Debugging_Wine">winedbg</a>
tool that might help with that. I tried it:</p>
<pre class><code>$ winedbg a.exe
Segmentation fault
$ winedbg
Segmentation fault</code></pre>
<p>No luck. Why did <strong>winedbg</strong> fail? I tried to find something
I could attach <strong>gdb</strong> to:</p>
<pre class><code>$ file $(which winedbg)
/usr/bin/winedbg: symbolic link to /usr/bin/winedbg-vanilla-5.22
$ file $(which /usr/bin/winedbg-vanilla-5.22)
/usr/bin/winedbg-vanilla-5.22: POSIX shell script, ASCII text executable
$ file $(which winedbg)
/usr/bin/winedbg: symbolic link to /usr/bin/winedbg-vanilla-5.22
$ bash -x /usr/bin/winedbg-vanilla-5.22
+ exec /usr/lib/wine-vanilla-5.22/bin/winedbg
Segmentation fault
$ file /usr/lib/wine-vanilla-5.22/bin/winedbg
/usr/lib/wine-vanilla-5.22/bin/winedbg: POSIX shell script, ASCII text executable
$ bash -x /usr/lib/wine-vanilla-5.22/bin/winedbg
...
+ exec /usr/lib/wine-vanilla-5.22/bin/wine winedbg.exe
Segmentation fault

$ file /usr/lib/wine-vanilla-5.22/wine/fakedlls/winedbg.exe
/usr/lib/wine-vanilla-5.22/wine/fakedlls/winedbg.exe: PE32 executable (console) Intel 80386, for MS Windows</code></pre>
<p>The above says <strong>/usr/bin/winedbg</strong> is a shell wrapper around
<strong>winedbg.exe</strong> <strong>PE/COFF</strong> executable (ran through <strong>wine</strong>).
It makes <strong>windbg</strong> even more complex program than <strong>a.exe</strong>.</p>
<p>This is yet another hint at problems in <strong>wine</strong> itself. I settled
on debugging simpler <strong>a.exe</strong> program.</p>
<h1 id="getting-clues">Getting clues</h1>
<p>To get some idea what binary actually crashes I used <strong>strace</strong>:</p>
<pre class><code>$ strace -s 10000 -f -etrace=execve wine a.exe
execve(&quot;/usr/bin/wine&quot;, [&quot;wine&quot;, &quot;a.exe&quot;], 0x7ffd82e380d8 /* 83 vars */) = 0
execve(&quot;/usr/lib/wine-vanilla-5.22/bin/wine&quot;, [&quot;/usr/lib/wine-vanilla-5.22/bin/wine&quot;, &quot;a.exe&quot;], 0x55a3215c07c0 /* 81 vars */) = 0
[ Process PID=2324610 runs in 32 bit mode. ]
execve(&quot;/usr/lib/wine-vanilla-5.22/bin/wine-preloader&quot;, [&quot;/usr/lib/wine-vanilla-5.22/bin/wine-preloader&quot;, &quot;/usr/lib/wine-vanilla-5.22/bin/wine&quot;, &quot;a.exe&quot;], 0x7e99a2a0 /* 82 vars */) = 0
strace: Process 2324611 attached
strace: Process 2324612 attached
[pid 2324611] +++ exited with 0 +++
[pid 2324610] --- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=2324611, si_uid=1000, si_status=0, si_utime=0, si_stime=0} ---
[pid 2324612] execve(&quot;/usr/lib/wine-vanilla-5.22/bin/wine64-preloader&quot;, [&quot;/usr/lib/wine-vanilla-5.22/bin/wine64-preloader&quot;, &quot;/usr/lib/wine-vanilla-5.22/bin/wine64&quot;, &quot;C:\\windows\\system32\\conhost.exe&quot;, &quot;--unix&quot;, &quot;--width&quot;, &quot;192&quot;, &quot;--height&quot;, &quot;55&quot;, &quot;--server&quot;, &quot;0x10&quot;], 0x7e890b10 /* 84 vars */) = 0
[pid 2324612] [ Process PID=2324612 runs in 64 bit mode. ]
[pid 2324610] --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xfffffffc} ---
[pid 2324610] --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0xfffffe28} ---
[pid 2324610] +++ killed by SIGSEGV +++
+++ exited with 0 +++
Segmentation fault

$ file /usr/lib/wine-vanilla-5.22/bin/wine-preloader
/usr/lib/wine-vanilla-5.22/bin/wine-preloader: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), statically linked, stripped
$ file /usr/lib/wine-vanilla-5.22/bin/wine64-preloader
/usr/lib/wine-vanilla-5.22/bin/wine64-preloader: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, stripped
$ file /usr/lib64/wine-vanilla-5.22/wine/fakedlls/conhost.exe
/usr/lib64/wine-vanilla-5.22/wine/fakedlls/conhost.exe: PE32+ executable (GUI) x86-64, for MS Windows</code></pre>
<p>Here we see a few interesting bits:</p>
<ul>
<li><p>before catching <strong>SIGSEGV</strong> our program <strong>execve()</strong>s twice:</p>
<ul>
<li><strong>wine</strong> shell script execs <strong>wine</strong> binary</li>
<li><strong>wine</strong> binary execs <strong>wine-preloader</strong> binary</li>
</ul></li>
<li><p>it also <strong>fork()</strong>s and execs <strong>wine64-preloader</strong> to run <strong>conhost.exe</strong></p>
<pre class><code>- wine a.exe -&gt; exec &quot;wine-preloader wine a.exe&quot;
  ` -&gt; fork -&gt; exec &quot;wine64-preloader conhost.exe&quot;</code></pre></li>
<li><p><strong>wine-preloader</strong> is a 32-bit static <strong>ELF</strong> executable. It’s address space
will host our future <strong>a.exe</strong>.</p></li>
<li><p><strong>wine64-preloader</strong> is a 64-bit static <strong>ELF</strong> executable. It’s address space
will host some 64-bit <strong>conhost.exe</strong> process. <strong>conhost.exe</strong> seems to be an
equivalent of virtual terminal for windows.</p></li>
</ul>
<p>We see a <strong>SIGSEGV</strong> only for 32-bit <strong>wine-preloader</strong>. 64-bit
processes seem to work fine.</p>
<p>I rebuilt <strong>wine</strong> with <strong>CFLAGS+=-ggdb3</strong> to get plenty of
debugging symbols and ran <strong>wine</strong> under <strong>gdb</strong>:</p>
<pre class><code>$ gdb --args /usr/lib/wine-vanilla-5.22/bin/wine a.exe
Reading symbols from /usr/lib/wine-vanilla-5.22/bin/wine...
Reading symbols from /usr/lib/debug//usr/lib/wine-vanilla-5.22/bin/wine.debug...

(gdb) run
Starting program: /usr/lib/wine-vanilla-5.22/bin/wine a.exe
[Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.
process 2326226 is executing new program: /usr/lib/wine-vanilla-5.22/bin/wine-preloader
[Detaching after fork from child process 2326230]


(gdb) info proc
process 2326226
cmdline = 'a.exe                                                                                  '
cwd = '/'
exe = '/usr/lib/wine-vanilla-5.22/bin/wine-preloader'

Program received signal SIGSEGV, Segmentation fault.
0x7bc714dd in ?? ()
(gdb) bt
#0  0x7bc714dd in ?? ()
#1  0x7b03c0de in ?? ()
#2  0x7edde0ab in ?? ()
#3  0x7edff106 in ?? ()
#4  0x7bc52d86 in ?? ()
#5  0x7bc55c2f in ?? ()
#6  0x7bc55f7c in ?? ()
#7  0x7bc58e38 in ?? ()
#8  0x00000000 in ?? ()</code></pre>
<p>That is not a very useful backtrace. Why none of the addresses are
resolved?</p>
<p>Looks like <strong>gdb</strong> does not know anything about dynamically loaded
modules (handled by <strong>wine-preloader</strong> ?). As a workaround we can
manually add them.</p>
<p>The <strong>2325141</strong> debugged process is not yet finished and we can poke at
it’s address map:</p>
<pre class><code>$ cat /proc/2325141/maps
00010000-00110000 rw-p 00000000 00:00 0
00110000-00120000 rwxp 00000000 00:00 0
...
00400000-00401000 r-xp 00000000 08:03 53849265                           /home/slyfox/.wine/drive_c/a.exe
00401000-00403000 r-xp 00000000 00:00 0
...
0040a000-0040c000 r-xp 00003000 08:03 53849265                           /home/slyfox/.wine/drive_c/a.exe
...
7b000000-7b016000 r--p 00000000 08:03 86205568                           /usr/lib/wine-vanilla-5.22/wine/kernelbase.dll.so
...
7bc00000-7bc19000 r--p 00000000 08:03 86206617                           /usr/lib/wine-vanilla-5.22/wine/ntdll.dll.so
...
7d000000-7d001000 r--p 00000000 08:03 86270026                           /usr/lib/wine-vanilla-5.22/bin/wine
...
7d001000-7d002000 r-xp 00001000 08:03 86270026                           /usr/lib/wine-vanilla-5.22/bin/wine
...
7d3ff000-7d400000 r--p 00000000 08:03 86270404                           /usr/lib/wine-vanilla-5.22/bin/wine-preloader
...
7d405000-7d427000 rw-p 00000000 00:00 0                                  [heap]
...
7ed8c000-7ed8e000 r--p 00000000 08:03 86205774                           /usr/lib/wine-vanilla-5.22/wine/msvcrt.so
...
7ee78000-7ee7d000 r--p 00000000 08:03 85966906                           /usr/lib/wine-vanilla-5.22/libwine.so.1.0
...
f7c12000-f7c1c000 r--p 00000000 08:03 85213329                           /lib/libm-2.32.so
...
f7cdf000-f7cf3000 r--p 00000000 08:03 86206591                           /usr/lib/wine-vanilla-5.22/wine/ntdll.so
...
f7d81000-f7d9a000 r--p 00000000 08:03 85213351                           /lib/libc-2.32.so
...
f7d9a000-f7eee000 r-xp 00019000 08:03 85213351                           /lib/libc-2.32.so
...
f7fcc000-f7fcd000 r--p 00000000 08:03 85213350                           /lib/ld-2.32.so
...
f7ff8000-f7ffc000 r--p 00000000 00:00 0                                  [vvar]
f7ffc000-f7ffe000 r-xp 00000000 00:00 0                                  [vdso]
f8000000-ffcd0000 ---p 00000000 00:00 0
ffcd0000-fffd0000 rw-p 00000000 00:00 0
fffdc000-ffffe000 rw-p 00000000 00:00 0                                  [stack]</code></pre>
<p>This is a huge list of objects present in our address space.</p>
<p>Now looking at <strong>gdb</strong>’s view:</p>
<pre class><code>(gdb) info files
Symbols from &quot;/usr/lib/wine-vanilla-5.22/bin/wine-preloader&quot;.
Native process:
        Using the running image of child process 2326226.
        While running this, GDB does not access memory from...
Local exec file:
        `/usr/lib/wine-vanilla-5.22/bin/wine-preloader', file type elf32-i386.
        Entry point: 0x7d400000
        0x7d400000 - 0x7d401880 is .text
        0x7d402000 - 0x7d4022e0 is .rodata
        0x7d4022e0 - 0x7d4024a4 is .eh_frame
        0x7d404000 - 0x7d40400c is .got.plt
        0x7d404020 - 0x7d404060 is .data
        0x7d404060 - 0x7d404490 is .bss</code></pre>
<p><strong>gdb</strong> onlysees <strong>wine-preloader</strong> binary,
but our backtrace contains addresses like <strong>0x7bc714dd</strong> which looks
suspiciously close to <strong>ntdll.dll.so</strong> range from <strong>/proc/$pid/maps</strong>.</p>
<p>Let’s add <strong>ntdll.dll.so</strong> symbols into our session:</p>
<pre class><code>(gdb) add-symbol-file /usr/lib/wine-vanilla-5.22/wine/ntdll.dll.so
add symbol table from file &quot;/usr/lib/wine-vanilla-5.22/wine/ntdll.dll.so&quot;
(y or n) y

Reading symbols from /usr/lib/wine-vanilla-5.22/wine/ntdll.dll.so...
Reading symbols from /usr/lib/debug//usr/lib/wine-vanilla-5.22/wine/ntdll.dll.so.debug...

(gdb) info registers
eax            0x0                 0
ecx            0x0                 0
edx            0x7ffc2c00          2147232768
ebx            0x0                 0
esp            0xfffffffc          0xfffffffc
ebp            0x61ed88            0x61ed88
esi            0x7ffc2bf8          2147232760
edi            0x61ed60            6417760
eip            0x7bc714dd          0x7bc714dd &lt;RtlAnsiStringToUnicodeString+141&gt;
eflags         0x10246             [ PF ZF IF RF ]
cs             0x23                35
ss             0x2b                43
ds             0x2b                43
es             0x2b                43
fs             0x63                99
gs             0x6b                107

(gdb) bt
#0  0x7bc714dd in RtlAnsiStringToUnicodeString (uni=&lt;error reading variable: Cannot access memory at address 0x0&gt;, ansi=&lt;error reading variable: Cannot access memory at address 0x4&gt;,
    doalloc=&lt;error reading variable: Cannot access memory at address 0x8&gt;) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:581
Backtrace stopped: Cannot access memory at address 0xfffffffc</code></pre>
<p>We got a function name! But our backtrace became even worse:
only one frame is visible instead of 8 frames before. What is wrong?</p>
<p>The stack pointer (<strong>esp 0xfffffffc</strong>) is incorrect and looks more like
a <strong>NULL</strong> pointer dereference with small negative offset than a real
stack pointer. No chance to get 8 frames here.</p>
<p>Perhaps <strong>gdb</strong> used frame pointer (<strong>ebp 0x61ed88</strong>) before we loaded symbols?</p>
<p>Let’s try to fake stack pointer to be closer to frame pointer with a hack:</p>
<pre class><code>(gdb) set $esp=$ebp

(gdb) bt
#0  0x7bc714dd in RtlAnsiStringToUnicodeString (uni=0x7b03c0de, ansi=0x7ee405be, doalloc=0 '\000') at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:581
#1  0x0061edc8 in ?? ()
#2  0x7b03c0de in ?? ()
#3  0x7edde0ab in ?? ()
#4  0x7edff106 in ?? ()
#5  0x7bc52d86 in call_dll_entry_point ()
#6  0x7ffc2c00 in ?? ()
Backtrace stopped: previous frame inner to this frame (corrupt stack?)</code></pre>
<p>This looks more plausible. It’s still probably wrong as stack pointer within function
is likely off by a few values. But it’s better that nothing.</p>
<p>Let’s add symbols for address <strong>0x7b03c0de</strong> from <strong>/proc/2325141/maps</strong>.
<strong>kernelbase.dll.so</strong> looks closest.</p>
<pre class><code>(gdb) add-symbol-file /usr/lib/wine-vanilla-5.22/wine/kernelbase.dll.so
add symbol table from file &quot;/usr/lib/wine-vanilla-5.22/wine/kernelbase.dll.so&quot;
(y or n) y
Reading symbols from /usr/lib/wine-vanilla-5.22/wine/kernelbase.dll.so...
Reading symbols from /usr/lib/debug//usr/lib/wine-vanilla-5.22/wine/kernelbase.dll.so.debug...

(gdb) bt
#0  0x7bc714dd in RtlAnsiStringToUnicodeString (uni=0x7b03c0de &lt;CreateFileA+73&gt;, ansi=0x7ee405be, doalloc=0 '\000')
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:581
#1  0x0061edc8 in ?? ()
#2  0x7b03c0de in CreateFileA (name=0x7ee405be &quot;CONIN$&quot;, access=3221225472, sharing=3, sa=0x0, creation=3, attributes=0, template=0x0)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/kernelbase/file.c:704
#3  0x7edde0ab in ?? ()
#4  0x7edff106 in ?? ()
#5  0x7bc52d86 in call_dll_entry_point ()
#6  0x00000003 in ?? ()
#7  0x00000004 in ?? ()
#8  0x0000ffff in ?? ()
#9  0x000000b8 in ?? ()
#10 0x00000000 in ?? ()</code></pre>
<p>Presence of <strong>CreateFileA(“CONIN$”) / RtlAnsiStringToUnicodeString()</strong>
looks very close!</p>
<p>But parameters to <strong>RtlAnsiStringToUnicodeString()</strong> seem incorrect:
<strong>uni=0x7b03c0de &lt;CreateFileA+73&gt;</strong> is a code address (should be some
writable address). It’s probably a stack corruption and our stack
pointer is wrong.</p>
<p>Ideally I would like to get to the point where corruption happens.</p>
<p>The definition of <strong>RtlAnsiStringToUnicodeString()</strong> has nothing unusual or suspicious:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">//(gdb) list RtlAnsiStringToUnicodeString</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>     NTSTATUS WINAPI RtlAnsiStringToUnicodeString<span class="op">(</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>         PUNICODE_STRING uni<span class="op">,</span> <span class="co">/* [I/O] Destination for the unicode string */</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>         PCANSI_STRING ansi<span class="op">,</span>  <span class="co">/* [I]   Ansi string to be converted */</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>         BOOLEAN doalloc<span class="op">)</span>     <span class="co">/* [I]   TRUE=Allocate new buffer for uni, FALSE=Use existing buffer */</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>     <span class="op">{</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>         DWORD total <span class="op">=</span> RtlAnsiStringToUnicodeSize<span class="op">(</span> ansi <span class="op">);</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>total <span class="op">&gt;</span> <span class="bn">0xffff</span><span class="op">)</span> <span class="cf">return</span> STATUS_INVALID_PARAMETER_2<span class="op">;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>         uni<span class="op">-&gt;</span>Length <span class="op">=</span> total <span class="op">-</span> <span class="kw">sizeof</span><span class="op">(</span>WCHAR<span class="op">);</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>doalloc<span class="op">)</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>             uni<span class="op">-&gt;</span>MaximumLength <span class="op">=</span> total<span class="op">;</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>             <span class="cf">if</span> <span class="op">(!(</span>uni<span class="op">-&gt;</span>Buffer <span class="op">=</span> RtlAllocateHeap<span class="op">(</span> GetProcessHeap<span class="op">(),</span> <span class="dv">0</span><span class="op">,</span> total <span class="op">)))</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>                 <span class="cf">return</span> STATUS_NO_MEMORY<span class="op">;</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>         <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>total <span class="op">&gt;</span> uni<span class="op">-&gt;</span>MaximumLength<span class="op">)</span> <span class="cf">return</span> STATUS_BUFFER_OVERFLOW<span class="op">;</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>         RtlMultiByteToUnicodeN<span class="op">(</span> uni<span class="op">-&gt;</span>Buffer<span class="op">,</span> uni<span class="op">-&gt;</span>Length<span class="op">,</span> NULL<span class="op">,</span> ansi<span class="op">-&gt;</span>Buffer<span class="op">,</span> ansi<span class="op">-&gt;</span>Length <span class="op">);</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>         uni<span class="op">-&gt;</span>Buffer<span class="op">[</span>uni<span class="op">-&gt;</span>Length <span class="op">/</span> <span class="kw">sizeof</span><span class="op">(</span>WCHAR<span class="op">)]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>         <span class="cf">return</span> STATUS_SUCCESS<span class="op">;</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span></code></pre></div>
<p>Let’s see if we can find out something else about the way our program crashes
by looking at exact instructions and register values around:</p>
<pre class><code>(gdb) disassemble RtlAnsiStringToUnicodeString
Dump of assembler code for function RtlAnsiStringToUnicodeString:
   0x7bc71450 &lt;+0&gt;:     lea    0x4(%esp),%ecx
   0x7bc71454 &lt;+4&gt;:     and    $0xfffffff0,%esp
   0x7bc71457 &lt;+7&gt;:     push   -0x4(%ecx)
   0x7bc7145a &lt;+10&gt;:    push   %ebp
   0x7bc7145b &lt;+11&gt;:    mov    %esp,%ebp
   0x7bc7145d &lt;+13&gt;:    push   %edi
   0x7bc7145e &lt;+14&gt;:    push   %esi
   0x7bc7145f &lt;+15&gt;:    push   %ebx
   0x7bc71460 &lt;+16&gt;:    push   %ecx
   0x7bc71461 &lt;+17&gt;:    sub    $0x1c,%esp
   0x7bc71464 &lt;+20&gt;:    mov    0x4(%ecx),%esi
   0x7bc71467 &lt;+23&gt;:    mov    (%ecx),%ebx
   0x7bc71469 &lt;+25&gt;:    mov    0x8(%ecx),%edi
   0x7bc7146c &lt;+28&gt;:    movzwl (%esi),%eax
   0x7bc7146f &lt;+31&gt;:    push   %eax
   0x7bc71470 &lt;+32&gt;:    lea    -0x1c(%ebp),%eax
   0x7bc71473 &lt;+35&gt;:    push   0x4(%esi)
   0x7bc71476 &lt;+38&gt;:    push   %eax
   0x7bc71477 &lt;+39&gt;:    call   0x7bc5d3e0 &lt;RtlMultiByteToUnicodeSize&gt;
   ....
   0x7bc714d5 &lt;+133&gt;:   pop    %ecx
   0x7bc714d6 &lt;+134&gt;:   pop    %ebx
   0x7bc714d7 &lt;+135&gt;:   pop    %esi
   0x7bc714d8 &lt;+136&gt;:   pop    %edi
   0x7bc714d9 &lt;+137&gt;:   pop    %ebp
   0x7bc714da &lt;+138&gt;:   lea    -0x4(%ecx),%esp
=&gt; 0x7bc714dd &lt;+141&gt;:   ret    $0xc

(gdb) print (void*)$ecx
$3 = (void *) 0x0
(gdb) print (void*)$ecx-4
$4 = (void *) 0xfffffffc</code></pre>
<p>Hah, it’s completely obvious! You can see the bug, right?
No, it’s not obvious at all. I’m just kidding.</p>
<p>In the dump above I saw nothing that would stands.</p>
<p>But somehow <strong>ecx</strong> value on stack was overwritten by <strong>0x0</strong>
value and we were not able to return back from the function
with <strong>ret $0xc</strong>. That is an explicit sign of stack corruption.</p>
<p>Let’s find out what overwrites <strong>ecx</strong> on stack
while <strong>RtlAnsiStringToUnicodeString()</strong> is executing.</p>
<p>I tried a naive attempt by running <strong>wine</strong> under <strong>gdb</strong> as is:</p>
<pre class><code>$ gdb --args /usr/lib/wine-vanilla-5.22/bin/wine a.exe
Reading symbols from /usr/lib/wine-vanilla-5.22/bin/wine...
Reading symbols from /usr/lib/debug//usr/lib/wine-vanilla-5.22/bin/wine.debug...

(gdb) break RtlAnsiStringToUnicodeString
Function &quot;RtlAnsiStringToUnicodeString&quot; not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (RtlAnsiStringToUnicodeString) pending.
(gdb) run

Starting program: /usr/lib/wine-vanilla-5.22/bin/wine a.exe
[Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.
process 2326439 is executing new program: /usr/lib/wine-vanilla-5.22/bin/wine-preloader
[Detaching after fork from child process 2326443]

Program received signal SIGSEGV, Segmentation fault.
0x7bc714dd in ?? ()</code></pre>
<p>Execution did not stop at <strong>RtlAnsiStringToUnicodeString()</strong>. My understanding on why
it happened is because <strong>ntdll.dll.so</strong> gets loaded to address space in a way not
visible to <strong>gdb</strong>. It has something to do with re-execution of <strong>wine-preloader</strong>
binary in place of <strong>wine</strong>.</p>
<p>I happened to notice that the way re-execution happens
is by checking <a href="https://source.winehq.org/git/wine.git/blob/HEAD:/dlls/ntdll/unix/loader.c#l1758">WINELOADERNOEXEC=1</a>.</p>
<p>My understanding of re-execution is to adjust <strong>PATH</strong>, <strong>WINEPREFIX</strong>
and similar variables (and switch 32/64-bit address space if needed)</p>
<p>We should be able to set environment up as needed without the need for re-execution.</p>
<p>I tried the simple way:</p>
<pre class><code>$ WINELOADERNOEXEC=1 gdb --args /usr/lib/wine-vanilla-5.22/bin/wine a.exe
Reading symbols from /usr/lib/wine-vanilla-5.22/bin/wine...
Reading symbols from /usr/lib/debug//usr/lib/wine-vanilla-5.22/bin/wine.debug...

(gdb) run
Starting program: /usr/lib/wine-vanilla-5.22/bin/wine a.exe
[Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.
[Detaching after fork from child process 2326739]

Program received signal SIGSEGV, Segmentation fault.
0x7bc714dd in RtlAnsiStringToUnicodeString (uni=&lt;error reading variable: Cannot access memory at address 0x0&gt;, ansi=&lt;error reading variable: Cannot access memory at address 0x4&gt;,
    doalloc=&lt;error reading variable: Cannot access memory at address 0x8&gt;) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:581
581     }

(gdb) bt
#0  0x7bc714dd in RtlAnsiStringToUnicodeString (uni=&lt;error reading variable: Cannot access memory at address 0x0&gt;, ansi=&lt;error reading variable: Cannot access memory at address 0x4&gt;,
    doalloc=&lt;error reading variable: Cannot access memory at address 0x8&gt;) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:581
Backtrace stopped: Cannot access memory at address 0xfffffffc
(gdb) set $esp=$ebp
(gdb) bt
#0  0x7bc714dd in RtlAnsiStringToUnicodeString (uni=0x7b03c0de &lt;CreateFileA+73&gt;, ansi=0x7fe205be, doalloc=0 '\000')
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:581
#1  0x0061edc8 in ?? ()
#2  0x7b03c0de in CreateFileA (name=0x7fe205be &quot;CONIN$&quot;, access=3221225472, sharing=3, sa=0x0, creation=3, attributes=0, template=0x0)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/kernelbase/file.c:704
#3  0x7fdbe0ab in msvcrt_init_console () at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/msvcrt/console.c:48
#4  0x7fddf106 in DllMain (hinstDLL=0x7fdb0000 &lt;__wine_spec_pe_header+49120&gt;, fdwReason=1, lpvReserved=0x61fd24)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/msvcrt/main.c:115
#5  0x7bc52d86 in call_dll_entry_point () from /usr/lib/wine-vanilla-5.22/wine/ntdll.dll.so
#6  0x7bc55c2f in MODULE_InitDLL (wm=wm@entry=0x1110d8, reason=reason@entry=1, lpReserved=lpReserved@entry=0x61fd24)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/loader.c:1329
#7  0x7bc55f7c in process_attach (wm=0x1110d8, lpReserved=lpReserved@entry=0x61fd24) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/loader.c:1423
#8  0x7bc58e38 in process_attach (lpReserved=0x61fd24, wm=&lt;optimized out&gt;) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/loader.c:1394
#9  LdrInitializeThunk (context=0x61fd24, unknown2=1073733632, unknown3=0, unknown4=0) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/loader.c:3539
#10 0x00000000 in ?? ()</code></pre>
<p>It worked as is! We get a nice backtrace and we can even set lazy breakpoints.</p>
<p>Let’s track down the exact place where stack corruption happens. The plan is simple:</p>
<ol type="1">
<li>Stop at the call of <strong>RtlAnsiStringToUnicodeString()</strong></li>
<li>Check where <strong>ecx</strong> is saved on stack there</li>
<li>Set a watchpoint on memory location in saved stack space</li>
<li>Observe where change happens.</li>
</ol>
<p>Full session that executes it:</p>
<pre class><code>$ WINELOADERNOEXEC=1 gdb --args /usr/lib/wine-vanilla-5.22/bin/wine a.exe
Reading symbols from /usr/lib/wine-vanilla-5.22/bin/wine...
Reading symbols from /usr/lib/debug//usr/lib/wine-vanilla-5.22/bin/wine.debug...

(gdb) break RtlAnsiStringToUnicodeString
Function &quot;RtlAnsiStringToUnicodeString&quot; not defined.
Make breakpoint pending on future shared library load? (y or [n]) y
Breakpoint 1 (RtlAnsiStringToUnicodeString) pending.

(gdb) run
Starting program: /usr/lib/wine-vanilla-5.22/bin/wine a.exe
[Thread debugging using libthread_db enabled]
Using host libthread_db library &quot;/lib64/libthread_db.so.1&quot;.
[Detaching after fork from child process 2326777]

Breakpoint 1, RtlAnsiStringToUnicodeString (uni=0x3ffe2bf8, ansi=0x61ed60, doalloc=0 '\000') at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:566
566         DWORD total = RtlAnsiStringToUnicodeSize( ansi );
(gdb) disassemble
Dump of assembler code for function RtlAnsiStringToUnicodeString:
=&gt; 0x7bc71450 &lt;+0&gt;:     lea    0x4(%esp),%ecx
   0x7bc71454 &lt;+4&gt;:     and    $0xfffffff0,%esp
   0x7bc71457 &lt;+7&gt;:     push   -0x4(%ecx)
   0x7bc7145a &lt;+10&gt;:    push   %ebp
   0x7bc7145b &lt;+11&gt;:    mov    %esp,%ebp
   0x7bc7145d &lt;+13&gt;:    push   %edi
   0x7bc7145e &lt;+14&gt;:    push   %esi
   0x7bc7145f &lt;+15&gt;:    push   %ebx
   0x7bc71460 &lt;+16&gt;:    push   %ecx
   0x7bc71461 &lt;+17&gt;:    sub    $0x1c,%esp
...

(gdb) break *0x7bc71461
Breakpoint 2 at 0x7bc71461: file /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c, line 565.

(gdb) continue
Continuing.

Breakpoint 2, 0x7bc71461 in RtlAnsiStringToUnicodeString (uni=0x3ffe2bf8, ansi=0x61ed60, doalloc=0 '\000')
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:565
565     {

(gdb) disassemble
Dump of assembler code for function RtlAnsiStringToUnicodeString:
   0x7bc71450 &lt;+0&gt;:     lea    0x4(%esp),%ecx
   0x7bc71454 &lt;+4&gt;:     and    $0xfffffff0,%esp
   0x7bc71457 &lt;+7&gt;:     push   -0x4(%ecx)
   0x7bc7145a &lt;+10&gt;:    push   %ebp
   0x7bc7145b &lt;+11&gt;:    mov    %esp,%ebp
   0x7bc7145d &lt;+13&gt;:    push   %edi
   0x7bc7145e &lt;+14&gt;:    push   %esi
   0x7bc7145f &lt;+15&gt;:    push   %ebx
   0x7bc71460 &lt;+16&gt;:    push   %ecx
=&gt; 0x7bc71461 &lt;+17&gt;:    sub    $0x1c,%esp

(gdb) print (void*)$ecx
$2 = (void *) 0x61ed50
(gdb) print *(void**)$esp
$3 = (void *) 0x61ed50
(gdb) print (void*)$esp
$4 = (void *) 0x61ed28

(gdb) watch -l *0x61ed28
Hardware watchpoint 3: -location *0x61ed28
(gdb) continue
Continuing.

Hardware watchpoint 3: -location *0x61ed28

Old value = 6417744
New value = 0
RtlCustomCPToUnicodeN (info=0x7bcc14ec &lt;nls_info+44&gt;, dst=0x0, dstlen=0, reslen=0x61ed28, src=&lt;optimized out&gt;, srclen=&lt;optimized out&gt;)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/locale.c:972
972         return STATUS_SUCCESS

(gdb) bt
#0  RtlCustomCPToUnicodeN (info=0x7bcc14ec &lt;nls_info+44&gt;, dst=0x0, dstlen=0, reslen=0x61ed28, src=&lt;optimized out&gt;, srclen=&lt;optimized out&gt;)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/locale.c:972
#1  0x7bc5d3c5 in RtlMultiByteToUnicodeN (dst=0x3ffe2c00, dstlen=12, reslen=0x0, src=0x7fe205be &quot;CONIN$&quot;, srclen=6)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/locale.c:1019
#2  0x7bc714bb in RtlAnsiStringToUnicodeString (uni=&lt;error reading variable: Cannot access memory at address 0x0&gt;, ansi=&lt;error reading variable: Cannot access memory at address 0x4&gt;,
    doalloc=&lt;error reading variable: Cannot access memory at address 0x8&gt;) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:578
Backtrace stopped: previous frame inner to this frame (corrupt stack?)</code></pre>
<p>Aha! From the above we see that <strong>RtlCustomCPToUnicodeN()</strong>
managed to write into stack of it’s grand-caller:</p>
<pre class><code>-&gt; RtlAnsiStringToUnicodeString() [puts $ecx on stack ]
  -&gt;RtlMultiByteToUnicodeN()
    -&gt;RtlCustomCPToUnicodeN() [ corrupts $ecx on stack ]</code></pre>
<p>The call chain is straightforward but unexpected. Let’s see the definitions
of <strong>RtlCustomCPToUnicodeN()</strong> and <strong>RtlMultiByteToUnicodeN()</strong> for clues
where stack corruption could happen due to a code bug:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">//(gdb) list RtlCustomCPToUnicodeN</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>NTSTATUS WINAPI RtlCustomCPToUnicodeN<span class="op">(</span> CPTABLEINFO <span class="op">*</span>info<span class="op">,</span> WCHAR <span class="op">*</span>dst<span class="op">,</span> DWORD dstlen<span class="op">,</span> DWORD <span class="op">*</span>reslen<span class="op">,</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>                                       <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>src<span class="op">,</span> DWORD srclen <span class="op">)</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>    DWORD i<span class="op">,</span> ret<span class="op">;</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    dstlen <span class="op">/=</span> <span class="kw">sizeof</span><span class="op">(</span>WCHAR<span class="op">);</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>info<span class="op">-&gt;</span>DBCSOffsets<span class="op">)</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> dstlen<span class="op">;</span> srclen <span class="op">&amp;&amp;</span> i<span class="op">;</span> i<span class="op">--,</span> srclen<span class="op">--,</span> src<span class="op">++,</span> dst<span class="op">++)</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>            USHORT off <span class="op">=</span> info<span class="op">-&gt;</span>DBCSOffsets<span class="op">[(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)*</span>src<span class="op">];</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>off <span class="op">&amp;&amp;</span> srclen <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>                src<span class="op">++;</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>                srclen<span class="op">--;</span></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>                <span class="op">*</span>dst <span class="op">=</span> info<span class="op">-&gt;</span>DBCSOffsets<span class="op">[</span>off <span class="op">+</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)*</span>src<span class="op">];</span></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> <span class="op">*</span>dst <span class="op">=</span> info<span class="op">-&gt;</span>MultiByteTable<span class="op">[(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)*</span>src<span class="op">];</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>        ret <span class="op">=</span> dstlen <span class="op">-</span> i<span class="op">;</span></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a>        ret <span class="op">=</span> min<span class="op">(</span> srclen<span class="op">,</span> dstlen <span class="op">);</span></span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> ret<span class="op">;</span> i<span class="op">++)</span> dst<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> info<span class="op">-&gt;</span>MultiByteTable<span class="op">[(</span><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">)</span>src<span class="op">[</span>i<span class="op">]];</span></span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>reslen<span class="op">)</span> <span class="op">*</span>reslen <span class="op">=</span> ret <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>WCHAR<span class="op">);</span></span>
<span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> STATUS_SUCCESS<span class="op">;</span></span>
<span id="cb19-32"><a href="#cb19-32" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-33"><a href="#cb19-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-34"><a href="#cb19-34" aria-hidden="true" tabindex="-1"></a>NTSTATUS WINAPI RtlMultiByteToUnicodeN<span class="op">(</span> WCHAR <span class="op">*</span>dst<span class="op">,</span> DWORD dstlen<span class="op">,</span> DWORD <span class="op">*</span>reslen<span class="op">,</span></span>
<span id="cb19-35"><a href="#cb19-35" aria-hidden="true" tabindex="-1"></a>                                        <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>src<span class="op">,</span> DWORD srclen <span class="op">)</span></span>
<span id="cb19-36"><a href="#cb19-36" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb19-37"><a href="#cb19-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>nls_info<span class="op">.</span>AnsiTableInfo<span class="op">.</span>WideCharTable<span class="op">)</span></span>
<span id="cb19-38"><a href="#cb19-38" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> RtlCustomCPToUnicodeN<span class="op">(</span> <span class="op">&amp;</span>nls_info<span class="op">.</span>AnsiTableInfo<span class="op">,</span> dst<span class="op">,</span> dstlen<span class="op">,</span> reslen<span class="op">,</span> src<span class="op">,</span> srclen <span class="op">);</span></span>
<span id="cb19-39"><a href="#cb19-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-40"><a href="#cb19-40" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* locale not setup yet */</span></span>
<span id="cb19-41"><a href="#cb19-41" aria-hidden="true" tabindex="-1"></a>    dstlen <span class="op">=</span> min<span class="op">(</span> srclen<span class="op">,</span> dstlen <span class="op">/</span> <span class="kw">sizeof</span><span class="op">(</span>WCHAR<span class="op">)</span> <span class="op">);</span></span>
<span id="cb19-42"><a href="#cb19-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-43"><a href="#cb19-43" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>reslen<span class="op">)</span> <span class="op">*</span>reslen <span class="op">=</span> dstlen <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>WCHAR<span class="op">);</span></span>
<span id="cb19-44"><a href="#cb19-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>dstlen<span class="op">--)</span> <span class="op">*</span>dst<span class="op">++</span> <span class="op">=</span> <span class="op">*</span>src<span class="op">++</span> <span class="op">&amp;</span> <span class="bn">0x7f</span><span class="op">;</span></span>
<span id="cb19-45"><a href="#cb19-45" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> STATUS_SUCCESS<span class="op">;</span></span>
<span id="cb19-46"><a href="#cb19-46" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><strong>gdb</strong> says corruption happens at a line
<strong>if (reslen) *reslen = ret * sizeof(WCHAR);</strong>. But what is
wrong with it?</p>
<p>The hint is seen in backtrace itself:</p>
<pre class><code>(gdb) bt
#0  RtlCustomCPToUnicodeN (info=0x7bcc14ec &lt;nls_info+44&gt;, dst=0x0, dstlen=0, reslen=0x61ed28, src=&lt;optimized out&gt;, srclen=&lt;optimized out&gt;)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/locale.c:972
#1  0x7bc5d3c5 in RtlMultiByteToUnicodeN (dst=0x3ffe2c00, dstlen=12, reslen=0x0, src=0x7fe205be &quot;CONIN$&quot;, srclen=6)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/locale.c:1019
#2  0x7bc714bb in RtlAnsiStringToUnicodeString (uni=&lt;error reading variable: Cannot access memory at address 0x0&gt;, ansi=&lt;error reading variable: Cannot access memory at address 0x4&gt;,
    doalloc=&lt;error reading variable: Cannot access memory at address 0x8&gt;) at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/rtlstr.c:578
Backtrace stopped: previous frame inner to this frame (corrupt stack?)</code></pre>
<p>Somehow <strong>reslen</strong> value in <strong>gdb</strong> backtrace suddenly changed
from <strong>reslen=0x0</strong> (frame 2) to <strong>reslen=0x61ed28</strong> (frame 3).
That smells like an ABI mismatch between caller and callee.</p>
<p>Let’s have a peek at how <strong>RtlMultiByteToUnicodeN()</strong> calls <strong>RtlCustomCPToUnicodeN()</strong>
in the assembly:</p>
<pre class><code>(gdb) fr 1
#1  0x7bc5d3c5 in RtlMultiByteToUnicodeN (dst=0x3ffe2c00, dstlen=12, reslen=0x0, src=0x7fe205be &quot;CONIN$&quot;, srclen=6)
    at /usr/src/debug/app-emulation/wine-vanilla-5.22-r2/wine-5.22/dlls/ntdll/locale.c:1019
1019            return RtlCustomCPToUnicodeN( &amp;nls_info.AnsiTableInfo, dst, dstlen, reslen, src, srclen );

Dump of assembler code for function RtlMultiByteToUnicodeN:
   0x7bc5d330 &lt;+0&gt;:     lea    0x4(%esp),%ecx
   0x7bc5d334 &lt;+4&gt;:     and    $0xfffffff0,%esp
   0x7bc5d337 &lt;+7&gt;:     push   -0x4(%ecx)
   0x7bc5d33a &lt;+10&gt;:    push   %ebp
   0x7bc5d33b &lt;+11&gt;:    mov    %esp,%ebp
   0x7bc5d33d &lt;+13&gt;:    push   %ebx
   0x7bc5d33e &lt;+14&gt;:    mov    0x8(%ebp),%eax
   0x7bc5d341 &lt;+17&gt;:    vmovd  0xc(%ebp),%xmm0
   0x7bc5d346 &lt;+22&gt;:    vmovd  0x18(%ebp),%xmm1
   0x7bc5d34b &lt;+27&gt;:    mov    0x7bcc150c,%ebx
   0x7bc5d351 &lt;+33&gt;:    push   %ecx
   0x7bc5d352 &lt;+34&gt;:    mov    0x10(%ebp),%edx
   0x7bc5d355 &lt;+37&gt;:    mov    0x14(%ebp),%ecx
   0x7bc5d358 &lt;+40&gt;:    test   %ebx,%ebx
   0x7bc5d35a &lt;+42&gt;:    jne    0x7bc5d3a8 &lt;RtlMultiByteToUnicodeN+120&gt;
   ...
   0x7bc5d3a8 &lt;+120&gt;:   sub    $0x4,%esp
   0x7bc5d3ab &lt;+123&gt;:   vmovd  %xmm1,(%esp)
   0x7bc5d3b0 &lt;+128&gt;:   push   %ecx
   0x7bc5d3b1 &lt;+129&gt;:   push   %edx
   0x7bc5d3b2 &lt;+130&gt;:   sub    $0x4,%esp
   0x7bc5d3b5 &lt;+133&gt;:   vmovd  %xmm0,(%esp)
   0x7bc5d3ba &lt;+138&gt;:   push   %eax
   0x7bc5d3bb &lt;+139&gt;:   push   $0x7bcc14ec
   0x7bc5d3c0 &lt;+144&gt;:   call   0x7bc5d150 &lt;RtlCustomCPToUnicodeN&gt;
=&gt; 0x7bc5d3c5 &lt;+149&gt;:   lea    -0x8(%ebp),%esp
   0x7bc5d3c8 &lt;+152&gt;:   pop    %ecx
   0x7bc5d3c9 &lt;+153&gt;:   pop    %ebx
   0x7bc5d3ca &lt;+154&gt;:   pop    %ebp
   0x7bc5d3cb &lt;+155&gt;:   lea    -0x4(%ecx),%esp
   0x7bc5d3ce &lt;+158&gt;:   ret    $0x14</code></pre>
<p>Here we already have suspicious code. Can you spot it?</p>
<p>We know what we are looking for:
we need to track life of parameter 3 (<strong>reslen=0x0</strong>) being passed as parameter 4 into
<strong>RtlCustomCPToUnicodeN()</strong>.</p>
<p>All the 3 functions in the backtrace are <strong>WINAPI</strong>
(aka <strong>__attribute__((stdcall))</strong>). This means all argumens
should be passed on stack. Specifically at <strong>RtlMultiByteToUnicodeN()</strong>
entry first argument should be at <strong>esp + 4</strong>:</p>
<pre class><code>; at RtlMultiByteToUnicodeN entry:
             | ...
 $esp     -&gt; | &lt;return address to RtlAnsiStringToUnicodeString&gt;
 $esp + 4 -&gt; | arg1: dst
             | arg2: dstlen
             | arg3: reslen
             | arg4: src
             | arg5: srclen
             | ...</code></pre>
<p>Let’s trace <strong>reslen</strong> through to <strong>RtlCustomCPToUnicodeN()</strong> call
site (<strong>RtlMultiByteToUnicodeN+144</strong>).</p>
<pre class><code>Dump of assembler code for function RtlMultiByteToUnicodeN:
   0x7bc5d330 &lt;+0&gt;:     lea    0x4(%esp),%ecx   ; $ecx=$esp+4 (save pointer to parameter 1 on stack)
   0x7bc5d334 &lt;+4&gt;:     and    $0xfffffff0,%esp ; align $esp to 16 bytes
   0x7bc5d337 &lt;+7&gt;:     push   -0x4(%ecx)       ; re-save return address on current top of stack
   0x7bc5d33a &lt;+10&gt;:    push   %ebp             ; safe frame pointer.
   0x7bc5d33b &lt;+11&gt;:    mov    %esp,%ebp
   0x7bc5d33d &lt;+13&gt;:    push   %ebx
   0x7bc5d33e &lt;+14&gt;:    mov    0x8(%ebp),%eax   ; load arg1(dst)
   0x7bc5d341 &lt;+17&gt;:    vmovd  0xc(%ebp),%xmm0  ; load arg2(dstlen)
   0x7bc5d346 &lt;+22&gt;:    vmovd  0x18(%ebp),%xmm1 ; load arg5(srclen)
   0x7bc5d34b &lt;+27&gt;:    mov    0x7bcc150c,%ebx  ; load 'nls_info.AnsiTableInfo.WideCharTable' address
   0x7bc5d351 &lt;+33&gt;:    push   %ecx
   0x7bc5d352 &lt;+34&gt;:    mov    0x10(%ebp),%edx  ; -&gt;&gt;&gt; load arg3(reslen)
   0x7bc5d355 &lt;+37&gt;:    mov    0x14(%ebp),%ecx  ; load arg4(src)
   0x7bc5d358 &lt;+40&gt;:    test   %ebx,%ebx
   0x7bc5d35a &lt;+42&gt;:    jne    0x7bc5d3a8 &lt;RtlMultiByteToUnicodeN+120&gt;
   ...
   0x7bc5d3ab &lt;+123&gt;:   vmovd  %xmm1,(%esp)     ; push srclen (forward arg5 unmodified)
   0x7bc5d3b0 &lt;+128&gt;:   push   %ecx             ; push src (forward arg4 unmodified)
   0x7bc5d3b1 &lt;+129&gt;:   push   %edx             ; -&gt;&gt;&gt; push reslen (forward arg3 unmodified)
   0x7bc5d3b2 &lt;+130&gt;:   sub    $0x4,%esp
   0x7bc5d3b5 &lt;+133&gt;:   vmovd  %xmm0,(%esp)     ; push dstlen (forward arg2 unmodified)
   0x7bc5d3ba &lt;+138&gt;:   push   %eax             ; push dst (forward arg1 unmodified)
   0x7bc5d3bb &lt;+139&gt;:   push   $0x7bcc14ec      ; push info
   0x7bc5d3c0 &lt;+144&gt;:   call   0x7bc5d150 &lt;RtlCustomCPToUnicodeN&gt;
   0x7bc5d3c5 &lt;+149&gt;:   lea    -0x8(%ebp),%esp
   0x7bc5d3c8 &lt;+152&gt;:   pop    %ecx
   0x7bc5d3c9 &lt;+153&gt;:   pop    %ebx
   0x7bc5d3ca &lt;+154&gt;:   pop    %ebp
   0x7bc5d3cb &lt;+155&gt;:   lea    -0x4(%ecx),%esp
   0x7bc5d3ce &lt;+158&gt;:   ret    $0x14</code></pre>
<p>The only problem with this code is that arguments are loaded from
<strong>ebp</strong> as if <strong>and $0xfffffff0,%esp</strong> instruction never existed.
And as a result we load arguments at a wrong stack location!</p>
<p>That is a compiler bug. Filed as <a href="https://gcc.gnu.org/PR98161">https://gcc.gnu.org/PR98161</a>.</p>
<p>Here is the single-file example:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">short</span> u16<span class="op">;</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">int</span>   u32<span class="op">;</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">unsigned</span> <span class="dt">char</span>  u8<span class="op">;</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>u32</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>    __attribute__<span class="op">((</span>__force_align_arg_pointer__<span class="op">))</span></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>unreach<span class="op">(</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> u16 <span class="op">*</span> pu16<span class="op">,</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>    u16 <span class="op">*</span>dst<span class="op">,</span> u32 dstlen<span class="op">,</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> u8 <span class="op">*</span>src<span class="op">,</span> u32 srclen</span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">)</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>u32 i <span class="op">=</span> dstlen<span class="op">;</span> srclen <span class="op">&amp;&amp;</span> i<span class="op">;</span> i<span class="op">--,</span> srclen<span class="op">--,</span> src<span class="op">++,</span> dst<span class="op">++)</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a>        u16 off <span class="op">=</span> pu16<span class="op">[*</span>src<span class="op">];</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>off<span class="op">)</span></span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a>            src<span class="op">++;</span> srclen<span class="op">--;</span></span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">*</span>dst <span class="op">=</span> pu16<span class="op">[</span>off <span class="op">+</span> <span class="op">*</span>src<span class="op">];</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">56</span><span class="op">;</span></span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a>u32</span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a>    __attribute__<span class="op">((</span>__force_align_arg_pointer__<span class="op">))</span></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true" tabindex="-1"></a>    __attribute__<span class="op">((</span>noipa<span class="op">))</span></span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true" tabindex="-1"></a>bug<span class="op">(</span></span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> u16 <span class="op">*</span> pu16<span class="op">,</span></span>
<span id="cb24-30"><a href="#cb24-30" aria-hidden="true" tabindex="-1"></a>    u16 <span class="op">*</span>dst<span class="op">,</span> u32 dstlen<span class="op">,</span></span>
<span id="cb24-31"><a href="#cb24-31" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> u8 <span class="op">*</span>src<span class="op">,</span> u32 srclen</span>
<span id="cb24-32"><a href="#cb24-32" aria-hidden="true" tabindex="-1"></a>  <span class="op">)</span></span>
<span id="cb24-33"><a href="#cb24-33" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb24-34"><a href="#cb24-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>pu16<span class="op">)</span></span>
<span id="cb24-35"><a href="#cb24-35" aria-hidden="true" tabindex="-1"></a>       <span class="co">/* Branch should not execute, but stack realignment</span></span>
<span id="cb24-36"><a href="#cb24-36" aria-hidden="true" tabindex="-1"></a><span class="co">        * reads wrong 'pu16' value from stack. */</span></span>
<span id="cb24-37"><a href="#cb24-37" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> unreach<span class="op">(</span>pu16<span class="op">,</span> dst<span class="op">,</span> dstlen<span class="op">,</span> src<span class="op">,</span> srclen<span class="op">);</span></span>
<span id="cb24-38"><a href="#cb24-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-39"><a href="#cb24-39" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">(</span>srclen <span class="op">&lt;</span> dstlen<span class="op">)</span> <span class="op">?</span> srclen <span class="op">:</span> dstlen<span class="op">;</span></span>
<span id="cb24-40"><a href="#cb24-40" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb24-41"><a href="#cb24-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-42"><a href="#cb24-42" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb24-43"><a href="#cb24-43" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Should return 12 */</span></span>
<span id="cb24-44"><a href="#cb24-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> bug<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">12</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">34</span><span class="op">);</span></span>
<span id="cb24-45"><a href="#cb24-45" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The mismatch is seen on <strong>-O1</strong> / <strong>-O2</strong>:</p>
<pre class><code>$ x86_64-pc-linux-gnu-gcc -m32 -fno-PIC -fno-builtin -pipe -fcf-protection=none -fno-stack-protector -fno-omit-frame-pointer \
    -O1 -mavx -o bug bug.c.c
./bug; echo $?
12

$ x86_64-pc-linux-gnu-gcc -m32 -fno-PIC -fno-builtin -pipe -fcf-protection=none -fno-stack-protector -fno-omit-frame-pointer \
    -O2 -mavx -o bug bug.c.c
./bug; echo $?
56</code></pre>
<p>There are a few unusual things about the example:</p>
<ul>
<li><strong>wine</strong> uses <strong>__attribute__((__force_align_arg_pointer__))</strong> to realign stack
as windows and linux have slightly different alignment assumptions.</li>
<li><strong>-msse4</strong> or above was used to compile <strong>wine</strong></li>
<li>unreleased <strong>gcc-11</strong> was used to compile <strong>wine</strong> (<strong>gcc-10</strong> works fine)</li>
</ul>
<h1 id="parting-words">Parting words</h1>
<ul>
<li><strong>wine</strong> can normally run <strong>mingw</strong>-compiled binaries :)</li>
<li><strong>wine</strong>’s loader process is very similar to <strong>glibc</strong>’s ld process
with a few minor differences like re-execution on first run.</li>
<li><strong>WINELOADERNOEXEC=1</strong> is a good hack to make <strong>wine</strong> more
debuggable under <strong>gdb</strong>. I wonder if <strong>gdb</strong> (or <strong>wine</strong>?)
could be tweaked to avoid the need for <strong>WINELOADERNOEXEC=1</strong>
as a workaround to get symbols.</li>
<li><strong>gdb</strong> is quite usable to debug binaries under <strong>wine</strong>.</li>
<li><strong>gcc-11</strong> is still an unreleased version of compiler. If you
enjoy tracking these kinds of bugs as I do you might want to
give it a try.</li>
</ul>
<p>I reported the bug this Sunday morning and was lazily writing
this blog post. <strong>gcc</strong> upstream already fixed bug in master
before I have finished the post. What a speed!</p>
<p>Have fun!</p>

<div class="info">
    Posted on December  6, 2020 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Filter out AAAA DNS responses</title>
    <link href="http://trofi.github.io/posts/220-filter-out-AAAA-DNS-responses.html" />
    <id>http://trofi.github.io/posts/220-filter-out-AAAA-DNS-responses.html</id>
    <published>2020-11-07T00:00:00Z</published>
    <updated>2020-11-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Filter out AAAA DNS responses</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Filter out AAAA DNS responses</h1>

            <h1 id="tldr-with-rpz-we-can-hide-aaaa-records-while-preserving-other-records">Tl;DR: with RPZ we can hide AAAA records while preserving other records</h1>
<p>For those who look up the way to filter out AAAA records
in their local caching DNS server here is my <strong>unbound</strong>
snippet for a single <strong>ipv6</strong> address:</p>
<pre class><code>$ cat /etc/unbound/rpz.home
$ORIGIN rpz.home.
;; fails to resolve: https://bugs.gentoo.org/742326
;; block 2607:fcc0:4:ffff::4/128 -&gt; NODATA (CNAME *.)
128.4.0.0.0.ffff.4.fcc0.2607.rpz-ip.rpz.home. CNAME *.

$ cat /etc/unbound/unbound.conf
server:
    ... usual configuration goes here
    module-config: &quot;respip validator iterator&quot;

rpz:
    name: rpz.home.
    zonefile: /etc/unbound/rpz.home</code></pre>
<p>Resolver can’t see the <strong>ipv6</strong> address, only <strong>ipv4</strong>:</p>
<pre class><code>$ dig bugs.gentoo.org AAAA @8.8.8.8
gannet.gentoo.org.      21599   IN      AAAA    2607:fcc0:4:ffff::4
$ dig bugs.gentoo.org AAAA | fgrep AAAA
# nothing

$ dig bugs.gentoo.org A @8.8.8.8
gannet.gentoo.org.      21599   IN      A       204.187.15.4
$ dig bugs.gentoo.org A
gannet.gentoo.org.      20091   IN      A       204.187.15.4</code></pre>
<p>You can do full subnetworks as well.</p>
<h1 id="why">Why?</h1>
<p>The other day I tried to reach <strong>bugs.gentoo.org</strong> programmatically
over HTTP API and observed traffic blackholing. <strong>wget</strong> was also
showing hangups:</p>
<pre class><code>$ wget bugs.gentoo.org
--2020-09-19 09:24:22--  http://bugs.gentoo.org/
Resolving bugs.gentoo.org... 2607:fcc0:4:ffff::4, 204.187.15.4
Connecting to bugs.gentoo.org|2607:fcc0:4:ffff::4|:80...
# hung up
^C

$ wget -4 bugs.gentoo.org
--2020-09-19 09:25:02--  http://bugs.gentoo.org/
Resolving bugs.gentoo.org... 204.187.15.4
Connecting to bugs.gentoo.org|204.187.15.4|:80... connected.
HTTP request sent, awaiting response... 301 Moved Permanently
...
2020-09-19 09:25:03 (1.08 MB/s) - 'index.html' saved [13934]</code></pre>
<p>As a workaround I added <strong>AAAA</strong> response filtering locally as
specified in <strong>TL;DR</strong> to unblock the scripts.</p>

<div class="info">
    Posted on November  7, 2020 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>Fixing HPPA boot</title>
    <link href="http://trofi.github.io/posts/219-fixing-hppa-boot.html" />
    <id>http://trofi.github.io/posts/219-fixing-hppa-boot.html</id>
    <published>2020-07-06T00:00:00Z</published>
    <updated>2020-07-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: Fixing HPPA boot</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>Fixing HPPA boot</h1>

            <p>It feels like I did not have much chance to fix anything
complicated on <strong>hppa</strong> machines (aka <strong>PA-RISC</strong>). But
recently …</p>
<p>On #gentoo-hppa IRC channel Jeroen Roovers reported a problem:
after a switch to <strong>gcc-10</strong> and rebuilding/reinstalling
<strong>sys-boot/palo</strong> package (<strong>PA-RISC</strong> bootloader) the machine
was not able to boot anymore.</p>
<p>Reverting to <strong>palo</strong> built with <strong>gcc-9</strong> fixed the boot.
Is it a <strong>gcc</strong> bug?</p>
<h1 id="clues">Clues</h1>
<p>New toolchain versions tend to break bootloaders all the time.
There are so many ways to do it! Where do we start?
My standard guesses are:</p>
<ul>
<li>code size increase and overflow (bootloaders are often constrained in size).</li>
<li>new unhandled relocation types from fresh <strong>binutils</strong></li>
<li>new forms of instructions not supported by early environment (for example
SIMD CPU extension might need reconfiguration)</li>
<li><strong>-fPIE</strong> Gentoo’s default</li>
<li><strong>-fstack-protector</strong> Gentoo’s default</li>
</ul>
<p><strong>gcc-10</strong> is <a href="http://trofi.github.io/posts/213-gcc-10-in-gentoo.html">known</a>
to have quite a few non-trivial code generation changes like
enabling <strong>-fno-common</strong> defaults and maybe something else.</p>
<h1 id="first-try">First try</h1>
<p>Jeroen tested <strong>palo</strong> with <strong>gcc-10 -fcommon</strong>, but it did
not fix machine boot. Not so simple.</p>
<p>I had no idea on how <strong>hppa</strong> boots. <strong>palo</strong> itself has a
great doc explaining how it should work:
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/deller/palo.git/tree/README.html">https://git.kernel.org/pub/scm/linux/kernel/git/deller/palo.git/tree/README.html</a></p>
<p>Tl;DR of the boot process is:</p>
<ol type="1">
<li><p>machine starts it’s own firmware</p></li>
<li><p>firmware enumerates disks and reads first 512 bytes
block of the boot disk</p></li>
<li><p>firmware expects first block in the following format
(<strong>IPL</strong> stands for <strong>I</strong>nitial <strong>P</strong>rogram <strong>L</strong>oader):</p>
<pre class><code>0x80 0x00: some signature
... 
IPL_ADDR:  4 bytes, offset of IPL on disk, must be 2K multiple
IPL_SIZE:  4 bytes, size of IPL program, must be 2K multiple
IPL_ENTRY: 4 bytes, entry point offset within IPL, 4-byte aligned
...</code></pre></li>
<li><p>firmware reads <strong>IPL</strong> into RAM and transfers control.
This is where our code starts running.</p></li>
</ol>
<p>Simple! Almost like <strong>x86</strong> <strong>BIOS</strong> <strong>MBR</strong> style boot (with one
extra indirection).</p>
<p>Simplicity also means that recovering system with broken
<strong>IPL</strong> written on disk is tedious: you need to boot from good
media (other disk, CD, netboot) and rewrite it on disk.</p>
<p>Firmware also logs the boot process and complains when
something went wrong (<a href="https://bugs.gentoo.org/724264">boot log example</a>).</p>
<p>Our <strong>IPL</strong> program implementation is <strong>iplboot</strong> file from
<strong>palo</strong> package. It’s full size is about 50K, which is a
manageable size to get through disassembly manually if nothing
else works.</p>
<h1 id="gcc-hint">gcc hint</h1>
<p>Jeroen also noticed suspicious <strong>palo</strong> build warning:</p>
<pre class><code>bootloader.h:71:6: warning: conflicting types for built-in function ‘bzero’;
    expected ‘void(void *, unsigned int)’ [-Wbuiltin-declaration-mismatch]</code></pre>
<p><strong>gcc</strong> says that <strong>bzero()</strong> prototype in <strong>palo</strong> code
is different from the standard prototype. Who knows
what that means for <strong>gcc</strong>? Could it stop applying
<strong>bzero()</strong>-related optimizations like inlining on small
fixed-sized buffers?</p>
<p>I attempted to check the difference in the generated code.</p>
<p>To speed things up a bit I moved to <strong>x86_64</strong>
machine and continued debugging there. Cross-compiling
<strong>palo</strong> on Gentoo is simple:</p>
<pre class><code>### build cross-compilers:
# crossdev hppa2.0-unknown-linux-gnu

### build palo
$ LANG=C PORTAGE_CONFIGROOT=/usr/hppa2.0-unknown-linux-gnu ebuild palo-2.12-r1.ebuild clean compile
...
    In file included from ../lib/gzip.c:25:
./bootloader.h:71:6: warning: conflicting types for built-in function 'bzero';
    expected 'void(void *, unsigned int)' [-Wbuiltin-declaration-mismatch]
   71 | void bzero(char *p, size_t len);
      |      ^~~~~</code></pre>
<p>Let’s look at how exactly <strong>iplboot</strong> is built:</p>
<pre class><code>make -j8 AR=hppa2.0-unknown-linux-gnu-ar CC=hppa2.0-unknown-linux-gnu-gcc \
    LD=hppa2.0-unknown-linux-gnu-ld -C ipl

make: Entering directory '/tmp/portage/sys-boot/palo-2.12-r1/work/palo-2.12/ipl'

hppa2.0-unknown-linux-gnu-gcc -D__ASSEMBLY__ -I../lib -traditional -c -o crt0.o crt0.S

hppa2.0-unknown-linux-gnu-gcc -DIPL_LOADER -I. -I../lib -I../include \
    -O2 -mdisable-fpregs -Wall -fno-delete-null-pointer-checks   -c -o byteio.o byteio.c
...
hppa2.0-unknown-linux-gnu-ar rv ipl.a byteio.o elf64.o ipl.o offset.o \
    gzip.o diskpart.o ext2.o lib.o pdc_bootio.o vsprintf.o elf32.o \
    fileio.o load.o pdc_cons.o pdc_misc.o
...
echo &quot;const char bld_info[] = \&quot;http://www.parisc-linux.org - Sat Jul 4 11:44:42 BST 2020\&quot;;&quot; &gt; build.c

hppa2.0-unknown-linux-gnu-gcc -DIPL_LOADER -I. -I../lib -I../include \
    -O2 -mdisable-fpregs -Wall -fno-delete-null-pointer-checks -c -o build.o build.c

hppa2.0-unknown-linux-gnu-ld -N --section-start .init=0x60000 -e '$START$' \
    -o iplelf crt0.o ipl.a build.o `hppa2.0-unknown-linux-gnu-gcc -print-libgcc-file-name`
...
./palo/mkbootable ipl/iplelf iplboot</code></pre>
<p>Here we see a few frequently used tricks for boot programs:</p>
<ul>
<li>the bootloader is first linked into a static ELF file with <strong>ld</strong> command</li>
<li><strong>ld</strong> arguments carefully avoid linkage against <strong>-lc</strong> (<strong>libc</strong>)</li>
<li><strong>ld</strong> arguments pull in <strong>libgcc.a</strong> (via <strong>-print-libgcc-file-name</strong>)</li>
<li>entry point is set to <strong>$START$</strong> label</li>
<li><strong>.init</strong> section is pinned to static <strong>0x60000</strong> address</li>
</ul>
<p>To explore the difference I patched <strong>palo</strong>’s <strong>bzero</strong> prototype
to match the standard <strong>libc</strong> definition:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/palo-2.12/ipl/bootloader.h2019-09-05 22:25:39.000000000 +0100</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/palo-2.12/ipl/bootloader.h2020-07-04 12:53:53.706511217 +0100</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -68,7 +68,7 @@</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a> int streq(const char *a, const char *b);</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a> char *strcpy(char *dest, const char *src);</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a> char *strcat(char *dest, const char *src);</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="st">-void bzero(char *p, size_t len);</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+void bzero(void *p, size_t len);</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a> void *memcpy(void *d, const void *s, size_t len);</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a> size_t strlen(const char *s);</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a> size_t strnlen(const char *s, size_t count);</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="kw">--- palo-2.12-r1_orig/work/palo-2.12/ipl/lib.c2019-09-05 22:25:39.000000000 +0100</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ palo-2.12-r1/work/palo-2.12/ipl/lib.c2020-07-04 12:55:18.861477880 +0100</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -202,8 +202,9 @@</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a> return NULL;</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="st">-void bzero(char *p, size_t len)</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="va">+void bzero(void *_p, size_t len)</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="va">+char *p = _p;</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a> /* slow but safe */</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a> while (len--)</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>     *p++ = 0;</span></code></pre></div>
<p>And diffed disassembly produced by
<strong>hppa2.0-unknown-linux-gnu-objdump -d $file.o</strong>:</p>
<pre class><code>$ diff -u \
    &lt;(hppa2.0-unknown-linux-gnu-objdump -r -d ./palo-2.12-r1_orig/work/palo-2.12/ipl/ipl.o) \
    &lt;(hppa2.0-unknown-linux-gnu-objdump -r -d ./palo-2.12-r1/work/palo-2.12/ipl/ipl.o)
       ...
       b,l 71c &lt;iplmain+0x80&gt;,rp
-          R_PARISC_PCREL17F bzero
+          R_PARISC_PCREL17F memset
       ...</code></pre>
<p>Here we see that <strong>bzero()</strong> call was changed to <strong>memset()</strong> call.
Normally this transformation is not harmful. But <strong>memset()</strong> call
was generated out of nowhere and <strong>gcc</strong> just assumes the function
definition exists somewhere. Luckily <strong>palo</strong> defines <strong>memset()</strong>
as well and the transformation is not problematic.</p>
<h1 id="trying-the-hypothesis">Trying the hypothesis</h1>
<p>Jeroen tried a similar <strong>bzero()</strong> patch on <strong>hppa</strong> machine
and confirmed this change does not fix the boot problem.</p>
<p>Looking at the diff suggested that <strong>gcc</strong> does high-level
transformations related to builtin functions. As bootloaders usually
don’t require high performance we can disable all builtins
with <strong>-fno-builtin</strong> and get more predictable code generation.</p>
<p>Jeroen added <strong>-fno-builtin</strong> compiler option to <strong>palo</strong> and the
system booted again! <a href="https://git.kernel.org/pub/scm/linux/kernel/git/deller/palo.git/commit/?id=a9d9c86da54064023633f4b71d57e68ec426d11d">Upstream patch</a>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/ipl/Makefile</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/ipl/Makefile</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -39,7 +39,7 @@ endif</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a> VPATH=../lib:.</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a> AFLAGS= -I../lib</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="st">-CFLAGS= -DIPL_LOADER -I. -I../lib -I../include -O2 -mdisable-fpregs -Wall -fno-delete-null-pointer-checks</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="va">+CFLAGS= -DIPL_LOADER -I. -I../lib -I../include -O2 -mdisable-fpregs -Wall -fno-delete-null-pointer-checks -fno-builtin</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a> LDFLAGS  = -N --section-start .init=0x60000 -e '$$START$$'</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a> all:iplelf</span></code></pre></div>
<h1 id="breakage-mechanics">Breakage mechanics</h1>
<p>I wanted to understand the exact failure mode a bit better. Is
it a proper fix or a workaround for some underlying problem?
To get some details I compared disassembly files of default vs
<strong>-fno-builtin</strong> <strong>palo</strong> builds.</p>
<p>Most interesting code generation change happened in
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/deller/palo.git/tree/ipl/lib.c?id=a9d9c86da54064023633f4b71d57e68ec426d11d">ipl/lib.c</a>.</p>
<p>I’ll spare you from the assembly listings and show intermediate
representation instead. Let’s check what optimizer does
with <strong>ipl/lib.c</strong> using <strong>-fopt-info</strong> option.</p>
<p>Default build:</p>
<pre class><code>$ hppa2.0-unknown-linux-gnu-gcc -DIPL_LOADER -I. -I../lib -I../include -O2 -mdisable-fpregs -Wall -fno-delete-null-pointer-checks  -c -o lib.o lib.c -fopt-info
In file included from lib.c:8:
bootloader.h:71:6: warning: conflicting types for built-in function «bzero»; expected «void(void *, unsigned int)» [-Wbuiltin-declaration-mismatch]
   71 | void bzero(char *p, size_t len);
      |      ^~~~~
lib.c:42:12: optimized:  Inlining malloc_aligned/36 into malloc/37.
lib.c:113:9: optimized:  Inlining strpbrk/42 into strtok/44.
...
lib.c:58:6: optimized: Semantic equality hit:release/40-&gt;malloc_init/41
lib.c:58:6: optimized: Assembler symbol names:release/40-&gt;malloc_init/41
optimized:  Inlined release/74 into malloc_init/41 which now has time 3.000000 and size 4, net change of -1.
lib.c:108:12: optimized:  Inlined strspn/75 into strtok/44 which now has time 590.273748 and size 44, net change of +9.
lib.c:137:8: optimized: Loop 1 distributed: split to 0 loops and 1 library calls.
lib.c:137:8: optimized: Loop 1 distributed: split to 0 loops and 1 library calls.
lib.c:208:8: optimized: Loop 1 distributed: split to 0 loops and 1 library calls.</code></pre>
<p><strong>-fno-builtin</strong> build:</p>
<pre class><code>$ hppa2.0-unknown-linux-gnu-gcc -DIPL_LOADER -I. -I../lib -I../include -O2 -mdisable-fpregs -Wall -fno-delete-null-pointer-checks -fno-builtin   -c -o lib.o lib.c -fopt-info
lib.c:42:12: optimized:  Inlining malloc_aligned/36 into malloc/37.
lib.c:113:9: optimized:  Inlining strpbrk/42 into strtok/44.
...
lib.c:58:6: optimized: Semantic equality hit:release/40-&gt;malloc_init/41
lib.c:58:6: optimized: Assembler symbol names:release/40-&gt;malloc_init/41
optimized:  Inlined release/73 into malloc_init/41 which now has time 3.000000 and size 4, net change of -1.
lib.c:108:12: optimized:  Inlined strspn/74 into strtok/44 which now has time 544.436932 and size 44, net change of +9.</code></pre>
<p>Function inlining is expected and probably not very interesting.
Let’s check out other two optimizations:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Semantic equality hit:release/40-&gt;malloc_init/41</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> release <span class="op">(</span><span class="dt">void</span> <span class="op">*</span>ptr<span class="op">)</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    __free <span class="op">=</span> <span class="op">(</span><span class="dt">char</span> <span class="op">*)</span> ptr<span class="op">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> malloc_init<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>free<span class="op">)</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    __free <span class="op">=</span> free<span class="op">;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <strong>gcc</strong> caught identical implementation of two functions.</p>
<p>Now on to the loop distribution optimization:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">// lib.c:137:8: optimized: Loop 1 distributed: split to 0 loops and 1 library calls.</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span> memset<span class="op">(</span><span class="dt">void</span> <span class="op">*</span> s<span class="op">,</span><span class="dt">int</span> c<span class="op">,</span><span class="dt">size_t</span> count<span class="op">)</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> <span class="op">*</span>xs <span class="op">=</span> <span class="op">(</span><span class="dt">char</span> <span class="op">*)</span> s<span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>count<span class="op">--)</span> <span class="co">/* line 137 */</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>xs<span class="op">++</span> <span class="op">=</span> c<span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> s<span class="op">;</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The exact message <strong>“split to 0 loops and 1 library calls”</strong>
tells us that the resulting code has no loops and one library
call.</p>
<p><em>Quiz time: guess what library call was this loop replaced with? :)</em></p>
<p>Let’s look at the intermediate compiler state to find out.
<strong>gcc</strong> has a set of <strong>-fdump-*</strong> options to peek at various
phases. I never know what I’m looking for and just dump all
of them:</p>
<pre class><code>$ hppa2.0-unknown-linux-gnu-gcc -DIPL_LOADER -I. -I../lib -I../include \
    -O2 -mdisable-fpregs -Wall -fno-delete-null-pointer-checks -c -o lib.o lib.c \
    -fdump-tree-all-slim -fdump-rtl-all-slim</code></pre>
<p>The command generates about 350 files with names of the form
<strong>lib.c.nnn{t,r}.${pass_name}</strong> for all passes. I’ll show two
most relevant passes for our case.</p>
<p>Just before loop distribution pass:</p>
<pre class><code>;; $ cat lib.c.148t.ivcanon
;; Function memset (memset, funcdef_no=45, decl_uid=796, cgraph_uid=46, symbol_order=46)

__attribute__((nothrow, leaf))
memset (void * s, int c, size_t count)
{
  char * xs;
  char _4;

  &lt;bb 2&gt; [local count: 118111600]:
  count_15 = count_6(D) + 4294967295;
  if (count_6(D) != 0)
    goto &lt;bb 4&gt;; [89.00%]
  else
    goto &lt;bb 7&gt;; [11.00%]

  &lt;bb 7&gt; [local count: 12992276]:

  &lt;bb 3&gt; [local count: 118111600]:
  return s_5(D);

  &lt;bb 4&gt; [local count: 105119324]:
  _4 = (char) c_10(D);

  &lt;bb 5&gt; [local count: 955630225]:
  # xs_16 = PHI &lt;s_5(D)(4), xs_9(6)&gt;
  # count_19 = PHI &lt;count_15(4), count_8(6)&gt;
  xs_9 = xs_16 + 1;
  *xs_16 = _4;
  count_8 = count_19 + 4294967295;
  if (count_19 != 0)
    goto &lt;bb 6&gt;; [89.00%]
  else
    goto &lt;bb 8&gt;; [11.00%]

  &lt;bb 8&gt; [local count: 105119324]:
  goto &lt;bb 3&gt;; [100.00%]

  &lt;bb 6&gt; [local count: 850510901]:
  goto &lt;bb 5&gt;; [100.00%]

}</code></pre>
<p>It’s a bit hard to read, but it’s still the same loop in disguise:</p>
<ul>
<li>function prologue to check for exit condition early</li>
<li>increment counter: <strong>xs_9 = xs_16 + 1;</strong></li>
<li>single memory store iteration: <strong>*xs_16 = _4;</strong></li>
<li>loop exit condition check: <strong>if (count_19 != 0)</strong></li>
<li>next iteration: <strong>goto &lt;bb 5&gt;;</strong></li>
</ul>
<p>Let’s check what loop distribution pass did to it.</p>
<p>After:</p>
<pre class><code>;; $ cat lib.c.149t.ldist
;; Function memset (memset, funcdef_no=45, decl_uid=796, cgraph_uid=46, symbol_order=46)

__attribute__((nothrow, leaf))
memset (void * s, int c, size_t count)
{
  char * xs;
  char _4;
  int _18;

  &lt;bb 2&gt; [local count: 118111600]:
  count_15 = count_6(D) + 4294967295;
  if (count_6(D) != 0)
    goto &lt;bb 4&gt;; [89.00%]
  else
    goto &lt;bb 3&gt;; [11.00%]

  &lt;bb 3&gt; [local count: 118111600]:
  return s_5(D);

  &lt;bb 4&gt; [local count: 105119324]:
  _4 = (char) c_10(D);
  _18 = (int) _4;
  __builtin_memset (s_5(D), _18, count_6(D));
  goto &lt;bb 3&gt;; [100.00%]

}</code></pre>
<p>Now it’s just two steps:</p>
<ul>
<li>[unchanged] a bit of function prologue to check exit condition early</li>
<li>[new] all of loop code is transformed to … a <strong>memset()</strong> call!</li>
</ul>
<p>In C it would look similar to the following:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span> memset<span class="op">(</span><span class="dt">void</span> <span class="op">*</span> s<span class="op">,</span> <span class="dt">int</span> c<span class="op">,</span> <span class="dt">size_t</span> count<span class="op">)</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> <span class="op">*</span>xs <span class="op">=</span> <span class="op">(</span><span class="dt">char</span> <span class="op">*)</span> s<span class="op">;</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span> count<span class="op">)</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> xs<span class="op">;</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> memset<span class="op">(</span>s<span class="op">,</span> c<span class="op">,</span> count<span class="op">);</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s an infinite recursion without a chance to succeed.</p>
<p>Second loop distribution transformation is also enlightening:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">// lib.c:208:8: optimized: Loop 1 distributed: split to 0 loops and 1 library calls.</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> bzero<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>p<span class="op">,</span> <span class="dt">size_t</span> len<span class="op">)</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* slow but safe */</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>len<span class="op">--)</span> <span class="co">/* line 208 */</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>p<span class="op">++</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>was transformed into:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> bzero<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>p<span class="op">,</span> <span class="dt">size_t</span> len<span class="op">)</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span> len<span class="op">)</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>    memset<span class="op">(</span>p<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> len<span class="op">);</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The result is similar: a call to <strong>memset()</strong> and infinite
recursion there.</p>
<p>Arfrever pointed out that <strong>gcc-10</strong> enabled
<strong>-ftree-loop-distribute-patterns</strong> option on <strong>-O2</strong> and
above. While previous version of <strong>gcc</strong> did it on <strong>-O3</strong>
and above. This change probably exposed this failure mode.</p>
<h1 id="parting-words">Parting words</h1>
<ul>
<li><p>C compiler does many unusual things behind your back and
relies on runtime libraries to provide basic primitives
like <strong>memset()</strong>.</p>
<p>This means <strong>memset()</strong> and friends can’t be naively implemented
in standard C without tricks on compiler and build system
side even if we ignore things like aliasing rule changes due to pointer casts.</p></li>
<li><p><strong>hppa</strong> booting process is very straightforward. This makes
it somewhat debuggable without access to <strong>hppa</strong> machine :)</p></li>
<li><p>bootloaders use advanced tricks to reuse standard compiler
and linker to be able to write most code in C.</p></li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on July  6, 2020 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>debuigging LTO builds</title>
    <link href="http://trofi.github.io/posts/218-debugging-LTO-builds.html" />
    <id>http://trofi.github.io/posts/218-debugging-LTO-builds.html</id>
    <published>2020-05-19T00:00:00Z</published>
    <updated>2020-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: debuigging LTO builds</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>debuigging LTO builds</h1>

            <h1 id="lto">LTO</h1>
<p>Link-Time Optimizationis a way to unlock many interprocedural
optimizations across modules (across <strong>.c</strong> files). Normally
these optimizations applied within a file.</p>
<p>It is a great opportunity to get smaller and faster programs
for free: dead code elimination and inliner sees the whole program. And
it is also an endless pit of bugs you can get yourself into without an easy way to
debug it: changes in one <strong>.c</strong> file can expose surprising behaviour
in another <strong>.c</strong> file. That is not very friendly to <strong>printf</strong> debugging
technique.</p>
<p>But not all hope is lost! We can get a lot of detail back from the compiler
if something goes wrong.</p>
<p>This post will focus on build-time debugging (opposed to run-time debugging).</p>
<h1 id="simple-example">Simple example</h1>
<p>Let’s see what we can infer just by looking at how gcc builds a tiny example.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// one-two.c</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span>  one<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span>  two<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> <span class="dv">2</span><span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// three-four.c</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> three<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> <span class="dv">3</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span>  four<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> <span class="dv">4</span><span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// main.c</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span>  one<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> four<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co">//</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> one<span class="op">()</span> <span class="op">+</span> four<span class="op">();</span> <span class="op">}</span></span></code></pre></div>
<p>Here we defined three modules where each has a redundant unused function.
Let’s see what ends up being in the final binary.</p>
<pre class><code>$ gcc -O1    -flto -c one-two.c    -o one-two.o
$ gcc -O1 -fno-lto -c three-four.c -o three-four.o
$ gcc -O1    -flto -c main.c       -o main.o
$ gcc        -flto    main.o one-two.o three-four.o -o main
./main; echo $?
5</code></pre>
<p>I built <strong>one-two.c</strong> with <strong>LTO</strong> bytecode and <strong>three-four.c</strong> without <strong>LTO</strong> bytecode.
Both files are otherwise symmetric.</p>
<pre class><code>$ objdump -d main
...
0000000000001125 &lt;main&gt;:
    1125: 48 83 ec 08          sub    $0x8,%rsp
    1129: e8 0e 00 00 00       callq  113c &lt;four&gt;
    112e: 83 c0 01             add    $0x1,%eax
    1131: 48 83 c4 08          add    $0x8,%rsp
    1135: c3                   retq

0000000000001136 &lt;three&gt;:
    1136: b8 03 00 00 00       mov    $0x3,%eax
    113b: c3                   retq

000000000000113c &lt;four&gt;:
    113c: b8 04 00 00 00       mov    $0x4,%eax
    1141: c3                   retq
...</code></pre>
<p>A few things happened here:</p>
<ol type="1">
<li><strong>one()</strong> function from <strong>one-two.c</strong> was inlined directly into <strong>main</strong> as <strong>add $0x1,%eax</strong></li>
<li><strong>two()</strong>’s assembly code was not generated at all</li>
<li>redundant unused <strong>three()</strong> body was generated</li>
<li><strong>four()</strong> was not inlined into <strong>main()</strong> and is left as <strong>callq four</strong></li>
</ol>
<p>Let’s check how internal representation looks like for LTO objects with <strong>lto-dump</strong>:</p>
<pre class><code>$ lto-dump -list main.o
Type   Visibility  Size  Name
function  default     0  one
function  default     0  four
function  default     3  main

$ lto-dump -dump-body=main main.o
Gimple Body of Function: main
main ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  _1 = one ();
  _2 = four ();
  _6 = _1 + _2;
  return _6;
}

$ lto-dump -dump-body=one one-two.o
Gimple Body of Function: one
one ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  return 1;
}</code></pre>
<p>Here we see direct intermediate representation of <strong>main()</strong> function. Both function calls
are present. Variable assignments like <strong>_6 = _1 + _2;</strong> are very verbose, but also very simple.</p>
<p>For large programs it’s frequently very hard to say which symbols come from where, where
they are defined and whether bytecode (<strong>IR</strong>) version is available for LTO. You can peek
at <strong>resolution</strong> files left by <strong>-save-temps</strong> gcc flag:</p>
<pre class><code>$ gcc -flto main.o one-two.o three-four.o -o main -save-temps
$ cat -- *.res
2
main.o 3
191 b0674bfb5d86b316 PREVAILING_DEF main
194 b0674bfb5d86b316 RESOLVED_EXEC four
196 b0674bfb5d86b316 RESOLVED_IR one
one-two.o 2
190 e8fe3cc27eebcea2 PREVAILING_DEF_IRONLY one
192 e8fe3cc27eebcea2 PREVAILING_DEF_IRONLY two</code></pre>
<p>In the output we see:</p>
<ul>
<li><strong>RESOLVED_IR</strong> - symbol is referred and is known to have IR somewhere else</li>
<li><strong>PREVAILING_DEF_IRONLY</strong> - symbol is defined and has <strong>IR</strong> only</li>
<li><strong>RESOLVED_EXEC</strong> - symbol is referred and is known to have code lying somewhere around</li>
</ul>
<p>And so on. Some numbers are count of entries in the lists, some are type numbers.</p>
<p>Check out <strong>lto-dump</strong>’s source code at <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/lto/lto-dump.c#l61">https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/lto/lto-dump.c#l61</a>
and <strong>man lto-dump</strong>. I think it’s worth documenting more things in the manual.</p>
<p>There is a minor wart here: the exact name of <strong>.res</strong> file is hard to predict:
<a href="https://gcc.gnu.org/PR95224">https://gcc.gnu.org/PR95224</a>. I suspect very easy to fix.</p>
<p>We can also get the call graph of references:</p>
<pre class><code>$ lto-dump -callgraph *.o
digraph symtab {
    &quot;main/0&quot; -&gt; &quot;four/2&quot;
    &quot;main/0&quot; -&gt; &quot;one/4&quot;
}

$ lto-dump -callgraph *.o | dot -Tsvg -o cg.svg</code></pre>
<h1 id="real-world-example">Real world example</h1>
<p>In <a href="https://bugs.gentoo.org/723370">https://bugs.gentoo.org/723370</a> Andrew reported a mysterious LTO-only
link failure of gcc itself. It should not happen as gcc is regularily
tested on LTO build. And yet:</p>
<pre class><code>ld: gcc-10.1.0/temp/genmatch.NlicMk.ltrans2.ltrans.o:
  in function `main':
    &lt;artificial&gt;:(.text.startup+0x94ba):
      undefined reference to `libintl_dgettext'</code></pre>
<p>Looks like a simple error of trying to use undefined <strong>libintl_dgettext</strong> symbol.
The only annoyance is that it’s unclear what actually tries to pull that undefined
symbol in. <strong>ltrans2.ltrans.o</strong> is a large intermediate object file pulled together
from many small object files.</p>
<p>To simpligy the problem we can enable debugging symbols when building gcc.</p>
<p>Gentoo provides an easy way to do it:</p>
<pre class><code>$ STAGE1_CFLAGS=&quot;$(portageq envvar CFLAGS) -ggdb3&quot; STAGE1_CXXFLAGS=&quot;$(portageq envvar CXXFLAGS) -ggdb3&quot; emerge -v1 sys-devel/gcc
...
..././prev-gcc/xg++ ... -o build/genmatch ... ./../intl/libintl.a

ld: /tmp/genmatch.FJdDDJ.ltrans2.ltrans.o: in function `main':
  gcc-10.1.0/libcpp/files.c:1439:
    undefined reference to `libintl_dgettext'</code></pre>
<p>Now we can see where that reference comes from: <strong>libcpp/files.c:1439</strong>. Rerunning above
<strong>/xg++</strong> command with appended <strong>-save-temps</strong> generates useful <strong>res</strong> file:</p>
<pre class><code>$ ..././prev-gcc/xg++ ... -o build/genmatch ... ./../intl/libintl.a -save-temps
...
$ cat -- *.res | fgrep libintl_dgettext
&lt;nothing!&gt;</code></pre>
<p>No references. How come? Let’s see how that symbol is defined and how it gets called:</p>
<pre class><code># call site
$ prev-gcc/lto-dump -list libcpp/files.o  | fgrep dgettext
function  default     0  *libintl_dgettext

$ prev-gcc/lto-dump -list -demangle libcpp/files.o  | fgrep dgettext
function  default     0  dgettext


# definition site
$ prev-gcc/lto-dump -list intl/dgettext.o  | fgrep dgettext
function  default     3  libintl_dgettext
$ prev-gcc/lto-dump -list -demangle intl/dgettext.o  | fgrep dgettext
function  default     3  libintl_dgettext</code></pre>
<p>Here is my interpretation of the above:</p>
<ol type="1">
<li>Definition site looks at expected: it’s a nice <strong>libintl_dgettext</strong> symbol.</li>
<li>Call site is strange: depending on <strong>-demangle</strong> option it completely changes it’s name.</li>
</ol>
<p>This means <strong>dgettext</strong>’s prototype is not a typical prototype you would expect:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">char</span> <span class="op">*</span>dgettext <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__domainname<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__msgid<span class="op">)</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>   __asm__ <span class="op">(</span><span class="st">&quot;libintl_dgettext&quot;</span><span class="op">);</span></span></code></pre></div>
<p>It’s a gcc extension (TODO: which one?) to emit references to <strong>dgettext</strong> C function
via <strong>libintl_dgettext</strong> assembly labels.</p>
<p><strong>gcc</strong>’s linker plugin does not know that <strong>libintl_dgettext</strong> reference exists as
<strong>LTO</strong> phase is ran before an assempler phase. gcc currently does not nderstand
effect of the assembly symbol mangling.</p>
<p>Thus the fix here is either avoid assembly or disable <strong>LTO</strong> for all callers
of this <strong>__asm__</strong>’y declaration. <a href="https://gcc.gnu.org/PR95194">https://gcc.gnu.org/PR95194</a> suggests a proof-of-concept
style workaround to avoid <strong>__asm__</strong> symbols in <strong>libintl</strong>.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/intl/libgnuintl.h</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/intl/libgnuintl.h</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -84,25 +84,25 @@ extern &quot;C&quot; {</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    Since Solaris gettext() behaves differently than GNU gettext(), this</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    would be unacceptable.</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    The redirection happens by default through macros in C, so that &amp;gettext</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    is independent of the compilation unit, but through inline functions in</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    C++, in order not to interfere with the name mangling of class fields or</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    class methods called 'gettext'.  */</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a> /* The user can define _INTL_REDIRECT_INLINE or _INTL_REDIRECT_MACROS.</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>    If he doesn't, we choose the method.  A third possible method is</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>    _INTL_REDIRECT_ASM, supported only by GCC.  */</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a> #if !(defined _INTL_REDIRECT_INLINE || defined _INTL_REDIRECT_MACROS)</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a><span class="st">-# if __GNUC__ &gt;= 2 &amp;&amp; !defined __APPLE_CC__ &amp;&amp; (defined __STDC__ || defined __cplusplus)</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a><span class="va">+# if __GNUC__ &gt;= 2 &amp;&amp; !defined __APPLE_CC__ &amp;&amp; (defined __STDC__ || defined __cplusplus) &amp;&amp; USE_ASM_ALIASES_THAT_BREAK_LTO</span></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a> #  define _INTL_REDIRECT_ASM</span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a> # else</span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a> #  ifdef __cplusplus</span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a> #   define _INTL_REDIRECT_INLINE</span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a> #  else</span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a> #   define _INTL_REDIRECT_MACROS</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a> #  endif</span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a> # endif</span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a> /* Auxiliary macros.  */</span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a> #ifdef _INTL_REDIRECT_ASM</span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a> # define _INTL_ASM(cname) __asm__ (_INTL_ASMNAME (__USER_LABEL_PREFIX__, #cname))</span></code></pre></div>
<h1 id="parting-words">Parting words</h1>
<p><strong>lto-dump</strong> and <strong>resolution</strong> files make it very easy to debug <strong>LTO</strong> build failures
and explore <strong>LTO</strong> build process and there are a few useful hints:</p>
<ul>
<li><strong>-g</strong> and friends make linker errors more comprehensible of what went wrong</li>
<li><strong>-save-temps</strong> dumps a lot of precise information where used symbols are located
(and how they are partitioned when parallel LTO building happens).</li>
<li>some advanced tricks with <strong>asm</strong> symbols don’t quite work for LTO and sometimes
require a fallback to C code or non-LTO build.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on May 19, 2020 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>
<entry>
    <title>mitigating bufferbloat</title>
    <link href="http://trofi.github.io/posts/217-mitigating%20bufferbloat.html" />
    <id>http://trofi.github.io/posts/217-mitigating%20bufferbloat.html</id>
    <published>2020-04-26T00:00:00Z</published>
    <updated>2020-04-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>trofi's blog: mitigating bufferbloat</title>
        <link rel="stylesheet" type="text/css" href="../css/default.css" />
        <link rel="stylesheet" type="text/css" href="../css/code.css" />
        <link rel="stylesheet" type="text/css" href="../css/highlighting-kate.css" />

        <link rel="alternate" type="application/atom+xml" href="../feed/atom.xml" title="Atom 1.0" />
        <link rel="alternate" type="application/rss+xml" href="../feed/rss.xml" title="RSS 2.0" />
        <link rel="shortcut icon" href="../images/favicon.ico" />
    </head>
    <body>
        <div id="header">
            <a href="../">main :: IO ()</a>
        </div>
        <div id="navigation">
            <a href="../">/root</a>
            <a href="../archive.html">/archive</a>
            <a href="../feed/atom.xml">/atom.xml</a>
            <a href="../feed/rss.xml">/rss.xml</a>
        </div>

        <div id="content">
            <h1>mitigating bufferbloat</h1>

            <h1 id="tldr">Tl;DR</h1>
<p>When I upload something large from my laptop my network latency increases
from <strong>10 milliseconds</strong> up to <strong>2-4 seconds</strong>. That makes remote ssh, audio,
video and even browsing quite a challenging task. I avoid latency increase
and network congestion by aggressively throttling all my device with this
simple command from
<a href="https://www.bufferbloat.net/projects/codel/wiki/Cake/">CAKE howto</a>:</p>
<pre class><code># tc qdisc del dev wl0 root
# tc qdisc add dev wl0 root cake bandwidth 1mbit conservative</code></pre>
<p>Done! Now I almost never notice latency increase even if I upload
A Lot of stuff.</p>
<h1 id="more-words">More words</h1>
<p>If you are experiencing severe networking lags (<strong>10x</strong> latency increase)
when network is congested then you probably experience a <a href="https://www.bufferbloat.net/projects/">bufferbloat effect</a>
where networking devices keep your packets in their large software/hardware queues.</p>
<p>These queues can hide anywhere: in your own networking card(!), in your
wi-fi router, somewhere in the middle of The Internet.
It is a bug in the implementation of those devices.</p>
<p>Excessive buffering usually happens on a last mile of your device
connected to <strong>ISP</strong>. <strong>ISP</strong>s usually have a lot more bandwidth and
smarter devices to avoid that effect.</p>
<h1 id="observing-bufferbloat">Observing bufferbloat</h1>
<p>Before doing anything about it let’s check if we have a problem:</p>
<pre class><code>$ ping 8.8.8.8
64 bytes from 8.8.8.8: icmp_seq=1 ttl=54 time=8.53 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=54 time=18.1 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=54 time=9.47 ms
64 bytes from 8.8.8.8: icmp_seq=4 ttl=54 time=14.1 ms
...
# in a second terminal start uploader
$ scp /boot/vmlinuz slyfox@guppy.ia64.dev.gentoo.org:/tmp/my-kernel
vmlinuz 99% 7968KB 119.1KB/s   00:00 ETA
...
# in the first terminal:
64 bytes from 8.8.8.8: icmp_seq=100 ttl=54 time=116 ms
64 bytes from 8.8.8.8: icmp_seq=101 ttl=54 time=141 ms
64 bytes from 8.8.8.8: icmp_seq=102 ttl=54 time=192 ms
64 bytes from 8.8.8.8: icmp_seq=103 ttl=54 time=188 ms
64 bytes from 8.8.8.8: icmp_seq=104 ttl=54 time=182 ms
64 bytes from 8.8.8.8: icmp_seq=105 ttl=54 time=218 ms
64 bytes from 8.8.8.8: icmp_seq=166 ttl=54 time=223 ms
64 bytes from 8.8.8.8: icmp_seq=167 ttl=54 time=230 ms
64 bytes from 8.8.8.8: icmp_seq=168 ttl=54 time=232 ms
64 bytes from 8.8.8.8: icmp_seq=169 ttl=54 time=8.66 ms &lt;--- recovered
64 bytes from 8.8.8.8: icmp_seq=170 ttl=54 time=9.21 ms
64 bytes from 8.8.8.8: icmp_seq=171 ttl=54 time=8.79 ms
64 bytes from 8.8.8.8: icmp_seq=172 ttl=54 time=9.02 ms
64 bytes from 8.8.8.8: icmp_seq=173 ttl=54 time=10.2 ms</code></pre>
<p>You can notice where upload started and finished just by looking
at the ping latency output.</p>
<p>There is a nice interactive website where you can profile
your network in a slightly more rigorous way: <a href="https://www.dslreports.com/speedtest">https://www.dslreports.com/speedtest</a></p>
<p>My profile on default system: <a href="https://www.dslreports.com/speedtest/62838367">https://www.dslreports.com/speedtest/62838367</a></p>
<p>We can see a bunch of things outright:</p>
<ul>
<li>16.5 mbit/s download and 0.96 mbit/s upload speed</li>
<li>26ms of idle latency (to closest test server perhaps)</li>
<li>latency increases a bit when I congest network with download: 26ms-&gt;70ms (100ms worst)</li>
<li>latency increases A Lot when I congest network with upload: 26ms-&gt;~1s (~2.6s worst)</li>
</ul>
<p>These were my defaults during first test:</p>
<pre class><code>$ tc qdisc show dev wl0
qdisc mq 0: root
qdisc fq_codel 0: parent :4 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
qdisc fq_codel 0: parent :3 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
qdisc fq_codel 0: parent :2 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
qdisc fq_codel 0: parent :1 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn</code></pre>
<p>Now let’s artificially limit egress (outgoing) bandwidth:</p>
<pre class><code># tc qdisc del dev wl0 root
# tc qdisc add dev wl0 root cake bandwidth 1mbit conservative</code></pre>
<p>and retest again: <a href="https://www.dslreports.com/speedtest/62838672">https://www.dslreports.com/speedtest/62838672</a></p>
<p>Things changed:</p>
<ul>
<li>Speeds decreased slightly: 16.1 mbit/s upload, 0.811 mbit/s download.
Mostly because I set <strong>conservative</strong> keyword to account for worst encapsulation overhead.
You can experiment with more fine-grained values, but I don’t mind the result.</li>
<li>Download congestion can still impact latency increase. For some reason
it’s more pronounced now: 140ms worst.</li>
<li>Upload congestion has almost no effect on latency! average is 34ms, worst is 70ms!</li>
</ul>
<p>Now let’s also try artificially limiting ingress:</p>
<pre class><code>#### egress as before
# tc qdisc del dev wl0 root
# tc qdisc add dev wl0 root cake bandwidth 1mbit conservative

#### ingress, a bit kludgy
# ip link add name ifb4wl0 type ifb
# tc qdisc del dev wl0 ingress
# tc qdisc add dev wl0 handle ffff: ingress
# tc qdisc del dev ifb4wl0 root
# tc qdisc add dev ifb4wl0 root cake bandwidth 16mbit conservative
# ip link set ifb4wl0 up
# tc filter add dev wl0 parent ffff: protocol all prio 10 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb4wl0</code></pre>
<p>and retest again: <a href="https://www.dslreports.com/speedtest/62838933">https://www.dslreports.com/speedtest/62838933</a></p>
<ul>
<li>Speeds decreased even more: 11.27 mbit/s upload, 0.766 mbit/s download.
I think the drastic drops upset TCP and it can’t recover faster.</li>
<li>Download congestion did not become any better. That might
be a sign of bufferbloat on ISP side.</li>
<li>Upload congestion is still good.</li>
</ul>
<p>If you rerun the test you will notice that numbers will change from run to run
in order of 10-20% (or more). This will not allow you to fine-tune the setup
but is good enough to observe the effect.</p>
<h1 id="more-fine-grained-testing">More fine-grained testing</h1>
<p>To get better numbers bufferbloat.net project suggests using <a href="https://flent.org/intro.html#quick-start">flent</a>
command line tool.</p>
<p>For that you will need a peer host to talk to. I’m picking guppy.ia64.dev.gentoo.org
140ms (half a globe) away from me.</p>
<p>Here is the run on default <strong>qdisc</strong>:</p>
<pre class><code>#### remotely
guppy / # netserver -D

#### locally
localhost # tc qdisc show dev wl0
qdisc mq 0: root
qdisc fq_codel 0: parent :4 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
qdisc fq_codel 0: parent :3 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
qdisc fq_codel 0: parent :2 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn
qdisc fq_codel 0: parent :1 limit 10240p flows 1024 quantum 1514 target 5.0ms interval 100.0ms memory_limit 32Mb ecn

localhost # flent rrul -p all_scaled -l 60 -H guppy.ia64.dev.gentoo.org -t def-to-guppy -o def-filename.png
Started Flent 1.0.1 using Python 3.6.10.
Starting rrul test. Expected run time: 70 seconds.</code></pre>
<p><a href="../posts.data/217-bufferbloat/def-filename.png"><img src="../posts.data/217-bufferbloat/def-filename.png" alt="image" /></a></p>
<p>There are 3 graphs:</p>
<ul>
<li>download speed: jumps around 2.5-5 mbit/s.</li>
<li>uplaod speed: very unstable, hard to say anything :)</li>
<li>latency graph: almost always 750ms, sometimes touches 500ms</li>
</ul>
<p>Here is the run with <strong>cake</strong> both on ingress and egress:</p>
<pre class><code>#### remotely
guppy / # netserver -D

#### locally
localhost # tc qdisc show dev wl0
qdisc cake 800f: root refcnt 5 bandwidth 1Mbit diffserv3 triple-isolate nonat nowash no-ack-filter split-gso rtt 100.0ms atm overhead 48
qdisc ingress ffff: parent ffff:fff1 ----------------

localhost # flent rrul -p all_scaled -l 60 -H guppy.ia64.dev.gentoo.org -t cake-to-guppy -o cake-filename.png
Started Flent 1.0.1 using Python 3.6.10.
Starting rrul test. Expected run time: 70 seconds.</code></pre>
<p><a href="../posts.data/217-bufferbloat/cake-filename.png"><img src="../posts.data/217-bufferbloat/cake-filename.png" alt="image" /></a></p>
<p>3 graphs again:</p>
<ul>
<li>download speed: jumps around 2-3 mbit/s.</li>
<li>uplaod speed: looks like 0.1mbit/s?</li>
<li>latency graph: most of the time 170ms, sometimes spikes up to 300ms</li>
</ul>
<p>Even though data is still quite noisy we can see that latency is lower
in the second case.</p>
<p>Picking closer host and running test for longer time might yield more
precise data.</p>
<p>Now you can tweak many more parameters to see what changes for better
or worse: TCP congestion algorithms (I use <strong>bbr</strong>), many tweaks
on <strong>man tc-cake</strong>’s side and many more.</p>
<p>I suggest skimming through more resources at <a href="https://www.bufferbloat.net/projects/">https://www.bufferbloat.net/projects/</a>
if you are interested in the topic.</p>
<h1 id="final-test">Final test</h1>
<p>Let’s get back to our original test (with ingress/egress <strong>cake</strong> enabled this time):</p>
<pre class><code>$ ping 8.8.8.8
64 bytes from 8.8.8.8: icmp_seq=1 ttl=54 time=9.31 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=54 time=9.20 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=54 time=8.37 ms
64 bytes from 8.8.8.8: icmp_seq=4 ttl=54 time=10.6 ms
...
# in a second terminal start uploader
$ scp /boot/vmlinuz slyfox@guppy.ia64.dev.gentoo.org:/tmp/my-kernel
vmlinuz 99% 7968KB 104.6KB/s   00:00 ETA
...
# in the first terminal:
64 bytes from 8.8.8.8: icmp_seq=178 ttl=54 time=16.5 ms
64 bytes from 8.8.8.8: icmp_seq=179 ttl=54 time=14.8 ms
64 bytes from 8.8.8.8: icmp_seq=180 ttl=54 time=15.4 ms
64 bytes from 8.8.8.8: icmp_seq=181 ttl=54 time=10.0 ms
64 bytes from 8.8.8.8: icmp_seq=182 ttl=54 time=20.3 ms
64 bytes from 8.8.8.8: icmp_seq=183 ttl=54 time=9.16 ms
64 bytes from 8.8.8.8: icmp_seq=184 ttl=54 time=9.71 ms
64 bytes from 8.8.8.8: icmp_seq=185 ttl=54 time=17.5 ms
64 bytes from 8.8.8.8: icmp_seq=186 ttl=54 time=13.0 ms
64 bytes from 8.8.8.8: icmp_seq=224 ttl=54 time=19.9 ms
64 bytes from 8.8.8.8: icmp_seq=225 ttl=54 time=42.3 ms
64 bytes from 8.8.8.8: icmp_seq=226 ttl=54 time=13.3 ms
64 bytes from 8.8.8.8: icmp_seq=227 ttl=54 time=8.39 ms
64 bytes from 8.8.8.8: icmp_seq=230 ttl=54 time=11.4 ms
64 bytes from 8.8.8.8: icmp_seq=231 ttl=54 time=8.84 ms &lt;--- recovered
64 bytes from 8.8.8.8: icmp_seq=232 ttl=54 time=8.63 ms
64 bytes from 8.8.8.8: icmp_seq=233 ttl=54 time=8.49 ms</code></pre>
<p>Latency increased a bit from 10ms to ~20ms. But it does not get to 300ms. Yay!</p>
<p>Have fun!</p>

<div class="info">
    Posted on April 26, 2020 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>

        </div>
        <div id="footer">
            powered by <a href="http://jaspervdj.be/hakyll">hakyll</a>
        </div>
    </body>
</html>
]]></summary>
</entry>

</feed>
