<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>trofi - All posts</title>
    <link href="http://trofi.github.io/feed/atom.xml" rel="self" />
    <link href="http://trofi.github.io" />
    <id>http://trofi.github.io/feed/atom.xml</id>
    <author>
        <name>Sergei Trofimovich</name>
        
        <email>slyich@gmail.com</email>
        
    </author>
    <updated>2023-09-21T00:00:00Z</updated>
    <entry>
    <title>Maximum argument count on linux and in gcc</title>
    <link href="http://trofi.github.io/posts/299-maximum-argument-count-on-linux-and-in-gcc.html" />
    <id>http://trofi.github.io/posts/299-maximum-argument-count-on-linux-and-in-gcc.html</id>
    <published>2023-09-21T00:00:00Z</published>
    <updated>2023-09-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>By default on <code>linux</code> argument list (and environment) is limited by
less than <code>2MB</code> all bytes calculated across all arguments and environment
(including <code>argv/envp</code> array overheads and null terminators).</p>
<p><code>ulimit -s</code> can increase this limit to <code>6MB</code>. Individual command line
and environment <code>K=V</code> pairs are limited to <code>128KB</code>.</p>
<p>And due to internal implementation deficiencies of <code>gcc</code> argument list
for <code>gcc</code> happens to be limited by the same <code>128KB</code> limit.</p>
<h2 id="story-mode">Story mode</h2>
<p>My <a href="http://trofi.github.io/posts/298-unexpected-runtime-dependencies-in-nixpkgs.html">previous attempt</a>
to “just add” a bunch of <code>-fmacro-prefix-map=</code> flags to each <code>nixpkgs</code>
package worked for most packages. But it started failing for <code>qemu</code> as:</p>
<pre><code>Command line: `gcc -m64 -mcx16 /build/qemu-8.1.0/build/meson-private/tmpbyikv8nc/testfile.c \
  -o /build/qemu-8.1.0/build/meson-private/tmpbyikv8nc/output.exe -D_FILE_OFFSET_BITS=64 \
  -O0 -Wl,--start-group -laio -Wl,--end-group -Wl,--allow-shlib-undefined` -&gt; 1
stderr:
gcc: fatal error: cannot execute 'cc1': execv: Argument list too long
compilation terminated.</code></pre>
<p>The failure happens because we have exhausted some command line argument
limit. In case of <code>qemu</code> we pass around a few thousands of
<code>-fmacro-prefix-map=</code> options (<code>qemu</code> is a big package and has many
build inputs).</p>
<p>Ideally I would like to be able to pass a lot more options without
hitting the arguments limit (10x? 100x?). Luckily <code>gcc</code> and other tools
like <code>ld</code> do support a way to pass many options indirectly via response
files:</p>
<pre><code>$ gcc -g -O2 -c a.c</code></pre>
<p>The above should be equivalent to the below:</p>
<pre><code>$ echo &quot;-g&quot;   &gt; a.rsp
$ echo &quot;-O2&quot; &gt;&gt; a.rsp
$ gcc @a.rsp -c a.c</code></pre>
<p>But I’ll leave response files to another post as it ended up being
it’s own rabbit hole.</p>
<p>Instead let’s explore how many arguments you can pass to a single
command in <code>linux</code>.</p>
<h2 id="exploring-the-argument-count-limits">Exploring the argument count limits</h2>
<p>So what are the actual limits we are hitting against here? How many
arguments can we pass to <code>gcc</code> without any problems?</p>
<p>Let’s explore it! I’ll start by adding more and more <code>-g</code> options to
<code>gcc</code> call until it starts failing for a command line limit:</p>
<pre><code>$ nix shell nixpkgs#gcc
$$ set -x; touch a.c; args=(-g); while gcc ${args[@]} -c a.c; do args+=(&quot;${args[@]}&quot;); done; echo ${#args[@]}

+ set -x
+ touch a.c
+ args=(-g)
+ gcc -g -c a.c
+ args+=(&quot;${args[@]}&quot;)
+ gcc -g -g -c a.c
+ args+=(&quot;${args[@]}&quot;)
+ gcc -g -g -g -g -c a.c
+ args+=(&quot;${args[@]}&quot;)
+ gcc -g -g -g -g -g -g -g -g -c a.c
...
gcc: fatal error: cannot execute 'cc1': execv: Argument list too long
compilation terminated.
+ echo 32768
32768</code></pre>
<p>Our limit is somewhere below 32K (this is a lot lower than I expected).</p>
<p>In the above snippet we double the length of argument list to speed the
search up a bit, thus it’s not an exact value and some closest
power-of-2 ceiling.</p>
<p>Let’s extend this snippet a bit and build more flexible argument count
probe that returns us precise value. I called it <code>probe-argsize.bash</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># $1 - payload</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co"># $2... - prober command to test against argument list</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co"># create an aray of enough elements to start failing the allocation:</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="va">large</span><span class="op">=</span><span class="va">(</span><span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span><span class="va">)</span><span class="kw">;</span> <span class="bu">shift</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${large</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span> <span class="op">&gt;</span>/dev/null <span class="dv">2</span><span class="op">&gt;</span>/dev/null<span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># double the array lenght until execution start failing</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="va">large</span><span class="op">+=</span><span class="va">(</span><span class="st">&quot;</span><span class="va">${large</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Use binary search to find largest successfully running prober</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="va">l</span><span class="op">=</span>0</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="va">u</span><span class="op">=</span><span class="va">${</span><span class="op">#</span><span class="va">large</span><span class="op">[@]</span><span class="va">}</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="kw">((</span> <span class="va">l</span> <span class="op">&lt;</span> <span class="va">u</span> <span class="kw">));</span> <span class="cf">do</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">m</span><span class="op">=</span><span class="va">$((</span> (<span class="va">l</span> <span class="op">+</span> <span class="va">u</span> <span class="op">+</span> <span class="dv">1</span>) <span class="op">/</span> <span class="dv">2</span> <span class="va">))</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${large</span><span class="op">[@]:</span><span class="dv">0</span><span class="op">:</span>m<span class="va">}</span><span class="st">&quot;</span> <span class="op">&gt;</span>/dev/null <span class="dv">2</span><span class="op">&gt;</span>/dev/null<span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        <span class="co"># can survive</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        <span class="kw">((</span> <span class="va">l</span> <span class="op">=</span> <span class="va">m</span> <span class="kw">))</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>        <span class="kw">((</span> <span class="va">u</span> <span class="op">=</span> <span class="va">m</span> <span class="op">-</span> <span class="dv">1</span> <span class="kw">))</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">fi</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> <span class="va">$l</span></span></code></pre></div>
<p>The first half of the script does the same 2x argument list growth on
every step as before. And the second half does binary search for an
exact value.</p>
<p>Let’s try it out:</p>
<pre><code>$$ touch a.c; ./probe-argsize.bash -g gcc -c a.c

26118</code></pre>
<p>~26K parameters. Seems to work!</p>
<p>What if we make our argument a bit larger? Say, pass <code>-ggdb3</code> instead of
<code>-g</code>?</p>
<pre><code>$ touch a.c; ./probe-argsize.bash -ggdb3 gcc -c a.c
14510</code></pre>
<p>Just ~14K. That degrades very quickly. The available length is decreased
by half! (or something like that)</p>
<p>How about longer option? I’ll try ~100 bytes long one:</p>
<pre><code>$ touch a.c; ./probe-argsize.bash -I0123456789-90123456789-0123456789-0123456789-0123456789-0123456789-01234567889-0123456789-0123456789 \
  gcc -c a.c
1209</code></pre>
<p>1209 is extremely low. That is on par with what <code>qemu</code> exercises in
<code>nixpkgs</code>. Looks like our limit here is about <code>~120K</code> bytes if we sum up
all our argument lengths to <code>gcc</code>.</p>
<p>What if the problem is in some internal <code>gcc</code> limit and not the OS
itself? Let’s <code>strace</code> <code>gcc</code> call just to make sure:</p>
<pre><code>$$ strace -f gcc ${args[@]} -c a.c
...
[pid 1360260] execve(&quot;cc1&quot;, [&quot;cc1&quot;, &quot;-quiet&quot;, &quot;-idirafter&quot;, ..., &quot;-g&quot;, ...], \
    0x1474b80 /* 103 vars */) = -1 E2BIG (Argument list too long)</code></pre>
<p>Here we see that <code>E2BIG</code> comes right from an <code>execve()</code> system call.
Thus it’s kernel’s limitation of some sort.</p>
<h2 id="getting-the-formula">Getting the formula</h2>
<p>Can we easily increase the limit? Let’s find out how <code>linux</code> implements
limits in <a href="https://github.com/torvalds/linux/blob/2cf0f715623872823a72e451243bbf555d10d032/fs/exec.c#L1888C1-L1894C13">fs/exec.c</a>.
Maybe there is a <code>linux</code>-specific hack somewhere we could pull out.</p>
<p>There are a few places where <code>-E2BIG</code> is returned. This code looks most
relevant:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> do_execveat_common<span class="op">(</span><span class="dt">int</span> fd<span class="op">,</span> <span class="kw">struct</span> filename <span class="op">*</span>filename<span class="op">,</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>			      <span class="kw">struct</span> user_arg_ptr argv<span class="op">,</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>			      <span class="kw">struct</span> user_arg_ptr envp<span class="op">,</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>			      <span class="dt">int</span> flags<span class="op">)</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> retval<span class="op">;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> count<span class="op">(</span>argv<span class="op">,</span> MAX_ARG_STRINGS<span class="op">);</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>	bprm<span class="op">-&gt;</span>argc <span class="op">=</span> retval<span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> count<span class="op">(</span>envp<span class="op">,</span> MAX_ARG_STRINGS<span class="op">);</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>	bprm<span class="op">-&gt;</span>envc <span class="op">=</span> retval<span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> bprm_stack_limits<span class="op">(</span>bprm<span class="op">);</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> copy_strings<span class="op">(</span>bprm<span class="op">-&gt;</span>envc<span class="op">,</span> envp<span class="op">,</span> bprm<span class="op">);</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> copy_strings<span class="op">(</span>bprm<span class="op">-&gt;</span>argc<span class="op">,</span> argv<span class="op">,</span> bprm<span class="op">);</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I wondered if <code>MAX_ARG_STRINGS</code> could be one of our limits once
we solve the smaller limit we are bumping into now, but nope it’s defined
in <a href="https://github.com/torvalds/linux/blob/2cf0f715623872823a72e451243bbf555d10d032/include/uapi/linux/binfmts.h#L9">include/uapi/linux/binfmts.h</a>
as:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co"> * These are the maximum length and maximum number of strings passed to the</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co"> * execve() system call.  MAX_ARG_STRLEN is essentially random but serves to</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co"> * prevent the kernel from being unduly impacted by misaddressed pointers.</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co"> * MAX_ARG_STRINGS is chosen to fit in a signed 32-bit integer.</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MAX_ARG_STRLEN </span><span class="op">(</span><span class="pp">PAGE_SIZE </span><span class="op">*</span><span class="pp"> </span><span class="dv">32</span><span class="op">)</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MAX_ARG_STRINGS </span><span class="bn">0x7FFFFFFF</span></span></code></pre></div>
<p>Which is a ridiculously large number:</p>
<pre><code>$ printf &quot;%d\n&quot; 0x7FFFFFFF
2147483647</code></pre>
<p>Maybe it’s a stack limit then? <code>bprm_stack_limits()</code> looks promising:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> bprm_stack_limits<span class="op">(</span><span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">)</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>	<span class="dt">unsigned</span> <span class="dt">long</span> limit<span class="op">,</span> ptr_size<span class="op">;</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="co">	 * Limit to 1/4 of the max stack size or 3/4 of _STK_LIM</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co">	 * (whichever is smaller) for the argv+env strings.</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="co">	 * This ensures that:</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="co">	 *  - the remaining binfmt code will not run out of stack space,</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co">	 *  - the program will have a reasonable amount of stack left</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="co">	 *    to work from.</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">=</span> _STK_LIM <span class="op">/</span> <span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">=</span> min<span class="op">(</span>limit<span class="op">,</span> bprm<span class="op">-&gt;</span>rlim_stack<span class="op">.</span>rlim_cur <span class="op">/</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="co">	 * We've historically supported up to 32 pages (ARG_MAX)</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="co">	 * of argument strings even with small stacks</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">=</span> max_t<span class="op">(</span><span class="dt">unsigned</span> <span class="dt">long</span><span class="op">,</span> limit<span class="op">,</span> ARG_MAX<span class="op">);</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co">	 * We must account for the size of all the argv and envp pointers to</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="co">	 * the argv and envp strings, since they will also take up space in</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="co">	 * the stack. They aren't stored until much later when we can't</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="co">	 * signal to the parent that the child has run out of stack space.</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="co">	 * Instead, calculate it here so it's possible to fail gracefully.</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="co">	 *</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a><span class="co">	 * In the case of argc = 0, make sure there is space for adding a</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a><span class="co">	 * empty string (which will bump argc to 1), to ensure confused</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a><span class="co">	 * userspace programs don't start processing from argv[1], thinking</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="co">	 * argc can never be 0, to keep them from walking envp by accident.</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a><span class="co">	 * See do_execveat_common().</span></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>	ptr_size <span class="op">=</span> <span class="op">(</span>max<span class="op">(</span>bprm<span class="op">-&gt;</span>argc<span class="op">,</span> <span class="dv">1</span><span class="op">)</span> <span class="op">+</span> bprm<span class="op">-&gt;</span>envc<span class="op">)</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">void</span> <span class="op">*);</span></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>limit <span class="op">&lt;=</span> ptr_size<span class="op">)</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span> <span class="op">-</span>E2BIG<span class="op">;</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">-=</span> ptr_size<span class="op">;</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>	bprm<span class="op">-&gt;</span>argmin <span class="op">=</span> bprm<span class="op">-&gt;</span>p <span class="op">-</span> limit<span class="op">;</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This well-commented function tells us that formula here is. I’ll
compress it as:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> _STK_LIM <span class="op">/</span> <span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> min<span class="op">(</span>limit<span class="op">,</span> bprm<span class="op">-&gt;</span>rlim_stack<span class="op">.</span>rlim_cur <span class="op">/</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> max<span class="op">(</span>limit<span class="op">,</span> ARG_MAX<span class="op">);</span></span></code></pre></div>
<p>Let’s inline as many constants as we can here:</p>
<pre><code>// from include/uapi/linux/resource.h
#define _STK_LIM  (8*1024*1024)
// from include/uapi/linux/limits.h
#define ARG_MAX 131072 /* # bytes of args + environ for exec() */</code></pre>
<p>We’ll get this 3-liner:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> <span class="dv">6</span><span class="er">MB</span><span class="op">;</span> <span class="co">// 8MB / 4 * 3</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> min<span class="op">(</span>limit<span class="op">,</span> CURRENT_STACK_LIMIT <span class="op">/</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> max<span class="op">(</span>limit<span class="op">,</span> <span class="dv">128</span><span class="er">K</span><span class="op">);</span></span></code></pre></div>
<p>The above in plain words: argument limits (in bytes) are at least 128K
and at most are 6MB. And by default it’s <code>CURRENT_STACK_LIMIT / 4</code>.</p>
<p><code>CURRENT_STACK_LIMIT</code> default is set to <code>_STK_LIM</code> as well:</p>
<pre><code>$ ulimit -s
8192</code></pre>
<p>Thus the argument length limit by default is <code>2MB</code>. And wee can raise up
to 6MB (3x) maximum if we set <code>ulimit -s</code> up to <code>24MB</code>. Setting stack
to anything higher would not affect argument limit.</p>
<p>That is the theory. Does it match the practice?</p>
<p>What did I miss? Why do we get only ~128K or argument limit for <code>gcc</code>
and not ~2MB?</p>
<p>There is a small catch: I kept exploring limits of <code>gcc</code> executable. In
<code>nixpkgs</code> it’s a big shell wrapper. Part of wrapper’s work is to set
various environment variables. Not just pass through the arguments.
And each environment variable is treated roughly like a command line
parameter.</p>
<p>Let’s use known simple <code>printf</code> binary instead (it should not set any
environment variables internally) and see what are it’s limits:</p>
<pre><code>$ ./probe-argsize.bash -g $(which printf) &quot;%s&quot; --
189929</code></pre>
<p>189K arguments! This looks more like <code>400KB</code> of argument bytes. But if you
know anything about <code>char * argv[]</code> parameter to <code>main()</code> you might know
that it’s a pointer array. And pointers probably take most overhead
here.</p>
<p>Let’s use longer arguments to mitigate pointer overhead:</p>
<pre><code>$ filler=0123456789-90123456789-0123456789-0123456789-0123456789-0123456789-01234567889-0123456789-0123456789
$ ./probe-argsize.bash $filler $(which printf) &quot;%s&quot; --
19165</code></pre>
<p>19K arguments 100 bytes each: that looks more like <code>~2MB</code> limit. Phew!
We finally got our theoretical limit.</p>
<h2 id="ultimate-argument-count-linux-allows-today">Ultimate argument count <code>linux</code> allows today</h2>
<p>Given that argument count somehow depends on stack size via
<code>CURRENT_STACK_LIMIT</code> can we just change default stack size and set
<code>10x</code> limit for argument count?</p>
<p>What is The Largest argument count we can pass on <code>linux</code>?</p>
<p>It’s not very hard to figure it out from the <code>bprm_stack_limits()</code> code
above.</p>
<p>To recap our environment structure in memory (on stack) is an array of
pointers to the null-terminated string pool:</p>
<pre><code> | (char *)argv[0] -&gt; &quot;arg0\0&quot;
 | (char *)argv[1] -&gt; &quot;arg1\0&quot;
 | (char *)argv[2] -&gt; &quot;arg2\0&quot;
 | (char *)argv[3] -&gt; &quot;arg3\0&quot;
 | (char *)argv[4] -&gt; &quot;arg4\0&quot;
 | (char *)argv[5] -&gt; &quot;arg5\0&quot;
 | ...
 | (char *)argv[N] -&gt; &quot;argN\0&quot;
 | (char *)NULL</code></pre>
<p>This means that our most memory-efficient input would be an array of
zero-byte arguments. Note, that in this case main overhead is on
pointer array and not on the arguments themselves.</p>
<p>That would be something like:</p>
<pre><code> | (char *)argv[0] -&gt; &quot;\0&quot;
 | (char *)argv[1] -&gt; &quot;\0&quot;
 | (char *)argv[2] -&gt; &quot;\0&quot;
 | (char *)argv[3] -&gt; &quot;\0&quot;
 | (char *)argv[4] -&gt; &quot;\0&quot;
 | (char *)argv[5] -&gt; &quot;\0&quot;
 | ...
 | (char *)argv[N] -&gt; &quot;\0&quot;
 | (char *)NULL</code></pre>
<p>On 64-bit systems this gives us 9 bytes per argument. That gives us
<code>2MB / 9 = 233016</code> arguments. The experiment confirms that we are very
close:</p>
<pre><code>$ ./probe-argsize.bash &quot;&quot; env -i $(which printf) &quot;%s&quot; --
232134</code></pre>
<p>An exercise for the reader: why is it 822 arguments shorter that our
maximum theoretical value? A word of warning: it’s not a very simple
question.</p>
<p>Given that <code>2MB</code> is derived from <code>1/4 * CURRENT_STACK_LIMIT</code> we can
increase that as well using <code>ulimit -s</code>. Let’s add 100x:</p>
<pre><code>$ ulimit -s
8192
$ ulimit -s 819200

$ ./probe-argsize.bash &quot;&quot; env -i $(which printf) &quot;%s&quot; --
698168</code></pre>
<p>Note that it’s only a 3x improvement (and not a 100x improvement).</p>
<p>This is exactly our <code>limit = 6MB;</code> absolute limit above. Once again: i
you need to get maximum out of your argument limits on today’s <code>linux</code>
it’s enough to set <code>ulimit -s</code> from <code>8MB</code> to <code>24MB</code>.</p>
<p>Which gives us final formula of <code>6MB / 9 = 699050</code> argument count on
64-bit systems.</p>
<p>Fun fact: on 32-bit host kernel the limit should probably be slightly higher
due to shorter pointer size:</p>
<ul>
<li><code>2MB / 5 = 419430</code> arguments (compared to <code>233016</code> on <code>64-bit</code>)</li>
<li><code>6MB / 5 = 1258291</code> arguments (compared to <code>699050</code> on <code>64-bit</code>)</li>
</ul>
<p>That is 1.8x larger than 64-bit systems!</p>
<p>Once again: it’s a pretty silly benchmark as it’s not very useful to
pass a million empty strings to the program. But it’s a good model to
understand the absolute limits.</p>
<p>We can do more realistic estimates if we know average argument length
in our use case. Say, if the bulk of our parameters are paths to the
<code>/nix/store</code> we can safely say those are at least 50 bytes long.</p>
<p>For 100-bytes long use case we would get:</p>
<ul>
<li><code>2MB / 109 = 19239</code> (64-bit), <code>2MB / 105 = 19972</code> (32-bit)</li>
<li><code>6MB / 109 = 57719</code> (64-bit), <code>6MB / 105 = 59918</code> (32-bit)</li>
</ul>
<p>Thus for simple case we should be able to pull out almost <code>~20K</code> by
default and almost <code>~60K</code> with larger stack size.</p>
<h2 id="nixpkgs-gcc-wrapper-mystery"><code>nixpkgs</code> <code>gcc</code> wrapper mystery</h2>
<p>So why does <code>gcc</code> have so much overhead of <code>-g</code> options? We get about
<code>190K</code> options for for <code>printf -g</code> and only 20K for <code>gcc -g</code> above.
That is almost 10x reduction.</p>
<p>Could <code>nixpkgs</code>’s <code>gcc</code> wrapper artificially inflate it’s arguments
somehow? <code>strace</code> should help us verify that:</p>
<pre><code>$ nix shell nixpkgs#gcc
$$ touch a.c &amp;&amp; strace -etrace=execve -s 10000 -f -v -olog gcc -Ihow-many-duplcates -c a.c

$$ grep cc1 log
1290300 execve(&quot;.../cc1&quot;, [..., , &quot;-I&quot;, &quot;how-many-duplcates&quot;, ...], [..., &quot;COLLECT_GCC_OPTIONS='-I' 'how-many-duplcates' ...&quot;, ...]) = 0</code></pre>
<p>Not too bad: we see 2x explosion here:</p>
<ul>
<li>one option is in argument list</li>
<li>another is in <code>COLLECT_GCC_OPTIONS=</code> environment</li>
</ul>
<p>The <code>2x</code> explosion itself does not explain 10x reduction.</p>
<p>There is also an extra catch: the way I tried to set the variable in
<code>qemu</code> is via <code>NIX_CFLAGS_COMPILE=</code> environment variable. Those get
translated by package setup hooks not visible in <code>nix shell</code>. Let’s
check their full effect.</p>
<p>I’ll write a complete small derivation to demonstrate the explosion
closer to <code>qemu</code> failure mode.</p>
<p>Here is a <code>default.nix</code> derivation that should demonstrate the point:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{</span> <span class="op">}</span> <span class="op">}</span>:</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>pkgs.stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;probe-wrapper&quot;</span><span class="op">;</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUnpack</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> pkgs.strace <span class="op">];</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE</span> <span class="op">=</span> <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">postInstall</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="st">    touch a.c</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a><span class="st">    strace -etrace=execve -s 10000 -f -v -o$out -- $CC -c a.c -o a.o</span></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we can quickly build it and explore it’s contents:</p>
<pre><code>$ nix-build
$ grep cc1 result

31 execve(&quot;.../cc1&quot;, [..., &quot;-I&quot;, &quot;how-many-duplcates&quot;, ...], &quot;NIX_CFLAGS_COMPILE_x86_64_unknown_linux_gnu=... -Ihow-many-duplcates ...&quot;, &quot;NIX_CFLAGS_COMPILE=-Ihow-many-duplcates ...&quot;, &quot;COLLECT_GCC_OPTIONS=... '-I' 'how-many-duplcates' ...&quot;]) = 0</code></pre>
<p>Things are a bit worse here: we see 4x explosion:</p>
<ul>
<li>[as before] one option is in argument list</li>
<li>[as before] another is in <code>COLLECT_GCC_OPTIONS=</code> environment</li>
<li>[new] <code>NIX_CFLAGS_COMPILE</code> variable, the one we added and are using for injection</li>
<li>[new] <code>NIX_CFLAGS_COMPILE_x86_64_unknown_linux_gnu</code> variable, the one
<code>pkgs/build-support/cc-wrapper/setup-hook.sh</code> setup hook set for us</li>
</ul>
<p>And if we throw cross-compilation into the picture (ideally I wanted to
avoid <code>__FILE__</code> leaks in all cases) and use all three
<code>NIX_CFLAGS_COMPILE_FOR_BUILD</code>, <code>NIX_CFLAGS_COMPILE</code> and
<code>NIX_CFLAGS_COMPILE_FOR_TARGET</code>:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{</span> <span class="va">crossSystem</span> <span class="op">=</span> <span class="st">&quot;riscv64-linux&quot;</span><span class="op">;</span> <span class="op">}</span> <span class="op">}</span>:</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>pkgs.stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;probe-wrapper&quot;</span><span class="op">;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUnpack</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> pkgs.buildPackages.strace <span class="op">];</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE_FOR_BUILD</span> <span class="op">=</span>  <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE</span> <span class="op">=</span>            <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE_FOR_TARGET</span> <span class="op">=</span> <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">postInstall</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a><span class="st">    touch a.c</span></span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a><span class="st">    strace -etrace=execve -s 10000 -f -v -o$out -- $CC -c a.c -o a.o</span></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ nix-build
$ grep cc1 result

35 execve(&quot;.../cc1&quot;, [..., &quot;-I&quot;, &quot;how-many-duplcates&quot;, ...], &quot;NIX_CFLAGS_COMPILE_riscv64_unknown_linux_gnu=... -Ihow-many-duplcates ...&quot;, &quot;NIX_CFLAGS_COMPILE_FOR_BUILD=-Ihow-many-duplcates ...&quot;, &quot;NIX_CFLAGS_COMPILE=-Ihow-many-duplcates ...&quot;, NIX_CFLAGS_COMPILE_FOR_TARGET=-Ihow-many-duplcates ...&quot;, &quot;COLLECT_GCC_OPTIONS=... '-I' 'how-many-duplcates' ...&quot;]) = 0</code></pre>
<p>Here we see 6x explosion:</p>
<ul>
<li>[as before] one option is in argument list</li>
<li>[as before] another is in <code>COLLECT_GCC_OPTIONS=</code> environment</li>
<li>[as before] <code>NIX_CFLAGS_COMPILE</code> variable, the one we added and are using for injection</li>
<li>[as before] <code>NIX_CFLAGS_COMPILE_riscv64_unknown_linux_gnu</code> variable, the one
<code>pkgs/build-support/cc-wrapper/setup-hook.sh</code> setup hook set for us</li>
<li>[new] <code>NIX_CFLAGS_COMPILE_FOR_BUILD</code> variable, we set ourselves</li>
<li>[new] <code>NIX_CFLAGS_COMPILE_FOR_TARGET</code> variable, we set ourselves</li>
</ul>
<p>None of these variables looks redundant: they serve the purpose to
propagate flags across shell wrappers. Thus we’ll have to keep in mind
this 6x explosion.</p>
<p>And yet. 6x explosion does not explain why mere <code>-g</code> option can be
present only 20K times instead of 200K times.</p>
<h2 id="another-nasty-limit">Another nasty limit</h2>
<p>I skimmed through maximum individual variable length limit above as if
it did not exist. But it’s there! Look:</p>
<pre><code>$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; 100000) $(printf &quot;%0*d&quot; 100000) $(printf &quot;%0*d&quot; 100000) $(printf &quot;%0*d&quot; 100000) &gt;/dev/null; echo $?
0
$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; 200000) &gt;/dev/null; echo $?
-bash: /run/current-system/sw/bin/printf: Argument list too long
126</code></pre>
<p>More precise limit is <code>128K</code>:</p>
<pre><code>$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; $((2 ** 17)) ) &gt;/dev/null; echo $?
-bash: /run/current-system/sw/bin/printf: Argument list too long
126
$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; $((2 ** 17 - 1)) ) &gt;/dev/null; echo $?
0
$ echo $((2 ** 17))
131072</code></pre>
<p>It comes from <code>copy_string()</code> from the same
<a href="https://github.com/torvalds/linux/blob/2cf0f715623872823a72e451243bbf555d10d032/fs/exec.c#L523">fs/exec.c</a>:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> copy_strings<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="kw">struct</span> user_arg_ptr argv<span class="op">,</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>			<span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">)</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> page <span class="op">*</span>kmapped_page <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>	<span class="dt">char</span> <span class="op">*</span>kaddr <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">unsigned</span> <span class="dt">long</span> kpos <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>	<span class="cf">while</span> <span class="op">(</span>argc<span class="op">--</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a>		<span class="dt">const</span> <span class="dt">char</span> __user <span class="op">*</span>str<span class="op">;</span></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>		<span class="dt">int</span> len<span class="op">;</span></span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>		<span class="dt">unsigned</span> <span class="dt">long</span> pos<span class="op">;</span></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>		ret <span class="op">=</span> <span class="op">-</span>EFAULT<span class="op">;</span></span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>		str <span class="op">=</span> get_user_arg_ptr<span class="op">(</span>argv<span class="op">,</span> argc<span class="op">);</span></span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>IS_ERR<span class="op">(</span>str<span class="op">))</span></span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>		len <span class="op">=</span> strnlen_user<span class="op">(</span>str<span class="op">,</span> MAX_ARG_STRLEN<span class="op">);</span></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(!</span>len<span class="op">)</span></span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(!</span>len<span class="op">)</span></span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a>		ret <span class="op">=</span> <span class="op">-</span>E2BIG<span class="op">;</span></span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(!</span>valid_arg_len<span class="op">(</span>bprm<span class="op">,</span> len<span class="op">))</span></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a>out<span class="op">:</span></span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">bool</span> valid_arg_len<span class="op">(</span><span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">,</span> <span class="dt">long</span> len<span class="op">)</span></span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb31-37"><a href="#cb31-37" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> len <span class="op">&lt;=</span> MAX_ARG_STRLEN<span class="op">;</span></span>
<span id="cb31-38"><a href="#cb31-38" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>MAX_ARG_STRLEN</code> (<code>128K</code>) limits individual entries in arguments
and environment variable entries:</p>
<pre><code>$ E=$(printf &quot;%0*d&quot; $((2 ** 17 - 3)) ) $(which printf) &quot;1&quot; &gt;/dev/null; echo $?
0
$ E=$(printf &quot;%0*d&quot; $((2 ** 17 - 2)) ) $(which printf) &quot;1&quot; &gt;/dev/null; echo $?
-bash: /run/current-system/sw/bin/printf: Argument list too long
126</code></pre>
<p>Here we run <code>printf 1</code> with a large <code>E=000000...000</code> variable and expose
the same <code>128K</code> limit.</p>
<p>This is bad news. As we saw above <code>gcc</code> uses single <code>COLLECT_GCC_OPTIONS</code>
variable to pass all options around. And on top of that it quotes each
argument.</p>
<p>As a result <code>gcc -g -g ...</code> turns into
<code>COLLECT_GCC_OPTIONS="'-g' '-g' ..."</code>. This means that we are limited by
a <code>128K</code> limit when it comes to <code>gcc</code> flags.</p>
<p>To estimate our best limit <code>-g</code> gets translated to <code>"'-g' "</code>: 2 bytes
get turned into 5. That means we can put <code>128K / 5 = 26214</code> entries.</p>
<p>That is very close to our <code>26118</code> limit we got above. Again, why the
values differ by <code>96</code> entries is another exercise to the reader.</p>
<h2 id="the-variable-budget">The variable budget</h2>
<p>Let’s see what worst-case scenario for the longest option we have for
<code>-fmacro-prefix-map=</code> on my system for directories that have <code>include</code>
subdirectory:</p>
<pre><code>$ for d in *; do [[ -d &quot;$d/include&quot; ]] &amp;&amp; echo &quot;${#d} $d&quot;; done | sort -k 1 -n | tail -n 10
87 s2zpr18vjr274yaalgz5c4g7dx51cvb9-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 s5gn9gwwwpm8ln84apjb8hbrhihq72d4-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 scihnclavazxzk0vgblhp4371s3gr40c-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 sdf4v7s0avfkgnnnx1hq000ydl7bz9sd-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 xfl1c6qmr8b39bxgpmjp004afknm54av-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 y00bh71xvsrkazdjy5w4ii8pdkdwb5hr-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 z8k642hwqflwmp16ql3jj7z1pslyznzq-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
88 6lw175bhq8d669jl1ddvwy49hcmlysi0-gmp-with-cxx-static-x86_64-unknown-linux-musl-6.3.0-dev
89 ljrwhpdcv7xzmxbank3jdi2xyga553s5-gmp-with-cxx-static-aarch64-unknown-linux-musl-6.3.0-dev
94 r5gzvnjnq024gr830nvpkcyd7n4ip33v-libnetfilter_conntrack-static-x86_64-unknown-linux-musl-1.0.9</code></pre>
<p>About 90 bytes. With added <code>/nix/store</code> prefix that would be <code>100</code>
characters long paths. Nice round number.</p>
<p>This makes <code>-fmacro-prefix-map=/nix/store/...=/nix/store/...</code> options
around 220 bytes.</p>
<p>How many of those can we realistically set for our <code>2MB</code> budget?</p>
<ul>
<li>for 4x overhead: <code>2 * 1024 * 1024 / (220 + 9) / 4 = 2289</code> variables</li>
<li>for 6x overhead: <code>2 * 1024 * 1024 / (220 + 9) / 6 = 1526</code> variables</li>
</ul>
<p>But given <code>COLLECT_GCC_OPTIONS</code> limitation for <code>128K</code> our calculation
becomes even more pessimistic:</p>
<ul>
<li>for no overhead: <code>128 * 1024 / (220 + 9) / 4 = 143</code> variables!</li>
</ul>
<p>It might sound like a lot but it’s not that much of a budget: some
packaging systems (like <code>haskell</code>’s <code>hackage</code>) do like small
fine-grained packages and occasionally do install <code>C</code> header files.
<code>nix</code> itself favours smaller packages to speed up rebuilds and shrink
runtime closure. <code>pkg-config</code> is geared towards installing packages
into individual directories.</p>
<p>And what is worse: <code>NIX_CFLAGS_COMPILE</code> is not the only option
that exhibits this behaviour. Here is the longer list following
<code>mangleVarList</code> used in <code>nixpkgs</code>:</p>
<pre><code># from pkgs/build-support/cc-wrapper/add-flags.sh
NIX_CFLAGS_COMPILE
NIX_CFLAGS_COMPILE_BEFORE
NIX_CFLAGS_LINK
NIX_CXXSTDLIB_COMPILE
NIX_CXXSTDLIB_LINK
NIX_GNATFLAGS_COMPILE

# from ./pkgs/build-support/bintools-wrapper/add-flags.sh
NIX_IGNORE_LD_THROUGH_GCC
NIX_LDFLAGS
NIX_LDFLAGS_BEFORE
NIX_DYNAMIC_LINKER
NIX_LDFLAGS_AFTER
NIX_LDFLAGS_HARDEN
NIX_HARDENING_ENABLE

# from pkgs/build-support/cc-wrapper/add-gnat-extra-flags.sh
NIX_GNATMAKE_CARGS

# from pkgs/build-support/pkg-config-wrapper/add-flags.sh
PKG_CONFIG_PATH</code></pre>
<p>Thus worst case we get to set at most ~150 entries for all of these
variables.</p>
<h2 id="parting-words">Parting words</h2>
<p>Even on <code>linux</code> command line argument limits are hard. If you can try to
use files to pass inputs of unbounded sizes.</p>
<p><code>linux</code> has unreachable <code>0-x7fffFFFF</code> argument count limit when executing
the commands. It does have an overall limit <code>2MB</code> limit that one can
increase to <code>6MB</code>. And on top of that individual arguments are limited
by <code>128K</code> limit that you can’t raise.</p>
<p>The above effectively means that argument passing overheads define
argument count limit. For arguments of length <code>0</code> by default you can
pass <code>233016</code> empty strings on 64-bit kernel and <code>419430</code> on 32-bit one.</p>
<p>If you increase the default stack size with <code>ulimit -s</code> you can get up
to <code>1258291</code> empty string arguments on 32-bits and <code>699050</code> on 64-bits.</p>
<p>For practical argument lengths actual values are way smaller: in order
of thousands to tens of thousands.</p>
<p><code>gcc</code> is a special <code>COLLECT_GCC_OPTIONS</code> case and it has a limit of
<code>128KB</code> making argument limits onto hundreds.</p>
<p>Initially I planned to workaround <code>qemu</code> failure by using <code>gcc</code>’s
response files. I thought it would save the problem completely.
Unfortunately <code>COLLECT_GCC_OPTIONS</code> contains already expanded response
file contents and thus response files will only remove multiplication
factor but will not sidestep 128KB limit.</p>
<p>On the bright side <code>COLLECT_GCC_OPTIONS</code> is an internal <code>gcc</code>
implementation detail that should be fixable without much external
impact. Even if we move it to proper argument list it should already
unlock <code>2MB</code> limit. And if we could pass response files through we cloud
sidestep the limit entirely. Filed <a href="https://gcc.gnu.org/PR111527" class="uri">https://gcc.gnu.org/PR111527</a> to
<code>gcc</code> upstream.</p>
<p>On top of that as a medium-term workaround I proposed the change to
<code>linux</code> to allow variables as large as the whole limit:
<a href="https://lkml.org/lkml/2023/9/24/381" class="uri">https://lkml.org/lkml/2023/9/24/381</a>.</p>
<p>But meanwhile I’ll try to patch <code>gcc</code> (and maybe <code>clang</code>?) just for
<code>nixpkgs</code> to apply programmatic mangling similar to:</p>
<pre><code># Pseudocode. real regexps do not work for `gcc`:
-fmacro-prefix-map=s,$NIX_STORE/[a-z0-9]{32}-,$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-</code></pre>
<p>Have fun!</p>

<div class="info">
    Posted on September 21, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Unexpected runtime dependencies in nixpkgs</title>
    <link href="http://trofi.github.io/posts/298-unexpected-runtime-dependencies-in-nixpkgs.html" />
    <id>http://trofi.github.io/posts/298-unexpected-runtime-dependencies-in-nixpkgs.html</id>
    <published>2023-09-14T00:00:00Z</published>
    <updated>2023-09-14T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="intro">Intro</h2>
<p><code>nix</code> uses a bit unusual way to detect runtime dependencies: it scans
the build result for it’s hash inputs used during build and does not
require manual specification of the dependencies.</p>
<p>For example if we build a trivial package that just prints a string into
the file it automatically pulls in that strings into runtime closure:</p>
<pre><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; runCommand &quot;foo&quot; {} \
  &quot;echo ${re2c}/bin/re2c &gt; $out&quot;'</code></pre>
<p>This command builds a package that consists of a single <code>$out</code> file
(symlinked to <code>./result</code>) which contains absolute path to <code>re2c</code> binary.
It’s not a complicated package:</p>
<pre><code>$ cat result
/nix/store/pj9cdgj07iz3cj88rywapx2lfxfmdqd3-re2c-3.1/bin/re2c</code></pre>
<p>And yet if we look at full closure of it’s inferred dependencies it
already has <code>re2c</code> and all it’s runtime dependencies:</p>
<pre><code>$ nix path-info -r ./result
/nix/store/gnzwqa9df994g01yw5x75qnbl1rhp9ds-libunistring-1.1
/nix/store/h3aw16j1c54jv8s39yvdhpfcx3538jwi-libidn2-2.3.4
/nix/store/kv0v4h5i911gj39m7n9q10k8r8gbn3sa-xgcc-12.3.0-libgcc
/nix/store/905gkx2q1pswixwmi1qfhfl6mik3f22l-glibc-2.37-8
/nix/store/s2pgr9iqj60mfnmabixnqacxl4bzb408-gcc-12.3.0-libgcc
/nix/store/gi26p79iq8jrw51irq5x82c2cqlgicxi-gcc-12.3.0-lib
/nix/store/pj9cdgj07iz3cj88rywapx2lfxfmdqd3-re2c-3.1
/nix/store/amiqn0hvnmrfcz2s8b47fb770v8hy9ny-foo</code></pre>
<p>Such automatic scanning method method has both false positives and false
negatives.</p>
<p>Say, if we are to compress the file reference might disappear:</p>
<pre><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; runCommand &quot;foo&quot; {} \
  &quot;echo ${re2c}/bin/re2c | bzip2 &gt; $out&quot;'

$ nix path-info -r ./result
/nix/store/lwx722djnam7yjy439b9k6czb55h707q-foo</code></pre>
<p>Missing reference detection is a bug here (false negative). False
negatives can be worked around by explicitly adding plain text
references into the file just like we did in the original example.</p>
<p>But I would like to talk about false positives today.</p>
<h2 id="the-problem">The problem</h2>
<p>Let’s jump start from the motivating example: right now <code>nix</code> package
has header only <code>nlohmann/json</code> dependency in it’s runtime closure:</p>
<pre><code>$ nix path-info -r nixpkgs#nix | fgrep nlohmann_json
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2</code></pre>
<p>There is nothing in <code>nlohmann/json</code> useful for <code>nix</code>’s runtime:</p>
<pre><code>$ find /nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2 -type f | unnix
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/detail/conversions/from_json.hpp
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/detail/conversions/to_chars.hpp
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/detail/conversions/to_json.hpp
...
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/ordered_map.hpp
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/cmake/nlohmann_json/nlohmann_jsonTargets.cmake
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/cmake/nlohmann_json/nlohmann_jsonConfig.cmake
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/cmake/nlohmann_json/nlohmann_jsonConfigVersion.cmake
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/pkgconfig/nlohmann_json.pc</code></pre>
<p>These are a few headers and <code>cmake</code> and <code>pkg-config</code> plumbing.</p>
<p>So why does <code>nix</code> retain those then?</p>
<h2 id="debugging-the-details">Debugging the details</h2>
<p>To figure out where the references come from we can grep the package for
a raw string and see how it gets there:</p>
<pre><code>$ LANG=C grep -R $(nix-build --no-link '&lt;nixpkgs&gt;' -A nlohmann_json) $(nix-build --no-link '&lt;nixpkgs&gt;' -A nix.out)
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-build: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-channel: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-collect-garbage: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-copy-closure: binary file matches
...</code></pre>
<p>Here we see that even <code>nix</code> binary itself retains <code>nlohmann/json</code>
reference. With <code>strings</code> tool from <code>GNU binutils</code> we can check how the
reference looks like:</p>
<pre><code>$ nix shell nixpkgs#binutils-unwrapped
$$strings $(nix-build --no-link '&lt;nixpkgs&gt;' -A nix.out)/bin/nix | grep $(nix-build --no-link '&lt;nixpkgs&gt;' -A nlohmann_json)
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/json.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/output/serializer.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/conversions/to_chars.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/input/lexer.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/iterators/iter_impl.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/input/json_sax.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/iterators/iteration_proxy.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/input/parser.hpp</code></pre>
<p>Note how absolute header paths are embedded into <code>nix</code> binary. It
happens via <code>__FILE__</code> macro expansion in C++ code.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">//// in nlohmann_json/include/nlohmann.json.h</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> basic_json <span class="op">{</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">template</span><span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">,</span> <span class="kw">typename</span><span class="op">...</span> Args<span class="op">&gt;</span> <span class="at">static</span> T<span class="op">*</span> create<span class="op">(</span>Args<span class="op">&amp;&amp;</span> <span class="op">...</span> args<span class="op">)</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        JSON_ASSERT<span class="op">(</span>obj <span class="op">!=</span> <span class="kw">nullptr</span><span class="op">);</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="co">//// in nlohmann_json/include/nlohmann/detail/macro_scope.hpp</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="co">// allow overriding assert</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#if !defined(JSON_ASSERT)</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;cassert&gt;</span><span class="pp"> </span><span class="co">// assert</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#define JSON_ASSERT</span><span class="op">(</span>x<span class="op">)</span><span class="pp"> </span><span class="ot">assert</span><span class="op">(</span>x<span class="op">)</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="co">// in glibc/include/assert.h</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="pp"># if defined </span><span class="ot">__cplusplus</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="pp">#  define assert</span><span class="op">(</span>expr<span class="op">)</span><span class="pp">                                                  </span><span class="op">\</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="pp">     </span><span class="op">(</span><span class="kw">static_cast</span><span class="pp"> </span><span class="op">&lt;</span><span class="dt">bool</span><span class="op">&gt;</span><span class="pp"> </span><span class="op">(</span>expr<span class="op">)</span><span class="pp">                                         </span><span class="op">\</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="pp">      </span><span class="op">?</span><span class="pp"> </span><span class="dt">void</span><span class="pp"> </span><span class="op">(</span><span class="dv">0</span><span class="op">)</span><span class="pp">                                                        </span><span class="op">\</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="pp">      </span><span class="op">:</span><span class="pp"> </span>__assert_fail<span class="pp"> </span><span class="op">(#</span>expr<span class="op">,</span><span class="pp"> </span><span class="ot">__FILE__</span><span class="op">,</span><span class="pp"> </span><span class="ot">__LINE__</span><span class="op">,</span><span class="pp"> </span>__ASSERT_FUNCTION<span class="op">))</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span></code></pre></div>
<p>In this case any code that happens to instantiate <code>basic_json::create()</code>
function will embed <code>__FILE__</code> definition as part of the <code>assert()</code> call
and will embed absolute path to the store.</p>
<p>Absolute path to the store will retain <code>nlohmann/json</code> in runtime closure.
It’s a completely redundant runtime dependency.</p>
<h2 id="the-workaround">The workaround</h2>
<p>Initially I though of using something like <code>nukeReferences</code>
file-mangling tool to wipe out unexpected references. But I was not sure
where should I plug this hammer: ideally any user of <code>nlohmann_json</code>
package should run it just in case. And patching files after-the-fast is
always prone to break something: be it broken file checksums, broken
sort ordering, unrelated string sharing due to identical code folding.</p>
<p>I wanted something milder: ideally tell <code>gcc</code> not to emit problematic
paths at all. And <code>gcc</code> provides exactly that mechanism!</p>
<p><code>gcc</code> has a way to slightly mangle absolute paths used by <code>__FILE__</code> via
<code>-fmacro-prefix-map=old=new</code> set of options: <a href="https://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html</a>.</p>
<p>It’s main use case is to untangle final binaries from the temporary
directory sources are built against:
<code>-fmacro-prefix-map=/tmp/autogenerated/foo=/usr/src/foo</code>.</p>
<p>The problem feels vaguely similar: we want to avoid any mention of
source directories in the final output. I tried to inject
<code>-fmacro-prefix-map=</code> for every single build input used by <code>nixpkgs</code> as:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/build-support/cc-wrapper/setup-hook.sh</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/build-support/cc-wrapper/setup-hook.sh</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -65,15 +65,29 @@</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a> # function is guaranteed to be exactly the same.</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a> ccWrapper_addCVars () {</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>     # See ../setup-hooks/role.bash</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="st">-    local role_post</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="va">+    local role_post mangled_store map_flag var</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>     getHostRoleEnvHook</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="va">+    var=NIX_CFLAGS_COMPILE${role_post}</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>     if [ -d &quot;$1/include&quot; ]; then</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="st">-        export NIX_CFLAGS_COMPILE${role_post}+=&quot; -isystem $1/include&quot;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="va">+        export $var+=&quot; -isystem $1/include&quot;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>     fi</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>     if [ -d &quot;$1/Library/Frameworks&quot; ]; then</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="st">-        export NIX_CFLAGS_COMPILE${role_post}+=&quot; -iframework $1/Library/Frameworks&quot;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="va">+        export $var+=&quot; -iframework $1/Library/Frameworks&quot;</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="va">+    fi</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="va">+    # Try hard to avoid hardcoding of -dev outputs via __FILE__.</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="va">+    # THe typical examples are: asserts in nlohmann_json leaking into</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a><span class="va">+    # nix executable closure, asserts from lttng-ust leaking into</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a><span class="va">+    # pipewire.</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a><span class="va">+    mangled_store=$(printf &quot;%s&quot; &quot;$1&quot; | sed -e &quot;s|$NIX_STORE/[a-z0-9]\{32\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g&quot;)</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a><span class="va">+    map_flag=&quot;-fmacro-prefix-map=$1=$mangled_store&quot;</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a><span class="va">+    # As it's a long flag try hard not to introduce duplicates as</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a><span class="va">+    # environment gets exhausted otherwise for large packages like qemu.</span></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a><span class="va">+    if [[ ${!var-} != *&quot; $map_flag&quot;* ]]; then</span></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a><span class="va">+        export $var+=&quot; $map_flag&quot;</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>     fi</span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>The change adds a bunch of compiler options on form of:</p>
<pre><code>-fmacro-prefix-map=/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-nlohmann_json-3.11.2</code></pre>
<p>That way <code>__FILE__</code> values still have a reasonable form: we can see which
package they come from. But we can’t use the path in any meaningful way
as they don’t refer real files anymore. Does not look too bad.</p>
<p>I also had to avoid attempts at inserting multiple identical values into
the final <code>NIX_CFLAGS_COMPILE</code> variable. Otherwise some particularly
large packages like <code>qemu</code> exhaust all the environment space and fail to
run executables. We might want to do the same for the rest of variables:
we add most of the options options thrice to <code>NIX_CFLAGS_COMPILE</code>.</p>
<p>Proposed the workaround as <a href="https://github.com/NixOS/nixpkgs/pull/255192" class="uri">https://github.com/NixOS/nixpkgs/pull/255192</a>.</p>
<h2 id="the-results">The results</h2>
<p>Did the workaround help? I placed the patch into <code>~/n</code> checkout of
<code>nixpkgs</code> repo.</p>
<pre><code>$ LANG=C grep -R $(nix-build --no-link ~/n -A nlohmann_json) $(nix-build --no-link ~/n -A nix.out)
&lt;empty&gt;</code></pre>
<p>Yay! At the very least we got rid of the unneeded reference.</p>
<p><code>nix</code> was a good example of a superfluous and small harmless dependency.</p>
<p>Are there packages where this change would be more pronounced? My
ulterior motive was to fix something similar in <code>lttng-ust.dev</code>. That
one was not just a set of headers. It also contains python interpreter
as a dependency:</p>
<pre><code>$ nix path-info -r $(nix-build '&lt;nixpkgs&gt;' -A lttng-ust.dev) |&amp; unnix
/&lt;&lt;NIX&gt;&gt;/libunistring-1.1
/&lt;&lt;NIX&gt;&gt;/libidn2-2.3.4
/&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0-libgcc
/&lt;&lt;NIX&gt;&gt;/glibc-2.37-8
/&lt;&lt;NIX&gt;&gt;/zlib-1.2.13
/&lt;&lt;NIX&gt;&gt;/sqlite-3.42.0
/&lt;&lt;NIX&gt;&gt;/numactl-2.0.16
/&lt;&lt;NIX&gt;&gt;/lttng-ust-2.13.1
/&lt;&lt;NIX&gt;&gt;/expat-2.5.0
/&lt;&lt;NIX&gt;&gt;/ncurses-6.4
/&lt;&lt;NIX&gt;&gt;/liburcu-0.14.0
/&lt;&lt;NIX&gt;&gt;/xz-5.4.4
/&lt;&lt;NIX&gt;&gt;/openssl-3.0.10
/&lt;&lt;NIX&gt;&gt;/bzip2-1.0.8
/&lt;&lt;NIX&gt;&gt;/libffi-3.4.4
/&lt;&lt;NIX&gt;&gt;/libxcrypt-4.4.36
/&lt;&lt;NIX&gt;&gt;/liburcu-0.14.0-dev
/&lt;&lt;NIX&gt;&gt;/gcc-12.3.0-libgcc
/&lt;&lt;NIX&gt;&gt;/gcc-12.3.0-lib
/&lt;&lt;NIX&gt;&gt;/readline-8.2p1
/&lt;&lt;NIX&gt;&gt;/bash-5.2-p15
/&lt;&lt;NIX&gt;&gt;/mailcap-2.1.53
/&lt;&lt;NIX&gt;&gt;/gdbm-1.23
/&lt;&lt;NIX&gt;&gt;/tzdata-2023c
/&lt;&lt;NIX&gt;&gt;/python3-3.10.12
/&lt;&lt;NIX&gt;&gt;/lttng-ust-2.13.1-bin
/&lt;&lt;NIX&gt;&gt;/lttng-ust-2.13.1-dev</code></pre>
<p>One of the frequent users of <code>lttng-ust.dev</code> is <code>pipewire</code>:</p>
<pre><code>$ nix path-info -r $(nix-build '&lt;nixpkgs&gt;' -A pipewire.out) | fgrep lttng
/nix/store/23jh1m6irhvr16zjmrvy2cnpgz7yi6gj-lttng-ust-2.13.1
/nix/store/xznqsvr1la1xnfnzia2yvnicfz03yjqb-lttng-ust-2.13.1-bin
/nix/store/fckk2ncjnxdw1xsx8v8rxjnmhldbx8pr-lttng-ust-2.13.1-dev</code></pre>
<p>And I’m glad to announce that it’s also gone with the patch above:</p>
<pre><code>$ nix path-info -r $(nix-build ~/n -A pipewire.out) | fgrep lttng
/nix/store/bv3i3qjphzgfzmmdhws9nhwz76qscy61-lttng-ust-2.13.1</code></pre>
<p>Here is the closure size difference:</p>
<p>Before:</p>
<pre><code>$ nix path-info -rsSh $(nix-build '&lt;nixpkgs&gt;' -A pipewire.out) | nl | tail -n1
   219  /nix/store/ff0w34nr807in3b1swmqklxy9g9v5hg9-pipewire-0.3.79 1.4M  543.4M</code></pre>
<p>After:</p>
<pre><code>$ nix path-info -rsSh $(nix-build ~/n -A pipewire.out) | nl | tail -n1
   207  /nix/store/hl4dffvc73nsh3zfbji0y7h9lcnrk14b-pipewire-0.3.79 1.3M  452.0M</code></pre>
<p>12 dependencies and ~90MB (<code>543.4</code> -&gt; <code>452.0</code> reduction, ~20% of the whole
output) are just gone!</p>
<h2 id="parting-words">Parting words</h2>
<p>Looking at the runtime closure is always fun. There are many other
low-hanging fruits in <code>nixpkgs</code> to remove. Most of the time just adding
an extra <code>dev</code> output is enough to slim down the output.</p>
<p><code>__FILE__</code> is a tricky macro that makes <code>nix</code> builds to leak out
unnecessary references into final closure.</p>
<p><code>-fmacro-prefix-map=</code> seems to be a robust workaround for <code>__FILE__</code>
induced leaks. The flag is supported in both <code>gcc</code> and <code>clang</code> for quite
a while.</p>
<p>Even <code>nix</code> package itself had a redundant dependency in it’s final
closure.</p>
<p><a href="https://github.com/NixOS/nixpkgs/pull/255192" class="uri">https://github.com/NixOS/nixpkgs/pull/255192</a> should fix it in <code>nixpkgs</code>.</p>
<p>And for some packages like <code>pipewire</code> the closure size reduction is
substantial and is taking about 20% of all closure size. Not bad for a
single extra compiler option.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 14, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>32-bit file API strikes back</title>
    <link href="http://trofi.github.io/posts/297-32-bit-file-API-strikes-back.html" />
    <id>http://trofi.github.io/posts/297-32-bit-file-API-strikes-back.html</id>
    <published>2023-09-07T00:00:00Z</published>
    <updated>2023-09-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>It was another day of me trying a new <code>gcc</code> version.</p>
<h2 id="the-problem">The problem</h2>
<p>This time build failure was in <code>gcc</code> itself:</p>
<pre><code>$ nix build -f. pkgsi686Linux.stdenv
       &gt; /nix/store/bxvqx767s4gwry9km5c3cmflskmparyf-bootstrap-stage-xgcc-stdenv-linux/setup: line 167: type: install_name_tool: not found
       &gt; preFixupLibGccPhase
       &gt; stat: Value too large for defined data type
       For full logs, run 'nix log /nix/store/v3cr2nghg1s4bmm30r1vnq1124qqvv9m-xgcc-14.0.0.drv'.</code></pre>
<h2 id="debugging-the-failure">Debugging the failure</h2>
<p>The actual error here is <code>stat: Value too large for defined data type</code>.
While <code>type: install_name_tool: not found</code> is an unrelated distraction.</p>
<p>Note that this failure happens a bit earlier than <code>pkgsi686Linux.stdenv</code>
build itself. If we poke a bit around the action build failure happens
in <code>pkgsi686Linux.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc</code> package in early bootstrap phases.</p>
<p>From the error message failure happens in <code>preFixupLibGccPhase</code> phase.
Let’s have a look at its definition:</p>
<pre><code>$ nix repl '&lt;nixpkgs&gt;'
...
nix-repl&gt; builtins.trace pkgsi686Linux.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc.preFixupLibGccPhase &quot;&quot;
trace: # move libgcc from lib to its own output (libgcc)
mkdir -p $libgcc/lib
mv    $lib/lib/libgcc_s.so      $libgcc/lib/
mv    $lib/lib/libgcc_s.so.1    $libgcc/lib/
ln -s $libgcc/lib/libgcc_s.so   $lib/lib/
ln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/
patchelf --set-rpath &quot;&quot; $libgcc/lib/libgcc_s.so.1

&quot;&quot;</code></pre>
<p>One of these commands did fail, not clear which one. Let’s add a bit of
debugging by adding <code>set -x</code> into the phase:</p>
<pre><code>$ nix develop --impure --expr 'with import ./. {};
  pkgsi686Linux.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc.overrideAttrs (oa: {
    preFixupLibGccPhase = &quot;set -x\n&quot; + oa.preFixupLibGccPhase; })'
$$ genericBuild
...
++ patchelf --set-rpath '' /home/slyfox/dev/git/nixpkgs/outputs/libgcc/lib/libgcc_s.so.1
stat: Value too large for defined data type</code></pre>
<p>Yay! It was the <code>patchelf</code> call! We can re-enter the environment and
poke a bit more at the environment:</p>
<pre><code>$ nix develop --impure --expr 'with import ...'
$$ patchelf --set-rpath '' $libgcc/lib/libgcc_s.so.1
stat: Value too large for defined data type</code></pre>
<p>The error is still there. What kind of <code>stat</code> call does <code>patchelf</code> use?</p>
<pre><code>$ which patchelf
/nix/store/i9v173g8a5wwi8i8fd2wmdyr8ix6mla1-bootstrap-tools/bin/patchelf

$ nm -DC /nix/store/i9v173g8a5wwi8i8fd2wmdyr8ix6mla1-bootstrap-tools/bin/patchelf |&amp; fgrep stat
         U __xstat@GLIBC_2.0</code></pre>
<p>Note that this <code>patchelf</code> comes from <code>bootstrapTools</code>.
<code>pkgs/stdenv/linux/bootstrap-files/i686.nix</code> says it was updated last
time in <code>2019</code> (4 years ago).</p>
<p>For comparison currently built <code>patchelf</code> built on <code>i686</code> system does
use <code>stat64</code> call:</p>
<pre><code>$ nm -DC $(nix-build --no-link '&lt;nixpkgs&gt;' -A patchelf --argstr system i686-linux )/bin/patchelf |&amp; fgrep stat
         U stat64@GLIBC_2.33</code></pre>
<p>And it runs the patch just fine:</p>
<pre><code>$$ $(nix-build --no-link '&lt;nixpkgs&gt;' -A patchelf --argstr system i686-linux)/bin/patchelf  --set-rpath '' $libgcc/lib/libgcc_s.so.1</code></pre>
<h2 id="refreshing-bootstrapfiles">Refreshing <code>bootstrapFiles</code></h2>
<p>The fix is as simple as regenerating <code>bootstrapFiles</code> for <code>i686</code>:</p>
<pre><code>$ nix-build '&lt;nixpkgs/pkgs/stdenv/linux/make-bootstrap-tools.nix&gt;' -A bootstrapFiles      --arg pkgs 'import &lt;nixpkgs&gt; { system = &quot;i686-linux&quot;; }'
/nix/store/713cyy66gkxqmi1wpdswd4llq1qzikr5-bootstrap-tools.tar.xz
/nix/store/cvdfhnwjbbfjbv6ibgcl8rz47giy771v-busybox</code></pre>
<p>I did not have to build anything. Hydra has it cached today.</p>
<p>We can point our seed binaries to freshly built version of those:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/bootstrap-files/i686.nix</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/bootstrap-files/i686.nix</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,12 +1,4 @@</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="st">-  busybox = import &lt;nix/fetchurl.nix&gt; {</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="st">-    url = &quot;http://tarballs.nixos.org/stdenv-linux/i686/4907fc9e8d0d82b28b3c56e3a478a2882f1d700f/busybox&quot;;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;ef4c1be6c7ae57e4f654efd90ae2d2e204d6769364c46469fa9ff3761195cba1&quot;;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="st">-    executable = true;</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="st">-  };</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="st">-  bootstrapTools = import &lt;nix/fetchurl.nix&gt; {</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="st">-    url = &quot;http://tarballs.nixos.org/stdenv-linux/i686/c5aabb0d603e2c1ea05f5a93b3be82437f5ebf31/bootstrap-tools.tar.xz&quot;;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;b9bf20315f8c5c0411679c5326084420b522046057a0850367c67d9514794f1c&quot;;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="st">-  };</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="va">+  busybox = ./i686-linux/busybox;</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="va">+  bootstrapTools = ./i686-linux/bootstrap-tools.tar.xz;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>Now <code>pkgsi686Linux.stdenv</code> builds just fine:</p>
<pre><code>$ nix build -f. pkgsi686Linux.stdenv</code></pre>
<p>Unfortunately the change is not usable for upstream as is: uploading new
bootstrap binaries is a strange rarely exercised process that requires
privileged user to upload tarballs to <code>s3</code>. Filed
<a href="https://github.com/NixOS/nixpkgs/issues/253274" class="uri">https://github.com/NixOS/nixpkgs/issues/253274</a> to do it correctly.</p>
<p>I would say it’s a waste of time to debug issues in outdated binaries
like that. The bootstrap tarballs should be updated at least every
<code>NixOS</code> release (every 6 months). Or more frequently :) Filed
<a href="https://github.com/NixOS/nixpkgs/issues/253713" class="uri">https://github.com/NixOS/nixpkgs/issues/253713</a> for that.</p>
<p>Periodic updates would also make tarballs more homogeneous across
architectures. Today we ship different <code>glibc</code> and <code>gcc</code> versions in
bootstrap tarballs which adds another dimension of bugs.</p>
<h2 id="why-did-upgrade-work">Why did upgrade work?</h2>
<p><code>patchelf</code> itself was fixed in 2016 (7 years ago) as
<a href="https://github.com/NixOS/patchelf/commit/a4d21661d510ccf7ff72bb0e4ccd3f087e9086ad" class="uri">https://github.com/NixOS/patchelf/commit/a4d21661d510ccf7ff72bb0e4ccd3f087e9086ad</a>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/Makefile.am</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/Makefile.am</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,4 +1,4 @@</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="st">-AM_CXXFLAGS = -Wall -std=c++11</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="va">+AM_CXXFLAGS = -Wall -std=c++11 -D_FILE_OFFSET_BITS=64</span></span></code></pre></div>
<p>We just happened to pull in a fix for it along with <code>glibc</code> that
supports <code>stat64</code>.</p>
<h2 id="how-should-fix-usually-looks-like">How should fix usually looks like?</h2>
<p>Setting <code>-D_FILE_OFFSET_BITS=64</code> explicitly should be a safe workaround.</p>
<p><code>autoconf</code>-based systems usually use
<a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/System-Services.html">AC_SYS_LARGEFILE</a>.
It should set both <code>_FILE_OFFSET_BITS</code> and <code>_LARGE_FILES</code> where needed
and also provides a nice <code>--disable-largefile</code> knob. Other build systems
have the equivalent or always enable it by default.</p>
<p><code>glibc</code> implements <code>stat</code> switch in <code>io/sys/stat.h</code> as:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifndef __USE_FILE_OFFSET64</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">/* Get file attributes for FILE and put them in BUF.  */</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> stat <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__restrict __file<span class="op">,</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>                 <span class="kw">struct</span> stat <span class="op">*</span>__restrict __buf<span class="op">)</span> __THROW __nonnull <span class="op">((</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">));</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="pp"># ifdef __USE_TIME_BITS64</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> __REDIRECT_NTH <span class="op">(</span>stat<span class="op">,</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__restrict __file<span class="op">,</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>                                  <span class="kw">struct</span> stat <span class="op">*</span>__restrict __buf<span class="op">),</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>                                  __stat64_time64<span class="op">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="pp"># endif</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> stat64 <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__restrict __file<span class="op">,</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>                   <span class="kw">struct</span> stat64 <span class="op">*</span>__restrict __buf<span class="op">)</span> __THROW __nonnull <span class="op">((</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">));</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>
<p>(I skipped a bit of <code>#define</code>ery where <code>stat</code> gets redirected to
<code>__xstat</code>.)</p>
<p>The above hints that we will soon have a similar problem of switching
to 64-bit <code>time_t</code> on 32-bit systems.</p>
<h2 id="why-did-patchelf-fail-at-all">Why did <code>patchelf</code> fail at all?</h2>
<p>I hear you ask: “why did <code>patchelf</code> fail at all”? Is <code>libgcc.so</code> such a
large file by any definition? It’s size is unlikely to overflow 32 bits
(4GB). Why does <code>stat()</code> implementation matter here?</p>
<p>And you are right: <code>libgcc_s.so.1</code> is only 139KB large.</p>
<p>Here is the full structure <code>man 2 stat</code> knows about:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> stat <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    dev_t     st_dev<span class="op">;</span>         <span class="co">/* ID of device containing file */</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    ino_t     st_ino<span class="op">;</span>         <span class="co">/* Inode number */</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    mode_t    st_mode<span class="op">;</span>        <span class="co">/* File type and mode */</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    nlink_t   st_nlink<span class="op">;</span>       <span class="co">/* Number of hard links */</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    uid_t     st_uid<span class="op">;</span>         <span class="co">/* User ID of owner */</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    gid_t     st_gid<span class="op">;</span>         <span class="co">/* Group ID of owner */</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    dev_t     st_rdev<span class="op">;</span>        <span class="co">/* Device ID (if special file) */</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    off_t     st_size<span class="op">;</span>        <span class="co">/* Total size, in bytes */</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    blksize_t st_blksize<span class="op">;</span>     <span class="co">/* Block size for filesystem I/O */</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>    blkcnt_t  st_blocks<span class="op">;</span>      <span class="co">/* Number of 512B blocks allocated */</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Since Linux 2.6, the kernel supports nanosecond</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="co">       precision for the following timestamp fields.</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="co">       For the details before Linux 2.6, see NOTES. */</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> timespec st_atim<span class="op">;</span>  <span class="co">/* Time of last access */</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> timespec st_mtim<span class="op">;</span>  <span class="co">/* Time of last modification */</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> timespec st_ctim<span class="op">;</span>  <span class="co">/* Time of last status change */</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="pp">#define st_atime st_atim</span><span class="op">.</span><span class="pp">tv_sec      </span><span class="co">/* Backward compatibility */</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="pp">#define st_mtime st_mtim</span><span class="op">.</span><span class="pp">tv_sec</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="pp">#define st_ctime st_ctim</span><span class="op">.</span><span class="pp">tv_sec</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p><code>stat()</code> has to fill all the fields. It does not known which ones
userspace is going to need. The man page also tells us the overflowing
condition:</p>
<pre><code>ERRORS
...
   EOVERFLOW
          pathname  or fd refers to a file whose size, inode number,
          or number of blocks cannot be represented in, respectively,
          the types off_t, ino_t, or blkcnt_t.  This error can occur
          when, for example, an application compiled on a 32-bit
          platform without -D_FILE_OFFSET_BITS=64 calls stat() on a
          file whose size exceeds (1&lt;&lt;31)-1 bytes.</code></pre>
<p>Note that it’s 2GB limit and not a 4GB limit. And it is not just about
the file size. In my case it’s the inode number <code>ino_t st_ino;</code> field:</p>
<pre><code>$ ls -li foo
4404087433 -rw-r--r-- 1 slyfox users 0 Sep  7 09:25 foo</code></pre>
<p>Here inode number overflows our 2GB limit. Let’s use this trivial
program to make sure it fails to <code>stat()</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;errno.h&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/stat.h&gt;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> stat s<span class="op">;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> r<span class="op">;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>    errno <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> stat<span class="op">(</span><span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="op">&amp;</span>s<span class="op">);</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>r <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>        printf <span class="op">(</span><span class="st">&quot;stat() = -1: error: </span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;stat() succeeded</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Running it against both APIs:</p>
<pre><code>$ nix develop -f '&lt;nixpkgs&gt;' patchelf --argstr system i686-linux

$$ gcc a.c -o a &amp;&amp; ./a
stat() = -1: error: Value too large for defined data type

$$ gcc a.c -o a -D_FILE_OFFSET_BITS=64 &amp;&amp; ./a
stat() succeeded</code></pre>
<p>Yep! This is it.</p>
<h2 id="why-are-my-inode-numbers-so-big">Why are my inode numbers so big?</h2>
<p>4 billion inodes is a lot. Why such a big number? Do I have so many
files on disk? No, <code>find /</code> tells me I have around 25 million files
(~100 times smaller than 2 billion mark).</p>
<p>It comes down to the fact how exactly <code>btrfs</code> filesystem allocates inode
numbers.</p>
<p>Compared to <code>ext4</code> (which uses first available inode number in inode
table of fixed size) <code>btrfs</code> does not use a single inode table but uses
B-tree of “objects”.</p>
<p><code>btrfs</code> strategy to allocate inodes is to increment the global number
(per filesystem, number is populated in <code>btrfs_create_new_inode()</code>):</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> btrfs_create_new_inode<span class="op">(</span><span class="kw">struct</span> btrfs_trans_handle <span class="op">*</span>trans<span class="op">,</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>                           <span class="kw">struct</span> btrfs_new_inode_args <span class="op">*</span>args<span class="op">)</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> btrfs_get_free_objectid<span class="op">(</span>root<span class="op">,</span> <span class="op">&amp;</span>objectid<span class="op">);</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>ret<span class="op">)</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>    inode<span class="op">-&gt;</span>i_ino <span class="op">=</span> objectid<span class="op">;</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> btrfs_get_free_objectid<span class="op">(</span><span class="kw">struct</span> btrfs_root <span class="op">*</span>root<span class="op">,</span> u64 <span class="op">*</span>objectid<span class="op">)</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">// skipped locking and error handling</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>objectid <span class="op">=</span> root<span class="op">-&gt;</span>free_objectid<span class="op">++;</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> re<span class="op">;</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a><span class="pp">#define BTRFS_FIRST_FREE_OBJECTID </span><span class="dv">256</span><span class="bu">ULL</span></span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a><span class="pp">#define BTRFS_LAST_FREE_OBJECTID </span><span class="op">-</span><span class="dv">256</span><span class="bu">ULL</span></span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> btrfs_init_root_free_objectid<span class="op">(</span><span class="kw">struct</span> btrfs_root <span class="op">*</span>root<span class="op">)</span></span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>    search_key<span class="op">.</span>objectid <span class="op">=</span> BTRFS_LAST_FREE_OBJECTID<span class="op">;</span></span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>    search_key<span class="op">.</span>type <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>    search_key<span class="op">.</span>offset <span class="op">=</span> <span class="op">(</span>u64<span class="op">)-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> btrfs_search_slot<span class="op">(</span>NULL<span class="op">,</span> root<span class="op">,</span> <span class="op">&amp;</span>search_key<span class="op">,</span> path<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>path<span class="op">-&gt;</span>slots<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a>        slot <span class="op">=</span> path<span class="op">-&gt;</span>slots<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>        l <span class="op">=</span> path<span class="op">-&gt;</span>nodes<span class="op">[</span><span class="dv">0</span><span class="op">];</span></span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>        btrfs_item_key_to_cpu<span class="op">(</span>l<span class="op">,</span> <span class="op">&amp;</span>found_key<span class="op">,</span> slot<span class="op">);</span></span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a>        root<span class="op">-&gt;</span>free_objectid <span class="op">=</span> max_t<span class="op">(</span>u64<span class="op">,</span> found_key<span class="op">.</span>objectid <span class="op">+</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a>                                        BTRFS_FIRST_FREE_OBJECTID<span class="op">);</span></span>
<span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a>        root<span class="op">-&gt;</span>free_objectid <span class="op">=</span> BTRFS_FIRST_FREE_OBJECTID<span class="op">;</span></span>
<span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>In the code above <code>btrfs</code> literally increments <code>root-&gt;free_objectid</code> as
a way to generate new inode number. On fresh filesystems inode numbers
for files and directories start from <code>256</code> (<code>BTRFS_FIRST_FREE_OBJECTID</code>).
On used filesystem they start from the next after largest already
allocated inode.</p>
<p>Note that file removal does not normally reclaim the inode numbers.
Let’s poke a bit at it in action:</p>
<pre><code># create empty btrfs filesystem:
$ fallocate -l 10G fs.raw
$ mkfs.btrfs fs.raw
$ mkdir m
$ mount fs.raw m
$ cd m

# first file on disk:
$ ls -li first
257 -rw-r--r-- 1 root root 0 Sep  7 15:10 first

# second file on disk:
$ ls -li first
258 -rw-r--r-- 1 root root 0 Sep  7 15:10 first</code></pre>
<p>Despite the same file name being deleted and recreated in place it’s
inode number increases.</p>
<p>There is one exception to “always increasing” rule: if we delete files
with highest inode numbers and unmount/remount the filesystem we will be
able to unwind <code>free_objectid</code> back a bit:</p>
<pre><code># remount empty and try again:
$ rm first

$ cd ..
$ umount m
$ mount fs.raw m
$ cd m

$ touch first
$ ls -li first
257 -rw-r--r-- 1 root root 0 Sep  7 15:11 first</code></pre>
<p>Note: after the remount the inode number is back to <code>257</code> (and not <code>259</code>).
<code>256</code> inode is taken by <code>/</code> root directory.</p>
<p>Back to the question why my filesystem has inode numbers above 4
billion: apparently I managed to create that many files throughout the
lifetime of this filesystem. It’s a 2 years old <code>btrfs</code>. This means
filesystem sees about 70 files per second being created and deleted.</p>
<h2 id="more-failures">More failures</h2>
<p>After fixing <code>patchelf</code> locally I tried to build more <code>i686</code> packages
(mainly <code>wine</code> dependencies) and discovered a few more similar failures.</p>
<p>One of them was in <code>which</code> command:</p>
<pre><code>$ bison
bison: missing operand
Try 'bison --help' for more information.

$ which bison
which: no bison in (... long list of PATHs here, one of them with `bison`)</code></pre>
<p>If we look <code>bison</code> up manually it’s there:</p>
<pre><code>$ for p in ${PATH//:/ }; do [ -f $p/bison ] &amp;&amp; ls -li $p/bison; done
4386192903 -r-xr-xr-x 2 root root 678408 Jan  1  1970 /nix/store/mf37crpkvz388nmqqvkbnmvp21663w26-bison-3.8.2/bin/bison</code></pre>
<p>Proposed <code>which</code> fix for <code>nixpkgs</code> as
<a href="https://github.com/NixOS/nixpkgs/pull/253382" class="uri">https://github.com/NixOS/nixpkgs/pull/253382</a> and upstream as
<a href="https://github.com/CarloWood/which/pull/1" class="uri">https://github.com/CarloWood/which/pull/1</a>.</p>
<p><code>which</code> fix allowed <code>i686</code> to progress a bit more and now it stumbled on
<code>fontconfig</code> and <code>tpm2-tss</code>. To be debugged.</p>
<h2 id="parting-words">Parting words</h2>
<p>32-bit file APIs are not just about handling of files larger that 4GB
in size. Nowadays’ filesystems can easily have other fields that don’t
fit into 32-bit counters. One of them is inode number. Next in the queue
will probably be 64-bit <code>time_t</code>.</p>
<p>The 64-bit interfaces are opt-in for many 32-bit targets and will remain
such for the foreseeable future. Each individual project will have to
adapt to it by adding <code>-D_FILE_OFFSET_BITS=64</code> (and soon
<code>-D_TIME_BITS=64</code>).</p>
<p>While projects gradually migrate to new APIs <code>bootstrapTools</code> should be
rebuilt to get the updates. I hope some form of
<a href="https://github.com/NixOS/nixpkgs/issues/253713" class="uri">https://github.com/NixOS/nixpkgs/issues/253713</a> process will be in
place to make it smoother. Otherwise one-off
<a href="https://github.com/NixOS/nixpkgs/issues/253274" class="uri">https://github.com/NixOS/nixpkgs/issues/253274</a> update will have to do.</p>
<p>If you see a project that still uses 32-bit APIs please send a patch
upstream to use 64-bit API if possible. Chances are it will fix real
breakage on filesystems with 64-bit inodes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September  7, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>gcc-14 bugs, pile 2</title>
    <link href="http://trofi.github.io/posts/296-gcc-14-bugs-pile-2.html" />
    <id>http://trofi.github.io/posts/296-gcc-14-bugs-pile-2.html</id>
    <published>2023-09-06T00:00:00Z</published>
    <updated>2023-09-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Two more months of <code>gcc-14</code> development have passed. The bug rate slowed
down considerably. Let’s look at the new bugs since. This time it is
mere <code>10</code> bugs.</p>
<h2 id="summary">Summary</h2>
<p>Here are the bugs themselves:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR110652">tree-optimization/110652</a>: bootstrap failure for <code>-Werror</code>.</li>
<li><a href="https://gcc.gnu.org/PR110697">middle-end/110697</a>: bootstrap failure for <code>-Werror</code>.</li>
<li><a href="https://gcc.gnu.org/PR110726">tree-optimization/110726</a>: wrong code on <code>llvm</code>: <code>a |= a == 0</code>.</li>
<li><a href="https://gcc.gnu.org/PR110790">target/110787</a>: wrong code on <code>gmp</code></li>
<li><a href="https://gcc.gnu.org/PR110838">tree-optimization/110838</a>: wrong code on <code>x365</code></li>
<li><a href="https://gcc.gnu.org/PR110880">target/110880</a>: <code>aarch64</code> ICE on <code>highway-1.0.5</code></li>
<li><a href="https://gcc.gnu.org/PR111009">tree-optimization/111009</a>: wrong code on <code>perf</code> from <code>linux</code></li>
<li><a href="https://gcc.gnu.org/PR111048">tree-optimization/111048</a>: wrong code on <code>highway-1.0.6</code></li>
<li><a href="https://gcc.gnu.org/PR111051">target/111051</a>: <code>gcc</code> fails to use <code>avx2</code> primitives
on <code>avx512</code> targeted functions on <code>highway-1.0.6</code></li>
<li><a href="https://gcc.gnu.org/PR111060">target/111060</a>: <code>i686-linux</code> <code>gcc</code> fails to build
it’s own <code>libbstdc++</code> due to missing <code>Float16</code> support.</li>
</ul>
<p>Histograms time!</p>
<p>Type of bugs:</p>
<ul>
<li><code>wrong-code</code>: 5</li>
<li><code>other</code>: 4</li>
<li><code>ICEs</code>: 1</li>
</ul>
<p>This was an unusual cycle: most of the bugs were related to the wrong
code generated by <code>gcc</code>. Some of them (like <code>gmp</code> and <code>perf</code> ones) were
very nasty to extract and report.</p>
<p>Subsystems:</p>
<ul>
<li><code>tree-optimization</code>: 5</li>
<li><code>target</code>: 4</li>
<li><code>middle-end</code>: 1</li>
</ul>
<p>As usual half the bugs are lurking in <code>tree-optimization</code> part of the
compiler. Though this time <code>target</code>-specific bugs are frequent as well.</p>
<h2 id="a-note-on-highway">A note on highway</h2>
<p>3 out of 10 bugs were exposed by a <code>highway</code> library. It’s such a great
vectorizer benchmark for <code>gcc</code>!</p>
<p>Initially I was a bit upset by the amount of C++ template indirections
<code>highway</code> uses on it’s implementation.</p>
<p>As it exercises all the possible vector units available for the platform
(<code>SSE{2,3,4}</code>, <code>AVX{1,2}</code> and many others) it was hard for me to narrow
down to a single failing unit type: attempts to remove code for one of
them fails the build for others.</p>
<p>But! I found an easy way to deal with it! We can disable most irrelevant
targets in <code>hwy/detect_targets.h</code> by adding all the irrelevant targets
to <code>HWY_BROKEN_TARGETS</code> define. I usually add everything except the
broken target (usually <code>HWY_AVX2</code> :).</p>
<p>And then reduction becomes trivial: I expand all the templates and get
the simple function with a failure.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>gcc</code> <code>master</code> still yields new bugs. It is still quite a bit of fun to
get and extract build compiler failures from real world usage.</p>
<p>I liked <a href="https://gcc.gnu.org/PR111048" class="uri">https://gcc.gnu.org/PR111048</a> the most. There <code>gcc</code> generated
wrong code for <code>highway-1.0.6</code> library in <code>-mavx2</code> mode.</p>
<p>When handling the following loop:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>u8 in_lanes<span class="op">[</span><span class="dv">32</span><span class="op">];</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">32</span><span class="op">;</span> i <span class="op">+=</span> <span class="dv">2</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  in_lanes<span class="op">[</span>i <span class="op">+</span> <span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  in_lanes<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">((</span>u8<span class="op">)</span><span class="bn">0xff</span><span class="op">)</span> <span class="op">&gt;&gt;</span> <span class="op">(</span>i <span class="op">&amp;</span> <span class="dv">7</span><span class="op">);</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>gcc</code> broke <code>i = 12;</code> iteration and instead of <code>i[13] = 0xf;</code>
(<code>0xff &gt;&gt; 4</code>) stored something like <code>i[13] = 0xef;</code> there. <code>gcc</code> was
able to fully constant-fold the loop (and did it slightly incorrectly).</p>
<p>Have fun!</p>

<div class="info">
    Posted on September  6, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>SSH over HTTPS</title>
    <link href="http://trofi.github.io/posts/295-ssh-over-https.html" />
    <id>http://trofi.github.io/posts/295-ssh-over-https.html</id>
    <published>2023-08-30T00:00:00Z</published>
    <updated>2023-08-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Tl;DR: to pass <code>SSH</code> through <code>HTTPS</code> you need to tweak client and server
sides as the following:</p>
<p>Example client entry in <code>~/.ssh/config</code>:</p>
<pre><code># $ cat .ssh/config
Host ssh-via-https
        ProxyCommand ~/.ssh/https-tunnel.bash
        # some firewalls aggressively close idle TCP connections
        ServerAliveInterval 30</code></pre>
<p>The <code>~/.ssh/https-tunnel.bash</code> helper script we use above:</p>
<pre><code>#!/usr/bin/env bash
{ printf &quot;CONNECT ssh-server:22 HTTP/1.0\r\n\r\n&quot;; cat; } | socat - SSL:https-server:443</code></pre>
<p>Example server entry for <code>apache2</code> <code>HTTPS</code>:</p>
<pre><code># $ cat /etc/httpd/httpd.conf
LoadModule proxy_connect_module .../modules/mod_proxy_connect.so
# ...
AllowCONNECT 22
&lt;Proxy *&gt;
    Order deny,allow
    Deny from all
&lt;/Proxy&gt;
&lt;Proxy ssh-server&gt;
    Order deny,allow
    Allow from all
&lt;/Proxy&gt;</code></pre>
<p>Here we allow everyone to use <code>CONNECT</code> <code>HTTP</code> method on the server side
hosted at <code>https-server</code> just for a single target: the <code>ssh-server</code> host.</p>
<p>And on the client side we use <code>socat</code> to create <code>TLS</code> connection with a
sent <code>CONNECT</code> method as a header.</p>
<p>Now you can use <code>$ ssh ssh-via-https</code> to reach <code>ssh-server</code>.</p>
<p>More words below:</p>
<h2 id="background">Background</h2>
<p>Why do I need it?</p>
<p>I planned to spend 1-2 days in the hospital and did not plan to use the
laptop.But now I am stuck here for the past two weeks and would like to
tinker on small stuff remotely. The hospital has free Wi-fi access.</p>
<p>The caveat is that hospital blocks most connection types. It allows you
only to do <code>HTTP</code> (<code>TCP</code> port <code>80</code>) and <code>HTTPS</code> (<code>TCP</code> port <code>443</code>)
connections for most hosts. <code>DNS</code> (<code>UDP</code> port <code>53</code>) and <code>DoT</code> (<code>TCP</code>
port <code>853</code>) seem to work as well at least for well-known <code>DNS</code>
providers.</p>
<p>But <code>SSH</code> (<code>TCP</code> port <code>22</code> or most other custom ports) is blocked
completely.</p>
<p>I wondered how hard would it be to pass <code>SSH</code> through <code>HTTP</code> or <code>HTTPS</code>.
I had a <code>GSM</code> fallback so I could reconfigure remote server and try
various solutions.</p>
<h2 id="the-options">The options</h2>
<p>There are various avenues to explore here:</p>
<ol type="1">
<li><p>Co-host <code>SSH</code> and <code>HTTPS</code> protocols on a single port and dispatch
them transparently. <a href="https://github.com/yrutschle/sslh">sslh project</a>
does just that.</p>
<p>One of it’s features (or limitations) is that it does not encapsulate
one protocol in another: it guesses the protocol using various
heuristics and redirects it to the actual backend: <code>SSH</code> server,
<code>HTTPS</code> or any other supported protocol from
<a href="https://github.com/yrutschle/sslh/blob/master/probe.c#L50">the list</a>.</p>
<p>Clear pro here is:</p>
<ul>
<li>no special <code>ssh</code> client configuration is required: you just specify
non-default port.</li>
</ul>
<p>The minor cons are:</p>
<ul>
<li>and extra service to set up</li>
<li><code>HTTPS</code> has to be passed through <code>sslh</code> as well, which might hide
source address of the connections for the backend. Not convenient
for logging (and possibly performance?).</li>
</ul></li>
<li><p>Encapsulate one protocol completely into another.</p></li>
</ol>
<p><code>openssh</code> supports <code>ProxyCommand</code> directive effectively allowing user to
supply any transport that <code>ssh</code> protocol uses:</p>
<pre><code>Specifies the command to use to connect to the server. The command string extends to the end of the line, and is executed using the user's shell ‘exec’ directive to avoid a lingering shell process.
Arguments to ProxyCommand accept the tokens described in the TOKENS section. The command can be basically anything, and should read from its standard input and write to its standard output. It should eventually connect an sshd(8) server running on some machine, or execute sshd -i somewhere. Host key management will be done using the Hostname of the host being connected (defaulting to the name typed by the user). Setting the command to none disables this option entirely. Note that CheckHostIP is not available for connects with a proxy command.

This directive is useful in conjunction with nc(1) and its proxy support. For example, the following directive would connect via an HTTP proxy at 192.0.2.0:

ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p</code></pre>
<p>Clear pros here:</p>
<ul>
<li>full encapsulation of one protocol in another: no heuristics needed,
harder to block by a Deep Packet Inspection software.</li>
<li><code>HTTPS</code> itself is not impacted or redirected</li>
</ul>
<p>The cons might be also substantial:</p>
<ul>
<li>possible performance decrease due to double-encryption</li>
<li>requires client configuration to use proxy</li>
</ul>
<h2 id="ssh-over-http">SSH over HTTP</h2>
<p>I went with the option <code>[2.]</code>: filly encapsulate <code>SSH</code> protocol into
<code>TLS</code>.</p>
<p>Before doing that I tried a simpler <code>SSH</code> over <code>HTTP</code>.</p>
<p>I configured <code>apache2</code> to allow <code>CONNECT</code> method for a single target
<code>ssh-server:22</code> as:</p>
<pre><code>$ cat /etc/httpd/httpd.conf
LoadModule proxy_connect_module .../modules/mod_proxy_connect.so
# ...
AllowCONNECT 22
&lt;Proxy *&gt;
    Order deny,allow
    Deny from all
&lt;/Proxy&gt;
&lt;Proxy ssh-server&gt;
    Order deny,allow
    Allow from all
&lt;/Proxy&gt;</code></pre>
<p>The client side was trivial to adapt using <code>socat</code>:</p>
<pre><code>$ cat .ssh/config
Host ssh-via-http
        Hostname ssh-server
        Port 22
        ProxyCommand socat - PROXY:http-server:%h:%p,proxyport=80
        ServerAliveInterval 30</code></pre>
<p>Using the above <code>$ ssh ssh-via-http</code> command is enough to use port <code>80</code>
to connect to <code>SSH</code>.</p>
<p>I use <code>ServerAliveInterval</code> to workaround some kind of silent idle
<code>HTTP</code> connection closure somewhere in transit: I tell <code>openssh</code>
client to send periodic probes to the server to make <code>HTTP</code> connection
look alive. That way an idle session can stay alive for longer periods
of time.</p>
<p>By default <code>httpd</code> uses default <code>TimeOut 60</code> seconds of no I/O as a
signal to close the tunnel.</p>
<h2 id="ssh-over-https">SSH over HTTPS</h2>
<p>For some reason <code>socat</code> does not support <code>HTTPS</code> proxy via <code>CONNECT</code>
method and only supports <code>HTTP</code>. A minor omission? Or I hold <code>socat</code>
wrong?</p>
<p>Luckily <code>socat</code> does support <code>TLS</code> encapsulation. <code>CONNECT</code>-based
method is easy to implement manually. I did it via one-line script:</p>
<pre><code>$ cat ~/.ssh/https-tunnel.bash
#!/usr/bin/env bash
{ printf &quot;CONNECT ssh-server:22 HTTP/1.0\r\n\r\n&quot;; cat; } | socat - SSL:https-server:443</code></pre>
<p>Now we can use this script as is for <code>SSH</code> over <code>HTTPS</code> tunneling:</p>
<pre><code>$ cat .ssh/config
Host ssh-via-https
        ProxyCommand ~/.ssh/https-tunnel.bash
        # some firewalls aggressively close idle TCP connections
        ServerAliveInterval 30</code></pre>
<p>And <code>$ ssh ssh-via-https</code> does the expected thing.</p>
<p>The result allowed me to get to my home machine and write this blog post.</p>
<h2 id="parting-words">Parting words</h2>
<p>Ubiquitous presence of <code>HTTPS</code> allows you to pass your data through very
restrictive middle boxes!</p>
<p>The <code>CONNECT</code> method while seemingly being a remnant of the far past is
a useful hack to wrap any <code>TCP</code> payload stream into <code>TLS</code> host stream.</p>
<p>The <code>ServerAliveInterval</code> <code>openssh</code> knob allows you to keep the
connection alive if underlying transport is not friendly to idle
connections.</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 30, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>An obscure make --shuffle bug</title>
    <link href="http://trofi.github.io/posts/294-an-obscure-make-shuffle-bug.html" />
    <id>http://trofi.github.io/posts/294-an-obscure-make-shuffle-bug.html</id>
    <published>2023-08-11T00:00:00Z</published>
    <updated>2023-08-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Most of the time <code>make --shuffle</code> finds somewhat trivial bugs of missing
dependencies. I have collected a few examples <a href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html">here</a>.</p>
<p>It is sometimes hard, but still feasible to trigger these bugs without a
shuffle by carefully placing a few <code>sleep 10</code> calls here and there to
reorder rule execution.</p>
<p>But today I’ll talk about the bugs that could not be easily triggered by
just waiting more. Should these bugs be treats as bugs in <code>Makefile</code>s?
Or are they bugs in the <code>make --shuffle</code> permutation algorithm? You be
the judge!</p>
<h2 id="a-gist-of-the-makefile-language">A gist of the Makefile language</h2>
<p><code>Makefile</code> language is an interesting one: it has a strong spirit of a
declarative family: it should not be very important in which order you
define rules and variables in the file, the rule execution order should
not matter much either. That property makes the input very friendly to
parallelism: you can consider a <code>Makefile</code> as a form of a serialized
build graph.</p>
<p>The graph analogy holds surprisingly well for most of the build systems
out there. But sometimes you get the rare ones that are clearly
not designed to be executed in parallel. Those are also fine. We can
add <code>.NOTPARALLEL:</code> to them and be done with it.</p>
<p>If we ignore clearly unclean build systems there are a few GNU
extensions that break the graph model a bit. Things like immediate
variable assignments <code>A := B</code> are one of them.</p>
<p>For example the following <code>Makefile</code> illustrates the subtlety of
immediate and deferred assignments:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> a b</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">V</span> <span class="ch">:=</span><span class="st"> 1</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">AI</span> <span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">AD</span> <span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo a: V=</span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span><span class="fu"> AI=</span><span class="ch">$(</span><span class="dt">AI</span><span class="ch">)</span><span class="fu"> AD=</span><span class="ch">$(</span><span class="dt">AD</span><span class="ch">)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="dt">V</span> <span class="ch">:=</span><span class="st"> 2</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="dt">BI</span> <span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="dt">BD</span> <span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="dv">b:</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo b: V=</span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span><span class="fu"> BI=</span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span><span class="fu"> BD=</span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span></span></code></pre></div>
<p>Take some time time and try to predict the output here.</p>
<p>Ready now? Here is the correct answer:</p>
<pre><code>$ make
a: V=2 AI=1 AD=2
b: V=2 BI=2 BD=2</code></pre>
<p>Here both <code>V=</code> and <code>AD=</code> values are deferred until the final assignment.
This is a well-known gotcha of <code>Makefiles</code>: immediate and deferred
assignments can influence macro expansion and rule definition.</p>
<p>Immediate assignment arguably does not break declarative model too much.</p>
<p>Don’t worry just yet: <code>make --shuffle</code> does not change output of this
example.</p>
<h2 id="target-specific-variables">Target-specific variables</h2>
<p>Another <code>GNU make</code> extension is
<a href="https://www.gnu.org/software/make/manual/html_node/Target_002dspecific.html">Target-specific Variable Values</a>.</p>
<p>The typical use looks benign:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-g</span></span></code></pre></div>
<p>Here we define 2 targets: <code>foo</code> and <code>bar</code>. But for <code>foo</code> (and it’s
prerequisites) we specify <code>CFLAGS=-g</code> target-specific override.</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/1-mf.svg" /></p>
<p>For this case the execution looks like that:</p>
<pre><code>$ make
cc -g -o a.o
cc -g -o b.o
foo (a.o b.o)
cc -o c.o
cc -o d.o
bar (c.o d.o)
all</code></pre>
<p>No surprises here either: all object files needed for <code>foo</code> use
<code>CFLAGS=-g</code> override. None of the object files used by <code>bar</code> use <code>-g</code>:</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/1-mf-expanded.svg" /></p>
<p>So far so good. No ambiguities here.</p>
<p><code>make --shuffle</code> does not change this output either.</p>
<h2 id="todays-problem">Today’s problem</h2>
<p>Now, what happens if we do share an object file across the targets and
happen to use different overrides for it?</p>
<p>Here is our toy example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o shared.o</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o shared.o</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-ffoo</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fbar</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf.svg" /></p>
<p>What output do you expect here? Does <code>shared.o</code> get compiled once? Or
twice? Does it use <code>-ffoo</code> or <code>-ffbar</code>? Is it deterministic?</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-expq.svg" /></p>
<p>Take some time and come up with an answer.</p>
<h2 id="how-it-all-behaves">How it all behaves</h2>
<p>Let’s start from the simple case:</p>
<pre><code>$ make
cc -ffoo -o a.o
cc -ffoo -o b.o
cc -ffoo -o shared.o
foo (a.o b.o shared.o)
cc -fbar -o c.o
cc -fbar -o d.o
bar (c.o d.o shared.o)
all</code></pre>
<p>Here <code>shared.o</code> gets built once (it’s a single node in our build graph
after all) and it uses <code>-ffoo</code> flag.</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-expanded.svg" /></p>
<p>Now, why does it use <code>-ffoo</code> and not <code>-fbar</code>? Can you come up with a
scenario when it uses <code>-fbar</code>?</p>
<p>Apparently if you use just <code>make</code> or <code>make -j</code> you will consistently get
the same <code>cc -ffoo -o shared.o</code> command.</p>
<p>The way <code>GNU make</code> builds the graph is the topological sorting of
targets and prerequisites defined by <code>Makefile</code> syntax.</p>
<p>It is always starts with <code>a.o b.o shared.o</code> and maybe finishes with
<code>foo c.o d.o bar all</code>.</p>
<p>But there is an easy way to alter this order! Try this instead:</p>
<pre><code>$ make bar foo
cc -fbar -o c.o
cc -fbar -o d.o
cc -fbar -o shared.o
bar (c.o d.o shared.o)
cc -ffoo -o a.o
cc -ffoo -o b.o
foo (a.o b.o shared.o)</code></pre>
<p>Now <code>shared.o</code> is built with <code>-fbar</code> flag! And the same would happen if
you did a partial <code>make bar</code> build. Or if you would change <code>Makefile</code>
from <code>all: foo bar</code> to <code>all: bar foo</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,4 +1,4 @@</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="st">-all: foo bar</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="va">+all: bar foo</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        @echo all</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a> foo: a.o b.o shared.o</span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-expanded-2.svg" /></p>
<p>This is a problem. And that can be triggered by <code>make --shuffle</code>!</p>
<p>No shuffle:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j | grep -- '-o shared.o'; done | sort | uniq -c
   1000 cc -ffoo -o shared.o</code></pre>
<p>Ideal consistency. Nothing shows the problem.</p>
<p>With shuffle:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j --shuffle | grep -- '-o shared.o'; done | sort | uniq -c
    494 cc -fbar -o shared.o
    506 cc -ffoo -o shared.o</code></pre>
<p>Almost 50% perfect instability!</p>
<p>What is the correct fix here? Is it a <code>make --shuffle</code> bug to introduce
non-determinism? I would say: no, <code>Makefile</code> should be more robust in
face of target sequence passed to it.</p>
<p>How would one fix it properly? This default recursive propagation is
non-intuitive, <code>GNU make</code> provides a few keywords including <code>private</code>.
<code>private</code> makes the variable override local to specified targets and
does not recurse.</p>
<p>I suggest the following fix:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o shared.o</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o shared.o</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="dv">a.o b.o:</span><span class="dt"> </span><span class="kw">private</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-ffoo</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="dv">c.o d.o:</span><span class="dt"> </span><span class="kw">private</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fbar</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="dv">shared.o:</span><span class="dt"> </span><span class="kw">private</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fshared</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-fixed.svg" /></p>
<p>Note that here we use the new <code>-fshared</code> value to make it distinct from
the other two. Running:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j --shuffle | grep -- '-o shared.o'; done | sort | uniq -c
   1000 cc -fshared -o shared.o</code></pre>
<p>No instability!</p>
<h2 id="the-need-for-private">The need for private</h2>
<p>Is <code>private</code> really needed? In this toy example it would work the same
with and without it.</p>
<p>The troubles would start if any of <code>.o</code> files would have in
prerequisites another <code>.o</code> file, say a generator that builds header
files or some other input:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o shared.o</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o shared.o</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="dv">a.o b.o:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-ffoo</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="dv">c.o d.o:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fbar</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="dv">shared.o:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fshared</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="co"># simulate that also shared.o depends on `generated.h`</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="co"># generated by `gen` tool.</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> gen</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="dv">gen:</span><span class="dt"> gen.o</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo gen</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="dv">gen.h:</span><span class="dt"> gen</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo gen.h</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="dv">shared.o:</span><span class="dt"> gen.h</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/3-mf.svg" /></p>
<p>This time we will check what flags are passed to <code>gen.o</code>.</p>
<p>Without shuffle:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j | grep -- '-o gen.o'; done | sort | uniq -c
   1000 cc -fshared -o gen.o</code></pre>
<p>Whoops: <code>-fshared</code> got leaked into <code>gen.o</code> build, but at least it’s
consistent.</p>
<p>With <code>--shuffle</code>:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j --shuffle | grep -- '-o gen.o'; done | sort | uniq -c
    697 cc -fshared -o gen.o
    303 cc -o gen.o</code></pre>
<p>33% instability! Why it’s just 33% (and not, say, 50%) is an exercise
for the reader.</p>
<p>Adding <code>private</code> to all of <code>CFLAGS=</code> fixes the issue:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ch">$ </span>for i in `seq 1 1000`; do make -j --shuffle | grep -- <span class="st">'-o gen.o'</span>; done | sort | uniq -c</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>   1000 cc -o gen.o</span></code></pre></div>
<p>It’s not just stable: it also removes unexpected -<code>fshared</code> flag as one
would probably expect.</p>
<h2 id="the-real-world-example">The real world example</h2>
<p>The above hypothetical example is almost 1-to-1 example of what happened
to <code>efivar</code> in <a href="https://github.com/rhboot/efivar/pull/245">PR #245</a>.</p>
<p>There <code>make --shuffle</code> build occasionally failed as:</p>
<pre><code>$ gcc -Og  -g3 -Wall -Wextra  -Werror  -std=gnu11 -funsigned-char -fvisibility=hidden -specs=/build/source/src/include/gcc.specs -fno-merge-constants  -L.   -Wl,--build-id -Wl,--no-allow-shlib-undefined -Wl,--no-undefined-version -Wl,-z,now -Wl,-z,muldefs -Wl,-z,relro -Wl,--fatal-warnings     -DLIBEFIVAR_VERSION=38 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -I/build/source/src/include/  -shared -Wl,-soname,libefisec.so.1 -Wl,--version-script=libefisec.map  -o libefisec.so sec.o secdb.o esl-iter.o util.o -lefivar -lefisec -ldl
ld: cannot find -lefivar: No such file or directory
collect2: error: ld returned 1 exit status
make[1]: *** [/build/source/src/include/rules.mk:38: libefisec.so] Error 1 shuffle=721268944</code></pre>
<p>Initially I thought it was just a matter of missing <code>libefivar.so</code>
dependency on <code>libefisec</code>. But Artem Klimov pointed out that those two
are not expected to depend on one another.</p>
<p>And indeed <code>Makefile</code> uses <code>LIBS</code> variable to specify dependencies:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> libefivar.so libefisec.so efisecdb </span><span class="co"># and more ...</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="dv">libefivar.so :</span><span class="dt"> LIBS</span><span class="ch">=</span><span class="st">dl</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="dv">efisecdb :</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">EFISECDB_OBJECTS</span><span class="ch">)</span><span class="dt"> | libefisec.so</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="dv">efisecdb :</span><span class="dt"> LIBS</span><span class="ch">=</span><span class="st">efivar efisec dl</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="dv">libefisec.so :</span><span class="dt"> </span><span class="co"># nothing</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/4-mf.svg" /></p>
<p>The intent of the <code>Makefile</code> is to say that <code>libefisec.so</code> has no
external <code>LIBS=</code> dependencies. But <code>LIBS=</code> override gets leaked via
<code>efisecdb : LIBS=efivar efisec dl</code> and into <code>libefisec.so</code> via
order-only dependency.</p>
<p>The fix is to add <code>private</code> keyword to prevent the <code>LIBS=...</code> leakage
from <code>efisecdb</code> into libraries in it’s prerequisite list:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/Makefile</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/Makefile</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -42,3 +42,3 @@</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a> # ...</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a> efisecdb : $(EFISECDB_OBJECTS) | libefisec.so</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="st">-efisecdb : LIBS=efivar efisec dl</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="va">+efisecdb : private LIBS=efivar efisec dl</span></span></code></pre></div>
<h2 id="parting-words">Parting words</h2>
<p><a href="https://www.gnu.org/software/make/manual/html_node/Target_002dspecific.html">Target-specific Variable Values</a>
is a tool with very sharp edges. While it allows writing very concise
build rules their recursive nature quickly get out of hand if you don’t
see the whole <code>Makefile</code> in front of you.</p>
<p>One of the mitigations is to use <code>private</code> keyword at an assignment site.</p>
<p>Another mitigation is to use different global variables for different
purposes. Individual global variables are also easier to override from
the outside.</p>
<p><code>make --shuffle</code> might be able to expose instability problems in
<code>Makefile</code>s that use target-specific variables not reproducible by
using <code>make -j</code> alone.</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 11, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Mysterious patchelf linkage bug</title>
    <link href="http://trofi.github.io/posts/293-mysterious-patchelf-linkage-bug.html" />
    <id>http://trofi.github.io/posts/293-mysterious-patchelf-linkage-bug.html</id>
    <published>2023-07-31T00:00:00Z</published>
    <updated>2023-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Today’s mystery started from <a href="https://hydra.nixos.org/build/229663092">this build failure</a>
noticed by Vladimir on <code>staging-next</code> branch of <code>nixpkgs</code>.</p>
<p>There <code>aarch64-linux</code> build
<a href="https://hydra.nixos.org/log/k9mdaj5a9rbpkc8x9hj9mw3papraamcn-patchelf-0.15.0.drv">failed</a>
to compile <code>patchelf</code> as part of <code>stdenv</code> with this mysterious error:</p>
<pre><code>Making all in src
make[1]: Entering directory '/build/patchelf-0.15.0/src'
g++ -DPACKAGE_NAME=\&quot;patchelf\&quot; -DPACKAGE_TARNAME=\&quot;patchelf\&quot; -DPACKAGE_VERSION=\&quot;0.15.0\&quot; -DPACKAGE_STRING=\&quot;patchelf\ 0.15.0\&quot; -DPACKAGE_BUGREPORT=\&quot;\&quot; -DPACKAGE_URL=\&quot;\&quot; -DPACKAGE=\&quot;patchelf\&quot; -DVERSION=\&quot;0.15.0\&quot; -I.    -Wall -std=c++17 -D_FILE_OFFSET_BITS=64     -g -O2 -c -o patchelf.o patchelf.cc
g++ -Wall -std=c++17 -D_FILE_OFFSET_BITS=64     -g -O2   -o patchelf patchelf.o  
ld: patchelf.o: in function `__gnu_cxx::__exchange_and_add(int volatile*, int)':
...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: ...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: ...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: ...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: patchelf.o: in function `__gnu_cxx::__atomic_add(int volatile*, int)':
...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:71:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: patchelf.o:...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:71:
  more undefined references to `__aarch64_ldadd4_acq_rel' follow
collect2: error: ld returned 1 exit status</code></pre>
<p>It is the <code>build.log</code> in almost all of it’s entirety. I had a small
change in <code>staging-next</code> branch which should absolutely not cause that
failure. But I was not sure (one can never be sure when it comes to the
toolchain bugs).</p>
<p><strong>Quick quiz</strong>: why does it happen? A <code>gcc</code> bug? A <code>binutils</code> bug? Wrong
library lookup paths in <code>cc-wrapper</code> or <code>ld-wrapper</code>? Or a heisenbug?</p>
<h2 id="first-hypothesis">First hypothesis</h2>
<p>I had some past experience with errors like that in recent the past
<a href="https://github.com/NixOS/nixpkgs/pull/158047">here</a> and
<a href="https://github.com/NixOS/nixpkgs/issues/201254">here</a>.</p>
<p>In both cases it was a <code>nixpkgs</code>-specific problem of mixing multiple
toolchain versions in a single <code>stdenv</code>. I expect this kind of problem
to come back from time to time until bootstrap process is changed to
avoid any mixing of toolchain versions. Thus I was looking forward to
debug yet another one of those.</p>
<p>I ran the bisect and got the
<a href="https://github.com/NixOS/nixpkgs/commit/8470989a96eb1c0e0c12c30c1b7bd7174ed9349b">Merge pull request #245550 from trofi/gcc-restore-sys-include</a>.
as the culprit.</p>
<p>My own commit! Uh-on. One of the problems is that it’s a merge commit of
the change, not the change itself. Why did bisect skip the change
itself? Why did the PR cause this failure at all? It did not make sense.
Reverting the commit on top of <code>staging-next</code> did fix the <code>patchelf</code>
linkage. Should it be the culprit then? I was about to submit the revert
and move on to less cryptic things.</p>
<p>But for some reason just before giving up I tried to run <code>--rebuild</code> on
a random “good” commit and got the <code>patchelf</code> linkage failure! That
meant the error was non-deterministic. It did not make sense.</p>
<p>On one hand <code>sys-include</code> commit above is quite relevant to the way
<code>gcc</code> bootstraps. On the other hand it is not supposed to lead to
non-deterministic failures.</p>
<p>I had to start from the first principles to see where and how linkage
process breaks.</p>
<h2 id="what-is-this-error-about">What is this error about?</h2>
<p>Let’s look at the specifics of code using atomics in <code>gcc</code>.</p>
<p><code>libstdc++</code> (<code>gcc</code>s <code>c++</code> template library) uses atomic operations in
various containers. For example <code>&lt;string&gt;</code> uses atomics to implement
copy-on-write semantics. Naturally <code>patchelf</code> uses a bit of
<code>std::string</code> as well. Thus it’s expected to use a bit of atomics like
<code>__atomic_fetch_add()</code> builtin.</p>
<p>Each architecture implements atomics in a slightly different way: some
get away with a single instruction, some require quite a bit of code.
Let’s have a look at <code>x86_64</code> and <code>aarch64</code> to see how close they are.</p>
<p>I’ll use the very <code>/nix/store/c7qmp1dgqf3hh4fjw74y2k662nmaslcy-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66</code>
source code bit from the error we saw above.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// atomic.c</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> f<span class="op">(</span><span class="dt">int</span> <span class="op">*</span> p<span class="op">,</span> <span class="dt">int</span> v<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> __atomic_fetch_add<span class="op">(</span>p<span class="op">,</span> v<span class="op">,</span> __ATOMIC_ACQ_REL<span class="op">);</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The function <code>f()</code> here atomically adds a <code>v</code> value stored at <code>p</code> and
returns some result.</p>
<p><code>x86_64</code> generates the following code:</p>
<pre><code>$ gcc -O2 -S a.c -o -
    f:
        movl         %esi, %eax
        lock xaddl   %eax, (%rdi)
        ret</code></pre>
<p>It’s literally one <code>lock xaddl</code> instruction. How about <code>aarch64</code>? Is it
as simple?</p>
<pre><code>$ aarch64-unknown-linux-gnu-gcc -O2 -S a.c -o -
        .arch armv8-a
    f:
        mov     x2, x0
        stp     x29, x30, [sp, -16]!
        mov     w0, w1
        mov     x29, sp
        mov     x1, x2
        bl      __aarch64_ldadd4_acq_rel
        ldp     x29, x30, [sp], 16
        ret</code></pre>
<p>We see a big difference here: <code>gcc</code> emits call into outside
<code>__aarch64_ldadd4_acq_rel</code> function. It’s code hides in <code>libgcc.a</code>:</p>
<pre><code>__aarch64_ldadd4_acq_rel:
   0:           bti     c
   4:           adrp    x16, 0 &lt;__aarch64_have_lse_atomics&gt;
                4: R_AARCH64_ADR_PREL_PG_HI21   __aarch64_have_lse_atomics
   8:           ldrb    w16, [x16]
                8: R_AARCH64_LDST8_ABS_LO12_NC  __aarch64_have_lse_atomics
   c:           cbz     w16, 18 &lt;__aarch64_ldadd4_acq_rel+0x18&gt;
  10:           ldaddal w0, w0, [x1]
  14:           ret
  18:           mov     w16, w0
  1c:           ldaxr   w0, [x1]
  20:           add     w17, w0, w16
  24:           stlxr   w15, w17, [x1]
  28:           cbnz    w15, 1c &lt;__aarch64_ldadd4_acq_rel+0x1c&gt;
  2c:           ret</code></pre>
<p>Quite a bit of code here as well: if CPU supports <code>ldaddal</code> then
<code>libgcc.a</code> uses that. Otherwise it falls back to
<code>ldaxr; add; stlxr; cbnz</code>.</p>
<p>This amount of code is probably the reason why the code is not inlined
by <code>gcc</code>. For comparison <code>clang</code> does something a bit different:</p>
<pre><code>$ clang -O2 -S a.c -o - -target aarch64-unknown-linux
    f:
        ldaxr   w8, [x0]
        add     w9, w8, w1
        stlxr   w10, w9, [x0]
        cbnz    w10, f
        mov     w0, w8
        ret</code></pre>
<p>Here <code>clang</code> inlined <code>ldaxr; add; stlxr; cbnz</code> and did not consider
<code>ldaddal</code> at all. If we nudge <code>gcc</code> a bit we can force it to inline
<code>ldaddal</code> with <code>-march=</code> flag:</p>
<pre><code>$ aarch64-unknown-linux-gnu-gcc -O2 -S a.c -o - -Wall -march=armv8.1-a
    f:
        ldaddal w1, w0, [x0]
        ret</code></pre>
<p>And the same for <code>clang</code>:</p>
<pre><code>$ clang -O2 -S a.c -o - -target aarch64-unknown-linux -march=armv8.1-a
    f:
        ldaddal w1, w0, [x0]
        ret</code></pre>
<p>All of the above tells us that sometimes <code>gcc</code> generates calls into
“external” libraries like <code>libgcc.a</code> (or <code>libgcc_s.so</code>) to implement
larger primitives. And this decision might depend on the backend
architecture and compiler flags.</p>
<h2 id="looking-at-the-linkage-command">Looking at the linkage command</h2>
<p>I filed <a href="https://github.com/NixOS/nixpkgs/issues/246147">the bug</a> to
start capturing important details of the bug to see how far into it I
can get.</p>
<p>First I needed to extract exact attribute failing to build on <code>aarch64</code>.</p>
<p>I added <code>boot.binfmt.emulatedSystems = [ "aarch64-linux" ];</code> to
<code>/etc/nixos/configuration.nix</code> to get <code>binfmt-misc</code> wrapper and ran a
few build commands like:</p>
<pre><code>$ nix build --no-link -f. --argstr system aarch64-linux patchelf -L</code></pre>
<p>to point at the exact failing attribute. It ended up being
<code>stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.patchelf</code>.
The attribute points right in the middle of <code>stdenv</code> bootstrap.</p>
<p>I dropped into interactive shell to poke at the exact details of build
failure against <code>good</code> and <code>bad</code> states with <code>nix develop</code>:</p>
<pre><code>$ nix develop -f. --argstr system aarch64-linux patchelf
error (ignored): error: '--arg' and '--argstr' are incompatible with flakes
$$ genericBuild
...
$$ cd src
$$ g++ -Wall -std=c++17 -D_FILE_OFFSET_BITS=64     -g -O2   -o patchelf patchelf.o
ld: patchelf.o: in function `__gnu_cxx::__exchange_and_add(int volatile*, int)':
...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
...</code></pre>
<p>Now we can check where exactly linker looks the libraries up by adding
<code>-Wl,--verbose</code>:</p>
<pre><code>$$ g++ -Wall -std=c++17 -D_FILE_OFFSET_BITS=64 -g -O2 -o patchelf patchelf.o -Wl,--verbose
...
==================================================
ld: mode aarch64linux
attempt to open ...-glibc-2.37-8/lib/crt1.o succeeded
...-glibc-2.37-8/lib/crt1.o
attempt to open ...-glibc-2.37-8/lib/crti.o succeeded
...</code></pre>
<p>Here is the diff against <code>bad</code> and <code>good</code> environments:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>$ diff -u &lt;(cat /tmp/bad | unnix) &lt;(cat /tmp/good | unnix)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="kw">--- /dev/fd/63  2023-07-30 08:26:51.561118824 +0100</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ /dev/fd/62  2023-07-30 08:26:51.561118824 +0100</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -273,6 +273,8 @@</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.so failed</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a succeeded</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a> /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="va">+(/&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a)ldadd_4_4.o</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="va">+(/&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a)lse-init.o</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a> /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/bootstrap-stage0-glibc-bootstrapFiles/lib/libgcc.so failed</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/bootstrap-stage0-glibc-bootstrapFiles/lib/libgcc.a failed</span></code></pre></div>
<p>I expected some difference in library version outputs, some order
difference in path lookups. But we see nothing like that here. The only
change is the difference in access to individual object files in
<code>libgcc.a</code>: <code>ldadd_4_4.o</code> and <code>lse-init.o</code> which we expect in both cases.</p>
<p>And on inspection of <code>libgcc.a</code> I noticed that in <code>bad</code> case it was
corrupted:</p>
<pre><code>$ nm ...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
nm: ...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a:
  malformed archive</code></pre>
<p>How did we manage to corrupt <code>libgcc.a</code>? A bit of strip log spills the
clue:</p>
<pre><code>stripping (with command strip and flags -S -p) in
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
...-xgcc-12.3.0/
lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc_eh.a
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcov.a
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbegin.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginS.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginT.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtend.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtendS.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtfastmath.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc_eh.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcov.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbegin.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginS.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginT.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtend.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtendS.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtfastmath.o</code></pre>
<p>It’s somewhat hard to read but we have <code>libgcc.a</code> twice in the list:</p>
<pre><code>...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a</code></pre>
<p>Both are the same file as <code>lib64</code> is a symlink to <code>lib</code>:</p>
<pre><code>$ ls -ld ...-xgcc-12.3.0/lib64
lrwxrwxrwx 1419 root root 3 Jan  1  1970 ...-xgcc-12.3.0/lib64 -&gt; lib</code></pre>
<h2 id="race-condition">Race condition</h2>
<p>So even if the file was stripped twice, why would it be a problem? Isn’t
<code>strip</code> idempotent in this regard?</p>
<p>It would as long as <code>strip</code> is ran sequentially. And it used to be the
case for a while. But a few weeks ago the <code>strip</code> hook was made parallel
in <a href="https://github.com/NixOS/nixpkgs/pull/207101">PR #207101</a>!</p>
<p>As a result two <code>strip</code> commands had a chance to open <code>libgcc.a</code>, strip
it and write the result back. Sometimes you are lucky and you get
something that works. But sometimes you are not so lucky and one of the
<code>stip</code> commands reads incompletely written <code>libgcc.a</code> by the previous
<code>strip</code>.</p>
<h2 id="the-fix">The fix</h2>
<p>The fix (or the workaround) is not to attemt to process the same file
twice. <a href="https://github.com/NixOS/nixpkgs/pull/246164">PR #246164</a>
implements naive form of the symlink resolution via <code>realpath</code> and
double-strip avoidance via <code>sort -u</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/build-support/setup-hooks/strip.sh</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/build-support/setup-hooks/strip.sh</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -68,6 +68,11 @@ stripDirs() {</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>         striperr=&quot;$(mktemp 'striperr.XXXXXX')&quot;</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>         # Do not strip lib/debug. This is a directory used by setup-hooks/separate-debug-info.sh.</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>         find $paths -type f -a '!' -path &quot;$prefix/lib/debug/*&quot; -print0 |</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="va">+            # Make sure we process files under symlinks only once. Otherwise</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="va">+            # 'strip` can corrupt files when writes to them in parallel:</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="va">+            #   https://github.com/NixOS/nixpkgs/issues/246147#issuecomment-1657072039</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="va">+            xargs -r -0 -n1 -- realpath -z | sort -u -z |</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>             xargs -r -0 -n1 -P &quot;$NIX_BUILD_CORES&quot; -- $cmd $stripFlags 2&gt;&quot;$striperr&quot; || exit_code=$?</span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>         # xargs exits with status code 123 if some but not all of the</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>         # processes fail. We don't care if some of the files couldn't</span></code></pre></div>
<p>Now we should generally try to strip slightly less from now on by
skipping identical files.</p>
<h2 id="parting-words">Parting words</h2>
<p>My initial guess of wrong library lookup paths was completely off. It
was another case of non-deterministic build causing major toolchain
breakage. I’m glad it was discovered so quickly after introduction.
<a href="https://github.com/NixOS/nixpkgs/pull/246164">PR #246164</a> should fix it
for good.</p>
<p>Turns out <code>clang</code> and <code>gcc</code> generate a bit different code around atomics.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 31, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Nix Expression Language non-determinism example</title>
    <link href="http://trofi.github.io/posts/292-nix-language-nondeterminism-example.html" />
    <id>http://trofi.github.io/posts/292-nix-language-nondeterminism-example.html</id>
    <published>2023-07-17T00:00:00Z</published>
    <updated>2023-07-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Today Vladimir Kryachko found a very
<a href="https://github.com/NixOS/nixpkgs/issues/244045">curious nixpkgs bug</a>!</p>
<p>Here it’s simplified version:</p>
<p>Good:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.nix'
/nix/store/6gzxax0rl0k1n3hg0s22jnj6c1c0aj3b-nix-2.15.1.drv</code></pre>
<p>Bad:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; extensions = []; in n.pkgs.nix'
error:
       … while calling the 'derivationStrict' builtin

         at /builtin/derivation.nix:9:12: (source not available)

       … while evaluating derivation 'nix-2.15.1'
         whose name attribute is located at /nix/store/21nmswlqvkpbv9ykprrf7x6hvzi5djhf-source/pkgs/stdenv/generic/make-derivation.nix:300:7

       … while evaluating attribute 'configureFlags' of derivation 'nix-2.15.1'

         at /nix/store/21nmswlqvkpbv9ykprrf7x6hvzi5djhf-source/pkgs/stdenv/generic/make-derivation.nix:358:7:

          357|       # This parameter is sometimes a string, sometimes null, and sometimes a list, yuck
          358|       configureFlags = let inherit (lib) optional elem; in
             |       ^
          359|         configureFlags

       error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>How can <code>extensions = []</code> affect anything? It should not!</p>
<p>Quick quiz: Why does crash happen? Is it a <code>nix</code> bug, <code>nixpkgs</code> bug or
neither?</p>
<h2 id="nix-expression-language">Nix Expression Language</h2>
<p><a href="https://nixos.org/manual/nix/stable/">nix package manager</a> uses
<a href="https://nixos.wiki/wiki/Overview_of_the_Nix_Language">nix expression language</a>.</p>
<p>It’s a pure (immutable values) lazy (call-by-need) dynamically typed
language. It is simple and short on builtin primitives. The simpler
expressions are usually easy to read and reason about.</p>
<p><code>nix repl</code> provides great interactive environment to poke at things:</p>
<pre><code>$ nix repl
nix-repl&gt; let a = 1; b = 2; in a + b
3

nix-repl&gt; (a: b: a + b) 1 2
3

nix-repl&gt; 1 == 2
false</code></pre>
<p>The larger expressions require some experience and care to figure out.
It has first class anonymous functions (lambdas) and attribute sets
(tables). Attribute sets are key-value pairs one can access via <code>.</code> dot
operator. Attribute sets also provide merge and other operations:</p>
<pre><code>nix-repl&gt; { a = 1; b = 2; } // { b = 4; c = 5; }
{ a = 1; b = 4; c = 5; }

nix-repl&gt; { a = 1; b = 2;}.b
2

nix-repl&gt; { a = 1; b = 2; } == { b = 2; a = 1; }
true

nix-repl&gt; { b = 2; a = 1; }
{ a = 1; b = 2; }</code></pre>
<p>They are called sets because attribute name order is not supposed to
matter.</p>
<h2 id="nix-expression-language-exceptions">Nix Expression Language Exceptions</h2>
<p>It’s so simple! What could possibly go wrong?</p>
<p>Lazy languages frequently have a special property: among other things
it’s hard to reason about code’s performance! As performance depends not
just on the code that constructs the value, but also on the code that
inspects the value.</p>
<p>It might sound like a minor optimization problem. But in practice it
allows (and even encourages) to employ lazy evaluation as a flow control
mechanism: infinite lists, partially initialized data structures and
similar techniques are ubiquitous idioms.</p>
<p>Laziness can be observed in the following example:</p>
<pre><code>nix-repl&gt; let f = x: f x; in f 1
error: stack overflow (possible infinite recursion)

nix-repl&gt; { unused = let f = x: f x; in f 1; used = 1;}.used
1

nix-repl&gt; { unused = let f = x: f x; in f 1; used = 1;}.unused
error: stack overflow (possible infinite recursion)</code></pre>
<p>Here we defined function <code>f</code> which calls itself indefinitely:
<code>f (f (f (... f (1) ) ) ... )</code> as long as we don’t try to print or access that <code>unused</code>
field with infinite recursion things work just fine.</p>
<p><code>nix expression language</code> also allows you to generate exceptions out of
pure code by constructing special values via <code>throw</code> or <code>assert</code>
keywords:</p>
<pre><code>nix-repl&gt; throw &quot;gah&quot;
error:
       … while calling the 'throw' builtin
       error: gah

nix-repl&gt; assert true; 42
42

nix-repl&gt; assert false; 42
error: assertion 'false' failed</code></pre>
<h2 id="the-actual-problem">The actual problem</h2>
<p>Apparently the above is enough to get non-deterministic evaluation!</p>
<p>The example would be a comparison of two sets with unevaluated
exceptions:</p>
<pre><code>nix-repl&gt; { a = 1; b = throw &quot;meh&quot;; } == { a = 2; b = 1; }
false

nix-repl&gt; { a = 1; b = throw &quot;meh&quot;; } == { a = 1; b = 1; }
error:
       error: meh</code></pre>
<p>Note how <code>b</code> is not causing any troubles in the first case but fails in
the second case.</p>
<p>And more: if we just rename <code>a</code> and <code>b</code> in the first case the
behaviour will change (needs an interpreter restart):</p>
<pre><code>nix-repl&gt; { b = 1; a = throw &quot;meh&quot;; } == { b = 2; a = 1; }
error:
       error: meh</code></pre>
<p>It means that comparison operator somehow orders sets internally. If
they were ordered by an attribute name it would not be too bad (the
failure would be deterministic) but still annoying: alpha
conversion (renames) causing evaluation difference in pure lazy
languages is an unexpected property.</p>
<p>Let’s drop into a one-liner evaluator. How about this one:</p>
<pre><code>$ nix-instantiate --eval -E '{ a = 1; b = throw &quot;meh&quot;; } == { a = 2; b = 1; }'
false
$ nix-instantiate --eval -E 'let b = 1; in { a = 1; b = throw &quot;meh&quot;; } == { a = 2; b = 1; }'
error:
       error: meh</code></pre>
<p>Aren’t these supposed to be literally the same thing?</p>
<p>Apparently <code>nix</code> evaluator “interns” all new symbols (immutable strings,
de-duplication mechanism) in the order it encounters them. If <code>b</code>
happens to be the first it will affect all the attribute set traversals
after it!</p>
<h2 id="the-workarounds-time">The workarounds time!</h2>
<p>So how would you work the thing around in <code>nixpkgs</code> if you already
happen to define <code>extensions</code> string early? Simple! Define also
<code>isStatic</code> symbol somewhere as well:</p>
<p>Good:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.nix'
/nix/store/6gzxax0rl0k1n3hg0s22jnj6c1c0aj3b-nix-2.15.1.drv</code></pre>
<p>Bad:</p>
<pre><code>nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; extensions = []; in n.pkgs.nix'
error:
       error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>And good again:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; isStatic = true; extensions = []; in n.pkgs.nix'
/nix/store/6gzxax0rl0k1n3hg0s22jnj6c1c0aj3b-nix-2.15.1.drv</code></pre>
<p>It’s not a very practical workaround. But I find it funny.</p>
<p>To see why it works one needs to know where the <code>extensions</code> attribute
name comes from.</p>
<p>It comes from the following <code>nixpkgs</code> code in the guts
of <code>pkgsStatic.*</code> package definitions:</p>
<pre><code>nix-instantiate --eval -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.stdenv.hostPlatform == n.pkgsStatic.stdenv.hostPlatform'
false</code></pre>
<p><code>hostPlatform</code> is a big attribute set with the main difference in
<code>isStatic</code> field:</p>
<pre><code>nix-repl&gt; pkgs.stdenv.hostPlatform.isStatic
false

nix-repl&gt; pkgsStatic.stdenv.hostPlatform.isStatic
true</code></pre>
<p>Usually that is the cutoff when we compare two attrsets. But if we add
an <code>extensions</code> into the picture:</p>
<pre><code>nix-repl&gt; pkgs.stdenv.hostPlatform.extensions
{ executable = &quot;&quot;; library = &quot;.so&quot;; sharedLibrary = &quot;.so&quot;; staticLibrary = &quot;.a&quot;; }

nix-repl&gt; pkgsStatic.stdenv.hostPlatform.extensions
{ executable = &quot;&quot;; library = &quot;.a&quot;; sharedLibrary = «error: error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>Note how <code>sharedLibrary</code> always fails to evaluate.</p>
<h2 id="how-could-we-fix-and-prevent-it">How could we fix and prevent it?</h2>
<p>I think it would be reasonable to have at least the optional mode in
<code>nix</code> evaluator to perform attrset comparisons eagerly to uncover
potential evaluation instability like that.</p>
<p>I proposed one in <a href="https://github.com/NixOS/nix/pull/8711">PR nix/8711</a>.
It manages to catch this infelicity as is:</p>
<pre><code>$ NIX_VALIDATE_EVAL_NONDETERMINISM=1 nix-instantiate --eval -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.stdenv.hostPlatform == n.pkgsStatic.stdenv.hostPlatform'
error:
...
       error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>On the <code>nixpkgs</code> side no comparable attrsets should contain any
exception values. It’s better not to include the attribute at all than
have it throw like that.</p>
<p>It would be a good idea to cut down amount of abstraction layers in
<code>lib/systems/default.nix</code> so errors would be not as cryptic for
newcomers.</p>
<h2 id="parting-words">Parting words</h2>
<p>Pure lazy evaluation has it’s own caveats and causes non-deterministic
evaluation. With luck some form of
<a href="https://github.com/NixOS/nix/pull/8711">PR nix/8711</a> will enter <code>nix</code>
and one would be able to add CI checks against such problems.</p>
<p>Otherwise local patches would have to do.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 17, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>gcc-14 bugs, pile 1</title>
    <link href="http://trofi.github.io/posts/291-gcc-14-bugs-pile-1.html" />
    <id>http://trofi.github.io/posts/291-gcc-14-bugs-pile-1.html</id>
    <published>2023-07-12T00:00:00Z</published>
    <updated>2023-07-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Around beginning og the May <code>gcc-14</code> development got opened for major
changes to be merged into <code>master</code> branch. 2 months have passed since
and I collected a “round” number of bugs: 16. Today is also a day when I
managed to build my whole system by <code>gcc-master</code> without encountering
any obvious bugs.</p>
<h2 id="summary">Summary</h2>
<p>Here is the full list of bugs I encountered in chronological order
:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR109643">ipa/109643</a>: <code>ICE</code> on <code>pkg-config</code></li>
<li><a href="https://gcc.gnu.org/PR109652">ipa/109652</a>: <code>ICE</code> on <code>valgrind</code></li>
<li><a href="https://gcc.gnu.org/PR109732">tree-optimization/109732</a>: wrong code
on <code>json</code> testsuite.</li>
<li><a href="https://gcc.gnu.org/PR109755">c++/109755</a>: imprecise warning location.</li>
<li><a href="https://gcc.gnu.org/PR110067">tree-optimization/110067</a>: wrong code
on <code>pixman</code> test suite.</li>
<li><a href="https://gcc.gnu.org/PR110228">middle-end/110228</a>: wrong code on
<code>llvm</code> JIT test suite.</li>
<li><a href="https://gcc.gnu.org/PR110271">tree-optimization/110271</a>: <code>ICE</code> on
<code>pycryptodome</code></li>
<li><a href="https://gcc.gnu.org/PR110274">target/110274</a>: wrong code on <code>highway</code>
test suite.</li>
<li><a href="https://gcc.gnu.org/PR110308">debug/110308</a>: <code>ICE</code> on <code>audiofile</code>.</li>
<li><a href="https://gcc.gnu.org/PR110332">tree-optimization/110332</a>: <code>ICE</code> on
<code>llvm</code>.</li>
<li><a href="https://gcc.gnu.org/PR110443">middle-end/110443</a>: <code>ICE</code> on <code>a52dec</code>.</li>
<li><a href="https://gcc.gnu.org/PR110515">middle-end/110515</a>: wrong code on
<code>llvm</code> <code>DWARF</code> test suite.</li>
<li><a href="https://gcc.gnu.org/PR110523">c++/110523</a>: <code>ICE</code> on <code>json</code>.</li>
<li><a href="https://gcc.gnu.org/PR110580">c++/110580</a>: rejects valid on <code>nix</code>
code.</li>
<li><a href="https://gcc.gnu.org/PR110598">c++/110598</a>: wrong code for <code>llvm</code>
<code>AMDGCN</code> test suite.</li>
<li><a href="https://gcc.gnu.org/PR110601">tree-optimization/110601</a>: <code>ICE</code> on
<code>systemd</code>.</li>
</ul>
<p>Let’s look at a few histograms.</p>
<p>Looking at the manifestation of the bug:</p>
<ul>
<li><code>ICE</code>s: 8</li>
<li><code>wrong-code</code>: 6</li>
<li><code>other</code>: 2</li>
</ul>
<p>Wrong code is almost as much as compiler crashes. Some of wrong codes
took me a while to extract from the real project. Once again robust test
suites make it so much easier to extract an example for upstream
reporting.</p>
<p>Looking at the subsystems:</p>
<ul>
<li><code>tree-optimization</code>: 5</li>
<li><code>c++</code>: 4</li>
<li><code>middle-end</code>: 3</li>
<li><code>ipa</code>: 2</li>
<li><code>debug</code>: 1</li>
<li><code>target</code>: 1</li>
</ul>
<p>Half the bugs happened in generic optimization phase (<code>tree-optimization</code>
and <code>middle-end</code>). A few bugs in <code>c++</code> frontend (mainly in tempalte
instantiation code). And only one failure was target-specific. It should
be obvious by now that I did no test <code>gcc</code> on anything besides <code>x86_64</code>
:).</p>
<h2 id="tip-of-the-day">Tip of the day</h2>
<p>When chasing wrong code generation down to a particular source file I
found the <code>#pragma GCC optimize(1)</code> injection hack to be useful:</p>
<pre><code># flip first halg to -O1
$ git grep -LF 'pragma GCC optimize' -- '**.cpp' | head -n $NUMBER |
    xargs sed '1i #pragma GCC optimize(1)' -i

# flip second half to -O1
$ git grep -LF 'pragma GCC optimize' -- '**.cpp' | tail -n +$(($NUMBER+1)) |
    xargs sed '1i #pragma GCC optimize(1)' -i</code></pre>
<p>That way I flip <code>$NUMBER</code> files down to <code>-O1</code> optimization level
(assuming it is enough to inhibit the bug from happening) and bisect it
down to a single file without <code>-O1</code> injected.</p>
<p><code>ccache</code> makes pragma addition and removal very cheap. You effectively
need to compile project only twice: with default options and with <code>-O1</code>
pragma override. The rest is a bit of linking.</p>
<h2 id="parting-words">Parting words</h2>
<p>Running <code>gcc-master</code> is still a lot of fun. I keep finding ~2 new bugs
per week on a regular basis. I did not get to fix any of them: in almost
all cases maintainers figured out the fix way before I got closer to the
culprit code in <code>gcc</code>. Maybe one day I’ll get there first :)</p>
<p><code>llvm</code> and <code>json</code> remain to be the hardest stress tests for <code>gcc</code>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 12, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Two years on NixOS</title>
    <link href="http://trofi.github.io/posts/290-two-years-on-nixos.html" />
    <id>http://trofi.github.io/posts/290-two-years-on-nixos.html</id>
    <published>2023-07-09T00:00:00Z</published>
    <updated>2023-07-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Yet another year has passed since I switched to <code>NixOS</code> as my main
desktop system. Time to look back and see how it went
(<a href="http://trofi.github.io/posts/257-a-year-on-nixos.html">2022 instance</a>).</p>
<h2 id="system-maintenance">System maintenance</h2>
<p>I did not have any problems related to package build failures for any
amount of time on <code>nixos-unstable</code>. Probably because I did a bit of
testing when changes were in <code>staging</code>.</p>
<p>I had to deal with a few fallouts around configuration changes related
to upgrades:</p>
<ul>
<li><code>fontconfig</code> font hinting default changed: </posts>.
I had to set explicit defaults to restore font rendering.</li>
<li><code>pipewire</code> configuration layout changed and I had to slightly adapt
my non-standard socket overrides: <a href="https://github.com/NixOS/nixpkgs/pull/220332#issuecomment-1480119470" class="uri">https://github.com/NixOS/nixpkgs/pull/220332#issuecomment-1480119470</a></li>
<li>I followed rename of <code>boot.tmpOn*</code> options to <code>boot.tmp.*</code>.</li>
</ul>
<p>All 3 were easy to track down and fix. It’s a bit more maintenance than
last year’s but still manageable.</p>
<h2 id="community-support">Community support</h2>
<p><code>NixOS</code> community remains to be a friendly place that welcomes
newcomers, experiments and day-to-day maintenance work. I have not seen
instances of large conflicts or abusive behaviours towards anyone.</p>
<p>I had a few chances to interact with wider community by attempting
larger-scale <code>nixpkgs</code> changes: I succeeded on one change and failed on
another change.</p>
<p>More successful change was
<a href="http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html">enabling parallel installs by default</a>.
It’s a good example of a small change with small impact that touches
most packages. I managed to speed up quite a few slow-to-install
packages without major regressions. We have 32 <code>nixpkgs</code> packages marked
with
<a href="https://github.com/search?q=repo%3ANixOS%2Fnixpkgs+%22enableParallelInstalling+%3D+false%22&amp;type=code"><code>enableParallelInstalling = false</code></a>.
The rest should install in parallel (as long as a package builds in
parallel).</p>
<p>Less successful change was the initially minor
<a href="http://trofi.github.io/posts/275-nixpkgs-bootstrap-deep-dive.html">bootstrap process change</a>.
It’s a good example of a medium change with some impact on most
packages. I successfully pushed a few small cleanups but ended up
reverting larger changes. Those exposed bugs either in changes
themselves (<code>gcc</code> bootstrap is hard) or on incorrect assumptions of
downstream packages. This change is also very hard to communicate:
people tend to dismiss finer details of the change and don’t see the
reason for a particular change. Maybe I’ll try again next year :) In any
case I learned a lot in the process!</p>
<p>I follow Matrix channels even less than I did last year as I focus a bit
more on personal and select <code>nixpkgs</code> projects.</p>
<h2 id="maintenance-model">Maintenance model</h2>
<p>I think <code>nixpkgs</code> maintenance model still holds today. There are <code>RFC</code>s
like <a href="https://github.com/NixOS/rfcs/pull/127">RFC127</a> to label
problematic packages in a more fine-grained form than just
<code>ok</code>/<code>broken</code>. Most updates are still done by a
<a href="https://github.com/NixOS/nixpkgs/graphs/contributors">robot</a>
auto-updater.</p>
<p>Looking at
<a href="https://github.com/NixOS/nixpkgs/graphs/commit-activity">commit activity</a>
<code>nixpkgs</code> gets about 1000 commits a week. That’s a lot.</p>
<h2 id="home-server-experience">Home server experience</h2>
<p>Don’t have anything to complain about here. The server required zero
maintenance from me this year as well.</p>
<p>The only thing I changed was the switch from <code>nixos-unstable</code> to direct
<code>master</code> branch from <code>nixpkgs</code> to get upstream kernel upgrades slightly
faster at the expense of local kernel build.</p>
<p>Fun fact: when I had a <a href="http://trofi.github.io/posts/280-cooling-failure.html">cooling failure</a>
on my main desktop system I switched to home server as my main machine.
It took a few config lines to turn a headless machine to wayland desktop
(and then back a week later when repair finished). As it’s an old
machine I noticed how some builds are slower than they ought to be. This
prompted me to work on
<a href="http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html">parallel installs</a>.</p>
<h2 id="local-experiments">Local experiments</h2>
<p>I switched my machine configurations to
<a href="https://nixos.wiki/wiki/Flakes">flake</a>-based configuration to have
configuration update history in a single <code>/etc/nixos</code> <code>git</code> repository.</p>
<p>While at it I also switched my desktop from <code>nixos-unstable</code> channel
directly to <code>master</code> branch to get latest kernels and <code>firefox</code> as soon
as they are available. This means a bit of local compiling from time to
time.</p>
<p>I switched from <code>i3+x11</code> to <code>wayland+sway</code> as my main desktop window
manager. This exposed minor bugs in
<a href="http://trofi.github.io/posts/265-waypipe-fixes.html">waypipe</a> and even
<a href="http://trofi.github.io/posts/268-fixing-wine-wayland-on-polaris.html">wine</a>!</p>
<h2 id="parting-words">Parting words</h2>
<p><code>NixOS</code> still works fine for me. Compared to last year I was able to do
larger projects within <code>NixOS</code> community (bootstrap, parallel builds,
closure shrinking, large package updates, …) and outside <code>NixOS</code>
community (<code>gcc</code>, <code>wayland</code>, <code>xmms2</code>, <code>ski</code>, …).</p>
<p>Give it a go if you did not yet :)</p>

<div class="info">
    Posted on July  9, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Building vanilla gcc on NixOS</title>
    <link href="http://trofi.github.io/posts/289-building-vanilla-gcc-on-nixos.html" />
    <id>http://trofi.github.io/posts/289-building-vanilla-gcc-on-nixos.html</id>
    <published>2023-07-08T00:00:00Z</published>
    <updated>2023-07-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This post’s main goal is to build unpatched vanilla <code>gcc</code> itself (and to
run it’s test suite). The focus is <code>gcc</code> development and not <code>gcc</code> usage
in <code>NixOS</code>.</p>
<h2 id="why-vanilla">Why vanilla?</h2>
<p>You might have already noticed that <code>nixpkgs</code> patches <code>gcc</code> build quite
heavily:
<a href="https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/compilers/gcc" class="uri">https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/compilers/gcc</a></p>
<p>For example as of today <a href="https://github.com/NixOS/nixpkgs/blob/84822c43fcf6787f3680868d6f63e80b69244fbe/pkgs/development/compilers/gcc/builder.sh">builder.sh</a>
takes 11KB on disk. It might not be a lot, but some changes there are
very invasive. Like interpreter injection:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="bu">declare</span> <span class="at">-a</span> <span class="va">extraLDFlags</span><span class="op">=</span><span class="va">()</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-e</span> <span class="st">&quot;</span><span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span><span class="st">/nix-support/orig-libc&quot;</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="co"># Figure out what extra flags when linking to pass to the gcc</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="co"># compilers being generated to make sure that they use our libc.</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="va">extraLDFlags</span><span class="op">=</span><span class="va">($(</span><span class="op">&lt;</span> <span class="st">&quot;</span><span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span><span class="st">/nix-support/libc-ldflags&quot;</span><span class="va">)</span> <span class="va">$(</span><span class="op">&lt;</span> <span class="st">&quot;</span><span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span><span class="st">/nix-support/libc-ldflags-before&quot;</span> <span class="kw">||</span> <span class="fu">true</span><span class="va">))</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="bu">[</span> <span class="ot">-e</span> <span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span>/nix-support/ld-set-dynamic-linker <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                <span class="va">extraLDFlags</span><span class="op">=</span>-dynamic-linker=<span class="va">$(</span><span class="op">&lt;</span> <span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span>/nix-support/dynamic-linker<span class="va">)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            <span class="cf">fi</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span></code></pre></div>
<p>On top of that <code>nixpkgs</code> packages rely on <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/cc-wrapper/default.nix">cc-wrapper</a>
features added on top. <code>cc-wrapper</code> implements features like option
passing via <code>NIX_CFLAGS_COMPILE</code>, automatic injection of non-default
paths to <code>glibc</code> headers and libraries, hardening features defaults,
slight binary renames, options mangling and many other small things.</p>
<p>Fun fact: <code>cc-wrapper</code> is 25K of extra shell code.</p>
<p>All the above makes <code>gcc</code> test suite incompatible with <code>nixpkgs</code>
patches.</p>
<p>It’s not always easy to tell if the bug is introduced by an upstream
logic or by <code>nixpkgs</code> changes.</p>
<p>It’s hard to upstream found <code>gcc</code> bugs or to work on <code>gcc</code> fixes
without the fear of being affected by downstream changes.</p>
<p>And once you have prepared an upstreamable <code>gcc</code> patch it would be nice
to run <code>gcc</code> test suite to see if the local change introduced any
regressions.</p>
<p>Wouldn’t it be nice to just build vanilla <code>gcc</code> every now and then to
see how unmodified <code>gcc</code> behaves?</p>
<h2 id="th-perfect-build">Th perfect build</h2>
<p>In an ideal world a program should be compilable by running
<code>./configure &amp;&amp; make &amp;&amp; make install</code> (or an equivalent for other build
systems).</p>
<p>In practice software frequently makes assumptions about default paths
that don’t match file system layout imposed by <code>nix</code>. For example <code>gcc</code>
assumes that system headers should be present in <code>/usr/include</code> and
<code>ELF</code> interpreter on <code>x86_64</code> should be at <code>/lib64/ld-linux-x86-64.so.2</code>.</p>
<p>“Naturally” <code>NixOS</code> provides none of these paths and stores everything
under <code>/nix/store/&lt;hash&gt;-&lt;package&gt;-&lt;version&gt;</code> to allow multiple versions
of any package to co-exist without conflicts (be it a compiler, kernel,
libc, <code>bash</code> or <code>firefox</code>).</p>
<p>Specifically there is no default <code>/usr/include</code> on <code>NixOS</code>:</p>
<pre><code>$ ls /usr/include
ls: cannot access '/usr/include': No such file or directory</code></pre>
<h2 id="fhs-wrapper">FHS wrapper</h2>
<p>Normally the <code>nixpkgs</code> packaging solution is to explicitly pass
non-default include (and library, <code>PATH</code> paths) to the <code>./configure</code>.
Or implicitly via <code>NIX_CFLAGS_COMPILE</code>.</p>
<p>But sometimes it does not work as smoothly. <code>gcc</code> is a perfect example
of a special package here. Another example is a binary-only package not
distributed in a source form (say, a game).</p>
<p>To reconcile that mismatch <code>nixpkgs</code> provides a few helpers to build a
<a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">FHS</a>
“chroot” out of <code>/nix/store/...</code> paths. Helper mounts <code>/nix/store</code> paths
into locations expected by <code>FHS</code>.</p>
<p>One of such helpers is <a href="https://nixos.org/manual/nixpkgs/stable/#sec-fhs-environments">buildFHSEnv</a>.
I’ll use it as an example.</p>
<p>To get started let’s create <code>shell.nix</code> file in the current directory
and run <code>nix-shell</code> there:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="va">e</span> <span class="op">=</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  pkgs.buildFHSEnv <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;gcc-git-build-env&quot;</span><span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">targetPkgs</span> <span class="op">=</span> <span class="va">ps</span><span class="op">:</span> <span class="kw">with</span> ps<span class="op">;</span> <span class="op">[</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      <span class="co"># library depends</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      gmp gmp.dev</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>      isl</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>      libffi libffi.dev</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>      libmpc</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>      libxcrypt</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>      mpfr mpfr.dev</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>      xz xz.dev</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>      zlib zlib.dev</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>      <span class="co"># git checkout need flex as they are not complete release tarballs</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>      m4</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>      bison</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>      flex</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>      texinfo</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># test harness</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>      dejagnu</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>      autogen</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>      <span class="co"># valgrind annotations</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>      valgrind valgrind.dev</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>      <span class="co"># toolchain itself</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>      gcc</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>      stdenv.cc</span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>      stdenv.cc.libc stdenv.cc.libc_dev</span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> e.env</span></code></pre></div>
<p>Running:</p>
<pre><code>$ nix-shell
$$ ls /usr/include/
aio.h        endian.h           glob.h          memory.h    nss.h           signal.h       uchar.h
aliases.h    envz.h             gmp.h           misc        obstack.h       sound          ucontext.h
...</code></pre>
<p>Ready! Now in that shell (and only that shell) we have <code>/usr/include</code>
(and other standard paths) populated. The implementation uses unshared
linux mount user namespaces with a few bind mounts.</p>
<p>Let’s do a full <code>gcc</code> build in that environment using naive
<code>./configure</code> flags:</p>
<pre><code>$$ git clone --depth 1 https://gcc.gnu.org/git/gcc.git
$$ mkdir gcc-build
$$ cd gcc-build
$$ ../gcc/configure --disable-multilib --prefix=$PWD/../gcc-installed
$$ make -j $(nproc)
$$ make install</code></pre>
<p>Build and install are done!</p>
<p>I had to use <code>--disable-multilib</code> as not all 32-bit libraries are
present by default. Getting multilib to work is an exercise for the
reader :)</p>
<p>Now let’s use our installed compiler as is:</p>
<pre><code>$$ printf '#include &lt;iostream&gt;\nint main() { std::cout &lt;&lt; &quot;Hello!&quot; &lt;&lt; std::endl ; }' &gt; a.cc
$$ ../gcc-installed/bin/g++ a.cc -o a
$$ ./a
./a: /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.32' not found (required by ./a)</code></pre>
<p>Almost worked. <code>gcc</code> itself did start, but produced binaries did not
embed default <code>RPATH</code> to <code>gcc</code>’s own <code>libstdc++</code> and use the (outdated)
system <code>libstdc++</code>. There are a few ways to work it around. The simplest
one is to use <code>static-libstdc++</code>:</p>
<pre><code>$$ ../gcc-installed/bin/g++ a.cc -o a -static-libstdc++
$$ ./a
Hello!</code></pre>
<p>As a bonus we can also run unmodified <code>gcc</code> test suite works as well:</p>
<pre><code>$$ make check
make[1]: Entering directory '/tmp/gcc/gcc-build'
make[2]: Entering directory '/tmp/gcc/gcc-build/fixincludes'
autogen -T ../../gcc/fixincludes/check.tpl ../../gcc/fixincludes/inclhack.def
...
Using /tmp/gcc/gcc/gcc/testsuite/lib/gcc.exp as tool init file.
Test run by slyfox on Fri Jul  7 08:34:18 2023
Native configuration is x86_64-pc-linux-gnu

                === gcc tests ===

Schedule of variations:
    unix

Running target unix
Using /usr/share/dejagnu/baseboards/unix.exp as board description file for target.
Using /usr/share/dejagnu/config/unix.exp as generic interface file for target.
Using /tmp/gcc/gcc/gcc/testsuite/config/default.exp as tool-and-target-specific interface file.
Running /tmp/gcc/gcc/gcc/testsuite/gcc.c-torture/compile/compile.exp ...
...
                === gcc Summary ===

# of expected passes            191743
# of unexpected failures        107
# of unexpected successes       19
# of expected failures          1502
# of unsupported tests          2593
...</code></pre>
<p><code>107</code> unexpected failures of <code>191743</code> performed. Not too bad!</p>
<h2 id="parting-words">Parting words</h2>
<p><code>buildFHSEnv</code> is a great workaround when one is in need of an <code>FHS</code>
layout. It helps picky packages including <code>gcc</code> itself.</p>
<p>While <code>NixOS</code> has an unusual directory structure it is flexible enough to
be able to simulate traditional layouts like FHS with a small
<code>buildFHSEnv</code> “chroot” builder. It’s useful for both development
environments and for running external binaries built against FHS linux
systems.</p>
<p>Happy hacking and have fun!</p>

<div class="info">
    Posted on July  8, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>DNS over TLS</title>
    <link href="http://trofi.github.io/posts/288-DNS-over-TLS.html" />
    <id>http://trofi.github.io/posts/288-DNS-over-TLS.html</id>
    <published>2023-06-18T00:00:00Z</published>
    <updated>2023-06-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>A few months ago I finally got optical internet connection with native
<code>IPv6</code> . This prompted me to slightly reconfigure my devices: I
abandoned <a href="https://tunnelbroker.net/">HE.net’s tunnel</a> as my <code>IPv6</code>
outlet.</p>
<p>I explored my DNS hardening as well. At first I flipped
a <code>DNSSEC</code> and <code>DNSOverTLS</code> on for <code>systemd-resolved</code> without much
thought and got it to do something. The result seemed to work.</p>
<p>Later I noticed that <code>netstat</code> takes a while to resolve local <code>IPv6</code>
addresses back to domain names: it took 10+ seconds per printed line.</p>
<p>This seems to be a reproducer:</p>
<pre><code>$ dig slyfox.uni.cx AAAA | grep -v '^;'
slyfox.uni.cx.          37      IN      AAAA    2a00:23c8:a613:101:7912:b70d:1c91:ab02

$ time dig -x 2a00:23c8:a613:101:7912:b70d:1c91:ab02
;; communications error to 127.0.0.53#53: timed out
;; communications error to 127.0.0.53#53: timed out
;; communications error to 127.0.0.53#53: timed out

; &lt;&lt;&gt;&gt; DiG 9.18.14 &lt;&lt;&gt;&gt; -x 2a00:23c8:a613:101:7912:b70d:1c91:ab02
;; global options: +cmd
;; no servers could be reached

real    0m15.028s
user    0m0.002s
sys     0m0.005s</code></pre>
<p>Reverse resolve was not only slow: it also did not return a reasonable
<code>DNS</code> response (<code>NXDOMAIN</code> or similar). This means result did not get
cached at all and subsequent run was as slow.</p>
<p>Why did slowness start happening? <code>IPv4</code>-only world with <code>HE.net</code> tunnel
had no such problems.</p>
<p>I have effectively external <code>IPv6</code> address for some internet facing
resources. They are in the same subnet as my desktop! This makes local
reverse resolution to be very slow.</p>
<p><code>systemd-resolved</code> as is does not provide detailed enough logs. I had to
<code>strace</code> it to see what <code>DNS</code> servers and protocols it talks to. Not
very convenient.</p>
<p><code>strace</code> revealed that <code>systemd-resolved</code> sends some of reverse lookup
requests to link-specific <code>DNS</code> server which happens to be my ISP router
(over <code>DoT</code> port which router does not support). Other requests are sent
to globally configured <code>DNS</code>. That was a surprise.</p>
<p>Disabling <code>DNSOverTLS=yes</code> option also did not help: the router still
did not want to resolve or forward the requests upstream.</p>
<p>On top of that <code>systemd-resolved</code> did not keep a <code>TCP</code> connection to
<code>DoT</code> servers. As a result each (even successful) resolve
takes a while due to a 3-way <code>TCP</code> (and <code>TLS</code>?) handshake. This adds
about 10ms to each uncached query.</p>
<p>I wanted a bit more flexibility where my <code>DNS</code> requests go. Thus I
switched over to a familiar <code>unbound</code> package. <code>unbound</code> does keep <code>TCP</code>
connections to <code>DoT</code> servers (which makes even uncached <code>DNS</code> requests
under 10ms). Debugging story is also more straightforward: specifying
<code>verbosity: ...</code> parameter in the config is enough to see what is being
resolved and how forwards happen.</p>
<p>On <code>NixOS</code> the naive switch to <code>unbound</code> is a few lines of service
setup:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Slow at resolving reverse loopups for IPv6, like:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">#   $ dig -x 2002:...</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">resolved</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">unbound</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">settings</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>      <span class="va">forward-zone</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>          <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;.&quot;</span><span class="op">;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>          <span class="va">forward-tls-upstream</span> <span class="op">=</span> <span class="st">&quot;yes&quot;</span><span class="op">;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>          <span class="va">forward-addr</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;2001:4860:4860::8888@853#dns.google&quot;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;2001:4860:4860::8844@853#dns.google&quot;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;8.8.8.8@853#dns.google&quot;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;8.8.4.4@853#dns.google&quot;</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>          <span class="op">];</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>      <span class="op">];</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Most of “code” here is to specify <code>DoT</code>-capable recursive servers. The
above expands to the following <code>unbound</code> configuration:</p>
<pre><code>$ cat /etc/unbound/unbound.conf
server:

  access-control: 127.0.0.0/8 allow
  access-control: ::1/128 allow
  auto-trust-anchor-file: /var/lib/unbound/root.key
  chroot: &quot;&quot;
  directory: /var/lib/unbound
  do-daemonize: no
  interface: 127.0.0.1
  interface: ::1
  ip-freebind: yes
  pidfile: &quot;&quot;
  tls-cert-bundle: /etc/ssl/certs/ca-certificates.crt
  username: unbound
forward-zone:
  forward-addr: 2001:4860:4860::8888@853#dns.google
  forward-addr: 2001:4860:4860::8844@853#dns.google
  forward-addr: 8.8.8.8@853#dns.google
  forward-addr: 8.8.4.4@853#dns.google
  forward-tls-upstream: yes
  name: .
remote-control:
  control-cert-file: /var/lib/unbound/unbound_control.pem
  control-enable: no
  control-interface: 127.0.0.1
  control-interface: ::1
  control-key-file: /var/lib/unbound/unbound_control.key
  server-cert-file: /var/lib/unbound/unbound_server.pem
  server-key-file: /var/lib/unbound/unbound_server.key</code></pre>
<p>Now all my direct and reverse queries are nice and quick:</p>
<pre><code>$ time dig -x 2a00:23c8:a613:101:7912:b70d:1c91:ab02
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 6507

;; AUTHORITY SECTION:
0.a.2.ip6.arpa.         1274    IN      SOA     pri.authdns.ripe.net. dns.ripe.net. 1687019637 3600 600 864000 3600

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Sat Jun 17 22:15:27 BST 2023
;; MSG SIZE  rcvd: 161</code></pre>
<p>WARNING: do not use these settings as is until you fully understand the
implications of abandoning your default resolver. Non-exhaustive list of
things to note:</p>
<ul>
<li><p>some of local requests are forwarded to the public <code>DNS</code>: you might
need to tweak your local zones a bit more if you want to prevent
leaking our resolution requests related to machines in you network</p></li>
<li><p>all your non-local requests to to a single entity: you might now want
to send all your DNS queries to a single public <code>DNS</code> server for
privacy reasons</p></li>
<li><p><code>mDNS</code> is disabled and your local resources might stop resolving as is</p></li>
</ul>
<p>I have local workarounds for all of these. Your setup will likely be
different.</p>
<p>When picking among <code>DoT</code> public servers I was choosing between:</p>
<ul>
<li><code>Cloudflare</code>: <code>1.1.1.1</code> and similar</li>
<li><code>Google</code>: <code>8.8.8.8</code> and similar</li>
<li><code>Quad9</code> <code>9.9.9.9</code> and similar</li>
</ul>
<p>These are all for-profit companies. Your priorities might prompt you to
evaluate other <code>DoT</code>-capable servers.</p>
<p>Anyway. Of the above somehow <code>Cloudflare</code> latency is consistently 2x-3x
slower for initial <code>DoT</code> setup than the other two:</p>
<pre><code>$ dig +tls @1.1.1.1 kernel.org
;; ANSWER SECTION:
kernel.org.             100     IN      A       139.178.84.217
;; Query time: 50 msec
;; SERVER: 1.1.1.1#853(1.1.1.1) (TLS)

$ dig +tls @8.8.8.8 kernel.org
;; ANSWER SECTION:
kernel.org.             175     IN      A       139.178.84.217
;; Query time: 14 msec
;; SERVER: 8.8.8.8#853(8.8.8.8) (TLS)

$ dig +tls @9.9.9.9 kernel.org
;; ANSWER SECTION:
kernel.org.             289     IN      A       139.178.84.217
;; Query time: 19 msec
;; SERVER: 9.9.9.9#853(9.9.9.9) (TLS)</code></pre>
<p>Maybe <code>Cloudflare</code> does not have a close enough <code>TLS</code> termination near
me? <code>mtr -4 -T -P 853</code> says that both <code>1.1.1.1</code> and <code>8.8.8.8</code> are 4.5ms
away from me, while <code>9.9.9.9</code> is 9ms away from me. Non-TLS queries are
as performant <code>mtr</code>-reported values:</p>
<pre><code>$ dig @1.1.1.1 kernel.org
;; ANSWER SECTION:
kernel.org.             52      IN      A       139.178.84.217

;; Query time: 5 msec
;; SERVER: 1.1.1.1#53(1.1.1.1) (UDP)

$ dig +tcp @8.8.8.8 kernel.org
;; ANSWER SECTION:
kernel.org.             92      IN      A       139.178.84.217

;; Query time: 5 msec
;; SERVER: 8.8.8.8#53(8.8.8.8) (TCP)

$ dig +tcp @9.9.9.9 kernel.org
;; ANSWER SECTION:
kernel.org.             36      IN      A       139.178.84.217

;; Query time: 9 msec
;; SERVER: 9.9.9.9#53(9.9.9.9) (TCP)</code></pre>
<p>I settled on <code>dns.google</code> (<code>8.8.8.8</code> and backups).</p>
<h2 id="parting-words">Parting words</h2>
<p><code>systemd-resolved</code> needs a bit of handholding to make reverse resolves
to work quickly. <code>unbound</code> is a bit easier to get up and running.</p>
<p><code>DoT</code>’s latency tax is around 2-3x as it needs more RTTs supposedly for
<code>TLS</code>-related machinery. If your resolver is close enough it’s not too
bad.</p>
<p>In theory <code>DNS-over-QUIC</code> could shrink latency further down to levels of
unencrypted <code>DNS</code>. One <code>DoQ</code> gains more popularity and it’s support
gets added to <code>unbound</code>: <a href="https://github.com/NLnetLabs/unbound/issues/743" class="uri">https://github.com/NLnetLabs/unbound/issues/743</a>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on June 18, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nix and guix for Gentoo in 2023</title>
    <link href="http://trofi.github.io/posts/287-nix-and-guix-for-gentoo-in-2023.html" />
    <id>http://trofi.github.io/posts/287-nix-and-guix-for-gentoo-in-2023.html</id>
    <published>2023-05-19T00:00:00Z</published>
    <updated>2023-05-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Another year has passed since I shared anything related to
<a href="https://github.com/trofi/nix-guix-gentoo/">::nix-guix</a> Gentoo overlay.</p>
<p>As usual the overlay still ships latest <code>nix-2.15.0</code> and <code>guix-1.4.0</code>
packages.</p>
<h2 id="overlay-location-changes">Overlay location changes</h2>
<p>The overlay installation procedure
<a href="https://github.com/trofi/nix-guix-gentoo/#enabling-the-overlay">changed slightly</a>
and does not rely on <code>layman</code> or <code>eselect repository</code> anymore.</p>
<p>If you are an existing user of <code>layman</code> setup then please consider
removing and re-syncing already created overlay. It should be a matter
of running something like:</p>
<pre><code># edit /etc/portage/repos.conf/nix-guix.conf
# rm -rfv /var/db/repos/nix-guix
# emerge --sync</code></pre>
<p>Otherwise you are risking using stale overlay mirrored by Gentoo
infrastructure at <a href="https://github.com/gentoo-mirror/nix-guix" class="uri">https://github.com/gentoo-mirror/nix-guix</a>. It has
a few build problems like missing <code>gcc-13</code> fixes. They typical symptom
of using stale overlay is <code>rapidcheck</code>
<a href="https://github.com/trofi/nix-guix-gentoo/issues/35">build failure</a>:</p>
<pre><code>/var/tmp/portage/dev-cpp/rapidcheck-0_pre20230113/work/rapidcheck-0_pre20230113/include/rapidcheck/detail/Utility.h:87:8: error: 'uint64_t' does not name a type
   87 | inline uint64_t avalanche(uint64_t x) {
      |        ^~~~~~~~
/var/tmp/portage/dev-cpp/rapidcheck-0_pre20230113/work/rapidcheck-0_pre20230113/include/rapidcheck/detail/Utility.h:6:1: note: 'uint64_t' is defined in header '&lt;cstdint&gt;'; did you forget to '#include &lt;cstdint&gt;'?
    5 | #include &lt;limits&gt;
  +++ |+#include &lt;cstdint&gt;
    6 |</code></pre>
<p>It was <a href="https://github.com/trofi/nix-guix-gentoo/commit/64edf8fe00c3fb3bcfc53aeb9287a4d3fb7cc882">fixed a while ago</a>
in the overlay. Make sure you have the correct sync URL that points:
<a href="https://github.com/trofi/nix-guix-gentoo/" class="uri">https://github.com/trofi/nix-guix-gentoo/</a>.</p>
<p>I hope that the fact of use of stale URL by <code>emerge --sync</code> will be
fixed in <a href="https://bugs.gentoo.org/905869" class="uri">https://bugs.gentoo.org/905869</a>. Or at least sync errors will
be exposed to users in a more intuitive form. Removing stale broken
mirrors would be another option.</p>
<h2 id="other-changes">Other changes</h2>
<p>We had 5 overlay contributors over the past year:</p>
<pre><code>Artemis Everfree
Huang Rui
Maciej Barć
ns
Sergei Trofimovich</code></pre>
<p>People delivered various fixes and improvements:</p>
<ul>
<li>add basic support for <code>clang</code>-based system profiles</li>
<li>improve compatibility with systems where <code>/bin/sh</code> is <code>dash</code></li>
<li><code>README.md</code> installation improvements</li>
<li>dependency improvements on non-<code>amd64</code> systems</li>
<li>CI workflows to catch simple syntax errors in ebuilds</li>
<li>numerous <code>nix</code> version updates to trail latest upstream releases</li>
<li>switch from <code>user.eclass</code> to <code>acct-user.eclass</code> to allow users to
tweak default groups for builders.</li>
<li>drop <code>USE=s3</code> support on <code>nix</code> to sidestep problems dealing with stale
<code>aws-sdk-cpp</code> package</li>
<li>restore lost by accident user’s <code>CXXFLAGS=</code> support for <code>nix</code></li>
<li>document <code>ENV_UNSET</code> workaround for cases when global variables
introduce build impurity</li>
</ul>
<p>One of the items above had unusually large source of bugs.</p>
<h2 id="clang-profiles-related-bugs">clang profiles related bugs</h2>
<p>Gentoo recently added <code>clang</code>-based set of experimental profiles:</p>
<pre><code>$ eselect profile list | grep clang
  [26]  default/linux/amd64/17.1/clang (exp)
  [27]  default/linux/amd64/17.1/systemd/clang (exp)
  [28]  default/linux/amd64/17.1/systemd/clang/merged-usr (exp) *
  [33]  default/linux/amd64/17.0/musl/clang (exp)</code></pre>
<p>Of course being experimental does not stop users from trying to use the
profiles for all sorts of use cases. I found out about the profiles from
a bug report where <code>nix</code>
<a href="https://github.com/trofi/nix-guix-gentoo/issues/28">failed to build</a>
on one of them.</p>
<h3 id="missing-long-double-helpers-in-runtime-libraries">missing ‘long double’ helpers in runtime libraries</h3>
<p>The symptom was a link failure around obscure functions like
<code>__unordtf2</code>:</p>
<pre><code>ld.lld: error: undefined symbol: __unordtf2
&gt;&gt;&gt; referenced by printf_fphex.o:(__printf_fphex) in archive /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../lib64/libc.a
&gt;&gt;&gt; referenced by printf_fphex.o:(__printf_fphex) in archive /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../lib64/libc.a
&gt;&gt;&gt; referenced by printf_fp.o:(__printf_fp_l) in archive /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../lib64/libc.a</code></pre>
<p>This kind of errors only ever happens when you mix the code compiled with
<code>gcc</code> and <code>clang</code>. <code>gcc</code> sometimes emits helper functions that it
expects to satisfy with <code>libgcc.a</code>. Those symbols are usually related to
handling of non-standard types like <code>long double</code>. But otherwise could
be anything that is worth sharing by the code generator.</p>
<p>It would not normally be a problem. But <code>glibc</code> provides <code>printf()</code>
function that supports any type that compiler tries to throw at
it. And even that is not a problem: as long as building and linking is
done by the same toolchain (like for <code>libc.so.6</code>) then compiler driver
provides all the needed libraries.</p>
<p>The problem happens when compiler and linker are different
implementations. One of such cases is static linking: currently <code>glibc</code>
is built with <code>gcc</code> even on <code>clang</code> profiles in Gentoo. But the vast
majority of <code>::gentoo</code> is built with <code>clang</code> including static <code>busybox</code>.</p>
<p>As a result static linking is effectively broken on <code>clang</code> profiles
today.</p>
<p>One of the fixes would be to switch <code>glibc</code> to be built with <code>clang</code>
just like the rest of packages (I believe <code>glibc</code> upstream does support
<code>clang</code> nowadays). Another workaround would be to disable support of
those non-standard types at least in static <code>glibc</code>. Yet another one
would be to implement <code>gcc</code>-specific library calls in <code>clang</code> runtime so
both could be interchangeable. That would be the best fix if <code>clang</code>
strives to generate output binary-compatible with <code>gcc</code> output.</p>
<p>So far none of the above is implemented in Gentoo.
<a href="https://bugs.gentoo.org/899582" class="uri">https://bugs.gentoo.org/899582</a> tracks the problem.</p>
<p>Thus to make <code>nix</code> work I had to work around in statically built
<code>busybox</code> instance used by <code>nix-daemon</code> for initial build environments.</p>
<p>I took the path of supplying (unusable) stubs for missing symbols as:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co">/* Not a real implementation.</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="co"> * Just a few stubs for llvm-libunwind to be complete enough for</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co"> * busybox to be able to link against libc.a's printf().</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noreturn<span class="op">))</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> die<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> func<span class="op">)</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;</span><span class="sc">%s</span><span class="st"> not implemented.&quot;</span><span class="op">,</span> func<span class="op">);</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;Please report at https://github.com/trofi/nix-guix-gentoo/issues</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> __unordtf2 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> __letf2 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span> <span class="dt">double</span> __multf3 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span> <span class="dt">double</span> __addtf3 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Using this file as part of linkage process converts missing symbols from
link-time to run-time failures. <code>busybox</code> does not really use these
symbols thus it should be a safe hack.</p>
<p>That fixed <code>nix</code> build on <code>clang</code>-based profiles.</p>
<h3 id="guix-and-llvm-strip">guix and llvm-strip</h3>
<p>Having set up <code>clang</code>-based Gentoo chroot to explore the problem above
I ran the test for all the <code>::nix-guix</code> packages. And sure enough <code>guix</code>
failed to build as well. Except that this time the failure was a lot
more obscure:</p>
<pre><code># emerge -1 guix
...
bytevector-u8-ref: Argument 2 out of range: 185581</code></pre>
<p>Something very low-level broke in <code>guile</code> or it’s libraries.</p>
<p>I ignored the failure for a few months until I looked up if others
encountered the same error. And indeed someone did! They solved it by
disabling stripping of <code>guile</code>. It was a great hint: rebuilding all of
<code>dev-scheme/*</code> with <code>FEATURES="-splitdebug nostrip"</code> repaired <code>guix</code> for
me as well.</p>
<p><code>guile</code> uses <code>ELF</code> format to store it’s compiled bytecode in
<code>/usr/lib/guile/</code>:</p>
<pre><code>$ file /usr/lib64/guile/3.0/ccache/rnrs.go
/usr/lib64/guile/3.0/ccache/rnrs.go:
  ELF 64-bit LSB shared object,
  no machine,
  version 1 (embedded),
  dynamically linked,
  with debug_info,
  not stripped</code></pre>
<p>The caveat is that it’s a “no machine” ELF file as it has no native
code. As a result an attempt to strip these files can break their
internal structure if not done right. <code>binutils-strip</code> does not break
the files (probably by luck?). <code>llvm-strip</code> is not as lucky.</p>
<p>The workaround was to sprinkle around the change below all over the
<code>dev-scheme*/*</code> and <code>guix</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># add to dev-scheme/guile-zlib</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="fu">src_install()</span> <span class="kw">{</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>       <span class="ex">default</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>       <span class="co"># Workaround llvm-strip problem of mangling guile ELF debug</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>       <span class="co"># sections: https://bugs.gentoo.org/905898</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>       <span class="ex">dostrip</span> <span class="at">-x</span> <span class="st">&quot;/usr/</span><span class="va">$(</span><span class="ex">get_libdir</span><span class="va">)</span><span class="st">/guile&quot;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span></code></pre></div>
<p>It inhibits stripping of <code>*.go</code> files. Ideally one should not run
<code>strip</code> on object files not compatible to the default <code>strip</code> target.</p>
<p>Or <code>guile</code> could have encoded enough information for <code>llvm-strip</code> to
keep files working. Something to explore in future.</p>
<p>Disabling <code>*.go</code> stripping was enough to get <code>guix</code> running on
<code>clang</code>-based profiles.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nix</code> and <code>guix</code> can still be used in Gentoo to play with these fancy
package managers. With static linkage and stripping workarounds those
can be used in more environments now.</p>
<p>Have fun!</p>

<div class="info">
    Posted on May 19, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>From irssi to weechat</title>
    <link href="http://trofi.github.io/posts/286-from-irssi-to-weechat.html" />
    <id>http://trofi.github.io/posts/286-from-irssi-to-weechat.html</id>
    <published>2023-05-11T00:00:00Z</published>
    <updated>2023-05-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>I started using <code>IRC</code> in 2003, around the same time I started using
<code>linux</code>. My IRC client of choice was <code>xchat</code>. I had a lot of fun
adapting an <code>xmms</code> plugin for <code>xchat</code> that pastes currently playing
song to the current chat room.</p>
<p>Then I switched to <code>irssi</code>. Oldest <code>irssi</code> logs I could find is from
2007. Around the time I was switching to Gentoo as my main desktop
system. I used <code>irssi</code> ever since. I had a few trivial plugins
installed: <a href="https://github.com/irssi/scripts.irssi.org/blob/master/scripts/nickcolor.pl">nickcolor.pl</a>
and a few one-liners around <code>ChanServ</code> and <code>NickServ</code> integration.</p>
<p>A few weeks ago I noticed that <code>nickcolor.pl</code> plugin does not quite
work for some channels: when I open a chat tab for the first time (since
<code>irssi</code> startup) where the discussion is already ongoing all the
nicks get the same color. I spent some time debugging <code>nickcolor.pl</code>
and I did not manage to get it fixed. I rely on the colors a lot: I
frequent mix nicks together if they don’t look distinct enough.</p>
<p>Instead of spending more time with <code>irssi</code> I decided to look at the
console alternatives that implement nick coloring by default and are
more actively maintained. <a href="https://github.com/osa1/tiny">tiny</a> and
<a href="https://weechat.org/">weechat</a> looked most promising.</p>
<p><code>tiny</code> is written in <code>rust</code>, has a nice UI and has a bit too simplistic
<code>yaml</code> configuration for my needs. I also had an impression that
<a href="https://libera.chat/guides/certfp">CertFP</a> support was added in
<code>master</code> branch only and did not see a proper release yet.</p>
<p><code>weechat</code> is written in <code>C</code>, has UI very close to <code>irssi</code> and (to my
surprise) has even smaller amount of required dependencies than <code>irssi</code>.
It’s configs are <code>ini</code> files with many-many options. <code>weechat</code> provides
excellent builtin support for searching through config options.
<code>weechat</code> also has a spell checking capability via <code>aspell</code>!</p>
<p>I was a bit worried about vulnerability count on <code>weechat</code>s side, but
apparently <code>irssi</code> has very similar profile if we look at the types of
encountered bugs:</p>
<ul>
<li><a href="https://weechat.org/doc/weechat/security/">weechat security page</a></li>
<li><a href="https://irssi.org/security/">irssi security page</a></li>
</ul>
<p>I settled on <code>weechat</code>.</p>
<h2 id="weechat-config">weechat config</h2>
<p>Here is my full configuration so far:</p>
<pre><code>/server add libera irc.libera.chat/6697 -ssl -autoconnect
  /set irc.server.libera.ssl on
  /set irc.server.libera.ssl_verify on
  /set irc.server.libera.ssl_cert %h/certs/libera.pem
  /set irc.server.libera.sasl_mechanism external

  /set irc.server.libera.nicks ...
  /set irc.server.libera.username ...
  /set irc.server.libera.realname ...
  /set irc.server.libera.autojoin ...

/server add oftc irc.oftc.net/6697 -ssl -autoconnect

  /set irc.server.oftc.ssl on
  /set irc.server.oftc.ssl_verify on
  /set irc.server.oftc.ssl_cert %h/certs/oftc.pem

  /set irc.server.oftc.nicks ...
  /set irc.server.oftc.username ...
  /set irc.server.oftc.realname ...
  /set irc.server.oftc.autojoin ...

# don't notify on joins/leaves
/set weechat.look.buffer_notify_default message

# spell checking
/set spell.check.enabled on
/set spell.check.real_time on
/set spell.check.default_dict &quot;en,ru&quot;

# don't merge server messages from different servers
/set irc.look.server_buffer independent

# don't trigger upgency properties on terminal to avoid focus change
/set trigger.trigger.beep.enabled off

# avoid &quot;blue&quot;, too dark on my colorscheme
/set weechat.color.chat_nick_colors &quot;cyan,magenta,green,brown,lightblue,default,lightcyan,lightmagenta,lightgreen&quot;

# Filter most joins/quits/parts:
#   https://blog.weechat.org/post/2008/10/25/Smart-IRC-join-part-quit-message-filter
/set irc.look.smart_filter on
/filter add irc_smart * irc_smart_filter *

/save</code></pre>
<p>One special thing to note here is absence of
<code>/set irc.server.oftc.sasl_mechanism external</code> line if we compare <code>OFTC</code>
and <code>Libera</code> setups. Presence of <code>external</code> on <code>OFTC</code> causes connection
drops with message <code>irc: client capability: SASL not supported; irc: disconnected from server</code>.</p>
<h2 id="parting-words">Parting words</h2>
<p>After 16 years of <code>irssi</code> usage I don’t feel much discomfort switching
to <code>weechat</code>. Most of the keybindings are the same. The UI has slightly
more details that <code>irssi</code>’s. It felt overwhelming at first. But once I
read the <a href="https://weechat.org/files/doc/stable/weechat_quickstart.en.html">quickstart guide</a>
and <a href="https://weechat.org/files/doc/stable/weechat_user.en.html">user guide</a>
it became natural.</p>
<p>I have not yet ported any of my trivial plugins but it does not look
complicated at a first glance.</p>
<p>Have fun!</p>

<div class="info">
    Posted on May 11, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Zero Hydra Failures towards 23.05 NixOS release</title>
    <link href="http://trofi.github.io/posts/285-Zero-Hydra-Failures-towards-23.05-NixOS-release.html" />
    <id>http://trofi.github.io/posts/285-Zero-Hydra-Failures-towards-23.05-NixOS-release.html</id>
    <published>2023-05-10T00:00:00Z</published>
    <updated>2023-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="zhf">ZHF</h2>
<p>By the end of May <code>NixOS-23.05</code> will be released. Current development
phase is called Zero Hydra Failures: at this time the main focus is to
fix as many build failures in <code>nixpkgs/master</code> repository as possible.</p>
<p><a href="https://github.com/NixOS/nixpkgs/issues/230712">Issue #230712</a> tracks
the effort. It has hints on how to locate all known build failures.
So far there is a few thousands build failures in <code>nixpkgs/master</code>.</p>
<p><code>ZHF</code> is a great time to contribute to <code>nixpkgs</code>! Let’s pick a failed
package and try to fix it.</p>
<h2 id="libfsm-example">libfsm example</h2>
<p><a href="https://hydra.nixos.org/jobset/nixpkgs/trunk">trunk jobset</a> shows us
about ~2500 build failures. I’ll pick a obscure <code>libfsm</code>
<a href="https://hydra.nixos.org/log/1d8dcs7b47ibrn183yn0k7sj8ghiwich-libfsm-0.1pre2442_9c5095f7.drv">failure</a>
and will try to fix it. Full build log is reasonably short:</p>
<pre><code>unpacking sources
unpacking source archive /nix/store/bjdkwx4rpbqb2ny9wx7qs935b4nmslhv-source
source root is source
patching sources
configuring
no configure script, doing nothing
building
build flags: -j2 SHELL=/nix/store/ywi6kzrk88zl22jvazdnlfaf9rqrj2aq-bash-5.2-p15/bin/bash -r PREFIX=\$\(out\)
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for clean
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/init.mk&quot; line 90: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for clean
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/init.mk&quot; line 90: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/prog.mk&quot; line 140: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/final.mk&quot; line 18: Inconsistent operator for install
bmake[1]: Fatal errors encountered -- cannot continue
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/srctop.mk&quot; line 60: warning: &quot;cd /build/source &amp;&amp; MAKESYSPATH=/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk bmake -V .OBJDIR&quot; returned non-zero status
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/obj.mk&quot; line 46: Malformed conditional (${MK_AUTO_OBJ} == &quot;yes&quot;)
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/dpadd.mk&quot; line 330: Malformed conditional (${.MAKE.MODE:Mmeta*} != &quot;&quot; &amp;&amp; exists(${.MAKE.DEPENDFILE}))
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/prog.mk&quot; line 140: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/final.mk&quot; line 11: Malformed conditional (${MK_STAGING} == &quot;yes&quot;)
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/final.mk&quot; line 18: Inconsistent operator for install
bmake: Fatal errors encountered -- cannot continue
bmake: stopped in /build/source</code></pre>
<p>It’s not a big build log. And yet i’m completely clueless what goes
wrong. <a href="https://hydra.nixos.org/build/219125675">build tab</a> tells us
that last successful build of <code>libfsm</code> was around <code>2023-01-14 21:00:15</code>
on <code>3a29a0b2aa4aad61d8a80969cc8c386ad548c44c</code> <code>nixpkgs</code> input.</p>
<p>It’s enough to bisect it down to a suspicious commit. Maybe it will
provide us more clues. Bisecting <code>nixpkgs</code> using <code>$ nix build -f. libfsm</code>
as a success criteria gives us this suspect:</p>
<pre><code>commit f799d93ac179f8dd7b06d867d129fc6e7498c4fd
Date:   Sat Jan 28 23:02:19 2023 -0300

    bmake: 20220928 -&gt; 20230126

 pkgs/development/tools/build-managers/bmake/default.nix | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)</code></pre>
<p>Tracing <a href="https://github.com/NixOS/nixpkgs/commit/f799d93ac179f8dd7b06d867d129fc6e7498c4fd">commit f799d93</a>
back to a PR shows us <a href="https://github.com/NixOS/nixpkgs/pull/213276">PR #213276</a> in
the web UI. There are no comments about <code>libfsm</code> breakage.</p>
<p>Looks like <code>bmake</code> changed <code>Makefile</code> rule handling and broke something.</p>
<p><a href="https://www.crufty.net/help/sjg/bmake.html">bmake home page</a> has no
changelog and suggests using version control system directly to look for
changes. Let’s run a shortlog:</p>
<pre><code>$ cd ~/dev/git/NetBSD/src
$ git shortlog 0f816dc9b17b3e254d50e477c4594fc61580e889..f6f18f84e68de4c08aedab76898ad11129ff4cdf -- usr.bin/make | cat
christos (1):
      Accept whitespace between command specifiers @+- like gmake does. New binutils does this.

rillig (28):
      make: merge duplicate code
      tests/make: make comment in test for .for easier to understand
      make: use consistent variable names in parser
      make: constify, fix comment indentation
      make.1: clean up style, typography, accuracy
      make: document the guard for directories in unlink_file
      make: change return type of unlink_file back to int
      make.1: make horizontal and vertical spacing more consistent
      tests/make: document that the ':tl' modifier does not split words
      make.1: clarify in which case an expression may omit braces
      make: inline local macro in GNodeFlags_ToString
      make: inline LazyBuf_AddBytesBetween
      make: clean up comments
      make: clean up comments
      make: don't assemble identifiers from smaller tokens
      make.1: reduce indentation of the long list of variable names
      make.1: move description of .MAKE.MODE below the .MAKE.META block
      make.1: use consistent markup for boolean flags
      make.1: sort list of built-in variables
      make.1: sync list of built-in variables with reality
      make.1: fix markup
      make.1: bump date
      make: add more details to warning 'Extra targets ignored'
      tests/make: test backslash-newline after macro expansion in command
      tests/make: add tests for whitespace in leading '@+-'
      make: inline macro for variable name
      tests/make: remove dependency on expr(1) from a test
      tests/make: rename files that are not test cases

sjg (5):
      make: .[NO]READONLY for control of read-only variables
      make: log adjustments of var.readOnly
      Add the unit tests
      make: .SYSPATH: to add dirs to sysIncPath
      make: some variables should be read-only</code></pre>
<p>It look slike the only change that could affect <code>bmake</code> behaviour is
something around read-only variables. Before investigating more let’s
try to update <code>bmake</code> first:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/tools/build-managers/bmake/default.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/tools/build-managers/bmake/default.nix</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -10,11 +10,11 @@</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a> stdenv.mkDerivation (finalAttrs: {</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>   pname = &quot;bmake&quot;;</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="st">-  version = &quot;20230126&quot;;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="va">+  version = &quot;20230414&quot;;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>   src = fetchurl {</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>     url = &quot;http://www.crufty.net/ftp/pub/sjg/${finalAttrs.pname}-${finalAttrs.version}.tar.gz&quot;;</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="st">-    hash = &quot;sha256-hk9yGFgs95Dsc7ILcQVCXLn/ozUiJUF3LwMTMGtqC8Q=&quot;;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="va">+    hash = &quot;sha256-KcsdJqrn3p3vkr2us6rUUg6JlRzpey518LibrhuVOZ8=&quot;;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>   # Make tests work with musl</span></code></pre></div>
<p>I proposed <code>bmake</code> upate as <a href="https://github.com/NixOS/nixpkgs/pull/231027">PR #231027</a>.
Is it enough to fix <code>libfsm</code>? Trying to build:</p>
<pre><code>$ nix build -f. libfsm -L
...
libfsm&gt; bmake: &quot;/nix/store/gbbmrdcz1z7808gds3ddyf2ywi67113g-bmake-20230414/share/mk/final.mk&quot; line 11: Malformed conditional (${MK_STAGING} == &quot;yes&quot;)
libfsm&gt; bmake: &quot;/nix/store/gbbmrdcz1z7808gds3ddyf2ywi67113g-bmake-20230414/share/mk/final.mk&quot; line 18: Inconsistent operator for install
libfsm&gt; bmake: Fatal errors encountered -- cannot continue
libfsm&gt; bmake: stopped in /build/source</code></pre>
<p>No difference. Maybe <code>libfsm</code> already fixed it upstream?</p>
<p>Looking at <code>Makefile</code> <a href="https://github.com/katef/libfsm/commits/main/Makefile">project history</a>
there were a few fixes recently that fix compatibility with newer <code>bmake</code>.</p>
<p>Let’s update <code>libfsm</code> then!</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/libfsm/default.nix</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/libfsm/default.nix</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -4,13 +4,13 @@</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a> stdenv.mkDerivation rec {</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>   pname = &quot;libfsm&quot;;</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="st">-  version = &quot;0.1pre2442_${builtins.substring 0 8 src.rev}&quot;;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+  version = &quot;0.1pre2987_${builtins.substring 0 8 src.rev}&quot;;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>   src = fetchFromGitHub {</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>     owner  = &quot;katef&quot;;</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>     repo   = pname;</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="st">-    rev    = &quot;9c5095f7364fa464efff6c81fad9b60b19dfcc99&quot;;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;1bs51agvrrwqid0slq2svj2yj7kkjdsnv3xsrk8zmf1jbgza6jrm&quot;;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="va">+    rev    = &quot;087e3389ad2cd5e5c40caeb40387e632567d7258&quot;;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="va">+    hash   = &quot;sha256-XWrZxnRbMB609l+sYFf8VsXy3NxqBsBPUrHgKLIyu/I=&quot;;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>     fetchSubmodules = true;</span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>   };</span></code></pre></div>
<p>Trying to use:</p>
<pre><code>$ nix build --no-link -L -f. libfsm
...
libfsm&gt; install -m 644 build/pc/libre.pc /nix/store/v33dns98gw8mw0sqvjjp1gvjcaq0p2n2-libfsm-0.1pre2987_087e3389/share/pkgconfig/libre.pc
libfsm&gt; install: cannot stat 'build/pc/libre.pc': No such file or directory
libfsm&gt; *** [install] Error code 1</code></pre>
<p>Still fails. But at least the failure looks different enough from initial
problem. Phis looks more like a missing expected file. It’s a parallel
install failure. Disabling that I got a working package with
<a href="https://github.com/NixOS/nixpkgs/pull/231029">PR #231029</a>.</p>
<p>During the review (by running <code>nix-review pr 231029</code>) I found a similar
failure in <code>kgt</code>. It is known upstream as
<a href="https://github.com/katef/kgt/issues/62">Issue #62</a>. Fixing it is left
as an exercise for the reader.</p>
<h2 id="parting-words">Parting words</h2>
<p>We squashed at least one ZHF problem and as a bonus updated one related
package. Many build fixes are trivial. If you are wondering if you
should try or not give it a go!</p>
<p>Some rare packages are broken beyond repair and are not worth keeping
around. You can mark those as <code>broken = true;</code> and those will be cleaned
up after a while if nobody steps up to fix them.</p>
<p>Have fun!</p>

<div class="info">
    Posted on May 10, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>gcc-13 is around the corner</title>
    <link href="http://trofi.github.io/posts/284-gcc-13-is-around-the-corner.html" />
    <id>http://trofi.github.io/posts/284-gcc-13-is-around-the-corner.html</id>
    <published>2023-04-20T00:00:00Z</published>
    <updated>2023-04-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>It’s the end of April again and that means <code>gcc-13</code> will be released
very soon. Do check out <a href="https://gcc.gnu.org/gcc-13/porting_to.html">porting page</a>
to see what will likely cause problems for you on the upgrade. Most of
the issues listed there bit me over past year.</p>
<p>But that’s not the topic of this post. I kept using weekly <code>gcc</code>
snapshots of <code>master</code> branch for my desktop.</p>
<p>Since <a href="http://trofi.github.io/posts/262-a-few-more-gcc-13-bugs.html">October 2022</a> I
encountered a few new bugs. Let’s have a look at some of them.</p>
<h3 id="gori-ice">gori ICE</h3>
<p><a href="https://gcc.gnu.org/PR109274">tree-optimization/109274</a>: <code>gcc</code> <code>ICE</code>d
on <code>afdko</code>.</p>
<p>Minimal <code>afdko</code> crash:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> selfIsectPath_lo<span class="op">,</span> selfIsectPath_a<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> selfIsectPath_isecta<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> splitBez<span class="op">(</span><span class="dt">float</span> <span class="op">*</span>a<span class="op">,</span> <span class="dt">float</span> t<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">float</span> p1 <span class="op">=</span> p1<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">*</span>a <span class="op">=</span> t <span class="op">*</span> t <span class="op">-</span> p1<span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> checkSelfIsectCurve<span class="op">(</span><span class="dt">float</span> <span class="op">*</span>p2<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(*</span>p2 <span class="op">==</span> <span class="op">*</span>p2<span class="op">)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> selfIsectPath<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="dt">float</span> hi<span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>selfIsectPath_lo<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> t <span class="op">=</span> hi <span class="op">/</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    splitBez<span class="op">(&amp;</span>selfIsectPath_a<span class="op">,</span> t<span class="op">);</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    checkSelfIsectCurve<span class="op">(&amp;</span>selfIsectPath_a<span class="op">);</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>selfIsectPath_isecta<span class="op">)</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>      hi <span class="op">=</span> t<span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Triggering:</p>
<pre><code>$ gcc -O3 -c absfont_path.c.c -o a.o
during GIMPLE pass: evrp
absfont_path.c.c: In function 'selfIsectPath':
absfont_path.c.c:21:1: internal compiler error: Segmentation fault
   21 | }
      | ^
0xcb7c0f crash_signal
        gcc/toplev.cc:314
0x19682c4 range_def_chain::in_chain_p(tree_node*, tree_node*)
        gcc/gimple-range-gori.cc:126
0x19682c4 gori_compute::compute_operand_range(vrange&amp;, gimple*, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:667
0x19690d7 gori_compute::compute_operand1_range(vrange&amp;, gimple_range_op_handler&amp;, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:1174
0x1968165 gori_compute::compute_operand_range(vrange&amp;, gimple*, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:726
0x19698a7 gori_compute::compute_operand2_range(vrange&amp;, gimple_range_op_handler&amp;, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:1254
0x1969cf4 gori_compute::compute_operand1_and_operand2_range(vrange&amp;, gimple_range_op_handler&amp;, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:1274</code></pre>
<p>This is a crash in value range propagation subsystem. It’s expected to
derive various properties from comparisons and arithmetics. For example
<code>*p2 == *p2</code> is probably always true as long as you can prove that <code>*p2</code>
is not a <code>NaN</code>. Unfortunately <code>gcc</code> did not consider specifics of <code>NaN</code>
in some places and managed to <code>SIGSEGV</code> itself.</p>
<p>Andrew explained the failure in more detail in
<a href="https://gcc.gnu.org/PR109274#c12">this comment</a>.</p>
<h2 id="miscompilation-of-byte-swapping">Miscompilation of byte swapping</h2>
<p><a href="https://gcc.gnu.org/PR108064">tree-optimization/108064</a>: <code>gcc</code>
miscompiled <code>apache-arrow-cpp</code>.</p>
<p>Minimal reproducer:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">short</span> <span class="dt">int</span> i16<span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> i16 ByteSwap16<span class="op">(</span>i16 value<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">constexpr</span> <span class="kw">auto</span> m <span class="op">=</span> static_cast<span class="op">&lt;</span>i16<span class="op">&gt;(</span><span class="bn">0xff</span><span class="op">);</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> static_cast<span class="op">&lt;</span>i16<span class="op">&gt;(((</span>value <span class="op">&gt;&gt;</span> <span class="dv">8</span><span class="op">)</span> <span class="op">&amp;</span> m<span class="op">)</span> <span class="op">|</span> <span class="op">((</span>value <span class="op">&amp;</span> m<span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">8</span><span class="op">));</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noipa<span class="op">))</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> swab16<span class="op">(</span>i16 <span class="op">*</span> d<span class="op">,</span> <span class="dt">const</span> i16<span class="op">*</span> s<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">long</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">4</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    d<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> ByteSwap16<span class="op">(</span>s<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noipa<span class="op">))</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* need to alogn inputs to make sure vectized part</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co">     of the loop gets executed. */</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">alignas</span><span class="op">(</span><span class="dv">16</span><span class="op">)</span> i16 a<span class="op">[</span><span class="dv">4</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span><span class="bn">0xff</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">};</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>  <span class="kw">alignas</span><span class="op">(</span><span class="dv">16</span><span class="op">)</span> i16 b<span class="op">[</span><span class="dv">4</span><span class="op">];</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>  <span class="kw">alignas</span><span class="op">(</span><span class="dv">16</span><span class="op">)</span> i16 c<span class="op">[</span><span class="dv">4</span><span class="op">];</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>  swab16<span class="op">(</span>b<span class="op">,</span> a<span class="op">);</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>  swab16<span class="op">(</span>c<span class="op">,</span> b<span class="op">);</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* Contents of 'a' should be equivalent to 'c'.</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="co">     But gcc bug generates invalid vectored shifts.  */</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>a<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">!=</span> c<span class="op">[</span><span class="dv">0</span><span class="op">])</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    __builtin_trap<span class="op">();</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Triggering the bug:</p>
<pre><code>$ ./gcc-git/bin/g++ -O3 a.cc -o a &amp;&amp; ./a
Illegal instruction (core dumped)
$ ./gcc-git/bin/g++ -O0 a.cc -o a &amp;&amp; ./a</code></pre>
<p>This example takes an array of 4 16-bit integers and swaps bytes in it
twice. We expect to get the same result as original. But we get
something else.</p>
<p>It took me a while to extract it from <code>apache-arrow</code> test suite but I’m
glad I spent a bit of time on it. Note how I had to use <code>alignas(16)</code>
hints to make sure runtime address of arrays has a nice 16-byte aligned
boundary. Otherwise bug does not happen consistently. It’s a good hint
that vectorization is involved here.</p>
<p>If you have some familiarity in the <code>x86_64</code> assembler this snippet
shows mechanics of the bug:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">; swab16(short*, short const*):</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="bu">movq</span>   <span class="op">(%</span><span class="kw">rsi</span><span class="op">),%</span><span class="kw">xmm0</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="bu">movdqa</span> <span class="op">%</span><span class="kw">xmm0</span><span class="op">,%</span><span class="kw">xmm1</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="bu">psllw</span>  <span class="op">$</span><span class="bn">0</span>x8<span class="op">,%</span><span class="kw">xmm0</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="bu">psraw</span>  <span class="op">$</span><span class="bn">0</span>x8<span class="op">,%</span><span class="kw">xmm1</span> <span class="co">; &lt;&lt;&lt;- should be psrlw!</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="bu">por</span>    <span class="op">%</span><span class="kw">xmm1</span><span class="op">,%</span><span class="kw">xmm0</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="bu">movq</span>   <span class="op">%</span><span class="kw">xmm0</span><span class="op">,(%</span><span class="kw">rdi</span><span class="op">)</span></span></code></pre></div>
<p>If the above code does not make sense it’s explanation is:</p>
<ul>
<li>load 16 bytes of input (more than our <code>u16</code> array) into <code>xmm0</code> from
<code>rsi</code> address</li>
<li>do <code>xmm0 = ((xmm0 &lt;&lt; 8) | (xmm0 &gt;&gt; 8))</code> equivalent to achieve byte
swap</li>
<li>write 8 bytes back (exactly our <code>u16</code> array) to <code>rdi</code> address</li>
</ul>
<p>This is yet another hint at <code>gcc</code> vectorization bug where <code>swab16()</code>
loop over <code>u16</code> values was widened to loop over <code>u64</code> values.</p>
<p>The problem happens in <code>&gt;&gt;</code> where arithmetic (sign-extending) shift is
used instead of logical (zero-extending) shift.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=33be3ee36a7e2c0be383ec01b5fbc9aef39568fd">The fix</a>
is trivial: use logical shift vectorization templates of this kind.</p>
<h2 id="initializer-list-failure">initializer list failure</h2>
<p><a href="https://gcc.gnu.org/PR108071">c++/108071</a>: <code>gcc</code> failed to build
<code>clang</code>.</p>
<p>Minimal reproducer:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;initializer_list&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> OptSpecifier<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> ArrayRef <span class="op">{</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  ArrayRef<span class="op">(</span><span class="bu">std::</span>initializer_list<span class="op">&lt;</span>OptSpecifier<span class="op">&gt;);</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> OptSpecifier <span class="op">{</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">explicit</span> OptSpecifier<span class="op">(</span><span class="dt">bool</span><span class="op">);</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  OptSpecifier<span class="op">(</span><span class="dt">unsigned</span><span class="op">);</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> ArgList <span class="op">{</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> AddAllArgs<span class="op">(</span>ArrayRef<span class="op">)</span> <span class="at">const</span><span class="op">;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> <span class="op">{</span> OPT_u <span class="op">};</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Linker <span class="op">{</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> ConstructJob<span class="op">(</span><span class="at">const</span> ArgList <span class="op">&amp;)</span> <span class="at">const</span><span class="op">;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> Linker<span class="op">::</span>ConstructJob<span class="op">(</span><span class="at">const</span> ArgList <span class="op">&amp;</span>Args<span class="op">)</span> <span class="at">const</span> <span class="op">{</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>  Args<span class="op">.</span>AddAllArgs<span class="op">({</span>OPT_u<span class="op">});</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And build failure:</p>
<pre><code>$ g++ -c bug.cc.cc
bug.cc.cc: In member function 'void Linker::ConstructJob(const ArgList&amp;) const':
bug.cc.cc:19:18: error: call of overloaded 'OptSpecifier(const&lt;unnamed enum&gt;)' is ambiguous
   19 |   Args.AddAllArgs({OPT_u});
      |   ~~~~~~~~~~~~~~~^~~~~~~~~
bug.cc.cc:9:3: note: candidate: 'OptSpecifier::OptSpecifier(unsigned int)'
    9 |   OptSpecifier(unsigned);
      |   ^~~~~~~~~~~~
bug.cc.cc:8:12: note: candidate: 'OptSpecifier::OptSpecifier(bool)'
    8 |   explicit OptSpecifier(bool);
      |            ^~~~~~~~~~~~
bug.cc.cc:7:8: note: candidate: 'constexpr OptSpecifier::OptSpecifier(const OptSpecifier&amp;)'
    7 | struct OptSpecifier {
      |        ^~~~~~~~~~~~
bug.cc.cc:7:8: note: candidate: 'constexpr OptSpecifier::OptSpecifier(OptSpecifier&amp;&amp;)'</code></pre>
<p>It’s a <code>c++</code> frontend bug in handling of initializer lists. I don’t
pretend to understand <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=4ef521bbc63f8a3883d507a8b6c1f95f442df3fe">the fix</a>.
Looks like a kind of implicit conversion handling was missing there.</p>
<h2 id="more--wdangling-reference-false-positives">More -Wdangling-reference false positives</h2>
<p><a href="https://gcc.gnu.org/PR107488">c++/107488</a>: <code>cppunit</code> exposed a false
positive in recently added <code>gcc</code> warning.</p>
<p>I <a href="http://trofi.github.io/posts/264-gcc-s-new-Wdangling-reference-warning.html">saw before</a> a
few other examples of false positives in this area. Here is another one:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> attributesAsString<span class="op">(</span><span class="bu">std::</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> <span class="op">&amp;</span> v<span class="op">)</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> attributes<span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;::</span>const_iterator itAttribute <span class="op">=</span> v<span class="op">.</span>begin<span class="op">();</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span> itAttribute <span class="op">!=</span> v<span class="op">.</span>end<span class="op">()</span> <span class="op">)</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> <span class="op">&amp;</span>attribute <span class="op">=</span> <span class="op">*</span>itAttribute<span class="op">++;</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    attributes <span class="op">+=</span> attribute<span class="op">;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> attributes<span class="op">;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Triggering the warning:</p>
<pre><code>$ g++ -Werror=dangling-reference -c a.cpp.cpp -o a.o
a.cpp.cpp: In function 'int attributesAsString(std::vector&lt;int&gt;&amp;)':
a.cpp.cpp:12:16: error: possibly dangling reference to a temporary [-Werror=dangling-reference]
   12 |     const int &amp;attribute = *itAttribute++;
      |                ^~~~~~~~~
a.cpp.cpp:12:40: note: the temporary was destroyed at the end of the full expression
  'itAttribute.__gnu_cxx::__normal_iterator&lt;const int*, std::vector&lt;int&gt; &gt;::operator++(0).__gnu_cxx::__normal_iterator&lt;const int*, std::vector&lt;int&gt; &gt;::operator*()'
   12 |     const int &amp;attribute = *itAttribute++;
      |                                        ^~</code></pre>
<p>It’s a reasonable code without a chance to leak something unexpected.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=32a06ce38a38bf37db468f0e6c83520fcc221534">The fix</a>
special-cased <code>operator*()</code> as not creating short-lived temporaries.</p>
<p><a href="https://gcc.gnu.org/PR109514">c++/109514</a> was a similar case in
<code>fheroes2</code> codebase.</p>
<h2 id="fanalyzer-crash-on-bind-function">-fanalyzer crash on bind() function</h2>
<p><a href="https://gcc.gnu.org/PR107783">analyzer/107783</a>: <code>gnutls</code> triggered
<code>ICE</code> in <code>-fanalyzer</code> mode.</p>
<p>This time the reproducer is tiny:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>foo <span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> bind <span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ gcc -fanalyzer -c oerlsfmf.c
during IPA pass: analyzer
oerlsfmf.c: In function 'foo':
oerlsfmf.c:4:10: internal compiler error: in deref_rvalue, at analyzer/region-model.cc:3238
    4 |   return bind (0, 0, 0);
      |          ^~~~~~~~~~~~~~</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=12a4785c9120beeef42f1bded52cc2674e206f57">The fix</a>
corrected type annotation for <code>bind()</code> in analyzer’s model of functions
working with file descriptors.</p>
<h2 id="ice-in-implicit-type-conversions">ICE in implicit type conversions</h2>
<p><a href="https://gcc.gnu.org/PR108047">c++/108047</a>: <code>arrow-cpp</code> triggered <code>gcc</code>
<code>ICE</code>.</p>
<p>Small reproducer:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string&gt;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> format_underline<span class="op">(</span><span class="bu">std::</span>vector<span class="op">&lt;</span><span class="bu">std::</span>string<span class="op">&gt;);</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">&gt;</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> parse_key_value_pair<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> format_underline<span class="op">({</span><span class="st">&quot;&quot;</span><span class="op">});</span> <span class="op">}</span></span></code></pre></div>
<p>And the crash:</p>
<pre><code>$ g++ -c bug.cc
...
bug.cc: In function 'void parse_key_value_pair()':
bug.cc:7:51: internal compiler error:
  unexpected expression '(std::__cxx11::basic_string&lt;char&gt;)&quot;&quot;' of kind implicit_conv_expr
    7 | void parse_key_value_pair(void) { format_underline({&quot;&quot;}); }
      |                                   ~~~~~~~~~~~~~~~~^~~~~~
  diagnostic_impl(rich_location*, diagnostic_metadata const*, int, char const*, __va_list_tag (*) [1], diagnostic_t)
  internal_error(char const*, ...)
  cxx_eval_constant_expression(constexpr_ctx const*, tree_node*, value_cat, bool*, bool*, tree_node**)</code></pre>
<p>Here <code>gcc</code> could not figure out the type of constant expression in the
frontend and crashed.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=01ea66a6c56e53163d9430f4d87615d570848aa8">The fix</a>
amends it. I don’t understand it either. It has something to do with
initializer lists and templates :)</p>
<p>This was a popular failure. <code>nix</code> also <code>ICE</code>d <code>gcc</code> the same way.</p>
<h2 id="float-vectors-and-implicit-conversions">float vectors and implicit conversions</h2>
<p><a href="https://gcc.gnu.org/PR107358">c++/107358</a>: <code>gcc</code> failed to compile
<code>libjxl</code>.</p>
<p>Minimized example:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">// this works:</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> approx_scal<span class="op">(</span><span class="dt">float</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> e <span class="op">-</span> <span class="fl">124.225514990</span><span class="bu">f</span><span class="op">;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">float</span> <span class="ex">__attribute__((vector_size(4*sizeof(float)))</span><span class="op">)</span> F<span class="op">;</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">// this fails:</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>F approx_vec<span class="op">(</span>F e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> e <span class="op">-</span> <span class="fl">124.225514990</span><span class="bu">f</span><span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Did you know you can do <code>operator-()</code> against <code>float</code> vectors? I did
not. The trigger looked this way:</p>
<pre><code>$ g++ -fPIC -std=c++11 -o skcms.cc.o -c skcms.cc
skcms.cc: In function 'F approx_vec(F)':
   10 | F approx_vec(F e) {
      |                 ^
skcms.cc:11:14: error: conversion of scalar 'long double' to vector 'F' {aka '__vector(4) float'} involves truncation
   11 |     return e - 124.225514990f;
      |            ~~^~~~~~~~~~~~~~~~</code></pre>
<p>Even though all the arguments are of <code>float</code> type <code>gcc</code> pulled out
<code>double</code> conversion and failed.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=65e3274e363cb2c6bfe6b5e648916eb7696f7e2f">The fix</a>
added expected precision to the typechecker frontend.</p>
<h2 id="implicit-construction-on-assignment">implicit construction on assignment</h2>
<p><a href="https://gcc.gnu.org/PR109307">c++/109247</a>: <code>gcc</code> failed to compile
<code>webkitgtk</code>.</p>
<p>Minimal example:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;optional&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;variant&gt;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> RefGradient <span class="op">{};</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> RefPattern <span class="op">{};</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AffineTransform <span class="op">{};</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> SourceBrush <span class="op">{</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Brush <span class="op">{</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> LogicalGradient <span class="op">{</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>            RefGradient gradient<span class="op">;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>            AffineTransform spaceTransform<span class="op">;</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>variant<span class="op">&lt;</span>LogicalGradient<span class="op">,</span> RefPattern<span class="op">&gt;</span> brush<span class="op">;</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setGradient<span class="op">(</span>RefGradient <span class="op">&amp;&amp;,</span> <span class="at">const</span> AffineTransform <span class="op">&amp;</span> spaceTransform <span class="op">=</span> <span class="op">{</span> <span class="op">});</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setPattern<span class="op">(</span>RefPattern <span class="op">&amp;&amp;);</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span><span class="op">:</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>optional<span class="op">&lt;</span>Brush<span class="op">&gt;</span> <span class="va">m_brush</span><span class="op">;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> SourceBrush<span class="op">::</span>setGradient<span class="op">(</span>RefGradient<span class="op">&amp;&amp;</span> gradient<span class="op">,</span> <span class="at">const</span> AffineTransform<span class="op">&amp;</span> spaceTransform<span class="op">)</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>    <span class="va">m_brush</span> <span class="op">=</span> <span class="op">{</span> Brush<span class="op">::</span>LogicalGradient <span class="op">{</span> <span class="bu">std::</span>move<span class="op">(</span>gradient<span class="op">),</span> spaceTransform <span class="op">}</span> <span class="op">};</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-31"><a href="#cb16-31" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> SourceBrush<span class="op">::</span>setPattern<span class="op">(</span>RefPattern<span class="op">&amp;&amp;</span> pattern<span class="op">)</span></span>
<span id="cb16-32"><a href="#cb16-32" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-33"><a href="#cb16-33" aria-hidden="true" tabindex="-1"></a>    <span class="va">m_brush</span> <span class="op">=</span> <span class="op">{</span> <span class="bu">std::</span>move<span class="op">(</span>pattern<span class="op">)</span> <span class="op">};</span></span>
<span id="cb16-34"><a href="#cb16-34" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The trigger:</p>
<pre><code>$ g++ SourceBrush.cpp -c -std=c++20
SourceBrush.cpp: In member function 'void SourceBrush::setGradient(RefGradient&amp;&amp;, const AffineTransform&amp;)':
SourceBrush.cpp:28:80: error: converting to 'std::optional&lt;SourceBrush::Brush&gt;' from initializer list would use explicit constructor 'constexpr std::optional&lt;_Tp&gt;::optional(_Up&amp;&amp;) [with _Up = SourceBrush::Brush::LogicalGradient; typename std::enable_if&lt;__and_v&lt;std::__not_&lt;std::is_same&lt;std::optional&lt;_Tp&gt;, typename std::remove_cv&lt;typename std::remove_reference&lt;_Iter&gt;::type&gt;::type&gt; &gt;, std::__not_&lt;std::is_same&lt;std::in_place_t, typename std::remove_cv&lt;typename std::remove_reference&lt;_Iter&gt;::type&gt;::type&gt; &gt;, std::is_constructible&lt;_Tp, _Up&gt;, std::__not_&lt;std::is_convertible&lt;_Up, _Tp&gt; &gt; &gt;, bool&gt;::type &lt;anonymous&gt; = false; _Tp = SourceBrush::Brush]'
   28 |     m_brush = { Brush::LogicalGradient { std::move(gradient), spaceTransform } };
      |                                                                                ^</code></pre>
<p>It’s a long but straightforward error: <code>gcc</code> stopped inferring <code>Brush</code>
outer constructor. So far the consensus that it’s not a <code>gcc-13</code> bug
but a bug in previous versions of <code>gcc</code> to accept this code.</p>
<p>The fix should look like:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/SourceBrush.cpp</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/SourceBrush.cpp</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -50,10, +50,10</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a> void SourceBrush::setGradient(RefGradient&amp;&amp; gradient, const AffineTransform&amp; spaceTransform)</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="st">-     m_brush =       { Brush::LogicalGradient { std::move(gradient), spaceTransform } };</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="va">+     m_brush = Brush { Brush::LogicalGradient { std::move(gradient), spaceTransform } };</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a> void SourceBrush::setPattern(RefPattern&amp;&amp; pattern)</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="st">-     m_brush =       { std::move(pattern) };</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="va">+     m_brush = Brush { std::move(pattern) };</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<h2 id="ice-in-ipa-clone">ICE in ipa clone</h2>
<p><a href="https://gcc.gnu.org/PR108110">ipa/108110</a>: <code>gcc</code> <code>ICE</code>d on <code>minetest</code>
code.</p>
<p>The minimal example I came up with was:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> __throw_out_of_range_fmt<span class="op">(...);</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> <span class="op">*</span>_M_p<span class="op">;</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Trans_NS___cxx11_basic_string <span class="op">{</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> _M_string_length<span class="op">;</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> _M_check___pos<span class="op">;</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>  Trans_NS___cxx11_basic_string<span class="op">()</span> <span class="op">{</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">long</span> __length <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    _M_string_length <span class="op">=</span> __length<span class="op">;</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> size<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> _M_string_length<span class="op">;</span> <span class="op">}</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> foo___pos<span class="op">;</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">char</span> foo<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> _M_p<span class="op">[</span>foo___pos<span class="op">];</span> <span class="op">}</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> compare<span class="op">()</span> <span class="op">{</span> __throw_out_of_range_fmt<span class="op">(</span>_M_check___pos<span class="op">,</span> _M_string_length<span class="op">);</span> <span class="fu">__builtin_trap</span><span class="op">();</span> <span class="op">}</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> str_starts_with<span class="op">(</span>Trans_NS___cxx11_basic_string <span class="op">&amp;</span>str<span class="op">,</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>                     Trans_NS___cxx11_basic_string prefix<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>str<span class="op">.</span>size<span class="op">()</span> <span class="op">&lt;</span> prefix<span class="op">.</span>size<span class="op">())</span></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>    str<span class="op">.</span>compare<span class="op">();</span></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(;</span> prefix<span class="op">.</span>size<span class="op">();)</span> <span class="op">{</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> __trans_tmp_2 <span class="op">=</span> prefix<span class="op">.</span>foo<span class="op">();</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>__trans_tmp_2<span class="op">)</span></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>  <span class="fu">__builtin_trap</span><span class="op">();</span></span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> testStartsWith<span class="op">()</span> <span class="op">{</span></span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a>  Trans_NS___cxx11_basic_string s1<span class="op">,</span> s2<span class="op">;</span></span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a>  str_starts_with<span class="op">(</span>s1<span class="op">,</span> s2<span class="op">);</span></span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And the trigger is:</p>
<pre><code>$ g++ -Wall -Wextra  -O3  -c bug.cc
during IPA pass: inline
bug.cc: In function 'void testStartsWith()':
bug.cc:28:18: internal compiler error: in modify_call, at ipa-param-manipulation.cc:700
   28 |   str_starts_with(s1, s2);
      |   ~~~~~~~~~~~~~~~^~~~~~~~
  diagnostic_impl(rich_location*, diagnostic_metadata const*, int, char const*, __va_list_tag (*) [1], diagnostic_t)
  internal_error(char const*, ...)
  fancy_abort(char const*, int, char const*)
  ipa_param_adjustments::modify_call(cgraph_edge*, bool) [clone .cold]
  cgraph_edge::redirect_call_stmt_to_callee(cgraph_edge*)
  redirect_all_calls(copy_body_data*, basic_block_def*)
  copy_body(copy_body_data*, basic_block_def*, basic_block_def*, basic_block_def*) [clone .isra.0]
  expand_call_inline(basic_block_def*, gimple*, copy_body_data*, bitmap_head*)
  optimize_inline_calls(tree_node*)
  inline_transform(cgraph_node*)
  execute_all_ipa_transforms(bool)
  cgraph_node::expand()
  symbol_table::compile() [clone .part.0]
  symbol_table::finalize_compilation_unit()</code></pre>
<p>Here <code>gcc</code> backtrace is very clear: optimization inlined the function
call and tried to redirect the calls to resulting function after the
inline is performed. But something went wrong.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=c389991432da2bcc335a2b4fb7e502d28a6b3346">The fix</a>
enhances resolution of original function arguments to survive various
transformations so the replacement would be correct in all contexts.</p>
<h1 id="parting-words">Parting words</h1>
<p>Again, most of the <code>gcc</code> bugs were fixed within a week they were
introduced. It’s amazing.</p>
<p>While I encountered most of the bugs I reported only minority of them as
someone else already discovered them first.</p>
<p>Partly it was because I was updating weekly snapshots on Sunday nights
(when the snapshots are cut). While the bugs are introduced during the
week. As I don’t have much time to explore complicated <code>gcc</code> bugs on
weekdays it usually takes me the time until next weekend to look into
failures. That is almost 2 weeks of lag from introduction to report.
It’s not ideal for everyone: devs might have moved on to another problem
and brave users started encountering the bug in the wild.</p>
<p>To think of it I found handling snapshots a bit clunky to manage
short-lived backports locally until next snapshot is cut. It’s the very
same reason I never published snapshots as distribution packages myself
for other users: they are always slightly stale. Using <code>git</code> branches
is a bit easier.</p>
<p>I started using weekly <code>gcc</code> snapshots at the time (and not just <code>gcc</code>
from <code>git</code>) only because I did not know how to bootstrap my <code>NixOS</code>
system with <code>gcc</code> that needs <code>git</code> in its dependencies. A year has
passed and I know how to do it now! Let’s see if I’ll be able to catch
bugs faster as a result.</p>
<p>If you are feeling brave and you are ready to trace and report <code>gcc</code>
bugs like the above do consider giving unreleased versions of <code>gcc</code> a
try. You might learn a thing or two in the process.</p>
<p>The wrong-code bugs are the subtlest. These usually live for a while
until they get noticed. They take time to get extracted and understood.
But they are most rewarding to understand and to fix!</p>
<p><code>gcc-13</code> development is almost done. It will require quite a bit of
<code>#include &lt;cstdint&gt;</code> header sprinkling. My local system still has about
30 packages fixed pending upstream inclusion. I hope that official
<code>gcc-13</code> release will help upstream developers to adapt faster.</p>
<p>Looking at the bug list above the histogram of most failing subsystems
is:</p>
<ul>
<li><code>c++</code>: 5</li>
<li><code>tree-optimization</code>: 2</li>
<li><code>analyzer</code>: 1</li>
<li><code>ipa</code>: 1</li>
</ul>
<p>As I don’t get exposed to exotic arches nowadays it’s natural I don’t
see many bugs in their backends either. Thus <code>c++</code> frontend is by far
the most frequent to cause issues. And it certainly feels that way. That
is a good indicator that <code>C++</code> as a language still evolves substantially.</p>
<p>Overall <code>gcc-13</code> should be a smooth sailing similar to <code>gcc-12</code> (famous
last words).</p>
<p>As usual here is a list of notable changes for upcoming release:
<a href="https://gcc.gnu.org/gcc-13/changes.html" class="uri">https://gcc.gnu.org/gcc-13/changes.html</a></p>
<p>Have fun!</p>

<div class="info">
    Posted on April 20, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>fontconfig on 160 DPI</title>
    <link href="http://trofi.github.io/posts/283-fontconfig-on-160-DPI.html" />
    <id>http://trofi.github.io/posts/283-fontconfig-on-160-DPI.html</id>
    <published>2023-03-25T00:00:00Z</published>
    <updated>2023-03-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>If you got garbled fonts after a recent update of <code>nixos-unstable</code>
consider dropping <code>HiDPI</code> flag in your configuration. It is usually one
of these:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>hardware.video.hidpi.enable = <span class="cn">true</span>;</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>fonts.optimizeForVeryHighDPI = <span class="cn">true</span>;</span></code></pre></div>
<p>If you recently followed a rename from <code>hardware.video.hidpi.enable</code> to
<code>fonts.optimizeForVeryHighDPI</code> and your monitor is below 200 DPI you are
probably still affected.</p>
<p>If your device has a subpixel format more complicated that vertical or
horizontal RGB you might want to disable subpixel rendering entirely:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>fonts.fontconfig.subpixel.rgba = <span class="st">&quot;none&quot;</span>;</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>fonts.fontconfig.subpixel.lcdfilter = <span class="st">&quot;none&quot;</span>;</span></code></pre></div>
<p>If your fonts don’t contain reasonable hints for rasterization try
<code>freetype</code>’s <code>autohint</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>fonts.fontconfig.hinting.autohint = <span class="cn">true</span>;</span></code></pre></div>
<h2 id="the-problem">The problem</h2>
<p>A few days ago the change landed to <code>nixpkgs</code> to disable fonts
<a href="https://github.com/NixOS/nixpkgs/commit/f03716715f663f1c45056b7df450cf1b7386181b">anti-aliasing</a>
via <code>nixpkgs</code> template for <code>fontconfig</code> configuration.</p>
<p>The change claimed that on 200+ DPI monitors anti-aliasing is not
detectable.</p>
<p>Unfortunately my monitor was a bit below 200 DPI and I noticed degraded
font quality after an upgrade.</p>
<p>My monitor has ~160 physical DPI which I configure as 192 DPI for
simplicity (exactly 2x scale of default 96 DPI). Typical <code>wayland</code>
clients like <code>firefox</code> and <code>alacritty</code> are smart enough to perform
actual rendering into unscaled (device pixel-perfect) surface using
2x of original font point size. The result is nice looking fonts.</p>
<h2 id="bogus-hidpi-setting">Bogus HiDPI setting</h2>
<p>So why am I even getting <code>HiDPI</code> setting then if I’m just below 200 DPI?
It used to work before. What changed?</p>
<p>The <code>hardware.video.hidpi.enable</code> flag in my
<code>/etc/nixos/hardware-configuration.nix</code> <code>NixOS</code> configuration came from
<code>NixOS</code> installer when I first installed the system:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># /etc/nixos/hardware-configuration.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Do not modify this file!  It was generated by ‘nixos-generate-config’</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co"># and may be overwritten by future invocations.  Please make changes</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co"># to /etc/nixos/configuration.nix instead.</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">lib</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="va">modulesPath</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="co"># high-resolution display</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">hardware</span>.<span class="va">video</span>.<span class="va">hidpi</span>.<span class="va">enable</span> <span class="op">=</span> lib.mkDefault <span class="cn">true</span><span class="op">;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s a small auto-generated file. The above snippet comes from this
bit of <code>perl</code> of the installer:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode perl"><code class="sourceCode perl"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># From nixos/modules/installer/tools/nixos-generate-config.pl</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># For lack of a better way to determine it, guess whether we should use a</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co"># bigger font for the console from the display mode on the first</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co"># framebuffer. A way based on the physical size/actual DPI reported by</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co"># the monitor would be nice, but I don't know how to do this without X :)</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">my</span> <span class="dt">$fb_modes_file</span> = <span class="ot">&quot;</span><span class="st">/sys/class/graphics/fb0/modes</span><span class="ot">&quot;</span>;</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> (<span class="ot">-f</span> <span class="dt">$fb_modes_file</span> &amp;&amp; <span class="ot">-r</span> <span class="dt">$fb_modes_file</span>) {</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">my</span> <span class="dt">$modes</span> = read_file(<span class="dt">$fb_modes_file</span>);</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">$modes</span> =~ <span class="ot">m/</span><span class="ch">([</span><span class="bn">0-9</span><span class="ch">]+)</span><span class="ot">x</span><span class="ch">([</span><span class="bn">0-9</span><span class="ch">]+)</span><span class="ot">/</span>;</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">my</span> <span class="dt">$console_width</span> = <span class="wa">$1</span>, <span class="kw">my</span> <span class="dt">$console_height</span> = <span class="wa">$2</span>;</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> (<span class="dt">$console_width</span> &gt; <span class="dv">1920</span>) {</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="fu">push</span> <span class="dt">@attrs</span>, <span class="ot">&quot;</span><span class="st"># high-resolution display</span><span class="ot">&quot;</span>;</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="fu">push</span> <span class="dt">@attrs</span>, <span class="ot">'</span><span class="ss">hardware.video.hidpi.enable = lib.mkDefault true;</span><span class="ot">'</span>;</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>My system has the following value:</p>
<pre><code>$ cat /sys/class/graphics/fb0/modes
U:3840x2160p-0</code></pre>
<p>Thus <code>perl</code> snippet above triggers a <code>HiDPI</code> setting based on pixel
width. Unfortunately my physical screen width is 620mm (~24 inches).
This makes it a 160 DPI screen.</p>
<p>According to the code comment <code>HiDPI</code> was enabled mainly for font size
in the kernel console and does not say much about <code>Xorg</code> or <code>wayland</code>
clients.</p>
<p>Am I supposed to regenerate that file periodically?</p>
<p><code>man nixos-generate-config</code> says that <code>hardware-configuration.nix</code> file
does not normally gets regenerated and one has to run the script after
any hardware changes are made. I don’t remember ever doing that.</p>
<p>After numerous reports around broken fonts <code>nixos-generate-config</code> was
fixed with
<a href="https://github.com/NixOS/nixpkgs/commit/4787ebf7ae2ab071389be7ff86cf38edeee7e9f8">https://github.com/NixOS/nixpkgs/pull/222236</a>.
to stop inferring (incorrectly) that option for users.</p>
<p>Thus new users’ installs should not get <code>HiDPI</code> for hardware like mine.
Yay!</p>
<h2 id="confusing-option-rename">Confusing option rename</h2>
<p>The initial change also got the other problem: it did not suggest users to
remove the option from <code>hardware-configuration.nix</code>. It suggested to
transition it to another option: <code>fonts.optimizeForVeryHighDPI</code>.</p>
<p>It feels natural for people to mechanically switch from <code>hidpi.enable</code>
to <code>fonts.optimizeForVeryHighDPI</code> assuming they have the same semantic.
Both are about <code>HiDPI</code>, right? At least that is what I did initially :)</p>
<p>No. <code>hidpi.enable</code> used to mean <code>&gt; 1920</code> width. <code>VeryHighDPI</code> means
physical 200+ DPI. If you are lucky to get into an intersection of both
(or neither) then you will not notice the change.</p>
<h2 id="actual-effect">Actual effect</h2>
<p>Given that <code>fontconfig</code> usually reads it’s configuration at program
startup I was able run the same <code>alacritty</code> application side by side
before and after the <code>fontconfig</code> change.</p>
<figure>
<img src="http://trofi.github.io/posts.data/283-fontconfig-on-160-DPI/aa-vs-no-aa.png" alt="no anti-aliasing vs anti-aliasing" />
<figcaption aria-hidden="true">no anti-aliasing vs anti-aliasing</figcaption>
</figure>
<p>Both lines feel almost the same. Can you spot the difference? The
difference is even more visible when we zoom in a bit.</p>
<p>As original <a href="https://github.com/NixOS/nixpkgs/pull/194594">PR #194594</a>
did not contain too many details I was not sure if my system was
misconfigured or the change had a bug and unintentionally degraded my
fonts.</p>
<p>My first workaround was to flip all the <code>fontconfig</code> options back on:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Fix aliasing until it's fixed in:</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">#   https://github.com/NixOS/nixpkgs/pull/194594</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">antialias</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">hinting</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">subpixel</span>.<span class="va">lcdfilter</span> <span class="op">=</span> <span class="st">&quot;default&quot;</span><span class="op">;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">subpixel</span>.<span class="va">rgba</span> <span class="op">=</span> <span class="st">&quot;rgb&quot;</span><span class="op">;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That allowed me to restore previous behaviour and continue the
experiments.</p>
<p>I disabled output scaling (<code>wlr-randr --output ... --scale 1</code>) and
manually set 2x font sizes in a few <code>wayland</code> applications. Nothing
changed compared to <code>--scale 2</code> (good!). Applications generated
identical font output. Bringing font anti-aliasing back restored font
look and feel.</p>
<p>I never really knew what these knobs do. I took it as an opportunity to
explore it in a bit more detail the get the idea if I still need them
and if I can do any adjustments to them.</p>
<p>I used to use similar knobs in <code>gentoo</code> as well on 96 DPI monitor and
was a happy user. The only caveat is that I was a user of <code>Terminus</code>
font in the terminals. And that is a pixel-perfect bitmap font: it always
disables anti-aliasing and subpixel rendering. For other applications
I used default fonts and occasionally <code>Comic Sans</code>. There <code>fontconfig</code>
changes did show the difference.</p>
<p>Nowadays I use <code>Liberation Mono</code> font (<code>11.5pt</code>) in <code>alacritty</code>. And it
looked reasonable until the regression.</p>
<h2 id="freetype-algorithms">Freetype algorithms</h2>
<p>So what do these options do? I found a nice visual explanation for some
of them <a href="https://mrandri19.github.io/2019/08/08/modern-text-rendering-linux-ep2.html">here</a>:</p>
<ol type="1">
<li><code>antialias</code> uses various brightness of white to simulate smoother
curves on pixel grid. Probably the most important option to get the
smooth curves. And also the source of “blurred” effect when done
wrong.</li>
<li><code>subpixel</code> rendering exploits the fact that each LCD monitors’ pixel
consists of subpixels (pixels within pixel!) of a particular color
(<code>Red</code>, <code>Green</code>, <code>Blue</code>) which you can manipulate separately.</li>
</ol>
<p>On top of that <code>freetype</code> implements a few more algorithms:</p>
<ol start="3" type="1">
<li><code>LCD</code> filtering to restore “white” color after subpixel rendering.</li>
<li>font rasterization <code>hinting</code> to coerce fonts to fit better into pixel
grid by sacrificing rasterization correctness in favour of less blur.</li>
</ol>
<h3 id="anti-aliasing">Anti-aliasing</h3>
<p><a href="https://mrandri19.github.io/2019/08/08/modern-text-rendering-linux-ep2.html">mrandri19.github.io</a>
contains the effect of both grayscale anti-aliasing and subpixel
anti-aliasing.</p>
<p>Anti-aliasing sounds straightforward: use varying brightness to simulate
smooth boundaries. As long as you can still distinguish indiviual pixels
on the monitor you will clearly see the effect. And even if you don’t
chances are that text without anti-aliasing will look less even (jumping
letter height).</p>
<h3 id="subpixel-rendering">Subpixel rendering</h3>
<p>Sub-pixel rendering is less intuitive: it relies on the fact that each
pixel in many LCD monitors contains many distinct <code>Red</code>, <code>Green</code> and
<code>Blue</code> sections in different parts of the pixel (subpixels). There are
various subpixel patterns used for different devices.</p>
<p>The simplest of is vertical <code>RGB</code>. This topology is conveyed to
<code>freetype</code> via <code>fonts.fontconfig.subpixel.rgba = "rgb";</code> <code>NixOS</code> option.</p>
<figure>
<img src="https://geometrian.com/programming/reference/subpixelzoo/square_RGB_sm.png" alt="vertical RGB from geometrian.com" />
<figcaption aria-hidden="true">vertical RGB from geometrian.com</figcaption>
</figure>
<p>In this case use of subpixel rendering increases rendering resolution 3
times! But only in horizontal dimension (and with coloring caveats).</p>
<p>Each subpixel’s intensity is set by pixel’s <code>RGB</code> values from 0 to 256.
For example you can light only 66% of the subpixel by <code>#00FFFF</code> color. It
is magic.</p>
<p>What I did not realize is that rotating your monitor 90 degrees you will
probably slightly “break” your rendering as <code>fontconfig</code> will assume the
same vertical bars. But the rotation makes it horizontal! Ideally
configuration would have to change to <code>fonts.fontconfig.subpixel.rgba = "vrgb";</code>.</p>
<p>And having two monitors setup attached to a single machine with
different rotations makes it even more interesting.</p>
<p>This also means that lossless <code>.png</code> screenshots made on a system with
one subpixel order will be rendered differently on a system with with
another subpixel order. This means that sharing screenshots might not
be very convincing to explain the rendering degradation. But the
zoom into the picture should make things less dependent on subpixels.</p>
<p>The good news is that subpixel rendering might not be as noticeable for
120+ DPI devices. At least I did not manage to to detect my subpixel
layout using <a href="http://www.lagom.nl/lcd-test/subpixel.php" class="uri">http://www.lagom.nl/lcd-test/subpixel.php</a> on any of the
monitors I had (lowest was 100 DPI).</p>
<p>Vertical RGB subpixel layout is not the only available format.
<a href="https://geometrian.com/programming/reference/subpixelzoo/index.php" class="uri">https://geometrian.com/programming/reference/subpixelzoo/index.php</a>
lists 26 formats. Some of them are rotations. But some of them use
subpixels that overlap with multiple pixels. That makes rendering even
more interesting problem. For example on some OLED displays subpixels
are a lot more complicated: <a href="https://en.wikipedia.org/wiki/PenTile_matrix_family" class="uri">https://en.wikipedia.org/wiki/PenTile_matrix_family</a>.
<code>freetype</code>’s subpixel render as a library seems to be able to handle
some formats by specifying
<a href="https://freetype.org/freetype2/docs/reference/ft2-lcd_rendering.html">subpixel geometry</a>.</p>
<p>I’m not sure <code>fontconfig</code> allows you to specify it via <code>/etc/fonts</code>.
<a href="https://gitlab.freedesktop.org/fontconfig/fontconfig/-/issues/63">Issue #63</a>
suggests there is no support for it yet. The good news is that DPI of
those devices is usually very high and subpixel details are harder to
notice.</p>
<p>This means that if your display device has something more complicated
that a form of vertical or horizontal RGB you might want to disable
subpixel rendering entirely as will not do any good.</p>
<h3 id="lcd-filtering">LCD filtering</h3>
<p>In addition to that <code>freetype</code> also implement LCD filtering to restore
“white” color after exploiting subpixels when rendering “white” font.
LCD filter once again uses knowledge of subpixel shape to restore color
balance: <a href="https://freetype.org/freetype2/docs/reference/ft2-lcd_rendering.html" class="uri">https://freetype.org/freetype2/docs/reference/ft2-lcd_rendering.html</a>.</p>
<h3 id="font-hinting">Font hinting</h3>
<p>And the last but not least is the <a href="https://en.wikipedia.org/wiki/Font_hinting" class="uri">https://en.wikipedia.org/wiki/Font_hinting</a>
which embeds hints on how to better adjust fonts to pixel grid when
rasterized. Very old TTF fonts have hints only for 640x480 monitors and
thus look awful when those hints are followed. <code>FreeType</code> implements a
few hinting algorithms. One of them ignores font hints entirely and
constructs some reasonable form itself:
<a href="https://freetype.org/autohinting/hinter.html" class="uri">https://freetype.org/autohinting/hinter.html</a>. On <code>NixOS</code> it can be
enabled with <code>fonts.fontconfig.hinting.autohint = true;</code>.</p>
<h2 id="parting-words">Parting words</h2>
<p>Fonts are hard, exciting and fun!</p>
<p>If you got garbled fonts on <code>NixOS</code> recently then try to disable
<code>hardware.video.hidpi.enable</code> and <code>fonts.optimizeForVeryHighDPI</code>
settings if you device is under 200 physical DPI. Otherwise you might
want to explore your type of LCD screen and tweak subpixel rendering:
either disable it entirely or tweak it to match hardware.</p>
<p>Text screenshots might look differently on screens of the same size if
subpixel layout differs among them (if screen is rotated or pixel
technology leads to a different layout).</p>
<p>Having spent some time tweaking fonts for this post I decided to give
<code>Roboto Mono</code> another chance. Let’s see if it will be on par with
<code>Liberation Mono</code>.</p>
<p>While at it I also enabled <code>fonts.fontconfig.hinting.autohint = true;</code>
to see if <a href="http://freetype.org/autohinting/hinter.html">autohint</a> makes
font rendering better on fonts without explicit hints for popular pixel
sizes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on March 25, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>parallel installs in nixpkgs</title>
    <link href="http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html" />
    <id>http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html</id>
    <published>2023-03-15T00:00:00Z</published>
    <updated>2023-03-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>As of a few minutes ago <code>nixpkgs</code> does parallel installs for <code>Makefile</code>
based build systems using <code>make install -j$(nproc)</code>. As long as the
packages have <code>enableParallelBuilding = true;</code>.</p>
<p>Sequential packages are unchanged and still do sequential installs.</p>
<p>You can revert to previous behaviour for your packages by using
<code>enableParallelInstalling = false;</code> if needed. But better try to fix the
issues upstream.</p>
<h2 id="more-words">More words</h2>
<p><code>Makefile</code>s are <a href="http://trofi.github.io/posts/230-when-make-j-nproc-fails.html">hard</a>. I tried
enabling parallel builds by default in <code>nixpkgs</code> and
<a href="https://github.com/NixOS/nixpkgs/issues/142338">failed</a>.
The primary rejection reason was the worry that too many packages will
break and <code>nixpkgs</code> will degrade too much. I agree those problems are
not trivial to diagnose, debug and fix. We need a better way of weeding
out the issues.</p>
<p>But I did not completely give up. I still want my “parallel-by-default”
dream to come true. I added a new <a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">make --shuffle</a>
to <code>GNU make</code> to ease reporting and validation of parallel build fixes.</p>
<p>And I’m still occasionally sending fixes for parallel build issues
upstream. I noticed others also do it time to time. That’s so nice to
see!</p>
<p>A few weeks ago my main desktop <a href="http://trofi.github.io/posts/280-cooling-failure.html">broke</a>
and I had to spend some time on my older machine that is not that fast
to compile packages. There I noticed long install phase of <code>openssl</code>
package in <code>nixpkgs</code>.</p>
<p>Quick quiz: how log do you think <code>make install</code> takes for <code>openssl</code> on
modern hardware? 1 second? 10 seconds? 1 minute? 10 minutes? 1 hour?</p>
<p>Got you your estimate?</p>
<pre><code># We can grep most recent hydra build log:
$ nix log $(nix-build -A openssl) | fgrep 'Phase completed in'

buildPhase completed in 5 minutes 0 seconds
installPhase completed in 2 minutes 9 seconds
fixupPhase completed in 41 seconds</code></pre>
<p>2 minutes! This time is comparable to the whole build phase that takes
5 minutes. Is it a lot? It really depends on what <code>installPhase</code> is
expected to do.</p>
<p>Some packages just copy one or two files into <code>$DESDIR</code>, some packages
run registration tools of sorts. It depends.</p>
<p><code>openssl</code>’s install phase builds and compresses a few hundreds of manual
pages. The tasks are expressed as <code>Makefile</code> targets and are perfect for
parallelism.</p>
<p>One could argue that these heavyweight actions belong to the build (and
not install) phase. But sometimes things are not as straightforward.</p>
<p>Apparently one of frequent examples of non-trivial install actions is
<code>libtool</code>. There binary relinking happens on installation when shared
libraries get copied (relinked!) to their final directory and binaries
are updated (also relinked!) to contain the <code>RUNPATH</code> to point to new
library location.</p>
<p>You might think that relinking phase should not take that much. But
sometimes packages consist of tens if not hundreds of libraries and
binaries. Let’s pick <code>solanum</code> <code>IRC</code> server as an example:</p>
<pre><code>$ nix log $(nix-build -A solanum) | fgrep 'Phase completed in'
configurePhase completed in 39 seconds
buildPhase completed in 1 minutes 11 seconds
installPhase completed in 1 minutes 1 seconds</code></pre>
<p>It takes almost as much time to install (and relink) the binaries as it
takes to build the package.</p>
<p>The fun thing is that both <code>openssl</code> and <code>solanum</code> use parallel builds
(<code>make -j$(pnroc)</code>) but use sequential installs! (<code>make install</code>).</p>
<p>I was very surprised to see missing parallelism in install phase. It
looked so simple to fix! If the package is already built in parallel in
<code>nixpkgs</code> then the chances are high that parallel installs would work
as well.</p>
<p>To validate the theory I passed <code>make install -j$(nproc)</code> to <code>openssl</code>
and found that the whole <code>configure / make / make install</code> process
shrunk from <code>1m54s</code> down to <code>59s</code>. It’s 2x speedup right there. Note
that <code>installPhase</code> has to have even more dramatic difference as
unchanged) build time is included into both times.</p>
<p>I quickly hacked up the <a href="https://github.com/NixOS/nixpkgs/pull/217568">PR</a>
to enable parallelism and proposed it for review.</p>
<p>Surprisingly (or not so surprisingly) not everyone was happy to see the
change. The concerns were: possible install breakages, possible
corruption on install, possibly added non-determinism, possible masking
of install-time issues by speeding install phase up.</p>
<p>To quantify the breakage concern NixOS Infra team set a one-off
<a href="https://hydra.nixos.org/jobset/nixpkgs/pr-217568-stdenv-parallel-install">pr-217568-stdenv-parallel-install</a>
hydra jobset for this change before it gets merged to any of the main
branches.</p>
<p>It <a href="https://github.com/NixOS/nixpkgs/pull/217568/commits">uncovered</a> 12
new build failures:</p>
<ul>
<li><code>net-snmp</code></li>
<li><code>xfsprogs</code></li>
<li><code>sssd</code></li>
<li><code>subversion</code></li>
<li><code>ocaml</code></li>
<li><code>eresi</code></li>
<li><code>s9fes</code></li>
<li><code>vpnc</code></li>
<li><code>asymptote</code></li>
<li><code>gretl</code></li>
<li><code>qsynth</code></li>
<li><code>solanum</code></li>
</ul>
<p>The failures are obviously parallel install failures as they failed in
<code>installPhase</code> with very obscure complains about missing files.</p>
<p>As an example <code>solanum</code> install failure is being investigated in
<a href="https://github.com/solanum-ircd/solanum/issues/405">Issue #405</a> upstream.
It’s an interesting case of <code>libtool</code>-based build system with a bunch
of recursive makefiles.</p>
<p>There are a few triggers there: source file deletion during install and
something related to unusual dependencies during install.</p>
<p>Source file deletion causes rebuild and relinking of the project during
install (ugh!).</p>
<p>Otherwise it was a very small fallout which I plugged by sprinkling
<code>enableParallelInstalling = false</code>. We might need a few more of those
workarounds as parallelism bugs sometimes take a while to surface.</p>
<h2 id="parting-words">Parting words</h2>
<p>If you suspect that package fails parallel installs in <code>nixpkgs</code> try to
add a <code>enableParallelInstalling = false;</code> as a workaround.</p>
<p><code>nixpkgs</code> made one step closer to build most packages with full
available parallelism. Packages like <code>openssl</code> already build faster in
<code>staging</code> branch of <code>nixpkgs</code>.</p>
<p>It did not take much code to enable parallel installs only for packages
that already enable parallel builds.</p>
<p>While it was a very conservative change it still broke 12 more packages.
12 is 2 orders of magnitude lower than typical amount of breakage
present in <code>master</code> (3000 to 4000 broken packages). Even if I missed a
few more cases it should be just a few cases and not thousands of new
failures.</p>
<p>If you are an upstream package owner then give parallel install a go
and try to address the install failures that arise. Here are a few hints
that might help:</p>
<ul>
<li>use <code>--shuffle</code> option for <code>GNU make 4.4</code> or later to reorder
prerequisite execution.</li>
<li>along with high parallelism also try to use low parallelism level,
like <code>-j2</code>. That gives more chance to execute only subset of
prerequisites.</li>
<li>make sure your <code>/usr/lib</code> (or other system default pah) does not
contain the libraries you are testing for relinking parallelism.
Otherwise you would not be able to reproduce the failure as relinking
will accidentally happen against the system library.</li>
</ul>
<p>It took <code>hydra</code> only 2 weeks of lowest priority to build all ~60000
<code>linux</code> packages <code>nixpkgs</code> has.</p>
<p>I have a few more thoughts on how to incrementally improve quality of
parallel builds in <code>nixpkgs</code> like enabling <code>--shuffle</code> by default.
Let’s save that for another time.</p>
<p>Have fun!</p>

<div class="info">
    Posted on March 15, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>a signal from the stars</title>
    <link href="http://trofi.github.io/posts/281-a-signal-from-the-stars.html" />
    <id>http://trofi.github.io/posts/281-a-signal-from-the-stars.html</id>
    <published>2023-03-04T00:00:00Z</published>
    <updated>2023-03-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="the-distress-beacon">The distress beacon</h2>
<p>A few days ago after another reboot into a new kernel I noticed that
disk led on my desktop started blinking incessantly even when my system
was idle:</p>
<figure>
<img src="http://trofi.github.io/posts.data/281-a-signal-from-the-stars/01-shimmer.gif" alt="suspicious shimmer" />
<figcaption aria-hidden="true">suspicious shimmer</figcaption>
</figure>
<p>I was not sure if it was a real thing caused by workload or a
glitch in the led. Flashing looked a bit too frequent for a machine that
does nothing. I was worried if it was trying to wear out my SSD as
quickly as possible.</p>
<h2 id="getting-the-clues">Getting the clues</h2>
<p>So I started debugging … a led /o\.</p>
<p>I closed all the applications including browser and window manager. I
ran <code>sync</code> to commit all the in-flight writes to disk. Disk led was
still flashing rapidly.</p>
<p>I ran <code>iotop -a</code>. It claimed there was no visible I/O happening. Does it
mean it’s just a led problem?</p>
<p>I tried heavyweight hammer and ran <code>perf ftrace</code> to see if kernel is
doing anything related to NVME:</p>
<pre><code># perf ftrace -a -T 'nvme*' | cat

# tracer: function
#
# entries-in-buffer/entries-written: 0/0   #P:16
#
#           TASK-PID     CPU#     TIMESTAMP  FUNCTION
#              | |         |         |         |
    kworker/6:1H-298     [006]   2569.645201: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.645205: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/6:1H-298     [006]   2569.749198: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.749202: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/6:1H-298     [006]   2569.853204: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.853209: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/6:1H-298     [006]   2569.958198: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.958202: nvme_setup_discard &lt;-nvme_setup_cmd</code></pre>
<p>Here we see that every 100ms kernel runs <code>nvme_setup_discard</code> function
from kernel’s <code>kworker</code> thread. These requests looked suspicious.</p>
<p>This trace was from <code>linux-6.2</code>. When I booted back to <code>linux-6.1</code> this
<code>discard</code> storm disappeared. All was quiet.</p>
<p>In case you are not familiar with SSD <code>discard</code> (or <code>trim</code>) is an
operation that gives a hint to device that a particular block of data
does not contain useful data and can be recycled for other uses.
<code>discard</code> is neither read nor write operation. That’s why <code>iotop -a</code> did
not see it.</p>
<p>Are these discards useful or harmful? Are they intentional? Why
<code>linux-6.1</code> was unaffected? No idea!</p>
<h2 id="bisecting-the-kernel">Bisecting the kernel</h2>
<p>Given that it’s seemingly a behaviour change between <code>6.1</code> and <code>6.2</code>
kernel versions I attempted to bisect the kernel.</p>
<p>Bisecting it was easy: I redirected local <code>linux</code> kernel package
definition to local <code>linux.git</code> checkout and rebuilt my system against
it.</p>
<p>Here is a diff against <code>nixpkgs</code> I used at some point:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/os-specific/linux/kernel/common-config.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/os-specific/linux/kernel/common-config.nix</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -839,8 +833,6 @@ let</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>       DVB_DYNAMIC_MINORS = option yes; # we use udev</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>       EFI_STUB            = yes; # EFI bootloader in the bzImage itself</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="st">-      EFI_GENERIC_STUB_INITRD_CMDLINE_LOADER =</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="st">-          whenOlder &quot;6.2&quot; (whenAtLeast &quot;5.8&quot; yes); # initrd kernel parameter for EFI</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>       CGROUPS             = yes; # used by systemd</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>       FHANDLE             = yes; # used by systemd</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>       SECCOMP             = yes; # used by systemd &gt;= 231</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/os-specific/linux/kernel/linux-6.2.nix</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/os-specific/linux/kernel/linux-6.2.nix</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -3,7 +3,7 @@</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a> with lib;</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a> buildLinux (args // rec {</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="st">-  version = &quot;6.2&quot;;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="va">+  version = &quot;6.1.0-rc8&quot;;</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>   # modDirVersion needs to be x.y.z, will automatically add .0 if needed</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>   modDirVersion = versions.pad 3 version;</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -11,8 +11,9 @@ buildLinux (args // rec {</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>   # branchVersion needs to be x.y</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>   extraMeta.branch = versions.majorMinor version;</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="st">-  src = fetchurl {</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="va">+  src_ = fetchurl {</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>     url = &quot;mirror://kernel/linux/kernel/v6.x/linux-${version}.tar.xz&quot;;</span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>     sha256 = &quot;sha256-dIYvqKtA7a6FuzOFwLcf4QMoi85RhSbWMZeACzy97LE=&quot;;</span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a><span class="va">+  src = builtins.fetchGit /home/slyfox/linux.git;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a> } // (args.argsOverride or { }))</span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/top-level/linux-kernels.nix</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/top-level/linux-kernels.nix</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -171,9 +171,9 @@ in {</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>     linux_6_2 = callPackage ../os-specific/linux/kernel/linux-6.2.nix {</span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>       kernelPatches = [</span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a><span class="st">-        kernelPatches.bridge_stp_helper</span></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a><span class="st">-        kernelPatches.request_key_helper</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a><span class="st">-        kernelPatches.fix-em-ice-bonding</span></span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a><span class="va">+        #kernelPatches.bridge_stp_helper</span></span>
<span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a><span class="va">+        #kernelPatches.request_key_helper</span></span>
<span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a><span class="va">+        #kernelPatches.fix-em-ice-bonding</span></span>
<span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a>       ];</span>
<span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>     };</span></code></pre></div>
<p>Here I did a few things:</p>
<ul>
<li>removed explicit <code>EFI_GENERIC_STUB_INITRD_CMDLINE_LOADER</code> <code>.config</code>
setting as it disappeared somewhere between <code>6.1</code> and <code>6.2</code></li>
<li>redirected kernel source to local checkout with
<code>src = builtins.fetchGit /home/slyfox/linux.git;</code></li>
<li>dropped any backported patches as they failed to apply (and were not
relevant to storage changes)</li>
</ul>
<p>That was enough for me to build the system against that kernel with:</p>
<pre><code>$ sudo nixos-rebuild switch --impure --override-input nixpkgs .</code></pre>
<p>The minor complication was in the fact that just booting into a bad
kernel was not always enough to trigger instant <code>discard</code> storm.
Sometimes I had to run an I/O-heavy application.</p>
<p>In my case running <code>firefox</code> for 30 minutes was a solid way to trigger
the problem.</p>
<p>After a few evenings of slow bisect I ended up at
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=63a7cb13071842966c1ce931edacbc23573aada5">this commit</a>:</p>
<pre><code>$ git bisect good
63a7cb13071842966c1ce931edacbc23573aada5 is the first bad commit
commit 63a7cb13071842966c1ce931edacbc23573aada5
Author: David Sterba
Date:   Tue Jul 26 20:54:10 2022 +0200

    btrfs: auto enable discard=async when possible

    There's a request to automatically enable async discard for capable
    devices. We can do that, the async mode is designed to wait for larger
    freed extents and is not intrusive, with limits to iops, kbps or latency.

    The status and tunables will be exported in /sys/fs/btrfs/FSID/discard .

    The automatic selection is done if there's at least one discard capable
    device in the filesystem (not capable devices are skipped). Mounting
    with any other discard option will honor that option, notably mounting
    with nodiscard will keep it disabled.

    Link: https://lore.kernel.org/linux-btrfs/CAEg-Je_b1YtdsCR0zS5XZ_SbvJgN70ezwvRwLiCZgDGLbeMB=w@xxxxxxxxxxxxxx/
    Reviewed-by: Boris Burkov
    Signed-off-by: David Sterba

 fs/btrfs/ctree.h   |  1 +
 fs/btrfs/disk-io.c | 14 ++++++++++++++
 fs/btrfs/super.c   |  2 ++
 fs/btrfs/volumes.c |  3 +++
 fs/btrfs/volumes.h |  2 ++
 5 files changed, 22 insertions(+)</code></pre>
<p>It’s a seemingly benign <code>btrfs</code> change: it only enables <code>discard=async</code>
mount option by default for good enough devices. It does not change
anything about <code>btrfs</code> implementation:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/fs/btrfs/volumes.c</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/fs/btrfs/volumes.c</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -641,6 +641,9 @@ static int btrfs_open_one_device(struct btrfs_fs_devices *fs_devices,</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a> 	if (!bdev_nonrot(bdev))</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a> 		fs_devices-&gt;rotating = true;</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="va">+	if (bdev_max_discard_sectors(bdev))</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="va">+		fs_devices-&gt;discardable = true;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a> 	device-&gt;bdev = bdev;</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a> 	clear_bit(BTRFS_DEV_STATE_IN_FS_METADATA, &amp;device-&gt;dev_state);</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a> 	device-&gt;mode = flags;</span></code></pre></div>
<h2 id="the-workaround">The workaround</h2>
<p>To restore previous behaviour (until we find out if it’s expected) I
added <code>"nodiscard"</code> mount option at startup and got an old behaviour on
<code>6.2</code>!</p>
<p>I also sent <a href="https://www.spinics.net/lists/linux-btrfs/msg133128.html">the question</a>
to <code>linux-btrfs@</code> ML to se if it’s an expected behaviour.</p>
<h2 id="digging-deeper">Digging deeper</h2>
<p>Now that we have a workaround let’s try to explore where these <code>discard</code>
requests come from.</p>
<p>I re-enabled <code>discard=async</code> with <code>sudo mount -oremount,discard=async /</code>
and spent some time in <code>firefox</code> to trigger the storm condition again
when disk led started flashing again.</p>
<p>I checked discards still get generated (and while at it confirmed it’s
related to <code>btrfs</code>):</p>
<pre><code>$ sudo perf ftrace -a -T '*btrfs*discard*' -T '**nvme*' | cat

  kworker/u64:10-1437018 [010]  34878.171198: btrfs_discard_update_discardable &lt;-__btrfs_add_free_space
  kworker/u64:10-1437018 [010]  34878.171198: __btrfs_discard_schedule_work &lt;-btrfs_discard_workfn
  kworker/u64:10-1437018 [010]  34878.275039: btrfs_discard_workfn &lt;-process_one_work
  kworker/u64:10-1437018 [010]  34878.275049: btrfs_discard_extent &lt;-do_trimming
  kworker/u64:10-1437018 [010]  34878.275050: btrfs_map_discard &lt;-btrfs_discard_extent
  kworker/u64:10-1437018 [010]  34878.275055: btrfs_issue_discard &lt;-btrfs_discard_extent
   kworker/11:1H-320     [011]  34878.275095: nvme_queue_rq &lt;-blk_mq_dispatch_rq_list
   kworker/11:1H-320     [011]  34878.275096: nvme_setup_cmd &lt;-nvme_queue_rq
   kworker/11:1H-320     [011]  34878.275097: nvme_setup_discard &lt;-nvme_setup_cmd
   kworker/11:1H-320     [011]  34878.275098: nvme_prep_rq.part.0 &lt;-nvme_queue_rq
          &lt;idle&gt;-0       [011]  34878.275183: nvme_irq &lt;-__handle_irq_event_percpu
          &lt;idle&gt;-0       [011]  34878.275184: nvme_pci_complete_batch &lt;-nvme_irq
          &lt;idle&gt;-0       [011]  34878.275185: nvme_unmap_data &lt;-nvme_pci_complete_batch
          &lt;idle&gt;-0       [011]  34878.275187: nvme_complete_batch_req &lt;-nvme_pci_complete_batch

  kworker/u64:10-1437018 [011]  34878.275204: btrfs_discard_update_discardable &lt;-__btrfs_add_free_space
  kworker/u64:10-1437018 [011]  34878.275204: __btrfs_discard_schedule_work &lt;-btrfs_discard_workfn
  kworker/u64:10-1437018 [000]  34878.379054: btrfs_discard_workfn &lt;-process_one_work
  kworker/u64:10-1437018 [000]  34878.379067: btrfs_discard_extent &lt;-do_trimming
  kworker/u64:10-1437018 [000]  34878.379068: btrfs_map_discard &lt;-btrfs_discard_extent
  kworker/u64:10-1437018 [000]  34878.379073: btrfs_issue_discard &lt;-btrfs_discard_extent
    kworker/1:1H-193     [001]  34878.379215: nvme_queue_rq &lt;-blk_mq_dispatch_rq_list
    kworker/1:1H-193     [001]  34878.379216: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/1:1H-193     [001]  34878.379216: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/1:1H-193     [001]  34878.379218: nvme_prep_rq.part.0 &lt;-nvme_queue_rq
          &lt;idle&gt;-0       [002]  34878.379313: nvme_irq &lt;-__handle_irq_event_percpu
          &lt;idle&gt;-0       [002]  34878.379314: nvme_pci_complete_batch &lt;-nvme_irq
          &lt;idle&gt;-0       [002]  34878.379315: nvme_unmap_data &lt;-nvme_pci_complete_batch
          &lt;idle&gt;-0       [002]  34878.379318: nvme_complete_batch_req &lt;-nvme_pci_complete_batch</code></pre>
<p>It looks like <code>btrfs</code> keeps seeing free space being returned back to the
system which triggers extent discard worker thread.</p>
<p>Ideally I would expect <code>free</code> / <code>discard</code> / <code>free</code> loop to cease at some
point. But it never does.</p>
<p>Let’s try to find where does <code>__btrfs_add_free_space</code> come from:</p>
<pre><code>$ sudo perf ftrace -a -T '__btrfs_add_free_space' | cat

   kworker/u64:1-2379115 [001]  35176.238428: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.341720: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.446448: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.550321: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.653996: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.758335: __btrfs_add_free_space &lt;-do_trimming</code></pre>
<p>If I read it correctly it’s initiated by
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/free-space-cache.c?h=v6.2#n3630">do_trimming()</a>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> do_trimming<span class="op">(</span><span class="kw">struct</span> btrfs_block_group <span class="op">*</span>block_group<span class="op">,</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>		       u64 <span class="op">*</span>total_trimmed<span class="op">,</span> u64 start<span class="op">,</span> u64 bytes<span class="op">,</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>		       u64 reserved_start<span class="op">,</span> u64 reserved_bytes<span class="op">,</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>		       <span class="kw">enum</span> btrfs_trim_state reserved_trim_state<span class="op">,</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>		       <span class="kw">struct</span> btrfs_trim_range <span class="op">*</span>trim_entry<span class="op">)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_space_info <span class="op">*</span>space_info <span class="op">=</span> block_group<span class="op">-&gt;</span>space_info<span class="op">;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_fs_info <span class="op">*</span>fs_info <span class="op">=</span> block_group<span class="op">-&gt;</span>fs_info<span class="op">;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_free_space_ctl <span class="op">*</span>ctl <span class="op">=</span> block_group<span class="op">-&gt;</span>free_space_ctl<span class="op">;</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> update <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>	<span class="dt">const</span> u64 end <span class="op">=</span> start <span class="op">+</span> bytes<span class="op">;</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>	<span class="dt">const</span> u64 reserved_end <span class="op">=</span> reserved_start <span class="op">+</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>	<span class="kw">enum</span> btrfs_trim_state trim_state <span class="op">=</span> BTRFS_TRIM_STATE_UNTRIMMED<span class="op">;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>	u64 trimmed <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>block_group<span class="op">-&gt;</span>ro<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>		block_group<span class="op">-&gt;</span>reserved <span class="op">+=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>		space_info<span class="op">-&gt;</span>bytes_reserved <span class="op">+=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>		update <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>	ret <span class="op">=</span> btrfs_discard_extent<span class="op">(</span>fs_info<span class="op">,</span> start<span class="op">,</span> bytes<span class="op">,</span> <span class="op">&amp;</span>trimmed<span class="op">);</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>ret<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>		<span class="op">*</span>total_trimmed <span class="op">+=</span> trimmed<span class="op">;</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>		trim_state <span class="op">=</span> BTRFS_TRIM_STATE_TRIMMED<span class="op">;</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>	mutex_lock<span class="op">(&amp;</span>ctl<span class="op">-&gt;</span>cache_writeout_mutex<span class="op">);</span></span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>reserved_start <span class="op">&lt;</span> start<span class="op">)</span></span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>		__btrfs_add_free_space<span class="op">(</span>block_group<span class="op">,</span> reserved_start<span class="op">,</span></span>
<span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a>				       start <span class="op">-</span> reserved_start<span class="op">,</span></span>
<span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a>				       reserved_trim_state<span class="op">);</span></span>
<span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>start <span class="op">+</span> bytes <span class="op">&lt;</span> reserved_start <span class="op">+</span> reserved_bytes<span class="op">)</span></span>
<span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a>		__btrfs_add_free_space<span class="op">(</span>block_group<span class="op">,</span> end<span class="op">,</span> reserved_end <span class="op">-</span> end<span class="op">,</span></span>
<span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a>				       reserved_trim_state<span class="op">);</span></span>
<span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a>	__btrfs_add_free_space<span class="op">(</span>block_group<span class="op">,</span> start<span class="op">,</span> bytes<span class="op">,</span> trim_state<span class="op">);</span></span>
<span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a>	list_del<span class="op">(&amp;</span>trim_entry<span class="op">-&gt;</span>list<span class="op">);</span></span>
<span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a>	mutex_unlock<span class="op">(&amp;</span>ctl<span class="op">-&gt;</span>cache_writeout_mutex<span class="op">);</span></span>
<span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>update<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a>		spin_lock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-47"><a href="#cb8-47" aria-hidden="true" tabindex="-1"></a>		spin_lock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-48"><a href="#cb8-48" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">-&gt;</span>ro<span class="op">)</span></span>
<span id="cb8-49"><a href="#cb8-49" aria-hidden="true" tabindex="-1"></a>			space_info<span class="op">-&gt;</span>bytes_readonly <span class="op">+=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-50"><a href="#cb8-50" aria-hidden="true" tabindex="-1"></a>		block_group<span class="op">-&gt;</span>reserved <span class="op">-=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-51"><a href="#cb8-51" aria-hidden="true" tabindex="-1"></a>		space_info<span class="op">-&gt;</span>bytes_reserved <span class="op">-=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-52"><a href="#cb8-52" aria-hidden="true" tabindex="-1"></a>		spin_unlock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-53"><a href="#cb8-53" aria-hidden="true" tabindex="-1"></a>		spin_unlock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-54"><a href="#cb8-54" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb8-55"><a href="#cb8-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-56"><a href="#cb8-56" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb8-57"><a href="#cb8-57" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s a long function, but not too complicated:</p>
<ul>
<li>block groups are ~256MB chunk of bytes on disk that contains various
items</li>
<li>there are 3 types of block groups: <code>DATA</code> (user’s bytes), <code>MEATADATA</code>
(file system metadata) and <code>SYSTEM</code> (tiny amount of metadata that
spans multiple devices).</li>
<li><code>btrfs</code> tracks two ranges per block group: used range and reserved
range.</li>
<li><code>btrfs</code> uses
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/extent-tree.c?h=v6.2#n1319">btrfs_discard_extent()</a>
to mark extent as freed.</li>
<li><code>btrfs</code> uses
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/free-space-cache.c?h=v6.2#n2609">__btrfs_add_free_space()</a> to cache free space
info on disk.</li>
</ul>
<p>Let’s repeat the exercise of chasing what initiates the trim to see if
this thing some sort of internal cycle:</p>
<pre><code>$ sudo perf ftrace -a -T 'do_trimming' | head -n 10 | tail -n 1
   kworker/u64:7-2381087 [009]  36596.861571: do_trimming &lt;-trim_no_bitmap

$ sudo perf ftrace -a -T 'trim_no_bitmap' | head -n 10 | tail -n 1
   kworker/u64:6-2379320 [015]  36627.125062: trim_no_bitmap &lt;-btrfs_trim_block_group_extents

   kworker/u64:2-2379316 [010]  36650.500676: btrfs_trim_block_group_extents &lt;-btrfs_discard_workfn
   worker/u64:2-2379316 [005]  36676.812243: btrfs_discard_workfn &lt;-process_one_work
   worker/6:1-2382788 [006]  36709.360688: process_one_work &lt;-worker_thread</code></pre>
<p>We hit a dead end: <code>worker_thread()</code> pulls in work items from somewhere
and processes them. Let’s find what queues those up!</p>
<p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c?h=v6.2#n446">btrfs_discard_workfn()</a>
definition is also not too complicated:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co"> * Discard work queue callback</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co"> *</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="co"> * @work: work</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co"> *</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co"> * Find the next block_group to start discarding and then discard a single</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co"> * region.  It does this in a two-pass fashion: first extents and second</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="co"> * bitmaps.  Completely discarded block groups are sent to the unused_bgs path.</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> btrfs_discard_workfn<span class="op">(</span><span class="kw">struct</span> work_struct <span class="op">*</span>work<span class="op">)</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_discard_ctl <span class="op">*</span>discard_ctl<span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_block_group <span class="op">*</span>block_group<span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>	<span class="kw">enum</span> btrfs_discard_state discard_state<span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> discard_index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>	u64 trimmed <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>	u64 minlen <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>	u64 now <span class="op">=</span> ktime_get_ns<span class="op">();</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>	discard_ctl <span class="op">=</span> container_of<span class="op">(</span>work<span class="op">,</span> <span class="kw">struct</span> btrfs_discard_ctl<span class="op">,</span> work<span class="op">.</span>work<span class="op">);</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>	block_group <span class="op">=</span> peek_discard_list<span class="op">(</span>discard_ctl<span class="op">,</span> <span class="op">&amp;</span>discard_state<span class="op">,</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>					<span class="op">&amp;</span>discard_index<span class="op">,</span> now<span class="op">);</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>block_group <span class="op">||</span> <span class="op">!</span>btrfs_run_discard_work<span class="op">(</span>discard_ctl<span class="op">))</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>now <span class="op">&lt;</span> block_group<span class="op">-&gt;</span>discard_eligible_time<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>		btrfs_discard_schedule_work<span class="op">(</span>discard_ctl<span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>	<span class="co">/* Perform discarding */</span></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>	minlen <span class="op">=</span> discard_minlen<span class="op">[</span>discard_index<span class="op">];</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discard_state <span class="op">==</span> BTRFS_DISCARD_BITMAPS<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a>		u64 maxlen <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a>		<span class="co">/*</span></span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a><span class="co">		 * Use the previous levels minimum discard length as the max</span></span>
<span id="cb10-39"><a href="#cb10-39" aria-hidden="true" tabindex="-1"></a><span class="co">		 * length filter.  In the case something is added to make a</span></span>
<span id="cb10-40"><a href="#cb10-40" aria-hidden="true" tabindex="-1"></a><span class="co">		 * region go beyond the max filter, the entire bitmap is set</span></span>
<span id="cb10-41"><a href="#cb10-41" aria-hidden="true" tabindex="-1"></a><span class="co">		 * back to BTRFS_TRIM_STATE_UNTRIMMED.</span></span>
<span id="cb10-42"><a href="#cb10-42" aria-hidden="true" tabindex="-1"></a><span class="co">		 */</span></span>
<span id="cb10-43"><a href="#cb10-43" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>discard_index <span class="op">!=</span> BTRFS_DISCARD_INDEX_UNUSED<span class="op">)</span></span>
<span id="cb10-44"><a href="#cb10-44" aria-hidden="true" tabindex="-1"></a>			maxlen <span class="op">=</span> discard_minlen<span class="op">[</span>discard_index <span class="op">-</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb10-45"><a href="#cb10-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-46"><a href="#cb10-46" aria-hidden="true" tabindex="-1"></a>		btrfs_trim_block_group_bitmaps<span class="op">(</span>block_group<span class="op">,</span> <span class="op">&amp;</span>trimmed<span class="op">,</span></span>
<span id="cb10-47"><a href="#cb10-47" aria-hidden="true" tabindex="-1"></a>				       block_group<span class="op">-&gt;</span>discard_cursor<span class="op">,</span></span>
<span id="cb10-48"><a href="#cb10-48" aria-hidden="true" tabindex="-1"></a>				       btrfs_block_group_end<span class="op">(</span>block_group<span class="op">),</span></span>
<span id="cb10-49"><a href="#cb10-49" aria-hidden="true" tabindex="-1"></a>				       minlen<span class="op">,</span> maxlen<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span>
<span id="cb10-50"><a href="#cb10-50" aria-hidden="true" tabindex="-1"></a>		discard_ctl<span class="op">-&gt;</span>discard_bitmap_bytes <span class="op">+=</span> trimmed<span class="op">;</span></span>
<span id="cb10-51"><a href="#cb10-51" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb10-52"><a href="#cb10-52" aria-hidden="true" tabindex="-1"></a>		btrfs_trim_block_group_extents<span class="op">(</span>block_group<span class="op">,</span> <span class="op">&amp;</span>trimmed<span class="op">,</span></span>
<span id="cb10-53"><a href="#cb10-53" aria-hidden="true" tabindex="-1"></a>				       block_group<span class="op">-&gt;</span>discard_cursor<span class="op">,</span></span>
<span id="cb10-54"><a href="#cb10-54" aria-hidden="true" tabindex="-1"></a>				       btrfs_block_group_end<span class="op">(</span>block_group<span class="op">),</span></span>
<span id="cb10-55"><a href="#cb10-55" aria-hidden="true" tabindex="-1"></a>				       minlen<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span>
<span id="cb10-56"><a href="#cb10-56" aria-hidden="true" tabindex="-1"></a>		discard_ctl<span class="op">-&gt;</span>discard_extent_bytes <span class="op">+=</span> trimmed<span class="op">;</span></span>
<span id="cb10-57"><a href="#cb10-57" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb10-58"><a href="#cb10-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-59"><a href="#cb10-59" aria-hidden="true" tabindex="-1"></a>	<span class="co">/* Determine next steps for a block_group */</span></span>
<span id="cb10-60"><a href="#cb10-60" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">-&gt;</span>discard_cursor <span class="op">&gt;=</span> btrfs_block_group_end<span class="op">(</span>block_group<span class="op">))</span> <span class="op">{</span></span>
<span id="cb10-61"><a href="#cb10-61" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>discard_state <span class="op">==</span> BTRFS_DISCARD_BITMAPS<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-62"><a href="#cb10-62" aria-hidden="true" tabindex="-1"></a>			btrfs_finish_discard_pass<span class="op">(</span>discard_ctl<span class="op">,</span> block_group<span class="op">);</span></span>
<span id="cb10-63"><a href="#cb10-63" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb10-64"><a href="#cb10-64" aria-hidden="true" tabindex="-1"></a>			block_group<span class="op">-&gt;</span>discard_cursor <span class="op">=</span> block_group<span class="op">-&gt;</span>start<span class="op">;</span></span>
<span id="cb10-65"><a href="#cb10-65" aria-hidden="true" tabindex="-1"></a>			spin_lock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-66"><a href="#cb10-66" aria-hidden="true" tabindex="-1"></a>			<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">-&gt;</span>discard_state <span class="op">!=</span></span>
<span id="cb10-67"><a href="#cb10-67" aria-hidden="true" tabindex="-1"></a>			    BTRFS_DISCARD_RESET_CURSOR<span class="op">)</span></span>
<span id="cb10-68"><a href="#cb10-68" aria-hidden="true" tabindex="-1"></a>				block_group<span class="op">-&gt;</span>discard_state <span class="op">=</span></span>
<span id="cb10-69"><a href="#cb10-69" aria-hidden="true" tabindex="-1"></a>							BTRFS_DISCARD_BITMAPS<span class="op">;</span></span>
<span id="cb10-70"><a href="#cb10-70" aria-hidden="true" tabindex="-1"></a>			spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-71"><a href="#cb10-71" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb10-72"><a href="#cb10-72" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb10-73"><a href="#cb10-73" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-74"><a href="#cb10-74" aria-hidden="true" tabindex="-1"></a>	now <span class="op">=</span> ktime_get_ns<span class="op">();</span></span>
<span id="cb10-75"><a href="#cb10-75" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-76"><a href="#cb10-76" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>prev_discard <span class="op">=</span> trimmed<span class="op">;</span></span>
<span id="cb10-77"><a href="#cb10-77" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>prev_discard_time <span class="op">=</span> now<span class="op">;</span></span>
<span id="cb10-78"><a href="#cb10-78" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>block_group <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb10-79"><a href="#cb10-79" aria-hidden="true" tabindex="-1"></a>	__btrfs_discard_schedule_work<span class="op">(</span>discard_ctl<span class="op">,</span> now<span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span>
<span id="cb10-80"><a href="#cb10-80" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-81"><a href="#cb10-81" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here worker thread expects items of <code>struct btrfs_discard_ctl</code> type to
process. Scrolling the file around
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c?h=v6.2#n324">btrfs_discard_queue_work()</a>
seems to be most plausible candidate we are looking for:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> __btrfs_discard_schedule_work<span class="op">(</span><span class="kw">struct</span> btrfs_discard_ctl <span class="op">*</span>discard_ctl<span class="op">,</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>					  u64 now<span class="op">,</span> <span class="dt">bool</span> override<span class="op">)</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_block_group <span class="op">*</span>block_group<span class="op">;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>btrfs_run_discard_work<span class="op">(</span>discard_ctl<span class="op">))</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>override <span class="op">&amp;&amp;</span> delayed_work_pending<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>work<span class="op">))</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>	block_group <span class="op">=</span> find_next_block_group<span class="op">(</span>discard_ctl<span class="op">,</span> now<span class="op">);</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>		u64 delay <span class="op">=</span> discard_ctl<span class="op">-&gt;</span>delay_ms <span class="op">*</span> NSEC_PER_MSEC<span class="op">;</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>		u32 kbps_limit <span class="op">=</span> READ_ONCE<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>kbps_limit<span class="op">);</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>		<span class="co">/*</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="co">		 * A single delayed workqueue item is responsible for</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a><span class="co">		 * discarding, so we can manage the bytes rate limit by keeping</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="co">		 * track of the previous discard.</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="co">		 */</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>kbps_limit <span class="op">&amp;&amp;</span> discard_ctl<span class="op">-&gt;</span>prev_discard<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>			u64 bps_limit <span class="op">=</span> <span class="op">((</span>u64<span class="op">)</span>kbps_limit<span class="op">)</span> <span class="op">*</span> SZ_1K<span class="op">;</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>			u64 bps_delay <span class="op">=</span> div64_u64<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>prev_discard <span class="op">*</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>						  NSEC_PER_SEC<span class="op">,</span> bps_limit<span class="op">);</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>			delay <span class="op">=</span> max<span class="op">(</span>delay<span class="op">,</span> bps_delay<span class="op">);</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true" tabindex="-1"></a>		<span class="co">/*</span></span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true" tabindex="-1"></a><span class="co">		 * This timeout is to hopefully prevent immediate discarding</span></span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true" tabindex="-1"></a><span class="co">		 * in a recently allocated block group.</span></span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true" tabindex="-1"></a><span class="co">		 */</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>now <span class="op">&lt;</span> block_group<span class="op">-&gt;</span>discard_eligible_time<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-34"><a href="#cb11-34" aria-hidden="true" tabindex="-1"></a>			u64 bg_timeout <span class="op">=</span> block_group<span class="op">-&gt;</span>discard_eligible_time <span class="op">-</span> now<span class="op">;</span></span>
<span id="cb11-35"><a href="#cb11-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-36"><a href="#cb11-36" aria-hidden="true" tabindex="-1"></a>			delay <span class="op">=</span> max<span class="op">(</span>delay<span class="op">,</span> bg_timeout<span class="op">);</span></span>
<span id="cb11-37"><a href="#cb11-37" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb11-38"><a href="#cb11-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-39"><a href="#cb11-39" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>override <span class="op">&amp;&amp;</span> discard_ctl<span class="op">-&gt;</span>prev_discard<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-40"><a href="#cb11-40" aria-hidden="true" tabindex="-1"></a>			u64 elapsed <span class="op">=</span> now <span class="op">-</span> discard_ctl<span class="op">-&gt;</span>prev_discard_time<span class="op">;</span></span>
<span id="cb11-41"><a href="#cb11-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-42"><a href="#cb11-42" aria-hidden="true" tabindex="-1"></a>			<span class="cf">if</span> <span class="op">(</span>delay <span class="op">&gt;</span> elapsed<span class="op">)</span></span>
<span id="cb11-43"><a href="#cb11-43" aria-hidden="true" tabindex="-1"></a>				delay <span class="op">-=</span> elapsed<span class="op">;</span></span>
<span id="cb11-44"><a href="#cb11-44" aria-hidden="true" tabindex="-1"></a>			<span class="cf">else</span></span>
<span id="cb11-45"><a href="#cb11-45" aria-hidden="true" tabindex="-1"></a>				delay <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb11-46"><a href="#cb11-46" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb11-47"><a href="#cb11-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-48"><a href="#cb11-48" aria-hidden="true" tabindex="-1"></a>		mod_delayed_work<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>discard_workers<span class="op">,</span></span>
<span id="cb11-49"><a href="#cb11-49" aria-hidden="true" tabindex="-1"></a>				 <span class="op">&amp;</span>discard_ctl<span class="op">-&gt;</span>work<span class="op">,</span> nsecs_to_jiffies<span class="op">(</span>delay<span class="op">));</span></span>
<span id="cb11-50"><a href="#cb11-50" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb11-51"><a href="#cb11-51" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Note that this handler does not execute the discard requests as soon as
possible! It has has at least one rate limiter based on
<code>discard_ctl-&gt;kbps_limit</code>.</p>
<p>And there are even more rate limiters defined by
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c?h=v6.2#n545">btrfs_discard_calc_delay()</a></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> btrfs_discard_calc_delay<span class="op">(</span><span class="kw">struct</span> btrfs_discard_ctl <span class="op">*</span>discard_ctl<span class="op">)</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>	s32 discardable_extents<span class="op">;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>	s64 discardable_bytes<span class="op">;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>	u32 iops_limit<span class="op">;</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">unsigned</span> <span class="dt">long</span> delay<span class="op">;</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>	discardable_extents <span class="op">=</span> atomic_read<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_extents<span class="op">);</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>discardable_extents<span class="op">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="co">	 * The following is to fix a potential -1 discrepancy that we're not</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a><span class="co">	 * sure how to reproduce. But given that this is the only place that</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a><span class="co">	 * utilizes these numbers and this is only called by from</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="co">	 * btrfs_finish_extent_commit() which is synchronized, we can correct</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="co">	 * here.</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discardable_extents <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>		atomic_add<span class="op">(-</span>discardable_extents<span class="op">,</span></span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>			   <span class="op">&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_extents<span class="op">);</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>	discardable_bytes <span class="op">=</span> atomic64_read<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_bytes<span class="op">);</span></span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discardable_bytes <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a>		atomic64_add<span class="op">(-</span>discardable_bytes<span class="op">,</span></span>
<span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a>			     <span class="op">&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_bytes<span class="op">);</span></span>
<span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-30"><a href="#cb12-30" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discardable_extents <span class="op">&lt;=</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-31"><a href="#cb12-31" aria-hidden="true" tabindex="-1"></a>		spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb12-32"><a href="#cb12-32" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb12-33"><a href="#cb12-33" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb12-34"><a href="#cb12-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-35"><a href="#cb12-35" aria-hidden="true" tabindex="-1"></a>	iops_limit <span class="op">=</span> READ_ONCE<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>iops_limit<span class="op">);</span></span>
<span id="cb12-36"><a href="#cb12-36" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>iops_limit<span class="op">)</span></span>
<span id="cb12-37"><a href="#cb12-37" aria-hidden="true" tabindex="-1"></a>		delay <span class="op">=</span> MSEC_PER_SEC <span class="op">/</span> iops_limit<span class="op">;</span></span>
<span id="cb12-38"><a href="#cb12-38" aria-hidden="true" tabindex="-1"></a>	<span class="cf">else</span></span>
<span id="cb12-39"><a href="#cb12-39" aria-hidden="true" tabindex="-1"></a>		delay <span class="op">=</span> BTRFS_DISCARD_TARGET_MSEC <span class="op">/</span> discardable_extents<span class="op">;</span></span>
<span id="cb12-40"><a href="#cb12-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-41"><a href="#cb12-41" aria-hidden="true" tabindex="-1"></a>	delay <span class="op">=</span> clamp<span class="op">(</span>delay<span class="op">,</span> BTRFS_DISCARD_MIN_DELAY_MSEC<span class="op">,</span></span>
<span id="cb12-42"><a href="#cb12-42" aria-hidden="true" tabindex="-1"></a>		      BTRFS_DISCARD_MAX_DELAY_MSEC<span class="op">);</span></span>
<span id="cb12-43"><a href="#cb12-43" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>delay_ms <span class="op">=</span> delay<span class="op">;</span></span>
<span id="cb12-44"><a href="#cb12-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-45"><a href="#cb12-45" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb12-46"><a href="#cb12-46" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Thus here are rate limits we see:</p>
<ul>
<li><code>discard_ctl-&gt;kbps_limit</code>: discard bytes/sec rate limit</li>
<li><code>discard_ctl-&gt;iops_limit</code>: discard requests/sec rate limit</li>
<li><code>BTRFS_DISCARD_MIN_DELAY_MSEC=1ms</code> to <code>BTRFS_DISCARD_MAX_DELAY_MSEC=1s</code>:
allowed delay range between discards</li>
</ul>
<p>Some of these we can inspect and change at runtime:</p>
<pre><code>$ cd /sys/fs/btrfs/&lt;UUID&gt;/discard
$ for f in *; do echo -ne &quot;$f:\t&quot;; cat $f; done

discard_bitmap_bytes:   98213888
discard_bytes_saved:    27716325376
discard_extent_bytes:   38577287168
discardable_bytes:      19484499968
discardable_extents:    228442
iops_limit:     10
kbps_limit:     0
max_discard_size:       67108864</code></pre>
<p>I’m not sure I believe <code>discardable_bytes=19484499968</code> value. This is
supposed to be a discard backlog queued but I’m skeptical. It never goes
down to zero. Looks more like broken accounting. What is worse this
(invalid) value is being used to calculate latency of a next request.</p>
<h2 id="discard-requests-timing-patterns">Discard requests timing patterns</h2>
<p>So, it looks like 10 discards/sec are expected default on <code>linux-6.2</code>.
Let’s find the source of those discards. Looking at
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c">discard.c</a>
these functions looked plausible:</p>
<pre><code>$ sudo perf ftrace -a -T 'btrfs_discard_workfn' -T 'btrfs_issue_discard' -T 'btrfs_discard_queue_work'
btrfs-transacti-407     [011]  42800.424027: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
btrfs-transacti-407     [011]  42800.424070: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
...
btrfs-transacti-407     [011]  42800.425053: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
btrfs-transacti-407     [011]  42800.425055: btrfs_discard_queue_work &lt;-__btrfs_add_free_space</code></pre>
<p>I saw 193 entries of <code>btrfs_discard_queue_work</code> above. It took 1ms to
enqueue all of the work into the work queue. Very quick and not too
large. Right after it we see actual discards being sent to the device:</p>
<pre><code>kworker/u64:1-2379115 [000]  42800.487010: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:1-2379115 [000]  42800.487028: btrfs_issue_discard &lt;-btrfs_discard_extent
kworker/u64:1-2379115 [005]  42800.594010: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:1-2379115 [005]  42800.594031: btrfs_issue_discard &lt;-btrfs_discard_extent
...
kworker/u64:15-2396822 [007]  42830.441487: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:15-2396822 [007]  42830.441502: btrfs_issue_discard &lt;-btrfs_discard_extent
kworker/u64:15-2396822 [000]  42830.546497: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:15-2396822 [000]  42830.546524: btrfs_issue_discard &lt;-btrfs_discard_extent</code></pre>
<p>286 pairs of <code>btrfs_discard_workfn</code> / <code>btrfs_issue_discard</code>.
Each pair takes 100ms to process, which seems to match <code>iops_limit=10</code>.</p>
<p>And 30s is also a <code>btrfs</code> commit interval where the next batch of
discard work gets landed:</p>
<pre><code>btrfs-transacti-407     [002]  42830.634216: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
btrfs-transacti-407     [002]  42830.634228: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
...</code></pre>
<p>That means I can get about 300 discards per second max. Also, given that
discards were being sent over full span of 30s I think that work queue
was not exhausted and there still was backlog in the queue.</p>
<p>I think <code>discardable_bytes</code> / <code>discardable_extents</code> is the backlog
metric, but I’m not sure as it never gets down to zero.</p>
<h2 id="another-workaround">Another workaround</h2>
<p>Now it’s clear we can manipulate the pace by changing the delay between
discards. To speed up the discard pace we can drop IO limit with:</p>
<pre><code># echo 10000 &gt; /sys/fs/btrfs/&lt;UUID&gt;/discard/iops_limit</code></pre>
<p>That allows getting rid of discard backlog. But I don’t know if it’s a
reasonable fix or it’s better to keep discards be delayed for a while.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>btrfs</code> uses <code>discard</code> to mark extents as free for an underlying device.</p>
<p><code>linux-6.2</code> enabled automatic async discard for <code>btrfs</code> on appropriate
SSD devices. This manifests as a constant device activity if you have
any reasonable amount of IO on your device (even trivial super block
commits are enough).</p>
<p>Default async discard rate limits <code>linux</code> has today are:</p>
<ul>
<li><code>discard_ctl-&gt;kbps_limit = 0</code>: discard bytes/sec rate limit</li>
<li><code>discard_ctl-&gt;iops_limit = 10</code>: discard requests/sec rate limit</li>
<li><code>BTRFS_DISCARD_MIN_DELAY_MSEC = 1ms</code> to <code>BTRFS_DISCARD_MAX_DELAY_MSEC = 1s</code>:
allowed delay range between discards</li>
</ul>
<p>Some of the defaults can be changed at runtime. Just <code>echo</code> a new value
to <code>/sys/fs/btrfs/&lt;UUID&gt;/discard/iops_limit</code> or <code>kbps_limit</code>.</p>
<p>Some of the counter metrics in <code>/sys/fs/btrfs/&lt;UUID&gt;/discard/*</code> look
inaccurate.</p>
<p><code>perf ftrace</code> (and <code>perf trace</code>!) are nice tools to quickly peek at what
the kernel is doing right now.</p>
<p>Have fun!</p>

<div class="info">
    Posted on March  4, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>cooling failure</title>
    <link href="http://trofi.github.io/posts/280-cooling-failure.html" />
    <id>http://trofi.github.io/posts/280-cooling-failure.html</id>
    <published>2023-02-25T00:00:00Z</published>
    <updated>2023-02-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>About 2 years ago I got my new desktop. It’s a 16-core AMD CPU with
128GB RAM. My plan was to compile A Lot :)</p>
<p>I was not sure how much of a heat sink I need for that machine. My
previous CPU had about 125W power consumption and could get away with
a silent rotary air cooler.</p>
<p>This machine seems to dissipate up to 150W and I was not sure if it’s a
peak value or some average that I could consistently exceed with heavy
workloads.</p>
<p>I decided to give water cooling system a try for the first time. I
expected it to be less noisy compared to rotary air ones.</p>
<p>When my desktop just arrived I was surprised to see that water cooling
system used not just one but two fans! (And also two more system fans).</p>
<p>When I powered the machine up for the first time I heard a nice low
frequency humming noise. It went up a bit when I applied 100% CPU load
workloads. It was not not too distracting but a bit disappointing that I
can hear when the machine is under the load or not.</p>
<p>2 years passed. I compiled a lot and caught many bugs in various
software projects. I had no issue with the hardware.</p>
<p>And one day my machine just powered off abruptly. I powered it on again.
I ran for 2-3 minutes, and shut off again. I was not able to power it on
later without a 30-minute delay. Initially I though about failed PSU as
the system did not complain about anything up to the very shutdown.</p>
<p>Next day I managed to get into <code>EFI</code> menu to look at CPU statistics.
<code>EFI</code> dashboard rendered the menacing temperature graph: it went from
60 degrees to 110 for a span of 5 minutes. Once the degree got to 110
machine was shut off.</p>
<p>Now that looked like a CPU overheat.</p>
<p>Water cooling systems are a bit more involved that just a radiator with
a fan. My one looked like that:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/00-diagram.jpg" alt="diagram" />
<figcaption aria-hidden="true">diagram</figcaption>
</figure>
<p>Here dotted line is the water flow. Fans blow the air up right into the
system case ceiling where a few small holes let it out. The system fans
(not drawn in picture) blow new air in from the right and blow it out
from the left.</p>
<p>In hind sight I think the radiator was positioned incorrectly and it
ought to be mounted vertically to align with the rest of air flow it the
system.</p>
<p>This is how radiator top looks like:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/01-radiator.jpg" alt="radiator" />
<figcaption aria-hidden="true">radiator</figcaption>
</figure>
<p>And this is how it looks like when I flip it to show fans (the pump is
already unscrewed):</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/02-unscrewed-pump.jpg" alt="unscrewed pump" />
<figcaption aria-hidden="true">unscrewed pump</figcaption>
</figure>
<p>Here I pulled the rotary part of the pump. It’s a magnet in plastic
case. As I understand that way pump can be fully isolated from electric
wires and can be rotated by using just magnetic field:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/03-pulled-rotor.jpg" alt="pulled rotor" />
<figcaption aria-hidden="true">pulled rotor</figcaption>
</figure>
<p>If I screw pump back in here is how it’s wiring looks like: some kind of
epoxy covers most of wiring and electronics. As a result there is not
much to do unless we are to break that layer. I was not able to find the
replacement part in online shops. Looks special.</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/04-closer-pump.jpg" alt="closer pump" />
<figcaption aria-hidden="true">closer pump</figcaption>
</figure>
<p>Here is the heat sink: it applies to the CPU and has two tubes that come
out of it. It has the wire (probably to measure temperature) but
otherwise is passive. All the buzzing is expected to happen in the
hanging pump.</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/05-heatsink.jpg" alt="heat sink" />
<figcaption aria-hidden="true">heat sink</figcaption>
</figure>
<p>I was a bit disappointed by this cooling system and wanted to try
something simpler and more serviceable.</p>
<p>After a few day of fruitlessly trying to revive the pump I plugged this
thing instead:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/06-air-cooler.jpg" alt="air cooler" />
<figcaption aria-hidden="true">air cooler</figcaption>
</figure>
<p>Now all the fans in the system blow the air right-to-left including the
CPU ones. <code>EFI</code> shows that CPU temperature dropped down to 30.</p>
<p>I can’t distinguish the sound of idle system from sound fully loaded
system. Both are very quiet. We’ll see how it will change in 2 years.</p>
<p>I wonder if I was very unlucky with this water cooler or it’s a more
general pattern.</p>

<div class="info">
    Posted on February 25, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>xmms2 0.9.2 is out</title>
    <link href="http://trofi.github.io/posts/279-xmms2-0.9.2-is-out.html" />
    <id>http://trofi.github.io/posts/279-xmms2-0.9.2-is-out.html</id>
    <published>2023-02-11T00:00:00Z</published>
    <updated>2023-02-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Tl;DR: <code>xmms2-0.9.2</code> is out and you can get it at
<a href="https://github.com/xmms2/xmms2-devel/releases/tag/0.9.2" class="uri">https://github.com/xmms2/xmms2-devel/releases/tag/0.9.2</a>!</p>
<p><a href="https://en.wikipedia.org/wiki/XMMS2">xmms2</a> is still a music player
daemon with various plugins to support stream decoding and
transformation. See
<a href="http://trofi.github.io/posts/244-xmms2-0.9.1-is-out.html">previous announcement</a> on how to
get started with <code>xmms2</code>.</p>
<h2 id="highlights">Highlights</h2>
<p>The guest star of this release is <code>libvisual</code> plugin!</p>
<figure>
<img src="http://trofi.github.io/posts.data/279-xmms2-0.9.2-is-out/2023-02-11-21-22-44.png" alt="xmms2 libvisual demo" />
<figcaption aria-hidden="true">xmms2 libvisual demo</figcaption>
</figure>
<p>Apart from that <code>FLAC</code> playback hangup
<a href="http://trofi.github.io/posts/274-xmms2-flac-hangup-fix.html">fix</a> went into the release. The
rest of changes are cosmetic.</p>
<h2 id="libvisual-rabbit-hole">libvisual rabbit hole</h2>
<p>In <code>xmms2-0.9.1</code> <code>libvisual</code> plugin did no work for me. I did not pay
attention to that until Sebastian sent the
<a href="https://github.com/xmms2/xmms2-devel/pull/15">PR #15</a> that fixes render
stutter when player is on pause. I was not able to verify the fix and
accepted the PR as is. The change looked reasonable. A while after
Sebastian helped me to debug problems on my system and rule out the
video subsystem.</p>
<p>Quiz question: why do you think <code>libvisual</code> did not work for me? Was it
a misconfiguration on my side? A bug in <code>xmms2</code> or somewhere else in
it’s dependencies?</p>
<p><a href="https://github.com/Libvisual/libvisual">libvisual</a> is a library to
visualize your music! If you remember the times of Media Player in
Windows 98 it’s that kind of visualization.</p>
<p>There are various plugins that render different videos. An example may
look this way: <a href="https://www.youtube.com/watch?v=cAM-lhiSYcY" class="uri">https://www.youtube.com/watch?v=cAM-lhiSYcY</a>.</p>
<p><code>xmms2</code> provides <code>xmms2-libvisual</code> client application that you can run
and see the visualization. In theory you can just run it and
get the result:</p>
<pre><code>$ xmms2-libvisual
Controls: Arrow keys switch between plugins, TAB toggles fullscreen, ESC quits.
          Each plugin can has its own mouse/key bindings, too.
Note: you can give your favourite libvisual plugin as command line argument.
&lt;hung&gt;</code></pre>
<p>But in my case nothing happened: the client app just hung.</p>
<p>By running <code>strace</code> over it I noticed that <code>xmms2-libvisual</code> used <code>UDP</code>
protocol to connect to server. That was unusual. I expected <code>xmms2</code> to
use shared memory when ran on a local machine.</p>
<p>This was an <code>xmmsclient</code> bug: as some point build system stopped
enabling <code>semtimedop()</code> presence and always fell back to <code>UDP</code>.
Restoring <code>semtimedop()</code> was
<a href="https://github.com/xmms2/xmms2-devel/commit/3d737ed05f8bb7d4449042d617e830f03774bc50">easy</a>:
we needed to set <code>HAVE_SEMTIMEDOP</code> define in visualization client:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/clients/lib/xmmsclient/wscript</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/clients/lib/xmmsclient/wscript</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -37,7 +37,10 @@ def build(bld):</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>         uselib = 'socket time',</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>         use = 'xmmsipc xmmssocket xmmsutils xmmstypes xmmsvisualization',</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>         vnum = '6.0.0',</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="st">-        defines = 'XMMSC_LOG_DOMAIN=&quot;xmmsclient&quot;'</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="va">+        defines = [</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="va">+            'XMMSC_LOG_DOMAIN=&quot;xmmsclient&quot;',</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="va">+            &quot;HAVE_SEMTIMEDOP=%d&quot; % int(bld.env.have_semtimedop),</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="va">+        ]</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>         )</span></code></pre></div>
<p>After the fix the error changed:</p>
<pre><code>$ xmms2-libvisual
Controls: Arrow keys switch between plugins, TAB toggles fullscreen, ESC quits.
          Each plugin can has its own mouse/key bindings, too.
Note: you can give your favourite libvisual plugin as command line argument.
Available plugins:
Error: Actor plugin not found!</code></pre>
<p>This happens because <code>libvisual</code> itself does not render images without
plugins. And it does not provide any default plugins. I needed to
install <code>libvisual-plugins</code> to get something to render!</p>
<p>Due to some specifics of <code>nixpkgs</code> there is no easy way to share plugin
load path by both <code>libvisual</code> and <code>libvisual-plugins</code>. To work it around
I added a
<a href="https://github.com/xmms2/xmms2-devel/commit/749bb0c0f4b45230501a5893eb1cebe659b3bcb7">–libvisual-plugins flag</a>
to be able to load it from arbitrary location.</p>
<p>After that I got empty window. Sebastian helped me with that by
configuring <code>VIS</code> output:</p>
<pre><code>$ xmms2 server config effect.order.0 = visualization</code></pre>
<p>And I got the video back:</p>
<figure>
<img src="http://trofi.github.io/posts.data/279-xmms2-0.9.2-is-out/2023-02-12-10-38-47.png" alt="xmms2 libvisual demo" />
<figcaption aria-hidden="true">xmms2 libvisual demo</figcaption>
</figure>
<p>Yay!</p>
<p>Later I returned to <code>UDP</code> protocol. It ought to work! I added a
<a href="https://github.com/xmms2/xmms2-devel/commit/7ab91c1ec1ba2ff2cd681ac19a80bea957d3fc28">bit of logging</a>
to see if client gets anything from the server:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/clients/lib/xmmsclient/visualization/udp.c</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/clients/lib/xmmsclient/visualization/udp.c</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -21,7 +21,8 @@ udp_timediff (int32_t id, int socket) {</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a> 	for (i = 0; i &lt; 10; ++i) {</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a> 		send (socket, packet, packet_d.size, 0);</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a> 	}</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="st">-	printf (&quot;Syncing &quot;);</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="va">+	printf (&quot;Syncing UDP time &quot;);</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+	fflush (stdout);</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a> 	do {</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a> 		if ((recv (socket, packet, packet_d.size, 0) == packet_d.size) &amp;&amp; (*packet_d.__unaligned_type == 'T')) {</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a> 			struct timeval rtv;</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -45,6 +46,7 @@ udp_timediff (int32_t id, int socket) {</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a> 			       net2ts (packet_d.serverstamp), net2ts (packet_d.clientstamp), tv2ts (&amp;time));</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a> 			 end of debug */</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a> 			putchar('.');</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="va">+			fflush (stdout);</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a> 		}</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a> 	} while (diffc &lt; 10);</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a> 	free (packet);</span></code></pre></div>
<p><code>fflush ()</code> confirmed that server did not answer to client’s requests:</p>
<pre><code>$ xmms2-libvisual
...
Syncing UDP time &lt;cursror here&gt;</code></pre>
<p>This hangup happens due to an interesting case of handling dual-stack
<code>IPv4+IPv6</code> setup this machine has:</p>
<ul>
<li>clients usually try to connect to <code>IPv4</code> first, then <code>IPv6</code> (following
sequence of <code>getaddrinfo()</code> results)</li>
<li>servers on the other hand try to bind to <code>IPv4</code> first, then <code>IPv6</code>.</li>
</ul>
<p>As a result <code>IPv6</code> client was failing to connect <code>IPv4</code> server on the
same machine.</p>
<p>The fix is straightforward: server should bind not to the first
<code>getaddrinfo()</code> address, but all the <code>getaddrinfo()</code> addresses. The only
caveat is that binding on <code>IPv6+IPv4</code> fails if <code>IPv4</code> was already bound.
Setting <code>IPV6_V6ONLY</code> allowed disabling dual-stack default on bound
socket.</p>
<p><a href="https://github.com/xmms2/xmms2-devel/commit/d9d64c1d303593205251494ea4c8847174dd5e9b">The change</a>
is a bit long as it added support for multiple server sockets in the
event loop. It’s gist is around:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/xmms/visualization/udp.c</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/xmms/visualization/udp.c</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -122,41 +119,76 @@ init_udp (xmms_visualization_t *vis, int32_t id, xmms_error_t *err)</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a> 		hints.ai_flags = AI_PASSIVE;</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a> 		hints.ai_protocol = 0;</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a> 		if ((s = getaddrinfo (NULL, G_STRINGIFY (XMMS_DEFAULT_UDP_PORT), &amp;hints, &amp;result)) != 0)</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a> 		// ...</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="va">+		for (rp = result; rp != NULL; rp = rp-&gt;ai_next) {</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="va">+			int sock;</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="va">+			xmms_vis_server_t *s = &amp;servers[opened_servers];</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="va">+			sock = socket (rp-&gt;ai_family, rp-&gt;ai_socktype, rp-&gt;ai_protocol);</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="va">+			if (!xmms_socket_valid (sock)) {</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a> 				continue;</span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a> 			}</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="st">-			if (bind (vis-&gt;socket, rp-&gt;ai_addr, rp-&gt;ai_addrlen) != -1) {</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="st">-				break;</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="st">-			} else {</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="st">-				close (vis-&gt;socket);</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a><span class="va">+			if (bind (sock, rp-&gt;ai_addr, rp-&gt;ai_addrlen) == -1) {</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a><span class="va">+				/* In case we already bound v4 socket</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="va">+				 * and v6 are attempting to set up</span></span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a><span class="va">+				 * dual-stack v4+v6. Try again v6-only</span></span>
<span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a><span class="va">+				 * mode. */</span></span>
<span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a><span class="va">+				if (rp-&gt;ai_family == AF_INET6 &amp;&amp; errno == EADDRINUSE) {</span></span>
<span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a><span class="va">+					int v6only = 1;</span></span>
<span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="va">+					if (setsockopt (sock, IPPROTO_IPV6, IPV6_V6ONLY, &amp;v6only, sizeof (v6only)) == -1) {</span></span>
<span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="va">+						close (socket);</span></span>
<span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a><span class="va">+						continue;</span></span>
<span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a><span class="va">+					}</span></span>
<span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="va">+					if (bind (sock, rp-&gt;ai_addr, rp-&gt;ai_addrlen) == -1) {</span></span>
<span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="va">+						close (socket);</span></span>
<span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a><span class="va">+						continue;</span></span>
<span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a><span class="va">+					}</span></span></code></pre></div>
<p>After the change I got working visualization over <code>UDP</code> a swell.</p>
<h2 id="libvisual-udp-protocol">libvisual UDP protocol</h2>
<p>While debugging stuck <code>visualization</code> stream I got the following picture
of how <code>visual</code> <code>UDP</code> clients are expected to interact with <code>xmms2</code>
server on the wire level:</p>
<ol type="1">
<li>First <code>xmms2-libvisual</code> connects over <code>TCP</code> (or UNIX socket) to
<code>xmms2</code> server using standard <code>XMMS_PATH</code> environment variable. Let’s
call it “control channel” socket.</li>
<li>Then over over “control channel” client sends a
<code>visualization.register()</code> RPC and gets the numeric ID back. At this
point client does not know if it’s an <code>SHM</code> or <code>UDP</code> transport.</li>
<li>Then client tries to open an <code>SHM</code> object with this numeric ID by
sending <code>visualization.init_shm(id)</code> RPC. If it fails client falls back
to try <code>UDP</code> instead.</li>
<li>The client sends <code>visualization.init_udp(id)</code> RPC.</li>
<li>As a response to client RPC server opens <code>UDP</code> socket on a fixed
<code>9667</code> port and waits for incoming messages.</li>
</ol>
<p>Now client and server are ready to negotiate VIS-specific <code>UDP</code> channel.
There are a few types of messages that pass arhound:</p>
<ul>
<li>‘H’ message (hearbeat): <code>"H&lt;id&gt;"</code> (5 bytes)</li>
<li>‘V’ message (data): <code>"V&lt;grace&gt;&lt;server-ts&gt;&lt;size&gt;&lt;samples&gt;"</code> (up to 4k)</li>
<li>‘T’ message (sync): <code>"T&lt;id&gt;&lt;cilent-ts&gt;&lt;server-ts&gt;"</code> (21 bytes)</li>
<li>‘K’ message (disconnect): <code>"K"</code> (1 byte)</li>
</ul>
<p><code>Timestamps</code> are 8 bytes long and consist of a par of 2 values:
4 bytes for seconds and 4 bytes for nanoseconds. Each data <code>sample</code> is a
16-bit value. Usually of PCM format.</p>
<p><code>UDP</code> side of the protocol looks like that:</p>
<ul>
<li>client -&gt; server: sends <code>"H&lt;id&gt;"</code> packet to announce it’s presence.</li>
<li>client -&gt; server: sends <code>"T&lt;id&gt;&lt;client-ts&gt;&lt;server-ts&gt;"</code> to synchronize
time difference and start tracking client staleness.</li>
<li>server -&gt; client: responds with the same
<code>"T&lt;id&gt;&lt;client-ts&gt;&lt;server-ts&gt;"</code> type of packet.</li>
<li>server -&gt; client: periodically send
<code>"V&lt;server-ts&gt;&lt;format&gt;&lt;size&gt;&lt;samples&gt;"</code> data where ‘samples’ contain
an array of PCM values, usually 2048 entries. For 44100Hz
that would cover for about 20ms of data.</li>
<li>server -&gt; client: Eventually client stops sending sync messages (‘T’)
and server sends <code>"K"</code> message and cleans up client handling.</li>
</ul>
<p>It’s not a very robust or secure protocol. But it’s so simple. It allows
for multiple parallel visualization clients to co-exist.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>xmms2</code> is back with <code>libvisual</code> support! <code>VIS</code> protocol is not very
complicated.</p>
<p>To answer the quiz question above the problem was in all of the proposed
cases:</p>
<ul>
<li><code>xmms2</code> did not use <code>UNIXSHM</code> for <code>visualization</code> and fell back to
<code>UDP</code></li>
<li><code>xmms2</code> did not bind to both <code>IPv4</code>+<code>IPv6</code> sockets on dual-stack
system.</li>
<li><code>nixpkgs</code> did not provide <code>libvisual-plugins</code> in any form. A required
dependency to show anything.</li>
<li>I did not configure <code>xmms2</code> server to have a <code>visualization</code> sink.</li>
</ul>
<p>After fixing all of the above I hope more people will be able to play
with <code>libvisual</code>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February 11, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>trying out flakes</title>
    <link href="http://trofi.github.io/posts/278-trying-out-flakes.html" />
    <id>http://trofi.github.io/posts/278-trying-out-flakes.html</id>
    <published>2023-02-05T00:00:00Z</published>
    <updated>2023-02-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>If you are tempted to try <code>flake</code>-based system configuration on your
flake-less <code>NixOS</code> but are a bit afraid of breaking existing setup
it can be done in a few lines of <code>flake.nix</code> without breaking backwards
compatibility. I did it this way:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Desktop system config&quot;</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span>.<span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs/nixos-22.11&quot;</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixosConfigurations</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">nz</span> <span class="op">=</span> nixpkgs.lib.nixosSystem <span class="op">{</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">modules</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>          <span class="ss">./configuration.nix</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>          <span class="co"># Remove the need for `&lt;nixos&gt;` / `&lt;nixos-config&gt;`</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>          <span class="co"># management by `root` channel.</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>          <span class="op">({</span><span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...}</span>: <span class="op">{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            <span class="va">nix</span>.<span class="va">nixPath</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;nixpkgs=</span><span class="sc">${</span>nixpkgs<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;nixos-config=/etc/nixos/configuration.nix&quot;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">];</span> <span class="op">})</span> <span class="op">];</span> <span class="op">};</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The only thing you need to do on top is to create <code>git</code> repository out
of <code>/etc/nixos</code> and you are done:</p>
<pre><code># cd /etc/nixos
# git init
# git add flake.nix # and maybe a few more files you have there
# nixos-rebuild --impure swith</code></pre>
<p>Done! Chances are you don’t even need <code>--impure</code>. One more touch is to
adapt automatic updates if you have those:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># workaround unrecognized --no-build-output</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flake</span> <span class="op">=</span> <span class="st">&quot;/etc/nixos&quot;</span><span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flags</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># did not move out home directory overlay definition yet</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--impure&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># why not all inputs then?</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--update-input&quot;</span> <span class="st">&quot;nixpkgs&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--commit-lock-file&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now it’s all done!</p>
<h2 id="long-story">Long story</h2>
<p>When I started using <code>nix</code> daily I only heard of
<a href="https://nixos.wiki/wiki/Flakes">nix flakes</a> a bit. I did not dare to
try using them. Either for local development or for system-wide
configuration. From the documentation and notes around it felt
incompatible to current channel-based system configuration approach.</p>
<p>My biggest achievement was to run packages right off <code>github</code> pull
requests like:</p>
<pre><code>$ nix run github:NixOS/nixpkgs/pull/175618/merge#firefox</code></pre>
<p>That felt like magic: no need to clone a repository or reconfigure
anything in the system. You just build-and-run the expression out of
internet. But I was not sure I wanted more of <code>flakes</code> :)</p>
<h2 id="the-need-arose">The need arose</h2>
<p>Things have changed when Sandro tried
<a href="https://github.com/trofi/nix-olde/">nix-olde</a> on <code>flake</code>-based system
and got <a href="https://github.com/trofi/nix-olde/issues/2">cryptic backtraces</a>
back.</p>
<p>I realized I completely forgot about <code>flakes</code> existence. By now I had
about a year of experience dealing with channel-based system
configuration. I took it as a good opportunity to have a more detailed
look at <code>flakes</code>.</p>
<p>Normally <code>nix-olde</code> instantiates system derivation out of <code>&lt;nixpkgs&gt;</code>
expression via:</p>
<pre><code>$ nix-instantiate '&lt;nixpkgs/nixos&gt;' -A system
/nix/store/66db0cgpvcbdfmqaz86wfv264w7k63n8-nixos-system-nz-23.05pre-git.drv</code></pre>
<p>And then parses the <code>.drv</code> to extract the details about outdated
packages. <code>&lt;nixpkgs&gt;</code> is usually maintained by <code>root</code> via
<code>nix-channel</code>.</p>
<p>But what about <code>flakes</code>? Now does the equivalent work there if we build
the whole system out of it?</p>
<p>I made the simplest conversion possible by defining my system flake out
of existing <code>/etc/nixos/configuration.nix</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /etc/nixos/flake.nix</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Desktop system config&quot;</span><span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span>.<span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs&quot;</span><span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixosConfigurations</span>.<span class="va">nz</span> <span class="op">=</span> nixpkgs.lib.nixosSystem <span class="op">{</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">modules</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="ss">./configuration.nix</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">];</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Surprisingly that was enough to make <code>nixos-rebuild --impure switch</code>
build my system successfully. Note: I intentionally build it from
<code>nixpkgs</code> <code>master</code> branch and not an <code>unstable</code> channel.</p>
<p>Then I removed <code>&lt;nixpkgs&gt;</code> channel defined by <code>root</code> user. I’m not sure
if I’m holding it wrong but it was enough to break <code>nix-olde</code>. I
<a href="https://github.com/trofi/nix-olde/commit/96cade0106689918c455fa0c9b78a2079aaf29c6">updated</a>
<code>nix-olde</code> to support <code>flake</code> configuration. The gist of it is to
instantiate the system with a new path:</p>
<pre><code>$ nix eval --impure --raw /etc/nixos#nixosConfigurations.$(hostname).config.system.build.toplevel.drvPath
/nix/store/x93fsz8451b0vxyz07db9879gllaq7a5-nixos-system-nz-23.05.20230205.b030e4a.drv</code></pre>
<p>Then I noticed that <code>nix-update</code> and even <code>nix develop -f.</code> relies on
<code>&lt;nixpkgs&gt;</code> variable to be present. I defined compatible variable to
match system’s <code>nixpkgs</code> checkout:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /etc/nixos/flake.nix</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Desktop system config&quot;</span><span class="op">;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span>.<span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs&quot;</span><span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixosConfigurations</span>.<span class="va">nz</span> <span class="op">=</span> nixpkgs.lib.nixosSystem <span class="op">{</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">modules</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>        <span class="ss">./configuration.nix</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">({</span><span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...}</span>: <span class="op">{</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>          <span class="va">nix</span>.<span class="va">nixPath</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;nixpkgs=</span><span class="sc">${</span>nixpkgs<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;nixos-config=/etc/nixos/configuration.nix&quot;</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>          <span class="op">];</span> <span class="op">})</span> <span class="op">];</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That way I could still rebuild my system with
<code>nix build -f nixos system</code> and similar commands. And I did not change
<code>flake.nix</code> since. I still can use all the existing tools that rely on
<code>&lt;nixpkgs&gt;</code> path.</p>
<p>To fix auto-upgrade I had to reconfigure it slightly:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /etc/nixos/configuration.nix</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="co"># workaround unrecognized --no-build-output</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flake</span> <span class="op">=</span> <span class="st">&quot;/etc/nixos&quot;</span><span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flags</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># did not move out home directory overlay definition yet</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--impure&quot;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># why not all inputs then?</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--update-input&quot;</span> <span class="st">&quot;nixpkgs&quot;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--commit-lock-file&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Give all the CPUs to one job at a time.</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--max-jobs&quot;</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>--impure</code> allows file access outside explicit <code>input</code>s (I have a
few overlays lying all over the system). And <code>--update-input nixpkgs</code>
pulls <code>nixpkgs</code> update every time the system tries to update.</p>
<p>The result is not as scary as I initially suspected. This setup did not
break most of my workflows around local <code>nixpkgs</code> checkouts.</p>
<p>Now I can run other packages (similar to <code>nixpkgs</code> input) right from
<code>git</code> state. For example my typical <code>uselex</code> package is defined via git
snapshot:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat cat ~/overlays/uselex/default.nix</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">stdenv</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">ruby_3_1</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">binutils-unwrapped-all-targets</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">unstableGitUpdater</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2022-08-29&quot;</span><span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;5cf79a872f3331ce87171e66cf27c430585f65af&quot;</span><span class="op">;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-0aFJaGLcrrEkOH3cFs2uHjkCUw9ndckngfnb0J1FK7c=&quot;</span><span class="op">;</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="co"># ... more stucff</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I was able to define it’s <code>live</code> version by passing an input explicitly:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat ~/overlays/flake.nix</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;trofi's overlay&quot;</span><span class="op">;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs&quot;</span><span class="op">;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">uselex</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">flake</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span><span class="op">,</span> <span class="va">uselex</span> <span class="op">}</span>@<span class="va">inputs</span><span class="op">:</span> <span class="kw">let</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="va">np</span> <span class="op">=</span> <span class="bu">import</span> nixpkgs <span class="op">{</span> <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span> <span class="op">};</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span> <span class="op">{</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">packages</span>.<span class="st">&quot;</span>x86_64-linux<span class="st">&quot;</span> <span class="op">=</span> <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>      <span class="va">uselex</span> <span class="op">=</span> np.callPackage <span class="ss">./uselex</span> <span class="op">{};</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>      <span class="va">uselex_live</span> <span class="op">=</span> uselex.overrideAttrs <span class="op">(</span><span class="va">oa</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>        <span class="va">version</span> <span class="op">=</span> inputs.uselex.shortRev<span class="op">;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>        <span class="va">src</span> <span class="op">=</span> inputs.uselex<span class="op">;</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>      <span class="op">});</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here I defined 2 packages:</p>
<ul>
<li><code>uselex</code>: a package as it’s defined in <code>uselex/default.nix</code></li>
<li><code>uselex_live</code>: a package that uses <code>master</code> branch from <code>git</code> and
reuses rest of <code>uselex</code> definition.</li>
</ul>
<p>Now I can build both as:</p>
<pre><code>$ cd ~/overlays
$ nix build .#uselex .#uselex_live

$ nix flake info
warning: 'nix flake info' is a deprecated alias for 'nix flake metadata'
warning: Git tree '/home/slyfox/.config/nixpkgs' is dirty
Resolved URL:  git+file:///home/slyfox/overlays/nixpkgs
Locked URL:    git+file:///home/slyfox/overlays/nixpkgs
Description:   trofi's overlay
Path:          /nix/store/s2b6pagz9i55jq71jfp3ml9y2dyl0mlr-source
Last modified: 2023-01-26 22:07:27
Inputs:
├───nixpkgs: github:NixOS/nixpkgs/f69c8b761a683940edeed0c23da1a5b8bd50bed3
└───uselex: github:trofi/uselex/5cf79a872f3331ce87171e66cf27c430585f65af</code></pre>
<p>Using <code>--override-input</code> flag we can redirect default target commit to
locally modified tree or any other commit:</p>
<pre><code># no overrides:
$ nix build .#uselex_live

$ ls -ld result result-1
result -&gt; /nix/store/76qkbdna1y4adbkk9k2g7znw2v3yyr7s-uselex-5cf79a8

# redirect to the local tree:
$ nix build .#uselex_live --override-input uselex ~/dev/git/uselex

• Updated input 'uselex':
    'github:trofi/uselex/5cf79a872f3331ce87171e66cf27c430585f65af' (2022-08-29)
  → 'git+file:///home/slyfox/dev/git/uselex?ref=refs%2fheads%2fmaster&amp;rev=5cf79a872f3331ce87171e66cf27c430585f65af' (2022-08-29)
$ ls -ld result result-1
result -&gt; /nix/store/76qkbdna1y4adbkk9k2g7znw2v3yyr7s-uselex-5cf79a8

# redirect to the arbitrary commit or branch:
$ nix build .#uselex_live --override-input uselex github:trofi/uselex/fe54bc12013a2a28f1638bdd5faa2f81d4d8fd1c

• Updated input 'uselex':
    'github:trofi/uselex/5cf79a872f3331ce87171e66cf27c430585f65af' (2022-08-29)
  → 'github:trofi/uselex/fe54bc12013a2a28f1638bdd5faa2f81d4d8fd1c' (2017-07-28)
$ ls -ld result result-1
result -&gt; /nix/store/82maym4hks1nfcprharxwrpvf7ck6hz4-uselex-fe54bc1</code></pre>
<p>Note how input reports new commit it switches to and encodes it into
package name (as we requested it with <code>version = inputs.uselex.shortRev;</code>).</p>
<p>One can even add a short alias for an arbitrary flake repository:</p>
<pre><code>$ nix registry add ul github:trofi/uselex-flake
$ nix run ul#uselex_live --no-write-lock-file
...
 == SYNOPSIS (uselex-0.0.1)

      uselex.rb - look for USEless EXports in object files

$ nix registry remove ul</code></pre>
<p>And for completeness here is how <code>flake.lock</code> looks like:</p>
<pre><code>{
  &quot;nodes&quot;: {
    &quot;nixpkgs&quot;: {
      &quot;locked&quot;: {
        &quot;lastModified&quot;: 1675628371,
        &quot;narHash&quot;: &quot;sha256-KsAGKX6R5OZ4mvX0v9I8rXoQD62NG8bNq2vDh731fUk=&quot;,
        &quot;owner&quot;: &quot;NixOS&quot;,
        &quot;repo&quot;: &quot;nixpkgs&quot;,
        &quot;rev&quot;: &quot;461ef24010bec9df46f9f982e27441d83a856563&quot;,
        &quot;type&quot;: &quot;github&quot;
      },
      &quot;original&quot;: {
        &quot;owner&quot;: &quot;NixOS&quot;,
        &quot;repo&quot;: &quot;nixpkgs&quot;,
        &quot;type&quot;: &quot;github&quot;
      }
    },
    &quot;root&quot;: {
      &quot;inputs&quot;: {
        &quot;nixpkgs&quot;: &quot;nixpkgs&quot;,
        &quot;uselex&quot;: &quot;uselex&quot;
      }
    },
    &quot;uselex&quot;: {
      &quot;flake&quot;: false,
      &quot;locked&quot;: {
        &quot;lastModified&quot;: 1661761258,
        &quot;narHash&quot;: &quot;sha256-0aFJaGLcrrEkOH3cFs2uHjkCUw9ndckngfnb0J1FK7c=&quot;,
        &quot;owner&quot;: &quot;trofi&quot;,
        &quot;repo&quot;: &quot;uselex&quot;,
        &quot;rev&quot;: &quot;5cf79a872f3331ce87171e66cf27c430585f65af&quot;,
        &quot;type&quot;: &quot;github&quot;
      },
      &quot;original&quot;: {
        &quot;owner&quot;: &quot;trofi&quot;,
        &quot;repo&quot;: &quot;uselex&quot;,
        &quot;type&quot;: &quot;github&quot;
      }
    }
  },
  &quot;root&quot;: &quot;root&quot;,
  &quot;version&quot;: 7
}</code></pre>
<h2 id="parting-words">Parting words</h2>
<p>You don’t have to start from scratch if you are migrating from a typical
<code>/etc/nixos/configuration.nix</code> to <code>flake.nix</code>.</p>
<p>While slightly verbose <code>flakes</code> are not too scary as a concept. They
allow one to encode (and persist) all external inputs into <code>/nix/store</code>
and optionally write it into the <code>flake.lock</code> to be able to restore
exact build environment when needed.</p>
<p><code>flakes</code> still provide flexibility of switching the revisions back and
forth for individual inputs for test purposes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February  5, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>from mcedit to vim</title>
    <link href="http://trofi.github.io/posts/277-from-mcedit-to-vim.html" />
    <id>http://trofi.github.io/posts/277-from-mcedit-to-vim.html</id>
    <published>2023-02-04T00:00:00Z</published>
    <updated>2023-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>It’s a blog post about text editor. You probably want to ignore it :)</p>
<p>I tried <code>vim</code> again and got it to behave close enough to <code>mcedit</code>. Now I
can use it with the following minimal <code>.vimrc</code>:</p>
<pre><code>silent! source $VIMRUNTIME/defaults.vim

colorscheme darkblue
&quot; default color is invisible blue-on-blue
highlight MatchParen ctermbg=green

&quot; just maintain the indent
set autoindent

&quot; copy the indentation style from previous line
set copyindent

&quot; do preserve tab/space mix on change
set preserveindent

&quot; always render tabs even if a single file is open
set showtabline=2

&quot; always render status line below
set laststatus=2

set list
set listchars=tab:&lt;-&gt;,trail:.

&quot; vim enables xterm-style Ctrl-&lt;arrows&gt; keys based on $TERM variable
&quot; name. term=screen-256color does not trigger it. Let's work it around
&quot; by clobbering it.
set term=xterm-256color</code></pre>
<p>And it looks like that:</p>
<figure>
<img src="http://trofi.github.io/posts.data/277-from-mcedit-to-vim/vim.png" alt="my vim pic" />
<figcaption aria-hidden="true">my vim pic</figcaption>
</figure>
<p>If you really want to know my path to <code>vim</code> here is a long story.</p>
<h2 id="ms-dos-times">MS-DOS times</h2>
<p>My first ever encounter with text editors was a monochrome blue/white
LCD display. It was attached to some 286 “portable” computer weighting
about 20 kilograms. It emitted the calming buzzing sound I will never
forget. And it ran
<a href="https://en.wikipedia.org/wiki/Norton_Commander">Norton Commander</a>
as the primary shell.</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/en/1/1b/Norton_Commander_5.51.png" alt="nc.exe pic from wikipedia" />
<figcaption aria-hidden="true">nc.exe pic from wikipedia</figcaption>
</figure>
<p>Others also used <a href="https://ru.wikipedia.org/wiki/Volkov_Commander">Volkov Commander</a>
clone. It looks almost identical to the untrained eye.</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/ru/7/73/Volkov_commander4_screen.png" alt="vc.exe pic from wikipedia" />
<figcaption aria-hidden="true">vc.exe pic from wikipedia</figcaption>
</figure>
<p>They both had an editor built right into file manager accessible via
<code>&lt;F4&gt;</code> key binding. I did not edit many files there and only saw others
doing it.</p>
<h2 id="windows-times">Windows times</h2>
<p>On windows machines I used <a href="https://en.wikipedia.org/wiki/Total_Commander">Total Commander</a>
as a shell and don’t remember much about the editors I used. Bare
<code>notepad</code> was probably a thing. Windows environment did not have many
text files to tweak. Thus it was not important.</p>
<p>The tiny amount of programming I did happened in
<a href="https://en.wikipedia.org/wiki/Turbo_Pascal">Turbo Pascal IDE</a> and in
<a href="https://en.wikipedia.org/wiki/Visual_Studio#6.0_(1998)">Visual Studio 6.0</a>.</p>
<figure>
<img src="https://winworldpc.com/res/img/screenshots/967c1c190fa98b954e706b532193194d0bac135b24e577a11cf12325aeba31cb.png" alt="turbo.exe pic from winworldpc.com" />
<figcaption aria-hidden="true">turbo.exe pic from winworldpc.com</figcaption>
</figure>
<p><code>Turbo Pascal</code> was a great IDE: it had syntax highlighting, go-to-error
navigation, built in compile/build progress reporter, breakpoint
debugger, intuitive compiler flag comboboxes and may other things I did
not appreciate at the time. Being a <code>DOS</code>-based program it looked like a
miracle.</p>
<p>It defined my expectation of the ideal environment.</p>
<h2 id="linux-times">Linux times</h2>
<p>In the first year of university I started writing first non-trivial
programs. Around the same time I switched to <code>Linux</code> as my desktop.</p>
<p><code>Linux</code> (as you might already suspect at this point) was full of text
files one has to tweak to adapt it to your environment. It was even more
important in those day than nowadays. One of the books I bought of
“Linux for dummies” kind allocated about 200 pages on the problem of
getting Russian language (or at least charset) and fonts to work in
various programs: text editors, audio players, <code>gtk</code> apps, <code>qt</code> apps,
<code>x11</code> apps, email programs, file system encodings for interoperability
with dual-booted windows.</p>
<p>To give you a gist of the kind of the problems one encountered: Russian
had 3 popular 8-bit charsets at the time: <code>CP866</code> (used in <code>MS-DOS</code>),
<code>CP1251</code> (used in windows GUI) and <code>KOI8-R</code> used in e-mail and many
<code>Linux</code> distributions (but not all of them!). There was also an
<code>ISO-8859-5</code> I never saw being used in real world.</p>
<h3 id="russian-encodings-digression">Russian encodings digression</h3>
<p>All Russian encoding have their own strange and charming properties.</p>
<p><a href="https://en.wikipedia.org/wiki/KOI8-R">KOI8-R</a> is the
fanciest of the three: it’s main design is to remain readable even if
highest bit of each byte is stripped by unforgiving email or terminal
systems out there that assumed 7-bit ASCII.</p>
<p>So the Cyrilliс text would be mangled into a transliterated version of
Russian:</p>
<pre><code>$ echo 'Ужасы кодировок времен царя Гороха' | iconv -t koi8-r | perl -pe 'tr/\x80-\xFF/\x00-\x7F/' | iconv -f koi8-r
        uVASY KODIROWOK WREMEN CARQ gOROHA

$ echo 'АБВГДЕЁЖЗИЙКЛМПОНРСТУФХЦЧШЩЪЫЬЭЮЯ' | iconv -t koi8-r | perl -pe 'tr/\x80-\xFF/\x00-\x7F/' | iconv -f koi8-r
        abwgde3vzijklmponrstufhc~{}yx|`q

$ echo 'абвгдеёжзийклмнопрстyфxцчшщъыьэюя' | iconv -t koi8-r | perl -pe 'tr/\x80-\xFF/\x00-\x7F/' | iconv -f koi8-r
        ABWGDE#VZIJKLMNOPRSTyFxC^[]_YX\@Q</code></pre>
<p>Some of the letters are missing: it’s not very easy to map 33
Cyrillic letters into 26 Latin ones. You have only one bit to flip and
do translation consistently across upper and lower case. It’s a
marvellous hack.</p>
<p>To clarify: even being a native language speaker it’s not easy to read
such mangled text. But at least you can recognize most words and guess
strange letters. If you know nothing about Cyrillic you can spot the
similarities (and differences) in Cyrillic and Latin alphabets side by
side.</p>
<p>This way of construction means that Cyrillic letters don’t go in
alphabetic order in KOI8-R charset. They are scattered all over the
space. This means that naive sorting based on <code>strcmp()</code> does not
produce anything close to alphabetic sorting.</p>
<p><a href="https://en.wikipedia.org/wiki/Code_page_866">CP866</a> and
<a href="https://en.wikipedia.org/wiki/Windows-1251">CP1251</a> are mostly safe in
this regard.</p>
<p>But they also have their own caveats.</p>
<p>For example in <code>CP1251</code> <code>я</code> letter has <code>0xFF</code> value. Many programs at
that time had a bug of this sort:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">FILE</span> <span class="op">*</span> f <span class="op">=</span> <span class="op">...;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> c<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="op">((</span>c <span class="op">=</span> getc<span class="op">(</span>f<span class="op">))</span> <span class="op">!=</span> EOF<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The bug here is in <code>getc()</code> result (of type <code>int</code>) truncation down to
<code>c</code> (of type <code>char</code>).</p>
<p>In <code>!=</code> comparison <code>signed char</code> systems sign-extend <code>0xFF</code> (<code>(char)-1</code>)
to <code>0xFFffFFff</code> (<code>(int)-1</code>, and <code>EOF</code>).</p>
<p>As a result some text editors (or even <code>FTP</code> and <code>IRC</code> clients and
servers!) unaware of Cyrillic would silently eat rest of your file if
you were to type (or receive!) ‘я’ in it.</p>
<p>While <code>strcmp()</code> produces mostly alphabetical sorting there is one
exception: it’s the letter <code>Ё</code> / <code>ё</code>. It stands outside the rest of
the alphabet probably because it’s not present in all Slavic Cyrillic
alphabets.</p>
<p>It took the ecosystem quite a while to adopt <code>strcoll()</code> style sorting.
And then UTF-8 came and broke it again.</p>
<h2 id="back-to-linux-towards-mc">Back to Linux: towards mc</h2>
<p>Given the proliferation of encoding one’s text editor should better
support all these encodings. Alas, I picked one that does not. I sticked
to something that resembles my good old <code>Norton Commander</code> friend:
<a href="https://en.wikipedia.org/wiki/Midnight_Commander">Midnight Commander</a></p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/2/2e/Mc-screenshot.png" alt="mc pic from wikipedia" />
<figcaption aria-hidden="true">mc pic from wikipedia</figcaption>
</figure>
<p>There I felt at home. Most of the key bindings were the same, functional
keys are nicely documented right on the screen. And built in editor had
a bit of syntax highlighting! What else do you need?!</p>
<p>My system had <code>LANG=ru_RU.KOI8-R</code> locale at the time. It did not have
any troubles with text files in English. Some functional keys on the
other hand were off-by-two in <code>urxvt</code>. But they were working fine on
<code>xterm</code>. So I used <code>xterm</code>.</p>
<p><code>mcedit</code> did not support file encoding different from <code>LC_CTYPE</code> at the
time. In rare moments of dire need I used things like
<a href="https://en.wikipedia.org/wiki/Luit">luit</a> as a cheap hack to get
something edited. I could not get <code>iconv</code> to work right. Fun times.</p>
<h2 id="first-attempt-as-vim">First attempt as vim</h2>
<p>At some point I decided to build
<a href="https://en.wikipedia.org/wiki/Linux_From_Scratch">LFS</a> as a way to
learn <code>Linux</code> internals.</p>
<p>When I built it for the first time I needed an editor at an early stage
of system preparation. I ended up trying <code>vim</code>. Maybe it was a default?
I don’t remember.</p>
<p>I copied <code>.vimrc</code> from my previous distribution (<code>Alt Master 2.2</code>, a
<code>Mandrake</code> sibling). Here it’s full content:</p>
<pre><code>&quot; Begin .vimrc

set nocompatible
set bs=2
&quot; set columns=80
set background=dark
set wrapmargin=8
syntax on
set ruler

set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,koi8-r

set cindent
set shiftwidth=4

&quot; End .vimrc</code></pre>
<p>I had no idea what exactly the above config did. In hindsight it’s worst
bit was the <code>set wrapmargin=8</code> option. In case you are not familiar with
that <code>vim</code> option: it inserts newlines in strings automatically as soon
as you get as close as 8 characters to the visible boundary of the
screen from the right. As in, it inserts newlines in different places
depending on size of your terminal. And I was not used to <code>vim</code> enough
to spot that it does this thing. I had to open files in <code>mcedit</code> later
to find the effect.</p>
<p>In my case the first casualty was <code>/etc/fstab</code>: it wrapped half the
mount options to the new line and I got unbootable system. When I
figured that it was <code>vim</code>’s deed I decided it was too dangerous to use
as it silently corrupts files.</p>
<p>On top of that I did not like black <code>vim</code>’s background: it felt void.
Plus multiple editing modes confused me. I did not understand why you
have to print <code>&lt;ESC&gt;:qa!</code> and sometimes just <code>:qa!</code>. I did not do a
<code>vimtutor</code> as I did not know it existed: I did not pay much attention to
various help banners <code>vim</code> pops at you at start.</p>
<p>Being a default editor in the distribution it felt like a handicap
archaic tool. I though it was not supposed to be a complete editor with
a long list of features. Ironically I thought it’s something primitive
because it started up so quickly.</p>
<h2 id="first-attempt-at-emacs">First attempt at emacs</h2>
<p>A bit later I got a day job related to <code>C++</code>. I started exploring
IDE-like environments. I can only remember <code>Anjuta</code> and <code>Eclipse</code>. There
were a lot more I tried. They all were too slow and opinionated, needed
project files, did not understand <code>autotools</code>-based projects. I quickly
rejected them all.</p>
<p>Around that time I got daily internet access where I found all sorts of
things about how cool <code>Lisp</code> and <code>Emacs</code> are. I started using <code>Emacs</code>
for most of file editing and read a few books on <code>Common Lisp</code>. I did
not write anything sizable in <code>Lisp</code>. Best I could do is to draw an
<code>OpenGL</code> square using <code>verrazano</code> <code>FFI</code> library for <code>sbcl</code>.</p>
<p>In <code>C++</code> land I tried <code>ECB</code>, <code>CEDET</code> and <code>Bovinator</code> for parsing and
autocompletion. The result looked suboptimal (manly because our build
system injected too many defines external parsers did not know about).
The plugins slowed <code>emacs</code> loading a lot. To save on startup time I
tried to use <code>emacsclient</code>. I was using <code>X11</code> version of <code>Emacs</code>.
Switching workspace to edit a file was very inconvenient.</p>
<p>I disabled heavyweight extension and used <code>Emacs</code> itself for a while.</p>
<p>Writing this blog post I found that <code>emacsclient -nw</code> works just as
expected. It seems to do what I needed back then: it starts up quickly
as a client. Maybe I’ll give <code>Emacs</code> another try as well. I’m so used to
it’s keybindings in editor mode.</p>
<h2 id="back-to-mcedit">Back to mcedit</h2>
<p>Disappointed in slow <code>Emacs</code> startup times I settled on <code>mcedit</code> and
used it for most of my editing since. It looked perfect: so close to
<code>nc</code>, trivial to extend syntax highlighting files with new keywords.
Apparently I even contributed
<a href="https://github.com/MidnightCommander/mc/commit/16130f7caa7381663fda8f57f5b46c2b716ec17f">haskell.syntax</a>
and <a href="https://github.com/MidnightCommander/mc/commit/e0eb9ca1cd30cda67732096528e5573a14e5a1f4">ebuild.syntax</a>.</p>
<p>At that time a new <code>mc</code> development team was formed by Russian-speaking
community of <code>mc</code> users to revive stalled upstream development. I joined
and contributed a tiny bit to <code>mc</code>. I like to think I helped with
<code>subversion</code> to <code>git</code> migration, fixed a few dire corner cases in
completion code, fixed a few bugs in <code>FISH</code> file transfer protocol,
basic <code>alacritty</code> support and even support for compilation with
<code>tinycc</code>.</p>
<p>All the above helped me track and use new features in development in
<code>mcedit</code>: vertical block selection (<code>Alt-&lt;arrows&gt;</code>), tab/space
highlighting (<code>Alt-_</code>), file encoding selection (<code>Ctrl-e</code>), tag
completion (<code>ESC-Tab</code>) and many other things I take for granted today.</p>
<p><code>mc</code> was my IDE for many years and <code>mcedit</code> helped editing all the text
files for me. Be it blog posts like this one, <code>Makefile</code>s, <code>C</code> projects,
<code>Haskell</code> projects, <code>/etc/fstab</code> entries. I even successfully patched
binary filnes with it.</p>
<h2 id="various-snags">Various snags</h2>
<p>There are many gnarly bits in <code>mc</code> and <code>mcedit</code>. Most of them stem from
the complex problem space. To name a few:</p>
<ul>
<li><code>mc</code> is full of <code>terminfo</code> overrides (which are sometimes invalid and
outdated) because distributions’ <code>terminfo</code> databases are too old.
Files like <a href="https://github.com/MidnightCommander/mc/blob/master/misc/mc.lib">misc/mc.lib</a>
ought to be empty in a perfect system.</li>
<li><code>mc</code> has to interface with underlying shell (that you can access over
<code>Ctrl-O</code>) by sending shell text commands like <code>cd $dir</code> when you move
around directories and run executables. Path escaping and process
progress is shell-dependent. State tracking is easy to confuse by
running a subshell.</li>
<li><code>mcedit</code> has it’s own (inefficient) syntax highlighter with it’s own
syntax file format. This means most language syntaxes have to be
reimplemented on it. It’s not too bad for simple languages. But very
fragile for languages that allow you to embed another language in it’s
snippets: markdown with code snippets, shell with <code>$(subshell calls   "strings $(more subshell)")</code>.</li>
<li><code>mcedit</code> while being a large part of <code>mc</code> is not the primary feature
of it. <code>mc</code> is primarily a file manager that happens to have an
editor. <code>mcedit</code> does not have that many contributors and lacks an
easy way to extend it. Things like <code>tags</code> completion or <code>aspell</code>
support are implemented directly in C code. There is no easy way to
hack up a simple equivalent.</li>
</ul>
<p>These are not major issues to get something basic to work. My use of
<code>mc</code> for past 20 years is a good indication of that.</p>
<p>Recently I went through the problems of <a href="https://adventofcode.com/2015/">AoC 2015</a>
just to practice in <code>rust</code> a bit more. I encountered a simple <code>json</code>
parsing problem (<code>2015/12</code>). It’s
<a href="https://raw.githubusercontent.com/trofi/AoC/main/2015/12/input">input</a>
is a single line of <code>json</code> text. The line was 37K long. Tiny by today’s
standards.</p>
<p>I selected the line in the browser and pressed <code>Shift+Insert</code> in
<code>mcedit</code> window to paste it.</p>
<p>Guess how long it took to insert the text into an otherwise empty
freshly opened file. 1 second? 10 seconds? 1 year? What would you
expect from your editor?</p>
<p>Got the guesstimate?</p>
<p>It took 40 seconds. What is worse: while pasting is in progress UI shows
you interactively the speed of text insertion (good): first 10K get
inserted within 2-3 second, next 10K take about 10 more seconds maybe,
and next 10K takes 25 This is quadratic behaviour right there (bad).</p>
<p>I thought it’s a minor bug. I knew <code>mc</code> does somewhat complex
arithmetics on multi-byte strings when moves around characters in them.
But it’s not supposed to get that much worse.</p>
<p>I filed a <a href="https://midnight-commander.org/ticket/4421">bug</a> with the
<code>perf</code> dump below to quickly highlight problematic bit:</p>
<pre><code>  26,69%  mc                      [.] edit_buffer_get_utf
  25,02%  mc                      [.] edit_move_forward3
  14,99%  mc                      [.] edit_buffer_get_byte
   9,16%  libglib-2.0.so.0.7400.3 [.] g_utf8_get_char_validated
   5,51%  libglib-2.0.so.0.7400.3 [.] g_unichar_iswide
   4,33%  mc                      [.] edit_buffer_get_bol
   1,88%  mc                      [.] g_utf8_get_char_validated@plt</code></pre>
<p>And got a response that such behaviour is not specific to <code>mcedit</code> and
should plague other editors as well. I though it sounded a bit wrong.
My expectation was that paste speed should be linear to pasted input,
not quadratic.</p>
<p>I tried to find at least one editor that would behave poorly for this
specific use case and found none. Anything I tried was able to do it in
1-2 seconds: <code>vim</code>, <code>emacs -nw</code>, <code>nano</code>, <code>gedit</code>, <code>geany</code>, <code>kwrite</code>,
<code>helix</code>, some <code>Java</code>-based editors I forgot. They all were reasonably
fast.</p>
<p>Unrelated to the above roughly around that time I planned to share one
of my blog posts to wider audience. I knew my text was always full of
typos and I wanted an easy interactive tool to highlight trivial typos
I did. I ran a few tools on my post and they all highlighted typos in
slightly different places: some looked at the code comment, some didn’t,
some used external <code>aspell</code> engine, some used embedded grammar engines.
I settled on <code>vim</code>’s <code>:setlocal spell!</code> magic spell.</p>
<h2 id="vim-again">vim again</h2>
<p>Having got a bit of positive experience with spell checking I decided to
give <code>vim</code> another try. I did not want to write any complex
configuration as I have many editing environments and would prefer to be
able to get an editor into a comfortable state with a few commands or a
few lines in the config.</p>
<p>I went through my initial <code>~/.vimrc</code> from the ancient times to see if I
still needed any of that:</p>
<pre><code>&quot; Begin .vimrc

set nocompatible
set bs=2
&quot; set columns=80
set background=dark
set wrapmargin=8
syntax on
set ruler

set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,koi8-r

set cindent
set shiftwidth=4

&quot; End .vimrc</code></pre>
<p>I found that pesky <code>wrapmargin=8</code> option that inserted unexpected
newlines and disabled it as a first thing.</p>
<p>Then I looked around for a cozy background that <code>mcedit</code> and <code>nc</code> both
had. <code>colorscheme darkblue</code> did the trick.</p>
<p>I grew so fond of <code>mcedit</code>’s style of highlighting <code>&lt;TAB&gt;</code>s and trailing
white space that I felt I absolutely needed an equivalent. Otherwise I
would corrupt <code>Makefile</code>s all the time by expanding <code>&lt;TAB&gt;</code>s to spaces.
Or the other way around. Who knows!</p>
<p>White space highlighting was easy to do with <code>listchars</code>:</p>
<pre><code>set list
set listchars=tab:&lt;-&gt;,trail:.</code></pre>
<p>Another important feature of <code>mcedit</code> was to preserve original
indentation for newly written lines. That I managed to get close enough
with the below:</p>
<pre><code>&quot; just maintain the indent
set autoindent

&quot; copy the indentation style from previous line
set copyindent

&quot; do preserve tab/space mix on change
set preserveindent</code></pre>
<p>I still don’t quite understand what <code>autoindent</code> does, but I get
something mostly reasonable.</p>
<p>Last minor thing that kept confusing me was indistinguishable command
prompt area. It was hard to tell if it’s a command or the rest of edited
document. Thus I added a few explicit visual delimiters with:</p>
<pre><code>&quot; always render tabs even if a single file is open
set showtabline=2

&quot; always render status line below
set laststatus=2</code></pre>
<p>To avoid inserting garbage when I use <code>Ctrl-&lt;arrows&gt;</code> out of old <code>Emacs</code>
/ <code>mcedit</code> habit I added a hack to recognise these keys in <code>tmux</code>:</p>
<pre><code>&quot; vim enables xterm-style Ctrl-&lt;arrows&gt; keys based on $TERM variable
&quot; name. term=screen-256color does not trigger it. Let's work it around
&quot; by clobbering it.
set term=xterm-256color</code></pre>
<p>And that was it! I got good enough <code>vim</code> config as an <code>mcedit</code>
replacement. To clarity: they are absolutely not a drop-in replacement
at this point. They are now both comfortable enough for me to use.</p>
<p>I went through the <code>vimtutor</code> again, wrote a reasonably sized
<a href="https://github.com/trofi/nix-olde/">nix-olde</a> program and got a
pleasant experience.</p>
<p>Along the way I found a few more advanced substitutes for <code>mcedit</code>’s
features:</p>
<ul>
<li>vertical block selectors are done via <code>Ctrl-v</code></li>
<li>adding/removing indent for selected lines are done via <code>Shift-,</code> /
<code>Shift-.</code>.</li>
<li>regex lookups and regex substitutes are occasionally helpful. They
also work on visual selections and not just full files!</li>
</ul>
<p>There are still things that I can’t get used to so easily: I’m used to
INSERT mode that is always on in <code>mcedit</code> and <code>emacs</code>. I still keep
getting lost in which mode I am now and find myself to switch there and
back all the time. I’m not sure it’s how it’s supposed to work or I’m
doing <code>vim</code> wrong.</p>
<h2 id="parting-words">Parting words</h2>
<p>So far I’m using <code>vim</code> for a month and slowly discovering small bits
like <code>netrw</code> and tag completion. My
<a href="https://github.com/trofi/home/blob/master/.vimrc">~/.vimrc</a> still fits
on one screen (if comments are removed).</p>
<p>I switched <code>claws-mail</code> from it’s built-in <code>gtk</code> editor to external
<code>alacritty -e vim %s -c 'set filetype=mail' -c 'setlocal spell!'</code>
command. Now I’m actually enjoying writing emails. It’s not a pain
anymore to paste large chunks of code with proper indentation or getting
through the spelling mistakes.</p>
<p>I also added <a href="https://github.com/philc/vimium">vimium</a> extension in
<code>Firefox</code> to get nicer URL selection and input text navigation.</p>
<p>Maybe <code>vim</code> will stick this time.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February  4, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nix-olde - find outdated NixOS packages</title>
    <link href="http://trofi.github.io/posts/276-nix-olde-find-outdated-nixos-packages.html" />
    <id>http://trofi.github.io/posts/276-nix-olde-find-outdated-nixos-packages.html</id>
    <published>2023-01-19T00:00:00Z</published>
    <updated>2023-01-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>I wrote a <a href="https://github.com/trofi/nix-olde">nix-olde</a> tool to print
outdated packages on your <code>NixOS</code> system. Run it as:</p>
<pre><code>$ git clone https://github.com/trofi/nix-olde
$ cd nix-olde
$ cargo build &amp;&amp; target/debug/nix-olde
...
Fetching 'installed' ...
Fetching 'repology' ...
Fetching 'available' ...
... 'available' done.
... 'installed' done.
... 'repology' done.
repology a52dec &quot;0.8.0&quot; | nixpkgs {&quot;0.7.4&quot;} {&quot;nixos.a52dec&quot;}
repology alsa-lib &quot;1.2.8&quot; | nixpkgs {&quot;1.2.7.2&quot;} {&quot;nixos.alsa-lib&quot;}
...
repology xterm &quot;378&quot; | nixpkgs {&quot;377&quot;} {&quot;nixos.xterm&quot;}
repology xz &quot;5.4.1&quot; | nixpkgs {&quot;5.4.0&quot;} {&quot;nixos.xz&quot;}
repology zxing-cpp-nu-book &quot;2.0.0&quot; | nixpkgs {&quot;1.4.0&quot;} {&quot;nixos.zxing-cpp&quot;}</code></pre>
<p>Here we see all sorts of packages outdated in <code>nixpkgs</code> along with their
versions and versions known to <code>repology.org</code> database and a package
attribute name.</p>
<p>I wrote it for the purpose of tricking you (and myself) to send pull
requests against <a href="https://github.com/NixOS/nixpkgs">nixpkgs</a> to update
some of those outdated packages :). Most of the time there is no major
reason why a specific package is outdated.</p>
<h2 id="more-words">More words</h2>
<p><a href="http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html">A while ago</a> I
shared a set of hacks I use to get a list of outdated packages. My
system has ~1550 packages. How many of them are actually outdated?
Let’s compare that hack with <code>nix-olde</code> result.</p>
<p>The hack looked good enough to catch packages with simple naming scheme
that patches upstream, <code>nixpkgs</code> and <code>repology</code>. It returned 240
packages (about 15%). It’s quite a lot. I would expect not that many.</p>
<p>Moreover, some packages never got into the list: none of <code>python</code>,
<code>perl</code> or <code>haskell</code> are in the report either. I skimmed through all
outdated <a href="https://repology.org/projects/?inrepo=nix_unstable&amp;outdated=1">nix unstable package known to repology</a>
and found a few <code>python</code> and <code>haskell</code> I use. Not good.</p>
<h2 id="nix-olde-improvements"><code>nix-olde</code> improvements</h2>
<p>My hack clearly failed to map some of packages back to <code>repology</code> names.
If I could just print unmapped packages maybe it would be a good
starting point to see what I fail to cover. Thus the tool’s idea was
born.</p>
<p>The idea was simple:</p>
<ul>
<li>get local package list of <strong>installed</strong> packages</li>
<li>get local package list of <strong>available</strong> packages with their <code>nix</code>
attributes out of <code>&lt;nixpkgs&gt;</code> path.</li>
<li><strong>fetch repology list</strong> of available and outdated packages in <code>nixpkgs</code></li>
</ul>
<p>Having looked at <code>list of available packages</code> I realized it’s exactly
the source <code>nixpkgs</code> uses to tell <code>repology</code> what’s in <code>nixpkgs</code>!
It’s hidden in <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/make-tarball.nix#L67">make-tarball.nix</a>:</p>
<pre><code>echo -n '{&quot;version&quot;:2,&quot;packages&quot;:' &gt; tmp
nix-env -f . -I nixpkgs=$src -qa --meta --json --arg config 'import ${./packages-config.nix}' &gt;&gt; tmp
echo -n '}'</code></pre>
<p>Here we extract metadata around <code>&lt;nixpkgs&gt;</code> attributes by passing a
special <code>config</code> that untangles metadata from current system.</p>
<p>Thus, the mapping from installed to available packages is trivial using
the same technique and the same output data.</p>
<p>With help of <a href="https://serde.rs/">serde</a> <code>rust</code> crate I was able to get a
trivial <code>json</code> reader in 2 lines of code.</p>
<p><code>nix-olde</code> reports 391 outdated package (151 more, or about 25% of
packages). That is a substantial improvement over a hack. New additions
are mainly <code>python</code> and <code>perl</code> packages.</p>
<p>As a bonus with <code>--verbose</code> flag I can see now what packages fail to map
an attribute to <code>repology</code> database:</p>
<pre><code>$ ./mkrun.bash -n ~/n --verbose
...
Installed packages missing in available list: [&quot;antlr-runtime-cpp-4.9.3&quot;,
&quot;binutils-patchelfed-ld-2.40&quot;, &quot;binutils-patchelfed-ld-wrapper-2.40&quot;,
&quot;boost-build-boost-1.79.0&quot;, &quot;bootstrap-stage0-binutils-wrapper-&quot;,
&quot;bootstrap-stage0-glibc-bootstrap&quot;, &quot;bootstrap-stage1-gcc-wrapper-&quot;,
&quot;bootstrap-stage2-gcc-wrapper-&quot;, &quot;bootstrap-stage3-gcc-wrapper-&quot;,
&quot;bootstrap-stage4-gcc-wrapper-13.0.0&quot;, &quot;cargo-bootstrap-1.65.0&quot;,
&quot;catalog-legacy-uris.patch&quot;, &quot;compiler-rt-static-wasm32-unknown-wasi-12.0.1&quot;,
&quot;d3-flame-graph-templates-4.1.3&quot;, &quot;dejavu-fonts-full-2.37&quot;,
&quot;dejavu-fonts-minimal-2.37&quot;, &quot;eglexternalplatform-1.1&quot;, &quot;gfortran-13.0.0&quot;,
&quot;gmp-with-cxx-stage3-6.2.1&quot;, &quot;gmp-with-cxx-stage4-6.2.1&quot;,
&quot;i686-w64-mingw32-binutils-2.40&quot;, &quot;i686-w64-mingw32-binutils-wrapper-2.40&quot;,
&quot;i686-w64-mingw32-stage-final-gcc-13.0.0&quot;,
&quot;i686-w64-mingw32-stage-final-gcc-wrapper-13.0.0&quot;,
&quot;i686-w64-mingw32-stage-static-gcc-13.0.0&quot;,
&quot;i686-w64-mingw32-stage-static-gcc-wrapper-13.0.0&quot;, &quot;isl-stage3-0.20&quot;,
&quot;libcxx-static-wasm32-unknown-wasi-12.0.1&quot;,
&quot;libcxxabi-static-wasm32-unknown-wasi-12.0.1&quot;, &quot;libmpc-stage3-1.3.1&quot;,
&quot;linux-config-6.1.6&quot;, &quot;linux-headers-static-6.1&quot;,
&quot;mcfgthreads-i686-w64-mingw32-git&quot;, &quot;mcfgthreads-x86_64-w64-mingw32-git&quot;,
&quot;mingw-w64-i686-w64-mingw32-10.0.0&quot;, &quot;mingw-w64-x86_64-w64-mingw32-10.0.0&quot;,
&quot;mpfr-stage3-4.2.0&quot;, &quot;musl-static-x86_64-unknown-linux-musl-1.2.3&quot;,
&quot;nixos-version&quot;, &quot;nss-cacert-certdata-3.86&quot;,
&quot;python3.10-cryptography-vectors-38.0.4&quot;,
&quot;python3.10-pycryptodome-test-vectors-1.0.10&quot;,
&quot;rakshasa-libtorrent-0.13.8+date=2021-08-07&quot;, &quot;ruby2.7.6-msgpack-1.5.1&quot;,
&quot;ruby2.7.6-neovim-0.9.0&quot;, &quot;rubygems-3.3.20&quot;, &quot;rustc-bootstrap-1.65.0&quot;,
&quot;rustfmt-nightly-1.66.1&quot;, &quot;systemtap-4.5&quot;, &quot;texlive-bin-2022&quot;,
&quot;texlive-core-big.bin-2022&quot;, &quot;vkd3d-1.5&quot;, &quot;wasilibc-static-wasm32-unknown-wasi-17&quot;,
&quot;wasm32-unknown-wasi-clang-wrapper-12.0.1&quot;,
&quot;wasm32-unknown-wasi-llvm-binutils-wrapper-12.0.1&quot;,
&quot;x86_64-unknown-linux-musl-binutils-2.40&quot;,
&quot;x86_64-unknown-linux-musl-binutils-wrapper-2.40&quot;,
&quot;x86_64-unknown-linux-musl-stage-final-gcc-13.0.0&quot;,
&quot;x86_64-unknown-linux-musl-stage-final-gcc-wrapper-13.0.0&quot;,
&quot;x86_64-unknown-linux-musl-stage-static-gcc-13.0.0&quot;,
&quot;x86_64-unknown-linux-musl-stage-static-gcc-wrapper-13.0.0&quot;,
&quot;x86_64-w64-mingw32-binutils-2.40&quot;, &quot;x86_64-w64-mingw32-binutils-wrapper-2.40&quot;,
&quot;x86_64-w64-mingw32-stage-final-gcc-13.0.0&quot;,
&quot;x86_64-w64-mingw32-stage-final-gcc-wrapper-13.0.0&quot;,
&quot;x86_64-w64-mingw32-stage-static-gcc-13.0.0&quot;,
&quot;x86_64-w64-mingw32-stage-static-gcc-wrapper-13.0.0&quot;,
&quot;xmms2-unstable-2022-12-30&quot;]</code></pre>
<p>Entries like <code>bootstrap-stage3-gcc-wrapper</code> are not very interesting:
they are synthetic packages built for bootstrap and should be an alias
to a <code>nixpkgs</code>-specific shell wrapper. I’ll try to filter them out by
default.</p>
<p>Entries like <code>gfortran</code> are <code>nixpkgs</code>-specific forms of <code>gcc</code>. It would
be nice to somehow alias those back to <code>gcc</code> as well. Maybe we should
provide a bit of extra fields in <code>meta</code> section of <code>nixpkgs</code> package
descriptions to make it machine-generated.</p>
<p>Entries like <code>xmms2</code> are the packages from my local overlays. It is
expected to be in the list.</p>
<p>Entries like <code>systemtap</code> look like a mapping bug. Needs more
investigation. At least these are a minority and are easily debuggable
to make <code>nix-olde</code> better reflect.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nix-olde</code> was the first non-trivial program I wrote in <code>rust</code>. The
experience is very pleasant: option parsing and <code>json</code> parsing is
trivial, data types are naive and yet good enough to get the job done.</p>
<p><code>nixpkgs</code> has quite a few outdated packages in base install for my
desktop system: around 25%. Worth improving individual packages and
extending them to add auto-update scripts for <a href="https://ryantm.github.io/nixpkgs-update/r-ryantm/">r-ryantm</a>
to help humans in this task.</p>
<p>Have fun!</p>

<div class="info">
    Posted on January 19, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>nixpkgs bootstrap deep dive</title>
    <link href="http://trofi.github.io/posts/275-nixpkgs-bootstrap-deep-dive.html" />
    <id>http://trofi.github.io/posts/275-nixpkgs-bootstrap-deep-dive.html</id>
    <published>2023-01-05T00:00:00Z</published>
    <updated>2023-01-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<h2 id="the-problem">The problem</h2>
<p>A while ago Thomas
<a href="https://github.com/NixOS/nixpkgs/issues/208412">noticed</a> that
<code>libgcc_s.so</code> used by <code>nixpkgs</code> does not match <code>gcc</code> version it was
supposed to come with. Tl;DR of the issue:</p>
<ul>
<li><code>aarch64</code> uses <code>gcc-11</code> as a default compiler</li>
<li>but somehow default <code>libgcc_s.so</code> (used by many c++ programs) comes
from <code>gcc-9</code></li>
</ul>
<p>This version skew causes issues because <code>gcc-11</code> relies on symbols
exported from <code>libgcc_s.so</code> versions that were added after <code>gcc-9</code>
release. Example taken from <a href="https://github.com/NixOS/nixpkgs/issues/201254">Issue #201254</a>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;atomic&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> foo<span class="op">(</span><span class="dt">int</span> i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   std<span class="op">::</span>atomic<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> f<span class="op">.</span>fetch_add<span class="op">(</span><span class="dv">3</span><span class="op">);</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ g++ --std=c++20 -c test.c -o test.o
$ g++ --std=c++20 -shared -Wl,-z,defs test.o -o libtest.so 

ld: /build/test.o: in function `foo(int)':
test.cpp:(.text+0x2c): undefined reference to `__aarch64_ldadd4_acq_rel'
collect2: error: ld returned 1 exit status</code></pre>
<p>Such link errors are related to atomic operations not directly supported
by CPU. <code>gcc-11</code> and later generates fallback code to call into
<code>libgcc_s.so</code>.</p>
<h2 id="bootstrap-refresher">Bootstrap refresher</h2>
<p>Not too long ago I wrote a bit about
<a href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html">nixpkgs bootstrap intro</a>
in context of bugs related to <code>glibc</code> version lookup. High-level
overview presented there is mostly correct. But some details I got
wrong.</p>
<p>I’ll sort them out here to clarify why version skew happens and how
we could fix it using existing bootstrap framework in <code>nixpkgs</code>.</p>
<h2 id="bootstrap-debugging-tips">Bootstrap debugging tips</h2>
<p>Before the dive into specifics of our issue let’s explore generic
debugging tips to see how runtime and build-time dependencies are laid
out.</p>
<p><strong>Tip 1</strong>: <code>stdenv.cc</code> is the compiler wrapper used to compile apps:</p>
<pre><code>$ nix-build -A stdenv.cc
/nix/store/wn31i3dzwahz6ccws8bs1nwyqrpgsvj7-gcc-wrapper-11.3.0

$ ls result/bin/
addr2line  c++      cpp      g++    ld       nm       ranlib   strings
ar         cc       dwp      gcc    ld.bfd   objcopy  readelf  strip
as         c++filt  elfedit  gprof  ld.gold  objdump  size</code></pre>
<p>It’s called <code>wrapper</code> because <code>gcc</code> and <code>g++</code> are shell scripts that
pass default locations to <code>glibc</code> locations and similar when call
actual <code>gcc</code> binary. That one hides in another package.</p>
<p><strong>Tip 2</strong>: <code>stdenv.cc.cc</code> is the unwrapped compiler binary used by
<code>stdenv.cc</code> wrapper:</p>
<pre><code>$ nix-build -A stdenv.cc.cc
/nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0

$ ls result/bin/
c++     gcc-ranlib                    x86_64-unknown-linux-gnu-g++
cpp     gcov                          x86_64-unknown-linux-gnu-gcc
g++     gcov-dump                     x86_64-unknown-linux-gnu-gcc-11.3.0
gcc     gcov-tool                     x86_64-unknown-linux-gnu-gcc-ar
gcc-ar  lto-dump                      x86_64-unknown-linux-gnu-gcc-nm
gcc-nm  x86_64-unknown-linux-gnu-c++  x86_64-unknown-linux-gnu-gcc-ranlib</code></pre>
<p><strong>Tip 3</strong>: <code>stdenv.__bootPackages</code> refers to package set used to build
<code>stdenv</code>.</p>
<pre><code>$ nix-build -A stdenv
/nix/store/cp65c8nk29qq5cl1wyy5qyw103cwmax7-stdenv-linux
$ nix-build -A stdenv.__bootPackages.stdenv
/nix/store/5ch2gc6i97iw7vlyksdhapqrh7bmiwwj-bootstrap-stage4-stdenv-linux
$ nix-build -A stdenv.__bootPackages.stdenv.__bootPackages.stdenv
/nix/store/f7vl4b9lwflwblqbf3g81xgjji1nldf7-bootstrap-stage3-stdenv-linux

$ nix-build -A stdenv.cc.cc
/nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0

$ ./result/bin/gcc --version | head -n1
gcc (GCC) 11.3.0

$ nix-build -A stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc
/nix/store/p4s4jf7aq6v6z9iazll1aiqwb34aqxq9-bootstrap-tools

$ ./result/bin/gcc --version | head -n1
gcc (GCC) 8.3.0</code></pre>
<p>Here we see that final <code>stdenv.c</code> is <code>gcc-11</code>. It is different from
<code>stage3-stdenv</code> which is <code>gcc-8</code>. This is an <code>x86_64</code> machine, on
<code>aarch64</code> you would see <code>gcc-9</code> in <code>stage3-stdenv</code>.</p>
<p><strong>Tip 4</strong>: <code>nix-store --query --graph $pkg</code> can tell us runtime depends
(closure) of a given package.</p>
<p>For example here is the <strong>runtime</strong> subset of all build-time depends
used for final unwrapped compiler:</p>
<pre><code>$ nix-store --query --graph $(nix-build -A stdenv.cc.cc) | dot -Tsvg &gt; gcc-runtime.svg</code></pre>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/01-gcc-runtime.svg" /></p>
<p><strong>Tip 5</strong>: <code>nix-instantiate</code> is useful to explore the build-time graph.</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc) |
    dot -Tsvg &gt; gcc-buildtime.svg</code></pre>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/02-gcc-buildtime.svg" /></p>
<p>I picked bootstrap (prebuilt) <code>gcc</code> which uses 2 downloaded tarballs:</p>
<ul>
<li><code>busybox</code> executable</li>
<li><code>bootstrap-tools.tar.xz</code> full of executable tools</li>
</ul>
<p><code>unpack-bootstrap-tools.sh</code> is a shell script used to unpack and
relocate <code>bootstrap-tools.tar.xz</code> to final package output directory.</p>
<p>I did not pick final <code>gcc</code> as an example because it pulls in 300
dependencies including bootstrap <code>gcc</code>, 4 variants of <code>binutils</code> and
all their depends. Too large to be meaningful.</p>
<h2 id="breakage-mechanics">Breakage mechanics</h2>
<p>Having glanced at debugging tools let’s get back to our <code>libgcc_s.so.1</code>
problem.</p>
<p>The version skew described in the beginning happens because
<code>libgcc_s.so</code> gets copied into <code>glibc</code>‘s output from <code>gcc</code> it was
compiled with. In fact all of <code>glibc</code> was compiled with <code>bootstrapTools</code>’
<code>gcc-8</code> (and not <code>nixpkgs</code>’ <code>gcc-11</code>!):</p>
<pre><code>$ nix-build -A glibc
/nix/store/ayfr5l52xkqqjn3n4h9jfacgnchz1z7s-glibc-2.35-224
$ strings ./result/lib/libgcc_s.so.1 | grep -F '(GNU)'
GCC: (GNU) 8.3.0
$ strings ./result/lib/libc.so.6 | grep -F '(GNU)'
GCC: (GNU) 8.3.0</code></pre>
<p>It would probably be not be a huge problem if bootstrap <code>gcc</code> was fresh
enough. So why not just update bootstrap <code>gcc</code> in
<code>bootstrap-tools.tar.xz</code> and be done with it?</p>
<p>It is feasible, but not very practical to do on a regular basis. It is
easy to do twice a year, but harder to do with each <code>gcc</code> update
<code>nixpkgs</code> sees.</p>
<p>Also having too fresh <code>bootstrapTools</code> is also a bit tricky as version
downgrades (if we chose to rollback <code>nixpkgs</code>) would also need some
care.</p>
<p>Unfortunately <code>bootstrapTools</code> frequently does not get updated for a few
years and <code>libgcc_s.so</code> is as outdated. Just rebuilding <code>bootstrapTools</code>
would fix the problem for this instance. Until next major <code>libgcc_s.so</code>
update. Not very predictable.</p>
<p>What we could do instead is to update <code>gcc</code> first and then build fresh
<code>glibc</code>.</p>
<p>Let’s see what dependency graph our bootstrap tower has. Can we spot the
staleness problem just by looking at the dependency references?</p>
<p>Let’s focus on just <code>gcc</code> and <code>glibc</code> packages for now and ignore
everything else.</p>
<p>I suggest grepping through the build dependency graph to fish out only
needed details.</p>
<pre><code>nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P '((stdenv|bootstrap).*-&gt;.*(gcc|glibc-[^a-z]))|((gcc|glibc-[^a-z]).*-&gt;.*(stdenv|bootstrap))|[{}]' |
    sed 's/&quot;[0-9a-z]\{32\}-/&quot;/g' | dot -Tsvg &gt; gcc-and-glibc.svg</code></pre>
<p>It’s a scary looking grep, but its idea is to find two types of arrows
in <code>.dot</code> formatted output:</p>
<ul>
<li>arrows from <code>stdenv</code> (or <code>bootstrap</code>) to <code>gcc</code> (or <code>glibc</code>): to find
places where we decide to <strong>build</strong> new <code>gcc</code> (or <code>glibc</code>).</li>
<li>arrows and from <code>gcc</code> (or <code>glibc</code>) to <code>stdenv</code> (or <code>bootstrap</code>): to
find places where we decide to <strong>use</strong> some version of <code>gcc</code> (or
<code>glibc</code>).</li>
</ul>
<p>This crude grep destroys some intermediary arrows and leaves nodes to
hang in the air. In reality all the <code>stdenv</code> nodes are chained in
sequence via compiler wrappers. But grep does capture most of important
details. Here is what <code>.dot</code> generated us
(<a href="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/03-gcc-and-glibc.svg">enlarge the graph</a>):</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/03-gcc-and-glibc.svg" /></p>
<p>The main takeaways from this picture are (aka the Legend):</p>
<ul>
<li><code>glibc</code> is built once (green box) using only bootstrap <code>gcc</code></li>
<li><code>gcc</code> is built once (red box) using only bootstrap <code>gcc</code></li>
<li>yellow boxes are bootstrap seed binaries (<code>gcc</code>, <code>glibc</code> and many others)</li>
</ul>
<p>Once again <code>gcc-wrapper</code> are just wrapper scripts that add
default paths to <code>binutils</code>, to <code>glibc</code> and similar when actual
<code>gcc</code> executable is called. Thus <code>gcc-wrapper</code> nodes don’t denote
<code>gcc</code> binary rebuild.</p>
<p>Now, if we look at the definition of our <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/libraries/glibc/default.nix#L66-L84">glibc expression</a>
we will see how <code>libgcc_s.so</code> gets persisted there:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># When building glibc from bootstrap-tools, we need libgcc_s at RPATH for</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co"># any program we run, because the gcc will have been placed at a new</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co"># store path than that determined when built (as a source for the</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="co"># bootstrap-tools tarball)</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co"># Building from a proper gcc staying in the path where it was installed,</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co"># libgcc_s will now be at {gcc}/lib, and gcc's libgcc will be found without</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co"># any special hack.</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="co"># </span><span class="al">TODO</span><span class="co">: remove this hack. Things that rely on this hack today:</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co"># - dejagnu: during linux bootstrap tcl SIGSEGVs</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="co"># - clang-wrapper in cross-compilation</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Last attempt: https://github.com/NixOS/nixpkgs/pull/36948</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>preInstall = <span class="st">''</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="st">  if [ -f </span><span class="sc">${</span>stdenv.cc.cc<span class="sc">}</span><span class="st">/lib/libgcc_s.so.1 ]; then</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="st">      mkdir -p $out/lib</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="st">      cp </span><span class="sc">${</span>stdenv.cc.cc<span class="sc">}</span><span class="st">/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a><span class="st">      # the .so It used to be a symlink, but now it is a script</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="st">      cp -a </span><span class="sc">${</span>stdenv.cc.cc<span class="sc">}</span><span class="st">/lib/libgcc_s.so $out/lib/libgcc_s.so</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="st">  fi</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="st">''</span>;</span></code></pre></div>
<p>The snippet copies a single file from <code>stdenv.cc.cc</code> attribute path
after <code>glibc</code> is built. In this case <code>stdenv.cc.cc</code> is <code>gcc</code> from
<code>bootstrapTools</code> via <code>bootstrap-stage2-stdenv-linux.drv</code> version of
<code>stdenv</code>. We can see this arrow on the picture as well.</p>
<p>To ease tracing of the origin for this file it would be better to place
a symlink here instead of a file copy. That way we would clearly see
undesired reference instead of resorting to <code>strings</code> call.</p>
<h2 id="an-ideal-bootstrap">An ideal bootstrap</h2>
<p>Clearly our bootstrap is problematic right now as it fails to link a
subset of binaries and seems to use suspiciously old <code>gcc</code> to build
<code>glibc</code> that almost any other package uses.</p>
<p>How would an ideal bootstrap look like?</p>
<p>Let’s settle down on more specific goals our bootstrap should achieve.</p>
<p>If our goal is to get something that is able to link binaries we could
just use <code>bootstrapTools</code> as our <code>stdenv</code>: no need to build anything,
<code>gcc</code>, <code>glibc</code> and <code>libgcc_s.so</code> are all consistent.</p>
<p>The only problem in using <code>bootstrapTools</code> directly is that patching
<code>gcc</code> or <code>glibc</code> will require rebuilding and re-uploading
<code>bootstrapTools</code>. It’s less convenient than just tweaking <code>.nix</code> files
but could be done as well. It’s not that much of added automation on
top of what hydra does today. The security aspect is more nuanced as
these binaries are the foundation of the rest of the build. If somebody
could sneak in malicious code there that would be problematic. Frequent
rebuilds would probably make it simpler (or not :).</p>
<p>Anyway, using <code>bootstrapTools</code> directly is not very convenient for local
toolchain development.</p>
<p>Thus we want something slightly more complicated: we need to build new
set of bootstrap tools using current <code>nixpkgs</code> expressions as target
versions of <code>gcc</code>, <code>glibc</code> and friends and use that instead. This
creates a logical recursion of <code>bootstrapTools</code> -&gt; <code>nixpkgs</code> -&gt;
<code>new-bootstrapTools</code>. But it’s not a fundamental one: we can do one
iteration (or, say, 10 iterations) of the recursion and declare final
result (whatever it is) a good enough fresh set of tools. This is, after
all, how most distributions build and provide toolchains nowadays.</p>
<p>So, when should we stop our rebuild recursion? How do we define good
enough?</p>
<p>More specific goals of bootstrap process could be the following:</p>
<ol type="1">
<li>Get rid of all the references (or copies) of <code>bootstrapTools</code>
binaries.</li>
<li>Avoid use of code generators emitted by <code>bootstrapTools</code> binaries.</li>
</ol>
<p>Goal 2 is a moral equivalent of [1.]: if <code>bootstrapTools</code> contained
a buggy code generator we would like to get rid of its effect by
rebuilding everything using <code>nixpkgs</code> versions of code generators.</p>
<p>As it stands today <code>nixpkgs</code> achieves <code>[1.]</code> but not <code>[2.]</code>.</p>
<p><code>[2.]</code> would help both in correctness and predictability of the final
result. At least we would not get version skews of various components.</p>
<p>On top of that new versions of code generators (like <code>gcc</code> or
<code>binutils</code>) frequently add extra features to the output useful for
performance, portability, safety or other.</p>
<p>From standpoint of “what built what” our current bootstrap process looks
like that:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/04-current-bootstrap.svg" /></p>
<p>Arrows here denote code emitted by generator.</p>
<p>The picture can be summarised as: <code>bootstrapTools</code> build our code
generators (<code>gcc</code>) and generate code for <code>glibc</code>.</p>
<p><strong>Ideal</strong> bootstrap instead could look like this:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/05-ideal-bootstrap.svg" /></p>
<p>Here cyan (rebuilt) and white (used as is) boxes all use the same
version of code generators and runtime libraries that <code>nixpkgs</code>
provides. Completely untangled from <code>bootstrapTools</code>!</p>
<p>The only change from current bootstrap process is an extra intermediate
<code>gcc</code> rebuild.</p>
<h2 id="other-caveats">Other caveats</h2>
<p><code>gcc</code> is not the only code generator that we inherit from
<code>bootstrapTools</code>. We also need to track generators like <code>binutils</code> and
possibly other interpreters and non-trivial data manglers like <code>awk</code>,
<code>bash</code>, <code>install</code>, <code>make</code> and <code>patchelf</code>.</p>
<p>Of the list above <code>binutils</code> and <code>patchelf</code> are probably the most
interesting.</p>
<h2 id="stdenv-bootstrap-tower">stdenv bootstrap tower</h2>
<p>At least now we have a plan: add an extra <code>gcc</code> rebuild step into
bootstrap sequence. Sounds easy. How do we do that?</p>
<p>The rebuild stages are defined in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix#L192-L554">pkgs/stdenv/linux/default.nix</a>.</p>
<p>Let’s talk about stage and package structure a bit.</p>
<p><code>nixpkgs</code> exposes users a set of packages to build. Most of these
packages use <code>stdenv</code> (or other packages) to construct build
environment. <code>nixpkgs</code> package structure is usually presented to
developers as something similar to the below:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/06-nixpkgs-structure-naive.svg" /></p>
<p>The cycles in the graph of packages are forbidden (they require explicit
handling by duplicating packages). Most packages usually pull in <code>stdenv</code>
which exposes <code>gcc</code> in some form. Looks simple.</p>
<p>The only annoyance is that <code>stdenv</code>’s own packages like <code>gcc</code> and <code>glibc</code> do
take part in this graph.</p>
<p>This might mean that <code>gcc</code> and <code>glibc</code> don’t use final <code>stdenv</code>, and they
use previous instances of <code>stdenv</code> instead. Say, something along these lines:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/06-nixpkgs-structure-recurse.svg" /></p>
<p>This picture is a simple extension of previous picture. Given <code>pkgs1</code> set of
packages we can construct <code>pkgs2</code> by building packages in order:</p>
<ul>
<li>first <code>gcc</code></li>
<li>then <code>glibc</code></li>
<li>and finally build <code>xz</code> (with new <code>stdenv</code>)</li>
</ul>
<p>In reality each bootstrap step is split into a few smaller steps where
each handles its own part of <code>stdenv</code> update:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/07-nixpkgs-structure-real.svg" /></p>
<p>While this picture is closer to reality it still simplifies real graph
a bit. Across all 4 (instead of previous 2) package sets we build the same 3
packages as in previous picture:</p>
<ul>
<li>first <code>gcc</code> in <code>pkgs2</code></li>
<li>then <code>glibc</code> in <code>pkgs3</code></li>
<li>then <code>xz</code> in <code>pkgs4</code></li>
</ul>
<p>It might take quite a bit of mental effort to chase through pointers. It
is certainly harder to reason about it.</p>
<p>If you ever wondered how actual <code>gcc</code> attribute then is defined in
<code>pkgs/top-level/all-packages.nix</code> as:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>  inherit <span class="op">(</span><span class="kw">let</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>      <span class="va">num</span> <span class="op">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span><span class="kw">with</span> stdenv.targetPlatform<span class="op">;</span> isVc4 <span class="op">||</span> libc == <span class="st">&quot;relibc&quot;</span><span class="op">)</span> <span class="kw">then</span> <span class="dv">6</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="kw">if</span> <span class="op">(</span>stdenv.targetPlatform.isAarch64 <span class="op">&amp;&amp;</span> stdenv.isLinux<span class="op">)</span> <span class="kw">then</span> <span class="dv">9</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="dv">11</span><span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">numS</span> <span class="op">=</span> <span class="bu">toString</span> num<span class="op">;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> <span class="op">{</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc</span> <span class="op">=</span> pkgs.$<span class="op">{</span><span class="st">&quot;</span>gcc<span class="sc">${</span>numS<span class="sc">}</span><span class="st">&quot;</span><span class="op">};</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">gccFun</span> <span class="op">=</span> callPackage <span class="op">(</span><span class="ss">../development/compilers/gcc</span> <span class="op">+</span> <span class="st">&quot;/</span><span class="sc">${</span>numS<span class="sc">}</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">})</span> gcc gccFun;</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  gcc<span class="op">-</span>unwrapped = gcc.cc;</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  gcc11 = lowPrio <span class="op">(</span>wrapCC <span class="op">(</span>callPackage <span class="ss">../development/compilers/gcc/11</span> <span class="op">{</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inherit</span> noSysDirs<span class="op">;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">reproducibleBuild</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">profiledCompiler</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">libcCross</span> <span class="op">=</span> <span class="kw">if</span> stdenv.targetPlatform <span class="op">!</span>= stdenv.buildPlatform <span class="kw">then</span> libcCross <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>    <span class="va">threadsCross</span> <span class="op">=</span> <span class="kw">if</span> stdenv.targetPlatform <span class="op">!</span>= stdenv.buildPlatform <span class="kw">then</span> threadsCross <span class="kw">else</span> <span class="op">{};</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>    <span class="va">isl</span> <span class="op">=</span> <span class="kw">if</span> <span class="op">!</span>stdenv.isDarwin <span class="kw">then</span> isl_0_20 <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  <span class="op">}))</span>;</span></code></pre></div>
<p>If you are not very well versed in <code>nix</code> language the above is equivalent to:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>  gcc = pkgs.gcc11;</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  gcc<span class="op">-</span>unwrapped = gcc.cc;</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  gcc11 = lowPrio <span class="op">(</span>wrapCC <span class="op">(</span>callPackage <span class="ss">../development/compilers/gcc/11</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span></code></pre></div>
<p>It’s a typically-looking package definition where package description
hides in <code>pkgs/development/compilers/gcc/11/default.nix</code>:
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/compilers/gcc/11/default.nix" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/compilers/gcc/11/default.nix</a></p>
<p>So, back to our goal: we want to add an extra bootstrap step to build <code>gcc</code>.</p>
<p>Let’s trace through existing <code>bootstrapTools</code>’ <code>gcc</code> installation. How
does that get injected into our <code>stdenv</code> tower? It all starts from
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix#L206">bootstrap-stage0</a>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage0&quot;</span><span class="op">;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>      <span class="co"># We thread stage0's stdenv through under this name so downstream stages</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>      <span class="co"># can use it for wrapping gcc too. This way, downstream stages don't need</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>      <span class="co"># to refer to this stage directly, which violates the principle that each</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>      <span class="co"># stage should only access the stage that came before it.</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">ccWrapperStdenv</span> <span class="op">=</span> self.stdenv<span class="op">;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>      <span class="co"># ...</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc-unwrapped</span> <span class="op">=</span> bootstrapTools<span class="op">;</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">})</span></span></code></pre></div>
<p>Looks easy! We just define <code>gcc-unwrapped</code> to point to our
<code>bootstrapTools</code> prebuilt binaries and declare it a success. We also set
something called <code>ccWrapperStdenv</code>. These variables are used in
<code>stageFun</code> defined a few lines above <code>bootstrap-stage0</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># This function builds the various standard environments used during</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># the bootstrap.  In all stages, we build an stdenv and the package</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># set that can be built with that stdenv.</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  stageFun = <span class="va">prevStage</span><span class="op">:</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span> <span class="va">name</span><span class="op">,</span> <span class="va">overrides</span> <span class="op">?</span> <span class="op">(</span><span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{}),</span> <span class="va">extraNativeBuildInputs</span> <span class="op">?</span> <span class="op">[]</span> <span class="op">}</span>:</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">thisStdenv</span> <span class="op">=</span> <span class="bu">import</span> <span class="ss">../generic</span> <span class="op">{</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>name<span class="sc">}</span><span class="st">-stdenv-linux&quot;</span><span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>        <span class="co"># ...</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>        <span class="va">cc</span> <span class="op">=</span> <span class="kw">if</span> prevStage.gcc<span class="op">-</span>unwrapped == <span class="cn">null</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>             <span class="kw">then</span> <span class="cn">null</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>             <span class="kw">else</span> lib.makeOverridable <span class="op">(</span><span class="bu">import</span> <span class="ss">../../build-support/cc-wrapper</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>          <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>name<span class="sc">}</span><span class="st">-gcc-wrapper&quot;</span><span class="op">;</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>          <span class="co"># ...</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>          <span class="va">cc</span> <span class="op">=</span> prevStage.gcc<span class="op">-</span>unwrapped<span class="op">;</span></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>          <span class="va">bintools</span> <span class="op">=</span> prevStage.binutils<span class="op">;</span></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>          <span class="va">libc</span> <span class="op">=</span> getLibc prevStage<span class="op">;</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>          <span class="co"># ...</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>          <span class="va">stdenvNoCC</span> <span class="op">=</span> prevStage.ccWrapperStdenv<span class="op">;</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>        <span class="co"># ...</span></span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> <span class="op">{</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> config overlays<span class="op">;</span></span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>      <span class="va">stdenv</span> <span class="op">=</span> thisStdenv<span class="op">;</span></span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span></code></pre></div>
<p>Here we define <code>stdenv = thisStdenv</code> populated with <code>cc</code> attribute that
refers <code>prevStage.gcc-unwrapped</code> from previous stage (and place it into
a wrapper).</p>
<p><code>bootstrap-stage0</code> was not too bad. Let’s have a peek at <code>bootstrap-stage1</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Create the first &quot;real&quot; standard environment.  This one consists</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># of bootstrap tools only, and a minimal Glibc to keep the GCC</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># configure script happy.</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage1&quot;</span><span class="op">;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Rebuild binutils to use from stage2 onwards.</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">binutils-unwrapped</span> <span class="op">=</span> super.binutils<span class="op">-</span>unwrapped.override <span class="op">{</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>        <span class="va">enableGold</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>        ccWrapperStdenv</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>        gcc-unwrapped coreutils gnugrep<span class="op">;</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>      ${<span class="va">localSystem</span>.<span class="va">libc</span><span class="op">}</span> = getLibc prevStage<span class="op">;</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>      <span class="co"># A threaded perl build needs glibc/libpthread_nonshared.a,</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>      <span class="co"># which is not included in bootstrapTools, so disable threading.</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>      <span class="co"># This is not an issue for the final stdenv, because this perl</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>      <span class="co"># won't be included in the final stdenv and won't be exported to</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># top-level pkgs as an override either.</span></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a>      <span class="va">perl</span> <span class="op">=</span> super.perl.override <span class="op">{</span> <span class="va">enableThreading</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span> <span class="va">enableCrypt</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span> <span class="op">};</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>  }<span class="op">)</span></span></code></pre></div>
<p>Here we use our <code>stdenv</code> to build <code>perl</code>, <code>binutils-unwrapper</code>
and their numerous dependencies.</p>
<p>What packages do we actually build using only <code>stdenv-stage0</code>?</p>
<p>We rely on packages’ dependencies as specified in their <code>default.nix</code>
files. Who knows what is there now. The simplest way to find out is to
query the build graph directly:</p>
<p>Here I assume that most of packages are pulling in
<code>bootstrap-stage1-stdenv</code> directly (without any intermediate steps).</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P &quot;.*bootstrap-stage1-stdenv.*-&gt;.*&quot; | sed 's/&quot;[0-9a-z]\{32\}-/&quot;/g'

&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;perl-5.36.0.drv&quot; [color = &quot;black&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;zlib-1.2.13.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;gnum4-1.4.19.drv&quot; [color = &quot;black&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;expand-response-params.drv&quot; [color = &quot;magenta&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;binutils-2.39.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;binutils-wrapper-2.39.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;bison-3.8.2.drv&quot; [color = &quot;burlywood&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;gettext-0.21.drv&quot; [color = &quot;red&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;xz-5.2.9.drv&quot; [color = &quot;burlywood&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;bash-5.1-p16.drv&quot; [color = &quot;blue&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;binutils-wrapper-2.39.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;texinfo-6.8.drv&quot; [color = &quot;green&quot;];</code></pre>
<p><code>perl</code> and <code>binutils</code> are here. But on top of that we also got <code>zlib</code>,
<code>gnum4</code>, <code>expand-response-params</code>, <code>bison</code>, <code>gettext</code>, <code>xz</code>, <code>bash</code>,
<code>binutils-wrapper</code> and <code>texinfo</code>. Curiously no <code>python</code> or <code>make</code> in the
list.</p>
<p>Now, if we do nothing special most of these dependencies will get
rebuilt on each of our 5 stages of bootstrap: our <code>stdenv</code> usually
changes on each step and normally you need local <code>binutils-unwrapped</code>
for each of them.</p>
<p>To avoid rebuilds of every single one of them we need to pick the
packages and propagate them further. That is done by inheriting them
from previous stage. Just like the cyan arrow on the picture
<a href="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/07-nixpkgs-structure-real.svg">above</a>.</p>
<p>Let’s peek at how <code>bootstrap-stage2</code> does that:</p>
<pre><code>  # 2nd stdenv that contains our own rebuilt binutils and is used for
  # compiling our own Glibc.
  # ...
  (prevStage: stageFun prevStage {
    name = &quot;bootstrap-stage2&quot;;

    overrides = self: super: {
      inherit (prevStage)
        ccWrapperStdenv
        gcc-unwrapped coreutils gnugrep
        perl gnum4 bison;
      # ...
    };
  })</code></pre>
<p>Note that <code>xz</code> or <code>texinfo</code> are not in the list. They will get rebuilt.
I think it’s an omission. Let’s see how many times do we rebuild, say,
<code>xz</code>:</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P &quot;.*bootstrap-stage.*-stdenv.*-&gt;.*xz-5.2.9&quot;

&quot;...-bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;...aw8n-xz-5.2.9.drv&quot; [color = &quot;burlywood&quot;];
&quot;...-bootstrap-stage2-stdenv-linux.drv&quot; -&gt; &quot;...ywnn-xz-5.2.9.drv&quot; [color = &quot;green&quot;];
&quot;...-bootstrap-stage3-stdenv-linux.drv&quot; -&gt; &quot;...mmfc-xz-5.2.9.drv&quot; [color = &quot;burlywood&quot;];
&quot;...-bootstrap-stage4-stdenv-linux.drv&quot; -&gt; &quot;...icqq-xz-5.2.9.drv&quot; [color = &quot;green&quot;];</code></pre>
<p>4 times: In all 4 arrows have different store paths. In every single
stage we rebuild <code>xz</code> on and on. It’s very likely a bug. It’s a simple
tool and we could use just one version of it until the final rebuild.</p>
<p>Let’s do a dirty histogram of all the rebuilds we do. Maybe we have more
of those?</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P &quot; -&gt; &quot; | awk '{print $3}' | sort -u |
    sed 's/&quot;[0-9a-z]\{32\}-/&quot;/g' | sort | uniq -c | sort -n | awk '$1 &gt; 1'

      2 &quot;autoconf-2.71.drv&quot;
      2 &quot;automake-1.16.5.drv&quot;
      2 &quot;bootstrap-stage1-stdenv-linux.drv&quot;
      2 &quot;bootstrap-stage2-stdenv-linux.drv&quot;
      2 &quot;bootstrap-stage4-stdenv-linux.drv&quot;
      2 &quot;bzip2-1.0.8.drv&quot;
      2 &quot;file-5.43.drv&quot;
      2 &quot;help2man-1.49.2.drv&quot;
      2 &quot;hook.drv&quot;
      2 &quot;libtool-2.4.7.drv&quot;
      2 &quot;patchelf-0.15.0.drv&quot;
      2 &quot;perl5.36.0-gettext-1.07.drv&quot;
      3 &quot;binutils-2.39.drv&quot;
      3 &quot;binutils-wrapper-2.39.drv&quot;
      3 &quot;expand-response-params.drv&quot;
      3 &quot;gettext-0.21.drv&quot;
      3 &quot;libxcrypt-4.4.33.drv&quot;
      3 &quot;perl-5.36.0.drv&quot;
      3 &quot;texinfo-6.8.drv&quot;
      3 &quot;zlib-1.2.13.drv&quot;
      4 &quot;bash-5.1-p16.drv&quot;
      4 &quot;xz-5.2.9.drv&quot;</code></pre>
<p>I’d say <code>xz</code> should follow <code>bzip2</code> pattern of rebuilds. <code>bash</code> rebuild
count also looks excessive. So does <code>binutils</code>. All are good candidates
for cleanup.</p>
<p>Let’s move on to existing <code>gcc</code> rebuild to see if it follows the same
override pattern as <code>bootstrapTools</code> one. Its override happens in
<code>bootstrap-stage3</code>:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Construct a third stdenv identical to the 2nd, except that this</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># one uses the rebuilt Glibc from stage2.  It still uses the recent</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># binutils and rest of the bootstrap tools, including GCC.</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage3&quot;</span><span class="op">;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>        ccWrapperStdenv</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>        binutils coreutils gnugrep</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>        perl patchelf linuxHeaders gnum4 bison libidn2 libunistring<span class="op">;</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>      ${<span class="va">localSystem</span>.<span class="va">libc</span><span class="op">}</span> = getLibc prevStage<span class="op">;</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc-unwrapped</span> <span class="op">=</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> <span class="va">makeStaticLibrariesAndMark</span> <span class="op">=</span> <span class="va">pkg</span><span class="op">:</span></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>              lib.makeOverridable <span class="op">(</span>pkg.override <span class="op">{</span> <span class="va">stdenv</span> <span class="op">=</span> self.makeStaticLibraries self.stdenv<span class="op">;</span> <span class="op">})</span></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a>                .overrideAttrs <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="op">{</span> <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>a.pname<span class="sc">}</span><span class="st">-stage3&quot;</span><span class="op">;</span> <span class="op">});</span></span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>        <span class="kw">in</span> super.gcc<span class="op">-</span>unwrapped.override <span class="op">{</span></span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Link GCC statically against GMP etc.  This makes sense because</span></span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a>        <span class="co"># these builds of the libraries are only used by GCC, so it</span></span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a>        <span class="co"># reduces the size of the stdenv closure.</span></span>
<span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a>        <span class="va">gmp</span> <span class="op">=</span> makeStaticLibrariesAndMark super.gmp<span class="op">;</span></span>
<span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a>        <span class="va">mpfr</span> <span class="op">=</span> makeStaticLibrariesAndMark super.mpfr<span class="op">;</span></span>
<span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a>        <span class="va">libmpc</span> <span class="op">=</span> makeStaticLibrariesAndMark super.libmpc<span class="op">;</span></span>
<span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a>        <span class="va">isl</span> <span class="op">=</span> makeStaticLibrariesAndMark super.isl_0_20<span class="op">;</span></span>
<span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Use a deterministically built compiler</span></span>
<span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a>        <span class="co"># see https://github.com/NixOS/nixpkgs/issues/108475 for context</span></span>
<span id="cb20-28"><a href="#cb20-28" aria-hidden="true" tabindex="-1"></a>        <span class="va">reproducibleBuild</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb20-29"><a href="#cb20-29" aria-hidden="true" tabindex="-1"></a>        <span class="va">profiledCompiler</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb20-30"><a href="#cb20-30" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb20-31"><a href="#cb20-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span>
<span id="cb20-32"><a href="#cb20-32" aria-hidden="true" tabindex="-1"></a>    extraNativeBuildInputs = <span class="op">[</span> prevStage.patchelf <span class="op">]</span> <span class="op">++</span></span>
<span id="cb20-33"><a href="#cb20-33" aria-hidden="true" tabindex="-1"></a>      <span class="co"># Many tarballs come with obsolete config.sub/config.guess that don't recognize aarch64.</span></span>
<span id="cb20-34"><a href="#cb20-34" aria-hidden="true" tabindex="-1"></a>      lib.optional <span class="op">(!</span>localSystem.isx86 <span class="op">||</span> localSystem.libc == <span class="st">&quot;musl&quot;</span><span class="op">)</span></span>
<span id="cb20-35"><a href="#cb20-35" aria-hidden="true" tabindex="-1"></a>                   prevStage.updateAutotoolsGnuConfigScriptsHook;</span>
<span id="cb20-36"><a href="#cb20-36" aria-hidden="true" tabindex="-1"></a>  }<span class="op">)</span></span></code></pre></div>
<p>Apart from enabling static library builds it’s our typical <code>gcc-unwrapped</code>
definition.</p>
<p>Then in <code>bootstrap-stage4</code> we explicitly define <code>gcc</code> attribute as a wrapper
against <code>gcc-unwrapped</code> from a previous stage:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Construct a fourth stdenv that uses the new GCC.  But coreutils is</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># still from the bootstrap tools.</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage4&quot;</span><span class="op">;</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>      <span class="co"># Zlib has to be inherited and not rebuilt in this stage,</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>      <span class="co"># because gcc (since JAR support) already depends on zlib, and</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>      <span class="co"># then if we already have a zlib we want to use that for the</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>      <span class="co"># other purposes (binutils and top-level pkgs) too.</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span> gettext gnum4 bison perl texinfo zlib linuxHeaders libidn2 libunistring<span class="op">;</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>      ${<span class="va">localSystem</span>.<span class="va">libc</span><span class="op">}</span> = getLibc prevStage<span class="op">;</span></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">binutils</span> <span class="op">=</span> super.binutils.override <span class="op">{</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Don't use stdenv's shell but our own</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a>        <span class="va">shell</span> <span class="op">=</span> self.bash <span class="op">+</span> <span class="st">&quot;/bin/bash&quot;</span><span class="op">;</span></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Build expand-response-params with last stage like below</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a>        <span class="va">buildPackages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a>          <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span> stdenv<span class="op">;</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-23"><a href="#cb21-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># force gmp to rebuild so we have the option of dynamically linking</span></span>
<span id="cb21-24"><a href="#cb21-24" aria-hidden="true" tabindex="-1"></a>      <span class="co"># libgmp without creating a reference path from:</span></span>
<span id="cb21-25"><a href="#cb21-25" aria-hidden="true" tabindex="-1"></a>      <span class="co">#   stage5.gcc -&gt; stage4.coreutils -&gt; stage3.glibc -&gt; bootstrap</span></span>
<span id="cb21-26"><a href="#cb21-26" aria-hidden="true" tabindex="-1"></a>      <span class="va">gmp</span> <span class="op">=</span> lib.makeOverridable <span class="op">(</span>super.gmp.override <span class="op">{</span> <span class="va">stdenv</span> <span class="op">=</span> self.stdenv<span class="op">;</span> <span class="op">})</span>.overrideAttrs <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="op">{</span> <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>a.pname<span class="sc">}</span><span class="st">-stage4&quot;</span><span class="op">;</span> <span class="op">});</span></span>
<span id="cb21-27"><a href="#cb21-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-28"><a href="#cb21-28" aria-hidden="true" tabindex="-1"></a>      <span class="co"># To allow users' overrides inhibit dependencies too heavy for</span></span>
<span id="cb21-29"><a href="#cb21-29" aria-hidden="true" tabindex="-1"></a>      <span class="co"># bootstrap, like guile: https://github.com/NixOS/nixpkgs/issues/181188</span></span>
<span id="cb21-30"><a href="#cb21-30" aria-hidden="true" tabindex="-1"></a>      <span class="va">gnumake</span> <span class="op">=</span> super.gnumake.override <span class="op">{</span> <span class="va">inBootstrap</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span> <span class="op">};</span></span>
<span id="cb21-31"><a href="#cb21-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-32"><a href="#cb21-32" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc</span> <span class="op">=</span> lib.makeOverridable <span class="op">(</span><span class="bu">import</span> <span class="ss">../../build-support/cc-wrapper</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb21-33"><a href="#cb21-33" aria-hidden="true" tabindex="-1"></a>        <span class="va">nativeTools</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb21-34"><a href="#cb21-34" aria-hidden="true" tabindex="-1"></a>        <span class="va">nativeLibc</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb21-35"><a href="#cb21-35" aria-hidden="true" tabindex="-1"></a>        <span class="va">isGNU</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb21-36"><a href="#cb21-36" aria-hidden="true" tabindex="-1"></a>        <span class="va">buildPackages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb21-37"><a href="#cb21-37" aria-hidden="true" tabindex="-1"></a>          <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span> stdenv<span class="op">;</span></span>
<span id="cb21-38"><a href="#cb21-38" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb21-39"><a href="#cb21-39" aria-hidden="true" tabindex="-1"></a>        <span class="va">cc</span> <span class="op">=</span> prevStage.gcc<span class="op">-</span>unwrapped<span class="op">;</span></span>
<span id="cb21-40"><a href="#cb21-40" aria-hidden="true" tabindex="-1"></a>        <span class="va">bintools</span> <span class="op">=</span> self.binutils<span class="op">;</span></span>
<span id="cb21-41"><a href="#cb21-41" aria-hidden="true" tabindex="-1"></a>        <span class="va">libc</span> <span class="op">=</span> getLibc self<span class="op">;</span></span>
<span id="cb21-42"><a href="#cb21-42" aria-hidden="true" tabindex="-1"></a>        <span class="kw">inherit</span> lib<span class="op">;</span></span>
<span id="cb21-43"><a href="#cb21-43" aria-hidden="true" tabindex="-1"></a>        <span class="kw">inherit</span> <span class="op">(</span>self<span class="op">)</span> stdenvNoCC coreutils gnugrep<span class="op">;</span></span>
<span id="cb21-44"><a href="#cb21-44" aria-hidden="true" tabindex="-1"></a>        <span class="va">shell</span> <span class="op">=</span> self.bash <span class="op">+</span> <span class="st">&quot;/bin/bash&quot;</span><span class="op">;</span></span>
<span id="cb21-45"><a href="#cb21-45" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb21-46"><a href="#cb21-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span>
<span id="cb21-47"><a href="#cb21-47" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span>
<span id="cb21-48"><a href="#cb21-48" aria-hidden="true" tabindex="-1"></a>  }<span class="op">)</span></span></code></pre></div>
<p>We re-wrap <code>binutils</code> and <code>gcc</code> against previous <code>stdenv</code>. That is a bit
more complicated than our initial <code>bootstrapTools</code> dance. I think it’s
only needed to construct final <code>gcc</code> and <code>binutils</code> attributes. It’s not
crucial for bootstrap process but important for final package set.
Packages normally rely on <code>stdenv.cc</code> attribute as a compiler and don’t
usually refer <code>gcc</code> attribute itself directly.</p>
<p>Thus we have a pattern of how to splice an extra stage with <code>gcc</code>
rebuild:</p>
<ul>
<li>in our new stage we need to pass through all the tools next stage
inherits to avoid unnecessary rebuilds and we need to define
<code>gcc-unwrapped</code>.</li>
<li>in stage after we’ll get our result in <code>stdenv</code> automatically.</li>
</ul>
<p>Simple!</p>
<h2 id="first-attempt-at-the-override">First attempt at the override</h2>
<p>The natural place to plug our <code>gcc</code> rebuild is between
<code>bootstrap-stage1</code> (<code>binutils-unwrapped</code> rebuild) and <code>bootstrap-stage2</code>
(where we build special runtime dependencies for <code>glibc</code>).</p>
<p>I copied <code>boostrap-stage2</code> into <code>bootstrap-stage1.5-gcc-unwrapped</code>
and added only <code>gcc-unwrapped</code> definition there:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -278,6 +278,73 @@ in</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>     };</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>   })</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  (prevStage: stageFun prevStage {</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="va">+    name = &quot;bootstrap-stage1.5-gcc-unwrapped&quot;;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="va">+    overrides = self: super: {</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="va">+      inherit (prevStage)</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a><span class="va">+        ccWrapperStdenv</span></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        coreutils gnugrep</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a><span class="va">+        perl gnum4 bison;</span></span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a><span class="va">+      ${localSystem.libc} = getLibc prevStage;</span></span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a><span class="va">+      gcc-unwrapped =</span></span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a><span class="va">+        let makeStaticLibrariesAndMark = pkg:</span></span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a><span class="va">+              lib.makeOverridable (pkg.override { stdenv = self.makeStaticLibraries self.stdenv; })</span></span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a><span class="va">+                .overrideAttrs (a: { pname = &quot;${a.pname}-stage3&quot;; });</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a><span class="va">+        in super.gcc-unwrapped.override {</span></span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a><span class="va">+        # Link GCC statically against GMP etc.  This makes sense because</span></span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a><span class="va">+        # these builds of the libraries are only used by GCC, so it</span></span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a><span class="va">+        # reduces the size of the stdenv closure.</span></span>
<span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a><span class="va">+        gmp = makeStaticLibrariesAndMark super.gmp;</span></span>
<span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a><span class="va">+        mpfr = makeStaticLibrariesAndMark super.mpfr;</span></span>
<span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a><span class="va">+        libmpc = makeStaticLibrariesAndMark super.libmpc;</span></span>
<span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a><span class="va">+        isl = makeStaticLibrariesAndMark super.isl_0_20;</span></span>
<span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a><span class="va">+        # Use a deterministically built compiler</span></span>
<span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a><span class="va">+        # see https://github.com/NixOS/nixpkgs/issues/108475 for context</span></span>
<span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a><span class="va">+        reproducibleBuild = true;</span></span>
<span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a><span class="va">+        profiledCompiler = false;</span></span>
<span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a><span class="va">+      };</span></span>
<span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a><span class="va">+    };</span></span>
<span id="cb22-36"><a href="#cb22-36" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-37"><a href="#cb22-37" aria-hidden="true" tabindex="-1"></a><span class="va">+    # `libtool` comes with obsolete config.sub/config.guess that don't recognize Risc-V.</span></span>
<span id="cb22-38"><a href="#cb22-38" aria-hidden="true" tabindex="-1"></a><span class="va">+    extraNativeBuildInputs =</span></span>
<span id="cb22-39"><a href="#cb22-39" aria-hidden="true" tabindex="-1"></a><span class="va">+      lib.optional (localSystem.isRiscV) prevStage.updateAutotoolsGnuConfigScriptsHook;</span></span>
<span id="cb22-40"><a href="#cb22-40" aria-hidden="true" tabindex="-1"></a><span class="va">+  })</span></span></code></pre></div>
<p>It’s a big but mechanical change. We need to pay some attention to
<code>inherit (prevStage) ...</code> to pass through enough dependencies to
avoid unnecessary rebuilds. I used histograms command above to check
if we are doing something reasonable.</p>
<p>Let’s try if it works!</p>
<pre><code>$ nix build -f. stdenv
...
ld: dwp.o: in function
  `__gnu_cxx::new_allocator&lt;gold::Dwp_output_file::Contribution&gt;
    ::allocate(unsigned long, void const*)':
/nix/store/...-gcc-11.3.0/include/c++/11.3.0/ext/new_allocator.h:116:
    undefined reference to `std::__throw_bad_array_new_length()'
...
collect2: error: ld returned 1 exit status
...
For full logs, run 'nix log /nix/store/...-binutils-2.39.drv'.</code></pre>
<p>Didn’t work.</p>
<p>This is a typical build failure caused by mismatch between code
generated by <code>g++</code> (<code>gcc-11</code> in this case) and symbols provided by
<code>libstdc++</code> (<code>gcc-8</code> in this case). Outdated <code>libstdc++</code> comes from
<code>bootstrapTools</code>’ <code>/lib</code> directory. The same directory where rest of
libraries sits.</p>
<p>Normally other distributions (and <code>gcc</code>’s default build system) use
version-specific paths to <code>libstdc++</code>, like <code>.../lib/gcc/x86_64-pc-linux-gnu/11.3.0/libstdc++.so</code>.
That way parallel <code>gcc</code> installs have a chance to keep their <code>c++</code>
business to themselves and not interfere with one another.</p>
<p>Let’s fix this error the similar way by moving it out of default <code>lib</code>
path:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -17,6 +17,15 @@ else</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    LD_BINARY=$out/lib/ld-*so.?</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a> fi</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="va">+# path to version-specific libraries, like libstdc++.so</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="va">+LIBSTDCXX_SO_DIR=$(echo $out/lib/gcc/*/*)</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="va">+# Move version-specific libraries out to avoid library mix when we</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a><span class="va">+# upgrade gcc.</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="va">+# TODO(trofi): update bootstrap tarball script and tarballs to put them</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a><span class="va">+# into expected location directly.</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a><span class="va">+LD_LIBRARY_PATH=$out/lib $LD_BINARY $out/bin/mv $out/lib/libstdc++.* $LIBSTDCXX_SO_DIR/</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a> # On x86_64, ld-linux-x86-64.so.2 barfs on patchelf'ed programs.  So</span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a> # use a copy of patchelf.</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a> LD_LIBRARY_PATH=$out/lib $LD_BINARY $out/bin/cp $out/bin/patchelf .</span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -25,8 +34,8 @@ for i in $out/bin/* $out/libexec/gcc/*/*/*; do</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a>     if [ -L &quot;$i&quot; ]; then continue; fi</span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>     if [ -z &quot;${i##*/liblto*}&quot; ]; then continue; fi</span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a>     echo patching &quot;$i&quot;</span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a><span class="st">-    LD_LIBRARY_PATH=$out/lib $LD_BINARY \</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a><span class="st">-        ./patchelf --set-interpreter $LD_BINARY --set-rpath $out/lib --force-rpath &quot;$i&quot;</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a><span class="va">+    LD_LIBRARY_PATH=$out/lib:$LIBSTDCXX_SO_DIR $LD_BINARY \</span></span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a><span class="va">+        ./patchelf --set-interpreter $LD_BINARY --set-rpath $out/lib:$LIBSTDCXX_SO_DIR --force-rpath &quot;$i&quot;</span></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true" tabindex="-1"></a> done</span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true" tabindex="-1"></a> for i in $out/lib/librt-*.so $out/lib/libpcre*; do</span></code></pre></div>
<p>The only binary using <code>libstdc++</code> in <code>bootstrapTools</code> is <code>patchelf</code>. We
had to extend its <code>RUNPATH</code> as well.</p>
<p>Once we fixed that the next failure happens way later, in <code>bootstrap-stage4-gcc</code>:</p>
<pre><code>../../gcc-11.3.0/gcc/ggc-common.c: In function 'void report_heap_memory_use()':
../../gcc-11.3.0/gcc/ggc-common.c:1018:23:
  error: 'mallinfo2' was not declared in this scope; did you mean 'mallinfo'?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~

For full logs, run 'nix log /nix/store/..-gcc-11.3.0.drv'.</code></pre>
<p><code>mallinfo2</code> is a somewhat recent <code>glibc</code> symbol from <code>glibc-2.33</code>. Our
<code>bootstrapTools</code>’ <code>glibc</code> version is <code>2.27</code>. Our <code>nixpkgs</code> <code>glibc</code> version
is <code>2.35</code>.</p>
<p><code>bootstrap-stage4</code> should already have a <code>nixpkgs</code> <code>glibc</code>. Unless I
broke its wrapper registration after I rebuilt <code>gcc</code>.</p>
<p>Normally <code>gcc</code> should be reasonably portable across older <code>glibc</code>
versions (and even non-<code>glibc</code>).</p>
<p>Checking <code>gcc</code>’s source code it indeed looks reasonable:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Somewhere in gcc/ggc-common.cc</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>report_heap_memory_use <span class="op">()</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(HAVE_MALLINFO) || defined(HAVE_MALLINFO2)</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef HAVE_MALLINFO2</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#define MALLINFO_FN mallinfo2</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#define MALLINFO_FN mallinfo</span></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>quiet_flag<span class="op">)</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot; {heap &quot;</span> PRsa <span class="op">(</span><span class="dv">0</span><span class="op">)</span> <span class="st">&quot;}&quot;</span><span class="op">,</span></span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>             SIZE_AMOUNT <span class="op">(</span>MALLINFO_FN <span class="op">().</span>arena<span class="op">));</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Let’s check its <code>config.log</code> to see why <code>HAVE_MALLINFO2</code> was
detected as available.</p>
<p>I ran the stdenv build with <code>--keep-failed</code> to get full <code>gcc</code>’s
build tree around when it fails:</p>
<pre><code>nix-build -A stdenv --keep-failed
...
note: keeping build directory '/tmp/nix-build-gcc-11.3.0.drv-1'
error: builder for '/nix/store/8vx2w68ihszs71kfysm145y71lkp79mj-gcc-11.3.0.drv' failed with exit code 2;

$ fgrep -A3 mallinfo2 /tmp/nix-build-gcc-11.3.0.drv-1/build/gcc/config.log
configure:10410: checking for mallinfo2
configure:10410: g++ -std=c++11 -o conftest -g    -static-libstdc++ -static-libgcc   conftest.cpp  &gt;&amp;5
configure:10410: $? = 0
configure:10410: result: yes

$ fgrep TARGET_GLIBC /tmp/nix-build-gcc-11.3.0.drv-1/build/gcc/config.log
#define TARGET_GLIBC_MAJOR 2
#define TARGET_GLIBC_MINOR 35</code></pre>
<p><code>gcc</code> and <code>glibc</code> both look fresh enough. That means I failed at
registering new <code>glibc</code> headers perhaps? Let’s check.</p>
<p>Making sure we test a reasonable attribute:</p>
<pre><code>$ nix-build -A stdenv.__bootPackages.stdenv.cc.cc
...
../../gcc-11.3.0/gcc/ggc-common.c: In function 'void report_heap_memory_use()':
../../gcc-11.3.0/gcc/ggc-common.c:1018:23: error: 'mallinfo2' was not declared in this scope; did you mean 'mallinfo'?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~</code></pre>
<p>Diving into expression:</p>
<pre><code>$ nix develop -i -f. stdenv.__bootPackages.stdenv.cc.cc
bash-5.1$ dev&gt; unpackPhase
unpacking source archive /nix/store/lask01x6hyji5sd06f6yc9nz3rxcf2ia-gcc-11.3.0.tar.xz
source root is gcc-11.3.0
setting SOURCE_DATE_EPOCH to timestamp 1650529937 of file gcc-11.3.0/MD5SUMS

bash-5.1$ dev&gt;cd gcc-11.3.0
bash-5.1$ dev&gt;configurePhase
fixing libtool script ./libgo/config/ltmain.sh
...
config.status: creating Makefile

bash-5.1$ dev&gt;buildPhase
...
In file included from ../.././gcc/ggc-common.c:25:
../.././gcc/ggc-common.c: In function ‘void report_heap_memory_use()’:
../.././gcc/ggc-common.c:1018:23: error: ‘mallinfo2’ was not declared in this scope; did you mean ‘mallinfo’?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~
...
make[3]: Leaving directory '/home/slyfox/dev/git/nixpkgs-staging-bootstrap/gcc-11.3.0/host-x86_64-unknown-linux-gnu/gcc'
make[2]: *** [Makefile:4793: all-stage1-gcc] Error 2</code></pre>
<p>Success! We got the same build failure!</p>
<p>Now we can run the command manually to explore its breakage:</p>
<pre><code>bash-5.1$ dev&gt;cd host-x86_64-unknown-linux-gnu/gcc
bash-5.1$ dev&gt;g++ -std=c++11  -fno-PIE -c   -g -DIN_GCC     -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag -Wno-format -Wmissing-format-attribute -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings -fno-common  -DHAVE_CONFIG_H -I. -I. -I../.././gcc -I../.././gcc/. -I../.././gcc/../include -I../.././gcc/../libcpp/include -I../.././gcc/../libcody -I/nix/store/14vlw51dg2n6kb0r6qgb077v6ryb638g-gmp-with-cxx-stage3-6.2.1-dev/include -I/nix/store/kfk03b53z547gydfslv474sfarza17sm-mpfr-stage3-4.1.1-dev/include -I/nix/store/l4x6j77hakm6lwgzvc50hb4i45ck92a0-libmpc-stage3-1.2.1/include  -I../.././gcc/../libdecnumber -I../.././gcc/../libdecnumber/bid -I../libdecnumber -I../.././gcc/../libbacktrace -I/nix/store/qjdmf5pwdlgzf73lkkvpxm9s6l32wf2f-isl-stage3-0.20/include  -o ggc-common.o -MT ggc-common.o -MMD -MP -MF ./.deps/ggc-common.TPo ../.././gcc/ggc-common.c
In file included from ../.././gcc/ggc-common.c:25:
../.././gcc/ggc-common.c: In function ‘void report_heap_memory_use()’:
../.././gcc/ggc-common.c:1018:23: error: ‘mallinfo2’ was not declared in this scope; did you mean ‘mallinfo’?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~
../.././gcc/system.h:1262:26: note: in definition of macro ‘SIZE_SCALE’
 1262 | #define SIZE_SCALE(x) (((x) &lt; 10 * ONE_K \
      |                          ^
../.././gcc/ggc-common.c:1024:14: note: in expansion of macro ‘SIZE_AMOUNT’
 1024 |              SIZE_AMOUNT (MALLINFO_FN ().arena));
      |              ^~~~~~~~~~~
../.././gcc/ggc-common.c:1024:27: note: in expansion of macro ‘MALLINFO_FN’
 1024 |              SIZE_AMOUNT (MALLINFO_FN ().arena));
      |                           ^~~~~~~~~~~</code></pre>
<p>Let’s check include order by adding ‘-v’ option:</p>
<pre><code>bash-5.1$ dev&gt;g++ -v -std=c++11  -fno-PIE ... ../.././gcc/ggc-common.c
#include &lt;...&gt; search starts here:
 .
 ../.././gcc
 ../.././gcc/../include
 ../.././gcc/../libcpp/include
 ../.././gcc/../libcody
 ../.././gcc/../libdecnumber
 ../.././gcc/../libdecnumber/bid
 ../libdecnumber
 ../.././gcc/../libbacktrace
 /run/current-system/sw/include
 /nix/store/xa81wrm1vpbfy090448mjsg6zh5sifbb-gettext-0.21/include
 /nix/store/14vlw51dg2n6kb0r6qgb077v6ryb638g-gmp-with-cxx-stage3-6.2.1-dev/include
 /nix/store/kfk03b53z547gydfslv474sfarza17sm-mpfr-stage3-4.1.1-dev/include
 /nix/store/gdkid16s49qn2g5cbyr9xq6yqj55xgk0-gmp-with-cxx-6.2.1-dev/include
 /nix/store/l4x6j77hakm6lwgzvc50hb4i45ck92a0-libmpc-stage3-1.2.1/include
 /nix/store/v6za3bc8gpddggqgivjs1adzgc9c86mz-libxcrypt-4.4.33/include
 /nix/store/qjdmf5pwdlgzf73lkkvpxm9s6l32wf2f-isl-stage3-0.20/include
 /nix/store/5hzpyz2m5ipsdsv017y6pzgg39p10ici-zlib-1.2.13-dev/include
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../include/c++/11.3.0
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../include/c++/11.3.0/x86_64-unknown-linux-gnu
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../include/c++/11.3.0/backward
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/include
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/include
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/include-fixed
 /nix/store/nm7fxi26avig3arwpasfy0avfwyb41i3-bootstrap-stage0-glibc-bootstrap/include
 /nix/store/jn50ph1kl1h9x4qjs6hd6944afijaadh-glibc-2.35-224-dev/include</code></pre>
<p>Last two lines are the culprit: we see both headers from bootstrap
<code>...-bootstrap-stage0-glibc-bootstrap/include</code> (goes first) and from
<code>...-glibc-2.35-224-dev/include</code> (goes second).</p>
<p>That is part of our problem. It would not be too bad if this include
order was consistent across compiler calls and we would use bootstrap
<code>glibc</code> consistently.</p>
<p><code>glibc-bootstrap</code> header lookup path was embedded into <code>gcc</code> when we
built it at <code>bootstrap-stage1.5</code> step.</p>
<p>Build log for that <code>gcc</code> contains
<code>--with-native-system-header-dir=/nix/store/nm7fxi26avig3arwpasfy0avfwyb41i3-bootstrap-stage0-glibc-bootstrap/include</code>
reference. Ideally we should have a way to make it lower priority than
<code>/nix/store/jn50ph1kl1h9x4qjs6hd6944afijaadh-glibc-2.35-224-dev/include</code>.</p>
<p><code>-I</code> inserts headers too early: it prepends <code>fixincludes</code> and
<code>gcc</code>-wrapped headers. <code>-idirafter</code> inserts headers too late: after an
existing <code>...-bootstrap-stage0-glibc-bootstrap/include</code> entry.</p>
<p>How can we do something in the middle?</p>
<p>Luckily there is a workaround: if we pass <code>--sysroot=...</code> to the
compiler it will throw away default <code>--with-native-system-header-dir</code>
value as if it was never passed. And it also keeps the rest of includes:
<code>fixincludes</code>, <code>c++-headers</code> and so on.</p>
<p>Thus the hack:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/build-support/cc-wrapper/default.nix</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/build-support/cc-wrapper/default.nix</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -336,7 +336,7 @@ stdenv.mkDerivation {</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>       touch &quot;$out/nix-support/libc-ldflags&quot;</span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>       echo &quot;-B${libc_lib}${libc.libdir or &quot;/lib/&quot;}&quot; &gt;&gt; $out/nix-support/libc-crt1-cflags</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>     '' + optionalString (!(cc.langD or false)) ''</span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="st">-      echo &quot;-idirafter ${libc_dev}${libc.incdir or &quot;/include&quot;}&quot; &gt;&gt; $out/nix-support/libc-cflags</span></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      echo &quot;--sysroot=/nix/dir/does/not/exist -idirafter ${libc_dev}${libc.incdir or &quot;/include&quot;}&quot; &gt;&gt; $out/nix-support/libc-cflags</span></span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a>     '' + optionalString (isGNU &amp;&amp; (!(cc.langD or false))) ''</span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a>       for dir in &quot;${cc}&quot;/lib/gcc/*/*/include-fixed; do</span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a>         echo '-idirafter' ''${dir} &gt;&gt; $out/nix-support/libc-cflags</span></code></pre></div>
<p>With the above I could build <code>stdenv</code>!</p>
<pre><code>$ nix build -f. stdenv</code></pre>
<p>Yay?</p>
<p>Let’s build something more substantial:</p>
<pre><code>nix-build -A libffi
error: builder for '/nix/store/dsi4dkc04wgcz5fr0z1zrn92269g03zd-dejagnu-1.6.3.drv' failed with exit code 2;
       last 10 log lines:
       &gt;
       &gt; # of expected passes            300
       &gt; DejaGnu version    1.6.3
       &gt; Expect version   5.45.4
       &gt; Tcl version     8.6
       &gt;
       &gt; /nix/store/jkk3n9lgqryg76w103ix62gxh32b4ywa-bash-5.2-p15/bin/bash: line 4:  2854 Aborted                 (core dumped) ../runtest --tool $tool --srcdir $srcdir
       &gt; make[1]: *** [Makefile:1097: check-DEJAGNU] Error 1
       &gt; make[1]: Leaving directory '/build/dejagnu-1.6.3/build'
       &gt; make: *** [Makefile:1307: check-am] Error 2
       For full logs, run 'nix log /nix/store/dsi4dkc04wgcz5fr0z1zrn92269g03zd-dejagnu-1.6.3.drv'.
error: 1 dependencies of derivation '/nix/store/y2a8jwf1fx3vjnfwnayrj7yqcpb3r6gr-libffi-3.4.4.drv' failed to build</code></pre>
<p>The crash fails due to missing <code>libgcc_s.so</code> in <code>glibc</code>’s output:</p>
<pre><code>$ nix-build -A glibc
$ ls result/lib/libgcc_s.so
ls: cannot access 'result/lib/libgcc_s.so': No such file or directory</code></pre>
<p>But it was there before. And caused us all sorts of problems.</p>
<p>Adding a bit of logging to see if the <code>glibc</code> file copy hook executed
at all:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -75,6 +75,9 @@ callPackage ./common.nix { inherit stdenv; } {</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a>     # - clang-wrapper in cross-compilation</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a>     # Last attempt: https://github.com/NixOS/nixpkgs/pull/36948</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a>     preInstall = ''</span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="va">+      echo &quot;We are in preInstall hook. Does ${stdenv.cc.cc} provide a libgcc?&quot;</span></span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      ls -l ${stdenv.cc.cc}/lib</span></span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a>       if [ -f ${stdenv.cc.cc}/lib/libgcc_s.so.1 ]; then</span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a>           mkdir -p $out/lib</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a>           cp ${stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></code></pre></div>
<p>Hook did execute and has shown no files there. No copying happens
because those libraries hide in a non-default <code>.lib</code> output of
<code>stdenv.cc.cc</code>:</p>
<pre><code>$ nix-build -A stdenv.cc.cc
/nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0

$ nix-build -A stdenv.cc.cc.lib
/nix/store/wprxx5zkkk13hpj6k1v6qadjylh3vq9m-gcc-11.3.0-lib

$ ls /nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0/lib
gcc        libasan_preinit.o  libcc1.a   libgomp.spec  libitm.spec  liblsan_preinit.o  libsanitizer.spec  libssp_nonshared.a  libstdc++fs.a  libtsan.a          libubsan.a
libasan.a  libatomic.a        libgomp.a  libitm.a      liblsan.a    libquadmath.a      libssp.a           libstdc++.a         libsupc++.a    libtsan_preinit.o

$ ls /nix/store/wprxx5zkkk13hpj6k1v6qadjylh3vq9m-gcc-11.3.0-lib/lib
libasan.la        libatomic.so        libcc1.so.0      libgomp.so        libitm.so.1      liblsan.so.0.0.0      libssp.la            libstdc++fs.la       libstdc++.so.6.0.29-gdb.py  libtsan.so.0.0.0
libasan.so        libatomic.so.1      libcc1.so.0.0.0  libgomp.so.1      libitm.so.1.0.0  libquadmath.la        libssp_nonshared.la  libstdc++.la         libsupc++.la                libubsan.la
libasan.so.6      libatomic.so.1.2.0  libgcc_s.so      libgomp.so.1.0.0  liblsan.la       libquadmath.so        libssp.so            libstdc++.so         libtsan.la                  libubsan.so
libasan.so.6.0.0  libcc1.la           libgcc_s.so.1    libitm.la         liblsan.so       libquadmath.so.0      libssp.so.0          libstdc++.so.6       libtsan.so                  libubsan.so.1
libatomic.la      libcc1.so           libgomp.la       libitm.so         liblsan.so.0     libquadmath.so.0.0.0  libssp.so.0.0.0      libstdc++.so.6.0.29  libtsan.so.0                libubsan.so.1.0.0</code></pre>
<p>It happened to work because <code>bootstrapTools</code> is a derivation with single
<code>out</code> output and <code>gcc</code> from <code>nixpkgs</code> has slightly different structure.
Thus making the copy hack more portable:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -75,11 +75,11 @@ callPackage ./common.nix { inherit stdenv; } {</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>     # - clang-wrapper in cross-compilation</span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>     # Last attempt: https://github.com/NixOS/nixpkgs/pull/36948</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>     preInstall = ''</span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a><span class="st">-      if [ -f ${stdenv.cc.cc}/lib/libgcc_s.so.1 ]; then</span></span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      if [ -f ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so.1 ]; then</span></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>           mkdir -p $out/lib</span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true" tabindex="-1"></a><span class="st">-          cp ${stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true" tabindex="-1"></a><span class="va">+          cp ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true" tabindex="-1"></a>           # the .so It used to be a symlink, but now it is a script</span>
<span id="cb38-13"><a href="#cb38-13" aria-hidden="true" tabindex="-1"></a><span class="st">-          cp -a ${stdenv.cc.cc}/lib/libgcc_s.so $out/lib/libgcc_s.so</span></span>
<span id="cb38-14"><a href="#cb38-14" aria-hidden="true" tabindex="-1"></a><span class="va">+          cp -a ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so $out/lib/libgcc_s.so</span></span>
<span id="cb38-15"><a href="#cb38-15" aria-hidden="true" tabindex="-1"></a>       fi</span>
<span id="cb38-16"><a href="#cb38-16" aria-hidden="true" tabindex="-1"></a>     '';</span></code></pre></div>
<p>Trying again:</p>
<pre><code>$ ls $(nix-build -A glibc)/lib/libgcc_s.so.1
...
/nix/store/li0dy2746f4731kd15y76qcr072b0szp-glibc-2.35-224/lib/libgcc_s.so.1</code></pre>
<p>At last!</p>
<p>There is one minor annoyance we need to sort out: <code>libgcc_s.so.1</code> remembers
<code>glibc</code> it was linked against in its <code>RUNPATH</code>:</p>
<pre><code>$ readelf -aW $(nix-build -A glibc)/lib/libgcc_s.so.1 | fgrep RUNPATH
0x000000000000001d (RUNPATH)            Library runpath:
    [/nix/store/nm7fxi26avig3arwpasfy0avfwyb41i3-bootstrap-stage0-glibc-bootstrap/lib]</code></pre>
<p>It should refer instead to <code>glibc</code> we just built. Let’s clobber the runpath:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -80,6 +80,9 @@ callPackage ./common.nix { inherit stdenv; } {</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>           cp ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>           # the .so It used to be a symlink, but now it is a script</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>           cp -a ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so $out/lib/libgcc_s.so</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a><span class="va">+          # wipe out reference to previous libc it was built against</span></span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="va">+          chmod +w $out/lib/libgcc_s.so.1</span></span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a><span class="va">+          patchelf --set-rpath $out/lib $out/lib/libgcc_s.so.1</span></span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a>       fi</span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a>     '';</span></code></pre></div>
<p>It’s a safe operation in this case as we simulate <code>glibc</code> binary upgrade.
As <code>glibc</code> is backwards compatible it should not cause issues.
And in practice <code>libgcc_s.so.1</code> has almost no code that depends on <code>glibc</code>.</p>
<p>Now it looks better:</p>
<pre><code>$ readelf -aW $(nix-build -A glibc)/lib/libgcc_s.so.1 | fgrep RUNPATH
...
 0x000000000000001d (RUNPATH)            Library runpath:
     [/nix/store/mjf0zgkdd7prfaqh1y00q4xmphmz87p5-glibc-2.35-224/lib]</code></pre>
<p>After that I was able to build full <code>stdenv</code> and a few <code>c++</code> programs.</p>
<p>Proposed the change as
<a href="https://github.com/NixOS/nixpkgs/pull/209063">PR #209063</a>.</p>
<h2 id="the-clang-wrapper">The clang wrapper</h2>
<p>Surely done now?!</p>
<p>Overnight I ran the build against my whole set of system packages. Most
of them succeeded, but <code>vte</code> failed as:</p>
<pre><code>&gt; C compiler for the host machine: clang (clang 11.1.0 &quot;clang version 11.1.0&quot;)
&gt; C linker for the host machine: clang ld.bfd 2.39
&gt;
&gt; meson.build:17:0: ERROR: Compiler clang++ can not compile programs.
&gt;
&gt; A full log can be found at /build/vte-0.70.2/build/meson-logs/meson-log.txt
For full logs, run 'nix log /nix/store/rj77v58780gsrf38pi6qxjs89d4lrf6p-vte-0.70.2.drv'.</code></pre>
<p>Apparently the <code>--sysroot=...</code> hack changed search path in <code>clang</code> from
native paths to cross paths:</p>
<pre><code>$ printf &quot;int main(){}&quot; | clang++ -x c++ -
$ printf &quot;int main(){}&quot; | clang++ --sysroot=/ -x c++ -
$ printf &quot;int main(){}&quot; | clang++ --sysroot=/does/not/exist -x c++ -
ld: cannot find -lstdc++: No such file or directory</code></pre>
<p>Here is the patch lookup change behaviour. Good case:</p>
<pre><code>$ printf &quot;int main(){}&quot; | clang++ -x c++ - -Wl,--verbose |&amp; grep -F stdc++
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.so failed
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.a failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.so failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../lib64/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../lib64/libstdc++.a succeeded
/nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../lib64/libstdc++.a</code></pre>
<p>Note that <code>clang++</code> does try target-specific <code>x86_64-unknown-linux-gnu</code>
paths first. But then falls backs to generic paths.</p>
<p>Bad case:</p>
<pre><code>$ printf &quot;int main(){}&quot; | clang++ --sysroot=/does/not/exist -x c++ - -Wl,--verbose |&amp; grep -F stdc++
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.so failed
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.a failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.so failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib64/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib64/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/lib64/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/lib64/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/lib/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/lib/libstdc++.a failed
/nix/store/...-binutils-2.39/bin/ld: cannot find -lstdc++: No such file or directory</code></pre>
<p>It’s roughly the same search order, but generic paths are not looked up.</p>
<p>I think it’s a somewhat minor <code>clang</code> bug. <code>--sysroot</code> is not about a
different target but about different offset for system library locations.
It should not affect compiler-specific library locations even if these
libraries are from <code>gcc</code> compiler and not <code>clang</code>.</p>
<p>But then again <code>nixpkgs</code> has its own slightly deviating notion of what
is cross-compiling compared other distributions. We could say that
<code>nixpkgs</code> has empty <code>sysroot</code> and always passes all the library and
include paths explicitly.</p>
<p>We can safely work around lookup paths by adding <code>$target -&gt; .</code> symlink
to <code>gcc</code> to simulate cross case:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/compilers/gcc/11/default.nix</span></span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/compilers/gcc/11/default.nix</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -221,6 +221,7 @@ stdenv.mkDerivation ({</span></span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a>   targetConfig = if targetPlatform != hostPlatform then targetPlatform.config else null;</span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  targetPlatformConfig = targetPlatform.config;</span></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a>   buildFlags = optional</span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true" tabindex="-1"></a>     (targetPlatform == hostPlatform &amp;&amp; hostPlatform == buildPlatform)</span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/pkgs/development/compilers/gcc/builder.sh b/pkgs/development/compilers/gcc/builder.sh</span></span>
<span id="cb47-12"><a href="#cb47-12" aria-hidden="true" tabindex="-1"></a>index 113bd83ea53..71a997a7df9 100644</span>
<span id="cb47-13"><a href="#cb47-13" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/compilers/gcc/builder.sh</span></span>
<span id="cb47-14"><a href="#cb47-14" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/compilers/gcc/builder.sh</span></span>
<span id="cb47-15"><a href="#cb47-15" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -203,6 +203,17 @@ preInstall() {</span></span>
<span id="cb47-16"><a href="#cb47-16" aria-hidden="true" tabindex="-1"></a>         ln -s lib &quot;$out/${targetConfig}/lib32&quot;</span>
<span id="cb47-17"><a href="#cb47-17" aria-hidden="true" tabindex="-1"></a>         ln -s lib &quot;${!outputLib}/${targetConfig}/lib32&quot;</span>
<span id="cb47-18"><a href="#cb47-18" aria-hidden="true" tabindex="-1"></a>     fi</span>
<span id="cb47-19"><a href="#cb47-19" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb47-20"><a href="#cb47-20" aria-hidden="true" tabindex="-1"></a><span class="va">+    # cc-wrappers uses --sysroot=/nix/store/does/not/exist as a way to</span></span>
<span id="cb47-21"><a href="#cb47-21" aria-hidden="true" tabindex="-1"></a><span class="va">+    # drop default sysheaders search path. Unfortunately that switches</span></span>
<span id="cb47-22"><a href="#cb47-22" aria-hidden="true" tabindex="-1"></a><span class="va">+    # clang++ into searching libraries in gcc in cross-compiler paths:</span></span>
<span id="cb47-23"><a href="#cb47-23" aria-hidden="true" tabindex="-1"></a><span class="va">+    #   from ${!outputLib}/lib (native)</span></span>
<span id="cb47-24"><a href="#cb47-24" aria-hidden="true" tabindex="-1"></a><span class="va">+    #   to ${!outputLib}/${targetPlatformConfig}/lib</span></span>
<span id="cb47-25"><a href="#cb47-25" aria-hidden="true" tabindex="-1"></a><span class="va">+    # We create the symlink to make both native and cross paths</span></span>
<span id="cb47-26"><a href="#cb47-26" aria-hidden="true" tabindex="-1"></a><span class="va">+    # available even if the toolchain is not the cross-compiler.</span></span>
<span id="cb47-27"><a href="#cb47-27" aria-hidden="true" tabindex="-1"></a><span class="va">+    if [ ! -e ${!outputLib}/${targetPlatformConfig} ] ; then</span></span>
<span id="cb47-28"><a href="#cb47-28" aria-hidden="true" tabindex="-1"></a><span class="va">+        ln -s . ${!outputLib}/${targetPlatformConfig}</span></span>
<span id="cb47-29"><a href="#cb47-29" aria-hidden="true" tabindex="-1"></a><span class="va">+    fi</span></span>
<span id="cb47-30"><a href="#cb47-30" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<h2 id="are-we-done-yet">Are we done yet?</h2>
<p>We managed to update <code>libgcc_s.so.1</code> in <code>glibc</code> to match default version
of <code>gcc</code> used by <code>nixpkgs</code>, but there is one minor catch: we built it
against <code>bootstrapTools</code>’ <code>glibc</code>. Or more specifically here is the
current layout:</p>
<ul>
<li>good: it is built as part of <code>nixpkgs</code> <code>gcc</code> (and by <code>nixpkgs</code> <code>gcc</code>
as part of bootstrap that <code>gcc</code> package does internally).</li>
<li>good: it is built by <code>nixpkgs</code> <code>binutils</code> (with help of <code>gas</code> and
<code>ld</code>)</li>
<li>suboptimal: it is linked against <code>bootstrapTools</code>’ <code>glibc</code>, which means
that:
<ul>
<li>minor: it is linked against symbol versions defined by <code>libc.so.6</code></li>
<li>medium: it is linked against <code>bootstrapTools</code>’ glibc’s startup object files:
<ul>
<li><code>crti.o</code>: trivial <code>_init</code> / <code>_fini</code> global constructor handling</li>
<li><code>crtn.o</code>: trivial <code>.init</code> / <code>.fini</code> sections for global constructors</li>
<li><code>libc_nonshared.a</code>: small amount of target-specific stubs that refer
<code>__dso_handle</code> or really dislike dynamic relocations: <code>atexit</code>,
<code>at_quick_exit</code>, <code>__pthread_atfork</code>, <code>__stack_chk_fail_local</code>.</li>
</ul></li>
</ul></li>
</ul>
<p>Of all the above <code>libc_nonshared.a</code> is mildly annoying. That should not
cause any problems as glibc allows upgrades of libc.so.6 without
breaking already linked libraries or executables. But it’s still a
problem of reliance on a tiny bit of <code>bootstrapTools</code> code.</p>
<p>Ideally I would like to delete <code>libgcc_s.so.1</code> out of <code>glibc</code>’s <code>lib/</code>
directory entirely and it will solve this problem completely.</p>
<p>I’m not sure how exactly do it just yet, but I have a vague idea.</p>
<p>A while ago I wondered why cross-compiled <code>glibc</code> was missing
<code>libgcc_s.so.1</code> while native had it. Now it’s clear: it’s an unexpected
native/cross difference in <code>gcc.lib</code>
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/libraries/glibc/default.nix#L78-L83">library path</a>
(and also
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/libraries/glibc/common.nix#L271">manual hook removal</a>).
Once the main change lands I should be able to fix it as well one way or
another.</p>
<p>Thus no, we are not done yet. But it can wait when changes derived here
will land in <code>nixpkgs</code>. It looks like a clear improvement.</p>
<h2 id="next-steps">Next steps</h2>
<p>I tried to understand <code>nixpkgs</code> bootstrap process in depth and its
relation to the toolchain setup a few times in the past:</p>
<ul>
<li>to sort out <code>glibc</code> <a href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html">objects mismatch</a>
(landed)</li>
<li>to fix <code>binutils</code> <a href="https://github.com/NixOS/nixpkgs/pull/188544">LTO plumbing</a>
(failed, needs more research)</li>
<li>to sort <code>musl</code> <a href="https://github.com/NixOS/nixpkgs/issues/142066">include order</a>
(pending, needs more research)</li>
<li>to fix incomplete <code>mingw</code> <a href="https://github.com/NixOS/nixpkgs/issues/156343">library list</a>
(pending, needs more research)</li>
<li>to fix <code>include-what-you-use</code> <a href="https://github.com/NixOS/nixpkgs/issues/189753">headers path</a>
(pending, needs more research)</li>
</ul>
<p>I failed more frequently than I succeeded.</p>
<p>Until today I never felt I quite grasped the details. There were
always minor things I did not look at: how does <code>nixpkgs</code> define
include header order? How does it track what are compiler-specific
libraries and what are libc-specific ones? Does it care? And other ones
like that. This time I managed to uncover almost all of that.</p>
<p>In most of the cases above it’s very clear why things are broken and why
they usually work in other distributions. The answer is almost always:
default paths have reasonable values there and <code>nixpkgs</code> does not use
default paths machinery. I always felt <code>nixpkgs</code> way of setting paths is
a bit broken. Now I have some evidence how exactly it is broken. That
gives me a hope I can amend at least part of it and eventually fix the
issues above without resorting to hacks like <code>--sysroot=...</code>.</p>
<p>Still unfixed lower hanging fruits are:</p>
<ul>
<li>reduction of needless rebuild redundancy of <code>binutils</code> and other tools
tools used in bootstrap.</li>
<li>static build of <code>gcc</code> dependencies also looks like a workaround of
<code>bootstrapTools</code> placing everything into one directory</li>
</ul>
<h2 id="parting-words">Parting words</h2>
<p><code>nixpkgs</code> bootstrap process is simple at a high level: we build <code>gcc</code>,
<code>glibc</code> and friends enough times to declare the result stable enough.
When we don’t expect future rebuilds to change the output we declare
success.</p>
<p>The simplest way to explore bootstrap dependencies is probably to grep
and render parts of the graph produced by
<code>nix-store --query --graph $(nix-build -A stdenv.cc.cc)</code>.</p>
<p>The precise mechanics of it are somewhat involved due to toolchain
specifics but not too complicated.</p>
<p>The bootstrap is a bit fragile as <code>nixpkgs</code> assumes that it should
be feasible to swap <code>glibc</code> from under active toolchain by redirecting
headers. It could be solved by another round of rebuilds instead of
using less known compiler options. Or by using path priority override
closer to what vanilla <code>gcc</code> does (I still did not find best options for
that).</p>
<p>Along the way I found a few minor infelicities in <code>nixpkgs</code>:</p>
<ul>
<li>inconsistent <code>libgcc_s.so.1</code> copying: <a href="https://github.com/NixOS/nixpkgs/pull/209055">PR #209055</a></li>
<li><code>libstdc++</code> search path pollution in <code>bootstrapTools</code>: <a href="https://github.com/NixOS/nixpkgs/pull/209054">PR #209054</a></li>
<li>missing cross-link for native toolchains: <a href="https://github.com/NixOS/nixpkgs/pull/209153">PR #209153</a></li>
</ul>
<p>And in the end I ended up with <a href="https://github.com/NixOS/nixpkgs/pull/209063">PR #209063</a>
to get <code>libgcc_s.so.1</code> up to date enough.</p>
<p>Initially I thought that adding one <code>gcc</code> rebuild is an easy problem.
I tried adding magic lines to <code>pkgs/stdenv/linux/default.nix</code> a few
times and failed. I did not feel I could make it work.</p>
<p>Instead of giving up I started this post. I logged what was failing and
why I think should be fixed to make it work. It took me 4 days to finish
it! I got <code>libgcc_s.so.1</code> updated in the end!</p>
<p>Here is the final bootstrap tree I arrived at (<a href="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/08-nixpkgs-bootstrap-tree.svg">enlarge</a>):</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -vP '[.](sh|tar|bash|patch|c|diff)|bash52-0|wrapper|hook|expand-response-params' |
    dot -Tsvg &gt; /tmp/a.svg; firefox /tmp/a.svg</code></pre>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/08-nixpkgs-bootstrap-tree.svg" /></p>
<p>Have fun!</p>

<div class="info">
    Posted on January  5, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>xmms2 FLAC hangup fix</title>
    <link href="http://trofi.github.io/posts/274-xmms2-flac-hangup-fix.html" />
    <id>http://trofi.github.io/posts/274-xmms2-flac-hangup-fix.html</id>
    <published>2022-12-30T00:00:00Z</published>
    <updated>2022-12-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>Over past few months I noiced that <code>xmms2</code> started getting stuck on some
songs in my playlist. The typical symptom is lack of sound after the
song finished. There was no (expected!) switch to the next song. Instead
existing playlist entry went to out-of-duration playtime report:</p>
<pre><code>$ xmms2 status
Playing: Artist - Song: 25:06 of 08:01</code></pre>
<p>In this case <code>08:01</code> is the song length and <code>25:06</code> is the offset within
that song (should never be more than <code>08:01</code> in this case).</p>
<p>When <code>xmms2</code> was in this state CPU load was still low as if it played
song just fine. Manual attempts to seek within this song
(<code>$ xmms2 seek +10</code>) would instantly switch it to the next one as of
just finished.</p>
<p>I was not sure when exactly this effect started or what types of songs
it affects. Anecdotally it felt like 1-2% of songs were affected. And
they were always the same songs. That hinted at recent decoding changes
somewhere.</p>
<p>I looked up the shortest song that exhibited the problem. Best I could
find was a 3 minutes 57 seconds long sample. Not too long, but long
enough to avoid whole system bisection.</p>
<p>Instead I ran <code>./xmms2d --verbose</code> and started playing the sample
problematic. Once it was over 4 minutes <code>xmms2</code>’s debug logs started
growing rapidly with error like:</p>
<pre><code>11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER
...
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH
...
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER
...
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH</code></pre>
<p>That was a good enough hint that <code>FLAC</code> decoding state machine did not
feel well. Glancing at <code>xiph/flac</code> issue tracker I found seemingly
similar <a href="https://github.com/xiph/flac/issues/487">Issue #487</a>. There
someone found that <code>flac-1.4.0</code> release became more picky around stream
validation. The report also provides numeros commands to validate and
re-encode <code>.flac</code> files using <code>flac</code> command. Very handy!</p>
<p>Unfortunately my files all passed <code>flac -t</code> validation and did not
complain about internal inconsistencies. I means I I probably had a
different problem. But that gave me a hint that maybe it’s related to
<code>flac</code> library update in my system. I downgraded <code>1.4.2</code> down to <code>1.3.4</code>
got my hangups disappeared!</p>
<p><code>xmms2</code>’s internal architecture is simple: it handles data streams as
explicit objects by passing them through chain of plugins. Each plugin
reads data from previous chained plugin and writes data to next chained
plugin. The plugin itself can perform data transformation as well.</p>
<p>For example to playback a <code>.flac</code> file one needs a few <code>xmms2</code> plugins:</p>
<ul>
<li><code>file</code> plugin to read files from disk)</li>
<li><code>flac</code> plugin to convert <code>FLAC</code> stream to simpler <code>PCM</code> stream</li>
<li><code>pulse</code> plugin to write <code>PCM</code> into a sound subsystem.</li>
</ul>
<p>Such a stream plugin abstraction makes it trivial to explore ways
of individual file formats handling in <code>xmms2</code>. For example this
is our (yet unfixed) full
<a href="https://github.com/xmms2/xmms2-devel/blob/9bfbc687fc586c56443f9ea296988eefd759c30d/src/plugins/flac/flac.c">flac plugin code</a>.</p>
<p>A few things to note there:</p>
<ul>
<li><code>xmms_flac_data_t</code> type defines our decoder context</li>
<li><code>xmms_flac_plugin_setup()</code> registers plugin to handle <code>audio/x-flac</code> files</li>
<li><code>methods.init = xmms_flac_init;</code> and <code>methods.read = xmms_flac_read;</code> define
callbacks to implement <code>FLAC</code> stream decoding.</li>
</ul>
<p><code>xmms_flac_init()</code> attaches <code>FLAC</code> handler to a new stream. It creates
<code>FLAC</code> decoder and defines it’s output stream type (like 16-bit <code>PCM</code>):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> gboolean</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>xmms_flac_init <span class="op">(</span>xmms_xform_t <span class="op">*</span>xform<span class="op">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    xmms_flac_data_t <span class="op">*</span>data<span class="op">;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    data <span class="op">=</span> g_new0 <span class="op">(</span>xmms_flac_data_t<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    data<span class="op">-&gt;</span>flacdecoder <span class="op">=</span> FLAC__stream_decoder_new <span class="op">();</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    init_status <span class="op">=</span> FLAC__stream_decoder_init_stream <span class="op">(</span>data<span class="op">-&gt;</span>flacdecoder<span class="op">,</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_read<span class="op">,</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_seek<span class="op">,</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_tell<span class="op">,</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_length<span class="op">,</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_eof<span class="op">,</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_write<span class="op">,</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_metadata<span class="op">,</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_error<span class="op">,</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>                                                    xform<span class="op">);</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>data<span class="op">-&gt;</span>bits_per_sample <span class="op">==</span> <span class="dv">16</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        sample_fmt <span class="op">=</span> XMMS_SAMPLE_FORMAT_S16<span class="op">;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    xmms_xform_outdata_type_add <span class="op">(</span>xform<span class="op">,</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_MIMETYPE<span class="op">,</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>                                 <span class="st">&quot;audio/pcm&quot;</span><span class="op">,</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_FMT_FORMAT<span class="op">,</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>                                 sample_fmt<span class="op">,</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_FMT_CHANNELS<span class="op">,</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>                                 data<span class="op">-&gt;</span>channels<span class="op">,</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_FMT_SAMPLERATE<span class="op">,</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>                                 data<span class="op">-&gt;</span>sample_rate<span class="op">,</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_END<span class="op">);</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    data<span class="op">-&gt;</span>buffer <span class="op">=</span> g_string_new <span class="op">(</span>NULL<span class="op">);</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> TRUE<span class="op">;</span></span></code></pre></div>
<p>Many lines of code, but it’s just 2 function calls with many details
passed around as indivifual function aprameters. Incidenally <code>flac</code>
library itself has a similar API: we pass in a decoder context object
to <code>FLAC__stream_decoder_init_stream()</code> and a bunch of callback to read
input and write output.</p>
<p>In case of our error message spam it all came from this
<code>flac_callback_error()</code> definition:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>flac_callback_error <span class="op">(</span><span class="dt">const</span> FLAC__StreamDecoder <span class="op">*</span>flacdecoder<span class="op">,</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>                     FLAC__StreamDecoderErrorStatus status<span class="op">,</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*</span>client_data<span class="op">)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    xmms_xform_t <span class="op">*</span>data <span class="op">=</span> <span class="op">(</span>xmms_xform_t <span class="op">*)</span> client_data<span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    g_return_if_fail <span class="op">(</span>flacdecoder<span class="op">);</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    g_return_if_fail <span class="op">(</span>data<span class="op">);</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    XMMS_DBG <span class="op">(</span><span class="st">&quot;</span><span class="sc">%s</span><span class="st">&quot;</span><span class="op">,</span> FLAC__StreamDecoderErrorStatusString<span class="op">[</span>status<span class="op">]);</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC</code>
error messages we saw earlier originate here.</p>
<p><code>flac</code> plugin tried to read data from seemingly broken (or finished?)
stream again and again. Here is the full <code>flac_callback_read</code> definition:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> FLAC__StreamDecoderReadStatus</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>flac_callback_read <span class="op">(</span><span class="dt">const</span> FLAC__StreamDecoder <span class="op">*</span>flacdecoder<span class="op">,</span> FLAC__byte buffer<span class="op">[],</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">size_t</span> <span class="op">*</span>bytes<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>client_data<span class="op">)</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    xmms_xform_t <span class="op">*</span>xform <span class="op">=</span> <span class="op">(</span>xmms_xform_t <span class="op">*)</span> client_data<span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    xmms_error_t error<span class="op">;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    gint ret<span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    g_return_val_if_fail <span class="op">(</span>xform<span class="op">,</span> FLAC__STREAM_DECODER_READ_STATUS_ABORT<span class="op">);</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> xmms_xform_read <span class="op">(</span>xform<span class="op">,</span> <span class="op">(</span>gchar <span class="op">*)</span>buffer<span class="op">,</span> <span class="op">*</span>bytes<span class="op">,</span> <span class="op">&amp;</span>error<span class="op">);</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>ret <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM<span class="op">;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>ret <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> FLAC__STREAM_DECODER_READ_STATUS_ABORT<span class="op">;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>bytes <span class="op">=</span> ret<span class="op">;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> FLAC__STREAM_DECODER_READ_STATUS_CONTINUE<span class="op">;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Not getting too much into <code>FLAC</code> state machine can you spot anything
suspicious about this function?</p>
<p>The idea of this function is simple: read a few bytes from
<code>xmms_xform_t *</code> stream via <code>xmms_xform_read()</code> and write it into the
<code>buffer</code> byte array.</p>
<p><code>buffer</code> output array is <code>*bytes</code> bytes long. How do we tell if we
managed to read less data than needed to <code>flac</code> library? Here is what
<code>FLAC/stream_decoder.h</code> <a href="https://github.com/xiph/flac/blob/master/include/FLAC/stream_decoder.h#L475">has to say</a> about it:</p>
<pre><code>/** Signature for the read callback.
 *
 *  A function pointer matching this signature must be passed to
 *  FLAC__stream_decoder_init*_stream(). The supplied function will be
 *  called when the decoder needs more input data.  The address of the
 *  buffer to be filled is supplied, along with the number of bytes the
 *  buffer can hold.  The callback may choose to supply less data and
 *  modify the byte count but must be careful not to overflow the buffer.
 *  The callback then returns a status code chosen from
 *  FLAC__StreamDecoderReadStatus.
 *
 * Here is an example of a read callback for stdio streams:
 * \code
 * FLAC__StreamDecoderReadStatus read_cb(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
 * {
 *   FILE *file = ((MyClientData*)client_data)-&gt;file;
 *   if(*bytes &gt; 0) {
 *     *bytes = fread(buffer, sizeof(FLAC__byte), *bytes, file);
 *     if(ferror(file))
 *       return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
 *     else if(*bytes == 0)
 *       return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
 *     else
 *       return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
 *   }
 *   else
 *     return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
 * }
 * \endcode
 *
 * \note In general, FLAC__StreamDecoder functions which change the
 * state should not be called on the \a decoder while in the callback.
 *
 * \param  decoder  The decoder instance calling the callback.
 * \param  buffer   A pointer to a location for the callee to store
 *                  data to be decoded.
 * \param  bytes    A pointer to the size of the buffer.  On entry
 *                  to the callback, it contains the maximum number
 *                  of bytes that may be stored in \a buffer.  The
 *                  callee must set it to the actual number of bytes
 *                  stored (0 in case of error or end-of-stream) before
 *                  returning.
 * \param  client_data  The callee's client data set through
 *                      FLAC__stream_decoder_init_*().
 * \retval FLAC__StreamDecoderReadStatus
 *    The callee's return status.  Note that the callback should return
 *    \c FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM if and only if
 *    zero bytes were read and there is no more data to be read.
 */
typedef FLAC__StreamDecoderReadStatus (*FLAC__StreamDecoderReadCallback)(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data);</code></pre>
<p>While a bit verbose the documentation string even has the example
implementation of a sinble callback almost identical to <code>xmms2</code>’s
use case.</p>
<p>Note: <code>*bytes</code> is unconditionally(ish) written back in the example
above. We always signal library what we passed back regardless of
encountered errors. It’s because <code>flac</code> knows how to skip over
undecodable metadata. Thus it’s a resonable behaviour to
return <code>FLAC__STREAM_DECODER_READ_STATUS_ABORT</code> and still expect more
reads from this stream in search of decodable next frame.</p>
<p>In comparison <code>xmms2</code> did not update <code>*bytes</code> in case of end of stream
and in case of an error. As a result <code>flac</code> decoder was stuck running
the callback again and again getting the same <code>buffer</code> back. <code>buffer</code>
possibly contained uninitialized contents of <code>buffer</code> as it if was just
read them from the input stream.</p>
<p>Once understood the fix was <a href="https://github.com/xmms2/xmms2-devel/commit/39d31d4a7ae463f3df7a09915fe61e2574f4d95f">trivial</a>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/plugins/flac/flac.c</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/plugins/flac/flac.c</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -138,26 +138,28 @@ xmms_flac_plugin_setup (xmms_xform_plugin_t *xform_plugin)</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a> static FLAC__StreamDecoderReadStatus</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a> flac_callback_read (const FLAC__StreamDecoder *flacdecoder, FLAC__byte buffer[],</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                     size_t *bytes, void *client_data)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        xmms_xform_t *xform = (xmms_xform_t *) client_data;</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        xmms_error_t error;</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        gint ret;</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>        g_return_val_if_fail (xform, FLAC__STREAM_DECODER_READ_STATUS_ABORT);</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        ret = xmms_xform_read (xform, (gchar *)buffer, *bytes, &amp;error);</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>        if (ret == 0) {</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="va">+               *bytes = 0;</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>                return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        } else if (ret &lt; 0) {</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="va">+               *bytes = 0;</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>                return FLAC__STREAM_DECODER_READ_STATUS_ABORT;</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        } else {</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>                *bytes = ret;</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>                return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>After that I saw no hangups in <code>.flac</code> files so far.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>xmms2</code>’s plugins are usually very simple to read and implement.</p>
<p>In case of more complex problems <code>xmms2d --verbose</code> flag is useful to
enable <code>XMMS_DBG()</code> debugging output. If nothing else it should help
finding out exact plugins used to playback a problematic file.</p>
<p><code>flac-1.4.0</code> subtly changed the recovery code around invalid streams and
managed to expose long standing bug in <code>xmms2</code> code base. Luckily it was
trivial to fix once identified.</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 30, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>xlibsWrapper yak</title>
    <link href="http://trofi.github.io/posts/273-xlibsWrapper-yak.html" />
    <id>http://trofi.github.io/posts/273-xlibsWrapper-yak.html</id>
    <published>2022-12-27T00:00:00Z</published>
    <updated>2022-12-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>During one of the raids on <a href="http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html">stale nixpkgs packages</a>
I found <code>Xaw3d</code> package which was present in two forms in <code>nixpkgs</code>:
<code>Xaw3d</code> and <code>xorg.libXaw3d</code>. Both were based on <code>libXaw3d</code> <code>Xorg</code>
package of the same version and used different definitions of the
package.</p>
<p><code>xorg.libXaw3d</code> was used by a single broken <code>timedoctor</code> package.
Thus it ws easy to just delete both:</p>
<ul>
<li><code>timedoctor</code> removal: <a href="https://github.com/NixOS/nixpkgs/pull/195251">PR 195251</a></li>
<li><code>xorg.libXaw3d</code> removal: <a href="https://github.com/NixOS/nixpkgs/pull/195254">PR 195254</a></li>
</ul>
<p>Duplicate packages are very confusing. New namespaces like <code>xorg.*</code> make
it very easy to introduce subtly different packages.</p>
<p>A while later I attempted to patch <code>xorg.libXfont2</code> package via an
override locally:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">xorg</span> <span class="op">=</span> prev.xorg.overrideScope' <span class="op">(</span><span class="va">f</span><span class="op">:</span> <span class="va">p</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">libXfont2</span> <span class="op">=</span> p.libXfont2.overrideAttrs <span class="op">(</span><span class="va">oa</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>      <span class="va">patches</span> <span class="op">=</span> <span class="op">(</span>oa.patches <span class="kw">or</span> <span class="op">[])</span> <span class="op">++</span> <span class="op">[</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="ss">../libXfont2/nofollow.patch</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">];</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">});</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">});</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That was supposed to work. It didn’t: <code>pulseaudio</code> expression became
invalid and complained about missing <code>xorg.xlibsWrapper</code> attribute.
Despite the fact I seemingly did not touch it in my expression.</p>
<p>Here is the <code>xorg</code> attribute definition:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>   <span class="co"># somewhere in pkgs/top-level/all-packages.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>   <span class="co"># ...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>   xorg = recurseIntoAttrs <span class="op">((</span>lib.callPackageWith __splicedPackages <span class="ss">../servers/x11/xorg</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>   <span class="op">})</span>.overrideScope' <span class="op">(</span>lib.callPackageWith __splicedPackages <span class="ss">../servers/x11/xorg/overrides.nix</span> <span class="op">{</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="kw">inherit</span> <span class="op">(</span>darwin.apple_sdk.frameworks<span class="op">)</span> ApplicationServices Carbon Cocoa<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     <span class="kw">inherit</span> <span class="op">(</span>darwin.apple_sdk.libs<span class="op">)</span> Xplugin<span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>     <span class="kw">inherit</span> <span class="op">(</span>buildPackages.darwin<span class="op">)</span> bootstrap_cmds<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     <span class="va">udev</span> <span class="op">=</span> <span class="kw">if</span> stdenv.isLinux <span class="kw">then</span> udev <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>     <span class="va">libdrm</span> <span class="op">=</span> <span class="kw">if</span> stdenv.isLinux <span class="kw">then</span> libdrm <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>     <span class="va">abiCompat</span> <span class="op">=</span> config.xorg.abiCompat <span class="co"># `config` because we have no `xorg.override`</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>       <span class="kw">or</span> <span class="op">(</span><span class="kw">if</span> stdenv.isDarwin <span class="kw">then</span> <span class="st">&quot;1.18&quot;</span> <span class="kw">else</span> <span class="cn">null</span><span class="op">);</span> <span class="co"># 1.19 needs fixing on Darwin</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>   <span class="op">})</span> <span class="op">//</span> <span class="op">{</span> <span class="kw">inherit</span> xlibsWrapper<span class="op">;</span> <span class="op">}</span> <span class="op">)</span>;</span></code></pre></div>
<p>Note that unusual <code>// { inherit xlibsWrapper; }</code> last minute attribute
addition. It injects <code>xlibsWrapper</code> attribute after <code>xorg</code> was fully
constructed with all it’s overrides. Attempt to redefine <code>xorg</code>
attribute (as I did in an overlay above) throws <code>xlibsWrapper</code> attribute
away. It has to be added back explicitly. I would say it’s unexpected.</p>
<p>More interestingly not every package used <code>xorg.xlibsWrapper</code> form to
refer to the thing! Most packages used <code>xlibsWrapper</code> directly. Thus
I removed <code>xorg.xlibsWrapper</code> in favour of a global one in
<a href="https://github.com/NixOS/nixpkgs/pull/194044">PR 194044</a>.
The fix had to adjust only 5 packages (<code>gnome2.libgnomeui</code>, <code>pulseaudio</code>,
<code>ted</code>,<code>vlc</code>,<code>xine-ui</code>) and turned <code>xorg</code> into a proper overridable
scope:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/top-level/all-packages.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/top-level/all-packages.nix</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -24104,21 +24104,21 @@ with pkgs;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>   # have created a cycle.</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>   xorg = recurseIntoAttrs ((lib.callPackageWith __splicedPackages ../servers/x11/xorg {</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>   }).overrideScope' (lib.callPackageWith __splicedPackages ../servers/x11/xorg/overrides.nix {</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>     inherit (darwin.apple_sdk.frameworks) ApplicationServices Carbon Cocoa;</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>     inherit (darwin.apple_sdk.libs) Xplugin;</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>     inherit (buildPackages.darwin) bootstrap_cmds;</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>     udev = if stdenv.isLinux then udev else null;</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>     libdrm = if stdenv.isLinux then libdrm else null;</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>     abiCompat = config.xorg.abiCompat # `config` because we have no `xorg.override`</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>       or (if stdenv.isDarwin then &quot;1.18&quot; else null); # 1.19 needs fixing on Darwin</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="st">-  }) // { inherit xlibsWrapper; } );</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="va">+  }));</span></span></code></pre></div>
<p>So much better now.</p>
<p>And then I looked at <code>xlibsWrapper</code> definition out of curiosity:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># somewhere in pkgs/top-level/all-packages.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Avoid using this. It isn't really a wrapper anymore, but we keep the name.</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  xlibsWrapper = callPackage <span class="ss">../development/libraries/xlibs-wrapper</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">packages</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      freetype fontconfig xorg.xorgproto xorg.libX11 xorg.libXt</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>      xorg.libXft xorg.libXext xorg.libSM xorg.libICE</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span>;</span></code></pre></div>
<pre><code># somewhere in pkgs/development/libraries/xlibs-wrapper/default.nix
{lib, stdenv, packages}:

stdenv.mkDerivation {
  name = &quot;xlibs-wrapper&quot;;

  dontBuild = true;

  installPhase = &quot;mkdir -p $out&quot;;
  unpackPhase = &quot;sourceRoot=.&quot;;

  propagatedBuildInputs = packages;

  preferLocalBuild = true;

  # For compatability with XFree86.
  passthru.buildClientLibs = true;

  meta = {
    platforms = lib.platforms.unix;
  };
}</code></pre>
<p>The above says that:</p>
<ul>
<li>it’s a deprecated package (it got “deprecated” comment in 2015)</li>
<li>it’s not a wrapper. Normally <code>wrapper</code> implied binary shell wrapper
script in <code>nixpkgs</code>. This one is nothing like that.</li>
<li>it’s just an alias for build-time dependencies for some of Xorg libraries.</li>
</ul>
<p><code>xlibsWrapper</code> is a remnant of the far past when Xorg became modular
(around 7.0 version in <a href="https://github.com/NixOS/nixpkgs/commit/ea95a0509ecde0208d26cea272bd8fc5136dd4be">2005</a>)
where it’s single tarball release was split into ~200 smaller packages.
<code>nixpkgs</code> kept this transitional package to ease porting to the new set
of packages.</p>
<p>To delete <code>xlibsWrapper</code> completely I filed
<a href="https://github.com/NixOS/nixpkgs/issues/194054">PR 194054</a> to track and
update packages to set of actually used libraries one by one. 3 months
(and 80 PRs) later I can finaly say that all users were moved to finer
grained set of libraries!</p>
<p><code>diffoscope</code> helped me a lot while working on the transition: if binaries
before and after the change look the the same then chances are high I did
not break any users.</p>
<p>Another yak became a bit less hairy.</p>
<p>There is still a lot to do: I think it’s time to remove <code>xorg.*</code>
attribute set and merge individual packages back into the top-level
attribute set. This will turn <code>xorg.*</code> into normal packages and will
allow updating them just like anything else. I filed
<a href="https://github.com/NixOS/nixpkgs/issues/207978">Issue 207978</a> to track
the effort.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nixpkgs</code> is full of bits with accidental complexity like <code>xlibsWrapper</code>
or autogenerated set of <code>xorg</code> packages. Or long deprecated packages
like <code>llvm-5</code> (it still has a few reverse dependencies believe it or
not). They are usually easy to fix, just take some effport to sort out
all the numerous users.</p>
<p>Fun fact: it takes about 3 months of slow pace to sort out 80 packages.
Something like 1 package a day. Sounds like a good estimate of large-scale
changes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 27, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>peeking at stale nixpkgs packages</title>
    <link href="http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html" />
    <id>http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html</id>
    <published>2022-12-27T00:00:00Z</published>
    <updated>2022-12-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>As a <code>nixpkgs</code> user I want it to help me solve my and others’ problems.
The upstream package bugs are frequently already fixed upstream and we
only need to update to get <code>nixpkgs</code> into better state.</p>
<p>How many outdated packages does my system have? Can I just list them all
and maybe work on one or two to update them?</p>
<h2 id="on-repology">On repology</h2>
<p>Probably the most popular package info database is
<a href="https://repology.org/" class="uri">https://repology.org/</a>. It contains package details across various
package repositories. <code>nixpkgs</code> is not an exception.</p>
<p>Let’s have a look at example <code>re2c</code> package.
<code>repology</code> <a href="https://repology.org/project/re2c/versions">page</a> shows us a
few things:</p>
<ul>
<li><code>3.0</code> is the latest release available</li>
<li><code>nixpkgs-unstable</code> (<code>master</code> branch), <code>22.05</code> and <code>21.11</code>
releases do provide latest <code>3.0</code>.</li>
<li><code>nixpkgs-stable-21.11</code> (2 releases back) provides older <code>2.2</code> version</li>
<li><code>Debian unstable</code> and <code>12</code> release also provide latest <code>3.0</code>.</li>
<li><code>Fedora rawhide</code> provides very old <code>2.1.1</code> release (whoops!)</li>
</ul>
<p><code>repology.org</code> API <a href="https://repology.org/api">provides</a> a <code>json</code>
table we can fetch and inspect directly.</p>
<p>Joining this data against the installed system should yield something
useful. Let’s see how hard it is.</p>
<p>To get data related to <code>matser</code> branch of <code>nixpkgs</code> we can filter on
<code>nix_unstable</code> repo with <code>inrepo=nix_unstable</code> parameter:</p>
<pre><code>$ curl --compressed -s \
  &quot;https://repology.org/api/v1/projects/?inrepo=nix_unstable&amp;outdated=1&quot; | jq

{
...
  &quot;a52dec&quot;: [
    {
      &quot;repo&quot;: &quot;adelie_current&quot;,
      &quot;subrepo&quot;: &quot;user&quot;,
      &quot;srcname&quot;: &quot;a52dec&quot;,
      &quot;binname&quot;: &quot;a52dec-dev&quot;,
      &quot;visiblename&quot;: &quot;a52dec-dev&quot;,
      &quot;version&quot;: &quot;0.8.0&quot;,
      &quot;maintainers&quot;: [
        &quot;me@zv.io&quot;
      ],
      &quot;licenses&quot;: [
        &quot;GPL-2.0+&quot;
      ],
      &quot;summary&quot;: &quot;Library for decoding ATSC A/52 streams (development files)&quot;,
      &quot;status&quot;: &quot;newest&quot;,
      &quot;origversion&quot;: &quot;0.8.0-r0&quot;
    },
    ...
    {
      &quot;repo&quot;: &quot;nix_unstable&quot;,
      &quot;name&quot;: &quot;a52dec&quot;,
      &quot;visiblename&quot;: &quot;a52dec&quot;,
      &quot;version&quot;: &quot;0.7.4&quot;,
      &quot;maintainers&quot;: [
        &quot;fallback-mnt-nix@repology&quot;
      ],
      &quot;licenses&quot;: [
        &quot;GPL-2.0-or-later&quot;
      ],
      &quot;summary&quot;: &quot;ATSC A/52 stream decoder&quot;,
      &quot;status&quot;: &quot;outdated&quot;,
      &quot;origversion&quot;: null
    },
  ...
  &quot;azure-cli&quot;: [
    {
      &quot;repo&quot;: &quot;scoop&quot;,
      &quot;subrepo&quot;: &quot;main&quot;,
      &quot;binname&quot;: &quot;azure-cli&quot;,
      &quot;visiblename&quot;: &quot;azure-cli&quot;,
      &quot;version&quot;: &quot;2.43.0&quot;,
      &quot;licenses&quot;: [
        &quot;MIT&quot;
      ],
      &quot;status&quot;: &quot;newest&quot;,
      &quot;origversion&quot;: null
    },
  ...
    }
  ]
}</code></pre>
<p>I piped the output through <code>jq</code> to make it slightly more readable.</p>
<p>We see a lot here:</p>
<ul>
<li><p><code>repology</code>’s <strong>project name</strong> comes as a key here</p></li>
<li><p><strong>values</strong> are arrays of per-repository details for package status:
repository name, package name, version, version status and so on.</p></li>
<li><p><strong>status</strong> field tells us outright if the package is stale or not.</p></li>
<li><p>data is paginated: only the range from <code>"a52dec"</code> to <code>"azure-cli"</code> is
covered.</p></li>
</ul>
<p>To get more data we can call the same API by passing the project key
as part of <code>projects/</code> path to continue from there:</p>
<pre><code># page 1:
$ curl --compressed -s \
  &quot;https://repology.org/api/v1/projects/?inrepo=nix_unstable&amp;outdated=1&quot; &gt;p1
# page2
$ curl --compressed -s \
  &quot;https://repology.org/api/v1/projects/azure-cli/?inrepo=nix_unstable&amp;outdated=1&quot; &gt;p2

$ jq --sort-keys --raw-output 'keys|last' &lt;p1
azure-cli
$ jq --sort-keys --raw-output 'keys|last' &lt;p2
cli11</code></pre>
<p>Now we can build the list of outdated packages in <code>nixpkgs</code>. I’ll use
the following <code>jq</code> hack to pick latest-everywhere vs latest-in-nixpkgs:</p>
<pre><code>$ jq --sort-keys '
map_values({
  &quot;newest&quot;: map(
    select(.status|in({&quot;newest&quot;:1}))
  )|first(.[].version),
  &quot;nix_unstable_version&quot;: map(
    select(.repo|in({&quot;nix_unstable&quot;:1}))
  )|first(.[].version),
  &quot;nix_name&quot;: map(
    select(.repo|in({&quot;nix_unstable&quot;:1}))
  )|first(.[].name),
})' &lt; p1 | jq --sort-keys '
  map_values(
    &quot;\(.nix_name): \(.nix_unstable_version) -&gt; \(.newest)&quot;
  )
'

{
  &quot;1password-cli&quot;: &quot;1password-cli: 2.11.0 -&gt; 2.12.0&quot;,
  &quot;389-ds-base&quot;: &quot;389-ds-base: 2.3.0 -&gt; 2.3.1&quot;,
  &quot;7kaa&quot;: &quot;7kaa: 2.15.4p1 -&gt; 2.15.5&quot;,
  &quot;a52dec&quot;: &quot;a52dec: 0.7.4 -&gt; 0.8.0&quot;,
  &quot;abuse&quot;: &quot;abuse: 0.8 -&gt; 0.9.1&quot;,
  &quot;ace-framework&quot;: &quot;ace: 7.0.8 -&gt; 7.0.11&quot;,
  &quot;acorn&quot;: &quot;acorn: 0.4.2 -&gt; 8.8.1&quot;,
  &quot;acpica&quot;: &quot;acpica-tools: 20220331 -&gt; 20221022&quot;,
  &quot;acpitool&quot;: &quot;acpitool: 0.5.1 -&gt; 0.5.2&quot;,
  &quot;actor-framework&quot;: &quot;actor-framework: 0.18.5 -&gt; 0.18.6&quot;,
  ...
  &quot;azure-cli&quot;: &quot;azure-cli: 2.37.0 -&gt; 2.43.0&quot;
}</code></pre>
<p>You should be able to come up with a more reasonable query.</p>
<p>The above quary is not distribution-specific: you can swap
<code>nix_unstalble</code> for your distro of choice to fish for things you care
about.</p>
<p>Or you can use web UI to skim through the same data:
<a href="https://repology.org/projects/?inrepo=nix_unstable&amp;outdated=1" class="uri">https://repology.org/projects/?inrepo=nix_unstable&amp;outdated=1</a>.</p>
<p>Web UI is not very handy to grep through as it takes multiple pages.</p>
<h2 id="on-derivations">On derivations</h2>
<p>The above hack gives us the whole list of stale packages in <code>nixpkgs</code>.
I would still still like to narrow it down to set of packages relevant
to my system.</p>
<p>Luckily the whole <code>NixOS</code> system is normally described by a single build
“rule” (a single <code>derivation</code>). By inspecting that we can find all the
used packages:</p>
<pre><code>$ nix show-derivation --derivation -r $(nix-instantiate '&lt;nixpkgs/nixos&gt;' -A system)

{
...
  &quot;/nix/store/1vb6bjnkrwyj94d87ps1z9wa3i1fzia8-re2c-3.0.drv&quot;: {
    &quot;args&quot;: [
      &quot;-e&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;
    ],
    &quot;builder&quot;: &quot;/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash&quot;,
    &quot;env&quot;: {
      &quot;buildInputs&quot;: &quot;&quot;,
      &quot;builder&quot;: &quot;/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash&quot;,
      &quot;cmakeFlags&quot;: &quot;&quot;,
      &quot;configureFlags&quot;: &quot;&quot;,
      &quot;depsBuildBuild&quot;: &quot;&quot;,
      &quot;depsBuildBuildPropagated&quot;: &quot;&quot;,
      &quot;depsBuildTarget&quot;: &quot;&quot;,
      &quot;depsBuildTargetPropagated&quot;: &quot;&quot;,
      &quot;depsHostHost&quot;: &quot;&quot;,
      &quot;depsHostHostPropagated&quot;: &quot;&quot;,
      &quot;depsTargetTarget&quot;: &quot;&quot;,
      &quot;depsTargetTargetPropagated&quot;: &quot;&quot;,
      &quot;doCheck&quot;: &quot;1&quot;,
      &quot;doInstallCheck&quot;: &quot;&quot;,
      &quot;enableParallelBuilding&quot;: &quot;1&quot;,
      &quot;enableParallelChecking&quot;: &quot;1&quot;,
      &quot;mesonFlags&quot;: &quot;&quot;,
      &quot;name&quot;: &quot;re2c-3.0&quot;,
      &quot;nativeBuildInputs&quot;: &quot;/nix/store/nxxd4bhq41ix50n532vkdx6vp5p5hir3-hook /nix/store/al6g1zbk8li6p8mcyp0h60d08jaahf8c-python3-3.10.9&quot;,
      &quot;out&quot;: &quot;/nix/store/5mf1k9jy94ji20xcy77z58qaw7w4izrp-re2c-3.0&quot;,
      &quot;outputs&quot;: &quot;out&quot;,
      &quot;patches&quot;: &quot;&quot;,
      &quot;pname&quot;: &quot;re2c&quot;,
      &quot;preCheck&quot;: &quot;patchShebangs run_tests.py\n&quot;,
      &quot;propagatedBuildInputs&quot;: &quot;&quot;,
      &quot;propagatedNativeBuildInputs&quot;: &quot;&quot;,
      &quot;src&quot;: &quot;/nix/store/sl98y4sk9vzxinydlbc9nyzlqr5az8sj-source&quot;,
      &quot;stdenv&quot;: &quot;/nix/store/cp65c8nk29qq5cl1wyy5qyw103cwmax7-stdenv-linux&quot;,
      &quot;strictDeps&quot;: &quot;&quot;,
      &quot;system&quot;: &quot;x86_64-linux&quot;,
      &quot;version&quot;: &quot;3.0&quot;
    },
    &quot;inputDrvs&quot;: {
      &quot;/nix/store/6z1jfnqqgyqr221zgbpm30v91yfj3r45-bash-5.1-p16.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/7k290ai5pfv6zw25ymank65dks86g64h-source.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/ap9g09fxbicj836zm88d56dn3ff4clxl-stdenv-linux.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/b2p151ilwqpd47fbmzz50a5cmj12ixbf-hook.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/vgpv5w9lxnrxkdvb4hx1llxp811fd8pk-python3-3.10.9.drv&quot;: [
        &quot;out&quot;
      ]
    },
    &quot;inputSrcs&quot;: [
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;
    ],
    &quot;outputs&quot;: {
      &quot;out&quot;: {
        &quot;path&quot;: &quot;/nix/store/5mf1k9jy94ji20xcy77z58qaw7w4izrp-re2c-3.0&quot;
      }
    },
    &quot;system&quot;: &quot;x86_64-linux&quot;
  },
...</code></pre>
<p>Here one of numerous derivations used to produce final <code>system</code>
derivation is <code>re2c</code>. Most derivations have <code>pname</code> and <code>version</code> in
their environemnts. Thus the simplest hack would be to extract them with
<code>jq</code> again:</p>
<pre><code>$ nix show-derivation --derivation -r $(nix-instantiate '&lt;nixpkgs/nixos&gt;' -A system) |
    jq -r '.[] | &quot;\(.env.pname) \(.env.version)&quot;' | fgrep -v &quot;null&quot; | sort -u

a52dec 0.7.4
aalib 1.4rc5
abseil-cpp 20210324.2
accounts-qt 1.16
...
re2c 3.0</code></pre>
<h2 id="collecting-list-of-outdated-packages">Collecting list of outdated packages</h2>
<p>Now we have everything to match our system against the stale list. I
used simple <code>grep</code> for that. Full list of used scripts is at
<a href="https://discourse.nixos.org/t/a-tool-for-looking-if-installed-packages-are-up-to-date/21630/6" class="uri">https://discourse.nixos.org/t/a-tool-for-looking-if-installed-packages-are-up-to-date/21630/6</a>.</p>
<p>The typical output looks like that:</p>
<pre><code>$ ./print_local_outdated.bash | nl
     1  # installed(staging): unstable(master) -&gt; latest(others)
     2  a52dec-0.7.4:   &quot;a52dec&quot;: &quot;a52dec: 0.7.4 -&gt; 0.8.0&quot;,
     3  afdko-3.9.0:   &quot;afdko&quot;: &quot;python3.9-afdko: 3.9.0 -&gt; 3.9.1&quot;,
     4  alsa-lib-1.2.7.2:   &quot;alsa-lib&quot;: &quot;alsa-lib: 1.2.7.2 -&gt; 1.2.8&quot;,
     5  alsa-ucm-conf-1.2.7.1:   &quot;alsa-ucm-conf&quot;: &quot;alsa-ucm-conf: 1.2.7.1 -&gt; 1.2.8&quot;,
     6  appstream-0.15.5:   &quot;appstream&quot;: &quot;appstream-qt: 0.15.5 -&gt; 0.15.6&quot;,
...
   223  xhost-1.0.8:   &quot;xhost&quot;: &quot;xhost: 1.0.8 -&gt; 1.0.9&quot;,
   224  xkbcomp-1.4.5:   &quot;xkbcomp&quot;: &quot;xkbcomp: 1.4.5 -&gt; 1.4.6&quot;,
   225  xkeyboard-config-2.33:   &quot;xkeyboard-config&quot;: &quot;xkeyboard-config: 2.33 -&gt; 2.37&quot;,
   226  xlsclients-1.1.4:   &quot;xlsclients&quot;: &quot;xlsclients: 1.1.4 -&gt; 1.1.5&quot;,
   227  xmlrpc-c-1.51.07:   &quot;xmlrpc-c&quot;: &quot;xmlrpc-c: 1.51.07 -&gt; 1.51.08&quot;,
   228  xorgproto-2021.5:   &quot;xorgproto&quot;: &quot;xorgproto: 2021.5 -&gt; 2022.2&quot;,
   229  xorg-server-1.20.14:   &quot;xorg-server&quot;: &quot;xorg-server: 1.20.14 -&gt; 21.1.6&quot;,
   230  xprop-1.2.5:   &quot;xprop&quot;: &quot;xprop: 1.2.5 -&gt; 1.2.6&quot;,
   231  xrandr-1.5.1:   &quot;xrandr&quot;: &quot;xrandr: 1.5.1 -&gt; 1.5.2&quot;,
   232  xset-1.2.4:   &quot;xset&quot;: &quot;xset: 1.2.4 -&gt; 1.2.5&quot;,
   233  xsetroot-1.1.2:   &quot;xsetroot&quot;: &quot;xsetroot: 1.1.2 -&gt; 1.1.3&quot;,</code></pre>
<p>My system has at least 232 outdated packages (of 1505 detected). That is
a lot. I’m slowly going through them one by one and check why automated
upgrades do not work for them. One of the obvious examples here is <code>xorg</code>
related packages.</p>
<h2 id="next-steps">Next steps</h2>
<p>The source data that <code>repology</code> and package derivations provide
are enough to tie freshness together. My <code>jq</code> hacks don’t handle
corner cases well. Some obvious deficiencies are:</p>
<ul>
<li>packages intentionally kept as multiple versions</li>
<li>clearly wrong package versions reported by repology</li>
<li>something else?</li>
</ul>
<p>I’ll attemt to write more robust tool with friendlier UI available for
daily use.</p>
<h2 id="parting-words">Parting words</h2>
<p>Package version information exposed by <code>repology.org</code> is great. It does
not require much of data processing to get basic details of how fresh
the package version you are looking at is.</p>
<p><code>nixpkgs</code> has quite a few stale packages worth updating. If you are
thinking of contributing to <code>nixpkgs</code> then list such as this might be
a good inspiration.</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 27, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>AoC of 2022</title>
    <link href="http://trofi.github.io/posts/271-Aoc-of-2022.html" />
    <id>http://trofi.github.io/posts/271-Aoc-of-2022.html</id>
    <published>2022-12-25T00:00:00Z</published>
    <updated>2022-12-25T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>This year I again took part in <code>AoC</code>: <a href="https://adventofcode.com/2022" class="uri">https://adventofcode.com/2022</a>.
I published my solutions at <a href="https://github.com/trofi/AoC/tree/main/2022" class="uri">https://github.com/trofi/AoC/tree/main/2022</a>.</p>
<p>As usual problems were appearing once a day at 5AM from Dec 1 to Dec 25.
I did not get up that early. Instead my personal goal was to solve them
within 24 hours of publish time and get the source code within 4KB each.
I failed a few of them.</p>
<p>This year I again took <code>rust</code> (without <code>cargo</code>) to get some practice in
it. I think it went a bit smoother this time.</p>
<h2 id="rust-niceties-lifetime-tracking-and-error-handling">rust niceties: lifetime tracking and error handling</h2>
<p>I was more conscious of decreasing amount of data copying around.
Instead of slapping <code>.clone()</code> all over the place. <code>rust</code> is great at
tracking dangling references with lifetimes. For example in
<a href="https://adventofcode.com/2022/day/16">Day 16: Proboscidea Volcanium</a>
I encoded search space as a vector and a set of <code>&amp;str</code> “pointers”
instead of copying <code>String</code>s in:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Expr<span class="op">&lt;</span><span class="ot">'a</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  Val(<span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="dt">isize</span>)<span class="op">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  Expr(<span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span>)<span class="op">,</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  Assert(<span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span>)<span class="op">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> parse<span class="op">&lt;</span><span class="ot">'a</span><span class="op">&gt;</span>(i<span class="op">:</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Vec</span><span class="op">&lt;</span>Expr<span class="op">&lt;</span><span class="ot">'a</span><span class="op">&gt;&gt;</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span></code></pre></div>
<p>I even attempted using a bit of error handling in
1-2 problems instead of <code>panic!()</code>-ing on unexpected data:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="bu">FromStr</span> <span class="cf">for</span> Assignment <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> Err <span class="op">=</span> E<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> from_str(s<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Self</span><span class="op">,</span> <span class="dt">Self</span><span class="pp">::</span><span class="cn">Err</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> numbers<span class="op">:</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">usize</span><span class="op">&gt;,</span> <span class="dt">Self</span><span class="pp">::</span><span class="cn">Err</span><span class="op">&gt;</span> <span class="op">=</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      s<span class="op">.</span>split(<span class="ch">'-'</span>)<span class="op">.</span>map(<span class="op">|</span>e<span class="op">|</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        e<span class="op">.</span>parse()<span class="op">.</span>map_err(<span class="op">|</span>err<span class="op">|</span> mk_e(<span class="pp">format!</span>(<span class="st">&quot;'{}': {}&quot;</span><span class="op">,</span> e<span class="op">,</span> err)))</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      )<span class="op">.</span>collect()<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> numbers<span class="op">?.</span>as_slice() <span class="op">{</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">&amp;</span>[a<span class="op">,</span> b] <span class="op">=&gt;</span> <span class="cn">Ok</span>(Assignment<span class="op">{</span>from<span class="op">:</span> a<span class="op">,</span> to<span class="op">:</span> b<span class="op">}</span>)<span class="op">,</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>      _       <span class="op">=&gt;</span> <span class="cn">Err</span>(mk_e(<span class="pp">format!</span>(<span class="st">&quot;'{}' does not match N-M format&quot;</span><span class="op">,</span> s)))</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>Iter&lt;Result&lt;...&gt;&gt;</code> constructs <code>Result&lt;Vec&lt;...&gt;&gt;</code> (instead of
typical <code>Vec&lt;Result&lt;...&gt;&gt;</code>!). It’s a handy way to pop errors out from
iterator based loops. I’m still very clumzy at constructing new errors.
But at least I did not lose them here.</p>
<h2 id="funniest-problems">Funniest problems</h2>
<p>The solutions to most problems are technically very boring. But some
problem statements are great: a bit of ray casting, 2d and 3d physics
simulation and even CPU+CRT simulation!</p>
<p>Here is my list of fun problems I remembered:</p>
<ul>
<li><p><a href="https://adventofcode.com/2022/day/10">Day 10: Cathode-Ray Tube</a></p>
<p>Good mix of “hardware” simulations needs in a single problem.</p></li>
<li><p><a href="https://adventofcode.com/2022/day/14">Day 14: Regolith Reservoir</a></p>
<p>A problem where falling sand is simulated.</p></li>
<li><p><a href="https://adventofcode.com/2022/day/22">Day 22: Monkey Map</a></p>
<p>The only problem I did not manage to solve in 24 hours. I don’t like
my solution. But the problem statement is great!</p></li>
<li><p><a href="https://adventofcode.com/2022/day/25">Day 25: Full of Hot Air</a></p>
<p>A nice problem on unusual number base.</p></li>
</ul>
<p>I did not include a bunch of other problems like robot
production and valve handling as they looked very similar to me. I
solved them all with <a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A* search</a>.</p>
<p>Grepping through the solutions <code>visited</code> keyword happens 5 times.
I would say it is too many similar search-in-graph problems in a single
year. But maybe it’s just me who used search too frequently without an
attempt at finding better solution?</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 25, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>
<entry>
    <title>Registered on mastodon</title>
    <link href="http://trofi.github.io/posts/270-registered-on-mastodon.html" />
    <id>http://trofi.github.io/posts/270-registered-on-mastodon.html</id>
    <published>2022-12-18T00:00:00Z</published>
    <updated>2022-12-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<p>PSA: I registered on <a href="https://en.wikipedia.org/wiki/Mastodon_(social_network)">Mastodon</a>
as <a href="https://fosstodon.org/@trofi"><span class="citation" data-cites="trofi">@trofi</span><span class="citation" data-cites="fosstodon.org">@fosstodon.org</span></a>.</p>
<p>I’ll occasionally post there minor factoids not worthy of a full
blog post. It will hopefully reduce load on your RSS feed.</p>

<div class="info">
    Posted on December 18, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></summary>
</entry>

</feed>
