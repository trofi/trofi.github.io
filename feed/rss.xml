<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>trofi - All posts</title>
        <link>http://trofi.github.io</link>
        <description><![CDATA[trofi's blog]]></description>
        <atom:link href="http://trofi.github.io/feed/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sun, 05 Feb 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>trying out flakes</title>
    <link>http://trofi.github.io/posts/278-trying-out-flakes.html</link>
    <description><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>If you are tempted to try <code>flake</code>-based system configuration on your
flake-less <code>NixOS</code> but are a bit afraid of breaking existing setup
it can be done in a few lines of <code>flake.nix</code> without breaking backwards
compatibility. I did it this way:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Desktop system config&quot;</span><span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span>.<span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs/nixos-22.11&quot;</span><span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixosConfigurations</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">nz</span> <span class="op">=</span> nixpkgs.lib.nixosSystem <span class="op">{</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">modules</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>          <span class="ss">./configuration.nix</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>          <span class="co"># Remove the need for `&lt;nixos&gt;` / `&lt;nixos-config&gt;`</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>          <span class="co"># management by `root` channel.</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>          <span class="op">({</span><span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...}</span>: <span class="op">{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            <span class="va">nix</span>.<span class="va">nixPath</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;nixpkgs=</span><span class="sc">${</span>nixpkgs<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>              <span class="st">&quot;nixos-config=/etc/nixos/configuration.nix&quot;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">];</span> <span class="op">})</span> <span class="op">];</span> <span class="op">};</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The only thing you need to do on top is to create <code>git</code> repository out
of <code>/etc/nixos</code> and you are done:</p>
<pre><code># cd /etc/nixos
# git init
# git add flake.nix # and maybe a few more files you have there
# nixos-rebuild --impure swith</code></pre>
<p>Done! Chances are you don’t even need <code>--impure</code>. One more touch is to
adapt automatic updates if you have those:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># workaround unrecognized --no-build-output</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flake</span> <span class="op">=</span> <span class="st">&quot;/etc/nixos&quot;</span><span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flags</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># did not move out home directory overlay definition yet</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--impure&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># why not all inputs then?</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--update-input&quot;</span> <span class="st">&quot;nixpkgs&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--commit-lock-file&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now it’s all done!</p>
<h2 id="long-story">Long story</h2>
<p>When I started using <code>nix</code> daily I only heard of
<a href="https://nixos.wiki/wiki/Flakes">nix flakes</a> a bit. I did not dare to
try using them. Either for local development or for system-wide
configuration. From the documentation and notes around it felt
incompatible to current channel-based system configuration approach.</p>
<p>My biggest achievement was to run packages right off <code>github</code> pull
requests like:</p>
<pre><code>$ nix run github:NixOS/nixpkgs/pull/175618/merge#firefox</code></pre>
<p>That felt like magic: no need to clone a repository or reconfigure
anything in the system. You just build-and-run the expression out of
internet. But I was not sure I wanted more of <code>flakes</code> :)</p>
<h2 id="the-need-arose">The need arose</h2>
<p>Things have changed when Sandro tried
<a href="https://github.com/trofi/nix-olde/">nix-olde</a> on <code>flake</code>-based system
and got <a href="https://github.com/trofi/nix-olde/issues/2">cryptic backtraces</a>
back.</p>
<p>I realized I completely forgot about <code>flakes</code> existence. By now I had
about a year of experience dealing with channel-based system
configuration. I took it as a good opportunity to have a more detailed
look at <code>flakes</code>.</p>
<p>Normally <code>nix-olde</code> instantiates system derivation out of <code>&lt;nixpkgs&gt;</code>
expression via:</p>
<pre><code>$ nix-instantiate '&lt;nixpkgs/nixos&gt;' -A system
/nix/store/66db0cgpvcbdfmqaz86wfv264w7k63n8-nixos-system-nz-23.05pre-git.drv</code></pre>
<p>And then parses the <code>.drv</code> to extract the details about outdated
packages. <code>&lt;nixpkgs&gt;</code> is usually maintained by <code>root</code> via
<code>nix-channel</code>.</p>
<p>But what about <code>flakes</code>? Now does the equivalent work there if we build
the whole system out of it?</p>
<p>I made the simplest conversion possible by defining my system flake out
of existing <code>/etc/nixos/configuration.nix</code>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /etc/nixos/flake.nix</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Desktop system config&quot;</span><span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span>.<span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs&quot;</span><span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixosConfigurations</span>.<span class="va">nz</span> <span class="op">=</span> nixpkgs.lib.nixosSystem <span class="op">{</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">modules</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="ss">./configuration.nix</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">];</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Surprisingly that was enough to make <code>nixos-rebuild --impure switch</code>
build my system successfully. Note: I intentionally build it from
<code>nixpkgs</code> <code>master</code> branch and not an <code>unstable</code> channel.</p>
<p>Then I removed <code>&lt;nixpkgs&gt;</code> channel defined by <code>root</code> user. I’m not sure
if I’m holding it wrong but it was enough to break <code>nix-olde</code>. I
<a href="https://github.com/trofi/nix-olde/commit/96cade0106689918c455fa0c9b78a2079aaf29c6">updated</a>
<code>nix-olde</code> to support <code>flake</code> configuration. The gist of it is to
instantiate the system with a new path:</p>
<pre><code>$ nix eval --impure --raw /etc/nixos#nixosConfigurations.$(hostname).config.system.build.toplevel.drvPath
/nix/store/x93fsz8451b0vxyz07db9879gllaq7a5-nixos-system-nz-23.05.20230205.b030e4a.drv</code></pre>
<p>Then I noticed that <code>nix-update</code> and even <code>nix develop -f.</code> relies on
<code>&lt;nixpkgs&gt;</code> variable to be present. I defined compatible variable to
match system’s <code>nixpkgs</code> checkout:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /etc/nixos/flake.nix</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Desktop system config&quot;</span><span class="op">;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span>.<span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs&quot;</span><span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span> <span class="op">}</span>: <span class="op">{</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixosConfigurations</span>.<span class="va">nz</span> <span class="op">=</span> nixpkgs.lib.nixosSystem <span class="op">{</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">modules</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>        <span class="ss">./configuration.nix</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">({</span><span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...}</span>: <span class="op">{</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>          <span class="va">nix</span>.<span class="va">nixPath</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;nixpkgs=</span><span class="sc">${</span>nixpkgs<span class="sc">}</span><span class="st">&quot;</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;nixos-config=/etc/nixos/configuration.nix&quot;</span></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>          <span class="op">];</span> <span class="op">})</span> <span class="op">];</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That way I could still rebuild my system with
<code>nix build -f nixos system</code> and similar commands. And I did not change
<code>flake.nix</code> since. I still can use all the existing tools that rely on
<code>&lt;nixpkgs&gt;</code> path.</p>
<p>To fix auto-upgrade I had to reconfigure it slightly:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /etc/nixos/configuration.nix</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="co"># workaround unrecognized --no-build-output</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flake</span> <span class="op">=</span> <span class="st">&quot;/etc/nixos&quot;</span><span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">system</span>.<span class="va">autoUpgrade</span>.<span class="va">flags</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># did not move out home directory overlay definition yet</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--impure&quot;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    <span class="co"># why not all inputs then?</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--update-input&quot;</span> <span class="st">&quot;nixpkgs&quot;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--commit-lock-file&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Give all the CPUs to one job at a time.</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;--max-jobs&quot;</span> <span class="st">&quot;1&quot;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>--impure</code> allows file access outside explicit <code>input</code>s (I have a
few overlays lying all over the system). And <code>--update-input nixpkgs</code>
pulls <code>nixpkgs</code> update every time the system tries to update.</p>
<p>The result is not as scary as I initially suspected. This setup did not
break most of my workflows around local <code>nixpkgs</code> checkouts.</p>
<p>Now I can run other packages (similar to <code>nixpkgs</code> input) right from
<code>git</code> state. For example my typical <code>uselex</code> package is defined via git
snapshot:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat cat ~/overlays/uselex/default.nix</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">stdenv</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">ruby_3_1</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">binutils-unwrapped-all-targets</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">unstableGitUpdater</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2022-08-29&quot;</span><span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;5cf79a872f3331ce87171e66cf27c430585f65af&quot;</span><span class="op">;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-0aFJaGLcrrEkOH3cFs2uHjkCUw9ndckngfnb0J1FK7c=&quot;</span><span class="op">;</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="co"># ... more stucff</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I was able to define it’s <code>live</code> version by passing an input explicitly:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat ~/overlays/flake.nix</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;trofi's overlay&quot;</span><span class="op">;</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">inputs</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">nixpkgs</span>.<span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:NixOS/nixpkgs&quot;</span><span class="op">;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">uselex</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;github:trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">flake</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">outputs</span> <span class="op">=</span> <span class="op">{</span> <span class="va">self</span><span class="op">,</span> <span class="va">nixpkgs</span><span class="op">,</span> <span class="va">uselex</span> <span class="op">}</span>@<span class="va">inputs</span><span class="op">:</span> <span class="kw">let</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="va">np</span> <span class="op">=</span> <span class="bu">import</span> nixpkgs <span class="op">{</span> <span class="va">system</span> <span class="op">=</span> <span class="st">&quot;x86_64-linux&quot;</span><span class="op">;</span> <span class="op">};</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">in</span> <span class="op">{</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">packages</span>.<span class="st">&quot;</span>x86_64-linux<span class="st">&quot;</span> <span class="op">=</span> <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>      <span class="va">uselex</span> <span class="op">=</span> np.callPackage <span class="ss">./uselex</span> <span class="op">{};</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>      <span class="va">uselex_live</span> <span class="op">=</span> uselex.overrideAttrs <span class="op">(</span><span class="va">oa</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>        <span class="va">version</span> <span class="op">=</span> inputs.uselex.shortRev<span class="op">;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>        <span class="va">src</span> <span class="op">=</span> inputs.uselex<span class="op">;</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>      <span class="op">});</span> <span class="op">};</span> <span class="op">};</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here I defined 2 packages:</p>
<ul>
<li><code>uselex</code>: a package as it’s defined in <code>uselex/default.nix</code></li>
<li><code>uselex_live</code>: a package that uses <code>master</code> branch from <code>git</code> and
reuses rest of <code>uselex</code> definition.</li>
</ul>
<p>Now I can build both as:</p>
<pre><code>$ cd ~/overlays
$ nix build .#uselex .#uselex_live

$ nix flake info
warning: 'nix flake info' is a deprecated alias for 'nix flake metadata'
warning: Git tree '/home/slyfox/.config/nixpkgs' is dirty
Resolved URL:  git+file:///home/slyfox/overlays/nixpkgs
Locked URL:    git+file:///home/slyfox/overlays/nixpkgs
Description:   trofi's overlay
Path:          /nix/store/s2b6pagz9i55jq71jfp3ml9y2dyl0mlr-source
Last modified: 2023-01-26 22:07:27
Inputs:
├───nixpkgs: github:NixOS/nixpkgs/f69c8b761a683940edeed0c23da1a5b8bd50bed3
└───uselex: github:trofi/uselex/5cf79a872f3331ce87171e66cf27c430585f65af</code></pre>
<p>Using <code>--override-input</code> flag we can redirect default target commit to
locally modified tree or any other commit:</p>
<pre><code># no overrides:
$ nix build .#uselex_live

$ ls -ld result result-1
result -&gt; /nix/store/76qkbdna1y4adbkk9k2g7znw2v3yyr7s-uselex-5cf79a8

# redirect to the local tree:
$ nix build .#uselex_live --override-input uselex ~/dev/git/uselex

• Updated input 'uselex':
    'github:trofi/uselex/5cf79a872f3331ce87171e66cf27c430585f65af' (2022-08-29)
  → 'git+file:///home/slyfox/dev/git/uselex?ref=refs%2fheads%2fmaster&amp;rev=5cf79a872f3331ce87171e66cf27c430585f65af' (2022-08-29)
$ ls -ld result result-1
result -&gt; /nix/store/76qkbdna1y4adbkk9k2g7znw2v3yyr7s-uselex-5cf79a8

# redirect to the arbitrary commit or branch:
$ nix build .#uselex_live --override-input uselex github:trofi/uselex/fe54bc12013a2a28f1638bdd5faa2f81d4d8fd1c

• Updated input 'uselex':
    'github:trofi/uselex/5cf79a872f3331ce87171e66cf27c430585f65af' (2022-08-29)
  → 'github:trofi/uselex/fe54bc12013a2a28f1638bdd5faa2f81d4d8fd1c' (2017-07-28)
$ ls -ld result result-1
result -&gt; /nix/store/82maym4hks1nfcprharxwrpvf7ck6hz4-uselex-fe54bc1</code></pre>
<p>Note how input reports new commit it switches to and encodes it into
package name (as we requested it with <code>version = inputs.uselex.shortRev;</code>).</p>
<p>One can even add a short alias for an arbitrary flake repository:</p>
<pre><code>$ nix registry add ul github:trofi/uselex-flake
$ nix run ul#uselex_live --no-write-lock-file
...
 == SYNOPSIS (uselex-0.0.1)

      uselex.rb - look for USEless EXports in object files

$ nix registry remove ul</code></pre>
<p>And for completeness here is how <code>flake.lock</code> looks like:</p>
<pre><code>{
  &quot;nodes&quot;: {
    &quot;nixpkgs&quot;: {
      &quot;locked&quot;: {
        &quot;lastModified&quot;: 1675628371,
        &quot;narHash&quot;: &quot;sha256-KsAGKX6R5OZ4mvX0v9I8rXoQD62NG8bNq2vDh731fUk=&quot;,
        &quot;owner&quot;: &quot;NixOS&quot;,
        &quot;repo&quot;: &quot;nixpkgs&quot;,
        &quot;rev&quot;: &quot;461ef24010bec9df46f9f982e27441d83a856563&quot;,
        &quot;type&quot;: &quot;github&quot;
      },
      &quot;original&quot;: {
        &quot;owner&quot;: &quot;NixOS&quot;,
        &quot;repo&quot;: &quot;nixpkgs&quot;,
        &quot;type&quot;: &quot;github&quot;
      }
    },
    &quot;root&quot;: {
      &quot;inputs&quot;: {
        &quot;nixpkgs&quot;: &quot;nixpkgs&quot;,
        &quot;uselex&quot;: &quot;uselex&quot;
      }
    },
    &quot;uselex&quot;: {
      &quot;flake&quot;: false,
      &quot;locked&quot;: {
        &quot;lastModified&quot;: 1661761258,
        &quot;narHash&quot;: &quot;sha256-0aFJaGLcrrEkOH3cFs2uHjkCUw9ndckngfnb0J1FK7c=&quot;,
        &quot;owner&quot;: &quot;trofi&quot;,
        &quot;repo&quot;: &quot;uselex&quot;,
        &quot;rev&quot;: &quot;5cf79a872f3331ce87171e66cf27c430585f65af&quot;,
        &quot;type&quot;: &quot;github&quot;
      },
      &quot;original&quot;: {
        &quot;owner&quot;: &quot;trofi&quot;,
        &quot;repo&quot;: &quot;uselex&quot;,
        &quot;type&quot;: &quot;github&quot;
      }
    }
  },
  &quot;root&quot;: &quot;root&quot;,
  &quot;version&quot;: 7
}</code></pre>
<h2 id="parting-words">Parting words</h2>
<p>You don’t have to start from scratch if you are migrating from a typical
<code>/etc/nixos/configuration.nix</code> to <code>flake.nix</code>.</p>
<p>While slightly verbose <code>flakes</code> are not too scary as a concept. They
allow one to encode (and persist) all external inputs into <code>/nix/store</code>
and optionally write it into the <code>flake.lock</code> to be able to restore
exact build environment when needed.</p>
<p><code>flakes</code> still provide flexibility of switching the revisions back and
forth for individual inputs for test purposes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February  5, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 05 Feb 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/278-trying-out-flakes.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>from mcedit to vim</title>
    <link>http://trofi.github.io/posts/277-from-mcedit-to-vim.html</link>
    <description><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>It’s a blog post about text editor. You probably want to ignore it :)</p>
<p>I tried <code>vim</code> again and got it to behave close enough to <code>mcedit</code>. Now I
can use it with the following minimal <code>.vimrc</code>:</p>
<pre><code>silent! source $VIMRUNTIME/defaults.vim

colorscheme darkblue
&quot; default color is invisible blue-on-blue
highlight MatchParen ctermbg=green

&quot; just maintain the indent
set autoindent

&quot; copy the indentation style from previous line
set copyindent

&quot; do preserve tab/space mix on change
set preserveindent

&quot; always render tabs even if a single file is open
set showtabline=2

&quot; always render status line below
set laststatus=2

set list
set listchars=tab:&lt;-&gt;,trail:.

&quot; vim enables xterm-style Ctrl-&lt;arrows&gt; keys based on $TERM variable
&quot; name. term=screen-256color does not trigger it. Let's work it around
&quot; by clobbering it.
set term=xterm-256color</code></pre>
<p>And it looks like that:</p>
<figure>
<img src="http://trofi.github.io/posts.data/277-from-mcedit-to-vim/vim.png" alt="my vim pic" />
<figcaption aria-hidden="true">my vim pic</figcaption>
</figure>
<p>If you really want to know my path to <code>vim</code> here is a long story.</p>
<h2 id="ms-dos-times">MS-DOS times</h2>
<p>My first ever encounter with text editors was a monochrome blue/white
LCD display. It was attached to some 286 “portable” computer weighting
about 20 kilograms. It emitted the calming buzzing sound I will never
forget. And it ran
<a href="https://en.wikipedia.org/wiki/Norton_Commander">Norton Commander</a>
as the primary shell.</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/en/1/1b/Norton_Commander_5.51.png" alt="nc.exe pic from wikipedia" />
<figcaption aria-hidden="true">nc.exe pic from wikipedia</figcaption>
</figure>
<p>Others also used <a href="https://ru.wikipedia.org/wiki/Volkov_Commander">Volkov Commander</a>
clone. It looks almost identical to the untrained eye.</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/ru/7/73/Volkov_commander4_screen.png" alt="vc.exe pic from wikipedia" />
<figcaption aria-hidden="true">vc.exe pic from wikipedia</figcaption>
</figure>
<p>They both had an editor built right into file manager accessible via
<code>&lt;F4&gt;</code> key binding. I did not edit many files there and only saw others
doing it.</p>
<h2 id="windows-times">Windows times</h2>
<p>On windows machines I used <a href="https://en.wikipedia.org/wiki/Total_Commander">Total Commander</a>
as a shell and don’t remember much about the editors I used. Bare
<code>notepad</code> was probably a thing. Windows environment did not have many
text files to tweak. Thus it was not important.</p>
<p>The tiny amount of programming I did happened in
<a href="https://en.wikipedia.org/wiki/Turbo_Pascal">Turbo Pascal IDE</a> and in
<a href="https://en.wikipedia.org/wiki/Visual_Studio#6.0_(1998)">Visual Studio 6.0</a>.</p>
<figure>
<img src="https://winworldpc.com/res/img/screenshots/967c1c190fa98b954e706b532193194d0bac135b24e577a11cf12325aeba31cb.png" alt="turbo.exe pic from winworldpc.com" />
<figcaption aria-hidden="true">turbo.exe pic from winworldpc.com</figcaption>
</figure>
<p><code>Turbo Pascal</code> was a great IDE: it had syntax highlighting, go-to-error
navigation, built in compile/build progress reporter, breakpoint
debugger, intuitive compiler flag comboboxes and may other things I did
not appreciate at the time. Being a <code>DOS</code>-based program it looked like a
miracle.</p>
<p>It defined my expectation of the ideal environment.</p>
<h2 id="linux-times">Linux times</h2>
<p>In the first year of university I started writing first non-trivial
programs. Around the same time I switched to <code>Linux</code> as my desktop.</p>
<p><code>Linux</code> (as you might already suspect at this point) was full of text
files one has to tweak to adapt it to your environment. It was even more
important in those day than nowadays. One of the books I bought of
“Linux for dummies” kind allocated about 200 pages on the problem of
getting Russian language (or at least charset) and fonts to work in
various programs: text editors, audio players, <code>gtk</code> apps, <code>qt</code> apps,
<code>x11</code> apps, email programs, file system encodings for interoperability
with dual-booted windows.</p>
<p>To give you a gist of the kind of the problems one encountered: Russian
had 3 popular 8-bit charsets at the time: <code>CP866</code> (used in <code>MS-DOS</code>),
<code>CP1251</code> (used in windows GUI) and <code>KOI8-R</code> used in e-mail and many
<code>Linux</code> distributions (but not all of them!). There was also an
<code>ISO-8859-5</code> I never saw being used in real world.</p>
<h3 id="russian-encodings-digression">Russian encodings digression</h3>
<p>All Russian encoding have their own strange and charming properties.</p>
<p><a href="https://en.wikipedia.org/wiki/KOI8-R">KOI8-R</a> is the
fanciest of the three: it’s main design is to remain readable even if
highest bit of each byte is stripped by unforgiving email or terminal
systems out there that assumed 7-bit ASCII.</p>
<p>So the Cyrilliс text would be mangled into a transliterated version of
Russian:</p>
<pre><code>$ echo 'Ужасы кодировок времен царя Гороха' | iconv -t koi8-r | perl -pe 'tr/\x80-\xFF/\x00-\x7F/' | iconv -f koi8-r
        uVASY KODIROWOK WREMEN CARQ gOROHA

$ echo 'АБВГДЕЁЖЗИЙКЛМПОНРСТУФХЦЧШЩЪЫЬЭЮЯ' | iconv -t koi8-r | perl -pe 'tr/\x80-\xFF/\x00-\x7F/' | iconv -f koi8-r
        abwgde3vzijklmponrstufhc~{}yx|`q

$ echo 'абвгдеёжзийклмнопрстyфxцчшщъыьэюя' | iconv -t koi8-r | perl -pe 'tr/\x80-\xFF/\x00-\x7F/' | iconv -f koi8-r
        ABWGDE#VZIJKLMNOPRSTyFxC^[]_YX\@Q</code></pre>
<p>Some of the letters are missing: it’s not very easy to map 33
Cyrillic letters into 26 Latin ones. You have only one bit to flip and
do translation consistently across upper and lower case. It’s a
marvellous hack.</p>
<p>To clarify: even being a native language speaker it’s not easy to read
such mangled text. But at least you can recognize most words and guess
strange letters. If you know nothing about Cyrillic you can spot the
similarities (and differences) in Cyrillic and Latin alphabets side by
side.</p>
<p>This way of construction means that Cyrillic letters don’t go in
alphabetic order in KOI8-R charset. They are scattered all over the
space. This means that naive sorting based on <code>strcmp()</code> does not
produce anything close to alphabetic sorting.</p>
<p><a href="https://en.wikipedia.org/wiki/Code_page_866">CP866</a> and
<a href="https://en.wikipedia.org/wiki/Windows-1251">CP1251</a> are mostly safe in
this regard.</p>
<p>But they also have their own caveats.</p>
<p>For example in <code>CP1251</code> <code>я</code> letter has <code>0xFF</code> value. Many programs at
that time had a bug of this sort:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">FILE</span> <span class="op">*</span> f <span class="op">=</span> <span class="op">...;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> c<span class="op">;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="op">((</span>c <span class="op">=</span> getc<span class="op">(</span>f<span class="op">))</span> <span class="op">!=</span> EOF<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The bug here is in <code>getc()</code> result (of type <code>int</code>) truncation down to
<code>c</code> (of type <code>char</code>).</p>
<p>In <code>!=</code> comparison <code>signed char</code> systems sign-extend <code>0xFF</code> (<code>(char)-1</code>)
to <code>0xFFffFFff</code> (<code>(int)-1</code>, and <code>EOF</code>).</p>
<p>As a result some text editors (or even <code>FTP</code> and <code>IRC</code> clients and
servers!) unaware of Cyrillic would silently eat rest of your file if
you were to type (or receive!) ‘я’ in it.</p>
<p>While <code>strcmp()</code> produces mostly alphabetical sorting there is one
exception: it’s the letter <code>Ё</code> / <code>ё</code>. It stands outside the rest of
the alphabet probably because it’s not present in all Slavic Cyrillic
alphabets.</p>
<p>It took the ecosystem quite a while to adopt <code>strcoll()</code> style sorting.
And then UTF-8 came and broke it again.</p>
<h2 id="back-to-linux-towards-mc">Back to Linux: towards mc</h2>
<p>Given the proliferation of encoding one’s text editor should better
support all these encodings. Alas, I picked one that does not. I sticked
to something that resembles my good old <code>Norton Commander</code> friend:
<a href="https://en.wikipedia.org/wiki/Midnight_Commander">Midnight Commander</a></p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/2/2e/Mc-screenshot.png" alt="mc pic from wikipedia" />
<figcaption aria-hidden="true">mc pic from wikipedia</figcaption>
</figure>
<p>There I felt at home. Most of the key bindings were the same, functional
keys are nicely documented right on the screen. And built in editor had
a bit of syntax highlighting! What else do you need?!</p>
<p>My system had <code>LANG=ru_RU.KOI8-R</code> locale at the time. It did not have
any troubles with text files in English. Some functional keys on the
other hand were off-by-two in <code>urxvt</code>. But they were working fine on
<code>xterm</code>. So I used <code>xterm</code>.</p>
<p><code>mcedit</code> did not support file encoding different from <code>LC_CTYPE</code> at the
time. In rare moments of dire need I used things like
<a href="https://en.wikipedia.org/wiki/Luit">luit</a> as a cheap hack to get
something edited. I could not get <code>iconv</code> to work right. Fun times.</p>
<h2 id="first-attempt-as-vim">First attempt as vim</h2>
<p>At some point I decided to build
<a href="https://en.wikipedia.org/wiki/Linux_From_Scratch">LFS</a> as a way to
learn <code>Linux</code> internals.</p>
<p>When I built it for the first time I needed an editor at an early stage
of system preparation. I ended up trying <code>vim</code>. Maybe it was a default?
I don’t remember.</p>
<p>I copied <code>.vimrc</code> from my previous distribution (<code>Alt Master 2.2</code>, a
<code>Mandrake</code> sibling). Here it’s full content:</p>
<pre><code>&quot; Begin .vimrc

set nocompatible
set bs=2
&quot; set columns=80
set background=dark
set wrapmargin=8
syntax on
set ruler

set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,koi8-r

set cindent
set shiftwidth=4

&quot; End .vimrc</code></pre>
<p>I had no idea what exactly the above config did. In hindsight it’s worst
bit was the <code>set wrapmargin=8</code> option. In case you are not familiar with
that <code>vim</code> option: it inserts newlines in strings automatically as soon
as you get as close as 8 characters to the visible boundary of the
screen from the right. As in, it inserts newlines in different places
depending on size of your terminal. And I was not used to <code>vim</code> enough
to spot that it does this thing. I had to open files in <code>mcedit</code> later
to find the effect.</p>
<p>In my case the first casualty was <code>/etc/fstab</code>: it wrapped half the
mount options to the new line and I got unbootable system. When I
figured that it was <code>vim</code>’s deed I decided it was too dangerous to use
as it silently corrupts files.</p>
<p>On top of that I did not like black <code>vim</code>’s background: it felt void.
Plus multiple editing modes confused me. I did not understand why you
have to print <code>&lt;ESC&gt;:qa!</code> and sometimes just <code>:qa!</code>. I did not do a
<code>vimtutor</code> as I did not know it existed: I did not pay much attention to
various help banners <code>vim</code> pops at you at start.</p>
<p>Being a default editor in the distribution it felt like a handicap
archaic tool. I though it was not supposed to be a complete editor with
a long list of features. Ironically I thought it’s something primitive
because it started up so quickly.</p>
<h2 id="first-attempt-at-emacs">First attempt at emacs</h2>
<p>A bit later I got a day job related to <code>C++</code>. I started exploring
IDE-like environments. I can only remember <code>Anjuta</code> and <code>Eclipse</code>. There
were a lot more I tried. They all were too slow and opinionated, needed
project files, did not understand <code>autotools</code>-based projects. I quickly
rejected them all.</p>
<p>Around that time I got daily internet access where I found all sorts of
things about how cool <code>Lisp</code> and <code>Emacs</code> are. I started using <code>Emacs</code>
for most of file editing and read a few books on <code>Common Lisp</code>. I did
not write anything sizable in <code>Lisp</code>. Best I could do is to draw an
<code>OpenGL</code> square using <code>verrazano</code> <code>FFI</code> library for <code>sbcl</code>.</p>
<p>In <code>C++</code> land I tried <code>ECB</code>, <code>CEDET</code> and <code>Bovinator</code> for parsing and
autocompletion. The result looked suboptimal (manly because our build
system injected too many defines external parsers did not know about).
The plugins slowed <code>emacs</code> loading a lot. To save on startup time I
tried to use <code>emacsclient</code>. I was using <code>X11</code> version of <code>Emacs</code>.
Switching workspace to edit a file was very inconvenient.</p>
<p>I disabled heavyweight extension and used <code>Emacs</code> itself for a while.</p>
<p>Writing this blog post I found that <code>emacsclient -nw</code> works just as
expected. It seems to do what I needed back then: it starts up quickly
as a client. Maybe I’ll give <code>Emacs</code> another try as well. I’m so used to
it’s keybindings in editor mode.</p>
<h2 id="back-to-mcedit">Back to mcedit</h2>
<p>Disappointed in slow <code>Emacs</code> startup times I settled on <code>mcedit</code> and
used it for most of my editing since. It looked perfect: so close to
<code>nc</code>, trivial to extend syntax highlighting files with new keywords.
Apparently I even contributed
<a href="https://github.com/MidnightCommander/mc/commit/16130f7caa7381663fda8f57f5b46c2b716ec17f">haskell.syntax</a>
and <a href="https://github.com/MidnightCommander/mc/commit/e0eb9ca1cd30cda67732096528e5573a14e5a1f4">ebuild.syntax</a>.</p>
<p>At that time a new <code>mc</code> development team was formed by Russian-speaking
community of <code>mc</code> users to revive stalled upstream development. I joined
and contributed a tiny bit to <code>mc</code>. I like to think I helped with
<code>subversion</code> to <code>git</code> migration, fixed a few dire corner cases in
completion code, fixed a few bugs in <code>FISH</code> file transfer protocol,
basic <code>alacritty</code> support and even support for compilation with
<code>tinycc</code>.</p>
<p>All the above helped me track and use new features in development in
<code>mcedit</code>: vertical block selection (<code>Alt-&lt;arrows&gt;</code>), tab/space
highlighting (<code>Alt-_</code>), file encoding selection (<code>Ctrl-e</code>), tag
completion (<code>ESC-Tab</code>) and many other things I take for granted today.</p>
<p><code>mc</code> was my IDE for many years and <code>mcedit</code> helped editing all the text
files for me. Be it blog posts like this one, <code>Makefile</code>s, <code>C</code> projects,
<code>Haskell</code> projects, <code>/etc/fstab</code> entries. I even successfully patched
binary filnes with it.</p>
<h2 id="various-snags">Various snags</h2>
<p>There are many gnarly bits in <code>mc</code> and <code>mcedit</code>. Most of them stem from
the complex problem space. To name a few:</p>
<ul>
<li><code>mc</code> is full of <code>terminfo</code> overrides (which are sometimes invalid and
outdated) because distributions’ <code>terminfo</code> databases are too old.
Files like <a href="https://github.com/MidnightCommander/mc/blob/master/misc/mc.lib">misc/mc.lib</a>
ought to be empty in a perfect system.</li>
<li><code>mc</code> has to interface with underlying shell (that you can access over
<code>Ctrl-O</code>) by sending shell text commands like <code>cd $dir</code> when you move
around directories and run executables. Path escaping and process
progress is shell-dependent. State tracking is easy to confuse by
running a subshell.</li>
<li><code>mcedit</code> has it’s own (inefficient) syntax highlighter with it’s own
syntax file format. This means most language syntaxes have to be
reimplemented on it. It’s not too bad for simple languages. But very
fragile for languages that allow you to embed another language in it’s
snippets: markdown with code snippets, shell with <code>$(subshell calls   "strings $(more subshell)")</code>.</li>
<li><code>mcedit</code> while being a large part of <code>mc</code> is not the primary feature
of it. <code>mc</code> is primarily a file manager that happens to have an
editor. <code>mcedit</code> does not have that many contributors and lacks an
easy way to extend it. Things like <code>tags</code> completion or <code>aspell</code>
support are implemented directly in C code. There is no easy way to
hack up a simple equivalent.</li>
</ul>
<p>These are not major issues to get something basic to work. My use of
<code>mc</code> for past 20 years is a good indication of that.</p>
<p>Recently I went through the problems of <a href="https://adventofcode.com/2015/">AoC 2015</a>
just to practice in <code>rust</code> a bit more. I encountered a simple <code>json</code>
parsing problem (<code>2015/12</code>). It’s
<a href="https://raw.githubusercontent.com/trofi/AoC/main/2015/12/input">input</a>
is a single line of <code>json</code> text. The line was 37K long. Tiny by today’s
standards.</p>
<p>I selected the line in the browser and pressed <code>Shift+Insert</code> in
<code>mcedit</code> window to paste it.</p>
<p>Guess how long it took to insert the text into an otherwise empty
freshly opened file. 1 second? 10 seconds? 1 year? What would you
expect from your editor?</p>
<p>Got the guesstimate?</p>
<p>It took 40 seconds. What is worse: while pasting is in progress UI shows
you interactively the speed of text insertion (good): first 10K get
inserted within 2-3 second, next 10K take about 10 more seconds maybe,
and next 10K takes 25 This is quadratic behaviour right there (bad).</p>
<p>I thought it’s a minor bug. I knew <code>mc</code> does somewhat complex
arithmetics on multi-byte strings when moves around characters in them.
But it’s not supposed to get that much worse.</p>
<p>I filed a <a href="https://midnight-commander.org/ticket/4421">bug</a> with the
<code>perf</code> dump below to quickly highlight problematic bit:</p>
<pre><code>  26,69%  mc                      [.] edit_buffer_get_utf
  25,02%  mc                      [.] edit_move_forward3
  14,99%  mc                      [.] edit_buffer_get_byte
   9,16%  libglib-2.0.so.0.7400.3 [.] g_utf8_get_char_validated
   5,51%  libglib-2.0.so.0.7400.3 [.] g_unichar_iswide
   4,33%  mc                      [.] edit_buffer_get_bol
   1,88%  mc                      [.] g_utf8_get_char_validated@plt</code></pre>
<p>And got a response that such behaviour is not specific to <code>mcedit</code> and
should plague other editors as well. I though it sounded a bit wrong.
My expectation was that paste speed should be linear to pasted input,
not quadratic.</p>
<p>I tried to find at least one editor that would behave poorly for this
specific use case and found none. Anything I tried was able to do it in
1-2 seconds: <code>vim</code>, <code>emacs -nw</code>, <code>nano</code>, <code>gedit</code>, <code>geany</code>, <code>kwrite</code>,
<code>helix</code>, some <code>Java</code>-based editors I forgot. They all were reasonably
fast.</p>
<p>Unrelated to the above roughly around that time I planned to share one
of my blog posts to wider audience. I knew my text was always full of
typos and I wanted an easy interactive tool to highlight trivial typos
I did. I ran a few tools on my post and they all highlighted typos in
slightly different places: some looked at the code comment, some didn’t,
some used external <code>aspell</code> engine, some used embedded grammar engines.
I settled on <code>vim</code>’s <code>:setlocal spell!</code> magic spell.</p>
<h2 id="vim-again">vim again</h2>
<p>Having got a bit of positive experience with spell checking I decided to
give <code>vim</code> another try. I did not want to write any complex
configuration as I have many editing environments and would prefer to be
able to get an editor into a comfortable state with a few commands or a
few lines in the config.</p>
<p>I went through my initial <code>~/.vimrc</code> from the ancient times to see if I
still needed any of that:</p>
<pre><code>&quot; Begin .vimrc

set nocompatible
set bs=2
&quot; set columns=80
set background=dark
set wrapmargin=8
syntax on
set ruler

set encoding=utf-8
set fenc=utf-8
set fencs=utf-8,koi8-r

set cindent
set shiftwidth=4

&quot; End .vimrc</code></pre>
<p>I found that pesky <code>wrapmargin=8</code> option that inserted unexpected
newlines and disabled it as a first thing.</p>
<p>Then I looked around for a cozy background that <code>mcedit</code> and <code>nc</code> both
had. <code>colorscheme darkblue</code> did the trick.</p>
<p>I grew so fond of <code>mcedit</code>’s style of highlighting <code>&lt;TAB&gt;</code>s and trailing
white space that I felt I absolutely needed an equivalent. Otherwise I
would corrupt <code>Makefile</code>s all the time by expanding <code>&lt;TAB&gt;</code>s to spaces.
Or the other way around. Who knows!</p>
<p>White space highlighting was easy to do with <code>listchars</code>:</p>
<pre><code>set list
set listchars=tab:&lt;-&gt;,trail:.</code></pre>
<p>Another important feature of <code>mcedit</code> was to preserve original
indentation for newly written lines. That I managed to get close enough
with the below:</p>
<pre><code>&quot; just maintain the indent
set autoindent

&quot; copy the indentation style from previous line
set copyindent

&quot; do preserve tab/space mix on change
set preserveindent</code></pre>
<p>I still don’t quite understand what <code>autoindent</code> does, but I get
something mostly reasonable.</p>
<p>Last minor thing that kept confusing me was indistinguishable command
prompt area. It was hard to tell if it’s a command or the rest of edited
document. Thus I added a few explicit visual delimiters with:</p>
<pre><code>&quot; always render tabs even if a single file is open
set showtabline=2

&quot; always render status line below
set laststatus=2</code></pre>
<p>To avoid inserting garbage when I use <code>Ctrl-&lt;arrows&gt;</code> out of old <code>Emacs</code>
/ <code>mcedit</code> habit I added a hack to recognise these keys in <code>tmux</code>:</p>
<pre><code>&quot; vim enables xterm-style Ctrl-&lt;arrows&gt; keys based on $TERM variable
&quot; name. term=screen-256color does not trigger it. Let's work it around
&quot; by clobbering it.
set term=xterm-256color</code></pre>
<p>And that was it! I got good enough <code>vim</code> config as an <code>mcedit</code>
replacement. To clarity: they are absolutely not a drop-in replacement
at this point. They are now both comfortable enough for me to use.</p>
<p>I went through the <code>vimtutor</code> again, wrote a reasonably sized
<a href="https://github.com/trofi/nix-olde/">nix-olde</a> program and got a
pleasant experience.</p>
<p>Along the way I found a few more advanced substitutes for <code>mcedit</code>’s
features:</p>
<ul>
<li>vertical block selectors are done via <code>Ctrl-v</code></li>
<li>adding/removing indent for selected lines are done via <code>Shift-,</code> /
<code>Shift-.</code>.</li>
<li>regex lookups and regex substitutes are occasionally helpful. They
also work on visual selections and not just full files!</li>
</ul>
<p>There are still things that I can’t get used to so easily: I’m used to
INSERT mode that is always on in <code>mcedit</code> and <code>emacs</code>. I still keep
getting lost in which mode I am now and find myself to switch there and
back all the time. I’m not sure it’s how it’s supposed to work or I’m
doing <code>vim</code> wrong.</p>
<h2 id="parting-words">Parting words</h2>
<p>So far I’m using <code>vim</code> for a month and slowly discovering small bits
like <code>netrw</code> and tag completion. My
<a href="https://github.com/trofi/home/blob/master/.vimrc">~/.vimrc</a> still fits
on one screen (if comments are removed).</p>
<p>I switched <code>claws-mail</code> from it’s built-in <code>gtk</code> editor to external
<code>alacritty -e vim %s -c 'set filetype=mail' -c 'setlocal spell!'</code>
command. Now I’m actually enjoying writing emails. It’s not a pain
anymore to paste large chunks of code with proper indentation or getting
through the spelling mistakes.</p>
<p>I also added <a href="https://github.com/philc/vimium">vimium</a> extension in
<code>Firefox</code> to get nicer URL selection and input text navigation.</p>
<p>Maybe <code>vim</code> will stick this time.</p>
<p>Have fun!</p>

<div class="info">
    Posted on February  4, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sat, 04 Feb 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/277-from-mcedit-to-vim.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>nix-olde - find outdated NixOS packages</title>
    <link>http://trofi.github.io/posts/276-nix-olde-find-outdated-nixos-packages.html</link>
    <description><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>I wrote a <a href="https://github.com/trofi/nix-olde">nix-olde</a> tool to print
outdated packages on your <code>NixOS</code> system. Run it as:</p>
<pre><code>$ git clone https://github.com/trofi/nix-olde
$ cd nix-olde
$ cargo build &amp;&amp; target/debug/nix-olde
...
Fetching 'installed' ...
Fetching 'repology' ...
Fetching 'available' ...
... 'available' done.
... 'installed' done.
... 'repology' done.
repology a52dec &quot;0.8.0&quot; | nixpkgs {&quot;0.7.4&quot;} {&quot;nixos.a52dec&quot;}
repology alsa-lib &quot;1.2.8&quot; | nixpkgs {&quot;1.2.7.2&quot;} {&quot;nixos.alsa-lib&quot;}
...
repology xterm &quot;378&quot; | nixpkgs {&quot;377&quot;} {&quot;nixos.xterm&quot;}
repology xz &quot;5.4.1&quot; | nixpkgs {&quot;5.4.0&quot;} {&quot;nixos.xz&quot;}
repology zxing-cpp-nu-book &quot;2.0.0&quot; | nixpkgs {&quot;1.4.0&quot;} {&quot;nixos.zxing-cpp&quot;}</code></pre>
<p>Here we see all sorts of packages outdated in <code>nixpkgs</code> along with their
versions and versions known to <code>repology.org</code> database and a package
attribute name.</p>
<p>I wrote it for the purpose of tricking you (and myself) to send pull
requests against <a href="https://github.com/NixOS/nixpkgs">nixpkgs</a> to update
some of those outdated packages :). Most of the time there is no major
reason why a specific package is outdated.</p>
<h2 id="more-words">More words</h2>
<p><a href="http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html">A while ago</a> I
shared a set of hacks I use to get a list of outdated packages. My
system has ~1550 packages. How many of them are actually outdated?
Let’s compare that hack with <code>nix-olde</code> result.</p>
<p>The hack looked good enough to catch packages with simple naming scheme
that patches upstream, <code>nixpkgs</code> and <code>repology</code>. It returned 240
packages (about 15%). It’s quite a lot. I would expect not that many.</p>
<p>Moreover, some packages never got into the list: none of <code>python</code>,
<code>perl</code> or <code>haskell</code> are in the report either. I skimmed through all
outdated <a href="https://repology.org/projects/?inrepo=nix_unstable&amp;outdated=1">nix unstable package known to repology</a>
and found a few <code>python</code> and <code>haskell</code> I use. Not good.</p>
<h2 id="nix-olde-improvements"><code>nix-olde</code> improvements</h2>
<p>My hack clearly failed to map some of packages back to <code>repology</code> names.
If I could just print unmapped packages maybe it would be a good
starting point to see what I fail to cover. Thus the tool’s idea was
born.</p>
<p>The idea was simple:</p>
<ul>
<li>get local package list of <strong>installed</strong> packages</li>
<li>get local package list of <strong>available</strong> packages with their <code>nix</code>
attributes out of <code>&lt;nixpkgs&gt;</code> path.</li>
<li><strong>fetch repology list</strong> of available and outdated packages in <code>nixpkgs</code></li>
</ul>
<p>Having looked at <code>list of available packages</code> I realized it’s exactly
the source <code>nixpkgs</code> uses to tell <code>repology</code> what’s in <code>nixpkgs</code>!
It’s hidden in <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/top-level/make-tarball.nix#L67">make-tarball.nix</a>:</p>
<pre><code>echo -n '{&quot;version&quot;:2,&quot;packages&quot;:' &gt; tmp
nix-env -f . -I nixpkgs=$src -qa --meta --json --arg config 'import ${./packages-config.nix}' &gt;&gt; tmp
echo -n '}'</code></pre>
<p>Here we extract metadata around <code>&lt;nixpkgs&gt;</code> attributes by passing a
special <code>config</code> that untangles metadata from current system.</p>
<p>Thus, the mapping from installed to available packages is trivial using
the same technique and the same output data.</p>
<p>With help of <a href="https://serde.rs/">serde</a> <code>rust</code> crate I was able to get a
trivial <code>json</code> reader in 2 lines of code.</p>
<p><code>nix-olde</code> reports 391 outdated package (151 more, or about 25% of
packages). That is a substantial improvement over a hack. New additions
are mainly <code>python</code> and <code>perl</code> packages.</p>
<p>As a bonus with <code>--verbose</code> flag I can see now what packages fail to map
an attribute to <code>repology</code> database:</p>
<pre><code>$ ./mkrun.bash -n ~/n --verbose
...
Installed packages missing in available list: [&quot;antlr-runtime-cpp-4.9.3&quot;,
&quot;binutils-patchelfed-ld-2.40&quot;, &quot;binutils-patchelfed-ld-wrapper-2.40&quot;,
&quot;boost-build-boost-1.79.0&quot;, &quot;bootstrap-stage0-binutils-wrapper-&quot;,
&quot;bootstrap-stage0-glibc-bootstrap&quot;, &quot;bootstrap-stage1-gcc-wrapper-&quot;,
&quot;bootstrap-stage2-gcc-wrapper-&quot;, &quot;bootstrap-stage3-gcc-wrapper-&quot;,
&quot;bootstrap-stage4-gcc-wrapper-13.0.0&quot;, &quot;cargo-bootstrap-1.65.0&quot;,
&quot;catalog-legacy-uris.patch&quot;, &quot;compiler-rt-static-wasm32-unknown-wasi-12.0.1&quot;,
&quot;d3-flame-graph-templates-4.1.3&quot;, &quot;dejavu-fonts-full-2.37&quot;,
&quot;dejavu-fonts-minimal-2.37&quot;, &quot;eglexternalplatform-1.1&quot;, &quot;gfortran-13.0.0&quot;,
&quot;gmp-with-cxx-stage3-6.2.1&quot;, &quot;gmp-with-cxx-stage4-6.2.1&quot;,
&quot;i686-w64-mingw32-binutils-2.40&quot;, &quot;i686-w64-mingw32-binutils-wrapper-2.40&quot;,
&quot;i686-w64-mingw32-stage-final-gcc-13.0.0&quot;,
&quot;i686-w64-mingw32-stage-final-gcc-wrapper-13.0.0&quot;,
&quot;i686-w64-mingw32-stage-static-gcc-13.0.0&quot;,
&quot;i686-w64-mingw32-stage-static-gcc-wrapper-13.0.0&quot;, &quot;isl-stage3-0.20&quot;,
&quot;libcxx-static-wasm32-unknown-wasi-12.0.1&quot;,
&quot;libcxxabi-static-wasm32-unknown-wasi-12.0.1&quot;, &quot;libmpc-stage3-1.3.1&quot;,
&quot;linux-config-6.1.6&quot;, &quot;linux-headers-static-6.1&quot;,
&quot;mcfgthreads-i686-w64-mingw32-git&quot;, &quot;mcfgthreads-x86_64-w64-mingw32-git&quot;,
&quot;mingw-w64-i686-w64-mingw32-10.0.0&quot;, &quot;mingw-w64-x86_64-w64-mingw32-10.0.0&quot;,
&quot;mpfr-stage3-4.2.0&quot;, &quot;musl-static-x86_64-unknown-linux-musl-1.2.3&quot;,
&quot;nixos-version&quot;, &quot;nss-cacert-certdata-3.86&quot;,
&quot;python3.10-cryptography-vectors-38.0.4&quot;,
&quot;python3.10-pycryptodome-test-vectors-1.0.10&quot;,
&quot;rakshasa-libtorrent-0.13.8+date=2021-08-07&quot;, &quot;ruby2.7.6-msgpack-1.5.1&quot;,
&quot;ruby2.7.6-neovim-0.9.0&quot;, &quot;rubygems-3.3.20&quot;, &quot;rustc-bootstrap-1.65.0&quot;,
&quot;rustfmt-nightly-1.66.1&quot;, &quot;systemtap-4.5&quot;, &quot;texlive-bin-2022&quot;,
&quot;texlive-core-big.bin-2022&quot;, &quot;vkd3d-1.5&quot;, &quot;wasilibc-static-wasm32-unknown-wasi-17&quot;,
&quot;wasm32-unknown-wasi-clang-wrapper-12.0.1&quot;,
&quot;wasm32-unknown-wasi-llvm-binutils-wrapper-12.0.1&quot;,
&quot;x86_64-unknown-linux-musl-binutils-2.40&quot;,
&quot;x86_64-unknown-linux-musl-binutils-wrapper-2.40&quot;,
&quot;x86_64-unknown-linux-musl-stage-final-gcc-13.0.0&quot;,
&quot;x86_64-unknown-linux-musl-stage-final-gcc-wrapper-13.0.0&quot;,
&quot;x86_64-unknown-linux-musl-stage-static-gcc-13.0.0&quot;,
&quot;x86_64-unknown-linux-musl-stage-static-gcc-wrapper-13.0.0&quot;,
&quot;x86_64-w64-mingw32-binutils-2.40&quot;, &quot;x86_64-w64-mingw32-binutils-wrapper-2.40&quot;,
&quot;x86_64-w64-mingw32-stage-final-gcc-13.0.0&quot;,
&quot;x86_64-w64-mingw32-stage-final-gcc-wrapper-13.0.0&quot;,
&quot;x86_64-w64-mingw32-stage-static-gcc-13.0.0&quot;,
&quot;x86_64-w64-mingw32-stage-static-gcc-wrapper-13.0.0&quot;,
&quot;xmms2-unstable-2022-12-30&quot;]</code></pre>
<p>Entries like <code>bootstrap-stage3-gcc-wrapper</code> are not very interesting:
they are synthetic packages built for bootstrap and should be an alias
to a <code>nixpkgs</code>-specific shell wrapper. I’ll try to filter them out by
default.</p>
<p>Entries like <code>gfortran</code> are <code>nixpkgs</code>-specific forms of <code>gcc</code>. It would
be nice to somehow alias those back to <code>gcc</code> as well. Maybe we should
provide a bit of extra fields in <code>meta</code> section of <code>nixpkgs</code> package
descriptions to make it machine-generated.</p>
<p>Entries like <code>xmms2</code> are the packages from my local overlays. It is
expected to be in the list.</p>
<p>Entries like <code>systemtap</code> look like a mapping bug. Needs more
investigation. At least these are a minority and are easily debuggable
to make <code>nix-olde</code> better reflect.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nix-olde</code> was the first non-trivial program I wrote in <code>rust</code>. The
experience is very pleasant: option parsing and <code>json</code> parsing is
trivial, data types are naive and yet good enough to get the job done.</p>
<p><code>nixpkgs</code> has quite a few outdated packages in base install for my
desktop system: around 25%. Worth improving individual packages and
extending them to add auto-update scripts for <a href="https://ryantm.github.io/nixpkgs-update/r-ryantm/">r-ryantm</a>
to help humans in this task.</p>
<p>Have fun!</p>

<div class="info">
    Posted on January 19, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Thu, 19 Jan 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/276-nix-olde-find-outdated-nixos-packages.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>nixpkgs bootstrap deep dive</title>
    <link>http://trofi.github.io/posts/275-nixpkgs-bootstrap-deep-dive.html</link>
    <description><![CDATA[<h2 id="the-problem">The problem</h2>
<p>A while ago Thomas
<a href="https://github.com/NixOS/nixpkgs/issues/208412">noticed</a> that
<code>libgcc_s.so</code> used by <code>nixpkgs</code> does not match <code>gcc</code> version it was
supposed to come with. Tl;DR of the issue:</p>
<ul>
<li><code>aarch64</code> uses <code>gcc-11</code> as a default compiler</li>
<li>but somehow default <code>libgcc_s.so</code> (used by many c++ programs) comes
from <code>gcc-9</code></li>
</ul>
<p>This version skew causes issues because <code>gcc-11</code> relies on symbols
exported from <code>libgcc_s.so</code> versions that were added after <code>gcc-9</code>
release. Example taken from <a href="https://github.com/NixOS/nixpkgs/issues/201254">Issue #201254</a>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;atomic&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> foo<span class="op">(</span><span class="dt">int</span> i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   std<span class="op">::</span>atomic<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> f<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>   <span class="cf">return</span> f<span class="op">.</span>fetch_add<span class="op">(</span><span class="dv">3</span><span class="op">);</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ g++ --std=c++20 -c test.c -o test.o
$ g++ --std=c++20 -shared -Wl,-z,defs test.o -o libtest.so 

ld: /build/test.o: in function `foo(int)':
test.cpp:(.text+0x2c): undefined reference to `__aarch64_ldadd4_acq_rel'
collect2: error: ld returned 1 exit status</code></pre>
<p>Such link errors are related to atomic operations not directly supported
by CPU. <code>gcc-11</code> and later generates fallback code to call into
<code>libgcc_s.so</code>.</p>
<h2 id="bootstrap-refresher">Bootstrap refresher</h2>
<p>Not too long ago I wrote a bit about
<a href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html">nixpkgs bootstrap intro</a>
in context of bugs related to <code>glibc</code> version lookup. High-level
overview presented there is mostly correct. But some details I got
wrong.</p>
<p>I’ll sort them out here to clarify why version skew happens and how
we could fix it using existing bootstrap framework in <code>nixpkgs</code>.</p>
<h2 id="bootstrap-debugging-tips">Bootstrap debugging tips</h2>
<p>Before the dive into specifics of our issue let’s explore generic
debugging tips to see how runtime and build-time dependencies are laid
out.</p>
<p><strong>Tip 1</strong>: <code>stdenv.cc</code> is the compiler wrapper used to compile apps:</p>
<pre><code>$ nix-build -A stdenv.cc
/nix/store/wn31i3dzwahz6ccws8bs1nwyqrpgsvj7-gcc-wrapper-11.3.0

$ ls result/bin/
addr2line  c++      cpp      g++    ld       nm       ranlib   strings
ar         cc       dwp      gcc    ld.bfd   objcopy  readelf  strip
as         c++filt  elfedit  gprof  ld.gold  objdump  size</code></pre>
<p>It’s called <code>wrapper</code> because <code>gcc</code> and <code>g++</code> are shell scripts that
pass default locations to <code>glibc</code> locations and similar when call
actual <code>gcc</code> binary. That one hides in another package.</p>
<p><strong>Tip 2</strong>: <code>stdenv.cc.cc</code> is the unwrapped compiler binary used by
<code>stdenv.cc</code> wrapper:</p>
<pre><code>$ nix-build -A stdenv.cc.cc
/nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0

$ ls result/bin/
c++     gcc-ranlib                    x86_64-unknown-linux-gnu-g++
cpp     gcov                          x86_64-unknown-linux-gnu-gcc
g++     gcov-dump                     x86_64-unknown-linux-gnu-gcc-11.3.0
gcc     gcov-tool                     x86_64-unknown-linux-gnu-gcc-ar
gcc-ar  lto-dump                      x86_64-unknown-linux-gnu-gcc-nm
gcc-nm  x86_64-unknown-linux-gnu-c++  x86_64-unknown-linux-gnu-gcc-ranlib</code></pre>
<p><strong>Tip 3</strong>: <code>stdenv.__bootPackages</code> refers to package set used to build
<code>stdenv</code>.</p>
<pre><code>$ nix-build -A stdenv
/nix/store/cp65c8nk29qq5cl1wyy5qyw103cwmax7-stdenv-linux
$ nix-build -A stdenv.__bootPackages.stdenv
/nix/store/5ch2gc6i97iw7vlyksdhapqrh7bmiwwj-bootstrap-stage4-stdenv-linux
$ nix-build -A stdenv.__bootPackages.stdenv.__bootPackages.stdenv
/nix/store/f7vl4b9lwflwblqbf3g81xgjji1nldf7-bootstrap-stage3-stdenv-linux

$ nix-build -A stdenv.cc.cc
/nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0

$ ./result/bin/gcc --version | head -n1
gcc (GCC) 11.3.0

$ nix-build -A stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc
/nix/store/p4s4jf7aq6v6z9iazll1aiqwb34aqxq9-bootstrap-tools

$ ./result/bin/gcc --version | head -n1
gcc (GCC) 8.3.0</code></pre>
<p>Here we see that final <code>stdenv.c</code> is <code>gcc-11</code>. It is different from
<code>stage3-stdenv</code> which is <code>gcc-8</code>. This is an <code>x86_64</code> machine, on
<code>aarch64</code> you would see <code>gcc-9</code> in <code>stage3-stdenv</code>.</p>
<p><strong>Tip 4</strong>: <code>nix-store --query --graph $pkg</code> can tell us runtime depends
(closure) of a given package.</p>
<p>For example here is the <strong>runtime</strong> subset of all build-time depends
used for final unwrapped compiler:</p>
<pre><code>$ nix-store --query --graph $(nix-build -A stdenv.cc.cc) | dot -Tsvg &gt; gcc-runtime.svg</code></pre>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/01-gcc-runtime.svg" /></p>
<p><strong>Tip 5</strong>: <code>nix-instantiate</code> is useful to explore the build-time graph.</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc) |
    dot -Tsvg &gt; gcc-buildtime.svg</code></pre>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/02-gcc-buildtime.svg" /></p>
<p>I picked bootstrap (prebuilt) <code>gcc</code> which uses 2 downloaded tarballs:</p>
<ul>
<li><code>busybox</code> executable</li>
<li><code>bootstrap-tools.tar.xz</code> full of executable tools</li>
</ul>
<p><code>unpack-bootstrap-tools.sh</code> is a shell script used to unpack and
relocate <code>bootstrap-tools.tar.xz</code> to final package output directory.</p>
<p>I did not pick final <code>gcc</code> as an example because it pulls in 300
dependencies including bootstrap <code>gcc</code>, 4 variants of <code>binutils</code> and
all their depends. Too large to be meaningful.</p>
<h2 id="breakage-mechanics">Breakage mechanics</h2>
<p>Having glanced at debugging tools let’s get back to our <code>libgcc_s.so.1</code>
problem.</p>
<p>The version skew described in the beginning happens because
<code>libgcc_s.so</code> gets copied into <code>glibc</code>‘s output from <code>gcc</code> it was
compiled with. In fact all of <code>glibc</code> was compiled with <code>bootstrapTools</code>’
<code>gcc-8</code> (and not <code>nixpkgs</code>’ <code>gcc-11</code>!):</p>
<pre><code>$ nix-build -A glibc
/nix/store/ayfr5l52xkqqjn3n4h9jfacgnchz1z7s-glibc-2.35-224
$ strings ./result/lib/libgcc_s.so.1 | grep -F '(GNU)'
GCC: (GNU) 8.3.0
$ strings ./result/lib/libc.so.6 | grep -F '(GNU)'
GCC: (GNU) 8.3.0</code></pre>
<p>It would probably be not be a huge problem if bootstrap <code>gcc</code> was fresh
enough. So why not just update bootstrap <code>gcc</code> in
<code>bootstrap-tools.tar.xz</code> and be done with it?</p>
<p>It is feasible, but not very practical to do on a regular basis. It is
easy to do twice a year, but harder to do with each <code>gcc</code> update
<code>nixpkgs</code> sees.</p>
<p>Also having too fresh <code>bootstrapTools</code> is also a bit tricky as version
downgrades (if we chose to rollback <code>nixpkgs</code>) would also need some
care.</p>
<p>Unfortunately <code>bootstrapTools</code> frequently does not get updated for a few
years and <code>libgcc_s.so</code> is as outdated. Just rebuilding <code>bootstrapTools</code>
would fix the problem for this instance. Until next major <code>libgcc_s.so</code>
update. Not very predictable.</p>
<p>What we could do instead is to update <code>gcc</code> first and then build fresh
<code>glibc</code>.</p>
<p>Let’s see what dependency graph our bootstrap tower has. Can we spot the
staleness problem just by looking at the dependency references?</p>
<p>Let’s focus on just <code>gcc</code> and <code>glibc</code> packages for now and ignore
everything else.</p>
<p>I suggest grepping through the build dependency graph to fish out only
needed details.</p>
<pre><code>nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P '((stdenv|bootstrap).*-&gt;.*(gcc|glibc-[^a-z]))|((gcc|glibc-[^a-z]).*-&gt;.*(stdenv|bootstrap))|[{}]' |
    sed 's/&quot;[0-9a-z]\{32\}-/&quot;/g' | dot -Tsvg &gt; gcc-and-glibc.svg</code></pre>
<p>It’s a scary looking grep, but its idea is to find two types of arrows
in <code>.dot</code> formatted output:</p>
<ul>
<li>arrows from <code>stdenv</code> (or <code>bootstrap</code>) to <code>gcc</code> (or <code>glibc</code>): to find
places where we decide to <strong>build</strong> new <code>gcc</code> (or <code>glibc</code>).</li>
<li>arrows and from <code>gcc</code> (or <code>glibc</code>) to <code>stdenv</code> (or <code>bootstrap</code>): to
find places where we decide to <strong>use</strong> some version of <code>gcc</code> (or
<code>glibc</code>).</li>
</ul>
<p>This crude grep destroys some intermediary arrows and leaves nodes to
hang in the air. In reality all the <code>stdenv</code> nodes are chained in
sequence via compiler wrappers. But grep does capture most of important
details. Here is what <code>.dot</code> generated us
(<a href="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/03-gcc-and-glibc.svg">enlarge the graph</a>):</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/03-gcc-and-glibc.svg" /></p>
<p>The main takeaways from this picture are (aka the Legend):</p>
<ul>
<li><code>glibc</code> is built once (green box) using only bootstrap <code>gcc</code></li>
<li><code>gcc</code> is built once (red box) using only bootstrap <code>gcc</code></li>
<li>yellow boxes are bootstrap seed binaries (<code>gcc</code>, <code>glibc</code> and many others)</li>
</ul>
<p>Once again <code>gcc-wrapper</code> are just wrapper scripts that add
default paths to <code>binutils</code>, to <code>glibc</code> and similar when actual
<code>gcc</code> executable is called. Thus <code>gcc-wrapper</code> nodes don’t denote
<code>gcc</code> binary rebuild.</p>
<p>Now, if we look at the definition of our <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/libraries/glibc/default.nix#L66-L84">glibc expression</a>
we will see how <code>libgcc_s.so</code> gets persisted there:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co"># When building glibc from bootstrap-tools, we need libgcc_s at RPATH for</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co"># any program we run, because the gcc will have been placed at a new</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co"># store path than that determined when built (as a source for the</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="co"># bootstrap-tools tarball)</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co"># Building from a proper gcc staying in the path where it was installed,</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co"># libgcc_s will now be at {gcc}/lib, and gcc's libgcc will be found without</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co"># any special hack.</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="co"># </span><span class="al">TODO</span><span class="co">: remove this hack. Things that rely on this hack today:</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co"># - dejagnu: during linux bootstrap tcl SIGSEGVs</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="co"># - clang-wrapper in cross-compilation</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="co"># Last attempt: https://github.com/NixOS/nixpkgs/pull/36948</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>preInstall = <span class="st">''</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="st">  if [ -f </span><span class="sc">${</span>stdenv.cc.cc<span class="sc">}</span><span class="st">/lib/libgcc_s.so.1 ]; then</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="st">      mkdir -p $out/lib</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="st">      cp </span><span class="sc">${</span>stdenv.cc.cc<span class="sc">}</span><span class="st">/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a><span class="st">      # the .so It used to be a symlink, but now it is a script</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="st">      cp -a </span><span class="sc">${</span>stdenv.cc.cc<span class="sc">}</span><span class="st">/lib/libgcc_s.so $out/lib/libgcc_s.so</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="st">  fi</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="st">''</span>;</span></code></pre></div>
<p>The snippet copies a single file from <code>stdenv.cc.cc</code> attribute path
after <code>glibc</code> is built. In this case <code>stdenv.cc.cc</code> is <code>gcc</code> from
<code>bootstrapTools</code> via <code>bootstrap-stage2-stdenv-linux.drv</code> version of
<code>stdenv</code>. We can see this arrow on the picture as well.</p>
<p>To ease tracing of the origin for this file it would be better to place
a symlink here instead of a file copy. That way we would clearly see
undesired reference instead of resorting to <code>strings</code> call.</p>
<h2 id="an-ideal-bootstrap">An ideal bootstrap</h2>
<p>Clearly our bootstrap is problematic right now as it fails to link a
subset of binaries and seems to use suspiciously old <code>gcc</code> to build
<code>glibc</code> that almost any other package uses.</p>
<p>How would an ideal bootstrap look like?</p>
<p>Let’s settle down on more specific goals our bootstrap should achieve.</p>
<p>If our goal is to get something that is able to link binaries we could
just use <code>bootstrapTools</code> as our <code>stdenv</code>: no need to build anything,
<code>gcc</code>, <code>glibc</code> and <code>libgcc_s.so</code> are all consistent.</p>
<p>The only problem in using <code>bootstrapTools</code> directly is that patching
<code>gcc</code> or <code>glibc</code> will require rebuilding and re-uploading
<code>bootstrapTools</code>. It’s less convenient than just tweaking <code>.nix</code> files
but could be done as well. It’s not that much of added automation on
top of what hydra does today. The security aspect is more nuanced as
these binaries are the foundation of the rest of the build. If somebody
could sneak in malicious code there that would be problematic. Frequent
rebuilds would probably make it simpler (or not :).</p>
<p>Anyway, using <code>bootstrapTools</code> directly is not very convenient for local
toolchain development.</p>
<p>Thus we want something slightly more complicated: we need to build new
set of bootstrap tools using current <code>nixpkgs</code> expressions as target
versions of <code>gcc</code>, <code>glibc</code> and friends and use that instead. This
creates a logical recursion of <code>bootstrapTools</code> -&gt; <code>nixpkgs</code> -&gt;
<code>new-bootstrapTools</code>. But it’s not a fundamental one: we can do one
iteration (or, say, 10 iterations) of the recursion and declare final
result (whatever it is) a good enough fresh set of tools. This is, after
all, how most distributions build and provide toolchains nowadays.</p>
<p>So, when should we stop our rebuild recursion? How do we define good
enough?</p>
<p>More specific goals of bootstrap process could be the following:</p>
<ol type="1">
<li>Get rid of all the references (or copies) of <code>bootstrapTools</code>
binaries.</li>
<li>Avoid use of code generators emitted by <code>bootstrapTools</code> binaries.</li>
</ol>
<p>Goal 2 is a moral equivalent of [1.]: if <code>bootstrapTools</code> contained
a buggy code generator we would like to get rid of its effect by
rebuilding everything using <code>nixpkgs</code> versions of code generators.</p>
<p>As it stands today <code>nixpkgs</code> achieves <code>[1.]</code> but not <code>[2.]</code>.</p>
<p><code>[2.]</code> would help both in correctness and predictability of the final
result. At least we would not get version skews of various components.</p>
<p>On top of that new versions of code generators (like <code>gcc</code> or
<code>binutils</code>) frequently add extra features to the output useful for
performance, portability, safety or other.</p>
<p>From standpoint of “what built what” our current bootstrap process looks
like that:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/04-current-bootstrap.svg" /></p>
<p>Arrows here denote code emitted by generator.</p>
<p>The picture can be summarised as: <code>bootstrapTools</code> build our code
generators (<code>gcc</code>) and generate code for <code>glibc</code>.</p>
<p><strong>Ideal</strong> bootstrap instead could look like this:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/05-ideal-bootstrap.svg" /></p>
<p>Here cyan (rebuilt) and white (used as is) boxes all use the same
version of code generators and runtime libraries that <code>nixpkgs</code>
provides. Completely untangled from <code>bootstrapTools</code>!</p>
<p>The only change from current bootstrap process is an extra intermediate
<code>gcc</code> rebuild.</p>
<h2 id="other-caveats">Other caveats</h2>
<p><code>gcc</code> is not the only code generator that we inherit from
<code>bootstrapTools</code>. We also need to track generators like <code>binutils</code> and
possibly other interpreters and non-trivial data manglers like <code>awk</code>,
<code>bash</code>, <code>install</code>, <code>make</code> and <code>patchelf</code>.</p>
<p>Of the list above <code>binutils</code> and <code>patchelf</code> are probably the most
interesting.</p>
<h2 id="stdenv-bootstrap-tower">stdenv bootstrap tower</h2>
<p>At least now we have a plan: add an extra <code>gcc</code> rebuild step into
bootstrap sequence. Sounds easy. How do we do that?</p>
<p>The rebuild stages are defined in
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix#L192-L554">pkgs/stdenv/linux/default.nix</a>.</p>
<p>Let’s talk about stage and package structure a bit.</p>
<p><code>nixpkgs</code> exposes users a set of packages to build. Most of these
packages use <code>stdenv</code> (or other packages) to construct build
environment. <code>nixpkgs</code> package structure is usually presented to
developers as something similar to the below:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/06-nixpkgs-structure-naive.svg" /></p>
<p>The cycles in the graph of packages are forbidden (they require explicit
handling by duplicating packages). Most packages usually pull in <code>stdenv</code>
which exposes <code>gcc</code> in some form. Looks simple.</p>
<p>The only annoyance is that <code>stdenv</code>’s own packages like <code>gcc</code> and <code>glibc</code> do
take part in this graph.</p>
<p>This might mean that <code>gcc</code> and <code>glibc</code> don’t use final <code>stdenv</code>, and they
use previous instances of <code>stdenv</code> instead. Say, something along these lines:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/06-nixpkgs-structure-recurse.svg" /></p>
<p>This picture is a simple extension of previous picture. Given <code>pkgs1</code> set of
packages we can construct <code>pkgs2</code> by building packages in order:</p>
<ul>
<li>first <code>gcc</code></li>
<li>then <code>glibc</code></li>
<li>and finally build <code>xz</code> (with new <code>stdenv</code>)</li>
</ul>
<p>In reality each bootstrap step is split into a few smaller steps where
each handles its own part of <code>stdenv</code> update:</p>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/07-nixpkgs-structure-real.svg" /></p>
<p>While this picture is closer to reality it still simplifies real graph
a bit. Across all 4 (instead of previous 2) package sets we build the same 3
packages as in previous picture:</p>
<ul>
<li>first <code>gcc</code> in <code>pkgs2</code></li>
<li>then <code>glibc</code> in <code>pkgs3</code></li>
<li>then <code>xz</code> in <code>pkgs4</code></li>
</ul>
<p>It might take quite a bit of mental effort to chase through pointers. It
is certainly harder to reason about it.</p>
<p>If you ever wondered how actual <code>gcc</code> attribute then is defined in
<code>pkgs/top-level/all-packages.nix</code> as:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>  inherit <span class="op">(</span><span class="kw">let</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>      <span class="va">num</span> <span class="op">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span><span class="kw">with</span> stdenv.targetPlatform<span class="op">;</span> isVc4 <span class="op">||</span> libc == <span class="st">&quot;relibc&quot;</span><span class="op">)</span> <span class="kw">then</span> <span class="dv">6</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="kw">if</span> <span class="op">(</span>stdenv.targetPlatform.isAarch64 <span class="op">&amp;&amp;</span> stdenv.isLinux<span class="op">)</span> <span class="kw">then</span> <span class="dv">9</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="dv">11</span><span class="op">;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">numS</span> <span class="op">=</span> <span class="bu">toString</span> num<span class="op">;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> <span class="op">{</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc</span> <span class="op">=</span> pkgs.$<span class="op">{</span><span class="st">&quot;</span>gcc<span class="sc">${</span>numS<span class="sc">}</span><span class="st">&quot;</span><span class="op">};</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">gccFun</span> <span class="op">=</span> callPackage <span class="op">(</span><span class="ss">../development/compilers/gcc</span> <span class="op">+</span> <span class="st">&quot;/</span><span class="sc">${</span>numS<span class="sc">}</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">})</span> gcc gccFun;</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>  gcc<span class="op">-</span>unwrapped = gcc.cc;</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>  gcc11 = lowPrio <span class="op">(</span>wrapCC <span class="op">(</span>callPackage <span class="ss">../development/compilers/gcc/11</span> <span class="op">{</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inherit</span> noSysDirs<span class="op">;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">reproducibleBuild</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">profiledCompiler</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">libcCross</span> <span class="op">=</span> <span class="kw">if</span> stdenv.targetPlatform <span class="op">!</span>= stdenv.buildPlatform <span class="kw">then</span> libcCross <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>    <span class="va">threadsCross</span> <span class="op">=</span> <span class="kw">if</span> stdenv.targetPlatform <span class="op">!</span>= stdenv.buildPlatform <span class="kw">then</span> threadsCross <span class="kw">else</span> <span class="op">{};</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>    <span class="va">isl</span> <span class="op">=</span> <span class="kw">if</span> <span class="op">!</span>stdenv.isDarwin <span class="kw">then</span> isl_0_20 <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  <span class="op">}))</span>;</span></code></pre></div>
<p>If you are not very well versed in <code>nix</code> language the above is equivalent to:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>  gcc = pkgs.gcc11;</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  gcc<span class="op">-</span>unwrapped = gcc.cc;</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  gcc11 = lowPrio <span class="op">(</span>wrapCC <span class="op">(</span>callPackage <span class="ss">../development/compilers/gcc/11</span> <span class="op">{</span> <span class="op">...</span> <span class="op">}</span></span></code></pre></div>
<p>It’s a typically-looking package definition where package description
hides in <code>pkgs/development/compilers/gcc/11/default.nix</code>:
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/compilers/gcc/11/default.nix" class="uri">https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/compilers/gcc/11/default.nix</a></p>
<p>So, back to our goal: we want to add an extra bootstrap step to build <code>gcc</code>.</p>
<p>Let’s trace through existing <code>bootstrapTools</code>’ <code>gcc</code> installation. How
does that get injected into our <code>stdenv</code> tower? It all starts from
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/stdenv/linux/default.nix#L206">bootstrap-stage0</a>:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage0&quot;</span><span class="op">;</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>      <span class="co"># We thread stage0's stdenv through under this name so downstream stages</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>      <span class="co"># can use it for wrapping gcc too. This way, downstream stages don't need</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>      <span class="co"># to refer to this stage directly, which violates the principle that each</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>      <span class="co"># stage should only access the stage that came before it.</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">ccWrapperStdenv</span> <span class="op">=</span> self.stdenv<span class="op">;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>      <span class="co"># ...</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc-unwrapped</span> <span class="op">=</span> bootstrapTools<span class="op">;</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">})</span></span></code></pre></div>
<p>Looks easy! We just define <code>gcc-unwrapped</code> to point to our
<code>bootstrapTools</code> prebuilt binaries and declare it a success. We also set
something called <code>ccWrapperStdenv</code>. These variables are used in
<code>stageFun</code> defined a few lines above <code>bootstrap-stage0</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># This function builds the various standard environments used during</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># the bootstrap.  In all stages, we build an stdenv and the package</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># set that can be built with that stdenv.</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>  stageFun = <span class="va">prevStage</span><span class="op">:</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span> <span class="va">name</span><span class="op">,</span> <span class="va">overrides</span> <span class="op">?</span> <span class="op">(</span><span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{}),</span> <span class="va">extraNativeBuildInputs</span> <span class="op">?</span> <span class="op">[]</span> <span class="op">}</span>:</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">thisStdenv</span> <span class="op">=</span> <span class="bu">import</span> <span class="ss">../generic</span> <span class="op">{</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>name<span class="sc">}</span><span class="st">-stdenv-linux&quot;</span><span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>        <span class="co"># ...</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>        <span class="va">cc</span> <span class="op">=</span> <span class="kw">if</span> prevStage.gcc<span class="op">-</span>unwrapped == <span class="cn">null</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>             <span class="kw">then</span> <span class="cn">null</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>             <span class="kw">else</span> lib.makeOverridable <span class="op">(</span><span class="bu">import</span> <span class="ss">../../build-support/cc-wrapper</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>          <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>name<span class="sc">}</span><span class="st">-gcc-wrapper&quot;</span><span class="op">;</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>          <span class="co"># ...</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>          <span class="va">cc</span> <span class="op">=</span> prevStage.gcc<span class="op">-</span>unwrapped<span class="op">;</span></span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>          <span class="va">bintools</span> <span class="op">=</span> prevStage.binutils<span class="op">;</span></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>          <span class="va">libc</span> <span class="op">=</span> getLibc prevStage<span class="op">;</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>          <span class="co"># ...</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>          <span class="va">stdenvNoCC</span> <span class="op">=</span> prevStage.ccWrapperStdenv<span class="op">;</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>        <span class="co"># ...</span></span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> <span class="op">{</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> config overlays<span class="op">;</span></span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>      <span class="va">stdenv</span> <span class="op">=</span> thisStdenv<span class="op">;</span></span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span></code></pre></div>
<p>Here we define <code>stdenv = thisStdenv</code> populated with <code>cc</code> attribute that
refers <code>prevStage.gcc-unwrapped</code> from previous stage (and place it into
a wrapper).</p>
<p><code>bootstrap-stage0</code> was not too bad. Let’s have a peek at <code>bootstrap-stage1</code>:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Create the first &quot;real&quot; standard environment.  This one consists</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># of bootstrap tools only, and a minimal Glibc to keep the GCC</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># configure script happy.</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage1&quot;</span><span class="op">;</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># Rebuild binutils to use from stage2 onwards.</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>      <span class="va">binutils-unwrapped</span> <span class="op">=</span> super.binutils<span class="op">-</span>unwrapped.override <span class="op">{</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>        <span class="va">enableGold</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>        ccWrapperStdenv</span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>        gcc-unwrapped coreutils gnugrep<span class="op">;</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>      ${<span class="va">localSystem</span>.<span class="va">libc</span><span class="op">}</span> = getLibc prevStage<span class="op">;</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>      <span class="co"># A threaded perl build needs glibc/libpthread_nonshared.a,</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>      <span class="co"># which is not included in bootstrapTools, so disable threading.</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>      <span class="co"># This is not an issue for the final stdenv, because this perl</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>      <span class="co"># won't be included in the final stdenv and won't be exported to</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># top-level pkgs as an override either.</span></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a>      <span class="va">perl</span> <span class="op">=</span> super.perl.override <span class="op">{</span> <span class="va">enableThreading</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span> <span class="va">enableCrypt</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span> <span class="op">};</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>  }<span class="op">)</span></span></code></pre></div>
<p>Here we use our <code>stdenv</code> to build <code>perl</code>, <code>binutils-unwrapper</code>
and their numerous dependencies.</p>
<p>What packages do we actually build using only <code>stdenv-stage0</code>?</p>
<p>We rely on packages’ dependencies as specified in their <code>default.nix</code>
files. Who knows what is there now. The simplest way to find out is to
query the build graph directly:</p>
<p>Here I assume that most of packages are pulling in
<code>bootstrap-stage1-stdenv</code> directly (without any intermediate steps).</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P &quot;.*bootstrap-stage1-stdenv.*-&gt;.*&quot; | sed 's/&quot;[0-9a-z]\{32\}-/&quot;/g'

&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;perl-5.36.0.drv&quot; [color = &quot;black&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;zlib-1.2.13.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;gnum4-1.4.19.drv&quot; [color = &quot;black&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;expand-response-params.drv&quot; [color = &quot;magenta&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;binutils-2.39.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;binutils-wrapper-2.39.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;bison-3.8.2.drv&quot; [color = &quot;burlywood&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;gettext-0.21.drv&quot; [color = &quot;red&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;xz-5.2.9.drv&quot; [color = &quot;burlywood&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;bash-5.1-p16.drv&quot; [color = &quot;blue&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;binutils-wrapper-2.39.drv&quot; [color = &quot;green&quot;];
&quot;bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;texinfo-6.8.drv&quot; [color = &quot;green&quot;];</code></pre>
<p><code>perl</code> and <code>binutils</code> are here. But on top of that we also got <code>zlib</code>,
<code>gnum4</code>, <code>expand-response-params</code>, <code>bison</code>, <code>gettext</code>, <code>xz</code>, <code>bash</code>,
<code>binutils-wrapper</code> and <code>texinfo</code>. Curiously no <code>python</code> or <code>make</code> in the
list.</p>
<p>Now, if we do nothing special most of these dependencies will get
rebuilt on each of our 5 stages of bootstrap: our <code>stdenv</code> usually
changes on each step and normally you need local <code>binutils-unwrapped</code>
for each of them.</p>
<p>To avoid rebuilds of every single one of them we need to pick the
packages and propagate them further. That is done by inheriting them
from previous stage. Just like the cyan arrow on the picture
<a href="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/07-nixpkgs-structure-real.svg">above</a>.</p>
<p>Let’s peek at how <code>bootstrap-stage2</code> does that:</p>
<pre><code>  # 2nd stdenv that contains our own rebuilt binutils and is used for
  # compiling our own Glibc.
  # ...
  (prevStage: stageFun prevStage {
    name = &quot;bootstrap-stage2&quot;;

    overrides = self: super: {
      inherit (prevStage)
        ccWrapperStdenv
        gcc-unwrapped coreutils gnugrep
        perl gnum4 bison;
      # ...
    };
  })</code></pre>
<p>Note that <code>xz</code> or <code>texinfo</code> are not in the list. They will get rebuilt.
I think it’s an omission. Let’s see how many times do we rebuild, say,
<code>xz</code>:</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P &quot;.*bootstrap-stage.*-stdenv.*-&gt;.*xz-5.2.9&quot;

&quot;...-bootstrap-stage1-stdenv-linux.drv&quot; -&gt; &quot;...aw8n-xz-5.2.9.drv&quot; [color = &quot;burlywood&quot;];
&quot;...-bootstrap-stage2-stdenv-linux.drv&quot; -&gt; &quot;...ywnn-xz-5.2.9.drv&quot; [color = &quot;green&quot;];
&quot;...-bootstrap-stage3-stdenv-linux.drv&quot; -&gt; &quot;...mmfc-xz-5.2.9.drv&quot; [color = &quot;burlywood&quot;];
&quot;...-bootstrap-stage4-stdenv-linux.drv&quot; -&gt; &quot;...icqq-xz-5.2.9.drv&quot; [color = &quot;green&quot;];</code></pre>
<p>4 times: In all 4 arrows have different store paths. In every single
stage we rebuild <code>xz</code> on and on. It’s very likely a bug. It’s a simple
tool and we could use just one version of it until the final rebuild.</p>
<p>Let’s do a dirty histogram of all the rebuilds we do. Maybe we have more
of those?</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -P &quot; -&gt; &quot; | awk '{print $3}' | sort -u |
    sed 's/&quot;[0-9a-z]\{32\}-/&quot;/g' | sort | uniq -c | sort -n | awk '$1 &gt; 1'

      2 &quot;autoconf-2.71.drv&quot;
      2 &quot;automake-1.16.5.drv&quot;
      2 &quot;bootstrap-stage1-stdenv-linux.drv&quot;
      2 &quot;bootstrap-stage2-stdenv-linux.drv&quot;
      2 &quot;bootstrap-stage4-stdenv-linux.drv&quot;
      2 &quot;bzip2-1.0.8.drv&quot;
      2 &quot;file-5.43.drv&quot;
      2 &quot;help2man-1.49.2.drv&quot;
      2 &quot;hook.drv&quot;
      2 &quot;libtool-2.4.7.drv&quot;
      2 &quot;patchelf-0.15.0.drv&quot;
      2 &quot;perl5.36.0-gettext-1.07.drv&quot;
      3 &quot;binutils-2.39.drv&quot;
      3 &quot;binutils-wrapper-2.39.drv&quot;
      3 &quot;expand-response-params.drv&quot;
      3 &quot;gettext-0.21.drv&quot;
      3 &quot;libxcrypt-4.4.33.drv&quot;
      3 &quot;perl-5.36.0.drv&quot;
      3 &quot;texinfo-6.8.drv&quot;
      3 &quot;zlib-1.2.13.drv&quot;
      4 &quot;bash-5.1-p16.drv&quot;
      4 &quot;xz-5.2.9.drv&quot;</code></pre>
<p>I’d say <code>xz</code> should follow <code>bzip2</code> pattern of rebuilds. <code>bash</code> rebuild
count also looks excessive. So does <code>binutils</code>. All are good candidates
for cleanup.</p>
<p>Let’s move on to existing <code>gcc</code> rebuild to see if it follows the same
override pattern as <code>bootstrapTools</code> one. Its override happens in
<code>bootstrap-stage3</code>:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Construct a third stdenv identical to the 2nd, except that this</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># one uses the rebuilt Glibc from stage2.  It still uses the recent</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># binutils and rest of the bootstrap tools, including GCC.</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage3&quot;</span><span class="op">;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>        ccWrapperStdenv</span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>        binutils coreutils gnugrep</span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>        perl patchelf linuxHeaders gnum4 bison libidn2 libunistring<span class="op">;</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>      ${<span class="va">localSystem</span>.<span class="va">libc</span><span class="op">}</span> = getLibc prevStage<span class="op">;</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc-unwrapped</span> <span class="op">=</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> <span class="va">makeStaticLibrariesAndMark</span> <span class="op">=</span> <span class="va">pkg</span><span class="op">:</span></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>              lib.makeOverridable <span class="op">(</span>pkg.override <span class="op">{</span> <span class="va">stdenv</span> <span class="op">=</span> self.makeStaticLibraries self.stdenv<span class="op">;</span> <span class="op">})</span></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a>                .overrideAttrs <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="op">{</span> <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>a.pname<span class="sc">}</span><span class="st">-stage3&quot;</span><span class="op">;</span> <span class="op">});</span></span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>        <span class="kw">in</span> super.gcc<span class="op">-</span>unwrapped.override <span class="op">{</span></span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Link GCC statically against GMP etc.  This makes sense because</span></span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a>        <span class="co"># these builds of the libraries are only used by GCC, so it</span></span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a>        <span class="co"># reduces the size of the stdenv closure.</span></span>
<span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a>        <span class="va">gmp</span> <span class="op">=</span> makeStaticLibrariesAndMark super.gmp<span class="op">;</span></span>
<span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a>        <span class="va">mpfr</span> <span class="op">=</span> makeStaticLibrariesAndMark super.mpfr<span class="op">;</span></span>
<span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a>        <span class="va">libmpc</span> <span class="op">=</span> makeStaticLibrariesAndMark super.libmpc<span class="op">;</span></span>
<span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a>        <span class="va">isl</span> <span class="op">=</span> makeStaticLibrariesAndMark super.isl_0_20<span class="op">;</span></span>
<span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Use a deterministically built compiler</span></span>
<span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a>        <span class="co"># see https://github.com/NixOS/nixpkgs/issues/108475 for context</span></span>
<span id="cb20-28"><a href="#cb20-28" aria-hidden="true" tabindex="-1"></a>        <span class="va">reproducibleBuild</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb20-29"><a href="#cb20-29" aria-hidden="true" tabindex="-1"></a>        <span class="va">profiledCompiler</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb20-30"><a href="#cb20-30" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb20-31"><a href="#cb20-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span>
<span id="cb20-32"><a href="#cb20-32" aria-hidden="true" tabindex="-1"></a>    extraNativeBuildInputs = <span class="op">[</span> prevStage.patchelf <span class="op">]</span> <span class="op">++</span></span>
<span id="cb20-33"><a href="#cb20-33" aria-hidden="true" tabindex="-1"></a>      <span class="co"># Many tarballs come with obsolete config.sub/config.guess that don't recognize aarch64.</span></span>
<span id="cb20-34"><a href="#cb20-34" aria-hidden="true" tabindex="-1"></a>      lib.optional <span class="op">(!</span>localSystem.isx86 <span class="op">||</span> localSystem.libc == <span class="st">&quot;musl&quot;</span><span class="op">)</span></span>
<span id="cb20-35"><a href="#cb20-35" aria-hidden="true" tabindex="-1"></a>                   prevStage.updateAutotoolsGnuConfigScriptsHook;</span>
<span id="cb20-36"><a href="#cb20-36" aria-hidden="true" tabindex="-1"></a>  }<span class="op">)</span></span></code></pre></div>
<p>Apart from enabling static library builds it’s our typical <code>gcc-unwrapped</code>
definition.</p>
<p>Then in <code>bootstrap-stage4</code> we explicitly define <code>gcc</code> attribute as a wrapper
against <code>gcc-unwrapped</code> from a previous stage:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Construct a fourth stdenv that uses the new GCC.  But coreutils is</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># still from the bootstrap tools.</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">(</span><span class="va">prevStage</span><span class="op">:</span> stageFun prevStage <span class="op">{</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;bootstrap-stage4&quot;</span><span class="op">;</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">overrides</span> <span class="op">=</span> <span class="va">self</span><span class="op">:</span> <span class="va">super</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>      <span class="co"># Zlib has to be inherited and not rebuilt in this stage,</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>      <span class="co"># because gcc (since JAR support) already depends on zlib, and</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>      <span class="co"># then if we already have a zlib we want to use that for the</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>      <span class="co"># other purposes (binutils and top-level pkgs) too.</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>      <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span> gettext gnum4 bison perl texinfo zlib linuxHeaders libidn2 libunistring<span class="op">;</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>      ${<span class="va">localSystem</span>.<span class="va">libc</span><span class="op">}</span> = getLibc prevStage<span class="op">;</span></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">binutils</span> <span class="op">=</span> super.binutils.override <span class="op">{</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Don't use stdenv's shell but our own</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a>        <span class="va">shell</span> <span class="op">=</span> self.bash <span class="op">+</span> <span class="st">&quot;/bin/bash&quot;</span><span class="op">;</span></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Build expand-response-params with last stage like below</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a>        <span class="va">buildPackages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a>          <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span> stdenv<span class="op">;</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-23"><a href="#cb21-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># force gmp to rebuild so we have the option of dynamically linking</span></span>
<span id="cb21-24"><a href="#cb21-24" aria-hidden="true" tabindex="-1"></a>      <span class="co"># libgmp without creating a reference path from:</span></span>
<span id="cb21-25"><a href="#cb21-25" aria-hidden="true" tabindex="-1"></a>      <span class="co">#   stage5.gcc -&gt; stage4.coreutils -&gt; stage3.glibc -&gt; bootstrap</span></span>
<span id="cb21-26"><a href="#cb21-26" aria-hidden="true" tabindex="-1"></a>      <span class="va">gmp</span> <span class="op">=</span> lib.makeOverridable <span class="op">(</span>super.gmp.override <span class="op">{</span> <span class="va">stdenv</span> <span class="op">=</span> self.stdenv<span class="op">;</span> <span class="op">})</span>.overrideAttrs <span class="op">(</span><span class="va">a</span><span class="op">:</span> <span class="op">{</span> <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;</span><span class="sc">${</span>a.pname<span class="sc">}</span><span class="st">-stage4&quot;</span><span class="op">;</span> <span class="op">});</span></span>
<span id="cb21-27"><a href="#cb21-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-28"><a href="#cb21-28" aria-hidden="true" tabindex="-1"></a>      <span class="co"># To allow users' overrides inhibit dependencies too heavy for</span></span>
<span id="cb21-29"><a href="#cb21-29" aria-hidden="true" tabindex="-1"></a>      <span class="co"># bootstrap, like guile: https://github.com/NixOS/nixpkgs/issues/181188</span></span>
<span id="cb21-30"><a href="#cb21-30" aria-hidden="true" tabindex="-1"></a>      <span class="va">gnumake</span> <span class="op">=</span> super.gnumake.override <span class="op">{</span> <span class="va">inBootstrap</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span> <span class="op">};</span></span>
<span id="cb21-31"><a href="#cb21-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-32"><a href="#cb21-32" aria-hidden="true" tabindex="-1"></a>      <span class="va">gcc</span> <span class="op">=</span> lib.makeOverridable <span class="op">(</span><span class="bu">import</span> <span class="ss">../../build-support/cc-wrapper</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb21-33"><a href="#cb21-33" aria-hidden="true" tabindex="-1"></a>        <span class="va">nativeTools</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb21-34"><a href="#cb21-34" aria-hidden="true" tabindex="-1"></a>        <span class="va">nativeLibc</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb21-35"><a href="#cb21-35" aria-hidden="true" tabindex="-1"></a>        <span class="va">isGNU</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb21-36"><a href="#cb21-36" aria-hidden="true" tabindex="-1"></a>        <span class="va">buildPackages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb21-37"><a href="#cb21-37" aria-hidden="true" tabindex="-1"></a>          <span class="kw">inherit</span> <span class="op">(</span>prevStage<span class="op">)</span> stdenv<span class="op">;</span></span>
<span id="cb21-38"><a href="#cb21-38" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb21-39"><a href="#cb21-39" aria-hidden="true" tabindex="-1"></a>        <span class="va">cc</span> <span class="op">=</span> prevStage.gcc<span class="op">-</span>unwrapped<span class="op">;</span></span>
<span id="cb21-40"><a href="#cb21-40" aria-hidden="true" tabindex="-1"></a>        <span class="va">bintools</span> <span class="op">=</span> self.binutils<span class="op">;</span></span>
<span id="cb21-41"><a href="#cb21-41" aria-hidden="true" tabindex="-1"></a>        <span class="va">libc</span> <span class="op">=</span> getLibc self<span class="op">;</span></span>
<span id="cb21-42"><a href="#cb21-42" aria-hidden="true" tabindex="-1"></a>        <span class="kw">inherit</span> lib<span class="op">;</span></span>
<span id="cb21-43"><a href="#cb21-43" aria-hidden="true" tabindex="-1"></a>        <span class="kw">inherit</span> <span class="op">(</span>self<span class="op">)</span> stdenvNoCC coreutils gnugrep<span class="op">;</span></span>
<span id="cb21-44"><a href="#cb21-44" aria-hidden="true" tabindex="-1"></a>        <span class="va">shell</span> <span class="op">=</span> self.bash <span class="op">+</span> <span class="st">&quot;/bin/bash&quot;</span><span class="op">;</span></span>
<span id="cb21-45"><a href="#cb21-45" aria-hidden="true" tabindex="-1"></a>      <span class="op">};</span></span>
<span id="cb21-46"><a href="#cb21-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>;</span>
<span id="cb21-47"><a href="#cb21-47" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span>
<span id="cb21-48"><a href="#cb21-48" aria-hidden="true" tabindex="-1"></a>  }<span class="op">)</span></span></code></pre></div>
<p>We re-wrap <code>binutils</code> and <code>gcc</code> against previous <code>stdenv</code>. That is a bit
more complicated than our initial <code>bootstrapTools</code> dance. I think it’s
only needed to construct final <code>gcc</code> and <code>binutils</code> attributes. It’s not
crucial for bootstrap process but important for final package set.
Packages normally rely on <code>stdenv.cc</code> attribute as a compiler and don’t
usually refer <code>gcc</code> attribute itself directly.</p>
<p>Thus we have a pattern of how to splice an extra stage with <code>gcc</code>
rebuild:</p>
<ul>
<li>in our new stage we need to pass through all the tools next stage
inherits to avoid unnecessary rebuilds and we need to define
<code>gcc-unwrapped</code>.</li>
<li>in stage after we’ll get our result in <code>stdenv</code> automatically.</li>
</ul>
<p>Simple!</p>
<h2 id="first-attempt-at-the-override">First attempt at the override</h2>
<p>The natural place to plug our <code>gcc</code> rebuild is between
<code>bootstrap-stage1</code> (<code>binutils-unwrapped</code> rebuild) and <code>bootstrap-stage2</code>
(where we build special runtime dependencies for <code>glibc</code>).</p>
<p>I copied <code>boostrap-stage2</code> into <code>bootstrap-stage1.5-gcc-unwrapped</code>
and added only <code>gcc-unwrapped</code> definition there:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/default.nix</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -278,6 +278,73 @@ in</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>     };</span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a>   })</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  (prevStage: stageFun prevStage {</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a><span class="va">+    name = &quot;bootstrap-stage1.5-gcc-unwrapped&quot;;</span></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="va">+    overrides = self: super: {</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="va">+      inherit (prevStage)</span></span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a><span class="va">+        ccWrapperStdenv</span></span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        coreutils gnugrep</span></span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a><span class="va">+        perl gnum4 bison;</span></span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a><span class="va">+      ${localSystem.libc} = getLibc prevStage;</span></span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a><span class="va">+      gcc-unwrapped =</span></span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a><span class="va">+        let makeStaticLibrariesAndMark = pkg:</span></span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a><span class="va">+              lib.makeOverridable (pkg.override { stdenv = self.makeStaticLibraries self.stdenv; })</span></span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a><span class="va">+                .overrideAttrs (a: { pname = &quot;${a.pname}-stage3&quot;; });</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a><span class="va">+        in super.gcc-unwrapped.override {</span></span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a><span class="va">+        # Link GCC statically against GMP etc.  This makes sense because</span></span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a><span class="va">+        # these builds of the libraries are only used by GCC, so it</span></span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a><span class="va">+        # reduces the size of the stdenv closure.</span></span>
<span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a><span class="va">+        gmp = makeStaticLibrariesAndMark super.gmp;</span></span>
<span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a><span class="va">+        mpfr = makeStaticLibrariesAndMark super.mpfr;</span></span>
<span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a><span class="va">+        libmpc = makeStaticLibrariesAndMark super.libmpc;</span></span>
<span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a><span class="va">+        isl = makeStaticLibrariesAndMark super.isl_0_20;</span></span>
<span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a><span class="va">+        # Use a deterministically built compiler</span></span>
<span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a><span class="va">+        # see https://github.com/NixOS/nixpkgs/issues/108475 for context</span></span>
<span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a><span class="va">+        reproducibleBuild = true;</span></span>
<span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a><span class="va">+        profiledCompiler = false;</span></span>
<span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a><span class="va">+      };</span></span>
<span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a><span class="va">+    };</span></span>
<span id="cb22-36"><a href="#cb22-36" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb22-37"><a href="#cb22-37" aria-hidden="true" tabindex="-1"></a><span class="va">+    # `libtool` comes with obsolete config.sub/config.guess that don't recognize Risc-V.</span></span>
<span id="cb22-38"><a href="#cb22-38" aria-hidden="true" tabindex="-1"></a><span class="va">+    extraNativeBuildInputs =</span></span>
<span id="cb22-39"><a href="#cb22-39" aria-hidden="true" tabindex="-1"></a><span class="va">+      lib.optional (localSystem.isRiscV) prevStage.updateAutotoolsGnuConfigScriptsHook;</span></span>
<span id="cb22-40"><a href="#cb22-40" aria-hidden="true" tabindex="-1"></a><span class="va">+  })</span></span></code></pre></div>
<p>It’s a big but mechanical change. We need to pay some attention to
<code>inherit (prevStage) ...</code> to pass through enough dependencies to
avoid unnecessary rebuilds. I used histograms command above to check
if we are doing something reasonable.</p>
<p>Let’s try if it works!</p>
<pre><code>$ nix build -f. stdenv
...
ld: dwp.o: in function
  `__gnu_cxx::new_allocator&lt;gold::Dwp_output_file::Contribution&gt;
    ::allocate(unsigned long, void const*)':
/nix/store/...-gcc-11.3.0/include/c++/11.3.0/ext/new_allocator.h:116:
    undefined reference to `std::__throw_bad_array_new_length()'
...
collect2: error: ld returned 1 exit status
...
For full logs, run 'nix log /nix/store/...-binutils-2.39.drv'.</code></pre>
<p>Didn’t work.</p>
<p>This is a typical build failure caused by mismatch between code
generated by <code>g++</code> (<code>gcc-11</code> in this case) and symbols provided by
<code>libstdc++</code> (<code>gcc-8</code> in this case). Outdated <code>libstdc++</code> comes from
<code>bootstrapTools</code>’ <code>/lib</code> directory. The same directory where rest of
libraries sits.</p>
<p>Normally other distributions (and <code>gcc</code>’s default build system) use
version-specific paths to <code>libstdc++</code>, like <code>.../lib/gcc/x86_64-pc-linux-gnu/11.3.0/libstdc++.so</code>.
That way parallel <code>gcc</code> installs have a chance to keep their <code>c++</code>
business to themselves and not interfere with one another.</p>
<p>Let’s fix this error the similar way by moving it out of default <code>lib</code>
path:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/bootstrap-tools/scripts/unpack-bootstrap-tools.sh</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -17,6 +17,15 @@ else</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    LD_BINARY=$out/lib/ld-*so.?</span>
<span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a> fi</span>
<span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a><span class="va">+# path to version-specific libraries, like libstdc++.so</span></span>
<span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a><span class="va">+LIBSTDCXX_SO_DIR=$(echo $out/lib/gcc/*/*)</span></span>
<span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a><span class="va">+# Move version-specific libraries out to avoid library mix when we</span></span>
<span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a><span class="va">+# upgrade gcc.</span></span>
<span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a><span class="va">+# TODO(trofi): update bootstrap tarball script and tarballs to put them</span></span>
<span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a><span class="va">+# into expected location directly.</span></span>
<span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a><span class="va">+LD_LIBRARY_PATH=$out/lib $LD_BINARY $out/bin/mv $out/lib/libstdc++.* $LIBSTDCXX_SO_DIR/</span></span>
<span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a> # On x86_64, ld-linux-x86-64.so.2 barfs on patchelf'ed programs.  So</span>
<span id="cb24-17"><a href="#cb24-17" aria-hidden="true" tabindex="-1"></a> # use a copy of patchelf.</span>
<span id="cb24-18"><a href="#cb24-18" aria-hidden="true" tabindex="-1"></a> LD_LIBRARY_PATH=$out/lib $LD_BINARY $out/bin/cp $out/bin/patchelf .</span>
<span id="cb24-19"><a href="#cb24-19" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -25,8 +34,8 @@ for i in $out/bin/* $out/libexec/gcc/*/*/*; do</span></span>
<span id="cb24-20"><a href="#cb24-20" aria-hidden="true" tabindex="-1"></a>     if [ -L &quot;$i&quot; ]; then continue; fi</span>
<span id="cb24-21"><a href="#cb24-21" aria-hidden="true" tabindex="-1"></a>     if [ -z &quot;${i##*/liblto*}&quot; ]; then continue; fi</span>
<span id="cb24-22"><a href="#cb24-22" aria-hidden="true" tabindex="-1"></a>     echo patching &quot;$i&quot;</span>
<span id="cb24-23"><a href="#cb24-23" aria-hidden="true" tabindex="-1"></a><span class="st">-    LD_LIBRARY_PATH=$out/lib $LD_BINARY \</span></span>
<span id="cb24-24"><a href="#cb24-24" aria-hidden="true" tabindex="-1"></a><span class="st">-        ./patchelf --set-interpreter $LD_BINARY --set-rpath $out/lib --force-rpath &quot;$i&quot;</span></span>
<span id="cb24-25"><a href="#cb24-25" aria-hidden="true" tabindex="-1"></a><span class="va">+    LD_LIBRARY_PATH=$out/lib:$LIBSTDCXX_SO_DIR $LD_BINARY \</span></span>
<span id="cb24-26"><a href="#cb24-26" aria-hidden="true" tabindex="-1"></a><span class="va">+        ./patchelf --set-interpreter $LD_BINARY --set-rpath $out/lib:$LIBSTDCXX_SO_DIR --force-rpath &quot;$i&quot;</span></span>
<span id="cb24-27"><a href="#cb24-27" aria-hidden="true" tabindex="-1"></a> done</span>
<span id="cb24-28"><a href="#cb24-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb24-29"><a href="#cb24-29" aria-hidden="true" tabindex="-1"></a> for i in $out/lib/librt-*.so $out/lib/libpcre*; do</span></code></pre></div>
<p>The only binary using <code>libstdc++</code> in <code>bootstrapTools</code> is <code>patchelf</code>. We
had to extend its <code>RUNPATH</code> as well.</p>
<p>Once we fixed that the next failure happens way later, in <code>bootstrap-stage4-gcc</code>:</p>
<pre><code>../../gcc-11.3.0/gcc/ggc-common.c: In function 'void report_heap_memory_use()':
../../gcc-11.3.0/gcc/ggc-common.c:1018:23:
  error: 'mallinfo2' was not declared in this scope; did you mean 'mallinfo'?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~

For full logs, run 'nix log /nix/store/..-gcc-11.3.0.drv'.</code></pre>
<p><code>mallinfo2</code> is a somewhat recent <code>glibc</code> symbol from <code>glibc-2.33</code>. Our
<code>bootstrapTools</code>’ <code>glibc</code> version is <code>2.27</code>. Our <code>nixpkgs</code> <code>glibc</code> version
is <code>2.35</code>.</p>
<p><code>bootstrap-stage4</code> should already have a <code>nixpkgs</code> <code>glibc</code>. Unless I
broke its wrapper registration after I rebuilt <code>gcc</code>.</p>
<p>Normally <code>gcc</code> should be reasonably portable across older <code>glibc</code>
versions (and even non-<code>glibc</code>).</p>
<p>Checking <code>gcc</code>’s source code it indeed looks reasonable:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Somewhere in gcc/ggc-common.cc</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>report_heap_memory_use <span class="op">()</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(HAVE_MALLINFO) || defined(HAVE_MALLINFO2)</span></span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef HAVE_MALLINFO2</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#define MALLINFO_FN mallinfo2</span></span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#define MALLINFO_FN mallinfo</span></span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>quiet_flag<span class="op">)</span></span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>    fprintf <span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot; {heap &quot;</span> PRsa <span class="op">(</span><span class="dv">0</span><span class="op">)</span> <span class="st">&quot;}&quot;</span><span class="op">,</span></span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>             SIZE_AMOUNT <span class="op">(</span>MALLINFO_FN <span class="op">().</span>arena<span class="op">));</span></span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Let’s check its <code>config.log</code> to see why <code>HAVE_MALLINFO2</code> was
detected as available.</p>
<p>I ran the stdenv build with <code>--keep-failed</code> to get full <code>gcc</code>’s
build tree around when it fails:</p>
<pre><code>nix-build -A stdenv --keep-failed
...
note: keeping build directory '/tmp/nix-build-gcc-11.3.0.drv-1'
error: builder for '/nix/store/8vx2w68ihszs71kfysm145y71lkp79mj-gcc-11.3.0.drv' failed with exit code 2;

$ fgrep -A3 mallinfo2 /tmp/nix-build-gcc-11.3.0.drv-1/build/gcc/config.log
configure:10410: checking for mallinfo2
configure:10410: g++ -std=c++11 -o conftest -g    -static-libstdc++ -static-libgcc   conftest.cpp  &gt;&amp;5
configure:10410: $? = 0
configure:10410: result: yes

$ fgrep TARGET_GLIBC /tmp/nix-build-gcc-11.3.0.drv-1/build/gcc/config.log
#define TARGET_GLIBC_MAJOR 2
#define TARGET_GLIBC_MINOR 35</code></pre>
<p><code>gcc</code> and <code>glibc</code> both look fresh enough. That means I failed at
registering new <code>glibc</code> headers perhaps? Let’s check.</p>
<p>Making sure we test a reasonable attribute:</p>
<pre><code>$ nix-build -A stdenv.__bootPackages.stdenv.cc.cc
...
../../gcc-11.3.0/gcc/ggc-common.c: In function 'void report_heap_memory_use()':
../../gcc-11.3.0/gcc/ggc-common.c:1018:23: error: 'mallinfo2' was not declared in this scope; did you mean 'mallinfo'?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~</code></pre>
<p>Diving into expression:</p>
<pre><code>$ nix develop -i -f. stdenv.__bootPackages.stdenv.cc.cc
bash-5.1$ dev&gt; unpackPhase
unpacking source archive /nix/store/lask01x6hyji5sd06f6yc9nz3rxcf2ia-gcc-11.3.0.tar.xz
source root is gcc-11.3.0
setting SOURCE_DATE_EPOCH to timestamp 1650529937 of file gcc-11.3.0/MD5SUMS

bash-5.1$ dev&gt;cd gcc-11.3.0
bash-5.1$ dev&gt;configurePhase
fixing libtool script ./libgo/config/ltmain.sh
...
config.status: creating Makefile

bash-5.1$ dev&gt;buildPhase
...
In file included from ../.././gcc/ggc-common.c:25:
../.././gcc/ggc-common.c: In function ‘void report_heap_memory_use()’:
../.././gcc/ggc-common.c:1018:23: error: ‘mallinfo2’ was not declared in this scope; did you mean ‘mallinfo’?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~
...
make[3]: Leaving directory '/home/slyfox/dev/git/nixpkgs-staging-bootstrap/gcc-11.3.0/host-x86_64-unknown-linux-gnu/gcc'
make[2]: *** [Makefile:4793: all-stage1-gcc] Error 2</code></pre>
<p>Success! We got the same build failure!</p>
<p>Now we can run the command manually to explore its breakage:</p>
<pre><code>bash-5.1$ dev&gt;cd host-x86_64-unknown-linux-gnu/gcc
bash-5.1$ dev&gt;g++ -std=c++11  -fno-PIE -c   -g -DIN_GCC     -fno-exceptions -fno-rtti -fasynchronous-unwind-tables -W -Wall -Wno-narrowing -Wwrite-strings -Wcast-qual -Wno-error=format-diag -Wno-format -Wmissing-format-attribute -Woverloaded-virtual -pedantic -Wno-long-long -Wno-variadic-macros -Wno-overlength-strings -fno-common  -DHAVE_CONFIG_H -I. -I. -I../.././gcc -I../.././gcc/. -I../.././gcc/../include -I../.././gcc/../libcpp/include -I../.././gcc/../libcody -I/nix/store/14vlw51dg2n6kb0r6qgb077v6ryb638g-gmp-with-cxx-stage3-6.2.1-dev/include -I/nix/store/kfk03b53z547gydfslv474sfarza17sm-mpfr-stage3-4.1.1-dev/include -I/nix/store/l4x6j77hakm6lwgzvc50hb4i45ck92a0-libmpc-stage3-1.2.1/include  -I../.././gcc/../libdecnumber -I../.././gcc/../libdecnumber/bid -I../libdecnumber -I../.././gcc/../libbacktrace -I/nix/store/qjdmf5pwdlgzf73lkkvpxm9s6l32wf2f-isl-stage3-0.20/include  -o ggc-common.o -MT ggc-common.o -MMD -MP -MF ./.deps/ggc-common.TPo ../.././gcc/ggc-common.c
In file included from ../.././gcc/ggc-common.c:25:
../.././gcc/ggc-common.c: In function ‘void report_heap_memory_use()’:
../.././gcc/ggc-common.c:1018:23: error: ‘mallinfo2’ was not declared in this scope; did you mean ‘mallinfo’?
 1018 |   #define MALLINFO_FN mallinfo2
      |                       ^~~~~~~~~
../.././gcc/system.h:1262:26: note: in definition of macro ‘SIZE_SCALE’
 1262 | #define SIZE_SCALE(x) (((x) &lt; 10 * ONE_K \
      |                          ^
../.././gcc/ggc-common.c:1024:14: note: in expansion of macro ‘SIZE_AMOUNT’
 1024 |              SIZE_AMOUNT (MALLINFO_FN ().arena));
      |              ^~~~~~~~~~~
../.././gcc/ggc-common.c:1024:27: note: in expansion of macro ‘MALLINFO_FN’
 1024 |              SIZE_AMOUNT (MALLINFO_FN ().arena));
      |                           ^~~~~~~~~~~</code></pre>
<p>Let’s check include order by adding ‘-v’ option:</p>
<pre><code>bash-5.1$ dev&gt;g++ -v -std=c++11  -fno-PIE ... ../.././gcc/ggc-common.c
#include &lt;...&gt; search starts here:
 .
 ../.././gcc
 ../.././gcc/../include
 ../.././gcc/../libcpp/include
 ../.././gcc/../libcody
 ../.././gcc/../libdecnumber
 ../.././gcc/../libdecnumber/bid
 ../libdecnumber
 ../.././gcc/../libbacktrace
 /run/current-system/sw/include
 /nix/store/xa81wrm1vpbfy090448mjsg6zh5sifbb-gettext-0.21/include
 /nix/store/14vlw51dg2n6kb0r6qgb077v6ryb638g-gmp-with-cxx-stage3-6.2.1-dev/include
 /nix/store/kfk03b53z547gydfslv474sfarza17sm-mpfr-stage3-4.1.1-dev/include
 /nix/store/gdkid16s49qn2g5cbyr9xq6yqj55xgk0-gmp-with-cxx-6.2.1-dev/include
 /nix/store/l4x6j77hakm6lwgzvc50hb4i45ck92a0-libmpc-stage3-1.2.1/include
 /nix/store/v6za3bc8gpddggqgivjs1adzgc9c86mz-libxcrypt-4.4.33/include
 /nix/store/qjdmf5pwdlgzf73lkkvpxm9s6l32wf2f-isl-stage3-0.20/include
 /nix/store/5hzpyz2m5ipsdsv017y6pzgg39p10ici-zlib-1.2.13-dev/include
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../include/c++/11.3.0
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../include/c++/11.3.0/x86_64-unknown-linux-gnu
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../include/c++/11.3.0/backward
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/include
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/include
 /nix/store/x6p2wal4jlvqky4bh69447dbv1fndr0m-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/include-fixed
 /nix/store/nm7fxi26avig3arwpasfy0avfwyb41i3-bootstrap-stage0-glibc-bootstrap/include
 /nix/store/jn50ph1kl1h9x4qjs6hd6944afijaadh-glibc-2.35-224-dev/include</code></pre>
<p>Last two lines are the culprit: we see both headers from bootstrap
<code>...-bootstrap-stage0-glibc-bootstrap/include</code> (goes first) and from
<code>...-glibc-2.35-224-dev/include</code> (goes second).</p>
<p>That is part of our problem. It would not be too bad if this include
order was consistent across compiler calls and we would use bootstrap
<code>glibc</code> consistently.</p>
<p><code>glibc-bootstrap</code> header lookup path was embedded into <code>gcc</code> when we
built it at <code>bootstrap-stage1.5</code> step.</p>
<p>Build log for that <code>gcc</code> contains
<code>--with-native-system-header-dir=/nix/store/nm7fxi26avig3arwpasfy0avfwyb41i3-bootstrap-stage0-glibc-bootstrap/include</code>
reference. Ideally we should have a way to make it lower priority than
<code>/nix/store/jn50ph1kl1h9x4qjs6hd6944afijaadh-glibc-2.35-224-dev/include</code>.</p>
<p><code>-I</code> inserts headers too early: it prepends <code>fixincludes</code> and
<code>gcc</code>-wrapped headers. <code>-idirafter</code> inserts headers too late: after an
existing <code>...-bootstrap-stage0-glibc-bootstrap/include</code> entry.</p>
<p>How can we do something in the middle?</p>
<p>Luckily there is a workaround: if we pass <code>--sysroot=...</code> to the
compiler it will throw away default <code>--with-native-system-header-dir</code>
value as if it was never passed. And it also keeps the rest of includes:
<code>fixincludes</code>, <code>c++-headers</code> and so on.</p>
<p>Thus the hack:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/build-support/cc-wrapper/default.nix</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/build-support/cc-wrapper/default.nix</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -336,7 +336,7 @@ stdenv.mkDerivation {</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>       touch &quot;$out/nix-support/libc-ldflags&quot;</span>
<span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>       echo &quot;-B${libc_lib}${libc.libdir or &quot;/lib/&quot;}&quot; &gt;&gt; $out/nix-support/libc-crt1-cflags</span>
<span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>     '' + optionalString (!(cc.langD or false)) ''</span>
<span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a><span class="st">-      echo &quot;-idirafter ${libc_dev}${libc.incdir or &quot;/include&quot;}&quot; &gt;&gt; $out/nix-support/libc-cflags</span></span>
<span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      echo &quot;--sysroot=/nix/dir/does/not/exist -idirafter ${libc_dev}${libc.incdir or &quot;/include&quot;}&quot; &gt;&gt; $out/nix-support/libc-cflags</span></span>
<span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a>     '' + optionalString (isGNU &amp;&amp; (!(cc.langD or false))) ''</span>
<span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a>       for dir in &quot;${cc}&quot;/lib/gcc/*/*/include-fixed; do</span>
<span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a>         echo '-idirafter' ''${dir} &gt;&gt; $out/nix-support/libc-cflags</span></code></pre></div>
<p>With the above I could build <code>stdenv</code>!</p>
<pre><code>$ nix build -f. stdenv</code></pre>
<p>Yay?</p>
<p>Let’s build something more substantial:</p>
<pre><code>nix-build -A libffi
error: builder for '/nix/store/dsi4dkc04wgcz5fr0z1zrn92269g03zd-dejagnu-1.6.3.drv' failed with exit code 2;
       last 10 log lines:
       &gt;
       &gt; # of expected passes            300
       &gt; DejaGnu version    1.6.3
       &gt; Expect version   5.45.4
       &gt; Tcl version     8.6
       &gt;
       &gt; /nix/store/jkk3n9lgqryg76w103ix62gxh32b4ywa-bash-5.2-p15/bin/bash: line 4:  2854 Aborted                 (core dumped) ../runtest --tool $tool --srcdir $srcdir
       &gt; make[1]: *** [Makefile:1097: check-DEJAGNU] Error 1
       &gt; make[1]: Leaving directory '/build/dejagnu-1.6.3/build'
       &gt; make: *** [Makefile:1307: check-am] Error 2
       For full logs, run 'nix log /nix/store/dsi4dkc04wgcz5fr0z1zrn92269g03zd-dejagnu-1.6.3.drv'.
error: 1 dependencies of derivation '/nix/store/y2a8jwf1fx3vjnfwnayrj7yqcpb3r6gr-libffi-3.4.4.drv' failed to build</code></pre>
<p>The crash fails due to missing <code>libgcc_s.so</code> in <code>glibc</code>’s output:</p>
<pre><code>$ nix-build -A glibc
$ ls result/lib/libgcc_s.so
ls: cannot access 'result/lib/libgcc_s.so': No such file or directory</code></pre>
<p>But it was there before. And caused us all sorts of problems.</p>
<p>Adding a bit of logging to see if the <code>glibc</code> file copy hook executed
at all:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -75,6 +75,9 @@ callPackage ./common.nix { inherit stdenv; } {</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a>     # - clang-wrapper in cross-compilation</span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a>     # Last attempt: https://github.com/NixOS/nixpkgs/pull/36948</span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a>     preInstall = ''</span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a><span class="va">+      echo &quot;We are in preInstall hook. Does ${stdenv.cc.cc} provide a libgcc?&quot;</span></span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      ls -l ${stdenv.cc.cc}/lib</span></span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a>       if [ -f ${stdenv.cc.cc}/lib/libgcc_s.so.1 ]; then</span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a>           mkdir -p $out/lib</span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a>           cp ${stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></code></pre></div>
<p>Hook did execute and has shown no files there. No copying happens
because those libraries hide in a non-default <code>.lib</code> output of
<code>stdenv.cc.cc</code>:</p>
<pre><code>$ nix-build -A stdenv.cc.cc
/nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0

$ nix-build -A stdenv.cc.cc.lib
/nix/store/wprxx5zkkk13hpj6k1v6qadjylh3vq9m-gcc-11.3.0-lib

$ ls /nix/store/sxdx80lmk4zkhb51f4x5dgqvxgmx55wl-gcc-11.3.0/lib
gcc        libasan_preinit.o  libcc1.a   libgomp.spec  libitm.spec  liblsan_preinit.o  libsanitizer.spec  libssp_nonshared.a  libstdc++fs.a  libtsan.a          libubsan.a
libasan.a  libatomic.a        libgomp.a  libitm.a      liblsan.a    libquadmath.a      libssp.a           libstdc++.a         libsupc++.a    libtsan_preinit.o

$ ls /nix/store/wprxx5zkkk13hpj6k1v6qadjylh3vq9m-gcc-11.3.0-lib/lib
libasan.la        libatomic.so        libcc1.so.0      libgomp.so        libitm.so.1      liblsan.so.0.0.0      libssp.la            libstdc++fs.la       libstdc++.so.6.0.29-gdb.py  libtsan.so.0.0.0
libasan.so        libatomic.so.1      libcc1.so.0.0.0  libgomp.so.1      libitm.so.1.0.0  libquadmath.la        libssp_nonshared.la  libstdc++.la         libsupc++.la                libubsan.la
libasan.so.6      libatomic.so.1.2.0  libgcc_s.so      libgomp.so.1.0.0  liblsan.la       libquadmath.so        libssp.so            libstdc++.so         libtsan.la                  libubsan.so
libasan.so.6.0.0  libcc1.la           libgcc_s.so.1    libitm.la         liblsan.so       libquadmath.so.0      libssp.so.0          libstdc++.so.6       libtsan.so                  libubsan.so.1
libatomic.la      libcc1.so           libgomp.la       libitm.so         liblsan.so.0     libquadmath.so.0.0.0  libssp.so.0.0.0      libstdc++.so.6.0.29  libtsan.so.0                libubsan.so.1.0.0</code></pre>
<p>It happened to work because <code>bootstrapTools</code> is a derivation with single
<code>out</code> output and <code>gcc</code> from <code>nixpkgs</code> has slightly different structure.
Thus making the copy hack more portable:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -75,11 +75,11 @@ callPackage ./common.nix { inherit stdenv; } {</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>     # - clang-wrapper in cross-compilation</span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>     # Last attempt: https://github.com/NixOS/nixpkgs/pull/36948</span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>     preInstall = ''</span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a><span class="st">-      if [ -f ${stdenv.cc.cc}/lib/libgcc_s.so.1 ]; then</span></span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a><span class="va">+      if [ -f ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so.1 ]; then</span></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>           mkdir -p $out/lib</span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true" tabindex="-1"></a><span class="st">-          cp ${stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true" tabindex="-1"></a><span class="va">+          cp ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span></span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true" tabindex="-1"></a>           # the .so It used to be a symlink, but now it is a script</span>
<span id="cb38-13"><a href="#cb38-13" aria-hidden="true" tabindex="-1"></a><span class="st">-          cp -a ${stdenv.cc.cc}/lib/libgcc_s.so $out/lib/libgcc_s.so</span></span>
<span id="cb38-14"><a href="#cb38-14" aria-hidden="true" tabindex="-1"></a><span class="va">+          cp -a ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so $out/lib/libgcc_s.so</span></span>
<span id="cb38-15"><a href="#cb38-15" aria-hidden="true" tabindex="-1"></a>       fi</span>
<span id="cb38-16"><a href="#cb38-16" aria-hidden="true" tabindex="-1"></a>     '';</span></code></pre></div>
<p>Trying again:</p>
<pre><code>$ ls $(nix-build -A glibc)/lib/libgcc_s.so.1
...
/nix/store/li0dy2746f4731kd15y76qcr072b0szp-glibc-2.35-224/lib/libgcc_s.so.1</code></pre>
<p>At last!</p>
<p>There is one minor annoyance we need to sort out: <code>libgcc_s.so.1</code> remembers
<code>glibc</code> it was linked against in its <code>RUNPATH</code>:</p>
<pre><code>$ readelf -aW $(nix-build -A glibc)/lib/libgcc_s.so.1 | fgrep RUNPATH
0x000000000000001d (RUNPATH)            Library runpath:
    [/nix/store/nm7fxi26avig3arwpasfy0avfwyb41i3-bootstrap-stage0-glibc-bootstrap/lib]</code></pre>
<p>It should refer instead to <code>glibc</code> we just built. Let’s clobber the runpath:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/glibc/default.nix</span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -80,6 +80,9 @@ callPackage ./common.nix { inherit stdenv; } {</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>           cp ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so.1 $out/lib/libgcc_s.so.1</span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a>           # the .so It used to be a symlink, but now it is a script</span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>           cp -a ${lib.getLib stdenv.cc.cc}/lib/libgcc_s.so $out/lib/libgcc_s.so</span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a><span class="va">+          # wipe out reference to previous libc it was built against</span></span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a><span class="va">+          chmod +w $out/lib/libgcc_s.so.1</span></span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a><span class="va">+          patchelf --set-rpath $out/lib $out/lib/libgcc_s.so.1</span></span>
<span id="cb41-10"><a href="#cb41-10" aria-hidden="true" tabindex="-1"></a>       fi</span>
<span id="cb41-11"><a href="#cb41-11" aria-hidden="true" tabindex="-1"></a>     '';</span></code></pre></div>
<p>It’s a safe operation in this case as we simulate <code>glibc</code> binary upgrade.
As <code>glibc</code> is backwards compatible it should not cause issues.
And in practice <code>libgcc_s.so.1</code> has almost no code that depends on <code>glibc</code>.</p>
<p>Now it looks better:</p>
<pre><code>$ readelf -aW $(nix-build -A glibc)/lib/libgcc_s.so.1 | fgrep RUNPATH
...
 0x000000000000001d (RUNPATH)            Library runpath:
     [/nix/store/mjf0zgkdd7prfaqh1y00q4xmphmz87p5-glibc-2.35-224/lib]</code></pre>
<p>After that I was able to build full <code>stdenv</code> and a few <code>c++</code> programs.</p>
<p>Proposed the change as
<a href="https://github.com/NixOS/nixpkgs/pull/209063">PR #209063</a>.</p>
<h2 id="the-clang-wrapper">The clang wrapper</h2>
<p>Surely done now?!</p>
<p>Overnight I ran the build against my whole set of system packages. Most
of them succeeded, but <code>vte</code> failed as:</p>
<pre><code>&gt; C compiler for the host machine: clang (clang 11.1.0 &quot;clang version 11.1.0&quot;)
&gt; C linker for the host machine: clang ld.bfd 2.39
&gt;
&gt; meson.build:17:0: ERROR: Compiler clang++ can not compile programs.
&gt;
&gt; A full log can be found at /build/vte-0.70.2/build/meson-logs/meson-log.txt
For full logs, run 'nix log /nix/store/rj77v58780gsrf38pi6qxjs89d4lrf6p-vte-0.70.2.drv'.</code></pre>
<p>Apparently the <code>--sysroot=...</code> hack changed search path in <code>clang</code> from
native paths to cross paths:</p>
<pre><code>$ printf &quot;int main(){}&quot; | clang++ -x c++ -
$ printf &quot;int main(){}&quot; | clang++ --sysroot=/ -x c++ -
$ printf &quot;int main(){}&quot; | clang++ --sysroot=/does/not/exist -x c++ -
ld: cannot find -lstdc++: No such file or directory</code></pre>
<p>Here is the patch lookup change behaviour. Good case:</p>
<pre><code>$ printf &quot;int main(){}&quot; | clang++ -x c++ - -Wl,--verbose |&amp; grep -F stdc++
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.so failed
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.a failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.so failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../lib64/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../lib64/libstdc++.a succeeded
/nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/../../../../lib64/libstdc++.a</code></pre>
<p>Note that <code>clang++</code> does try target-specific <code>x86_64-unknown-linux-gnu</code>
paths first. But then falls backs to generic paths.</p>
<p>Bad case:</p>
<pre><code>$ printf &quot;int main(){}&quot; | clang++ --sysroot=/does/not/exist -x c++ - -Wl,--verbose |&amp; grep -F stdc++
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.so failed
attempt to open /nix/store/...-glibc-2.35-224/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0-lib/x86_64-unknown-linux-gnu/lib/libstdc++.a failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.so failed
attempt to open /nix/store/...-clang-11.1.0-lib/lib/libstdc++.a failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.so failed
attempt to open /nix/store/...-gcc-11.3.0/lib64/gcc/x86_64-unknown-linux-gnu/11.3.0/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib64/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib64/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/lib64/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/lib64/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/x86_64-unknown-linux-gnu/lib/libstdc++.a failed
attempt to open /nix/store/...-binutils-2.39/lib/libstdc++.so failed
attempt to open /nix/store/...-binutils-2.39/lib/libstdc++.a failed
/nix/store/...-binutils-2.39/bin/ld: cannot find -lstdc++: No such file or directory</code></pre>
<p>It’s roughly the same search order, but generic paths are not looked up.</p>
<p>I think it’s a somewhat minor <code>clang</code> bug. <code>--sysroot</code> is not about a
different target but about different offset for system library locations.
It should not affect compiler-specific library locations even if these
libraries are from <code>gcc</code> compiler and not <code>clang</code>.</p>
<p>But then again <code>nixpkgs</code> has its own slightly deviating notion of what
is cross-compiling compared other distributions. We could say that
<code>nixpkgs</code> has empty <code>sysroot</code> and always passes all the library and
include paths explicitly.</p>
<p>We can safely work around lookup paths by adding <code>$target -&gt; .</code> symlink
to <code>gcc</code> to simulate cross case:</p>
<div class="sourceCode" id="cb47"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb47-1"><a href="#cb47-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/compilers/gcc/11/default.nix</span></span>
<span id="cb47-2"><a href="#cb47-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/compilers/gcc/11/default.nix</span></span>
<span id="cb47-3"><a href="#cb47-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -221,6 +221,7 @@ stdenv.mkDerivation ({</span></span>
<span id="cb47-4"><a href="#cb47-4" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb47-5"><a href="#cb47-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-6"><a href="#cb47-6" aria-hidden="true" tabindex="-1"></a>   targetConfig = if targetPlatform != hostPlatform then targetPlatform.config else null;</span>
<span id="cb47-7"><a href="#cb47-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  targetPlatformConfig = targetPlatform.config;</span></span>
<span id="cb47-8"><a href="#cb47-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb47-9"><a href="#cb47-9" aria-hidden="true" tabindex="-1"></a>   buildFlags = optional</span>
<span id="cb47-10"><a href="#cb47-10" aria-hidden="true" tabindex="-1"></a>     (targetPlatform == hostPlatform &amp;&amp; hostPlatform == buildPlatform)</span>
<span id="cb47-11"><a href="#cb47-11" aria-hidden="true" tabindex="-1"></a><span class="kw">diff --git a/pkgs/development/compilers/gcc/builder.sh b/pkgs/development/compilers/gcc/builder.sh</span></span>
<span id="cb47-12"><a href="#cb47-12" aria-hidden="true" tabindex="-1"></a>index 113bd83ea53..71a997a7df9 100644</span>
<span id="cb47-13"><a href="#cb47-13" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/compilers/gcc/builder.sh</span></span>
<span id="cb47-14"><a href="#cb47-14" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/compilers/gcc/builder.sh</span></span>
<span id="cb47-15"><a href="#cb47-15" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -203,6 +203,17 @@ preInstall() {</span></span>
<span id="cb47-16"><a href="#cb47-16" aria-hidden="true" tabindex="-1"></a>         ln -s lib &quot;$out/${targetConfig}/lib32&quot;</span>
<span id="cb47-17"><a href="#cb47-17" aria-hidden="true" tabindex="-1"></a>         ln -s lib &quot;${!outputLib}/${targetConfig}/lib32&quot;</span>
<span id="cb47-18"><a href="#cb47-18" aria-hidden="true" tabindex="-1"></a>     fi</span>
<span id="cb47-19"><a href="#cb47-19" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb47-20"><a href="#cb47-20" aria-hidden="true" tabindex="-1"></a><span class="va">+    # cc-wrappers uses --sysroot=/nix/store/does/not/exist as a way to</span></span>
<span id="cb47-21"><a href="#cb47-21" aria-hidden="true" tabindex="-1"></a><span class="va">+    # drop default sysheaders search path. Unfortunately that switches</span></span>
<span id="cb47-22"><a href="#cb47-22" aria-hidden="true" tabindex="-1"></a><span class="va">+    # clang++ into searching libraries in gcc in cross-compiler paths:</span></span>
<span id="cb47-23"><a href="#cb47-23" aria-hidden="true" tabindex="-1"></a><span class="va">+    #   from ${!outputLib}/lib (native)</span></span>
<span id="cb47-24"><a href="#cb47-24" aria-hidden="true" tabindex="-1"></a><span class="va">+    #   to ${!outputLib}/${targetPlatformConfig}/lib</span></span>
<span id="cb47-25"><a href="#cb47-25" aria-hidden="true" tabindex="-1"></a><span class="va">+    # We create the symlink to make both native and cross paths</span></span>
<span id="cb47-26"><a href="#cb47-26" aria-hidden="true" tabindex="-1"></a><span class="va">+    # available even if the toolchain is not the cross-compiler.</span></span>
<span id="cb47-27"><a href="#cb47-27" aria-hidden="true" tabindex="-1"></a><span class="va">+    if [ ! -e ${!outputLib}/${targetPlatformConfig} ] ; then</span></span>
<span id="cb47-28"><a href="#cb47-28" aria-hidden="true" tabindex="-1"></a><span class="va">+        ln -s . ${!outputLib}/${targetPlatformConfig}</span></span>
<span id="cb47-29"><a href="#cb47-29" aria-hidden="true" tabindex="-1"></a><span class="va">+    fi</span></span>
<span id="cb47-30"><a href="#cb47-30" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<h2 id="are-we-done-yet">Are we done yet?</h2>
<p>We managed to update <code>libgcc_s.so.1</code> in <code>glibc</code> to match default version
of <code>gcc</code> used by <code>nixpkgs</code>, but there is one minor catch: we built it
against <code>bootstrapTools</code>’ <code>glibc</code>. Or more specifically here is the
current layout:</p>
<ul>
<li>good: it is built as part of <code>nixpkgs</code> <code>gcc</code> (and by <code>nixpkgs</code> <code>gcc</code>
as part of bootstrap that <code>gcc</code> package does internally).</li>
<li>good: it is built by <code>nixpkgs</code> <code>binutils</code> (with help of <code>gas</code> and
<code>ld</code>)</li>
<li>suboptimal: it is linked against <code>bootstrapTools</code>’ <code>glibc</code>, which means
that:
<ul>
<li>minor: it is linked against symbol versions defined by <code>libc.so.6</code></li>
<li>medium: it is linked against <code>bootstrapTools</code>’ glibc’s startup object files:
<ul>
<li><code>crti.o</code>: trivial <code>_init</code> / <code>_fini</code> global constructor handling</li>
<li><code>crtn.o</code>: trivial <code>.init</code> / <code>.fini</code> sections for global constructors</li>
<li><code>libc_nonshared.a</code>: small amount of target-specific stubs that refer
<code>__dso_handle</code> or really dislike dynamic relocations: <code>atexit</code>,
<code>at_quick_exit</code>, <code>__pthread_atfork</code>, <code>__stack_chk_fail_local</code>.</li>
</ul></li>
</ul></li>
</ul>
<p>Of all the above <code>libc_nonshared.a</code> is mildly annoying. That should not
cause any problems as glibc allows upgrades of libc.so.6 without
breaking already linked libraries or executables. But it’s still a
problem of reliance on a tiny bit of <code>bootstrapTools</code> code.</p>
<p>Ideally I would like to delete <code>libgcc_s.so.1</code> out of <code>glibc</code>’s <code>lib/</code>
directory entirely and it will solve this problem completely.</p>
<p>I’m not sure how exactly do it just yet, but I have a vague idea.</p>
<p>A while ago I wondered why cross-compiled <code>glibc</code> was missing
<code>libgcc_s.so.1</code> while native had it. Now it’s clear: it’s an unexpected
native/cross difference in <code>gcc.lib</code>
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/libraries/glibc/default.nix#L78-L83">library path</a>
(and also
<a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/development/libraries/glibc/common.nix#L271">manual hook removal</a>).
Once the main change lands I should be able to fix it as well one way or
another.</p>
<p>Thus no, we are not done yet. But it can wait when changes derived here
will land in <code>nixpkgs</code>. It looks like a clear improvement.</p>
<h2 id="next-steps">Next steps</h2>
<p>I tried to understand <code>nixpkgs</code> bootstrap process in depth and its
relation to the toolchain setup a few times in the past:</p>
<ul>
<li>to sort out <code>glibc</code> <a href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html">objects mismatch</a>
(landed)</li>
<li>to fix <code>binutils</code> <a href="https://github.com/NixOS/nixpkgs/pull/188544">LTO plumbing</a>
(failed, needs more research)</li>
<li>to sort <code>musl</code> <a href="https://github.com/NixOS/nixpkgs/issues/142066">include order</a>
(pending, needs more research)</li>
<li>to fix incomplete <code>mingw</code> <a href="https://github.com/NixOS/nixpkgs/issues/156343">library list</a>
(pending, needs more research)</li>
<li>to fix <code>include-what-you-use</code> <a href="https://github.com/NixOS/nixpkgs/issues/189753">headers path</a>
(pending, needs more research)</li>
</ul>
<p>I failed more frequently than I succeeded.</p>
<p>Until today I never felt I quite grasped the details. There were
always minor things I did not look at: how does <code>nixpkgs</code> define
include header order? How does it track what are compiler-specific
libraries and what are libc-specific ones? Does it care? And other ones
like that. This time I managed to uncover almost all of that.</p>
<p>In most of the cases above it’s very clear why things are broken and why
they usually work in other distributions. The answer is almost always:
default paths have reasonable values there and <code>nixpkgs</code> does not use
default paths machinery. I always felt <code>nixpkgs</code> way of setting paths is
a bit broken. Now I have some evidence how exactly it is broken. That
gives me a hope I can amend at least part of it and eventually fix the
issues above without resorting to hacks like <code>--sysroot=...</code>.</p>
<p>Still unfixed lower hanging fruits are:</p>
<ul>
<li>reduction of needless rebuild redundancy of <code>binutils</code> and other tools
tools used in bootstrap.</li>
<li>static build of <code>gcc</code> dependencies also looks like a workaround of
<code>bootstrapTools</code> placing everything into one directory</li>
</ul>
<h2 id="parting-words">Parting words</h2>
<p><code>nixpkgs</code> bootstrap process is simple at a high level: we build <code>gcc</code>,
<code>glibc</code> and friends enough times to declare the result stable enough.
When we don’t expect future rebuilds to change the output we declare
success.</p>
<p>The simplest way to explore bootstrap dependencies is probably to grep
and render parts of the graph produced by
<code>nix-store --query --graph $(nix-build -A stdenv.cc.cc)</code>.</p>
<p>The precise mechanics of it are somewhat involved due to toolchain
specifics but not too complicated.</p>
<p>The bootstrap is a bit fragile as <code>nixpkgs</code> assumes that it should
be feasible to swap <code>glibc</code> from under active toolchain by redirecting
headers. It could be solved by another round of rebuilds instead of
using less known compiler options. Or by using path priority override
closer to what vanilla <code>gcc</code> does (I still did not find best options for
that).</p>
<p>Along the way I found a few minor infelicities in <code>nixpkgs</code>:</p>
<ul>
<li>inconsistent <code>libgcc_s.so.1</code> copying: <a href="https://github.com/NixOS/nixpkgs/pull/209055">PR #209055</a></li>
<li><code>libstdc++</code> search path pollution in <code>bootstrapTools</code>: <a href="https://github.com/NixOS/nixpkgs/pull/209054">PR #209054</a></li>
<li>missing cross-link for native toolchains: <a href="https://github.com/NixOS/nixpkgs/pull/209153">PR #209153</a></li>
</ul>
<p>And in the end I ended up with <a href="https://github.com/NixOS/nixpkgs/pull/209063">PR #209063</a>
to get <code>libgcc_s.so.1</code> up to date enough.</p>
<p>Initially I thought that adding one <code>gcc</code> rebuild is an easy problem.
I tried adding magic lines to <code>pkgs/stdenv/linux/default.nix</code> a few
times and failed. I did not feel I could make it work.</p>
<p>Instead of giving up I started this post. I logged what was failing and
why I think should be fixed to make it work. It took me 4 days to finish
it! I got <code>libgcc_s.so.1</code> updated in the end!</p>
<p>Here is the final bootstrap tree I arrived at (<a href="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/08-nixpkgs-bootstrap-tree.svg">enlarge</a>):</p>
<pre><code>$ nix-store --query --graph $(nix-instantiate -A stdenv) |
    grep -vP '[.](sh|tar|bash|patch|c|diff)|bash52-0|wrapper|hook|expand-response-params' |
    dot -Tsvg &gt; /tmp/a.svg; firefox /tmp/a.svg</code></pre>
<p><img src="http://trofi.github.io/posts.data/275-nixpkgs-bootstrap-deep-dive/08-nixpkgs-bootstrap-tree.svg" /></p>
<p>Have fun!</p>

<div class="info">
    Posted on January  5, 2023 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Thu, 05 Jan 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/275-nixpkgs-bootstrap-deep-dive.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>xmms2 FLAC hangup fix</title>
    <link>http://trofi.github.io/posts/274-xmms2-flac-hangup-fix.html</link>
    <description><![CDATA[<p>Over past few months I noiced that <code>xmms2</code> started getting stuck on some
songs in my playlist. The typical symptom is lack of sound after the
song finished. There was no (expected!) switch to the next song. Instead
existing playlist entry went to out-of-duration playtime report:</p>
<pre><code>$ xmms2 status
Playing: Artist - Song: 25:06 of 08:01</code></pre>
<p>In this case <code>08:01</code> is the song length and <code>25:06</code> is the offset within
that song (should never be more than <code>08:01</code> in this case).</p>
<p>When <code>xmms2</code> was in this state CPU load was still low as if it played
song just fine. Manual attempts to seek within this song
(<code>$ xmms2 seek +10</code>) would instantly switch it to the next one as of
just finished.</p>
<p>I was not sure when exactly this effect started or what types of songs
it affects. Anecdotally it felt like 1-2% of songs were affected. And
they were always the same songs. That hinted at recent decoding changes
somewhere.</p>
<p>I looked up the shortest song that exhibited the problem. Best I could
find was a 3 minutes 57 seconds long sample. Not too long, but long
enough to avoid whole system bisection.</p>
<p>Instead I ran <code>./xmms2d --verbose</code> and started playing the sample
problematic. Once it was over 4 minutes <code>xmms2</code>’s debug logs started
growing rapidly with error like:</p>
<pre><code>11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER
...
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH
...
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER
...
11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH</code></pre>
<p>That was a good enough hint that <code>FLAC</code> decoding state machine did not
feel well. Glancing at <code>xiph/flac</code> issue tracker I found seemingly
similar <a href="https://github.com/xiph/flac/issues/487">Issue #487</a>. There
someone found that <code>flac-1.4.0</code> release became more picky around stream
validation. The report also provides numeros commands to validate and
re-encode <code>.flac</code> files using <code>flac</code> command. Very handy!</p>
<p>Unfortunately my files all passed <code>flac -t</code> validation and did not
complain about internal inconsistencies. I means I I probably had a
different problem. But that gave me a hint that maybe it’s related to
<code>flac</code> library update in my system. I downgraded <code>1.4.2</code> down to <code>1.3.4</code>
got my hangups disappeared!</p>
<p><code>xmms2</code>’s internal architecture is simple: it handles data streams as
explicit objects by passing them through chain of plugins. Each plugin
reads data from previous chained plugin and writes data to next chained
plugin. The plugin itself can perform data transformation as well.</p>
<p>For example to playback a <code>.flac</code> file one needs a few <code>xmms2</code> plugins:</p>
<ul>
<li><code>file</code> plugin to read files from disk)</li>
<li><code>flac</code> plugin to convert <code>FLAC</code> stream to simpler <code>PCM</code> stream</li>
<li><code>pulse</code> plugin to write <code>PCM</code> into a sound subsystem.</li>
</ul>
<p>Such a stream plugin abstraction makes it trivial to explore ways
of individual file formats handling in <code>xmms2</code>. For example this
is our (yet unfixed) full
<a href="https://github.com/xmms2/xmms2-devel/blob/9bfbc687fc586c56443f9ea296988eefd759c30d/src/plugins/flac/flac.c">flac plugin code</a>.</p>
<p>A few things to note there:</p>
<ul>
<li><code>xmms_flac_data_t</code> type defines our decoder context</li>
<li><code>xmms_flac_plugin_setup()</code> registers plugin to handle <code>audio/x-flac</code> files</li>
<li><code>methods.init = xmms_flac_init;</code> and <code>methods.read = xmms_flac_read;</code> define
callbacks to implement <code>FLAC</code> stream decoding.</li>
</ul>
<p><code>xmms_flac_init()</code> attaches <code>FLAC</code> handler to a new stream. It creates
<code>FLAC</code> decoder and defines it’s output stream type (like 16-bit <code>PCM</code>):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> gboolean</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>xmms_flac_init <span class="op">(</span>xmms_xform_t <span class="op">*</span>xform<span class="op">)</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    xmms_flac_data_t <span class="op">*</span>data<span class="op">;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    data <span class="op">=</span> g_new0 <span class="op">(</span>xmms_flac_data_t<span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    data<span class="op">-&gt;</span>flacdecoder <span class="op">=</span> FLAC__stream_decoder_new <span class="op">();</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    init_status <span class="op">=</span> FLAC__stream_decoder_init_stream <span class="op">(</span>data<span class="op">-&gt;</span>flacdecoder<span class="op">,</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_read<span class="op">,</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_seek<span class="op">,</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_tell<span class="op">,</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_length<span class="op">,</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_eof<span class="op">,</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_write<span class="op">,</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_metadata<span class="op">,</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>                                                    flac_callback_error<span class="op">,</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>                                                    xform<span class="op">);</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>data<span class="op">-&gt;</span>bits_per_sample <span class="op">==</span> <span class="dv">16</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        sample_fmt <span class="op">=</span> XMMS_SAMPLE_FORMAT_S16<span class="op">;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    xmms_xform_outdata_type_add <span class="op">(</span>xform<span class="op">,</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_MIMETYPE<span class="op">,</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>                                 <span class="st">&quot;audio/pcm&quot;</span><span class="op">,</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_FMT_FORMAT<span class="op">,</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>                                 sample_fmt<span class="op">,</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_FMT_CHANNELS<span class="op">,</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>                                 data<span class="op">-&gt;</span>channels<span class="op">,</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_FMT_SAMPLERATE<span class="op">,</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>                                 data<span class="op">-&gt;</span>sample_rate<span class="op">,</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>                                 XMMS_STREAM_TYPE_END<span class="op">);</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    data<span class="op">-&gt;</span>buffer <span class="op">=</span> g_string_new <span class="op">(</span>NULL<span class="op">);</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> TRUE<span class="op">;</span></span></code></pre></div>
<p>Many lines of code, but it’s just 2 function calls with many details
passed around as indivifual function aprameters. Incidenally <code>flac</code>
library itself has a similar API: we pass in a decoder context object
to <code>FLAC__stream_decoder_init_stream()</code> and a bunch of callback to read
input and write output.</p>
<p>In case of our error message spam it all came from this
<code>flac_callback_error()</code> definition:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>flac_callback_error <span class="op">(</span><span class="dt">const</span> FLAC__StreamDecoder <span class="op">*</span>flacdecoder<span class="op">,</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>                     FLAC__StreamDecoderErrorStatus status<span class="op">,</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>                     <span class="dt">void</span> <span class="op">*</span>client_data<span class="op">)</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    xmms_xform_t <span class="op">*</span>data <span class="op">=</span> <span class="op">(</span>xmms_xform_t <span class="op">*)</span> client_data<span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    g_return_if_fail <span class="op">(</span>flacdecoder<span class="op">);</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    g_return_if_fail <span class="op">(</span>data<span class="op">);</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    XMMS_DBG <span class="op">(</span><span class="st">&quot;</span><span class="sc">%s</span><span class="st">&quot;</span><span class="op">,</span> FLAC__StreamDecoderErrorStatusString<span class="op">[</span>status<span class="op">]);</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>11:45:35 DEBUG: ../src/plugins/flac/flac.c:341: FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC</code>
error messages we saw earlier originate here.</p>
<p><code>flac</code> plugin tried to read data from seemingly broken (or finished?)
stream again and again. Here is the full <code>flac_callback_read</code> definition:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> FLAC__StreamDecoderReadStatus</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>flac_callback_read <span class="op">(</span><span class="dt">const</span> FLAC__StreamDecoder <span class="op">*</span>flacdecoder<span class="op">,</span> FLAC__byte buffer<span class="op">[],</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">size_t</span> <span class="op">*</span>bytes<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>client_data<span class="op">)</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    xmms_xform_t <span class="op">*</span>xform <span class="op">=</span> <span class="op">(</span>xmms_xform_t <span class="op">*)</span> client_data<span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    xmms_error_t error<span class="op">;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    gint ret<span class="op">;</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    g_return_val_if_fail <span class="op">(</span>xform<span class="op">,</span> FLAC__STREAM_DECODER_READ_STATUS_ABORT<span class="op">);</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> xmms_xform_read <span class="op">(</span>xform<span class="op">,</span> <span class="op">(</span>gchar <span class="op">*)</span>buffer<span class="op">,</span> <span class="op">*</span>bytes<span class="op">,</span> <span class="op">&amp;</span>error<span class="op">);</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>ret <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM<span class="op">;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>ret <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> FLAC__STREAM_DECODER_READ_STATUS_ABORT<span class="op">;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">*</span>bytes <span class="op">=</span> ret<span class="op">;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> FLAC__STREAM_DECODER_READ_STATUS_CONTINUE<span class="op">;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Not getting too much into <code>FLAC</code> state machine can you spot anything
suspicious about this function?</p>
<p>The idea of this function is simple: read a few bytes from
<code>xmms_xform_t *</code> stream via <code>xmms_xform_read()</code> and write it into the
<code>buffer</code> byte array.</p>
<p><code>buffer</code> output array is <code>*bytes</code> bytes long. How do we tell if we
managed to read less data than needed to <code>flac</code> library? Here is what
<code>FLAC/stream_decoder.h</code> <a href="https://github.com/xiph/flac/blob/master/include/FLAC/stream_decoder.h#L475">has to say</a> about it:</p>
<pre><code>/** Signature for the read callback.
 *
 *  A function pointer matching this signature must be passed to
 *  FLAC__stream_decoder_init*_stream(). The supplied function will be
 *  called when the decoder needs more input data.  The address of the
 *  buffer to be filled is supplied, along with the number of bytes the
 *  buffer can hold.  The callback may choose to supply less data and
 *  modify the byte count but must be careful not to overflow the buffer.
 *  The callback then returns a status code chosen from
 *  FLAC__StreamDecoderReadStatus.
 *
 * Here is an example of a read callback for stdio streams:
 * \code
 * FLAC__StreamDecoderReadStatus read_cb(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)
 * {
 *   FILE *file = ((MyClientData*)client_data)-&gt;file;
 *   if(*bytes &gt; 0) {
 *     *bytes = fread(buffer, sizeof(FLAC__byte), *bytes, file);
 *     if(ferror(file))
 *       return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
 *     else if(*bytes == 0)
 *       return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;
 *     else
 *       return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;
 *   }
 *   else
 *     return FLAC__STREAM_DECODER_READ_STATUS_ABORT;
 * }
 * \endcode
 *
 * \note In general, FLAC__StreamDecoder functions which change the
 * state should not be called on the \a decoder while in the callback.
 *
 * \param  decoder  The decoder instance calling the callback.
 * \param  buffer   A pointer to a location for the callee to store
 *                  data to be decoded.
 * \param  bytes    A pointer to the size of the buffer.  On entry
 *                  to the callback, it contains the maximum number
 *                  of bytes that may be stored in \a buffer.  The
 *                  callee must set it to the actual number of bytes
 *                  stored (0 in case of error or end-of-stream) before
 *                  returning.
 * \param  client_data  The callee's client data set through
 *                      FLAC__stream_decoder_init_*().
 * \retval FLAC__StreamDecoderReadStatus
 *    The callee's return status.  Note that the callback should return
 *    \c FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM if and only if
 *    zero bytes were read and there is no more data to be read.
 */
typedef FLAC__StreamDecoderReadStatus (*FLAC__StreamDecoderReadCallback)(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data);</code></pre>
<p>While a bit verbose the documentation string even has the example
implementation of a sinble callback almost identical to <code>xmms2</code>’s
use case.</p>
<p>Note: <code>*bytes</code> is unconditionally(ish) written back in the example
above. We always signal library what we passed back regardless of
encountered errors. It’s because <code>flac</code> knows how to skip over
undecodable metadata. Thus it’s a resonable behaviour to
return <code>FLAC__STREAM_DECODER_READ_STATUS_ABORT</code> and still expect more
reads from this stream in search of decodable next frame.</p>
<p>In comparison <code>xmms2</code> did not update <code>*bytes</code> in case of end of stream
and in case of an error. As a result <code>flac</code> decoder was stuck running
the callback again and again getting the same <code>buffer</code> back. <code>buffer</code>
possibly contained uninitialized contents of <code>buffer</code> as it if was just
read them from the input stream.</p>
<p>Once understood the fix was <a href="https://github.com/xmms2/xmms2-devel/commit/39d31d4a7ae463f3df7a09915fe61e2574f4d95f">trivial</a>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/plugins/flac/flac.c</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/plugins/flac/flac.c</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -138,26 +138,28 @@ xmms_flac_plugin_setup (xmms_xform_plugin_t *xform_plugin)</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a> static FLAC__StreamDecoderReadStatus</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a> flac_callback_read (const FLAC__StreamDecoder *flacdecoder, FLAC__byte buffer[],</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                     size_t *bytes, void *client_data)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        xmms_xform_t *xform = (xmms_xform_t *) client_data;</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        xmms_error_t error;</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        gint ret;</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>        g_return_val_if_fail (xform, FLAC__STREAM_DECODER_READ_STATUS_ABORT);</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        ret = xmms_xform_read (xform, (gchar *)buffer, *bytes, &amp;error);</span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>        if (ret == 0) {</span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="va">+               *bytes = 0;</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>                return FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM;</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        } else if (ret &lt; 0) {</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="va">+               *bytes = 0;</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>                return FLAC__STREAM_DECODER_READ_STATUS_ABORT;</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        } else {</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>                *bytes = ret;</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>                return FLAC__STREAM_DECODER_READ_STATUS_CONTINUE;</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>After that I saw no hangups in <code>.flac</code> files so far.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>xmms2</code>’s plugins are usually very simple to read and implement.</p>
<p>In case of more complex problems <code>xmms2d --verbose</code> flag is useful to
enable <code>XMMS_DBG()</code> debugging output. If nothing else it should help
finding out exact plugins used to playback a problematic file.</p>
<p><code>flac-1.4.0</code> subtly changed the recovery code around invalid streams and
managed to expose long standing bug in <code>xmms2</code> code base. Luckily it was
trivial to fix once identified.</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 30, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Fri, 30 Dec 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/274-xmms2-flac-hangup-fix.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>xlibsWrapper yak</title>
    <link>http://trofi.github.io/posts/273-xlibsWrapper-yak.html</link>
    <description><![CDATA[<p>During one of the raids on <a href="http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html">stale nixpkgs packages</a>
I found <code>Xaw3d</code> package which was present in two forms in <code>nixpkgs</code>:
<code>Xaw3d</code> and <code>xorg.libXaw3d</code>. Both were based on <code>libXaw3d</code> <code>Xorg</code>
package of the same version and used different definitions of the
package.</p>
<p><code>xorg.libXaw3d</code> was used by a single broken <code>timedoctor</code> package.
Thus it ws easy to just delete both:</p>
<ul>
<li><code>timedoctor</code> removal: <a href="https://github.com/NixOS/nixpkgs/pull/195251">PR 195251</a></li>
<li><code>xorg.libXaw3d</code> removal: <a href="https://github.com/NixOS/nixpkgs/pull/195254">PR 195254</a></li>
</ul>
<p>Duplicate packages are very confusing. New namespaces like <code>xorg.*</code> make
it very easy to introduce subtly different packages.</p>
<p>A while later I attempted to patch <code>xorg.libXfont2</code> package via an
override locally:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  <span class="va">xorg</span> <span class="op">=</span> prev.xorg.overrideScope' <span class="op">(</span><span class="va">f</span><span class="op">:</span> <span class="va">p</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">libXfont2</span> <span class="op">=</span> p.libXfont2.overrideAttrs <span class="op">(</span><span class="va">oa</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>      <span class="va">patches</span> <span class="op">=</span> <span class="op">(</span>oa.patches <span class="kw">or</span> <span class="op">[])</span> <span class="op">++</span> <span class="op">[</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="ss">../libXfont2/nofollow.patch</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>      <span class="op">];</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">});</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">});</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That was supposed to work. It didn’t: <code>pulseaudio</code> expression became
invalid and complained about missing <code>xorg.xlibsWrapper</code> attribute.
Despite the fact I seemingly did not touch it in my expression.</p>
<p>Here is the <code>xorg</code> attribute definition:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>   <span class="co"># somewhere in pkgs/top-level/all-packages.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>   <span class="co"># ...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>   xorg = recurseIntoAttrs <span class="op">((</span>lib.callPackageWith __splicedPackages <span class="ss">../servers/x11/xorg</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>   <span class="op">})</span>.overrideScope' <span class="op">(</span>lib.callPackageWith __splicedPackages <span class="ss">../servers/x11/xorg/overrides.nix</span> <span class="op">{</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="kw">inherit</span> <span class="op">(</span>darwin.apple_sdk.frameworks<span class="op">)</span> ApplicationServices Carbon Cocoa<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     <span class="kw">inherit</span> <span class="op">(</span>darwin.apple_sdk.libs<span class="op">)</span> Xplugin<span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>     <span class="kw">inherit</span> <span class="op">(</span>buildPackages.darwin<span class="op">)</span> bootstrap_cmds<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     <span class="va">udev</span> <span class="op">=</span> <span class="kw">if</span> stdenv.isLinux <span class="kw">then</span> udev <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>     <span class="va">libdrm</span> <span class="op">=</span> <span class="kw">if</span> stdenv.isLinux <span class="kw">then</span> libdrm <span class="kw">else</span> <span class="cn">null</span><span class="op">;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>     <span class="va">abiCompat</span> <span class="op">=</span> config.xorg.abiCompat <span class="co"># `config` because we have no `xorg.override`</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>       <span class="kw">or</span> <span class="op">(</span><span class="kw">if</span> stdenv.isDarwin <span class="kw">then</span> <span class="st">&quot;1.18&quot;</span> <span class="kw">else</span> <span class="cn">null</span><span class="op">);</span> <span class="co"># 1.19 needs fixing on Darwin</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>   <span class="op">})</span> <span class="op">//</span> <span class="op">{</span> <span class="kw">inherit</span> xlibsWrapper<span class="op">;</span> <span class="op">}</span> <span class="op">)</span>;</span></code></pre></div>
<p>Note that unusual <code>// { inherit xlibsWrapper; }</code> last minute attribute
addition. It injects <code>xlibsWrapper</code> attribute after <code>xorg</code> was fully
constructed with all it’s overrides. Attempt to redefine <code>xorg</code>
attribute (as I did in an overlay above) throws <code>xlibsWrapper</code> attribute
away. It has to be added back explicitly. I would say it’s unexpected.</p>
<p>More interestingly not every package used <code>xorg.xlibsWrapper</code> form to
refer to the thing! Most packages used <code>xlibsWrapper</code> directly. Thus
I removed <code>xorg.xlibsWrapper</code> in favour of a global one in
<a href="https://github.com/NixOS/nixpkgs/pull/194044">PR 194044</a>.
The fix had to adjust only 5 packages (<code>gnome2.libgnomeui</code>, <code>pulseaudio</code>,
<code>ted</code>,<code>vlc</code>,<code>xine-ui</code>) and turned <code>xorg</code> into a proper overridable
scope:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/top-level/all-packages.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/top-level/all-packages.nix</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -24104,21 +24104,21 @@ with pkgs;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>   # have created a cycle.</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>   xorg = recurseIntoAttrs ((lib.callPackageWith __splicedPackages ../servers/x11/xorg {</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>   }).overrideScope' (lib.callPackageWith __splicedPackages ../servers/x11/xorg/overrides.nix {</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>     inherit (darwin.apple_sdk.frameworks) ApplicationServices Carbon Cocoa;</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>     inherit (darwin.apple_sdk.libs) Xplugin;</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>     inherit (buildPackages.darwin) bootstrap_cmds;</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>     udev = if stdenv.isLinux then udev else null;</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>     libdrm = if stdenv.isLinux then libdrm else null;</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>     abiCompat = config.xorg.abiCompat # `config` because we have no `xorg.override`</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>       or (if stdenv.isDarwin then &quot;1.18&quot; else null); # 1.19 needs fixing on Darwin</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="st">-  }) // { inherit xlibsWrapper; } );</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="va">+  }));</span></span></code></pre></div>
<p>So much better now.</p>
<p>And then I looked at <code>xlibsWrapper</code> definition out of curiosity:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  <span class="co"># somewhere in pkgs/top-level/all-packages.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Avoid using this. It isn't really a wrapper anymore, but we keep the name.</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  xlibsWrapper = callPackage <span class="ss">../development/libraries/xlibs-wrapper</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">packages</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      freetype fontconfig xorg.xorgproto xorg.libX11 xorg.libXt</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>      xorg.libXft xorg.libXext xorg.libSM xorg.libICE</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span>;</span></code></pre></div>
<pre><code># somewhere in pkgs/development/libraries/xlibs-wrapper/default.nix
{lib, stdenv, packages}:

stdenv.mkDerivation {
  name = &quot;xlibs-wrapper&quot;;

  dontBuild = true;

  installPhase = &quot;mkdir -p $out&quot;;
  unpackPhase = &quot;sourceRoot=.&quot;;

  propagatedBuildInputs = packages;

  preferLocalBuild = true;

  # For compatability with XFree86.
  passthru.buildClientLibs = true;

  meta = {
    platforms = lib.platforms.unix;
  };
}</code></pre>
<p>The above says that:</p>
<ul>
<li>it’s a deprecated package (it got “deprecated” comment in 2015)</li>
<li>it’s not a wrapper. Normally <code>wrapper</code> implied binary shell wrapper
script in <code>nixpkgs</code>. This one is nothing like that.</li>
<li>it’s just an alias for build-time dependencies for some of Xorg libraries.</li>
</ul>
<p><code>xlibsWrapper</code> is a remnant of the far past when Xorg became modular
(around 7.0 version in <a href="https://github.com/NixOS/nixpkgs/commit/ea95a0509ecde0208d26cea272bd8fc5136dd4be">2005</a>)
where it’s single tarball release was split into ~200 smaller packages.
<code>nixpkgs</code> kept this transitional package to ease porting to the new set
of packages.</p>
<p>To delete <code>xlibsWrapper</code> completely I filed
<a href="https://github.com/NixOS/nixpkgs/issues/194054">PR 194054</a> to track and
update packages to set of actually used libraries one by one. 3 months
(and 80 PRs) later I can finaly say that all users were moved to finer
grained set of libraries!</p>
<p><code>diffoscope</code> helped me a lot while working on the transition: if binaries
before and after the change look the the same then chances are high I did
not break any users.</p>
<p>Another yak became a bit less hairy.</p>
<p>There is still a lot to do: I think it’s time to remove <code>xorg.*</code>
attribute set and merge individual packages back into the top-level
attribute set. This will turn <code>xorg.*</code> into normal packages and will
allow updating them just like anything else. I filed
<a href="https://github.com/NixOS/nixpkgs/issues/207978">Issue 207978</a> to track
the effort.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nixpkgs</code> is full of bits with accidental complexity like <code>xlibsWrapper</code>
or autogenerated set of <code>xorg</code> packages. Or long deprecated packages
like <code>llvm-5</code> (it still has a few reverse dependencies believe it or
not). They are usually easy to fix, just take some effport to sort out
all the numerous users.</p>
<p>Fun fact: it takes about 3 months of slow pace to sort out 80 packages.
Something like 1 package a day. Sounds like a good estimate of large-scale
changes.</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 27, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Tue, 27 Dec 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/273-xlibsWrapper-yak.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>peeking at stale nixpkgs packages</title>
    <link>http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html</link>
    <description><![CDATA[<p>As a <code>nixpkgs</code> user I want it to help me solve my and others’ problems.
The upstream package bugs are frequently already fixed upstream and we
only need to update to get <code>nixpkgs</code> into better state.</p>
<p>How many outdated packages does my system have? Can I just list them all
and maybe work on one or two to update them?</p>
<h2 id="on-repology">On repology</h2>
<p>Probably the most popular package info database is
<a href="https://repology.org/" class="uri">https://repology.org/</a>. It contains package details across various
package repositories. <code>nixpkgs</code> is not an exception.</p>
<p>Let’s have a look at example <code>re2c</code> package.
<code>repology</code> <a href="https://repology.org/project/re2c/versions">page</a> shows us a
few things:</p>
<ul>
<li><code>3.0</code> is the latest release available</li>
<li><code>nixpkgs-unstable</code> (<code>master</code> branch), <code>22.05</code> and <code>21.11</code>
releases do provide latest <code>3.0</code>.</li>
<li><code>nixpkgs-stable-21.11</code> (2 releases back) provides older <code>2.2</code> version</li>
<li><code>Debian unstable</code> and <code>12</code> release also provide latest <code>3.0</code>.</li>
<li><code>Fedora rawhide</code> provides very old <code>2.1.1</code> release (whoops!)</li>
</ul>
<p><code>repology.org</code> API <a href="https://repology.org/api">provides</a> a <code>json</code>
table we can fetch and inspect directly.</p>
<p>Joining this data against the installed system should yield something
useful. Let’s see how hard it is.</p>
<p>To get data related to <code>matser</code> branch of <code>nixpkgs</code> we can filter on
<code>nix_unstable</code> repo with <code>inrepo=nix_unstable</code> parameter:</p>
<pre><code>$ curl --compressed -s \
  &quot;https://repology.org/api/v1/projects/?inrepo=nix_unstable&amp;outdated=1&quot; | jq

{
...
  &quot;a52dec&quot;: [
    {
      &quot;repo&quot;: &quot;adelie_current&quot;,
      &quot;subrepo&quot;: &quot;user&quot;,
      &quot;srcname&quot;: &quot;a52dec&quot;,
      &quot;binname&quot;: &quot;a52dec-dev&quot;,
      &quot;visiblename&quot;: &quot;a52dec-dev&quot;,
      &quot;version&quot;: &quot;0.8.0&quot;,
      &quot;maintainers&quot;: [
        &quot;me@zv.io&quot;
      ],
      &quot;licenses&quot;: [
        &quot;GPL-2.0+&quot;
      ],
      &quot;summary&quot;: &quot;Library for decoding ATSC A/52 streams (development files)&quot;,
      &quot;status&quot;: &quot;newest&quot;,
      &quot;origversion&quot;: &quot;0.8.0-r0&quot;
    },
    ...
    {
      &quot;repo&quot;: &quot;nix_unstable&quot;,
      &quot;name&quot;: &quot;a52dec&quot;,
      &quot;visiblename&quot;: &quot;a52dec&quot;,
      &quot;version&quot;: &quot;0.7.4&quot;,
      &quot;maintainers&quot;: [
        &quot;fallback-mnt-nix@repology&quot;
      ],
      &quot;licenses&quot;: [
        &quot;GPL-2.0-or-later&quot;
      ],
      &quot;summary&quot;: &quot;ATSC A/52 stream decoder&quot;,
      &quot;status&quot;: &quot;outdated&quot;,
      &quot;origversion&quot;: null
    },
  ...
  &quot;azure-cli&quot;: [
    {
      &quot;repo&quot;: &quot;scoop&quot;,
      &quot;subrepo&quot;: &quot;main&quot;,
      &quot;binname&quot;: &quot;azure-cli&quot;,
      &quot;visiblename&quot;: &quot;azure-cli&quot;,
      &quot;version&quot;: &quot;2.43.0&quot;,
      &quot;licenses&quot;: [
        &quot;MIT&quot;
      ],
      &quot;status&quot;: &quot;newest&quot;,
      &quot;origversion&quot;: null
    },
  ...
    }
  ]
}</code></pre>
<p>I piped the output through <code>jq</code> to make it slightly more readable.</p>
<p>We see a lot here:</p>
<ul>
<li><p><code>repology</code>’s <strong>project name</strong> comes as a key here</p></li>
<li><p><strong>values</strong> are arrays of per-repository details for package status:
repository name, package name, version, version status and so on.</p></li>
<li><p><strong>status</strong> field tells us outright if the package is stale or not.</p></li>
<li><p>data is paginated: only the range from <code>"a52dec"</code> to <code>"azure-cli"</code> is
covered.</p></li>
</ul>
<p>To get more data we can call the same API by passing the project key
as part of <code>projects/</code> path to continue from there:</p>
<pre><code># page 1:
$ curl --compressed -s \
  &quot;https://repology.org/api/v1/projects/?inrepo=nix_unstable&amp;outdated=1&quot; &gt;p1
# page2
$ curl --compressed -s \
  &quot;https://repology.org/api/v1/projects/azure-cli/?inrepo=nix_unstable&amp;outdated=1&quot; &gt;p2

$ jq --sort-keys --raw-output 'keys|last' &lt;p1
azure-cli
$ jq --sort-keys --raw-output 'keys|last' &lt;p2
cli11</code></pre>
<p>Now we can build the list of outdated packages in <code>nixpkgs</code>. I’ll use
the following <code>jq</code> hack to pick latest-everywhere vs latest-in-nixpkgs:</p>
<pre><code>$ jq --sort-keys '
map_values({
  &quot;newest&quot;: map(
    select(.status|in({&quot;newest&quot;:1}))
  )|first(.[].version),
  &quot;nix_unstable_version&quot;: map(
    select(.repo|in({&quot;nix_unstable&quot;:1}))
  )|first(.[].version),
  &quot;nix_name&quot;: map(
    select(.repo|in({&quot;nix_unstable&quot;:1}))
  )|first(.[].name),
})' &lt; p1 | jq --sort-keys '
  map_values(
    &quot;\(.nix_name): \(.nix_unstable_version) -&gt; \(.newest)&quot;
  )
'

{
  &quot;1password-cli&quot;: &quot;1password-cli: 2.11.0 -&gt; 2.12.0&quot;,
  &quot;389-ds-base&quot;: &quot;389-ds-base: 2.3.0 -&gt; 2.3.1&quot;,
  &quot;7kaa&quot;: &quot;7kaa: 2.15.4p1 -&gt; 2.15.5&quot;,
  &quot;a52dec&quot;: &quot;a52dec: 0.7.4 -&gt; 0.8.0&quot;,
  &quot;abuse&quot;: &quot;abuse: 0.8 -&gt; 0.9.1&quot;,
  &quot;ace-framework&quot;: &quot;ace: 7.0.8 -&gt; 7.0.11&quot;,
  &quot;acorn&quot;: &quot;acorn: 0.4.2 -&gt; 8.8.1&quot;,
  &quot;acpica&quot;: &quot;acpica-tools: 20220331 -&gt; 20221022&quot;,
  &quot;acpitool&quot;: &quot;acpitool: 0.5.1 -&gt; 0.5.2&quot;,
  &quot;actor-framework&quot;: &quot;actor-framework: 0.18.5 -&gt; 0.18.6&quot;,
  ...
  &quot;azure-cli&quot;: &quot;azure-cli: 2.37.0 -&gt; 2.43.0&quot;
}</code></pre>
<p>You should be able to come up with a more reasonable query.</p>
<p>The above quary is not distribution-specific: you can swap
<code>nix_unstalble</code> for your distro of choice to fish for things you care
about.</p>
<p>Or you can use web UI to skim through the same data:
<a href="https://repology.org/projects/?inrepo=nix_unstable&amp;outdated=1" class="uri">https://repology.org/projects/?inrepo=nix_unstable&amp;outdated=1</a>.</p>
<p>Web UI is not very handy to grep through as it takes multiple pages.</p>
<h2 id="on-derivations">On derivations</h2>
<p>The above hack gives us the whole list of stale packages in <code>nixpkgs</code>.
I would still still like to narrow it down to set of packages relevant
to my system.</p>
<p>Luckily the whole <code>NixOS</code> system is normally described by a single build
“rule” (a single <code>derivation</code>). By inspecting that we can find all the
used packages:</p>
<pre><code>$ nix show-derivation --derivation -r $(nix-instantiate '&lt;nixpkgs/nixos&gt;' -A system)

{
...
  &quot;/nix/store/1vb6bjnkrwyj94d87ps1z9wa3i1fzia8-re2c-3.0.drv&quot;: {
    &quot;args&quot;: [
      &quot;-e&quot;,
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;
    ],
    &quot;builder&quot;: &quot;/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash&quot;,
    &quot;env&quot;: {
      &quot;buildInputs&quot;: &quot;&quot;,
      &quot;builder&quot;: &quot;/nix/store/4xw8n979xpivdc46a9ndcvyhwgif00hz-bash-5.1-p16/bin/bash&quot;,
      &quot;cmakeFlags&quot;: &quot;&quot;,
      &quot;configureFlags&quot;: &quot;&quot;,
      &quot;depsBuildBuild&quot;: &quot;&quot;,
      &quot;depsBuildBuildPropagated&quot;: &quot;&quot;,
      &quot;depsBuildTarget&quot;: &quot;&quot;,
      &quot;depsBuildTargetPropagated&quot;: &quot;&quot;,
      &quot;depsHostHost&quot;: &quot;&quot;,
      &quot;depsHostHostPropagated&quot;: &quot;&quot;,
      &quot;depsTargetTarget&quot;: &quot;&quot;,
      &quot;depsTargetTargetPropagated&quot;: &quot;&quot;,
      &quot;doCheck&quot;: &quot;1&quot;,
      &quot;doInstallCheck&quot;: &quot;&quot;,
      &quot;enableParallelBuilding&quot;: &quot;1&quot;,
      &quot;enableParallelChecking&quot;: &quot;1&quot;,
      &quot;mesonFlags&quot;: &quot;&quot;,
      &quot;name&quot;: &quot;re2c-3.0&quot;,
      &quot;nativeBuildInputs&quot;: &quot;/nix/store/nxxd4bhq41ix50n532vkdx6vp5p5hir3-hook /nix/store/al6g1zbk8li6p8mcyp0h60d08jaahf8c-python3-3.10.9&quot;,
      &quot;out&quot;: &quot;/nix/store/5mf1k9jy94ji20xcy77z58qaw7w4izrp-re2c-3.0&quot;,
      &quot;outputs&quot;: &quot;out&quot;,
      &quot;patches&quot;: &quot;&quot;,
      &quot;pname&quot;: &quot;re2c&quot;,
      &quot;preCheck&quot;: &quot;patchShebangs run_tests.py\n&quot;,
      &quot;propagatedBuildInputs&quot;: &quot;&quot;,
      &quot;propagatedNativeBuildInputs&quot;: &quot;&quot;,
      &quot;src&quot;: &quot;/nix/store/sl98y4sk9vzxinydlbc9nyzlqr5az8sj-source&quot;,
      &quot;stdenv&quot;: &quot;/nix/store/cp65c8nk29qq5cl1wyy5qyw103cwmax7-stdenv-linux&quot;,
      &quot;strictDeps&quot;: &quot;&quot;,
      &quot;system&quot;: &quot;x86_64-linux&quot;,
      &quot;version&quot;: &quot;3.0&quot;
    },
    &quot;inputDrvs&quot;: {
      &quot;/nix/store/6z1jfnqqgyqr221zgbpm30v91yfj3r45-bash-5.1-p16.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/7k290ai5pfv6zw25ymank65dks86g64h-source.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/ap9g09fxbicj836zm88d56dn3ff4clxl-stdenv-linux.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/b2p151ilwqpd47fbmzz50a5cmj12ixbf-hook.drv&quot;: [
        &quot;out&quot;
      ],
      &quot;/nix/store/vgpv5w9lxnrxkdvb4hx1llxp811fd8pk-python3-3.10.9.drv&quot;: [
        &quot;out&quot;
      ]
    },
    &quot;inputSrcs&quot;: [
      &quot;/nix/store/9krlzvny65gdc8s7kpb6lkx8cd02c25b-default-builder.sh&quot;
    ],
    &quot;outputs&quot;: {
      &quot;out&quot;: {
        &quot;path&quot;: &quot;/nix/store/5mf1k9jy94ji20xcy77z58qaw7w4izrp-re2c-3.0&quot;
      }
    },
    &quot;system&quot;: &quot;x86_64-linux&quot;
  },
...</code></pre>
<p>Here one of numerous derivations used to produce final <code>system</code>
derivation is <code>re2c</code>. Most derivations have <code>pname</code> and <code>version</code> in
their environemnts. Thus the simplest hack would be to extract them with
<code>jq</code> again:</p>
<pre><code>$ nix show-derivation --derivation -r $(nix-instantiate '&lt;nixpkgs/nixos&gt;' -A system) |
    jq -r '.[] | &quot;\(.env.pname) \(.env.version)&quot;' | fgrep -v &quot;null&quot; | sort -u

a52dec 0.7.4
aalib 1.4rc5
abseil-cpp 20210324.2
accounts-qt 1.16
...
re2c 3.0</code></pre>
<h2 id="collecting-list-of-outdated-packages">Collecting list of outdated packages</h2>
<p>Now we have everything to match our system against the stale list. I
used simple <code>grep</code> for that. Full list of used scripts is at
<a href="https://discourse.nixos.org/t/a-tool-for-looking-if-installed-packages-are-up-to-date/21630/6" class="uri">https://discourse.nixos.org/t/a-tool-for-looking-if-installed-packages-are-up-to-date/21630/6</a>.</p>
<p>The typical output looks like that:</p>
<pre><code>$ ./print_local_outdated.bash | nl
     1  # installed(staging): unstable(master) -&gt; latest(others)
     2  a52dec-0.7.4:   &quot;a52dec&quot;: &quot;a52dec: 0.7.4 -&gt; 0.8.0&quot;,
     3  afdko-3.9.0:   &quot;afdko&quot;: &quot;python3.9-afdko: 3.9.0 -&gt; 3.9.1&quot;,
     4  alsa-lib-1.2.7.2:   &quot;alsa-lib&quot;: &quot;alsa-lib: 1.2.7.2 -&gt; 1.2.8&quot;,
     5  alsa-ucm-conf-1.2.7.1:   &quot;alsa-ucm-conf&quot;: &quot;alsa-ucm-conf: 1.2.7.1 -&gt; 1.2.8&quot;,
     6  appstream-0.15.5:   &quot;appstream&quot;: &quot;appstream-qt: 0.15.5 -&gt; 0.15.6&quot;,
...
   223  xhost-1.0.8:   &quot;xhost&quot;: &quot;xhost: 1.0.8 -&gt; 1.0.9&quot;,
   224  xkbcomp-1.4.5:   &quot;xkbcomp&quot;: &quot;xkbcomp: 1.4.5 -&gt; 1.4.6&quot;,
   225  xkeyboard-config-2.33:   &quot;xkeyboard-config&quot;: &quot;xkeyboard-config: 2.33 -&gt; 2.37&quot;,
   226  xlsclients-1.1.4:   &quot;xlsclients&quot;: &quot;xlsclients: 1.1.4 -&gt; 1.1.5&quot;,
   227  xmlrpc-c-1.51.07:   &quot;xmlrpc-c&quot;: &quot;xmlrpc-c: 1.51.07 -&gt; 1.51.08&quot;,
   228  xorgproto-2021.5:   &quot;xorgproto&quot;: &quot;xorgproto: 2021.5 -&gt; 2022.2&quot;,
   229  xorg-server-1.20.14:   &quot;xorg-server&quot;: &quot;xorg-server: 1.20.14 -&gt; 21.1.6&quot;,
   230  xprop-1.2.5:   &quot;xprop&quot;: &quot;xprop: 1.2.5 -&gt; 1.2.6&quot;,
   231  xrandr-1.5.1:   &quot;xrandr&quot;: &quot;xrandr: 1.5.1 -&gt; 1.5.2&quot;,
   232  xset-1.2.4:   &quot;xset&quot;: &quot;xset: 1.2.4 -&gt; 1.2.5&quot;,
   233  xsetroot-1.1.2:   &quot;xsetroot&quot;: &quot;xsetroot: 1.1.2 -&gt; 1.1.3&quot;,</code></pre>
<p>My system has at least 232 outdated packages (of 1505 detected). That is
a lot. I’m slowly going through them one by one and check why automated
upgrades do not work for them. One of the obvious examples here is <code>xorg</code>
related packages.</p>
<h2 id="next-steps">Next steps</h2>
<p>The source data that <code>repology</code> and package derivations provide
are enough to tie freshness together. My <code>jq</code> hacks don’t handle
corner cases well. Some obvious deficiencies are:</p>
<ul>
<li>packages intentionally kept as multiple versions</li>
<li>clearly wrong package versions reported by repology</li>
<li>something else?</li>
</ul>
<p>I’ll attemt to write more robust tool with friendlier UI available for
daily use.</p>
<h2 id="parting-words">Parting words</h2>
<p>Package version information exposed by <code>repology.org</code> is great. It does
not require much of data processing to get basic details of how fresh
the package version you are looking at is.</p>
<p><code>nixpkgs</code> has quite a few stale packages worth updating. If you are
thinking of contributing to <code>nixpkgs</code> then list such as this might be
a good inspiration.</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 27, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Tue, 27 Dec 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/272-peeking-at-stale-nixpkgs-packages.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>AoC of 2022</title>
    <link>http://trofi.github.io/posts/271-Aoc-of-2022.html</link>
    <description><![CDATA[<p>This year I again took part in <code>AoC</code>: <a href="https://adventofcode.com/2022" class="uri">https://adventofcode.com/2022</a>.
I published my solutions at <a href="https://github.com/trofi/AoC/tree/main/2022" class="uri">https://github.com/trofi/AoC/tree/main/2022</a>.</p>
<p>As usual problems were appearing once a day at 5AM from Dec 1 to Dec 25.
I did not get up that early. Instead my personal goal was to solve them
within 24 hours of publish time and get the source code within 4KB each.
I failed a few of them.</p>
<p>This year I again took <code>rust</code> (without <code>cargo</code>) to get some practice in
it. I think it went a bit smoother this time.</p>
<h2 id="rust-niceties-lifetime-tracking-and-error-handling">rust niceties: lifetime tracking and error handling</h2>
<p>I was more conscious of decreasing amount of data copying around.
Instead of slapping <code>.clone()</code> all over the place. <code>rust</code> is great at
tracking dangling references with lifetimes. For example in
<a href="https://adventofcode.com/2022/day/16">Day 16: Proboscidea Volcanium</a>
I encoded search space as a vector and a set of <code>&amp;str</code> “pointers”
instead of copying <code>String</code>s in:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> Expr<span class="op">&lt;</span><span class="ot">'a</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  Val(<span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="dt">isize</span>)<span class="op">,</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  Expr(<span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span>)<span class="op">,</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  Assert(<span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span><span class="op">,</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span>)<span class="op">,</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="kw">fn</span> parse<span class="op">&lt;</span><span class="ot">'a</span><span class="op">&gt;</span>(i<span class="op">:</span> <span class="op">&amp;</span><span class="ot">'a</span> <span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Vec</span><span class="op">&lt;</span>Expr<span class="op">&lt;</span><span class="ot">'a</span><span class="op">&gt;&gt;</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span></code></pre></div>
<p>I even attempted using a bit of error handling in
1-2 problems instead of <code>panic!()</code>-ing on unexpected data:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode rust"><code class="sourceCode rust"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">impl</span> <span class="bu">FromStr</span> <span class="cf">for</span> Assignment <span class="op">{</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> Err <span class="op">=</span> E<span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">fn</span> from_str(s<span class="op">:</span> <span class="op">&amp;</span><span class="dt">str</span>) <span class="op">-&gt;</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Self</span><span class="op">,</span> <span class="dt">Self</span><span class="pp">::</span><span class="cn">Err</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> numbers<span class="op">:</span> <span class="dt">Result</span><span class="op">&lt;</span><span class="dt">Vec</span><span class="op">&lt;</span><span class="dt">usize</span><span class="op">&gt;,</span> <span class="dt">Self</span><span class="pp">::</span><span class="cn">Err</span><span class="op">&gt;</span> <span class="op">=</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>      s<span class="op">.</span>split(<span class="ch">'-'</span>)<span class="op">.</span>map(<span class="op">|</span>e<span class="op">|</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        e<span class="op">.</span>parse()<span class="op">.</span>map_err(<span class="op">|</span>err<span class="op">|</span> mk_e(<span class="pp">format!</span>(<span class="st">&quot;'{}': {}&quot;</span><span class="op">,</span> e<span class="op">,</span> err)))</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>      )<span class="op">.</span>collect()<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">match</span> numbers<span class="op">?.</span>as_slice() <span class="op">{</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">&amp;</span>[a<span class="op">,</span> b] <span class="op">=&gt;</span> <span class="cn">Ok</span>(Assignment<span class="op">{</span>from<span class="op">:</span> a<span class="op">,</span> to<span class="op">:</span> b<span class="op">}</span>)<span class="op">,</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>      _       <span class="op">=&gt;</span> <span class="cn">Err</span>(mk_e(<span class="pp">format!</span>(<span class="st">&quot;'{}' does not match N-M format&quot;</span><span class="op">,</span> s)))</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>Iter&lt;Result&lt;...&gt;&gt;</code> constructs <code>Result&lt;Vec&lt;...&gt;&gt;</code> (instead of
typical <code>Vec&lt;Result&lt;...&gt;&gt;</code>!). It’s a handy way to pop errors out from
iterator based loops. I’m still very clumzy at constructing new errors.
But at least I did not lose them here.</p>
<h2 id="funniest-problems">Funniest problems</h2>
<p>The solutions to most problems are technically very boring. But some
problem statements are great: a bit of ray casting, 2d and 3d physics
simulation and even CPU+CRT simulation!</p>
<p>Here is my list of fun problems I remembered:</p>
<ul>
<li><p><a href="https://adventofcode.com/2022/day/10">Day 10: Cathode-Ray Tube</a></p>
<p>Good mix of “hardware” simulations needs in a single problem.</p></li>
<li><p><a href="https://adventofcode.com/2022/day/14">Day 14: Regolith Reservoir</a></p>
<p>A problem where falling sand is simulated.</p></li>
<li><p><a href="https://adventofcode.com/2022/day/22">Day 22: Monkey Map</a></p>
<p>The only problem I did not manage to solve in 24 hours. I don’t like
my solution. But the problem statement is great!</p></li>
<li><p><a href="https://adventofcode.com/2022/day/25">Day 25: Full of Hot Air</a></p>
<p>A nice problem on unusual number base.</p></li>
</ul>
<p>I did not include a bunch of other problems like robot
production and valve handling as they looked very similar to me. I
solved them all with <a href="https://en.wikipedia.org/wiki/A*_search_algorithm">A* search</a>.</p>
<p>Grepping through the solutions <code>visited</code> keyword happens 5 times.
I would say it is too many similar search-in-graph problems in a single
year. But maybe it’s just me who used search too frequently without an
attempt at finding better solution?</p>
<p>Have fun!</p>

<div class="info">
    Posted on December 25, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 25 Dec 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/271-Aoc-of-2022.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Registered on mastodon</title>
    <link>http://trofi.github.io/posts/270-registered-on-mastodon.html</link>
    <description><![CDATA[<p>PSA: I registered on <a href="https://en.wikipedia.org/wiki/Mastodon_(social_network)">Mastodon</a>
as <a href="https://fosstodon.org/@trofi"><span class="citation" data-cites="trofi">@trofi</span><span class="citation" data-cites="fosstodon.org">@fosstodon.org</span></a>.</p>
<p>I’ll occasionally post there minor factoids not worthy of a full
blog post. It will hopefully reduce load on your RSS feed.</p>

<div class="info">
    Posted on December 18, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 18 Dec 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/270-registered-on-mastodon.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>A dataflow gcc bug</title>
    <link>http://trofi.github.io/posts/269-a-dataflow-gcc-bug.html</link>
    <description><![CDATA[<p>Let’s look at a simpler <code>gcc</code> bug today:
<a href="https://gcc.gnu.org/PR107879">PR107879</a>. There <code>ffmpeg-4</code> started
failing it’s testsuite on <code>gcc-13</code> from this week’s master:</p>
<pre><code>$ ./tests/fate-run.sh fate-swr-resample-s16p-2626-8000 &quot;&quot; &quot;&quot; \
  &quot;ffmpeg&quot; 'ffmpeg -i tests/data/asynth-2626-1.wav \
  -af atrim=end_sample=10240,\
aresample=8000:internal_sample_fmt=s16p:exact_rational=0:linear_interp=0,\
aformat=s16p,\
aresample=2626:internal_sample_fmt=s16p:exact_rational=0:linear_interp=0 \
  -f wav -c:a pcm_s16le -' 'stddev' 'tests/data/asynth-2626-1.wav' '0.1' '1' '' '' '' '1393.36' '31512 - 20482' 's16' '' '' '' ''
...
FAIL fate-swr-resample-s16p-2626-8000</code></pre>
<h2 id="on-ffmpeg-structure">On ffmpeg structure</h2>
<p>While the prospect of debugging multimedia package might sound scary
<code>ffmpeg</code> is a lot simpler to explore than other complex projects like
<code>llvm</code> or <code>gcc</code>.</p>
<p><code>ffmpeg</code> can be viewed as a simple buffer-in / buffer-out stream codec
(just like <code>zlib</code> or <code>zstd</code>). It’s hard to come up with a new clever
algorithm. But debugging already written one is usually straightforward.</p>
<p>Individual bytes when they get from input to output are either copied as
is or get slightly transformed without too much state to be collected
along the way. The code is written to be not too slow which means there
are not many high level abstractions or deep memory indirections.</p>
<p>Then if it’s all so somple what could possible go wrong there then? Is
there even a place for <code>gcc</code> to find a crack to fall in? Let’s find out.</p>
<p>The only caveat is that for most algorithms use floating points all over
the place. That might make computations not bit-for-bit reproducible
even on different optimization levels.</p>
<p>The change in behaviour we see might not be the bug at all.</p>
<h2 id="extracting-minimized-example">Extracting minimized example</h2>
<p>The above <code>$ ./tests/fate-run.sh fate-swr-resample-s16p-2626-8000 ...</code>
command was failing consistently when built with <code>gcc-master</code> and was
succeeding when built with <code>gcc-12</code>. With help of
<code>#pragma GCC optimize(0)</code> I nailed the misclmpilation down to
<a href="https://github.com/FFmpeg/FFmpeg/blob/master/libswresample/resample.c">libswresample/resample.c</a>
file. <code>build_filter()</code> function produced different filters for good and
bad cases.</p>
<p>Once I extracted test inputs for <code>build_filter()</code> I managed to craft the
following self-contained example that exhibits the problem:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">,</span> noipa<span class="op">))</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">double</span> build_filter<span class="op">(</span><span class="dt">double</span> <span class="op">*</span> y<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">int</span> ph <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">double</span> vf <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> factor <span class="op">=</span> vf<span class="op">;</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> x <span class="op">=</span> <span class="op">-</span> <span class="op">(</span><span class="dt">double</span><span class="op">)</span>ph <span class="op">*</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;z = </span><span class="sc">%f\n</span><span class="st">&quot;</span><span class="op">,</span> x<span class="op">);</span>   <span class="co">/* prints -0.0, ok */</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* This 'if / else' code should not affect calculation of 'ffm', but</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">       removing it does change things. */</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span>    <span class="co">/* should be 1.0 or .. */</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span> <span class="op">/</span> x<span class="op">;</span>       <span class="co">/* -inf? */</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;*y = </span><span class="sc">%f\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">*</span>y<span class="op">);</span> <span class="co">/* printf 1.0, ok */</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> w <span class="op">=</span> <span class="fl">2.0</span> <span class="op">*</span> x <span class="op">/</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;w = </span><span class="sc">%f\n</span><span class="st">&quot;</span><span class="op">,</span> w<span class="op">);</span> <span class="co">/* prints -0.0, ok */</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> omww <span class="op">=</span> <span class="dv">1</span> <span class="op">-</span> w<span class="op">;</span>                  <span class="co">/* should be 1.0 */</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;omww = </span><span class="sc">%f\n</span><span class="st">&quot;</span><span class="op">,</span> omww<span class="op">);</span> <span class="co">/* printf 1.0, ok */</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> ffm <span class="op">=</span> <span class="op">(</span>omww <span class="op">&gt;</span> <span class="dv">0</span><span class="er">.0</span><span class="op">)</span> <span class="op">?</span> omww <span class="op">:</span> <span class="dv">0</span><span class="er">.0</span><span class="op">;</span> <span class="co">/* should be 1.0 */</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;ffm = </span><span class="sc">%f\n</span><span class="st">&quot;</span><span class="op">,</span> ffm<span class="op">);</span> <span class="co">/* printf 0.0 or 1.0, </span><span class="al">BUG</span><span class="co"> */</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ffm<span class="op">;</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> y <span class="op">=</span> <span class="fl">42.0</span><span class="op">;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> filter <span class="op">=</span> build_filter<span class="op">(&amp;</span>y<span class="op">);</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;f = </span><span class="sc">%.20f</span><span class="st">; y = </span><span class="sc">%.20f\n</span><span class="st">&quot;</span><span class="op">,</span> filter<span class="op">,</span> y<span class="op">);</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Should be 1.0, sometimes returns 0.0. */</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;</span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">(</span>filter <span class="op">&gt;</span> <span class="dv">0</span><span class="er">.5</span><span class="op">)</span> <span class="op">?</span> <span class="st">&quot;OK&quot;</span> <span class="op">:</span> <span class="st">&quot;BUG&quot;</span><span class="op">);</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s a bit long but very straightforward: no loops, just one condition.</p>
<p>Here is the output difference in <code>-O0</code> / <code>-O1</code> comparison on
<code>gcc-master</code>:</p>
<pre><code># -O0, good:
$ gcc-HEAD/bin/gcc -O0 -lm a.c -o a -mfpmath=sse -fexcess-precision=standard -Wall -Wextra &amp;&amp; ./a
z = -0.000000
*y = 1.000000
w = -0.000000
omww = 1.000000
ffm = 1.000000
f = 1.00000000000000000000; y = 1.00000000000000000000
OK

# -O1, bad:
$ gcc-HEAD/bin/gcc -O1 -lm a.c -o a -mfpmath=sse -fexcess-precision=standard -Wall -Wextra &amp;&amp; ./a
z = -0.000000
*y = 1.000000
w = -0.000000
omww = 1.000000
ffm = 0.000000
f = 0.00000000000000000000; y = 1.00000000000000000000
BUG</code></pre>
<p>Note how <code>-O0</code> case computes correct <code>f = 1.0</code> and <code>-O1</code> computes
incorrect <code>f = 0.0</code>. There are no denormalized values. Just <code>0.0</code>,
<code>1.0</code> and <code>2.0</code>. All of them are representable perfectly in 32-bit
<code>float</code> or 64 <code>double</code> types. Thus the result should not be affected
by finer optimizations like fused-multiply-add which might observably
increase precision.</p>
<p>Let’s strip all the <code>printf()</code> calls off <code>build_filter()</code> to ease
inspection of <code>gcc</code> optimization process:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">,</span> noipa<span class="op">))</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">double</span> build_filter<span class="op">(</span><span class="dt">double</span> <span class="op">*</span> y<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">int</span> ph <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">double</span> vf <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> factor <span class="op">=</span> vf<span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> x <span class="op">=</span> <span class="op">-</span> <span class="op">(</span><span class="dt">double</span><span class="op">)</span>ph <span class="op">*</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* This 'if / else' code should not affect calculation of 'ffm', but</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">       removing it does change things. */</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span>    <span class="co">/* should be 1.0 or .. */</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="op">*</span>y <span class="op">=</span> <span class="fl">1.0</span> <span class="op">/</span> x<span class="op">;</span>       <span class="co">/* -inf? */</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> w <span class="op">=</span> <span class="fl">2.0</span> <span class="op">*</span> x <span class="op">/</span> factor<span class="op">;</span> <span class="co">/* should be -0.0 */</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> omww <span class="op">=</span> <span class="dv">1</span> <span class="op">-</span> w<span class="op">;</span>                  <span class="co">/* should be 1.0 */</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> ffm <span class="op">=</span> <span class="op">(</span>omww <span class="op">&gt;</span> <span class="dv">0</span><span class="er">.0</span><span class="op">)</span> <span class="op">?</span> omww <span class="op">:</span> <span class="dv">0</span><span class="er">.0</span><span class="op">;</span> <span class="co">/* should be 1.0 */</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ffm<span class="op">;</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> y <span class="op">=</span> <span class="fl">42.0</span><span class="op">;</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> filter <span class="op">=</span> build_filter<span class="op">(&amp;</span>y<span class="op">);</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;f = </span><span class="sc">%.1f</span><span class="st">; y = </span><span class="sc">%.1f\n</span><span class="st">&quot;</span><span class="op">,</span> filter<span class="op">,</span> y<span class="op">);</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Should be 1.0, sometimes returns 0.0. */</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;</span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">(</span>filter <span class="op">&gt;</span> <span class="dv">0</span><span class="er">.5</span><span class="op">)</span> <span class="op">?</span> <span class="st">&quot;OK&quot;</span> <span class="op">:</span> <span class="st">&quot;BUG&quot;</span><span class="op">);</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The bug is still here:</p>
<pre><code># -O0, good:
$ gcc-HEAD/bin/gcc -O0 -lm b.c -o b &amp;&amp; ./b
f = 1.0; y = 1.0
OK

# -O1, bad:
$ gcc-HEAD/bin/gcc -O1 -lm b.c -o b &amp;&amp; ./b
f = 0.0; y = 1.0
BUG</code></pre>
<p>I had to use a bit fo <code>volatile</code> to prevent <code>gcc</code> from folding constants
early and eliminate the the bug condition.</p>
<p>Fun fact: this test case still fails on <code>gcc-master</code> while original
<code>ffmpef-4</code> test suite does not. Looks like some unrelated detail of
<code>gcc</code> changed to partially mask the bug. If I was not quick enough
to extract the reproducer it might take a bit more time to restore
the envieonment and get it.</p>
<h2 id="diving-into-iptimization-process">Diving into iptimization process</h2>
<p>As usual <code>-fdump-tree-all</code> is our friend to find out when suspicios
pass broke our program.</p>
<p><code>gcc-HEAD/bin/gcc -O1 -lm b.c -o b -fdump-tree-optimized-slim</code> shows the
following final state in <code>b.c.254t.optimized</code>:</p>
<pre><code>__attribute__((noipa, noinline, noclone, no_icf))
double build_filter (double * y)
{
  double omww;
  double w;
  double x;
  double factor;
  volatile double vf;
  volatile int ph;
  int ph.4_1;
  double _2;
  double _3;
  double _4;
  double _5;
  double iftmp.5_6;
  double _20;

  &lt;bb 2&gt; [local count: 1073741824]:
  ph ={v} 0;
  vf ={v} 1.0e+0;
  factor_11 ={v} vf;
  ph.4_1 ={v} ph;
  _2 = (double) ph.4_1;
  _3 = -_2;
  x_12 = _3 * factor_11;
  if (x_12 == 0.0)
    goto &lt;bb 5&gt;; [50.00%]
  else
    goto &lt;bb 3&gt;; [50.00%]

  &lt;bb 3&gt; [local count: 633507680]:
  _4 = 1.0e+0 / x_12;
  _5 = x_12 * 2.0e+0;
  w_16 = _5 / factor_11;
  omww_17 = 1.0e+0 - w_16;
  if (omww_17 &gt; 0.0)
    goto &lt;bb 4&gt;; [100.00%]
  else
    goto &lt;bb 5&gt;; [0.00%]

  &lt;bb 4&gt; [local count: 633507680]:

  &lt;bb 5&gt; [local count: 1073741824]:
  # iftmp.5_6 = PHI &lt;omww_17(4), 0.0(3), 0.0(2)&gt;
  # _20 = PHI &lt;_4(4), _4(3), 1.0e+0(2)&gt;
  *y_13(D) = _20;
  return iftmp.5_6;
}</code></pre>
<p>Can you spot the bug? It might be a bit hard to read. I can’t easily
follow it due to many branch conditions. I could vaguely see that this
example is incorrect, but tracing the dumps through each of ~100 <code>gcc</code>
passes would be too slow. I asked <code>gcc</code> to dump <code>graphviz</code> style outputs
with <code>-fdump-tree-optimized-graph</code>. <code>b.c.254t.optimized.dot</code> generates
the following picture:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.254t.optimized.svg" /></p>
<p>Arc legend here is the following:</p>
<ul>
<li>green color is <code>TRUE</code> case of branch in <code>if</code> condition.</li>
<li>orange color is <code>FALSE</code> case of branch in <code>if</code> condition.</li>
</ul>
<p>I find graphical output to be slightly easier to follow: our
<code>x_12 == 0.0</code> is supposed to be <code>TRUE</code>. Fun fact: <code>-0.0</code> is equal to
<code>0.0</code> according to <code>C</code> and <code>IEEE-754</code> rules.</p>
<p>This means that none of <code>bb3</code> or <code>bb4</code> are executed and
<code>iftmp.5_6</code> <code>PHI</code> node brings in <code>0.0</code> value from <code>bb2</code>:</p>
<pre><code>  &lt;bb 5&gt; [local count: 1073741824]:
  # iftmp.5_6 = PHI &lt;omww_17(4), 0.0(3), 0.0(2)&gt;
  ...
  *y_13(D) = _20;
  return iftmp.5_6;</code></pre>
<p>I went through the graphs of all tree passes dumped with
<code>gcc-HEAD/bin/gcc -O1 -lm b.c -o b -fdump-tree-all-graph</code> to find the
seemingly problematic graph.</p>
<p>Here is our <code>b.c.015t.cfg.dot</code> original unoptimized graph as a reference:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.015t.cfg.svg" /></p>
<p>Let’s trace it through to make sure it’s correct. It wil also help
getting used to variable names and expected basic block effects:</p>
<ul>
<li>in <code>bb2</code> (entrance):
<ul>
<li><code>ph.4_1 = ph = 0;</code></li>
<li><code>factor = vf = 1.0;</code></li>
<li><code>_2 = ph.4_1; /* 0.0 */</code></li>
<li><code>_3 = -_2; /* -0.0 */</code></li>
<li><code>x = factor * _3; /* -0.0 */</code></li>
<li><code>if (x == 0.0) goto bb3;</code></li>
</ul></li>
<li>in <code>bb3</code> (branch taken):
<ul>
<li><code>*y = 1.0;</code> (not interesting)</li>
<li><code>goto bb5;</code></li>
</ul></li>
<li>in <code>bb5</code>:
<ul>
<li><code>_5 = x * 2.0; /* -0.0 */</code></li>
<li><code>w = _5 / factor; /* -0.0 */</code></li>
<li><code>omw = 1.0 - w; /* 1.0 */</code></li>
<li><code>if (omww &gt; 0.0) goto bb6;</code></li>
</ul></li>
<li>in <code>bb6</code>: (return)
<ul>
<li><code>iftmp.5 = omww; /* 1.0 */</code></li>
<li><code>goto bb8;</code></li>
</ul></li>
<li>in <code>bb8</code>:
<ul>
<li><code>ffm = iftmp.5; /* 1.0 */</code></li>
<li><code>D.3203 = ffm; /* 1.0 */</code></li>
<li><code>return D.3203; /* 1.0 */</code></li>
</ul></li>
</ul>
<p>It’s a bit verbose but very straightforward. The effect is:</p>
<ul>
<li><code>w</code> gets calculated to <code>0.0</code></li>
<li><code>omww</code> and <code>ffm</code> get calculated to <code>1.0</code> and return the value</li>
</ul>
<p>If we look further down the optimization passes I think the
<code>b.c.128t.sra</code> is last valid step:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.128t.sra.svg" /></p>
<p>And <code>b.c.130t.dom2</code> is first problematic step:</p>
<p><img src="http://trofi.github.io/posts.data/269-a-dataflow-gcc-bug/b.c.130t.dom2.svg" /></p>
<p>Note how <code>omww_22 = 1.0 - w_21;</code> in <code>bb6</code> is never read. Instead our
<code>PHI</code> node <code># iftmp.5_6 = PHI &lt;omww_17(3), 0.0(4), 0.0(6)&gt;</code> claims
that <code>bb6</code> always brings in <code>0.0</code> value in <code>0.0(6)</code> alternative.</p>
<p>Why does it happen? At this point I gave up and filed
<a href="https://gcc.gnu.org/PR107879" class="uri">https://gcc.gnu.org/PR107879</a> bug.</p>
<p>Then I bisected <code>gcc</code> down to <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=d4c2f1d376da6f">commit d4c2f1d3</a>:</p>
<pre><code>commit d4c2f1d376da6fc3f3c30a9d3160e43c95399343
Date:   Sat Nov 12 09:39:00 2022 +0100

    range-op: Implement op[12]_range operators for {PLUS,MINUS,MULT,RDIV}_EXPR</code></pre>
<p>The commit changed value ranges inferred for variables to simplify the
call graph by eliminating impossible edges. Alexander confirmed that
<code>dom2/dom3</code> passes take part in destroying original program and Jakub
nailed it down to incorrect inferred ranges around the division.</p>
<p>I would like to get a bit better understanding at how and when ranges
get computed for this example. So far I don’t know how to look at them
in detail.</p>
<h2 id="parting-words">Parting words</h2>
<ul>
<li><code>ffmpeg</code> while being simple and full of assembly still can step on
<code>gcc</code> bugs in more obscure areas.</li>
<li><code>ffmpeg</code> uses
<a href="https://github.com/FFmpeg/FFmpeg/blob/master/libswresample/resample.c#L182-L183">cubic formula</a>
to upsample inputs.</li>
<li><code>-0.0</code> is equal to <code>0.0</code> according to IEEE754 even if binary encodings
differ.</li>
<li><code>gcc</code>’s dataflow related to value ranges is a bit hard to follow even in
<code>-fdump-*</code> outputs.</li>
<li><code>gcc</code>’s <code>-fdump-*-graph</code> set of options dump nice <code>.dot</code>-style outputs
for visual debugging.</li>
<li><code>volatile</code> is great at inhibiting complex constant propagation
optimizations.</li>
</ul>
<p>Have fun!</p>

<div class="info">
    Posted on December 10, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sat, 10 Dec 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/269-a-dataflow-gcc-bug.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Fixing wine-wayland on POLARIS</title>
    <link>http://trofi.github.io/posts/268-fixing-wine-wayland-on-polaris.html</link>
    <description><![CDATA[<p>After <a href="http://trofi.github.io/posts/261-trying-out-wayland.html">switching to wayland</a> I got
most GUI programs to use <code>wayland</code> backend render. The two main
exceptions are <code>pidgin</code> (used <code>gtk-2</code>) and <code>wine</code> (uses low level <code>x11</code>
primitives for many things). <code>pidgin</code> worked fine in <code>Xwayland</code>, but
<code>wine</code> did not always behave: sometimes input focus did not get passed
to the emulated application, sometimes wine could not use
<code>wayland</code>-native pixel screen dimensions and resorted back to
down-scaled dimensions.</p>
<p>There is an ongoing effort to get <code>wine</code> a new <code>wayland</code> backend by
Alexandros Frantzis and others. It’s not yet merged to <code>wine</code> upstream
proper and is developed at <a href="https://gitlab.collabora.com/alf/wine.git" class="uri">https://gitlab.collabora.com/alf/wine.git</a>
as a <code>wine</code> fork in <code>wayland</code> branch. <code>nixpkgs</code> packages this fork as
<code>wine-wayland</code> package.</p>
<p>I tried <code>wine-wayland</code> for the first time this weekend. Unfortunately it
was not able to run <code>DirectX</code> or <code>OpenGL</code> games for windows. When I
started an application I heard expected sounds from the applications
(good) but got only black screen back (bad!).</p>
<p>I did not think I could fix it: <code>wine</code> was a huge project, I had no
background in modern graphics be it <code>linux</code> or <code>windows</code>. But I was
mildly curious about the following messages <code>wine</code> was dumping to
<code>stderr</code>:</p>
<pre><code>$ wine foo.exe
00f0:err:waylanddrv:wayland_gl_drawable_update Failed to create GBM surface
00f0:err:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface
011c:err:waylanddrv:wayland_gl_drawable_update Failed to create GBM surface
011c:err:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface</code></pre>
<p>I wanted to find out why <code>wine</code> was failing to create these things.</p>
<p><code>GBM</code> and <code>EGL</code> acronyms sounded vaguely graphics-related. Creating the
rendering surface sounded like a simple procedure. Everything neededs a
surface to draw anything. Maybe that error message is an actual bug?</p>
<p><code>wine</code> has a great <code>WINEDEBUG=</code> mechanism to enable subsystem-specific
debug prints at runtime (<code>man wine</code> has detailed synatax description).
To get <code>wayland</code>-related debugging I used <code>WINEDEBUG=waylanddrv,opengl</code>:</p>
<pre><code>$ WINEDEBUG=waylanddrv,opengl wine foo.exe
...
0124:trace:waylanddrv:wayland_gl_create_gbm_surface Using default format/modifier information
0124:trace:waylanddrv:wayland_gbm_create_surface 640x480 AR24 scanout=0 count_mods=2
0124:trace:waylanddrv:wayland_gbm_create_surface     mod: 0x00ffffffffffffff
0124:trace:waylanddrv:wayland_gbm_create_surface     mod: 0x0000000000000000
0124:err:waylanddrv:wayland_gl_drawable_update Failed to create GBM surface
0124:trace:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface with SRGB colorspace, trying with default colorspace
0124:err:waylanddrv:wayland_gl_drawable_update Failed to create EGL surface
...</code></pre>
<p>Not knowing much about these <code>GBM</code> things it felt like creating a <code>640x480</code>
surface with <code>AR24</code> format (8 bits for each of Red, Blue, Green, Alpha components)
should not be a problem and the call should succeed. Why does it fail here?</p>
<p>To ease exploration I started patching <code>mesa</code> and <code>wine-wayland</code> locally
with <code>fprintf(stderr, ...);</code> calls to see what gets passed around.</p>
<p><code>nixpkgs</code>’s <code>mesa</code> clients use <code>/run/opengl-driver-32</code> paths to load
<code>opengl</code> <code>mesa</code> drivers. That means just rebuilding an application
against patched <code>mesa</code> locally in <code>nixpkgs</code> checkout is not enough to
get it used: applications will still load <code>/run/opengl-driver-32</code>
drivers. One day we will fix this non-hermeticity.</p>
<p>But until then we have to manually redirect used <code>mesa</code> from default
paths. There are many ways to do it. I used the following global
variables:</p>
<pre><code>$ local_mesa=$(nix-build --no-link ~/nm -A pkgsi686Linux.mesa.drivers)
$ GBM_BACKENDS_PATH=/not-really-used \
  LIBGL_DRIVERS_PATH=$local_mesa/lib/dri \
  __EGL_VENDOR_LIBRARY_DIRS=$local_mesa/share/glvnd/egl_vendor.d \
      wine foo.exe</code></pre>
<p>This allowed me to put patches to <code>~/nm</code> checkout of <code>nixpkgs</code> and
immediately observe their effect on <code>wine-wayland</code>.</p>
<p>I found that <code>wine</code>’s code at
<a href="https://gitlab.collabora.com/alf/wine/-/blob/wayland/dlls/winewayland.drv/opengl.c#L373-L440">winewayland.drv</a>.
calls <code>wayland_gbm_create_surface()</code> -&gt;
<a href="https://gitlab.collabora.com/alf/wine/-/blob/wayland/dlls/winewayland.drv/opengl.c#L310-L371">wayland_gl_create_gbm_surface()</a>
-&gt; <a href="https://gitlab.collabora.com/alf/wine/-/blob/wayland/dlls/winewayland.drv/gbm.c#L267-L299">wayland_gbm_create_surface()</a>.
All of the calls are shallow wrappers of one another. They just pass
through the request to create surface. I’ll paste the latter in full
here:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> gbm_surface <span class="op">*</span>wayland_gbm_create_surface<span class="op">(</span><span class="dt">uint32_t</span> drm_format<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">,</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>                                               <span class="dt">size_t</span> count_modifiers<span class="op">,</span> <span class="dt">uint64_t</span> <span class="op">*</span>modifiers<span class="op">,</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>                                               BOOL format_is_scanoutable<span class="op">)</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">uint32_t</span> gbm_bo_flags <span class="op">=</span> GBM_BO_USE_RENDERING<span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>TRACE_ON<span class="op">(</span>waylanddrv<span class="op">))</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> i<span class="op">;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        TRACE<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d</span><span class="st">x</span><span class="sc">%d</span><span class="st"> </span><span class="sc">%.4s</span><span class="st"> scanout=</span><span class="sc">%d</span><span class="st"> count_mods=</span><span class="sc">%zu\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>              width<span class="op">,</span> height<span class="op">,</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*)&amp;</span>drm_format<span class="op">,</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>              format_is_scanoutable<span class="op">,</span> count_modifiers<span class="op">);</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> count_modifiers<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>            TRACE<span class="op">(</span><span class="st">&quot;    mod: 0x</span><span class="sc">%.16llx\n</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">(</span><span class="dt">long</span> <span class="dt">long</span><span class="op">)</span>modifiers<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>format_is_scanoutable<span class="op">)</span> gbm_bo_flags <span class="op">|=</span> GBM_BO_USE_SCANOUT<span class="op">;</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>count_modifiers<span class="op">)</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef HAVE_GBM_SURFACE_CREATE_WITH_MODIFIERS2</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> gbm_surface_create_with_modifiers2<span class="op">(</span>process_gbm_device<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                                                  drm_format<span class="op">,</span> modifiers<span class="op">,</span> count_modifiers<span class="op">,</span> gbm_bo_flags<span class="op">);</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> gbm_surface_create_with_modifiers<span class="op">(</span>process_gbm_device<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>                                                 drm_format<span class="op">,</span> modifiers<span class="op">,</span> count_modifiers<span class="op">);</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> gbm_surface_create<span class="op">(</span>process_gbm_device<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> drm_format<span class="op">,</span> gbm_bo_flags<span class="op">);</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>wayland_gbm_create_surface()</code> tries to call
<code>gbm_surface_create_with_modifiers2()</code> with 2 modifiers:</p>
<ul>
<li>unknown (tiled?): <code>0x00ffffffffffffff</code> (<code>DRM_FORMAT_MOD_INVALID</code>)</li>
<li>linear: <code>0x0000000000000000</code> (<code>DRM_FORMAT_MOD_LINEAR</code>)</li>
</ul>
<p>Note that if there would be no modifiers then <code>gbm_surface_create()</code>
would be called. From what I understand presence of extra modifiers is
optional (depends on a driver implementation).</p>
<p>From what I understand generic code should be able to work with all
modifiers. Picking wrong modifier should only affect performance (and
not correctness). An example modifier would be to enable tiled pixel
layout instead of default linear.</p>
<p>The fun thing is that <code>mesa</code> rejects
<code>gbm_surface_create_with_modifiers2()</code> call for me with <code>errno = ENOSYS</code>
at <a href="https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/gbm/backends/dri/gbm_dri.c#L1343-L1404">src/gbm/backends/dri/gbm_dri.c</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">struct</span> gbm_surface <span class="op">*</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>gbm_dri_surface_create<span class="op">(</span><span class="kw">struct</span> gbm_device <span class="op">*</span>gbm<span class="op">,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">uint32_t</span> width<span class="op">,</span> <span class="dt">uint32_t</span> height<span class="op">,</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">uint32_t</span> format<span class="op">,</span> <span class="dt">uint32_t</span> flags<span class="op">,</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>                       <span class="dt">const</span> <span class="dt">uint64_t</span> <span class="op">*</span>modifiers<span class="op">,</span> <span class="dt">const</span> <span class="dt">unsigned</span> count<span class="op">)</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">struct</span> gbm_dri_device <span class="op">*</span>dri <span class="op">=</span> gbm_dri_device<span class="op">(</span>gbm<span class="op">);</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>   <span class="kw">struct</span> gbm_dri_surface <span class="op">*</span>surf<span class="op">;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="op">(</span>modifiers <span class="op">&amp;&amp;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>       <span class="op">(!</span>dri<span class="op">-&gt;</span>image <span class="op">||</span> dri<span class="op">-&gt;</span>image<span class="op">-&gt;</span>base<span class="op">.</span>version <span class="op">&lt;</span> <span class="dv">14</span> <span class="op">||</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">!</span>dri<span class="op">-&gt;</span>image<span class="op">-&gt;</span>createImageWithModifiers<span class="op">))</span> <span class="op">{</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>      errno <span class="op">=</span> ENOSYS<span class="op">;</span> <span class="co">// &lt;- here</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> NULL<span class="op">;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>As I understand <code>mesa</code> assumes that <code>createImageWithModifiers</code> support
should be present in the backend driver. But in my case of
<code>GFX8 / POLARIS12</code> modifier support for image creation seems to be
disabled by <code>mesa</code> at
<a href="https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/gallium/drivers/radeonsi/si_texture.c#L2378-L2401">src/gallium/drivers/radeonsi/si_texture.c</a>.
Don’t know why.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> si_init_screen_texture_functions<span class="op">(</span><span class="kw">struct</span> si_screen <span class="op">*</span>sscreen<span class="op">)</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_from_handle <span class="op">=</span> si_texture_from_handle<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_get_handle <span class="op">=</span> si_texture_get_handle<span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_get_param <span class="op">=</span> si_resource_get_param<span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_get_info <span class="op">=</span> si_texture_get_info<span class="op">;</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_from_memobj <span class="op">=</span> si_resource_from_memobj<span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>memobj_create_from_handle <span class="op">=</span> si_memobj_from_handle<span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>memobj_destroy <span class="op">=</span> si_memobj_destroy<span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>check_resource_capability <span class="op">=</span> si_check_resource_capability<span class="op">;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>   sscreen<span class="op">-&gt;</span>b<span class="op">.</span>get_sparse_texture_virtual_page_size <span class="op">=</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>      si_get_sparse_texture_virtual_page_size<span class="op">;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>   <span class="co">/* By not setting it the frontend will fall back to non-modifier create,</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="co">    * which works around some applications using modifiers that are not</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="co">    * allowed in combination with lack of error reporting in</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="co">    * gbm_dri_surface_create */</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="op">(</span>sscreen<span class="op">-&gt;</span>info<span class="op">.</span>gfx_level <span class="op">&gt;=</span> GFX9 <span class="op">&amp;&amp;</span> sscreen<span class="op">-&gt;</span>info<span class="op">.</span>kernel_has_modifiers<span class="op">)</span> <span class="op">{</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>resource_create_with_modifiers <span class="op">=</span> si_texture_create_with_modifiers<span class="op">;</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>query_dmabuf_modifiers <span class="op">=</span> si_query_dmabuf_modifiers<span class="op">;</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>is_dmabuf_modifier_supported <span class="op">=</span> si_is_dmabuf_modifier_supported<span class="op">;</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>      sscreen<span class="op">-&gt;</span>b<span class="op">.</span>get_dmabuf_modifier_planes <span class="op">=</span> si_get_dmabuf_modifier_planes<span class="op">;</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>GFX8</code> does not get a hint of <code>resource_create_with_modifiers</code> and
as a result <a href="https://gitlab.freedesktop.org/mesa/mesa/-/blob/main/src/gallium/frontends/dri/dri2.c#L2196-L2264">src/gallium/frontends/dri/dri2.c</a>
does not set <code>createImageWithModifiers</code>:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>dri2_init_screen_extensions<span class="op">(</span><span class="kw">struct</span> dri_screen <span class="op">*</span>screen<span class="op">,</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>                            <span class="kw">struct</span> pipe_screen <span class="op">*</span>pscreen<span class="op">,</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>                            <span class="dt">bool</span> is_kms_screen<span class="op">)</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>   <span class="dt">const</span> __DRIextension <span class="op">**</span>nExt<span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>   STATIC_ASSERT<span class="op">(</span><span class="kw">sizeof</span><span class="op">(</span>screen<span class="op">-&gt;</span>screen_extensions<span class="op">)</span> <span class="op">&gt;=</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>                 <span class="kw">sizeof</span><span class="op">(</span>dri_screen_extensions_base<span class="op">));</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>   memcpy<span class="op">(&amp;</span>screen<span class="op">-&gt;</span>screen_extensions<span class="op">,</span> dri_screen_extensions_base<span class="op">,</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>          <span class="kw">sizeof</span><span class="op">(</span>dri_screen_extensions_base<span class="op">));</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>   screen<span class="op">-&gt;</span>extensions <span class="op">=</span> screen<span class="op">-&gt;</span>screen_extensions<span class="op">;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>   <span class="co">/* Point nExt at the end of the extension list */</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>   nExt <span class="op">=</span> <span class="op">&amp;</span>screen<span class="op">-&gt;</span>screen_extensions<span class="op">[</span>ARRAY_SIZE<span class="op">(</span>dri_screen_extensions_base<span class="op">)];</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>   screen<span class="op">-&gt;</span>image_extension <span class="op">=</span> dri2ImageExtensionTempl<span class="op">;</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>   <span class="cf">if</span> <span class="op">(</span>pscreen<span class="op">-&gt;</span>resource_create_with_modifiers<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>      screen<span class="op">-&gt;</span>image_extension<span class="op">.</span>createImageWithModifiers <span class="op">=</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>         dri2_create_image_with_modifiers<span class="op">;</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>      screen<span class="op">-&gt;</span>image_extension<span class="op">.</span>createImageWithModifiers2 <span class="op">=</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>         dri2_create_image_with_modifiers2<span class="op">;</span></span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span></code></pre></div>
<p>I’m not sure why <code>createImageWithModifiers</code> is skipped for me. Is it a
<code>mesa</code> bug? Is it expected because video card does not expose enough
information on tile format for <code>mesa</code> to reuse? I have no idea!</p>
<p>Anyway, from the above I was able to fix <code>wine-wayland</code> with one simple
trick by pretending there are no modifiers (assume <code>LINEAR</code>?):</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/dlls/winewayland.drv/gbm.c</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/dlls/winewayland.drv/gbm.c</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -286,13 +286,20 @@ struct gbm_surface *wayland_gbm_create_surface(uint32_t drm_format, int width, i</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>     if (count_modifiers)</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>     {</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="va">+        errno = 0;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="va">+        struct gbm_surface * s =</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a> #ifdef HAVE_GBM_SURFACE_CREATE_WITH_MODIFIERS2</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="st">-        return gbm_surface_create_with_modifiers2(process_gbm_device, width, height,</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="va">+               gbm_surface_create_with_modifiers2(process_gbm_device, width, height,</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>                                                   drm_format, modifiers, count_modifiers, gbm_bo_flags);</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a> #else</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a><span class="st">-        return gbm_surface_create_with_modifiers(process_gbm_device, width, height,</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="va">+               gbm_surface_create_with_modifiers(process_gbm_device, width, height,</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>                                                  drm_format, modifiers, count_modifiers);</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="va">+        if (!s &amp;&amp; errno == ENOSYS) {</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="va">+            TRACE(&quot;    =&gt; mesa can't create a surface with modifiers. Falling back to modifer-less.&quot;);</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="va">+        } else {</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="va">+            return s;</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a><span class="va">+        }</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>     }</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>     return gbm_surface_create(process_gbm_device, width, height, drm_format, gbm_bo_flags);</span></code></pre></div>
<p>The idea is to just ignore <code>gbm_surface_create_with_modifiers2()</code>’s
result if it fails with <code>ENOSYS</code> and switch over to
<code>gbm_surface_create()</code> assuming it can handle the the call without
modifier presence.</p>
<p>I’m not sure what such a fallback means for other video card types. Will
it break some tiled workloads? Or at this point surface creation is
already broken beyond repair and any try is better than nothing? I have
no idea!</p>
<p>With the hack I unexpectedly got my games back running on <code>wine-wayland</code>!</p>
<p>I sent above hack to Alexandros to get help where the real fix belongs.
Hopefully we can get <code>wine-wayland</code> to work on more GPUs than today.</p>
<h2 id="parting-words">Parting words</h2>
<p>Vanilla <code>wine</code> still has to run via <code>Xwayland</code> and it’s not the best
experience for some picky applications. <code>wine-wayland</code> does a very
decent job at providing something that works (modulo cards like mine).
After I applied the fallback hack I was able to run all the games that
used to work on <code>wine-x11</code>.</p>
<p><code>wine</code>’s <code>WINEDEBUG=</code> debugging facility is great at tracing both
application behaviour and <code>wine</code>’s driver behaviour. I had to add
surprisingly little extra debugging to what is already available in
<code>wine</code> in form of <code>TRACE(...);</code> calls.</p>
<p><code>wine</code>’s error message was clear enough to understand why video
rendering did not produce anything.</p>
<p><code>nix</code>’s ability to build patched <code>wine</code> against patched <code>mesa</code> without
destroying existing installation was critical for me to be able to do
side-by-side comparisons.</p>
<p><code>mesa</code>’s <code>LIBGL_DRIVERS_PATH=</code> and <code>libglvnd</code>’s
<code>__EGL_VENDOR_LIBRARY_DIRS=</code> variables are ideal at fiddling with
patched opengl stack while keeping the main system running.</p>
<p><code>wine</code>’s and <code>wayland</code>’s way of handling <code>linux</code> <code>DRM</code> subsystem is very
lightweiht: they effectively pass available configuration around without
much of application-specific mangling. At least around surface creation
logic. That was very easy to get through.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November 28, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Mon, 28 Nov 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/268-fixing-wine-wayland-on-polaris.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Diving into an IPA gcc bug</title>
    <link>http://trofi.github.io/posts/267-diving-into-an-ipa-gcc-bug.html</link>
    <description><![CDATA[<p><code>gcc</code> has a nice set of optimizations based on inter-procedural
analysis (<code>IPA</code>). Some of them are simpler (like <code>early-inliner</code>),
and some are fancier (like <code>ipa-modref</code>). Their positive (and negative)
effect is most pronounced when applied to a program as a whole (<code>LTO</code>
builds).</p>
<p>Naturally occasional bugs creep in every now and then. They are rare
enough and non-trivial enough that I forget almost everything when
another one pops up.</p>
<p>I’ll use <a href="https://gcc.gnu.org/PR107661">PR107661</a> as a running example
to explore some details of <code>ipa-cp</code> pass and write down the process of
chasing the bug. We’ll have a glance at mechanics of trimming down the
example, at mechanics of <code>ipa-cp</code> pass run on a simple example and at
the bug itself.</p>
<p>I hope this doc will be useful to others and maybe future me.</p>
<p>It’s a long read. You have been warned.</p>
<h2 id="the-bug-effect">The bug effect</h2>
<p>After another weekly <code>gcc</code> update I found that <code>llvm-12</code> (and <code>llvm-11</code>)
test suites started failing 4 tests. All tests normally pass as <code>llvm</code>
test suite is quite self-contained: inputs are in <code>llvm</code> assembly and
outputs are in <code>llvm</code> internal representation. No external tools are
required. Thus any regressions in <code>llvm</code> tests are either latent <code>llvm</code>
bugs (unlikely) or bugs in a host compiler (more likely, <code>gcc-13</code> in my
case). I usually assume the latter. This time <code>llvm-12</code> failed these 4
tests as reported by <code>make check</code>:</p>
<pre><code>$ nix build -L --impure --expr 'with import ~/n {}; llvmPackages_12.override { stdenv = gccGitStdenv; }'
...
Failed Tests (4):
  LLVM :: CodeGen/AMDGPU/GlobalISel/llvm.amdgcn.div.fmas.ll
  LLVM :: CodeGen/AMDGPU/atomic_optimizations_pixelshader.ll
  LLVM :: CodeGen/AMDGPU/smem-war-hazard.mir
  LLVM :: CodeGen/AMDGPU/vgpr-descriptor-waterfall-loop-idom-update.ll</code></pre>
<h2 id="example-failing-test">Example failing test</h2>
<p>Test suite log pointed at this command as a failure trigger:</p>
<pre><code>$ bin/llc &lt; ../test/CodeGen/AMDGPU/vgpr-descriptor-waterfall-loop-idom-update.ll \
    -march=amdgcn -mcpu=gfx1010 | bin/FileCheck --allow-unused-prefixes=false \
        ../test/CodeGen/AMDGPU/vgpr-descriptor-waterfall-loop-idom-update.ll --check-prefix=GCN</code></pre>
<p>I ran this test manually. Sometimes it failed, sometimes it succeeded!</p>
<p>The failure was non-deterministic. I hoped for use of uninitialized value
somewhere in <code>llvm</code> code. Any attempt to build <code>llvm-12</code> with
<code>-fsanitize=address</code> or <code>-fsanitize=undefined</code> made the bug to go away
without any error reports. Not good. Hard to draw any conclusions.</p>
<h2 id="nailing-down-suspect-source-file">Nailing down suspect source file</h2>
<p>The next step was to find the file that likely got mis-compiled: I kept
adding <code>#pragma GCC optimize(0)</code> to various <code>AMDGPU</code> files until bug
disappeared. Then I removed as many added pragmas as I could to find
minimum amount needed to fix the test. One file was enough:
<code>llvm/lib/Target/AMDGPU/GCNHazardRecognizer.cpp</code>. bug disappeared
when I added the pragma to only that file. Guessing the right file took a
few attempts but it was not hard.</p>
<p>Then I started moving functions from <code>GCNHazardRecognizer.cpp</code> (built
with <code>-O0</code>) out into another <code>.cpp</code> file (built with <code>-O3</code>) one by one
to narrow the set of functions to minimum amount when the bug is still
present. At some point
<code>valgrind</code> started complaining at <code>llc</code> for use of uninitialized value.
The precise report did not make sense: there were no uninitialized
variables in <code>c++</code> code.
Backtraces contained lines from <code>GCNHazardRecognizer.cpp</code>, but only when
<code>llc</code> was built with <code>-O3</code>. <code>-O0</code> had no complains from <code>valgrind</code>. I
hoped it was a real bug and not a <code>valgrind</code> deficiency.</p>
<p>At that point I had more reproducible example. This allowed me to shrink
<code>vgpr-descriptor-waterfall-loop-idom-update.ll</code> example down to 2 lines
of <code>llvm</code> assembly code while keeping <code>valgrind</code> complaining.</p>
<p>From that point I could understand what <code>llvm</code> input I am compiling and
what checks does <code>GCNHazardRecognizer.cpp</code> attempt to perform: the pass
tested register conflicts and did not modify the input program. That’s
a nice property: we can remove various parts of the validator without
fear of breaking the whole compilation process.</p>
<h2 id="trimming-down-the-source">Trimming down the source</h2>
<p>Even with most functions removed <code>GCNHazardRecognizer.cpp</code> still
contained 24KB of <code>C++</code> with many local and <code>STL</code> includes. It was very
hard to explore what <code>gcc</code> was doing wrong to such a large input.</p>
<p>I started removing unused code by adding <code>__builtin_trap()</code> into
functions and making sure that code does not get executed (when <code>llc</code>
ran successfully). This allowed me to shrink <code>GCNHazardRecognizer.cpp</code>
down to 10KB of <code>C++</code> code.</p>
<h2 id="trimming-down-optimization-options">Trimming down optimization options</h2>
<p>After I could remove no other function from <code>GCNHazardRecognizer.cpp</code>
I reduced optimization level from <code>-O3</code> down to <code>-O1 -fipa-cp -fipa-cp-clone</code>.</p>
<p>I got the list of options to try from <code>gcc -O3 -Q --help=optimizers</code>
output where <code>gcc</code> tells us actual effect of <code>-O3</code> aggregate option
in terms of more fine-grained individual <code>-f*</code> and <code>--param=*</code> options.</p>
<h2 id="deoptimizing-the-source">Deoptimizing the source</h2>
<p>Then I started adding <code>__attribute__((noinline, noipa))</code> (or
<code>__attribute__((noclone))</code> if <code>noipa</code> was too much) to every function
used in <code>GCNHazardRecognizer.cpp</code>. This included common <code>llvm</code> header
files. That way I could reduce amount of transformations <code>gcc</code> does
with input file. I used <code>-fopt-info</code> reports to pick next function to
deoptimize, or inline manually if it’s required to trigger the bug.</p>
<p>This step took a while as I had to sprinkle many parts of <code>llvm</code> common
header code.</p>
<p>The result allowed me to remove vast majority of tiny helper functions
from
optimizer’s oversight. Some functions I was able to turn into no-op
functions just to maintain the callgraph: so that I could keep code
execution flow roughly the same.</p>
<h2 id="getting-self-contained-example">Getting self-contained example</h2>
<p>From that point I could extract the result into a single <code>.cpp</code> file.
I filed a <a href="https://gcc.gnu.org/PR107661">PR107661</a> form the result
hoping that the bug would be obvious to an expert.</p>
<p>The resulting test was still a bit cryptic. I’m not posting it here as
we can do a bit better before looking at what compiler does with it.</p>
<h2 id="removing-most-syntactic-sugar">Removing most syntactic sugar</h2>
<p>Then I expanded high level c++ constructs like lambda functions and
classes into structs and explicit methond names, inlined methods manually
and removed unused parameters. In this case I especially was afraid of
<code>function_ref</code> class used in original file: it used very unusal way to
capture lambda context. I was not sure it conforms to <code>C++</code> semantics.</p>
<p>In the example below we just pass a function pointer with seemingly no
opporutunity of undefined behaviour.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// #define DISABLE_HACK 1</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> L_run<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;BAD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_L<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> L_run<span class="op">();</span> <span class="op">}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_R<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;GOOD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> function_ref <span class="op">{</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">(*</span>callback<span class="op">)(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">// allow one level of recursion to call callback twice</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> is_recur<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">static</span> <span class="dt">int</span> n <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> <span class="op">(</span>n<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">default</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do3<span class="op">(</span><span class="dt">volatile</span> <span class="dt">int</span> <span class="op">*</span> punused<span class="op">,</span> function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>  Expired<span class="op">.</span>callback<span class="op">();</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>is_recur<span class="op">())</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    do3<span class="op">(</span>punused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do1<span class="op">(</span>function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>  <span class="dt">volatile</span> <span class="dt">int</span> unused <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>  do3<span class="op">(&amp;</span>unused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_R<span class="op">});</span> <span class="op">}</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(DISABLE_HACK)</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> seemingly_unused_foo<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_L<span class="op">});</span> <span class="op">}</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>
<p>This example behaves differently when <code>void seemingly_unused_foo(void)</code>
is presend and is absent in the code:</p>
<pre><code>$ ./gcc-13-snap/bin/gcc -O1 -fipa-cp -fipa-cp-clone                a.cc -o a &amp;&amp; ./a
GOOD
BAD
$ ./gcc-13-snap/bin/gcc -O1 -fipa-cp -fipa-cp-clone -DDISABLE_HACK a.cc -o a &amp;&amp; ./a
GOOD
GOOD</code></pre>
<p>Note how executable output changes from <code>GOOD/BAD</code> to <code>GOOD/GOOD</code>. It’s not
supposed to and <code>gcc-12</code> never prints <code>BAD</code> text.</p>
<h2 id="making-sure-not-many-optimization-oportunities-are-left">Making sure not many optimization oportunities are left</h2>
<p>Once we have a self-contained example it’s useful to apply (or disable)
most unrelated optimizations. Once again I usually use <code>-fopt-info</code> for
that.</p>
<p>Running it against our current example reports just one transformation:</p>
<pre><code>$ gcc -O1 -fipa-cp -fipa-cp-clone -fopt-info -c a.cc -o a.o
a.cc:31:19: optimized: converting indirect call in void do3.constprop(volatile int*, function_ref)/24 to direct call to void callback_fn_L()/13</code></pre>
<p>Here we see that <code>gcc</code> did something to <code>do3()</code> to optimize indirect
<code>Expired.callback();</code> call into direct <code>callback_fn_L()</code> call. That is
probably done to optimize <code>seemingly_unused_foo()</code> as nothing else is
expected to call <code>callback_fn_L()</code>.</p>
<p>While we are at it there are cases when you expect some optimization to
fire. But for some reason it does not happen.<code>-fopt-info-all</code> might
sched some light into decisions made by <code>gcc</code>:</p>
<pre><code>$ gcc -O1 -fipa-cp -fipa-cp-clone -fopt-info-all -c a.cc -o a.o
a.cc:47:6: missed: Node void seemingly_unused_foo()/20 has no profile-id (profile feedback missing?)
a.cc:43:5: missed: Node int main()/19 has no profile-id (profile feedback missing?)
a.cc:37:13: missed: Node void do1(function_ref)/18 has no profile-id (profile feedback missing?)
a.cc:30:13: missed: Node void do3(volatile int*, function_ref)/17 has no profile-id (profile feedback missing?)
a.cc:22:12: missed: Node int is_recur()/16 has no profile-id (profile feedback missing?)
a.cc:15:13: missed: Node void callback_fn_R()/14 has no profile-id (profile feedback missing?)
a.cc:14:13: missed: Node void callback_fn_L()/13 has no profile-id (profile feedback missing?)
a.cc:13:13: missed: Node void L_run()/12 has no profile-id (profile feedback missing?)
a.cc:31:19: optimized: converting indirect call in void do3.constprop(volatile int*, function_ref)/24 to direct call to void callback_fn_L()/13
a.cc:31:19: missed:   not inlinable: void do3.constprop(volatile int*, function_ref)/24 -&gt; void callback_fn_L()/13, function not inline candidate
a.cc:33:15: missed:   not inlinable: void do3.constprop(volatile int*, function_ref)/24 -&gt; int is_recur()/16, function not inline candidate
a.cc:34:8: missed:   not inlinable: void do3.constprop(volatile int*, function_ref)/24 -&gt; void do3.constprop(volatile int*, function_ref)/24, function not inline candidate
a.cc:40:6: missed:   not inlinable: void do1.constprop(function_ref)/23 -&gt; void do3.constprop(volatile int*, function_ref)/24, function not inline candidate
a.cc:47:38: missed:   not inlinable: void seemingly_unused_foo()/20 -&gt; void do1.constprop(function_ref)/23, function not inline candidate
a.cc:43:21: missed:   not inlinable: int main()/19 -&gt; void do1(function_ref)/18, function not inline candidate
a.cc:40:6: missed:   not inlinable: void do1(function_ref)/18 -&gt; void do3(volatile int*, function_ref)/17, function not inline candidate
a.cc:34:8: missed:   not inlinable: void do3(volatile int*, function_ref)/17 -&gt; void do3.constprop(volatile int*, function_ref)/24, function not inline candidate
a.cc:33:15: missed:   not inlinable: void do3(volatile int*, function_ref)/17 -&gt; int is_recur()/16, function not inline candidate
a.cc:15:42: missed:   not inlinable: void callback_fn_R()/14 -&gt; long unsigned int __builtin_fwrite(const void*, size_t, size_t, FILE*)/22, function body not available
a.cc:14:40: missed:   not inlinable: void callback_fn_L()/13 -&gt; void L_run()/12, function not inline candidate
a.cc:13:34: missed:   not inlinable: void L_run()/12 -&gt; long unsigned int __builtin_fwrite(const void*, size_t, size_t, FILE*)/22, function body not available
Unit growth for small function inlining: 82-&gt;82 (0%)

Inlined 4 calls, eliminated 1 functions</code></pre>
<p>Here we see all sorts of rejected inline attempts. From what I
understand <code>-O1</code> only implies <code>-finline-functions-called-once</code>
but not <code>-finline-functions</code> (<code>-O2</code> default). That means <code>inline</code>
keyword (or a single-call <code>static</code> function call) is the usual
trigger for inlining decision.</p>
<h2 id="a-simpler-constant-propagation-example">A simpler constant propagation example</h2>
<p>Before chasing specifics of our breakage let’s have a look at a simpler
falid case of constant propagation across procedures. Let’s try the
following contrived example:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Forbid inlining to see the cloning effect */</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">))</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> f<span class="op">(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> a <span class="op">+</span> b<span class="op">;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="co">/* Add one level of indirection to force IPA discover f(..., 10) */</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">))</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> g<span class="op">(</span><span class="dt">int</span> a<span class="op">,</span> <span class="dt">int</span> b<span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> f<span class="op">(</span>a<span class="op">,</span> b<span class="op">);</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>  <span class="dt">volatile</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> g<span class="op">(</span>i<span class="op">,</span> <span class="dv">10</span><span class="op">);</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/example-1.svg" /></p>
<p>Here we define <code>f(int a, int b)</code> and <code>g(int a, int b)</code> function that
ever see <code>b = 10</code> value as their second argument. Will <code>gcc</code> do
something about that redundancy? We also mark both functions <code>noinline</code>
to prevent <code>gcc</code> from just inlining everything into <code>main()</code>.</p>
<p>Bulding and running it:</p>
<pre><code>$ gcc -O3 a.c -o a &amp;&amp; ./a
$ echo $?
52</code></pre>
<p>The program prints <code>42 + 10 = 52</code> as expected. Let’s look at the <code>IPA</code>
details to trace through it’s workings. I’ll use <code>-fdump-ipa-cp-slim</code>
to dump pass internal state and decisions:</p>
<pre><code>$ gcc -O3 -c a.c -fdump-ipa-cp-slim
$ cat a.c.081i.cp</code></pre>
<p>I’ll paste <code>a.c.081i.cp</code> in pieces and add a few comments around:</p>
<pre><code>IPA constant propagation start:

IPA structures before propagation:

Jump functions:
  Jump functions of caller  main/2:
    callsite  main/2 -&gt; g/1 :
       param 0: UNKNOWN
         value: 0x0, mask: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
         Unknown VR
       param 1: CONST: 10
         value: 0xa, mask: 0x0
         Unknown VR
  Jump functions of caller  g/1:
    callsite  g/1 -&gt; f/0 :
       param 0: PASS THROUGH: 0, op nop_expr
         value: 0x0, mask: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
         Unknown VR
       param 1: PASS THROUGH: 1, op nop_expr
         value: 0x0, mask: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
         Unknown VR
  Jump functions of caller  f/0:</code></pre>
<p>This is the list of initial facts about our program before the
optimization:</p>
<ul>
<li><code>f()</code> does not call any other function</li>
<li><code>g()</code> calls <code>f()</code>, it has 2 parameters and both get passed as is to <code>f()</code></li>
<li><code>main()</code> calls <code>g()</code>:
<ul>
<li>param0 has unknown value</li>
<li>param1 has known value <code>10</code> (<code>0xa</code>). Why <code>mask:</code> value is so large? An exercise for the reader.</li>
</ul></li>
</ul>
<p>Next step is to figure out if known constants propagate to callees in
any interesting way:</p>
<pre><code> Propagating constants:


overall_size: 20
 - context independent values, size: 6, time_benefit: 1.000000
     Decided to specialize for all known contexts, code not going to grow.
 - context independent values, size: 3, time_benefit: 1.000000
     Decided to specialize for all known contexts, code not going to grow.

IPA lattices after all propagation:

Lattices:
  Node: main/2:
  Node: g/1:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         int VARYING
        AGGS VARIABLE
    param [1]: 10 [loc_time: 0, loc_size: 0, prop_time: 0, prop_size: 0]
         ctxs: VARIABLE
         Bits: value = 0xa, mask = 0x0
         int [10, 10]
        AGGS VARIABLE
  Node: f/0:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         int VARYING
        AGGS VARIABLE
    param [1]: 10 [loc_time: 0, loc_size: 0, prop_time: 0, prop_size: 0]
         ctxs: VARIABLE
         Bits: value = 0xa, mask = 0x0
         int [10, 10]
        AGGS VARIABLE
</code></pre>
<p>Here propagation step figured out extra facts:</p>
<ul>
<li><code>f()</code>’s parameters are a bit more definite:
<ul>
<li>param0 is still unknown (<code>BOTTOM</code>)</li>
<li>param1 always has value <code>10</code></li>
</ul></li>
<li><code>g()</code>’s parameters have exactly the same structure as <code>f()</code>’s:
<ul>
<li>param0 is still unknown (<code>BOTTOM</code>)</li>
<li>param1 always has value <code>10</code></li>
</ul></li>
<li><code>main()</code> has nothing special about it’s parameters</li>
</ul>
<p><code>prop_time: 0, prop_size: 0</code> tell us that possible constant propagation
does not worsen runtime of the original code.</p>
<p>Then goes the decision phase:</p>
<pre><code>IPA decision stage:

 - Creating a specialized node of g/1 for all known contexts.
    replacing param #1 b with const 10
 - Creating a specialized node of f/0 for all known contexts.
    replacing param #1 b with const 10
Propagated bits info for function f.constprop/4:
 param 1: value = 0xa, mask = 0x0
Propagated bits info for function g.constprop/3:
 param 1: value = 0xa, mask = 0x0
Propagated bits info for function g/1:
 param 1: value = 0xa, mask = 0x0
Propagated bits info for function f/0:
 param 1: value = 0xa, mask = 0x0

IPA constant propagation end</code></pre>
<p>As expected <code>f()</code> and <code>g()</code> were replaced when equivalent functions
where their second parameter is always equals <code>10</code>. After the
transformation original <code>f()</code> and <code>g()</code> are no used anymore and can go
away. Call graph becomes slightly more complicated:</p>
<pre><code>;; Function f.constprop (f.constprop.0, funcdef_no=3, decl_uid=2004, cgraph_uid=5, symbol_order=4) (executed once)

Modification phase of node f.constprop/4
__attribute__((noinline))
int f.constprop (int a)
{
  int b;
  int _2;

  &lt;bb 3&gt; [local count: 1073741824]:

  &lt;bb 2&gt; [local count: 1073741824]:
  _2 = a_1(D) + 10;
  return _2;

}

;; Function g.constprop (g.constprop.0, funcdef_no=4, decl_uid=2003, cgraph_uid=4, symbol_order=3) (executed once)

Modification phase of node g.constprop/3
__attribute__((noinline))
int g.constprop (int a)
{
  int b;
  int _2;

  &lt;bb 3&gt; [local count: 1073741824]:

  &lt;bb 2&gt; [local count: 1073741824]:
  _2 = f (a_1(D), 10);
  return _2;

}

;; Function main (main, funcdef_no=2, decl_uid=1987, cgraph_uid=3, symbol_order=2) (executed once)

Modification phase of node main/2
int main ()
{
  volatile int i;
  int i.0_1;
  int _4;

  &lt;bb 2&gt; [local count: 1073741824]:
  i ={v} 42;
  i.0_1 ={v} i;
  _4 = g (i.0_1, 10);
  return _4;

}</code></pre>
<p>Note how this pass turned <code>int f(int a, int b) { return a + b; }</code> into
<code>int f.constprop(int a) { return a + 10; }</code>. While <code>g.constprop()</code> and
<code>main()</code> still do call 2-parameter forms of <code>f()</code> and <code>g()</code> in the
report.</p>
<p>Luckily that is not the final pass! If we look at final state at
<code>a.c.252t.optimized</code> (generated by
<code>gcc -O3 -c a.c -fdump-tree-optimized-slim</code>):</p>
<pre><code>__attribute__((noinline))
int f.constprop (int a)
{
  int _2;

  &lt;bb 2&gt;:
  _2 = a_1(D) + 10;
  return _2;
}

__attribute__((noinline))
int g.constprop (int a)
{
  int _2;
  &lt;bb 2&gt;:
  _2 = f.constprop (a_1(D)); [tail call]
  return _2;
}

int main ()
{
  volatile int i;
  int i.0_1;
  int _4;

  &lt;bb 2&gt;:
  i ={v} 42;
  i.0_1 ={v} i;
  _4 = g.constprop (i.0_1); [tail call]
  return _4;
}</code></pre>
<p>Or the same in more concise form:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/example-2.svg" /></p>
<p>All function are single-parameter now. <code>b = 10</code> was pushed all the way
down to <code>f.constprop()</code> definition.</p>
<h2 id="tracking-down-faulty-subsystem">Tracking down faulty subsystem</h2>
<p>Now back to our buggy example: why did <code>BAD</code> get printed at all? I had
no idea. Generated assembly code did not make sense.</p>
<p>First I bisected <code>gcc</code> to see if the change was small enough to
immediately see the bug. Bisect found regression in big
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e0403e95689af7">ipa-cp: Better representation of aggregate values we clone for</a>
commit: <code>5 files changed, 733 insertions(+), 666 deletions(-)</code>.
The commit is not supposed to bring in any visible changes to
the algorightm used. It should only improve <code>gcc</code> efficiency a bit
without any change in the output. The diff in commit was too large for
me to understand. I had no idea what I was looking at.</p>
<p>I moved to inspect <code>gcc</code>’s transformation stages. Each individual
optimization pass is usually simple enough that we can manually
verify if it’s effect is correct. At least for me that works only
for small input source files.</p>
<p><code>gcc</code>’s pass debugging steps hide under <code>-fdump-*</code> flags. Most
frequentl flags I use are:</p>
<ul>
<li><code>-fdump-tree-all</code> (or similar <code>-fdump-tree-all-all</code>, <code>-fdump-tree-all-slim</code> that differ in verbosity)</li>
<li><code>-fdump-ipa-all</code> (or <code>-fdump-ipa-all-all</code> and <code>-fdump-ipa-all-slim</code>)</li>
<li><code>-fdump-rtl-all</code> (or <code>-fdump-rtl-all-all</code> and <code>-fdump-ipa-rtl-slim</code>)</li>
</ul>
<p><code>gcc</code> man page defines many more output formats and suffix meanings.</p>
<p>Building the example with <code>-fdump-tree-all-slim</code> creates many files
including <code>a.cc.254t.optimized</code> of this content:</p>
<pre><code>;; Function callback_fn_R (_ZL13callback_fn_Rv, funcdef_no=14, decl_uid=3302, cgraph_uid=15, symbol_order=14)
void callback_fn_R ()
{
  struct FILE * stderr.0_1;

  &lt;bb 2&gt;:
  stderr.0_1 = stderr;
  __builtin_fwrite (&quot;GOOD\n&quot;, 1, 5, stderr.0_1);
  return;

}

;; Function L_run (_ZL5L_runv, funcdef_no=12, decl_uid=3298, cgraph_uid=13, symbol_order=12)
void L_run ()
{
  struct FILE * stderr.5_1;

  &lt;bb 2&gt;:
  stderr.5_1 = stderr;
  __builtin_fwrite (&quot;BAD\n&quot;, 1, 4, stderr.5_1);
  return;

}
;; Function do3.constprop (_ZL3do3PVi12function_ref.constprop.0, funcdef_no=21, decl_uid=3391, cgraph_uid=23, symbol_order=24)
void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  int _2;

  &lt;bb 2&gt;:
  L_run ();
  _2 = is_recur ();
  if (_2 != 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt;:
  do3.constprop (punused_3(D), Expired);

  &lt;bb 4&gt;:
  return;

}

;; Function main (main, funcdef_no=18, decl_uid=3357, cgraph_uid=19, symbol_order=19) (executed once)
int main ()
{
  struct function_ref Expired;
  volatile int unused;
  int _5;

  &lt;bb 2&gt;:
  unused ={v} 42;
  Expired.callback = callback_fn_R;
  callback_fn_R ();
  _5 = is_recur ();
  if (_5 != 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt;:
  do3.constprop (&amp;unused, Expired);

  &lt;bb 4&gt;:
  return 0;

}
...
void seemingly_unused_foo ()
{
  volatile int unused;
  struct function_ref Expired;

  Expired.callback = callback_fn_L;
  unused ={v} 42;
  do3.constprop (&amp;unused, Expired);
  return;
}</code></pre>
<p>While it’s a lot of text it’s almost identical source program we wrote.
The only difference is verbosity: explicit assignments instead of
constructors, explicit label jumps and similar.</p>
<p>Having skimmed through it we can spot a few curious things:</p>
<ul>
<li><code>do3()</code> disappered completely. <code>do3.constprop()</code> is the only one left
and it calls only <code>L_run()</code> (from <code>callback_fn_L</code>). There is no
<code>callback_fn_R</code> call.</li>
<li><code>seemingly_unused_foo()</code> calls <code>do3.constprop()</code> directly (ok).</li>
<li><code>main()</code> calls <code>callback_fn_R()</code> directly (ok) and calls <code>do3.constprop()</code>
(bug!).</li>
<li><code>do1()</code> was completely optimised away by inlining into
<code>main()</code> and <code>seemingly_unused_foo()</code>.</li>
</ul>
<p>Let’s look at the output of <code>IPA</code> phases instead. I used
<code>-fdump-ipa-all-slim</code> to generate the logs. Among other things
it generates <code>a.cc.081i.cp</code> file:</p>
<pre><code>IPA constant propagation start:

IPA structures before propagation:

Jump functions:
  Jump functions of caller  void seemingly_unused_foo()/20:
    callsite  void seemingly_unused_foo()/20 -&gt; void do1(function_ref)/18 :
       param 0: UNKNOWN
         Aggregate passed by value:
           offset: 0, type: void (*&lt;T53f&gt;) (void), CONST: callback_fn_L
         Unknown bits
         Unknown VR
  Jump functions of caller  int main()/19:
    callsite  int main()/19 -&gt; void do1(function_ref)/18 :
       param 0: UNKNOWN
         Aggregate passed by value:
           offset: 0, type: void (*&lt;T53f&gt;) (void), CONST: callback_fn_R
         Unknown bits
         Unknown VR
...
  Jump functions of caller  void do3(volatile int*, function_ref)/17:
    callsite  void do3(volatile int*, function_ref)/17 -&gt; void do3(volatile int*, function_ref)/17 :
       param 0: PASS THROUGH: 0, op nop_expr
         value: 0x0, mask: 0xffffffffffffffff
         Unknown VR
       param 1: PASS THROUGH: 1, op nop_expr
         Unknown bits
         Unknown VR
    callsite  void do3(volatile int*, function_ref)/17 -&gt; int is_recur()/16 :
    indirect aggregate callsite, calling param 1, offset 0, by_value, for stmt _1 ();
...
IPA lattices after all propagation:

Lattices:
  ...
  Node: void do1(function_ref)/18:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 0, loc_size: 7, prop_time: 17, prop_size: 20]
               callback_fn_R [loc_time: 0, loc_size: 7, prop_time: 9, prop_size: 20]
  Node: void do3(volatile int*, function_ref)/17:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits: value = 0x0, mask = 0xfffffffffffffffc
         [irange] int VARYING
        AGGS VARIABLE
    param [1]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 17, loc_size: 13, prop_time: 17, prop_size: 13]
               callback_fn_R [loc_time: 9, loc_size: 13, prop_time: 9, prop_size: 13]
...
IPA decision stage:

  Creating a specialized node of void do1(function_ref)/18.
  Creating a specialized node of void do3(volatile int*, function_ref)/17.
ipa-prop: Discovered an indirect call to a known target (void do3.constprop(volatile int*, function_ref)/24 -&gt; void callback_fn_L()/13), for stmt _1 ();
 - adding an extra caller void do3(volatile int*, function_ref)/17 of void do3.constprop(volatile int*, function_ref)/24

IPA constant propagation end
...
Symbol table:

_ZL3do3PVi12function_ref.constprop.0/24 (void do3.constprop(volatile int*, function_ref))
  Type: function definition analyzed
  Visibility:
  References: _ZL13callback_fn_Lv/13 (addr) 
  Referring: 
  Clone of _ZL3do3PVi12function_ref/17
  Availability: local
  Function flags: count:1073741824 (estimated locally) local
  Called by: _ZL3do3PVi12function_ref/17 (354334800 (estimated locally),0.33 per call) (can throw external) _ZL3do3PVi12function_ref.constprop.0/24 (354334800 (estimated locally),0.33 per call) (can throw external) _ZL3do112function_ref.constprop.0/23 (1073741824 (estimated locally),1.00 per call) (can throw external) 
  Calls: _ZL13callback_fn_Lv/13 (1073741824 (estimated locally),1.00 per call) (can throw external) _ZL8is_recurv/16 (1073741824 (estimated locally),1.00 per call) _ZL3do3PVi12function_ref.constprop.0/24 (354334800 (estimated locally),0.33 per call) (can throw external) 
...
;; Function do3.constprop (_ZL3do3PVi12function_ref.constprop.0, funcdef_no=21, decl_uid=3391, cgraph_uid=23, symbol_order=24)

Modification phase of node void do3.constprop(volatile int*, function_ref)/24
     Aggregate replacements: 1[0]=callback_fn_L
void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  void (*&lt;T53f&gt;) (void) _1;
  int _2;

  &lt;bb 5&gt;:

  &lt;bb 2&gt;:
  _1 = callback_fn_L;
  _1 ();
  _2 = is_recur ();
  if (_2 != 0)
    goto &lt;bb 3&gt;;
  else
    goto &lt;bb 4&gt;;

  &lt;bb 3&gt;:
  do3 (punused_3(D), Expired);

  &lt;bb 4&gt;:
  return;
}
...
;; Function main (main, funcdef_no=18, decl_uid=3357, cgraph_uid=19, symbol_order=19) (executed once)

Modification phase of node int main()/19
int main ()
{
  struct function_ref D.3363;

  &lt;bb 2&gt;:
  D.3363.callback = callback_fn_R;
  do1 (D.3363);
  return 0;

}



;; Function seemingly_unused_foo (_Z20seemingly_unused_foov, funcdef_no=19, decl_uid=3360, cgraph_uid=20, symbol_order=20)

Modification phase of node void seemingly_unused_foo()/20
void seemingly_unused_foo ()
{
  struct function_ref D.3373;
  &lt;bb 2&gt;:
  D.3373.callback = callback_fn_L;
  do1 (D.3373);
  return;
}</code></pre>
<p>A lot more text that before. Here <code>IPA</code> pass tells us a bit of inferred
state out of our program and then applies some transformations to it.</p>
<p>The above output tells us that <code>do3()</code> was cloned into <code>do3.constprop()</code>
with explicit call of <code>_1 = callback_fn_L; _1 ();</code> and nothing else.
According to modified functions output <code>do3.constprop()</code> is not used in
anywhere.</p>
<p>But that is misleading: symbol table is clearly telling us the reverse:
<code>_ZL3do3PVi12function_ref.constprop.0/24</code> (aka <code>do3.constprop()</code>)
<code>Called by: _ZL3do3PVi12function_ref/17</code> (aka <code>do3()</code>),
<code>_ZL3do3PVi12function_ref.constprop.0/24</code> (aka <code>do3.constprop()</code>),
<code>_ZL3do112function_ref.constprop.0/23</code> (aka <code>do1.constprop()</code>).</p>
<p>The most suspicious output here is presence of
<code>do3() -&gt; do3.constprop()</code> edge. How could <code>do3()</code> call
<code>do3.constprop()</code>? The line
<code>- adding an extra caller void do3(volatile int*, function_ref)/17 of void do3.constprop(volatile int*, function_ref)/24</code>
in the log is a good hint where to look at the details in <code>gcc</code>’s source
code.</p>
<p>Anyway, the resulting printed code is not directly broken. So far it’s
“only” edge information that looks incorrect. Maybe I am misinterpreting
it?</p>
<p>Now let’s look at the next <code>a.cc.085i.inline</code> <code>IPA</code> step:</p>
<pre><code>...
Deciding on functions to be inlined into all callers and removing useless speculations:

Inlining void do1.constprop(function_ref)/23 size 7.
 Called once from void seemingly_unused_foo()/20 6 insns.
  Parm map:  -1
Updated mod-ref summary for void seemingly_unused_foo()/20
  loads:
  stores:
  Side effects
  Nondeterministic
  Try dse
 Inlined into void seemingly_unused_foo()/20 which now has 8 size

Inlining void do3(volatile int*, function_ref)/17 size 14.
 Called once from void do1(function_ref)/18 7 insns.
  Parm map:  -5 0
Updated mod-ref summary for void do1(function_ref)/18
  loads:
  stores:
  Side effects
  Nondeterministic
 Inlined into void do1(function_ref)/18 which now has 14 size

Inlining void callback_fn_L()/13 size 4.
 Called once from void do3.constprop(volatile int*, function_ref)/24 12 insns.
  Parm map: 
Updated mod-ref summary for void do3.constprop(volatile int*, function_ref)/24
  loads:
  stores:
 Inlined into void do3.constprop(volatile int*, function_ref)/24 which now has 12 size

Inlining void do1(function_ref)/18 size 14.
 Called once from int main()/19 6 insns.
  Parm map:  -1
Updated mod-ref summary for int main()/19
  loads:
  stores:
  Side effects
  Nondeterministic
  Try dse
Node void do1(function_ref)/27 promoted to executed once.
Node void do3(volatile int*, function_ref)/28 promoted to executed once.
 Inlined into int main()/19 which now has 15 size
Overall time estimate: 204.840000 weighted by profile: 0.000000
...
;; Function do3.constprop (_ZL3do3PVi12function_ref.constprop.0, funcdef_no=21, decl_uid=3391, cgraph_uid=23, symbol_order=24)
void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  void (*&lt;T53f&gt;) (void) _1;
  int _2;

  &lt;bb 2&gt;:
  _1 = callback_fn_L;
  L_run ();
  _2 = is_recur ();
  if (_2 != 0)
    goto &lt;bb 3&gt;;
  else
    goto &lt;bb 4&gt;;

  &lt;bb 3&gt;:
  do3.constprop (punused_3(D), Expired);

  &lt;bb 4&gt;:
  return;

}

;; Function main (main, funcdef_no=18, decl_uid=3357, cgraph_uid=19, symbol_order=19) (executed once)
int main ()
{
  struct function_ref Expired;
  volatile int unused;
  struct function_ref Expired;
  struct function_ref D.3363;
  void (*&lt;T53f&gt;) (void) _4;
  int _5;

  &lt;bb 2&gt;:
  D.3363.callback = callback_fn_R;
  Expired = D.3363;
  unused ={v} 42;
  Expired = Expired;
  _4 = Expired.callback;
  _4 ();
  _5 = is_recur ();
  if (_5 != 0)
    goto &lt;bb 3&gt;;
  els
    goto &lt;bb 4&gt;;

  &lt;bb 3&gt;:
  do3.constprop (&amp;unused, Expired);

  &lt;bb 4&gt;:
  return 0;
}</code></pre>
<p>Here we can see how problematic edges discovered in <code>cp</code> phase broke
<code>inline</code>: <code>main()</code> function now calls <code>do3.constprop ();</code> (after <code>do3()</code>
inline) and that encodes <code>L_run ();</code> call to print <code>BAD</code>.</p>
<h2 id="diving-into-ipa-cp">Diving into ipa-cp</h2>
<p>Now let’s try to figure out why does <code>ipa-cp</code> add a problematic
<code>do3() -&gt; do3.constprop()</code> edge.</p>
<p><code>gcc</code> frequently has great comments in the source code on details of
what a pass is supposed to do. <code>ipa-cp</code> is no exception: it hides
in <a href="%3Chttps://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/ipa-cp.cc;h=d2bcd5e5e691ced8dba4b496b9d044eb2777d2b2;hb=HEAD#l23">gcc/ipa-cp.cc file</a>:</p>
<pre><code>  23 /* Interprocedural constant propagation (IPA-CP).
  24 
  25    The goal of this transformation is to
  26 
  27    1) discover functions which are always invoked with some arguments with the
  28       same known constant values and modify the functions so that the
  29       subsequent optimizations can take advantage of the knowledge, and
  30 
  31    2) partial specialization - create specialized versions of functions
  32       transformed in this way if some parameters are known constants only in
  33       certain contexts but the estimated tradeoff between speedup and cost size
  34       is deemed good.
  35 
  36    The algorithm also propagates types and attempts to perform type based
  37    devirtualization.  Types are propagated much like constants.
  38 
  39    The algorithm basically consists of three stages.  In the first, functions
  40    are analyzed one at a time and jump functions are constructed for all known
  41    call-sites.  In the second phase, the pass propagates information from the
  42    jump functions across the call to reveal what values are available at what
  43    call sites, performs estimations of effects of known values on functions and
  44    their callees, and finally decides what specialized extra versions should be
  45    created.  In the third, the special versions materialize and appropriate
  46    calls are redirected.
  47 
  48    The algorithm used is to a certain extent based on &quot;Interprocedural Constant
  49    Propagation&quot;, by David Callahan, Keith D Cooper, Ken Kennedy, Linda Torczon,
  50    Comp86, pg 152-161 and &quot;A Methodology for Procedure Cloning&quot; by Keith D
  51    Cooper, Mary W. Hall, and Ken Kennedy.
  52 
  53 
  54    First stage - intraprocedural analysis
  55    =======================================
  56 
  57    This phase computes jump_function and modification flags.
  58 
  59    A jump function for a call-site represents the values passed as an actual
  60    arguments of a given call-site. In principle, there are three types of
  61    values:
  62 
  63    Pass through - the caller's formal parameter is passed as an actual
  64                   argument, plus an operation on it can be performed.
  65    Constant - a constant is passed as an actual argument.
  66    Unknown - neither of the above.
  67 
  68    All jump function types are described in detail in ipa-prop.h, together with
  69    the data structures that represent them and methods of accessing them.
  70 
  71    ipcp_generate_summary() is the main function of the first stage.
  72 
  73    Second stage - interprocedural analysis
  74    ========================================
  75 
  76    This stage is itself divided into two phases.  In the first, we propagate
  77    known values over the call graph, in the second, we make cloning decisions.
  78    It uses a different algorithm than the original Callahan's paper.
  79 
  80    First, we traverse the functions topologically from callers to callees and,
  81    for each strongly connected component (SCC), we propagate constants
  82    according to previously computed jump functions.  We also record what known
  83    values depend on other known values and estimate local effects.  Finally, we
  84    propagate cumulative information about these effects from dependent values
  85    to those on which they depend.
  86 
  87    Second, we again traverse the call graph in the same topological order and
  88    make clones for functions which we know are called with the same values in
  89    all contexts and decide about extra specialized clones of functions just for
  90    some contexts - these decisions are based on both local estimates and
  91    cumulative estimates propagated from callees.
  92 
  93    ipcp_propagate_stage() and ipcp_decision_stage() together constitute the
  94    third stage.
  95 
  96    Third phase - materialization of clones, call statement updates.
  97    ============================================
  98 
  99    This stage is currently performed by call graph code (mainly in cgraphunit.cc
 100    and tree-inline.cc) according to instructions inserted to the call graph by
 101    the second stage.  */</code></pre>
<p>The idea is straighforward:</p>
<ul>
<li>collect all the call sites with their parameters (constant parameters
are most interesting to propagate them into callees)</li>
<li>sort the call graph topologically</li>
<li>estimate propagation effect (cost reduction)</li>
<li>clone functions by applying propagated constants where it’s beneficial</li>
<li>patch call sites to use clones instead of original functions</li>
</ul>
<p>While the whole algorithm might be overwhelming each of it’s step is not
too big to trace it through for our concrete example.</p>
<p>In theory <code>ipa-cp</code> should perform a transformation similar to the following:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/fig-1.svg" /></p>
<p>I expected callback <code>cb</code> indirection to be fully specialised and
runtime indirection to completely go away.</p>
<p>In practice something like the following occurs:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/fig-2.svg" /></p>
<p>Note: <code>main()</code> manages to both inline <code>GOOD</code> callback and call
specialized <code>do1.constprop()</code> <code>BAD</code> branch. The edge marked with <code>Bug!</code>
is the actual bug here.</p>
<p>To summarise the <code>ipa-cp</code> pass once again it consists of 3 steps:</p>
<ul>
<li>collect information around known call sites of the functions
(“jump functions”)</li>
<li>calculate propagation information around known calls to see how far
they reach unmodified and how many functions get always called with
the same arguments (“constant propagation”)</li>
<li>generate specialized function clones and redirect matching call sites
to the clones (“decision”)</li>
</ul>
<p>Let’s look in more detail at our example to find out what specifically
went wrong. I’ll post code snippet again:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">// #define DISABLE_HACK 1</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> L_run<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;BAD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_L<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> L_run<span class="op">();</span> <span class="op">}</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> callback_fn_R<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;GOOD</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> function_ref <span class="op">{</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">(*</span>callback<span class="op">)(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a><span class="co">// allow one level of recursion to call callback twice</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> is_recur<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>  <span class="dt">static</span> <span class="dt">int</span> n <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>  <span class="cf">switch</span> <span class="op">(</span>n<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">default</span><span class="op">:</span> <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do3<span class="op">(</span><span class="dt">volatile</span> <span class="dt">int</span> <span class="op">*</span> punused<span class="op">,</span> function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>  Expired<span class="op">.</span>callback<span class="op">();</span></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>is_recur<span class="op">())</span></span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>    do3<span class="op">(</span>punused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> do1<span class="op">(</span>function_ref Expired<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a>  <span class="dt">volatile</span> <span class="dt">int</span> unused <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-32"><a href="#cb19-32" aria-hidden="true" tabindex="-1"></a>  do3<span class="op">(&amp;</span>unused<span class="op">,</span> Expired<span class="op">);</span></span>
<span id="cb19-33"><a href="#cb19-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-34"><a href="#cb19-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-35"><a href="#cb19-35" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_R<span class="op">});</span> <span class="op">}</span></span>
<span id="cb19-36"><a href="#cb19-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-37"><a href="#cb19-37" aria-hidden="true" tabindex="-1"></a><span class="pp">#if defined(DISABLE_HACK)</span></span>
<span id="cb19-38"><a href="#cb19-38" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb19-39"><a href="#cb19-39" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> seemingly_unused_foo<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> do1<span class="op">(</span>function_ref<span class="op">{</span>callback_fn_L<span class="op">});</span> <span class="op">}</span></span>
<span id="cb19-40"><a href="#cb19-40" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>
<p>And relevant analysis again:</p>
<pre><code>IPA lattices after all propagation:

Lattices:
  ...
  Node: void do1(function_ref)/18:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 0, loc_size: 7, prop_time: 17, prop_size: 20]
               callback_fn_R [loc_time: 0, loc_size: 7, prop_time: 9, prop_size: 20]
  Node: void do3(volatile int*, function_ref)/17:
    param [0]: VARIABLE
         ctxs: VARIABLE
         Bits: value = 0x0, mask = 0xfffffffffffffffc
         [irange] int VARYING
        AGGS VARIABLE
    param [1]: VARIABLE
         ctxs: VARIABLE
         Bits unusable (BOTTOM)
         [irange] int VARYING
        offset 0: callback_fn_L [loc_time: 17, loc_size: 13, prop_time: 17, prop_size: 13]
               callback_fn_R [loc_time: 9, loc_size: 13, prop_time: 9, prop_size: 13]

...
IPA decision stage:

  Creating a specialized node of void do1(function_ref)/18.
  Creating a specialized node of void do3(volatile int*, function_ref)/17.
ipa-prop: Discovered an indirect call to a known target (void do3.constprop(volatile int*, function_ref)/24 -&gt; void callback_fn_L()/13), for stmt _1 ();
 - adding an extra caller void do3(volatile int*, function_ref)/17 of void do3.constprop(volatile int*, function_ref)/24</code></pre>
<p>Here propagation phase correctly sees that <code>do3()</code> sees two constants
being passed as parameters: <code>callback_fn_L()</code> and <code>callback_fn_R()</code>.</p>
<p>Thus whatever <code>do3.constprop()</code> is specialized against <code>do3()</code> can’t call
into it on it’s own: <code>do3()</code> has to work for <code>callback_fn_L()</code> and <code>callback_fn_R()</code>
inputs.</p>
<p>If we look at <code>adding an extra caller</code> string in <code>gcc</code>’s source code we
will see the conditon on which <code>gcc</code> decided it’s OK
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/ipa-cp.cc;h=d5230c7c5e6b150f7ac9e1a1445178239dc67c39;hb=603af25815523ba9e39e9b441cde5308423a9238#l5918">in perhaps_add_new_callers()</a>:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* Given an original NODE and a VAL for which we have already created a</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="co">   specialized clone, look whether there are incoming edges that still lead</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="co">   into the old node but now also bring the requested value and also conform to</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="co">   all other criteria such that they can be redirected the special node.</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="co">   This function can therefore redirect the final edge in a SCC.  */</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>template <span class="op">&lt;</span>typename valtype<span class="op">&gt;</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>perhaps_add_new_callers <span class="op">(</span>cgraph_node <span class="op">*</span>node<span class="op">,</span> ipcp_value<span class="op">&lt;</span>valtype<span class="op">&gt;</span> <span class="op">*</span>val<span class="op">)</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>  ipcp_value_source<span class="op">&lt;</span>valtype<span class="op">&gt;</span> <span class="op">*</span>src<span class="op">;</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>  profile_count redirected_sum <span class="op">=</span> profile_count<span class="op">::</span>zero <span class="op">();</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span>src <span class="op">=</span> val<span class="op">-&gt;</span>sources<span class="op">;</span> src<span class="op">;</span> src <span class="op">=</span> src<span class="op">-&gt;</span>next<span class="op">)</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a>      <span class="kw">struct</span> cgraph_edge <span class="op">*</span>cs <span class="op">=</span> src<span class="op">-&gt;</span>cs<span class="op">;</span></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a>      <span class="cf">while</span> <span class="op">(</span>cs<span class="op">)</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a>          <span class="cf">if</span> <span class="op">(</span>cgraph_edge_brings_value_p <span class="op">(</span>cs<span class="op">,</span> src<span class="op">,</span> node<span class="op">,</span> val<span class="op">)</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a>              <span class="op">&amp;&amp;</span> cgraph_edge_brings_all_scalars_for_node <span class="op">(</span>cs<span class="op">,</span> val<span class="op">-&gt;</span>spec_node<span class="op">)</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a>              <span class="op">&amp;&amp;</span> cgraph_edge_brings_all_agg_vals_for_node <span class="op">(</span>cs<span class="op">,</span> val<span class="op">-&gt;</span>spec_node<span class="op">))</span></span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span>
<span id="cb21-23"><a href="#cb21-23" aria-hidden="true" tabindex="-1"></a>              <span class="cf">if</span> <span class="op">(</span>dump_file<span class="op">)</span></span>
<span id="cb21-24"><a href="#cb21-24" aria-hidden="true" tabindex="-1"></a>                fprintf <span class="op">(</span>dump_file<span class="op">,</span> <span class="st">&quot; - adding an extra caller </span><span class="sc">%s</span><span class="st"> of </span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span></span>
<span id="cb21-25"><a href="#cb21-25" aria-hidden="true" tabindex="-1"></a>                         cs<span class="op">-&gt;</span>caller<span class="op">-&gt;</span>dump_name <span class="op">(),</span></span>
<span id="cb21-26"><a href="#cb21-26" aria-hidden="true" tabindex="-1"></a>                         val<span class="op">-&gt;</span>spec_node<span class="op">-&gt;</span>dump_name <span class="op">());</span></span>
<span id="cb21-27"><a href="#cb21-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-28"><a href="#cb21-28" aria-hidden="true" tabindex="-1"></a>              cs<span class="op">-&gt;</span>redirect_callee_duplicating_thunks <span class="op">(</span>val<span class="op">-&gt;</span>spec_node<span class="op">);</span></span>
<span id="cb21-29"><a href="#cb21-29" aria-hidden="true" tabindex="-1"></a>              val<span class="op">-&gt;</span>spec_node<span class="op">-&gt;</span>expand_all_artificial_thunks <span class="op">();</span></span>
<span id="cb21-30"><a href="#cb21-30" aria-hidden="true" tabindex="-1"></a>              <span class="cf">if</span> <span class="op">(</span>cs<span class="op">-&gt;</span>count<span class="op">.</span>ipa <span class="op">().</span>initialized_p <span class="op">())</span></span>
<span id="cb21-31"><a href="#cb21-31" aria-hidden="true" tabindex="-1"></a>                redirected_sum <span class="op">=</span> redirected_sum <span class="op">+</span> cs<span class="op">-&gt;</span>count<span class="op">.</span>ipa <span class="op">();</span></span>
<span id="cb21-32"><a href="#cb21-32" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span>
<span id="cb21-33"><a href="#cb21-33" aria-hidden="true" tabindex="-1"></a>          cs <span class="op">=</span> get_next_cgraph_edge_clone <span class="op">(</span>cs<span class="op">);</span></span>
<span id="cb21-34"><a href="#cb21-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb21-35"><a href="#cb21-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb21-36"><a href="#cb21-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-37"><a href="#cb21-37" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>redirected_sum<span class="op">.</span>nonzero_p <span class="op">())</span></span>
<span id="cb21-38"><a href="#cb21-38" aria-hidden="true" tabindex="-1"></a>    update_specialized_profile <span class="op">(</span>val<span class="op">-&gt;</span>spec_node<span class="op">,</span> node<span class="op">,</span> redirected_sum<span class="op">);</span></span>
<span id="cb21-39"><a href="#cb21-39" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb21-40"><a href="#cb21-40" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb21-41"><a href="#cb21-41" aria-hidden="true" tabindex="-1"></a><span class="co">/* Determine whether CS also brings all aggregate values that NODE is</span></span>
<span id="cb21-42"><a href="#cb21-42" aria-hidden="true" tabindex="-1"></a><span class="co">   specialized for.  */</span></span>
<span id="cb21-43"><a href="#cb21-43" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-44"><a href="#cb21-44" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">bool</span></span>
<span id="cb21-45"><a href="#cb21-45" aria-hidden="true" tabindex="-1"></a>cgraph_edge_brings_all_agg_vals_for_node <span class="op">(</span><span class="kw">struct</span> cgraph_edge <span class="op">*</span>cs<span class="op">,</span></span>
<span id="cb21-46"><a href="#cb21-46" aria-hidden="true" tabindex="-1"></a>                                          <span class="kw">struct</span> cgraph_node <span class="op">*</span>node<span class="op">)</span></span>
<span id="cb21-47"><a href="#cb21-47" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb21-48"><a href="#cb21-48" aria-hidden="true" tabindex="-1"></a>  ipcp_transformation <span class="op">*</span>ts <span class="op">=</span> ipcp_get_transformation_summary <span class="op">(</span>node<span class="op">);</span></span>
<span id="cb21-49"><a href="#cb21-49" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>ts <span class="op">||</span> vec_safe_is_empty <span class="op">(</span>ts<span class="op">-&gt;</span>m_agg_values<span class="op">))</span></span>
<span id="cb21-50"><a href="#cb21-50" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> true<span class="op">;</span></span>
<span id="cb21-51"><a href="#cb21-51" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-52"><a href="#cb21-52" aria-hidden="true" tabindex="-1"></a>  <span class="dt">const</span> ipa_argagg_value_list existing <span class="op">(</span>ts<span class="op">-&gt;</span>m_agg_values<span class="op">);</span></span>
<span id="cb21-53"><a href="#cb21-53" aria-hidden="true" tabindex="-1"></a>  auto_vec<span class="op">&lt;</span>ipa_argagg_value<span class="op">,</span> <span class="dv">32</span><span class="op">&gt;</span> edge_values<span class="op">;</span></span>
<span id="cb21-54"><a href="#cb21-54" aria-hidden="true" tabindex="-1"></a>  ipa_node_params <span class="op">*</span>dest_info <span class="op">=</span> ipa_node_params_sum<span class="op">-&gt;</span>get <span class="op">(</span>node<span class="op">);</span></span>
<span id="cb21-55"><a href="#cb21-55" aria-hidden="true" tabindex="-1"></a>  gcc_checking_assert <span class="op">(</span>dest_info<span class="op">-&gt;</span>ipcp_orig_node<span class="op">);</span></span>
<span id="cb21-56"><a href="#cb21-56" aria-hidden="true" tabindex="-1"></a>  dest_info <span class="op">=</span> ipa_node_params_sum<span class="op">-&gt;</span>get <span class="op">(</span>dest_info<span class="op">-&gt;</span>ipcp_orig_node<span class="op">);</span></span>
<span id="cb21-57"><a href="#cb21-57" aria-hidden="true" tabindex="-1"></a>  push_agg_values_from_edge <span class="op">(</span>cs<span class="op">,</span> dest_info<span class="op">,</span> <span class="op">&amp;</span>edge_values<span class="op">,</span> <span class="op">&amp;</span>existing<span class="op">);</span></span>
<span id="cb21-58"><a href="#cb21-58" aria-hidden="true" tabindex="-1"></a>  <span class="dt">const</span> ipa_argagg_value_list avl <span class="op">(&amp;</span>edge_values<span class="op">);</span></span>
<span id="cb21-59"><a href="#cb21-59" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> avl<span class="op">.</span>superset_of_p <span class="op">(</span>existing<span class="op">);</span></span>
<span id="cb21-60"><a href="#cb21-60" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Given that we pass a <code>struct { ... }</code> as a parameter our condition that
should have failed lives at <code>cgraph_edge_brings_all_agg_vals_for_node (cs, val-&gt;spec_node)</code>
call. It is supposed to check that all the parameters that our <code>d3.constprop()</code>
is specialised against is enough to cover all the call sites.</p>
<p><code>cgraph_edge_brings_all_agg_vals_for_node()</code> just implements that:
<code>avl</code> contains all values from seen edges while <code>existing</code> contains
values <code>node</code> is specialised against. Adding simple
<code>avl.dump (stderr); existing.dump (stderr);</code> shows the discrepancy.</p>
<p>A bit of extra debugging revealed that <code>push_agg_values_from_edge()</code> is
slightly broken in the way it handles self-recursive functions like
<code>d3()</code>: instead of extending already known values extracted from
specialised node (passed as <code>&amp;existing</code>) it just reuses <code>&amp;existing</code>
value as if no other information is present.</p>
<p>The workaround to test the theory was simple: just drop this preseed.</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/ipa-cp.cc</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/ipa-cp.cc</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -5868,35 +5868,35 @@ cgraph_edge_brings_all_scalars_for_node (struct cgraph_edge *cs,</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a> /* Determine whether CS also brings all aggregate values that NODE is</span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>    specialized for.  */</span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a> static bool</span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a> cgraph_edge_brings_all_agg_vals_for_node (struct cgraph_edge *cs,</span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>                                          struct cgraph_node *node)</span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a>   ipcp_transformation *ts = ipcp_get_transformation_summary (node);</span>
<span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a>   if (!ts || vec_safe_is_empty (ts-&gt;m_agg_values))</span>
<span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>     return true;</span>
<span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a>   const ipa_argagg_value_list existing (ts-&gt;m_agg_values);</span>
<span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a>   auto_vec&lt;ipa_argagg_value, 32&gt; edge_values;</span>
<span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a>   ipa_node_params *dest_info = ipa_node_params_sum-&gt;get (node);</span>
<span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a>   gcc_checking_assert (dest_info-&gt;ipcp_orig_node);</span>
<span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a>   dest_info = ipa_node_params_sum-&gt;get (dest_info-&gt;ipcp_orig_node);</span>
<span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a><span class="st">-  push_agg_values_from_edge (cs, dest_info, &amp;edge_values, &amp;existing);</span></span>
<span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a><span class="va">+  push_agg_values_from_edge (cs, dest_info, &amp;edge_values, NULL);</span></span>
<span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a>   const ipa_argagg_value_list avl (&amp;edge_values);</span>
<span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a>   return avl.superset_of_p (existing);</span>
<span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>That was enough to repair this test and <code>llvm-11</code> and <code>llvm-12</code> test
suite. The actual fix is slightly less conservative and uses <code>&amp;existing</code>
values in propagation phase when edge values are not fully discovered
yet.</p>
<p>Martin did a proper fix in
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=c4a92a9117a034e7cf291ae51d8b9b844fb5a88b">ipa-cp: Do not be too optimistic about self-recursive edges</a>
commit.</p>
<h2 id="optimized-example-after-the-fix">Optimized example after the fix</h2>
<p>Here is the final state built with <code>gcc -O1 -fipa-cp -fipa-cp-clone a.cc -o a -fdump-tree-all-slim</code>:</p>
<pre><code>void do3 (volatile int * punused, struct function_ref Expired)
{
  static int n = &lt;&lt;&lt; omitted &gt;&gt;&gt;;
  void (*&lt;T545&gt;) (void) _1;
  int n.3_9;
  int _10;

  &lt;bb 2&gt; [local count: 1073741824]:
  _1 = Expired.callback;
  _1 ();
  n.3_9 = n;
  _10 = n.3_9 + 1;
  n = _10;
  if (n.3_9 == 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt; [local count: 354334800]:
  do3 (punused_7(D), Expired);

  &lt;bb 4&gt; [local count: 1073741824]:
  return;
}

void callback_fn_R ()
{
  struct FILE * stderr.0_1;

  &lt;bb 2&gt; [local count: 1073741824]:
  stderr.0_1 = stderr;
  __builtin_fwrite (&quot;GOOD\n&quot;, 1, 5, stderr.0_1);
  return;
}

void L_run ()
{
  struct FILE * stderr.5_1;

  &lt;bb 2&gt; [local count: 1073741824]:
  stderr.5_1 = stderr;
  __builtin_fwrite (&quot;BAD\n&quot;, 1, 4, stderr.5_1);
  return;
}

void callback_fn_L ()
{
  &lt;bb 2&gt; [local count: 1073741824]:
  L_run ();
  return;
}

void do3.constprop (volatile int * punused, struct function_ref Expired)
{
  static int n = &lt;&lt;&lt; omitted &gt;&gt;&gt;;
  int n.3_9;
  int _10;

  &lt;bb 2&gt; [local count: 1073741824]:
  L_run ();
  n.3_9 = n;
  _10 = n.3_9 + 1;
  n = _10;
  if (n.3_9 == 0)
    goto &lt;bb 3&gt;; [33.00%]
  else
    goto &lt;bb 4&gt;; [67.00%]

  &lt;bb 3&gt; [local count: 354334800]:
  do3.constprop (punused_3(D), Expired);

  &lt;bb 4&gt; [local count: 1073741824]:
  return;
}

int main ()
{
  volatile int unused;
  struct function_ref Expired;

  &lt;bb 2&gt; [local count: 1073741824]:
  Expired.callback = callback_fn_R;
  unused ={v} 42;
  do3 (&amp;unused, Expired);
  Expired ={v} {CLOBBER(eol)};
  return 0;
}

void seemingly_unused_foo ()
{
  volatile int unused;
  struct function_ref Expired;

  &lt;bb 2&gt; [local count: 1073741824]:
  Expired.callback = callback_fn_L;
  unused ={v} 42;
  do3.constprop (&amp;unused, Expired);
  Expired ={v} {CLOBBER(eol)};
  return;
}</code></pre>
<p>We see both <code>do3()</code> used by <code>main()</code> and <code>do3.constprop()</code> used by
<code>seemingly_unused_foo()</code>. I don’t understand why <code>main()</code> did not
trigger specialisation of another <code>do3()</code> variant. Let it be another
exercise for the reader and optimisation opportunity :)</p>
<p>The final result in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/267-diving-into-an-ipa-gcc-bug/fig-3.svg" /></p>
<h2 id="parting-words">Parting words</h2>
<p><code>llvm</code> tests caught another non-trivial <code>gcc</code> bug.</p>
<p><code>ipa</code> bugs are somewhat hard to reduce down to single file examples
without at least minimum amount of understanding what <code>gcc</code> does and
what it does not to the source file. <code>-fopt-info</code> helps a lot in that.</p>
<p>Reduction process is mostly mechanical and does not require too much
creativity. If I could do it so can you. Manual reduction and helped
me to get some feeling what various <code>gcc</code> passes do to the source
program: how lambdas are represented, when does inlining happen (or
not happen). <code>__attribute__((noinline, noipa))</code> and
<code>#ppragma GCC optimize</code> are a great help here.</p>
<p>Once an example is isolated to a single file it’s usually
straightforward to shrink it down to something so tiny that it’s obvious
where <code>gcc</code> (or original program!) went wrong and turned the program into
the bug. <code>-fdump*</code> set of options are a great help at exploring step by
step program transformation in <code>gcc</code>. I rarely need to add debugging to
<code>gcc</code> source to understand where roughly things went wrong.</p>
<p>Individual <code>gcc</code> passes have good source comments and nice internal
state dumps to inspect the process and to spot deficiencies like missing
optimizations or bugs.</p>
<p><code>ipa-cp</code> is a conceptually simple pass that is easy to reason about and
debug.</p>
<p>All in all it took me about 2 weeks of evenings to reduce the example
from <code>llvm</code> to a single-file example and 3 days to derive a
proof-of-concept fix. After that it took <code>gcc</code> developers less than a
day to write and validate the proper fix.</p>
<p>The fix was almost a one-liner. Now on to the <code>ffmpeg</code>
<a href="https://gcc.gnu.org/PR107879">miscompilation</a> :)</p>
<p>Have fun!</p>

<div class="info">
    Posted on November 19, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sat, 19 Nov 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/267-diving-into-an-ipa-gcc-bug.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Zero Hydra Failures towards 22.11 NixOS release</title>
    <link>http://trofi.github.io/posts/266-Zero-Hydra-Failures-towards-22.11-NixOS-release.html</link>
    <description><![CDATA[<p>The end of November is near and that means <code>NixOS</code> will get a release
soon. One of the late stages is Zero Hydra Failures phase: there everyone
squashes most of known build failures in <code>nixpkgs/master</code> before branching
off new <code>22.11</code> release.</p>
<p><a href="https://github.com/NixOS/nixpkgs/issues/199919" class="uri">https://github.com/NixOS/nixpkgs/issues/199919</a> tracks the effort and
has a few hints on how to locate all known build failures in various
places. So far there is a few thousands build failures in <code>nixpkgs/master</code>.</p>
<p>I had a chance to fix <a href="https://github.com/NixOS/nixpkgs/pull/199932">zsnes build failure</a>.
As you can see it’s a trivial fix. And we need a lot of fixes like these.
If you would like to help <code>nixpkgs</code> and upstream projects then please
join the effort of fixing those! Thank you in advance :)</p>
<p>Below I’ll run through an example build fix in more detail.</p>
<p>I usually start from <a href="https://hydra.nixos.org/jobset/nixpkgs/trunk" class="uri">https://hydra.nixos.org/jobset/nixpkgs/trunk</a>
periodic builder against <code>nixpkgs/master</code>. There I pick most recent
evaluation and navigate to <code>Still failing jobs</code> tab. From there I pick
failing package I like and check the build log. Apart from the build
log there is also a commit at which the package was built successully
last time. That usually helps in bisection of exact commit that broke
the package. Useful when you have no idea why the package is unhappy.</p>
<p>Let’s pick <code>synfigstudio-1.5.1</code> as a broken example. It’s build failure
is hiding in <a href="https://hydra.nixos.org/build/197644988" class="uri">https://hydra.nixos.org/build/197644988</a>. It’s last
successful build is <a href="https://hydra.nixos.org/build/194567109" class="uri">https://hydra.nixos.org/build/194567109</a> (<code>Inputs</code>
tab says it’s 667199140080a656d0be0d9c91b4bbac8828959f upstream commit
around end of September 2022).</p>
<p><a href="https://hydra.nixos.org/log/fd916xc57cfiwa3b7nm9x1i0f80czszx-synfigstudio-1.5.1.drv">Build log</a>
complains about missing <code>intltoolize</code>:</p>
<pre><code>Makefile.am: installing './INSTALL'
Makefile.am: installing './COPYING' using GNU General Public License v3 file
Makefile.am:     Consider adding the COPYING file to the version control system
Makefile.am:     for your code, to avoid questions about which license your project uses
src/gui/Makefile.am: installing 'config/depcomp'
parallel-tests: installing 'config/test-driver'
autoreconf: Leaving directory '.'
configuring
*** No intltoolize found, please install the intltool package ***</code></pre>
<p>Trying a trivial fix:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -103,6 +103,7 @@ stdenv.mkDerivation {</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     pkg-config</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     autoreconfHook</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     gettext</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="va">+    intltool</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     wrapGAppsHook</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>   ];</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>   buildInputs = [</span></code></pre></div>
<pre><code>$ nix build -f . synfigstudio
...
ok!</code></pre>
<p>Proposed fix against <code>nixpkgs</code> as <a href="https://github.com/NixOS/nixpkgs/pull/200095" class="uri">https://github.com/NixOS/nixpkgs/pull/200095</a>.
That was easy.</p>
<p>Now out of curiosity let’s see what previous change did break
<code>synfigstudio</code>:</p>
<pre><code>$ git clone https://github.com/NixOS/nixpkgs
$ cd nixpkgs

$ git bisect start origin/master 667199140080a656d0be0d9c91b4bbac8828959f
Bisecting: 4429 revisions left to test after this (roughly 12 steps)
[25b3b9b1b2af029d1a6db918d8fdb5560724681b] Merge staging-next into staging

$ git bisect run nix build -f. synfigstudio
running  'nix' 'build' '-f.' 'synfigstudio'
...

commit 0734f54ef262ad642eec1166a416bae86779ed9f
Date:   Sun Sep 25 05:49:25 2022 +0300

    treewide: move pkg-config, autoreconfHook, intltool to nativeBuildInputs

    found with nixpkgs-lint</code></pre>
<p>If we look at that patch it removed <code>intltool</code> from <code>buildInputs</code> (<code>HOST</code>
depends) instead of moving it to <code>nativeBuildInputs</code> (<code>BUILD</code> depends):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/applications/graphics/synfigstudio/default.nix</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -107,21 +107,20 @@ stdenv.mkDerivation {</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>   ];</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>   buildInputs = [</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>     ETL</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>     synfig</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>     boost</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>     cairo</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>     glibmm</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>     gtk3</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>     gtkmm3</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>     imagemagick</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">-    intltool</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>     libjack2</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>     libsigcxx</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>     libxmlxx</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>     mlt</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>     gnome.adwaita-icon-theme</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>     openexr</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>     fftw</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>   ];</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>   enableParallelBuilding = true;</span></code></pre></div>
<p>Simple bug downstream-only bug. Nothing to report upstream.</p>
<p>Have fun and happy fixing!</p>

<div class="info">
    Posted on November  8, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Tue, 08 Nov 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/266-Zero-Hydra-Failures-towards-22.11-NixOS-release.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Waypipe fixes</title>
    <link>http://trofi.github.io/posts/265-waypipe-fixes.html</link>
    <description><![CDATA[<p><code>waypipe</code> is a great hack! It allows you to run <code>wayland</code> applications
on a remote host and show the picture on local machine (somewhat similar
to <code>X11</code> network protocol).</p>
<p>Architecture diagram is both
<a href="https://mstoeckl.com/notes/gsoc/blog.html">simple and fascinating</a>.</p>
<p><code>waypipe</code> allows for quite a bit of flexibility in remote rendering
setup controlled by a few commandline options:</p>
<ul>
<li><code>--no-gpu</code>: use software render instead of <code>DMABUF</code>-backed GPU. Useful
to work around remote rendering bugs. Should not be required in
perfect world.</li>
<li><code>--compress</code>: compress tunneled traffic for image diffs: <code>none</code>, <code>zstd</code>, <code>lzo</code></li>
<li><code>--video</code>: stream video compression instead of pixel diffs (<code>vp9</code>, <code>h264</code>)</li>
<li><code>--video=hw</code>: use hardware video compression acceleration.</li>
</ul>
<p>By default <code>waypipe</code> enables GPU acceleration on a remote side, extracts
the result as a texture via <code>DMABUF</code> and sends deltas (or video) over the
netowork to reconstruct it locally and pass to the compositor.</p>
<p>Does not sound too complicated. Or does it? Chosen common pixel buffer
format matters here: both sides need to agree on supported configuration.
And there are so many to choose from!</p>
<p><code>wayland-info</code> can show supported modes:</p>
<pre><code>$ wayland-info
interface: 'wl_shm',                                     version:  1, name:  1
        formats (fourcc):
        0x48344241 = 'AB4H'
        0x48344258 = 'XB4H'
        0x30334241 = 'AB30'
        0x30334258 = 'XB30'
        0x36314752 = 'RG16'
        0x35314152 = 'RA15'
        0x35315852 = 'RX15'
        0x32314152 = 'RA12'
        0x32315852 = 'RX12'
        0x34324742 = 'BG24'
        0x34324241 = 'AB24'
        0x34324258 = 'XB24'
                 1 = 'XR24'
                 0 = 'AR24'
interface: 'wl_drm',                                     version:  2, name:  2
interface: 'zwp_linux_dmabuf_v1',                        version:  4, name:  3
        main device: 0xE280
        tranche
                target device: 0xE280
                flags: none
                formats (fourcc) and modifiers (names):
                0x48344241 = 'AB4H'; 0x00ffffffffffffff = INVALID
                0x48344241 = 'AB4H'; 0x00ffffffffffffff = INVALID
                0x48344241 = 'AB4H'; 0x0000000000000000 = LINEAR
                0x48344258 = 'XB4H'; 0x00ffffffffffffff = INVALID
                0x48344258 = 'XB4H'; 0x00ffffffffffffff = INVALID
                0x48344258 = 'XB4H'; 0x0000000000000000 = LINEAR
                0x30335241 = 'AR30'; 0x00ffffffffffffff = INVALID
                0x30335241 = 'AR30'; 0x00ffffffffffffff = INVALID
                0x30335241 = 'AR30'; 0x0000000000000000 = LINEAR
                0x30335258 = 'XR30'; 0x00ffffffffffffff = INVALID
                0x30335258 = 'XR30'; 0x00ffffffffffffff = INVALID
                0x30335258 = 'XR30'; 0x0000000000000000 = LINEAR
                0x30334241 = 'AB30'; 0x00ffffffffffffff = INVALID
                0x30334241 = 'AB30'; 0x00ffffffffffffff = INVALID
                0x30334241 = 'AB30'; 0x0000000000000000 = LINEAR
                0x30334258 = 'XB30'; 0x00ffffffffffffff = INVALID
                0x30334258 = 'XB30'; 0x00ffffffffffffff = INVALID
                0x30334258 = 'XB30'; 0x0000000000000000 = LINEAR
                0x34325241 = 'AR24'; 0x00ffffffffffffff = INVALID
                0x34325241 = 'AR24'; 0x00ffffffffffffff = INVALID
                ...</code></pre>
<p>Here my local machine supports a bunch of <code>LINEAR</code> formats of <code>DMABUF</code>s.
And possibly a few tiled ones (<code>INVALID</code> entries with non-zero
modifiers).</p>
<p>What happens when <code>waypipe</code> somehow gets format match wrong? Say, uses
tiled format on one side while unknowingly using <code>LINEAR</code> on another side?
With <code>waypipe-0.8.3</code> I got this beauty:</p>
<figure>
<img src="http://trofi.github.io/posts.data/265-a-waypipe-bug/gears.png" alt="broken-gears" />
<figcaption aria-hidden="true">broken-gears</figcaption>
</figure>
<p>It’s hard to see on a picture but it’s a <code>es2gears_wayland</code> application
output (port of <code>glxgears</code>). Supposed to look like that:</p>
<figure>
<img src="https://upload.wikimedia.org/wikipedia/commons/6/62/Xf86_glxgears.png" alt="working gears" />
<figcaption aria-hidden="true">working gears</figcaption>
</figure>
<p>In my case colors are fine, but the gears are inclined
and shredded. I had to spend a bit of time resizing the
window to get something that resembles gears at all. Otherwise
it a line soup.</p>
<p>I have machines with 2 card types: <code>amdgpu</code> (<code>nz</code>) and <code>i965</code> (<code>i7</code>).
Before any <code>waypipe</code> fixes none of <code>amdgpu-&gt;i965</code>, <code>amdgpu-&gt;amdgpu</code>,
<code>i965-&gt;amdgpu</code> GPU-accelerated piping modes worked:</p>
<ul>
<li><code>amdgpu-&gt;i965</code> generated garbled image (<a href="https://gitlab.freedesktop.org/mstoeckl/waypipe/-/issues/67">bug report</a>)</li>
<li><code>amdgpu-&gt;amdgpu</code> and <code>i965-&gt;amdgpu</code> just <code>SIGSEGV</code>ed (<a href="https://gitlab.freedesktop.org/mstoeckl/waypipe/-/issues/69">bug report</a>)</li>
</ul>
<p>I was not sure if <code>waypipe</code> is maintained or abandoned given that
nothing seemingly worked. I filed the issues anyway. To my surprise
Manuel fixed both bugs before I had a chance to look into the details!</p>
<p>Running <code>waypipe</code> from master I got a good picture out of everything I
tried! I tested a few games and applications and got the following results:</p>
<ul>
<li><code>waypipe --no-gpu ssh i7</code> is usable only for terminals and
static-mostly browsing</li>
<li><code>waypipe ssh i7</code> gives me about 7 FPS on fast-paced games. Not quite
usable for gaming, but good enough to get a picture back for minimal
runtime testing.</li>
<li><code>waypipe --video ssh i7</code> gives me about 45 FPS on fast-paced games
in 1920x1080 resolution. Not perfect for gaming, but it’s almost there!
You can certainly interact with the game without too much inconvenience.
Lower resolution easily gives 95 FPS.</li>
</ul>
<p>45 FPS (or even 95!) is a lot more than I expected from this setup. I
probably failed to enable hardware video codec compression. Tweaking that
should get both better picture quality and performance when in <code>--video=hw</code>
mode.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>waypipe ssh &lt;host&gt;</code> while slow should just work on <code>waypipe</code> from <code>git</code>.
If you still have artifacts try safest <code>waypipe --no-gpu ssh &lt;host&gt;</code>.
Best interactive I got was from <code>waypipe --video=hw ssh &lt;host&gt;</code>.
Upstream is alive and responsive.</p>
<p>And finally <a href="http://trofi.github.io/posts.data/265-a-waypipe-bug/xonotic.png">a screnshot</a>
extracted from <code>waypipe --video=hw ssh i7 nix run nixpkgs#xonotic</code>.</p>
<p>You may notice quite a bit of video codec damage on the screen. But
that’s just because <code>i7</code> is such an old slow box. I think it’s a good
result overall.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November  7, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Mon, 07 Nov 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/265-waypipe-fixes.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>GCC's new -Wdangling-reference warning</title>
    <link>http://trofi.github.io/posts/264-gcc-s-new-Wdangling-reference-warning.html</link>
    <description><![CDATA[<p>Tl;DR: <code>gcc</code> <a href="https://gcc.gnu.org/PR106393">just got</a>
new <code>-Wdangling-reference</code> diagnostic to catch some use-after-free bugs
related to temporary object lifetimes in <code>c++</code> code.</p>
<p>Initially I encountered <code>-Wdangling-reference</code> at
<a href="https://gcc.gnu.org/PR107488" class="uri">https://gcc.gnu.org/PR107488</a> where <code>cppunit-1.15.1</code> failed to build
due to <code>-Wall -Werror</code> flags in the build system. That particular case
was a false positive (<code>gcc</code> bug). I also found similar build failures in
<code>libcamera</code>, <code>cvise</code>, <code>spirv-tools</code>, <code>aws-sdk-cpp</code>.</p>
<p>Once false positive was fixed build was restored on <code>cppunit</code> and
<code>spirv-tools</code>. <code>libcamera</code> and <code>cvise</code> still fail and need more triage.</p>
<p>At least on <code>aws-sdk-cpp-1.9.294</code> the bug is real
(<a href="https://github.com/aws/aws-sdk-cpp/commit/e1aceaeb211901d1985663d3de12c76913e41b90">fixed since</a>).</p>
<p>Smaller <code>aws-sdk-cpp</code> example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">// cat a.cpp</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> C <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="va">i_</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    C<span class="op">();</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> <span class="op">&amp;</span> iRef<span class="op">(</span><span class="dt">void</span><span class="op">);</span> <span class="co">// returns i_ according to the legend</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> g<span class="op">(</span><span class="dt">int</span> i<span class="op">);</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> f<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> <span class="op">&amp;</span> i <span class="op">=</span> C<span class="op">().</span>iRef<span class="op">();</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    g<span class="op">(</span>i<span class="op">);</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Building:</p>
<pre><code>$ g++-13.0.0 -c a.cpp -Wall -Werror
a.cpp: In function 'void f()':
a.cpp:11:17: error: possibly dangling reference to a temporary [-Werror=dangling-reference]
   11 |     const int &amp; i = C().iRef();
      |                 ^
a.cpp:11:29: note: the temporary was destroyed at the end of the full expression 'C().C::iRef()'
   11 |     const int &amp; i = C().iRef();
      |                     ~~~~~~~~^~
cc1plus: all warnings being treated as errors</code></pre>
<p>Normally temporary objects don’t outlive statement they are created (or
even expression in older c++ standards). The special case is a
<a href="https://en.cppreference.com/w/cpp/language/lifetime">lifetime extension</a>
by taking a const lvalue reference (and a few other types of
references).</p>
<p>In case of our example reference returned by <code>iRef()</code> could be a
reference to part of <code>C()</code> object (and according to the legened it is).
This means that <code>g(i)</code> dereferences already destroyed object.</p>
<p>Unfortunately even this example is still prone to false positives: if
<code>iRef()</code> happened to return a reference to some global variable that
outlived <code>C()</code>. We dont see an <code>iRef()</code> definition here at all. Thus it
could have any lifetime. I don’t think <code>gcc</code> should warn for such cases.</p>
<p><code>libcamera</code> is one of such cases: <a href="https://gcc.gnu.org/PR107532" class="uri">https://gcc.gnu.org/PR107532</a></p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Plane <span class="op">{</span> <span class="dt">unsigned</span> <span class="dt">int</span> bytesused<span class="op">;</span> <span class="op">};</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">// Passes a reference through. Does not change lifetime.</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>template <span class="op">&lt;</span>typename Inner<span class="op">&gt;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Ref <span class="op">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> Inner <span class="op">&amp;</span> i_<span class="op">;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    Ref<span class="op">(</span><span class="dt">const</span> Inner <span class="op">&amp;</span> i<span class="op">)</span> <span class="op">:</span> i_<span class="op">(</span>i<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> Inner <span class="op">&amp;</span> inner<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> i_<span class="op">;</span> <span class="op">}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> FrameMetadata <span class="op">{</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    Ref<span class="op">&lt;</span><span class="dt">const</span> Plane<span class="op">&gt;</span> planes<span class="op">()</span> <span class="dt">const</span> <span class="op">{</span> <span class="cf">return</span> p_<span class="op">;</span> <span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    Plane p_<span class="op">;</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> bar<span class="op">(</span><span class="dt">const</span> Plane <span class="op">&amp;</span> meta<span class="op">);</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> foo<span class="op">(</span><span class="dt">const</span> FrameMetadata <span class="op">&amp;</span> fm<span class="op">)</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">const</span> Plane <span class="op">&amp;</span> meta <span class="op">=</span> fm<span class="op">.</span>planes<span class="op">().</span>inner<span class="op">();</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    bar<span class="op">(</span>meta<span class="op">);</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>gcc-13</code> complains about it as:</p>
<pre><code>$ g++-13.0.0 -c -Wall -Werror=dangling-reference a.cpp
a.cpp: In function 'void foo(const FrameMetadata&amp;)':
a.cpp:20:19: error: possibly dangling reference to a temporary [-Werror=dangling-reference]
   20 |     const Plane &amp; meta = fm.planes().inner();
      |                   ^~~~
a.cpp:20:43: note: the temporary was destroyed at the end of the full expression '(&amp; fm)-&gt;FrameMetadata::planes().Ref&lt;const Plane&gt;::inner()'
   20 |     const Plane &amp; meta = fm.planes().inner();
      |                          ~~~~~~~~~~~~~~~~~^~
cc1plus: some warnings being treated as errors

This gcc version is this week's gcc-13 snapshot with https://gcc.gnu.org/PR107488 applied on top.</code></pre>
<p>The idiom here is to wrap a non-owning reference into a tiny value-like
object. <code>gcc</code> does not see it and thinks that wrapper’s lifetime matters
here.</p>
<h2 id="parting-words">Parting words</h2>
<p>New <code>-Wdangling-reference</code> option in <code>gcc</code> is exciting! It has a chance
to catch really nasty use-after-free cases. But it also seems to need
quite a bit more tuning to dial down false positives.</p>
<p><code>-Werror</code> is a good way to make your program fail to build for no good
reason (i.e. a benign compiler bug). But it’s also a great tool for
software developers to find bugs in code being modified (or in the
compiler :).</p>
<p>Have fun!</p>

<div class="info">
    Posted on November  5, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sat, 05 Nov 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/264-gcc-s-new-Wdangling-reference-warning.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>GNU make 4.4 is out!</title>
    <link>http://trofi.github.io/posts/263-gnu-make-4.4-is-out.html</link>
    <description><![CDATA[<p>Yesterday <code>GNU make</code> project
<a href="https://lists.gnu.org/archive/html/bug-make/2022-10/msg00247.html">announced 4.4 release</a>!</p>
<p>The release contains extensive list of new additions and backward
incompatible changes in various corner cases.</p>
<p>Multi-target rule change <a href="http://trofi.github.io/posts/260-make-multiple-targets.html">mentioned before</a>
will not break bulds in <code>make-4.4</code>. Breaking change was postponed for
<code>make-4.5</code> release. <code>make-4.4</code> will print diagnostic warning for simple
cases, Worth watching for the warnings. So far I see similar warnings in
the following packages:</p>
<pre><code>dtc-1.6.1.drv:Makefile:387: warning: pattern recipe did not update peer target 'dtc-parser.output'.
ghc-9.0.2.drv:libraries/base/ghc.mk:4: warning: pattern recipe did not update peer target 'libraries/base/dist-install/build/GHC/Clock_hsc.c'.
git-2.38.1.drv:Makefile:354: warning: pattern recipe did not update peer target 'git.5'.
kmod-30.drv:Makefile:615: warning: pattern recipe did not update peer target 'depmod.5'.
libbonobo-2.32.1.drv:Makefile:802: warning: pattern recipe did not update peer target 'Bonobo_ActivationContext-imodule.c'.
ORBit2-2.14.19.drv:Makefile:1097: warning: pattern recipe did not update peer target 'test1-imodule.c'.
pciutils-3.8.0.drv:Makefile:114: warning: pattern recipe did not update peer target 'lspci.5'.
perf-linux-6.0.2.drv:Makefile:262: warning: pattern recipe did not update peer target 'perf.5'.
rethinkdb-2.4.1.drv:mk/support/build.mk:174: warning: pattern recipe did not update peer target 'install-include-gtest_1.7.0'.
sane-backends-1.0.32.drv:Makefile:957: warning: pattern recipe did not update peer target 'gamma4scanimage.5'.
shadow-4.11.1.drv:Makefile:1062: warning: pattern recipe did not update peer target 'man1/chgpasswd.8'.</code></pre>
<p>Worth fixing those upstream before next <code>make-4.5</code> release.</p>
<p>On another topic <code>make --shuffle</code>
<a href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html">mentioned before</a> is now
available in official release. This should lower the barrier for users
to try it out once <code>make-4.4</code> triclkles into downstream distributions.</p>
<p>Have fun!</p>

<div class="info">
    Posted on November  1, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Tue, 01 Nov 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/263-gnu-make-4.4-is-out.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>A few more gcc-13 bugs</title>
    <link>http://trofi.github.io/posts/262-a-few-more-gcc-13-bugs.html</link>
    <description><![CDATA[<p>Another 6 months have passed since I wrote anything about <code>gcc</code> bugs.
<code>gcc-13</code> should release around April next year (in about 6 months).
Being in the middle I’m dumping another set of bugs bugs I encountered:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR106551" class="uri">https://gcc.gnu.org/PR106551</a>: <code>-fanalyzer</code> ICE on <code>libpipeline-1.5.4</code> code</li>
<li><a href="https://gcc.gnu.org/PR105650" class="uri">https://gcc.gnu.org/PR105650</a>: <code>fontforge</code> miscompiled by vectorizer</li>
<li><a href="https://gcc.gnu.org/PR106142" class="uri">https://gcc.gnu.org/PR106142</a>: <code>pcre</code> miscompiled by range analyzer in middle end</li>
<li><a href="https://gcc.gnu.org/PR105492" class="uri">https://gcc.gnu.org/PR105492</a>: <code>proxmark3</code> ICE in C typedef handling of vectored types</li>
<li><a href="https://gcc.gnu.org/PR105587" class="uri">https://gcc.gnu.org/PR105587</a>: <code>av1</code> ICE in gcc vectorizer</li>
<li><a href="https://gcc.gnu.org/PR105956" class="uri">https://gcc.gnu.org/PR105956</a>: <code>boost</code> ICE in C++ template expansion</li>
<li><a href="https://gcc.gnu.org/PR106616" class="uri">https://gcc.gnu.org/PR106616</a>: <code>linux-4.19</code> ICE in ia64 backend</li>
<li><a href="https://gcc.gnu.org/PR107196" class="uri">https://gcc.gnu.org/PR107196</a>: <code>llvm</code> test suite hangup in range analyser</li>
<li><a href="https://gcc.gnu.org/PR106334" class="uri">https://gcc.gnu.org/PR106334</a>: LTO ICE on <code>nix</code> when merging debug info</li>
<li><a href="https://gcc.gnu.org/PR106540" class="uri">https://gcc.gnu.org/PR106540</a>: LTO ICE on <code>nix</code> when merging debug info (again)</li>
<li><a href="https://gcc.gnu.org/PR106831" class="uri">https://gcc.gnu.org/PR106831</a>: decimal code miscompilation on <code>mpfr</code> code</li>
<li><a href="https://gcc.gnu.org/PR105852" class="uri">https://gcc.gnu.org/PR105852</a>: ICE in template instantiation on <code>nodejs</code> code</li>
<li><a href="https://gcc.gnu.org/PR105608" class="uri">https://gcc.gnu.org/PR105608</a>: precompiled headers ICE in large macros</li>
<li><a href="https://gcc.gnu.org/PR106905" class="uri">https://gcc.gnu.org/PR106905</a>: vectorizer ICE on <code>zstd</code> code</li>
</ul>
<p>I won’t focus on any of the bugs in detail here as they are quite boring
this time.</p>
<p>As usual ICEs are simple to minimize and reduce. Runtime failures are
hardest to deal with. Especially tough one was the
<a href="https://gcc.gnu.org/PR107196">llvm-14 hangup</a>. It took me a few attempts
at minimizing the example. I failed all of them. Luckily someone found a
smaller unrelated reproducer and the bug was fixed.</p>
<p>Bug pace makes it about 2 new bugs a week. Still barely manageable :)</p>
<p>As usual here is a set of upcoming changes in <code>gcc-13</code>:
<a href="https://gcc.gnu.org/gcc-13/changes.html" class="uri">https://gcc.gnu.org/gcc-13/changes.html</a>. A few more <code>cstdint</code> headers
would have to be added to various upstreams.</p>
<p>Have fun!</p>

<div class="info">
    Posted on October 21, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Fri, 21 Oct 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/262-a-few-more-gcc-13-bugs.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Trying out wayland</title>
    <link>http://trofi.github.io/posts/261-trying-out-wayland.html</link>
    <description><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>I switched to <code>wayland</code> from <code>X11</code> as my daily driver and don’t
regret it so far. It feels like it fixed more problems for me than
introduced to the point I’d prefer not to switch back.</p>
<h2 id="x11-and-default-dpi">X11 and default DPI</h2>
<p>I got my desktop monitor a few years ago. It is capable of
<code>3840x2160</code> output (172 DPI). My integrated video card could do only
<code>1920x1080</code> at most (78 DPI). I was a happy user of Xorg with
default 96 DPI settings. I was using <code>alacritty</code> as a terminal with
bitmap <code>Terminus</code> fonts carefully picked to avoid the need for glyph
hinting.</p>
<h2 id="x11-and-hidpi">X11 and HiDPI</h2>
<p>About a year ago I updated my desktop machine. I chose cheap videocard
that could output in <code>3840x2160</code> mode for my existing monitor. I wanted
to look at the use of vector fonts in the terminal.</p>
<p>I switched to HiDPI mode on <code>X11</code>. Without the special configuration
everything shrunk and became half the initial size! Arch Linux has a
detailed overview of the knobs you can tweak to get most of <code>Xorg</code>
environment upscaled: <a href="https://wiki.archlinux.org/title/HiDPI" class="uri">https://wiki.archlinux.org/title/HiDPI</a>.</p>
<p>I tried hard not to configure too many things manually. I did font
size <code>Xft.dpi: 192</code> tweak via <code>.Xresources</code>. Pictograms in many
applications (like <code>claws-mail</code>) didn’t pick up larger sizes. Mouse
cursor became almost invisible. <code>gtk-2</code> applications and older <code>X11</code>
applications that specify window sizes in pixels became unusable. I
fixed cursor <code>Xcursor.size: 64</code> via <code>.Xresources</code>. In applications
(toolkits) without good support for DPI scaling I had to artificially
increase font size and disabled pictograms in favour of text labels on
buttons.</p>
<p>Surprisingly I had to abandon a few GUI apps in favour of their terminal
equivalents as font scaling works so much better than UI element
scaling!</p>
<p>The result was looking ok-ish. But after an active use I noticed sever
tearing effect when I switch between workspaces. It was most pronounced
when I switched from <code>Firefox</code> workspace (usually white background) to
terminal workspace (black background). Tearing effect was a diagonal
blocky zip line seen for a very short while. I mitigated it with
<code>Option "TearFree" "true"</code> via <code>xorg.conf</code>. The mitigation only mostly
removes tearing effect, but not fully. Diagonal line gets turned to
horisontal line. The tearing frequency decreases to usable levels. But
it was still noticeable.</p>
<p>Looking at the final <code>X11</code> HiDPI setup:</p>
<ul>
<li>the TTF fonts now looked great in terminals</li>
<li>the UI sizes were not quite the same, usually smaller, sometimes
unreadable</li>
<li>some programs did not survive 2x downscaling and were too small to be
useful at all</li>
<li>a bit of tearing effect was present</li>
</ul>
<h2 id="wayland">Wayland</h2>
<p>I’ve been meaning to try <code>wayland</code> for a while but never had an excuse.
I was afraid it will break too many applications I use frequently (or
occasionally). I vaguely remembered horror stories from past years of
things like <code>wine</code> not being able to track mouse cursor properly,
possible videocard incompatibility problems (like <code>nvidia</code>). I also
was afrad I was a too long-term <code>Xorg</code> user to easily accept minor
changes I’ll face.</p>
<p>Having looked at the amount of tweaks I had to do for HiDPI and seeing
recent <a href="https://artemis.sh/2022/09/18/wayland-from-an-x-apologist.html">An X11 Apologist Tries Wayland</a>
post I decided to give it a try.</p>
<p>I used <code>i3</code> window manager in <code>Xorg</code>. Closest <code>wayland</code> sibling is
<code>sway</code>. <code>sway</code> is mostly config-compatible with <code>i3</code>: it reads
<code>~/.config/i3/config</code> if <code>~/.config/sway/config</code> does not exist.
Thus the initial switch is trivial: just run <code>sway</code>.</p>
<p><code>wayland</code> has a bit different way to handle DPI: it just assumes 96 DPI
for programs that don’t handle scaling. User needs to specify the scale
once for wayland. For me the magic command was <code>wlr-randr --output DP-3 --scale 2</code>
(or <code>output DP-3 scale 2.0</code> via <code>~/.config/sway/config</code>).</p>
<p>After that I got most old programs up to a reasonable size! It is
s omething that <code>X11</code> HiDPI could not do easily. That was a pleasant
surprise. I even undid those rare changes I had to do for HiDPI on
<code>X11</code>! <code>Xwayland</code> does a reasonable job of runnin many <code>X11</code> programs
as is. There are warts still.</p>
<p>Surprisingly under <code>wayland</code> tearing effect disappeared completely.</p>
<p>I switched to direct <code>sway</code> start from linux terminal. Before I used
<code>lightdm</code> graphical login manager (modern <code>X11</code> needed it for rootless
mode for various reasons).</p>
<p>Not everything was ideal in <code>wayland</code> world. Some unexpected things I
found:</p>
<ul>
<li><code>xeyes</code> background is garbled at start, issue known as
<a href="https://github.com/swaywm/sway/issues/3395" class="uri">https://github.com/swaywm/sway/issues/3395</a></li>
<li>clicking the links in terminal does not switch the focus to the
browser, issues known as <a href="https://github.com/swaywm/sway/issues/4830" class="uri">https://github.com/swaywm/sway/issues/4830</a></li>
<li><code>Ctrl+Enter</code> does not work in <code>mc</code> (because it relies on <code>X11</code> events).
I’m slowly reading through <a href="https://wayland-book.com/" class="uri">https://wayland-book.com/</a> to get the idea
where it should ideally be implemented: in the terminal, in <code>mc</code> or
smewhere else.</li>
</ul>
<h2 id="parting-words">Parting words</h2>
<p>When I read through <a href="https://wayland-book.com/" class="uri">https://wayland-book.com/</a> I got a nice feling of
being able to write nice smooth demos. Just like in <code>DOS</code> times when you
could write pixels right into video RAM at the right VSYNC time (<code>0x3da</code>
port).
It’s probably no harder in <code>X11</code>. I never got to look at X11 <code>MIT-SHM</code>
extension fearing of it’s lack of network transparency support. I spent
some time playning with
<a href="https://wayland-book.com/xdg-shell-basics/example-code.html" class="uri">https://wayland-book.com/xdg-shell-basics/example-code.html</a> example.</p>
<p>Architecturally <code>wayland</code> feels a lot like <code>X11</code>: both are RPC protocols
over UNIX socket to interact with objects on the server asynchronously
via requests and events. But the difference in the details is also
startling: frame perfect design gives a great user experience, many
things are a bit different that they used to be and require different
solution.</p>
<p>I like <code>sway/wayland</code> experience so far and will try to port a few small
things to it from <code>X11/OpenGL</code>.</p>
<p>Full <code>sway</code> config I got: <a href="https://github.com/trofi/home/blob/master/.config/sway/config" class="uri">https://github.com/trofi/home/blob/master/.config/sway/config</a>.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 28, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Wed, 28 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/261-trying-out-wayland.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>GNU make amends rules with multiple targets</title>
    <link>http://trofi.github.io/posts/260-make-multiple-targets.html</link>
    <description><![CDATA[<h2 id="tldr">TL;DR</h2>
<p>Starting from <code>GNU make-4.4</code> rules with multiple targets that include
commands will trigger if any of the targets does not exist. This will
require a few projects to adapt. Older versions of <code>ghc</code> are affected.</p>
<p>Typical example would need to adapt from something like:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.c %.gen.h %.gen.not-always-present:</span><span class="dt"> %.src</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CMD</span><span class="ch">)</span> ...</span></code></pre></div>
<p>to something like:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.c %.gen.h:</span><span class="dt"> %.src</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CMD</span><span class="ch">)</span> ...</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dv">%.gen.not-always-present:</span><span class="dt"> %.gen.c</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># generated by previous rule or not generated at all</span></span></code></pre></div>
<p>See <a href="https://savannah.gnu.org/bugs/index.php?63098" class="uri">https://savannah.gnu.org/bugs/index.php?63098</a> for other options.</p>
<h2 id="more-words">More words</h2>
<p><code>Makefile</code> usually defines a bunch of prerequisites per single target:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> foo.c foo.h</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LDLIBS</span><span class="ch">)</span> foo.c -o foo</span></code></pre></div>
<p>For dependency-only rules without commands it’s customary to specify
multiple targets:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># multiple targets</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo bar:</span><span class="dt"> foo.h</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co"># equivalent to</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="co">#   foo: foo.h</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">#   bar: foo.h</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>	touch foo</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>	touch bar</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.h:</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>	touch foo.h</span></code></pre></div>
<p>In all the cases above the behaviour is straightforward: if <code>foo.h</code>
changes then <code>foo</code> and <code>bar</code> are outdated and have to be rebuilt (if
rebuild is requested). And specifically <code>make foo</code> should cause only
<code>foo</code> rebuild. Example session:</p>
<pre><code>$ make
touch foo.h
touch foo
touch bar

$ touch foo.h
$ make foo
touch foo</code></pre>
<p>No surprise here: in a second run <code>bar</code> is not rebuilt and stays
outdated (we did not ask for it’s update). And <code>foo</code> is rebuilt
as expected.</p>
<p>In <code>GNU make</code> before <code>4.3.90</code> the same rule applied to rules with
commands as well:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dv">foo bar:</span><span class="dt"> foo.h</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>	touch foo bar</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="dv">foo.h:</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>	touch foo.h</span></code></pre></div>
<p>Note that the command for <code>foo bar: foo.h</code> rule always builds both
targets.</p>
<p>Let’s try to delete <code>bar</code> and ask <code>foo</code> to be rebuilt. Would <code>foo</code> get
rebuilt? Would <code>bar</code> get rebuilt? Here is the answer:</p>
<pre><code>$ make-4.3
touch foo.h
touch foo bar

$ rm bar
$ make-4.3 foo
make: 'foo' is up to date.</code></pre>
<p>Looks exactly the same as above: <code>foo</code> does not require a refresh.</p>
<p>Now let’s try <code>make-4.3.90</code>:</p>
<pre><code>$ rm -f foo bar foo.h

$ make-4.3.90
touch foo bar

$ rm bar
$ make-4.3.90 foo
touch foo bar</code></pre>
<p>That’s a different behaviour: absence of <code>bar</code> triggers both <code>foo</code>
and <code>bar</code> rebuilds. This behaviour change is intentional and is added in
<a href="https://savannah.gnu.org/bugs/?62809" class="uri">https://savannah.gnu.org/bugs/?62809</a>.</p>
<h2 id="the-impact">The impact</h2>
<p>So far it looks benign: we’ll build just a bit more than we used to
in some incremental builds. Fresh-from-zero builds should not be
affected, right? Right?</p>
<p>I installed fresh <code>make-4.3.90</code> and attempted to build the world.</p>
<h3 id="opensp-case">opensp case</h3>
<p><code>opensp-1.5.2</code> being an autotools package provides tarballs with pre-generated
files as part of the release:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="dv">%.h %.cxx %.rc:</span><span class="dt"> %.msg</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>	[ ! -f <span class="ch">$(</span><span class="dt">top_srcdir</span><span class="ch">)</span>/msggen.pl ] || <span class="ch">$(</span><span class="dt">PERL</span><span class="ch">)</span> -w <span class="ch">$(</span><span class="dt">top_srcdir</span><span class="ch">)</span>/msggen.pl <span class="ch">$(</span><span class="dt">MSGGENFLAGS</span><span class="ch">)</span> <span class="ch">$&lt;</span></span></code></pre></div>
<p>All <code>.h</code>, <code>.cxx</code> and <code>.rc</code> files are already present in
<code>OpenSP-1.5.2.tar.gz</code>. User never has to run <code>msggen.pl</code> script to get
<code>opensp</code> built.</p>
<p>Except that <code>msggen.pl</code> does not always produce <code>.cxx</code> files. It does so
only for <code>.msg</code> files that have a <code>!cxx</code> directive. I noticed it only
because <code>msggen.pl</code> does not really work on any modern <code>perl</code> version
(and also because <code>nix</code> does not expose <code>perl</code> to build sandbox by default).
Fun fact: <code>OpenSP-1.5.2.tar.gz</code> was released in 2007.</p>
<p>The build fails on <code>make-4.3.90</code> as:</p>
<pre><code>$ make-4.3.90
make[2]: Entering directory '/build/OpenSP-1.5.2/lib'
[ ! -f ../msggen.pl ] || perl -w ../msggen.pl -l libModule PosixStorageMessages.msg
bash: line 1: perl: command not found
make[2]: *** [Makefile:778: PosixStorageMessages.h] Error 127 shuffle=1663959693</code></pre>
<p>The <a href="https://sourceforge.net/p/openjade/bugs/151/">proposed fix</a> makes
<code>.cxx</code> as optional by splitting out <code>.cxx</code> into a separate rule:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/lib/Makefile.am</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/lib/Makefile.am</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -125,5 +125,7 @@ SUFFIXES = .msg .m4 .rc</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a> .m4.cxx:</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a> 	$(PERL) $(top_srcdir)/instmac.pl $&lt; &gt;$@</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="st">-%.h %.cxx %.rc: %.msg</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="va">+%.h %.rc: %.msg</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>	[ ! -f $(top_srcdir)/msggen.pl ] || $(PERL) -w $(top_srcdir)/msggen.pl $(MSGGENFLAGS) $&lt;</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="va">+%.cxx: %.rc</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="va">+	: # built by perl rule above</span></span></code></pre></div>
<p>Here we move <code>.cxx</code> part as a separate no-op target to avoid <code>perl</code>
build rule from triggering. Similar fix had to be applied to a few
more <code>Makefile.am</code> files in <code>opensp</code> tree.</p>
<p>The failure Does not look bad: it was easy to diagnose and workaround.</p>
<h3 id="ghc-case">ghc case</h3>
<p><code>ghc</code> was another heavy <code>GNU make</code> user until
<a href="https://gitlab.haskell.org/ghc/ghc/-/commit/6fd9b0a1c6b076ef1977db1a2ce8b9505b9a3254">recenty</a>.
Many distributions still package older <code>ghc</code> versions and still use
<code>GNU make</code> based build system. <code>ghc</code> was broken by <code>make-4.3.90</code> as:</p>
<pre><code>$ ./configure
$ make-4.3.90
...
ghc&gt;   HSC2HS libraries/hpc/dist-boot/build/Trace/Hpc/Reflect.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Constants.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable/Types.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTableProf.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Utils.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/FFI.hs
...
ghc&gt;   HSC2HS libraries/hpc/dist-boot/build/Trace/Hpc/Reflect.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Constants.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable/Types.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTableProf.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghc-heap/dist-boot/build/GHC/Exts/Heap/Utils.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/InfoTable.hs
ghc&gt;   HSC2HS libraries/ghci/dist-boot/build/GHCi/FFI.hs
...
ghc&gt; ghc.mk:100: *** Make has restarted itself 2 times; is there a makefile bug? See https://gitlab.haskell.org/ghc/ghc/wikis/building/troubleshooting#make-has-restarted-itself-3-times-is-there-a-makefile-bug for details.  Stop.
ghc&gt; make: *** [Makefile:126: all] Error 2 shuffle=1664105902</code></pre>
<p>Looks simple, right? No, it does not. <code>ghc</code>’s build system detected
infinite rebuild loop and bailed out. Note how <code>Reflect.hs</code> gets
generated at elast twice with <code>HSC2HS</code> haskell code generator.</p>
<p>To explain it’s mechanics I’ll build a contrived example:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>	touch foo</span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dv">%.d:</span><span class="dt"> %.c</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>	echo <span class="st">&quot;foo.d: foo.c&quot;</span>  &gt; foo.d</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>	echo <span class="st">&quot;foo: foo.d foo.c&quot;</span> &gt;&gt; foo.d</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="dv">%.c:</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>	touch <span class="ch">$*</span>.c</span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="kw">-include</span> foo.d</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="ot">.PRECIOUS:</span><span class="dt"> foo.c</span></span></code></pre></div>
<p>Here we dynamically generate a part of a <code>Makefile</code> by generating
<code>foo.d</code> file and by including it via <code>-include foo.d</code>. Leading
minus(<code>-</code>) ignores some error conditions when including files.</p>
<p>Let’s try it:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3.90
touch foo.c
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
touch foo</code></pre>
<p>Note that initially <code>foo</code> does not contain any dependencies.
<code>GNU make</code> has to build <code>foo.d</code> part first to see the rest of the
dependencies.</p>
<p>Interestingly <code>GNU make</code> has to re-execute itself after <code>foo.d</code> is
availble. We can see it in debug (<code>-d</code>) mode by looking up
<code>Re-executing</code> lines:</p>
<pre><code>$ rm -f foo* &amp;&amp; LANG=C make-4.3.90 -d |&amp; grep Re-
Re-executing[1]: make -d</code></pre>
<p>Now let’s extend our <code>foo.c</code> rule (<code>foo.d</code>’s dependency) to include an
unrelated and non-existent <code>foo.h</code> file as an output target:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/makefile</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/makefile</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -5,8 +5,9 @@ foo:</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a> 	echo &quot;foo.d: foo.c&quot;  &gt; foo.d</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a> 	echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="st">-%.c:</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="va">+%.c %.h:</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a> 	touch $*.c</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a><span class="va">+	# missing 'touch $*.h'</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a> -include foo.d</span></code></pre></div>
<p>Running:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3.90
touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d

touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
...</code></pre>
<p><code>GNU make</code> fell into an infinite loop. Here missing <code>foo.h</code> file triggers
<code>make</code> to always regenerate <code>foo.d</code> on each re-execution. Regenrated
<code>foo.d</code> requires another re-execution. We get the loop. Previous
<code>make-4.3</code> version did not exhibit this behaviour:</p>
<pre><code>$ rm -f foo* &amp;&amp; make-4.3
touch foo.c
# missing 'touch foo.h'
echo &quot;foo.d: foo.c&quot;  &gt; foo.d
echo &quot;foo: foo.d foo.c&quot; &gt;&gt; foo.d
touch foo</code></pre>
<p>Now back to <code>ghc</code>. It took me some time to read through <code>make -d</code> output
to find the offending rule. The following fix was enough to fix <code>ghc</code>:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/rules/hs-suffix-rules-srcdir.mk</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/rules/hs-suffix-rules-srcdir.mk</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -33,9 +33,12 @@ $1/$2/build/%.hs : $1/$2/build/%.y | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a> $1/$2/build/%.hs : $1/$3/%.x | $$$$(dir $$$$@)/.</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a> 	$$(call cmd,ALEX) $$($1_$2_ALL_ALEX_OPTS) $$&lt; -o $$@</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="st">-$1/$2/build/%_hsc.c $1/$2/build/%_hsc.h $1/$2/build/%.hs : $1/$3/%.hsc $$$$(hsc2hs_INPLACE) | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a><span class="va">+$1/$2/build/%.hs : $1/$3/%.hsc $$$$(hsc2hs_INPLACE) | $$$$(dir $$$$@)/.</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a> 	$$(call cmd,hsc2hs_INPLACE) $$($1_$2_ALL_HSC2HS_OPTS) $$&lt; -o $$@</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a><span class="va">+$1/$2/build/%_hsc.c $1/$2/build/%_hsc.h: $1/$2/build/%.hs</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a><span class="va">+		: # rely on previous rule to build targets</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a> # Now the rules for hs-boot files.</span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a> $1/$2/build/%.hs-boot : $1/$3/%.hs-boot | $$$$(dir $$$$@)/.</span></code></pre></div>
<p><code>hsc2hs</code> does not always emit <code>C</code> stub part. The fix is almost identical
to <code>opensp</code> case: we split out optional output into a separate rule.</p>
<p>As <code>ghc</code> dropped <code>GNU make</code>-based build system I did not try to upstream
the change. Downstreams would have to carry something similar for older
<code>ghc</code> versions they ship.</p>
<h3 id="dtc-case">dtc case</h3>
<p><code>dtc</code> also happens to use <code>GNU make</code>-based build system. It’s <code>Makefile</code>
is a lot smaller than <code>ghc</code>’s one. The symptom was very similar to our
contrived example:</p>
<pre><code>$ make-4.3.90
...
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
        CHK version_gen.h
         BISON dtc-parser.tab.h
         DEP dtc-lexer.lex.c
         DEP dtc-parser.tab.c
...</code></pre>
<p>It took me a few hours to notice that <code>dtc</code> build was stuck.</p>
<p>The cause of cycle was again <code>make</code> re-execution caused by a missing
file in <code>bison</code> rule with multiple targets. <code>bison</code> rule contained
output that is never used by anything. The fix is trivial:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -384,4 +384,4 @@ clean: libfdt_clean pylibfdt_clean tests_clean</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="st">-%.tab.c %.tab.h %.output: %.y</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="va">+%.tab.c %.tab.h: %.y</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a> 	@$(VECHO) BISON $@</span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a> 	$(BISON) -b $(basename $(basename $@)) -d $&lt;</span></code></pre></div>
<p>While at it I added a guard against infinite re-execution similar to
<code>ghc</code>’s guard:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -389,3 +389,3 @@ clean: libfdt_clean pylibfdt_clean tests_clean</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a><span class="va">+ifeq ($(MAKE_RESTARTS),10)</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a><span class="va">+$(error &quot;Make re-executed itself $(MAKE_RESTARTS) times. Infinite recursion?&quot;)</span></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="va">+endif</span></span></code></pre></div>
<p><code>GNU make</code> provides <code>$(MAKE_RESTARTS)</code> variable to detect <code>make</code> restarts.</p>
<p>Both fixes are proposed upatream as <a href="https://github.com/dgibson/dtc/pull/73" class="uri">https://github.com/dgibson/dtc/pull/73</a>.</p>
<h2 id="parting-words">Parting words</h2>
<p>Rules with multiple targets are tricky and fun. <code>GNU make-4.4</code> will be a
bit more eager at rebuilding all of the targets if prerequisite changes.
This will expose bugs in a few programs. They shoud be easy to adapt.
Otherwise keeping an older version of <code>GNU make</code> in parallel to the
newer one should be a reasonable workaround as well.</p>
<p>So far only <code>opensp</code>, <code>ghc</code> and <code>dtc</code> needed fixing.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 25, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 25 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/260-make-multiple-targets.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Shrinking closure example</title>
    <link>http://trofi.github.io/posts/259-shrinking-closure-example.html</link>
    <description><![CDATA[<p>Sometimes I check <code>nixpkgs</code> packages I use for unexpected
development-only runtime dependencies. I do it mostly to shrink download
sizes for things I update frequently.</p>
<p>I developed a few hacks to find things quickly. The primary hack is to
grep dependency graph of an executable-only package (say, a game) for
<code>-dev</code> packages in it’s runtime closure. Here is an example for <code>fheroes2</code>
package:</p>
<pre><code>$ nix-store -q --graph $(nix-build -A fheroes2) | grep -P -- '-dev.*-&gt;' | grep -vP -- '-&gt;.*-dev'
&quot;4bdanp07rax5mazgjzgdwx61sf6p01qc-SDL2-2.0.22-dev&quot; -&gt; &quot;nj09vl0pzc41sn4wh7q2vlppmkv3dhiy-SDL2_mixer-2.0.4&quot; [color = &quot;burlywood&quot;];
...</code></pre>
<p>Here we see that <code>SDL2.dev</code> package is pulled into <code>SDL2_mixer.out</code>
runtime closure. It’s a bug.</p>
<p>More interesting hack is to grep full runtime closure for files that
are cleary development-only: <code>C</code> ehader files, <code>pkg-config</code> files and so
on. Here is a <code>grep</code> example again for <code>fheroes2</code>:</p>
<pre><code>$ find $(nix path-info -r $(nix-build -A fheroes2)) | grep -P [.]h$ | shuf | unnix | nl | tail -n 2
  1301  /&lt;&lt;NIX&gt;&gt;/libnfnetlink-1.0.2/include/libnfnetlink/libnfnetlink.h
  1302  /&lt;&lt;NIX&gt;&gt;/xorgproto-2021.5/include/X11/extensions/dpmsproto.h</code></pre>
<p>Here we see that <code>xorgproto</code> (header-only package) and <code>libnfnetlink</code>
(package without a separate <code>.dev</code> output) pull in development headers
into our previous game. Both are probably unintended and worth a fix.</p>
<p>To get rid of the dependencies I usually add <code>dev</code> outputs to libraries
without <code>dev</code> output like a recent
<a href="https://github.com/NixOS/nixpkgs/pull/191775/commits/d04acb8a96c2ae37dd4ff58db65dedfab8d3d79f">libfido2 example</a>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/libfido2/default.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/libfido2/default.nix</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -29,6 +29,8 @@ stdenv.mkDerivation rec {</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>   propagatedBuildInputs = [ openssl ];</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  outputs = [ &quot;out&quot; &quot;dev&quot; &quot;man&quot; ];</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>   cmakeFlags = [</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>     &quot;-DUDEV_RULES_DIR=${placeholder &quot;out&quot;}/etc/udev/rules.d&quot;</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>     &quot;-DCMAKE_INSTALL_LIBDIR=lib&quot;</span></code></pre></div>
<p>Sometime I have to explicitly change the package to not retain
build-only dependencies. Here is a recent
<a href="https://github.com/NixOS/nixpkgs/pull/191810/commits/02ba9a3d60c6c45e1df45714a2a3db714eed9c18">freedroidrpg example</a>:</p>
<pre><code>Do not embed paths to build-only depends (-I...SDL2-dev and friends)
into savefile lua comments.
--- a/src/savestruct_internal.c
+++ b/src/savestruct_internal.c
@@ -486,8 +486,8 @@ void save_game_data(struct auto_string *strout)
        autostr_append(strout,
                &quot;SAVEGAME: %s %s %s;sizeof(tux_t)=%d;sizeof(enemy)=%d;sizeof(bullet)=%d;MAXBULLETS=%d\n&quot;,
                SAVEGAME_VERSION, SAVEGAME_REVISION, VERSION, (int)sizeof(tux_t), (int)sizeof(enemy), (int)sizeof(bullet), (int)MAXBULLETS);
-       autostr_append(strout, &quot;BUILD_CFLAGS: %s\n&quot;, BUILD_CFLAGS);
-       autostr_append(strout, &quot;BUILD_LDFLAGS: %s\n&quot;, BUILD_LDFLAGS);
+       autostr_append(strout, &quot;BUILD_CFLAGS: %s\n&quot;, &quot;&lt;hidden&gt;&quot;);
+       autostr_append(strout, &quot;BUILD_LDFLAGS: %s\n&quot;, &quot;&lt;hidden&gt;&quot;);
        autostr_append(strout, &quot;VERSION: %s\n&quot;, freedroid_version);
        autostr_append(strout, &quot;--]]\n&quot;);</code></pre>
<p>Sometimes you might also need to add <code>propagatedBuildInputs = ...</code> to make
headers-only <code>dev</code> output self-contained.</p>
<p>Is it worth the hassle? If feels like development headers don’t take
that much space anyway. It’s true that some packages have tiny overhead.
But things add up quickly. For example
<a href="https://github.com/NixOS/nixpkgs/pull/191810">freedroidrpg PR</a> shrinks
runtime closure from <code>808MB</code> down to <code>450MB</code> (44% reduction). While
<a href="https://github.com/NixOS/nixpkgs/issues/191770#issuecomment-1250247308">fheroes2 RPs</a>
shrunk runtime closure from <code>622MB</code> down to <code>557MB</code> (11% reduction).</p>
<p>These are just two examples I found in 5 minutes. There are many more
packages you can fix in <code>nixpkgs</code>! Give it a try!</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 24, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sat, 24 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/259-shrinking-closure-example.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>GNU make's 'Secondary Expansion' feature</title>
    <link>http://trofi.github.io/posts/258-gnu-make-s-secondary-expansion-feature.html</link>
    <description><![CDATA[<p>People occasionally ask me when
<a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">make --shuffle</a> feature will
be released. The short answer is: I don’t know. I would like to have it
released sooner but I also understand that stabilization requires real
work to get the release out.</p>
<p>But fear not, not all is lost! Paul sent out
<a href="https://lists.gnu.org/archive/html/bug-make/2022-09/msg00003.html">an announcement</a>
a few days ago that the new release is in the works!</p>
<p>To get some confidence that <code>make --shuffle</code> is not completely broken I
gave current <code>master</code> a go.</p>
<p>The setup was straightforward as usual: I added current <code>make</code> snapshot
locally into <code>nixpkgs</code> and tried to build my desktop system with it
using <code>nix build -f. nixos system</code>.</p>
<p>Quiz question: did <code>make --shuffle</code> still work? :)</p>
<p>Let’s find out.</p>
<h2 id="autoconf">autoconf</h2>
<p>A few seconds into the build the first failed package was
<code>autoconf-2.71</code> (and <code>autoconf-2.69</code> slightly later). The symptom
was the following suspicious build failure:</p>
<pre><code>$ make
...
bash: line 1: env: command not found
make  all-am
bash: line 1: make: command not found
make: *** [Makefile:928: all] Error 127</code></pre>
<p><code>make: command not found</code> suggested something broke the <code>PATH</code>
environment variable. Grepping <code>automake</code>s source for <code>PATH</code> I was lucky
to find this code snippet:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># In cfg.mk:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dv">export PATH = $(shell echo &quot;`pwd`/tests:</span><span class="ch">$$</span><span class="dt">PATH&quot;)</span></span></code></pre></div>
<p>Until then I had no idea about <code>export</code> keyword in <code>GNU make</code>! This keyword
exports <code>make</code>-level variables to child sub-processes. Mostly
intended for sub-<code>make</code>. But <code>$(shell ...)</code> calls work as well.</p>
<p>If you are not very familiar with <code>GNU make</code> the code above might not look
tricky. Let’s talk a bit about various variable assignments.
<code>GNU make</code> has that many:</p>
<pre><code>     IMMEDIATE = DEFERRED
     IMMEDIATE ?= DEFERRED
     IMMEDIATE := IMMEDIATE
     IMMEDIATE ::= IMMEDIATE
     IMMEDIATE :::= IMMEDIATE-WITH-ESCAPE
     IMMEDIATE += DEFERRED or IMMEDIATE
     IMMEDIATE != IMMEDIATE</code></pre>
<p>Yeah, it’s 7 types of them. We use deferred one in the example
above. From what I understand <code>POSIX</code> defines only the first
<code>IMMEDIATE = DEFERRED</code>.</p>
<p>I’ll quote <code>info make</code> here for details:</p>
<pre><code>3.7 How 'make' Reads a Makefile
===============================

GNU 'make' does its work in two distinct phases.  During the first phase
it reads all the makefiles, included makefiles, etc.  and internalizes
all the variables and their values and implicit and explicit rules, and
builds a dependency graph of all the targets and their prerequisites.
During the second phase, 'make' uses this internalized data to determine
which targets need to be updated and run the recipes necessary to update
them.

   It's important to understand this two-phase approach because it has a
direct impact on how variable and function expansion happens; this is
often a source of some confusion when writing makefiles.  Below is a
summary of the different constructs that can be found in a makefile, and
the phase in which expansion happens for each part of the construct.

   We say that expansion is &quot;immediate&quot; if it happens during the first
phase: 'make' will expand that part of the construct as the makefile is
parsed.  We say that expansion is &quot;deferred&quot; if it is not immediate.
Expansion of a deferred construct part is delayed until the expansion is
used: either when it is referenced in an immediate context, or when it
is needed during the second phase.</code></pre>
<p>The main ones I’ll focus on here are <code>:=</code> (immediate) vs <code>=</code> (deferred).</p>
<p>Here is one possible example that illustrates the difference:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">AI </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">AD  </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;AI=</span><span class="ch">$(</span><span class="dt">AI</span><span class="ch">)</span><span class="st"> BI=</span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span><span class="st">&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;AD=</span><span class="ch">$(</span><span class="dt">AD</span><span class="ch">)</span><span class="st"> BD=</span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span><span class="st">&quot;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="dt">BI </span><span class="ch">:=</span><span class="st"> BI-val</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="dt">BD  </span><span class="ch">=</span><span class="st"> BD-val</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
AI= BI=BI-val
AD=BD-val BD=BD-val</code></pre>
<p>Here <code>AI</code> refers to <code>BI</code> value before <code>BI</code> is defined. While <code>AD</code> refers
to <code>BD</code> value after <code>BD</code> is defined. <code>:=</code> is very useful for cases when
right hand side is computationally non-trivial and thus should not be
duplicated.</p>
<p>Typical deferred assignment error is an accidental recursion:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="dt">C </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">C</span><span class="ch">)</span><span class="st"> also-bar</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;C=</span><span class="ch">$(</span><span class="dt">C</span><span class="ch">)</span><span class="st">&quot;</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ LANG=C make
Makefile:1: *** Recursive variable 'C' references itself (eventually).  Stop.</code></pre>
<p>Going back to our initial example of <code>export PATH = $(shell echo $$(pwd)/tests:$$PATH")</code>
here <code>export</code> attempts to export a <code>PATH</code> make variable as environment
for ran subprocesses like <code>$(shell ...)</code> call in this example. It also
tries to base the new <code>PATH</code> value on existing shell-defined <code>PATH</code>
value. So what happens first? Variable export before <code>shell</code> call?
Or variable definition after <code>shell</code> call? If <code>:=</code> were to be used
instead then it would be more straightforward: export would probably
happen after.</p>
<p>The answer is … <code>make</code> did change the actual behaviour recently. To
quote the <a href="https://git.savannah.gnu.org/cgit/make.git/commit/NEWS?id=98da874c43035a490cdca81331724f233a3d0c9a">NEWS file</a>:</p>
<pre><code>* WARNING: Backward-incompatibility!
  Previously makefile variables marked as export were not exported to commands
  started by the $(shell ...) function.  Now, all exported variables are
  exported to $(shell ...).
  To detect this change search for 'shell-export' in the .FEATURES variable.</code></pre>
<p>To avoid this ambiguity <code>autoconf</code> was trivially fixed with
<a href="https://git.savannah.gnu.org/cgit/autoconf.git/commit/?id=31f673434ee402258b45e958c88acc8725d82b1a">the following patch</a>
upstream:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/cfg.mk</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/cfg.mk</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -20,2 +20,3 @@</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a> # Build with our own versions of these tools, when possible.</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="st">-export PATH = $(shell echo &quot;`pwd`/tests:$$PATH&quot;)</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="va">+export PATH := $(or $(PWD),$(shell pwd))/tests:$(PATH)</span></span></code></pre></div>
<p>Meanwhile <code>GNU make</code> also
<a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=70ba0357a080f72b9f5912f16b3ffc095db381e6">added graceful fallback</a>
to this case as exporting empty variable is probably not very useful.
Thus existing <code>autoconf</code> releases should still compile successfully
with <code>GNU make</code> from <code>master</code>.</p>
<p>Phew. This failure was not related to <code>--shuffle</code>.</p>
<h2 id="glibc">glibc</h2>
<p>Once <code>autoconf</code> was fixed I resumed world rebuild. The next failure was
in <code>glibc</code>:</p>
<pre><code>    $ make --shuffle
    ...
    make  -C localedata install-locales
    make: invalid shuffle mode: '1662724426r'</code></pre>
<p><code>GNU make</code> complains at unexpected <code>r</code> trailing letter in
<code>--shuffle=1662724426r</code> parameter. That suffix comes from … <code>glibc</code>’s
own <code>Makefile</code>:</p>
<pre><code># In glibc/Makerules:
# Don't define any builtin rules.
MAKEFLAGS := $(MAKEFLAGS)r</code></pre>
<p>Normally <code>MAKEFLAGS</code> contains options passed to <code>make</code>:</p>
<pre><code>$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f -
MAKEFLAGS=
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s
MAKEFLAGS=s
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s -r
MAKEFLAGS=rs
$ printf 'all:; @echo MAKEFLAGS=$(MAKEFLAGS)' | make -f - -s -r --shuffle
MAKEFLAGS=rs --shuffle=1663776045</code></pre>
<p>Note that <code>MAKEFLAGS</code> value does not contain dashes in option names.</p>
<p><code>GNU make</code> also allows extending <code>MAKEFLAGS</code> from within <code>Makefile</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">MAKEFLAGS </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">MAKEFLAGS</span><span class="ch">)</span><span class="st"> --no-builtin-rules</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo MAKEFLAGS=</span><span class="ch">$(</span><span class="dt">MAKEFLAGS</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
MAKEFLAGS=r
$ make --no-builtin-variables
MAKEFLAGS=rR
$ make --no-builtin-variables --no-print-directory
MAKEFLAGS=rR --no-print-directory</code></pre>
<p><code>--no-builtin-variables</code> and <code>-R</code> are equivalent. <code>GNU make</code> picks short
form of an option if available.</p>
<p>Note how short single-letter options get globbed together in the first
word while long options (without short option equivalent) are passed
separately. <code>NEWS</code> file tells us it’s another recent behaviour change:</p>
<pre><code>* WARNING: Backward-incompatibility!
  Previously only simple (one-letter) options were added to the MAKEFLAGS
  variable that was visible while parsing makefiles.  Now, all options
  are available in MAKEFLAGS.</code></pre>
<p><a href="https://sourceware.org/git/?p=glibc.git;a=commitdiff;h=2d7ed98add14f75041499ac189696c9bd3d757fe">The fix</a>
exceeded 1 liner bucket as <code>glibc</code> also introspected <code>MAKEFLAGS</code> in
other places for <code>-s</code> (<code>--silent</code>) option presence. Relevant part of
the fix:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makerules</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makerules</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -796,2 +796,2 @@ endif</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a> # Don't define any builtin rules.</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="st">-MAKEFLAGS := $(MAKEFLAGS)r</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="va">+MAKEFLAGS := $(MAKEFLAGS) -r</span></span></code></pre></div>
<p>No complications here.</p>
<p>Again, not exactly <code>--shuffle</code>-specific bug. Using of any long option
would break <code>glibc</code> build.</p>
<h2 id="ghc">ghc</h2>
<p>At this point <code>autoconf</code> and <code>glibc</code> fixes above unblocked many other
package builds. Most other projects’ <code>Makefile</code>s are not that
complicated and don’t rely on <code>GNU make</code> extensions. They usually limit
themselves to <code>POSIX make</code> features. <code>glibc</code> is a notable exception.
That makes it a good project to test new <code>GNU make</code> versions.</p>
<p>Believe it or not there is even heavier user of <code>GNU make</code>! It is
<code>ghc</code> (the <code>Glasgow Haskell Compiler</code>)! The small caveat is that it
migrates off <code>GNU make</code> to own <code>haskell</code>-based <code>hadrian</code> build system.
Many distributions still package previous versions of <code>ghc</code> and use
<code>GNU make</code> to build it.</p>
<p>In case of <code>ghc</code>, <code>GNU make</code> itself managed to <code>SIGSEGV</code> itself:</p>
<pre><code>$ make --shuffle
...
Configuring ghc-bin-9.0.2...
Warning: 'data-dir: ..' is a relative path outside of the source tree. This
will not work when generating a tarball with 'sdist'.
&quot;rm&quot; -f utils/deriveConstants/dist/build/.depend.haskell.tmp
&quot;rm&quot; -f utils/deriveConstants/dist/build/.depend.c_asm.tmp
&quot;rm&quot; -f utils/genprimopcode/dist/build/.depend.c_asm.tmp
make: *** [Makefile:124: all] Segmentation fault (core dumped) shuffle=1663318833
make: INTERNAL: Exiting with 14 jobserver tokens available; should be 16!</code></pre>
<p>It might not be obvious, but <code>Segmentation fault</code> happens within
<code>GNU make</code> itself, not just some tool it runs. Jobserver token loss
is another sign of things went wrong with <code>make</code> process itself.</p>
<p>This time crash happened only if I used <code>make --shuffle</code> option.</p>
<p>I was not able to craft a simple crashing example. I spent some time in
<code>gdb</code> to understand the failures mode. I found that it has something to
do with another fun <code>GNU make</code> extension: <code>Secondary Expansion</code>. I’ll
quote another bit of <code>GNU make</code> manual entry:</p>
<pre><code>3.9 Secondary Expansion
=======================

Previously we learned that GNU 'make' works in two distinct phases: a
read-in phase and a target-update phase (*note How 'make' Reads a
Makefile: Reading Makefiles.).  GNU make also has the ability to enable
a _second expansion_ of the prerequisites (only) for some or all targets
defined in the makefile.  In order for this second expansion to occur,
the special target '.SECONDEXPANSION' must be defined before the first
prerequisite list that makes use of this feature.</code></pre>
<p>I’ll start from non-working example to describe an intent for typical
use of <code>Secondary Expansion</code>. Suppose you want to use the list of
prerequisites dynamically read from external command (<code>ghc</code> for example
parses <code>.cabal</code> build files to extract prerequisites). I will emulate
external command with a simple <code>$(shell echo i1 i2 i3)</code> call.</p>
<p>Naive non-working approach to achieve would look like that:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">ALL_INPUTS</span><span class="ch">)</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo Inputs: </span><span class="ch">$^</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="dv">i%:</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># no-op</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Has to go after rule defined above. In ghc it's based on external</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="co"># command that dynamically builds a list of prerequisites:</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="dt">ALL_INPUTS </span><span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> echo i1 i2 i3</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
Inputs:</code></pre>
<p>The example above attempted to get <code>i1 i2 i3</code> as a dynamic input and
failed. <code>$(ALL_INPUTS)</code> is expanded to an empty string. <code>GNU make</code>
allows this style of dependencies when <code>.SECONDEXPANSION:</code> phony
target is present in the <code>Makefile</code>:</p>
<p>Here is a working example closer to what <code>ghc</code> uses:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="ot">.SECONDEXPANSION:</span></span>
<span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> </span><span class="ch">$$</span><span class="dt">(ALL_INPUTS)</span></span>
<span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>	<span class="ch">@</span><span class="fu">echo Inputs: </span><span class="ch">$^</span></span>
<span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a><span class="dv">i%:</span></span>
<span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>	: <span class="co"># $@ no-op</span></span>
<span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a><span class="co"># Has to go after rule defined above. In ghc it's based on external</span></span>
<span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a><span class="co"># command that dynamically builds a list of prerequisites:</span></span>
<span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a><span class="dt">ALL_INPUTS </span><span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="kw">shell</span><span class="st"> echo i1 i2 i3</span><span class="ch">)</span></span></code></pre></div>
<p>Running:</p>
<pre><code>$ make
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3</code></pre>
<p>Now we get our dynamic input as expected.</p>
<p>The magic happens around <code>$$(ALL_INPUTS)</code> expression: first it is
expanded to <code>$(ALL_INPUTS)</code> and on second expansion it uses already
available result. There are other simpler ways to get the same effect
(like moving variable assignment earlier). But that’s what <code>ghc</code> decided
to use.</p>
<p>While this simple example did not crash <code>GNU make</code> it did show me a
symptom of the problem. <code>make --shuffle</code> had no effect on prerequisite
traversal order:</p>
<pre><code>$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i2 no-op
: # i3 no-op
Inputs: i1 i2 i3</code></pre>
<p>Prerequisites were never reordered. But they were supposed to! Yet again
<code>NEWS</code> entry hinted at why it started happening only recently:</p>
<pre><code>* GNU make was performing secondary expansion of all targets, even targets
  which didn't need to be considered during the build.  In this release
  only targets which are considered will be secondarily expanded.</code></pre>
<p>In other words before the change order of events was:</p>
<ol type="1">
<li>read</li>
<li>expand</li>
<li><em>second expand (of everything)</em></li>
<li><em>shuffle</em></li>
<li>execute</li>
</ol>
<p>After the change:</p>
<ol type="1">
<li>read</li>
<li>expand</li>
<li><strong>shuffle</strong></li>
<li><strong>second expand (of built targets only)</strong></li>
<li>execute</li>
</ol>
<p>The bug mechanics: <code>shuffle</code> step assumed no changes in prerequisite
lists would happen after. Moving <code>second expand</code> step behind it broke
that assumptions: it cancelled shuffling effect (minor problem)
and introduced dangling references to freed memory (major problem).</p>
<p>Once understood the fix was trivial: refresh shuffle data if prerequisite
list was changed. The patch is
<a href="https://git.savannah.gnu.org/cgit/make.git/commit/?id=ca4234c4b550618df2194e0617c43bb12524f820">a few-liner</a>:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/file.c</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/file.c</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -576,6 +577,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>   struct dep **dp;</span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>   const char *fstem;</span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>   int initialized = 0;</span>
<span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  int changed_dep = 0;</span></span>
<span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>   if (f-&gt;snapped)</span>
<span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>     return;</span>
<span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -664,6 +666,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>       if (new == 0)</span>
<span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>         {</span>
<span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>           *dp = d-&gt;next;</span>
<span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a><span class="va">+          changed_dep = 1;</span></span>
<span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>           free_dep (d);</span>
<span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>           d = *dp;</span>
<span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>           continue;</span>
<span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -672,6 +675,7 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>       /* Add newly parsed prerequisites.  */</span>
<span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>       fstem = d-&gt;stem;</span>
<span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a>       next = d-&gt;next;</span>
<span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a><span class="va">+      changed_dep = 1;</span></span>
<span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a>       free_dep (d);</span>
<span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a>       *dp = new;</span>
<span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>       for (dp = &amp;new, d = new; d != 0; dp = &amp;d-&gt;next, d = d-&gt;next)</span>
<span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -688,6 +692,12 @@ expand_deps (struct file *f)</span></span>
<span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>       *dp = next;</span>
<span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a>       d = *dp;</span>
<span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a>     }</span>
<span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a><span class="va">+    /* Shuffle mode assumes '-&gt;next' and '-&gt;shuf' links both traverse the same</span></span>
<span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a><span class="va">+       dependencies (in different sequences).  Regenerate '-&gt;shuf' so we don't</span></span>
<span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a><span class="va">+       refer to stale data.  */</span></span>
<span id="cb26-35"><a href="#cb26-35" aria-hidden="true" tabindex="-1"></a><span class="va">+    if (changed_dep)</span></span>
<span id="cb26-36"><a href="#cb26-36" aria-hidden="true" tabindex="-1"></a><span class="va">+      shuffle_deps_recursive (f-&gt;deps);</span></span>
<span id="cb26-37"><a href="#cb26-37" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb26-38"><a href="#cb26-38" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb26-39"><a href="#cb26-39" aria-hidden="true" tabindex="-1"></a> /* Add extra prereqs to the file in question.  */</span></code></pre></div>
<p>We track all the places where prerequisite list is modified and then
rebuild shuffle list if any changes happened to the list.</p>
<p>The fix restored shuffling property and fixed <code>SIGSEGV</code> when building
<code>ghc</code>:</p>
<pre><code>$ make --shuffle
: # i2 no-op
: # i3 no-op
: # i1 no-op
Inputs: i1 i2 i3

$ make --shuffle
: # i1 no-op
: # i3 no-op
: # i2 no-op
Inputs: i1 i2 i3</code></pre>
<p>This one was clearly <code>--shuffle</code>-related bug.</p>
<h2 id="parting-words">Parting words</h2>
<p>Trying out a pre-release was totally worth it. I found out about
existence of <code>export</code> and <code>Secondary Expansion</code> extensions.</p>
<p>The test
uncovered two bugs in upstream projects. Upstreams were very quick to
accept fixes. The bugs happened in somewhat obscure parts of <code>GNU make</code>
specific extensions: environment variable exports, <code>MAKEFLAGS</code> variable
update (and introspection).</p>
<p>The test also exposed a bug in <code>make --shuffle</code> implementation for an
advanced <code>Secondary Expansion</code> feature which was also an easy one to
fix.</p>
<p>After the fixes above I did not find any other related breakages.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September 16, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Fri, 16 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/258-gnu-make-s-secondary-expansion-feature.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>A year on NixOS</title>
    <link>http://trofi.github.io/posts/257-a-year-on-nixos.html</link>
    <description><![CDATA[<p>Discourse told me that one year has passed since I switched over to
<code>NixOS</code> for my main desktop system. It feels like it was yesterday.
Time to write a bit of retrospective of past 6 (or so) months.</p>
<h2 id="system-maintenance">System maintenance</h2>
<p>Nightly <code>nixos-unstable</code> automatic upgrades are surprisingly fast and
smooth. I had one period when I was not able to update
<a href="https://github.com/NixOS/nixpkgs/pull/185988">claws-mail</a>
for Perl-related build failures. I ended up doing nothing for a week and
somebody fixed it for me! My system was failing updates all that week.
It did not prevent me in any way from doing my usual activities.</p>
<p>I had to tweak <code>/etc/nixos/</code> config 1 time to adapt to option rename.
The warning message told me new name of the field: <code>nix.systemFeatures</code>
-&gt; <code>nix.settings.system-features</code>. That was smooth as well.</p>
<p>I don’t remember any other maintenance-related activities I had to do
to make the desktop working. I rebooted 2-3 times each month for
various unrelated reasons (power loss, multi-day travel, etc.). Reboots
exposed me to very fresh kernel versions each time. I had no troubles
with them either.</p>
<h2 id="unusual-software">Unusual software</h2>
<p>Of slightly unusual deeds I installed 32-bit wine with <code>pipewire</code> socket
passed to a sandboxed used from my main user. That went very smooth and
effortless as well.</p>
<p>Otherwise I’m afraid I don’t need anything special from the
distribution. Most packages I need are widely used and the rare ones
missing are trivial to package in a personal overlay. Just yesterday
I added a trivial <a href="https://github.com/trofi/uselex">uselex.rb</a> expression:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">stdenv</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">ruby_3_1</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">binutils-unwrapped-all-targets</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">unstableGitUpdater</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2017-07-28&quot;</span><span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;dfddc3dc839500edceca4665af7ee38f90e92081&quot;</span><span class="op">;</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-4/HK+E1iiwMIvDwo+IheA+tETref9tCAG6WcB34CbKE=&quot;</span><span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> ruby_3_1 <span class="op">];</span></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>  <span class="va">postPatch</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="st">    patchShebangs</span></span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="st">    substituteInPlace uselex.rb --replace &quot;'nm'&quot; &quot;'</span><span class="sc">${</span>binutils<span class="op">-</span>unwrapped<span class="op">-</span>all<span class="op">-</span>targets<span class="sc">}</span><span class="st">/bin/nm'&quot;</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>  <span class="va">installPhase</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a><span class="st">    install -d $out/bin</span></span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="st">    install -m 0755 uselex.rb $out/bin</span></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Update as:</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>  <span class="co">#    nix-shell ./maintainers/scripts/update.nix --argstr package uselex --arg include-overlays true</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>  <span class="va">passthru</span>.<span class="va">updateScript</span> <span class="op">=</span> unstableGitUpdater <span class="op">{</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>    <span class="va">url</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>  <span class="va">meta</span> <span class="op">=</span> <span class="kw">with</span> lib<span class="op">;</span> <span class="op">{</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;Look for USEless EXports in object files.&quot;</span><span class="op">;</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>    <span class="va">homepage</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/uselex&quot;</span><span class="op">;</span></span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="va">license</span> <span class="op">=</span> licenses.publicDomain<span class="op">;</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>    <span class="va">maintainers</span> <span class="op">=</span> <span class="kw">with</span> maintainers<span class="op">;</span> <span class="op">[</span> trofi <span class="op">];</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>    <span class="va">platforms</span> <span class="op">=</span> platforms.all<span class="op">;</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="community-support">Community support</h2>
<p>I keep being amazed by inclusivity and depth of technical expertise of
<code>NixOS</code> community. Maybe it’s just because I did not break anything
major yet? :)</p>
<p>I almost never see any blame or aggressive behaviour. And when rare
incidents happen people do step in and explain why it’s not OK and
suggest various ways out of a conflict. That makes the community a great
collaborative environment. At least from the far viewpoint I interact
with it.</p>
<p>People have the courage to develop things I would never dare
to tackle alone (but I would be happy to help with small improvements).
One example is cross-compilation of huge chunk of <code>nixpkgs</code>
(<a href="https://github.com/MidnightCommander/mc/commit/6b67d231a2f447cf5f33180c618c2a67849e6d15">mc example</a>).</p>
<p>I keep learning new details about <code>nixpkgs</code> and other software. It’s
so fun!</p>
<p>I don’t have the time to follow all the <code>NixOS Dev</code> matrix chat I’m
in. It’s just too many updates usually. But the other ones are low
traffic enough. My favourites are probably <code>Nix Cross Compiling</code>
(where the main topic is toolchains and related issues) and <code>Staging</code>
(where I mostly track merges of <code>staging-next</code> into <code>master</code> out of
idle curiosity).</p>
<p>I do have time to follow relatively low traffic
<a href="https://discourse.nixos.org/" class="uri">https://discourse.nixos.org/</a> and occasionally post announcements there
myself.</p>
<h2 id="maintenance-model">Maintenance model</h2>
<p>At first I thought that <code>nixpkgs</code> maintenance model is too simple to be
viable for a large package base: most package updates are not made by
(or even approved by) package maintainers. It felt a bit fragile: after
all there is always a chance of some fancy detail about the package that
needs to be kept in mind.</p>
<p>At least the partial answer to that is that <code>nixpkgs</code> has quite a bit of
tests. If new <code>nixpkgs</code> can boot my desktop in <code>qemu</code> after a <code>binutils</code>
update it does not really matter if there are minor mistakes in it. We
can always revise it and fix later.</p>
<p>Most trivial package updates are done by … an automated system! Just
look at <a href="https://github.com/NixOS/nixpkgs/graphs/contributors">these stats</a>.
It is so surreal to allow the bot file update PRs. But on the other hand
for smaller packages it’s exactly what humans would have to do anyways.
Why not pre-populate the PR with mechanical details already sorted?
Reviewers (and better yet automated tests) can always object to special
cases of more complex packages.</p>
<p>Having finished recently <a href="https://github.com/NixOS/nixpkgs/pull/185297">binutils-2.39 update</a>
I would say maintainership works great. I hope we will break no packages
by that somewhat disruptive (API change wise) update.</p>
<h2 id="home-server-experience">Home server experience</h2>
<p>I don’t have anything to complain about. Over past 6 months I played a
bit with distributed compilation which worked great. Otherwise I did not
do any major configuration changes on the server. It still serves <code>HTTP</code>
and a few services. Required zero maintenance from me over that period.</p>
<p>Automatic reboots on kernel upgrade makes server’s uptime below 2-3 days
on average. It does not feel disruptive and adds a bit of peace of mind
against exploits against outdated software.</p>
<h2 id="bugs-what-bugs">Bugs? What bugs?</h2>
<p><code>NixOS</code>-specific bugs do certainly happen time to time.</p>
<p>Mostly they stem from the fact that default paths are unusual (usually
easy to deal with) and split across multiple locations (sometimes
requires patching or clever symlink hacks).</p>
<p>Past examples are <a href="https://github.com/NixOS/nixpkgs/pull/187694">libtool</a>
embedding <code>/nix/sotore</code> paths to <code>make dist</code> tarballs and non-working
<a href="https://github.com/NixOS/nixpkgs/issues/189753">include-what-you-use</a> due
to dynamic headers location.</p>
<h2 id="parting-words">Parting words</h2>
<p>I think <code>NixOS</code> works well for me so far. If you still did not consider
trying it as well :)</p>

<div class="info">
    Posted on September  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 04 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/257-a-year-on-nixos.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Porting to pure Bison API</title>
    <link>http://trofi.github.io/posts/256-porting-to-pure-bison-api.html</link>
    <description><![CDATA[<p>A few weeks ago I started code cleanup for
<a href="https://github.com/trofi/ski/commits/master">Ski</a>.
Upstream <code>Ski</code> released in 2007 last time. I think it was actively
developed in 2003. That makes <code>Ski</code> about a 20 years old codebase.
It was more of a proof-of-concept makeshift project to help early
adopters than a piece of finished and maintained work. But it works
surprisingly good even today.</p>
<p>I would like to add a few medium sized features to <code>Ski</code>. I am a bit
afraid to make non-trivial changes. I decided to do do minor cleanup
first.</p>
<p>To deal with code health of old projects that I pretend to own (and thus
have the ability to do large cleanup changes) I have a few hacks
available. It mostly boils down to enabling a few compiler warnings to
use as suggestions for making things a bit more explicit.</p>
<p>I’ll outline some tricks I used for <code>Ski</code> and then will focus on
<code>Bison</code> API update.</p>
<h2 id="simple-tricks">Simple tricks</h2>
<p>C has a few language warts that allow you write code that is very likely
incorrect and yet standard compliant. A good example is implicit
function declaration behaviour. Luckily <code>gcc</code> has a set of warning to
catch those.</p>
<h3 id="implicit-variable-and-function-declarations">Implicit variable and function declarations</h3>
<p>To catch implicit function and variables <code>gcc</code> has at least the following
flags:</p>
<ul>
<li><code>-Werror=implicit-int</code></li>
<li><code>-Werror=implicit-function-declaration</code></li>
<li><code>-Werror=strict-prototypes</code></li>
</ul>
<p>I used these warnings successfully in
<a href="https://github.com/xmms2/xmms2-devel/commit/1dc66e4099e5b08f59bca86d7979f057fd82eba7">xmms2</a>,
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=80970472179a45609c0b11b80619bc8c32b15f77">linux kernel</a>
and and other projects.</p>
<p>Linux kernel is especially prone to these bugs as it heavily uses top
level macros a lot. lack of header inclusion for such a macro usually
turns macro call into a function declaration without any build failure.</p>
<p>Related build failures are still being fixed in <code>linux</code> kernel to this
day. Header inclusion changes are happening there all the time to speed
builds up and huge amount of <code>CONFIG</code> options increases the chance of
detting into a combination where a few headers got lost.</p>
<p>I’d say it’s a must have set of warning flags for a <code>C</code>-based project.</p>
<h3 id="modernized-configure.acmakefile.am">Modernized configure.ac/Makefile.am</h3>
<p>If the outdated project is <code>autotools</code>-based then chances are it uses
many deprecated and invalid constructs. Sometimes a project has complex
<code>./autogen.sh</code> script. My goal is usuallly to turn that script into a
single <code>autoreconf -i -f -W all</code> invocation. Ideally <code>configure.ac</code> and
<code>Makefile.am</code> should be enough to configure all the other details.
<code>-W all</code> helps catching deprecated macros and other lint errors.</p>
<p>For <code>Ski</code> I did the following changes:</p>
<ul>
<li>ported from autoconf <code>2.13</code>-ish to <code>autoconf-2.70</code></li>
<li>used <code>AC_CONFIG_AUX_DIR([build-aux])</code> to move most auxiliary files
into a <code>build-aux/</code> subdirectory</li>
<li>used <code>AM_SILENT_RULES([yes])</code> to make builds less verbose to make
warnings stand out</li>
<li>made <code>Makefile.am</code> non-recursive to make cross-directory dependencies
simpler</li>
<li>used <code>ACLOCAL_AMFLAGS = -I m4 -I macros --install</code> to vendor external
<code>m4</code> macros as separate <code>.m4</code> files instead of globbing them together
into a single <code>aclocal.m4</code></li>
</ul>
<h3 id="catch-inconsistent-function-prototypes-and-mark-functions-local">Catch inconsistent function prototypes and mark functions local</h3>
<p><code>Ski</code> is a bit special in a way it handles prototypes. For an example
file <code>foo.c</code> with <code>void foo(void)</code> function there was usually no
according <code>foo.h</code> available. Instead various <code>bar.c</code> and <code>baz.c</code> files
had their own local imports of <code>void foo(void)</code> duplicating the prototype.</p>
<p>The scheme has a few problems: build does not break when you change <code>foo()</code>’s
prototype in <code>foo.c</code> alone, 10x prototype duplication is common making
it harder to change, function prototypes don’t always agree on the
argument count a function has (<a href="https://github.com/trofi/ski/commit/c4de04f3b27424dd0caf5e89bf93ceab8cd59af1">example</a>).</p>
<p>To find such stray prototypes I use a few tricks:</p>
<ul>
<li>Use <code>-Wmissing-declarations</code> to detect cases where <code>foo.c</code> does
not have according header to include to verify prototype consistency.
That way I spot lack of <code>foo.h</code> headers, create them and consolidate
such prototype there. It’s also a good time to sprinkle <code>static</code>
keyword if a symbol happens to be used only in a single <code>.c</code> file.</li>
<li>Use <code>-flto</code> to detect prototype mismatches across such <code>.c</code> files.</li>
<li>Use <code>-Wunused-function -Wunused-variable</code> to detect unused
newly marked <code>static</code> functions.</li>
<li>Use <a href="https://trofi.github.io/posts/186-announce-uselex.rb-useless-exports-extinguisher.html">uselex.rb</a>
to spot more needlessly exported symbols to sprinkle even more <code>static</code>
annotations around.</li>
<li>Use <code>-ffunction-sections -fdata-sections -Wl,--gc-sections -Wl,--print-gc-sections</code>
to catch even more unused code and variables where <code>uselex.rb</code> was not
able to do it. Linkers are som much better at traversing graphs :)</li>
</ul>
<h3 id="make-headers-self-contained-and-minimal">Make headers self-contained and minimal</h3>
<p>When I start adding <code>#include "foo.h"</code> around I frequently notice that
some of them are incomplete and require including other headers themselves.
I usually use syntax-check the headers to fund such cases:</p>
<pre><code>$ for h in $(find -name '*.h'); do
    gcc -DHAVE_CONFIG_H=1 -fmax-errors=1 -I. -Isrc{,/decoder,/encoder} -fsyntax-only -c $h ||
      echo &quot;BROKEN H: $h&quot;
  done</code></pre>
<p>To get rid of unused header inclusions I usually use
<a href="https://github.com/include-what-you-use/include-what-you-use">include-what-you-use</a>.</p>
<h3 id="switch-from-lex-and-yacc-to-flex-and-bison-apis">Switch from lex and yacc to flex and bison APIs</h3>
<p><code>lex</code> and <code>yacc</code> interfaces have a few warts in their APIs. The major
one I would say is that both heavily use global variables to pass data
from one to another (and for user to write semantic actions):
<code>yylval</code>, <code>yyin</code>, <code>yyout</code> and a bunch of helper macros to work with them.</p>
<p>One of immediate benefits of switching from <code>yacc</code> to <code>bison</code> is ability
to enable <code>--warnings</code> reporting.
It is able to flag various grammar deciciencies like <a href="https://github.com/trofi/ski/commit/89c94225c3b4851f09daa54c5b0286a5726c6af0">this one</a>,
or <a href="https://github.com/skvadrik/re2c/commit/7e7c4b97af51f5e343faccacde2a58b9da5a1192">this one</a>.</p>
<p>More advanced benefit is the opportunity to switch to <code>pure</code> API: <code>pure</code> is the
one that uses function parameters to pass things around instead of global
variables. A few switch examples are <a href="https://github.com/trofi/ski/commit/5af00cd51f99127979280278f30cabd2de61d74a">this one</a>
and <a href="https://github.com/skvadrik/re2c/commit/8161d996f0ae0b7f782fff602bc261667c3e95d2">this one</a>.</p>
<p>The gist of it is move away from global <code>yylval</code> to explicit parameter threading.</p>
<h2 id="bison-apis">Bison APIs</h2>
<p>When I fist tried to switch <code>Ski</code> to <code>pure</code> <code>Bison</code> API I failed miserably.
I did not know what <code>Bison</code> generates, what <code>flex</code> generates and what
user is supposed to define. I also enabled function rename from <code>yy*()</code>
to <code>expr*()</code> and quickly got lost in errors and header inclusion cycles.</p>
<p>I stepped back and crafted simple pair of lexer and parser examples.
Then gradually upgraded them to modern world discovering minor API
gotchas one at a time.</p>
<p>The experience allowed me to finally port both <code>Ski</code> and <code>re2c</code> to more
modern <code>Bison</code> API.</p>
<h3 id="simple-example">Simple example</h3>
<p>Our running example will be the following trivial grammar:</p>
<pre><code>&lt;expression&gt; ::= &lt;digit&gt; | &lt;expression&gt; &quot;+&quot; &lt;digit&gt;
&lt;digit&gt; ::= &quot;0&quot; | &quot;1&quot; | ... | &quot;9&quot;</code></pre>
<p>It allows us write an expression of a digit (like <code>"1"</code> or <code>"2"</code>) or an
arbitrary sum of digits (like <code>"1+2+3"</code>). We will also allow whitespace
around.</p>
<p>We’ll need 3 files:</p>
<ul>
<li><code>Bison</code> parser: <code>p.y</code></li>
<li><code>Flex</code> lexer: <code>l.l</code></li>
<li><code>main()</code> function: <code>main.c</code></li>
</ul>
<p>Simple implementation would be the following:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat p.y */</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co">/* local declarations */</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">);</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">%</span><span class="kw">union</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ival<span class="op">;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>token <span class="op">&lt;</span>ival<span class="op">&gt;</span> NUM</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>type <span class="op">&lt;</span>ival<span class="op">&gt;</span> expr</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>result <span class="op">:</span> expr       <span class="op">{</span> printf<span class="op">(</span><span class="st">&quot;RESULT: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> $<span class="dv">1</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>expr <span class="op">:</span> NUM          <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>     <span class="op">|</span> expr <span class="ch">'+'</span> NUM <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span> <span class="op">+</span> $<span class="dv">3</span><span class="op">;</span> printf<span class="op">(</span><span class="st">&quot;I-RESULT: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> $$<span class="op">);</span> <span class="op">}</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>     <span class="op">;</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> yyerror <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;PARSE ERROR: </span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> err<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Here we handle our grammar almost as it’s written in <code>BNF</code>. A few things
to note:</p>
<ul>
<li>Tokens are represented as instances of <code>union YYSTYPE { int ival; }</code>.
Usually tokens are more complicated and have a few more union
alternatives.</li>
<li>Our parse result is the <code>stdout</code> output of intermediate and final
computation step. We don’t collect any of the syntax information here.</li>
</ul>
<p>Note that parser’s definition requires lexing function prototype. Thus we
include all of autogenerated header via <code>#include "lex.expr.h"</code>.</p>
<p>Moving on to lexer:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat l.l */</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option noyywrap</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option nodefault</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="op">[</span> \t\n<span class="op">]</span> <span class="op">{</span> <span class="co">/* skip whitespace */</span> <span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="op">[+]</span> <span class="op">{</span> <span class="cf">return</span> <span class="ch">'+'</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="dv">0</span><span class="op">-</span><span class="dv">9</span><span class="op">]</span> <span class="op">{</span> yylval<span class="op">.</span>ival <span class="op">=</span> yytext<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="ch">'0'</span><span class="op">;</span> <span class="cf">return</span> NUM<span class="op">;</span> <span class="op">}</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="op">.</span> <span class="op">{</span> <span class="cf">return</span> YYUNDEF<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>The lexer is trivial:</p>
<ul>
<li>We support a few whitespace types (tab, space and newline). Whitespace
has no token representation. We just skip through them in this example.</li>
<li>Actual tokens are <code>'+'</code> operation (returned as is) and a digit returned
via <code>YYSTYPE yylval</code> global variable of type <code>union YYSTYPE { int ival; }</code>.</li>
</ul>
<p>Note that lexer’s implementation requires <code>union YYSTYPE</code> declaration provided
by <code>"parse.expr.h"</code> (while parser’s implementation clearly requires lexer’s
<code>yylex()</code>declaration). Thus we pull all of autogenerated lexer header via
<code>#include "parse.expr.h"</code>.</p>
<p>And our <code>main()</code> function:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat main.c */</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[])</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Parsing input from stdin. Press ^D when finished.</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    yyparse<span class="op">();</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s literally just one <code>yyparse()</code> call! Let’s build it:</p>
<pre><code>$ bison --warnings -Wcounterexamples --output=parse.expr.c --header=parse.expr.h --warnings p.y
$ flex --outfile=lex.expr.c --header-file=lex.expr.h l.l
$ gcc lex.expr.c parse.expr.c main.c -o example1</code></pre>
<p>The program happens to work on it’s stdin:</p>
<pre><code>$ ./example1
Parsing input from stdin. Press ^D when finished.
1       +2
I-RESULT: 3
+4
I-RESULT: 7
^D
RESULT: 7</code></pre>
<p>Here we typed <code>1+2+4</code> (with a bit of whitespace) and saw intermediate
results of <code>1+2</code> and intermediate/final result of the whole expression.</p>
<p>Fun fact: thanks to left recursion our grammar allows evaluating parts
of the expression before full expression is available.</p>
<p>Let’s have a peek at defined non-code symbols (data, rodata, undefined)
of generated files:</p>
<pre><code>$ gcc -c lex.expr.c
$ nm lex.expr.o | grep -v -P 't|T'
                 U clearerr
                 U ferror
                 U fileno
                 U fread
                 U free
                 U malloc
                 U realloc
0000000000000130 r yy_base
0000000000000048 b yy_c_buf_p
0000000000000190 r yy_chk
0000000000000150 r yy_def
0000000000000020 r yy_ec
0000000000000018 B yy_flex_debug
0000000000000040 b yy_hold_char
0000000000000008 B yyin
0000000000000000 B yyleng
0000000000000000 D yylineno
                 U yylval
0000000000000044 b yy_n_chars

$ gcc -c parse.expr.c
$ nm parse.expr.o | grep -v -P 't|T'
                 U free
                 U malloc
                 U memcpy
0000000000000000 B yychar
000000000000011b r yycheck
                 U yylex
0000000000000004 B yylval
0000000000000008 B yynerrs
0000000000000126 r yyr1
000000000000012b r yyr2</code></pre>
<p>Lexer defines quite a few globals: <code>yyin</code>, <code>yyleng</code>, <code>yylineno</code>, <code>yy_flex_debug</code>.
Parser does not define as many, but still has a few: <code>yychar</code>, <code>yylval</code>, <code>yynerrs</code>.</p>
<p>I did not realize it’s so much state scattered around.</p>
<h3 id="pure-example">Pure example</h3>
<p>Let’s now turn our example to string input (instead of <code>stdin</code> input)
and switch to pure API.</p>
<p>The main change is:</p>
<ul>
<li>add <code>%option reentrant bison-bridge</code> to <code>flex</code> lexer</li>
<li>add <code>%define api.pure full</code></li>
<li>make it all compile</li>
</ul>
<p>The above set of directives extends <code>int yylex(void)</code> with extra
parameters passed around. But not <code>yyparse()</code>! That will require
explicit extension with <code>%param {yyscan_t scanner}</code> (as it may be
lexer-dependenct).</p>
<p>Here is an updated parser:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat p.y */</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>define api<span class="op">.</span>pure full</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>param <span class="op">{</span>yyscan_t scanner<span class="op">}</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>code requires <span class="op">{</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">typedef</span> <span class="dt">void</span> <span class="op">*</span> yyscan_t<span class="op">;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="co">/* local declarations */</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span>yyscan_t scanner<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">);</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="op">%</span><span class="kw">union</span> <span class="op">{</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ival<span class="op">;</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>token <span class="op">&lt;</span>ival<span class="op">&gt;</span> NUM</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>type <span class="op">&lt;</span>ival<span class="op">&gt;</span> expr</span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>result <span class="op">:</span> expr       <span class="op">{</span> printf<span class="op">(</span><span class="st">&quot;RESULT: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> $<span class="dv">1</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>expr <span class="op">:</span> NUM          <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>     <span class="op">|</span> expr <span class="ch">'+'</span> NUM <span class="op">{</span> $$ <span class="op">=</span> $<span class="dv">1</span> <span class="op">+</span> $<span class="dv">3</span><span class="op">;</span> printf<span class="op">(</span><span class="st">&quot;I-RESULT: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> $$<span class="op">);</span> <span class="op">}</span></span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>     <span class="op">;</span></span>
<span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> yyerror <span class="op">(</span>yyscan_t scanner<span class="op">,</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> err<span class="op">)</span> <span class="op">{</span> fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;PARSE ERROR: </span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> err<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Compared to original example <code>%param {yyscan_t scanner}</code> extends
<code>yyparse()</code> declaration with <code>yyscan_t scanner</code> parameter (and also pass
it to every <code>yy*()</code> call including <code>yylex()</code>, <code>yyerror()</code> and many others).</p>
<p>We include extra <code>#include "parse.expr.h"</code> to make sure generated header
has the same prototype as <code>.c</code> file that implements it.</p>
<p>You might have noticed that <code>typedef void * yyscan_t;</code> bit. It unties
circular dependency between <code>"parse.expr.h"</code> header and <code>"lex.expr.h"</code>
header. Figuring out specific details of the dependency is an exercise
to the reader. Try to remove it and see what breaks. That error threw
me off when I initially tried <code>Ski</code> conversion.</p>
<p>Luckily <code>flex</code> guarantees that <code>yyscan_t</code> is an opaque type and will
always be <code>typedef void * yyscan_t;</code>. Thus we can open code it’s
declaration directly.</p>
<p>Note that we still print our results to <code>stdin</code>. In a real world example
you would probably want to pass another parameter to store final result via
something like <code>%parse-param {output_t * output}</code>.</p>
<p>Updated lexer:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat l.l */</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">%{</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="op">%}</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option warn</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option noyywrap</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option nodefault</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option reentrant</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">%</span>option bison<span class="op">-</span>bridge</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="op">%%</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="op">[</span> \t\n<span class="op">]</span> <span class="op">{</span> <span class="co">/* skip whitespace */</span> <span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="op">[+]</span> <span class="op">{</span> <span class="cf">return</span> <span class="ch">'+'</span><span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="dv">0</span><span class="op">-</span><span class="dv">9</span><span class="op">]</span> <span class="op">{</span> yylval_param<span class="op">-&gt;</span>ival <span class="op">=</span> yytext<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="ch">'0'</span><span class="op">;</span> <span class="cf">return</span> NUM<span class="op">;</span> <span class="op">}</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="op">.</span> <span class="op">{</span> <span class="cf">return</span> YYUNDEF<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<p>Semantic action now uses <code>union YYSTYPE * yylval_param</code>. It is added by
<code>%option bison-bridge</code> to <code>yylex()</code> signature. <code>%option reentrant</code> has
another effect on the <code>yy*()</code> API: it adds <code>yyscan_t scanner</code> parameter.
Let’s look at the <code>yy*()</code> call site in <code>main()</code> function:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* $ cat main.c */</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;parse.expr.h&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&quot;lex.expr.h&quot;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="dt">char</span> <span class="op">*</span> argv<span class="op">[])</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;Parsing input from argv:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> argc<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;argv[</span><span class="sc">%i</span><span class="st">]='</span><span class="sc">%s</span><span class="st">':</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> i<span class="op">,</span> argv<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>        yyscan_t scanner<span class="op">;</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>        YY_BUFFER_STATE buf<span class="op">;</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>        yylex_init <span class="op">(&amp;</span>scanner<span class="op">);</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>        buf <span class="op">=</span> yy_scan_string <span class="op">(</span>argv<span class="op">[</span>i<span class="op">],</span> scanner<span class="op">);</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>        yyparse<span class="op">(</span>scanner<span class="op">);</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>        yy_delete_buffer<span class="op">(</span>buf<span class="op">,</span> scanner<span class="op">);</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>        yylex_destroy <span class="op">(</span>scanner<span class="op">);</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>flex</code>’s <code>%option reentrant</code> option requires us to thread
<code>yyscan_t scanner</code>. <code>scanner</code> holds full lexing context and does not
rely on any global variables.</p>
<p>The <code>YY_BUFFER_STATE buf; buf = yy_scan_string (..., scanner); yy_delete_buffer(buf, scanner);</code>
is the <code>flex</code> way to switch from <code>FILE *</code> based API to <code>const char *</code>
as an input buffer. It is not directly related to <code>Bison</code>’s <code>pure</code> API.</p>
<p>Let’s check out used globals now:</p>
<pre><code>$ gcc -c lex.expr.c
$ nm lex.expr.o | grep -v -P 't|T'
                 U clearerr
                 U ferror
                 U fileno
                 U fread
                 U free
                 U malloc
                 U realloc
0000000000000130 r yy_base
0000000000000190 r yy_chk
0000000000000150 r yy_def
0000000000000020 r yy_ec

$ gcc -c parse.expr.c
$ nm parse.expr.o | grep -v -P 't|T'
                 U free
                 U malloc
                 U memcpy
000000000000011b r yycheck
                 U yylex
0000000000000126 r yyr1
000000000000012b r yyr2</code></pre>
<p>No globals! <code>r</code> are static read-only lexer and parser tables. Yay!</p>
<h3 id="bonus-makefile-for-pure-example">Bonus: Makefile for pure example</h3>
<p>When I was working on an example I wanted to craft the <code>Makefile</code> that
tracks the dependencies precisely to rebuild all the artifacts. Be it
<code>Makefile</code>, <code>C</code> source, or input to any of generators change. Though
straightforward It ended up being wordy:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat makefile</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="dt">FLEX </span><span class="ch">=</span><span class="st"> flex</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="dt">BISON </span><span class="ch">=</span><span class="st"> bison</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dt">BISON_FLAGS </span><span class="ch">=</span><span class="st"> --warnings -Wcounterexamples</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="dt">TARGETS </span><span class="ch">=</span><span class="st"> a</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="dt">GENERATED_SOURCES </span><span class="ch">=</span><span class="st"> lex.expr.c lex.expr.h parse.expr.c parse.expr.h</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="dt">OBJECTS </span><span class="ch">=</span><span class="st"> lex.expr.o parse.expr.o main.o</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">CC</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">LDFLAGS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span> -o <span class="ch">$@</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="co"># generator dependencies and rules</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="dv">lex.expr.c lex.expr.h:</span><span class="dt"> l.l</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">FLEX</span><span class="ch">)</span> --outfile=lex.expr.c --header-file=lex.expr.h <span class="ch">$&lt;</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="dv">parse.expr.c parse.expr.h:</span><span class="dt"> p.y</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">BISON</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">BISON_FLAGS</span><span class="ch">)</span> --output=parse.expr.c --header=parse.expr.h --warnings <span class="ch">$&lt;</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co"># extra build dependencies</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="dv">$(GENERATED_SOURCES) $(OBJECTS) $(TARGETS):</span><span class="dt"> Makefile</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="dv">lex.expr.o parse.expr.o:</span><span class="dt"> parse.expr.h</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="dv">parse.expr.o:</span><span class="dt"> lex.expr.h</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a><span class="dv">main.o:</span><span class="dt"> lex.expr.h parse.expr.h</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="ot">.PHONY:</span><span class="dt"> clean</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="dv">clean:</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>	<span class="ch">$(</span><span class="dt">RM</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">GENERATED_SOURCES</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">OBJECTS</span><span class="ch">)</span> <span class="ch">$(</span><span class="dt">TARGETS</span><span class="ch">)</span></span></code></pre></div>
<p>It took me a while to populate <code>extra build dependencies</code> section but
luckily <a href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html">make –shuffle</a>
kept finding the issues until I got something that works most of the time.
Looking at <code>-MMD</code> output I think it’s an accurate list of extra
dependencies on top of implicit <code>.c.o</code> ones.</p>
<h2 id="bison-version-requirements">Bison version requirements</h2>
<p><code>Bison</code>’s <code>--warnigns</code> flag was implemented in 2006, around <code>2.3a</code>
version. <code>%define api.pure</code> flag was implemented in 2007, around <code>2.3b</code>
version. Both should be safe to assume as widely available.</p>
<h2 id="parting-words">Parting words</h2>
<p>Pure <code>Bison</code> API is a nice cleanup to do for a project. It should not
take much code to implement: just add <code>%define api.pure full</code> and adapt
to API extension. The benefit is a slightly more explicit API readily
usable in multi-threaded and nested parser contexts.</p>
<p>Have fun!</p>

<div class="info">
    Posted on September  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 04 Sep 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/256-porting-to-pure-bison-api.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Ski 1.4.0 is out!</title>
    <link>http://trofi.github.io/posts/255-ski-1.4.0-is-out.html</link>
    <description><![CDATA[<p>TL;DR: <a href="https://github.com/trofi/ski/releases/tag/v1.4.0">ski-1.4.0</a> is
available for download!</p>
<h2 id="whats-new">What’s new</h2>
<p>I’ll paste NEWS entry as is:</p>
<pre><code>It's a new fork based on lates 1.3.2 version available. It's new home
is https://github.com/trofi/ski. There are many changes since 1.1.0.
We'll list a few here since 1.3.2:

** https://github.com/trofi/ski is a new Ski home.

** Build is fixed to work with modern glibc, binutils and linux kernel
headers versions.

** More linux syscalls are emulated to at least get basic printf() to
work. More work needs to be done before Ski user emulation can run real
world programs.

** Dropped outdated ski.spec from tarball.

** Dropped ski-config from installed files. Ski does not provide a
stable library interface.

** Dropped dynamic hook loading infrastructure support. Ski no longer
tries to load and execute any libraries via 'SKIHOOK_PATH'. LTDL is
not required anymore.

** libski is not installed any more and is considered an internal
implementation detail of Ski.</code></pre>
<p>While preparing this release I had a lot of fun fiddling with
<code>autoconf</code> over past few hours. I hope I did not break <code>Ski</code> too much to
and it still builds for others.</p>
<h2 id="ski-status">Ski status</h2>
<p><code>Ski</code> supports guest <code>linux</code> kernels up to <code>4.19</code>. Anything later does
not yet work as <code>HP_SIM</code> mode was removed from upstream kernel. <code>4.19</code>
kernel support is great though: you can run <code>gdb</code>, networking, <code>gcc</code>
and many other conventional tools right in the guest <code>VM</code>.</p>
<p>User mode emulation on the other hand is very weak. The “Hello World”
does run when built against modern <code>glibc</code>, but I expect many basic
things (like <a href="https://github.com/trofi/ski/issues/1">bash</a>) to be still
broken. It’s good enough for proof of concept, but expect to fix many
bugs if you want to run a real application.</p>
<p>Text <code>xterm</code> interface (<code>ski</code>/<code>bski</code>) seems to work great. <code>motif</code>
(<code>xski</code>) and <code>gtk</code> (<code>gski</code>) interfaces look completely broken. I fixed
their compilation, but they render something unusable. I’m not sure if
it was ever functional enough to be usable. If I get a bit more
confidence in that I’ll probably just remove <code>xski</code> / <code>gski</code> in next
release.</p>
<h2 id="more-words">More words</h2>
<p>Previous <code>Ski</code> release was out in February 2008, 14 years ago. A few
things changed in the world since then. Incomplete list:</p>
<ul>
<li><code>IA64</code> support in linux kernel was added, matured, slowed down and
almost got removed.</li>
<li>In 2020 Intel stopped producing new CPUs.</li>
<li>Various <code>glibc</code>, <code>linux</code> kernel and <code>binutils</code> interfaces were changed.
That broke the <code>Ski</code> build.</li>
<li>New <code>linux</code> syscalls (like <code>openat</code>) and <code>AT_*</code> (liks <code>AT_RANDOM</code>)
auxiliary vectors were added and are now required by <code>glibc</code>. That
broke the <code>Ski</code> user emulation.</li>
<li><code>HP_SIM</code> mode was <a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=fc5bad03709f9c79ea299f554b6f99fc6f4fe31c">removed</a>
from upstream <code>linux</code> kernel. That broke <code>Ski</code> kernel/machine
emulation on guest recent kernels.</li>
<li><code>gcc</code>’s support slowly bit rots breaking more and more projects that
build with <code>-O3</code>.</li>
<li>I lost access to <code>guppy</code> box and did not do much <code>IA64</code>-related tinkering
lately.</li>
</ul>
<p>Sounds bad, eh?</p>
<p>Fear not! Things are not as grim as they might look. Lack of real
hardware access happens to be a good motivation for me to clear the dust
off good old <code>Ski</code>. Lack of new CPUs means that it’s not a moving target
anymore (not that it ever did :) and we can just build a perfect (ahem)
emulator.</p>
<p>I still have about 20 minor kernel patches to upstream and would like
to get an emulator to support latest kernels to test these patches.</p>
<h3 id="pre-built-os-images">Pre-built OS images</h3>
<p>A few months ago someone asked me if I had OS images left for <code>Ski</code> to
run. I did not have them and spent a few minutes recreating them. The
result is <a href="https://slyfox.uni.cx/ia64/">here</a>:</p>
<ul>
<li><a href="https://slyfox.uni.cx/ia64/HOWTO_RUN">running instructions</a>: unpack
and run.</li>
<li><a href="https://slyfox.uni.cx/ia64/NOTES.ia64">rebuilding instructions</a>:
build a cross-compiler, kernel and unpack Gentoo’s <code>stage3</code>.</li>
</ul>
<p>It has an userspace with <code>gcc-11.3.0</code>. Not too old.</p>
<h3 id="nixpkgs-attempt-at-building-os-images">Nixpkgs attempt at building OS images</h3>
<p>Gentoo’s support for large scale cross-compilation is a bit hairy.
I wondered if I could make OS image building based on <code>nixpkgs</code> to
reuse all my local hacks I use to tinker with the system.</p>
<p>A few days ago <strong>matoro</strong> asked me to send the fix <strong>matoro</strong> did for
<a href="https://bugs.gentoo.org/596382">ITC precision detection</a> upstream. I
took it as an opportunity to bring up an equivalent test environment
on <code>NixOS</code> locally (and to find out how <code>ia64</code> timers really work in
<code>linux</code>).</p>
<p>Initially I built just an <code>ia64-unknown-linux-gnu</code> cross-compiler. It
took 3 lines of <code>nixpkgs</code> code:</p>
<pre><code>lib/systems/examples.nix:  ia64 = { config = &quot;ia64-unknown-linux-gnu&quot;; };
lib/systems/inspect.nix:    isIa64         = { cpu = { family = &quot;ia64&quot;; }; };
lib/systems/parse.nix:    ia64     = { bits = 64; significantByte = littleEndian; family = &quot;ia64&quot;; };</code></pre>
<p>That (and a few small one-off tweaks) allowed me to build vast majority
of packages for <code>ia64</code> with one command: <code>bash</code>, <code>strace</code>, <code>mc</code>,
<code>busybox</code>, <code>gcc</code>, <code>iproute2</code>, <code>tmux</code>, <code>git</code>, <code>util-linux</code>, <code>gdb</code>. <code>re2c</code>
building example:</p>
<pre><code>$ nix build -f. pkgsCross.ia64.re2c

$ file result/bin/re2c
result/bin/re2c: ELF 64-bit LSB executable, IA-64, version 1 (SYSV), dynamically linked,
  interpreter /nix/store/...-glibc-ia64-unknown-linux-gnu-2.35-163/lib/ld-linux-ia64.so.2,
  for GNU/Linux 2.6.32, not stripped</code></pre>
<p>Kernel was slightly harder to get running as it required 2 <code>CONFIG_</code>
options to be disabled to get something bootable:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># lib/systems/platforms.nix:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  ia64 = <span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">linux-kernel</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>      <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;ia64&quot;</span><span class="op">;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      <span class="va">target</span> <span class="op">=</span> <span class="st">&quot;vmlinuz&quot;</span><span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>      <span class="va">autoModules</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      <span class="va">baseConfig</span> <span class="op">=</span> <span class="st">&quot;sim_defconfig&quot;</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>      <span class="va">extraConfig</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="st">        # Disable for gcc bug: https://gcc.gnu.org/PR106617</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="st">        LIBFC n</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="st">        # otherwise lerken panics in SKI</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="st">        SERIAL_8250 n</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a><span class="st">      ''</span><span class="op">;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span>;</span></code></pre></div>
<p>Here the main bit is <code>sim_defconfig</code> for <code>HP_SIM</code> mode and a
<code>SERIAL_8250 n</code> workaround to prevent the kernel from crashing. Oh,
and it has to be a <code>4.19</code> kernel (<code>5.0</code> removed <code>HP_SIM</code> mode),
thus the command to build the kernel is:
<code>nix build -f. pkgsCross.ia64.linuxPackages_4_19.kernel</code>.</p>
<p>As I was foolish enough to use very fresh <code>gcc</code> I encountered a
<code>gcc</code> bug: <a href="https://gcc.gnu.org/PR106617" class="uri">https://gcc.gnu.org/PR106617</a>.</p>
<p>The above was good enogh to put together minimal runnable OS image. I
wondered if I could also generate full rootfs as a <code>.nix</code> expression
to later use it as is for making an <code>ext2</code> image. The trick is to
grab full closure of dependencies and put it in a single directory.
<strong>tpw_rules</strong> pointed me at a <a href="https://github.com/NixOS/nixpkgs/search?q=closureInfo">closureInfo</a>
magic function which allows doing exactly that kind of things.</p>
<p>Just one <code>rsync</code> call is enough to build full rootfs! Here is my
<code>.nix</code> expression to get a virtual machine with <code>busybox</code>, <code>re2c</code>, <code>ski</code>
run script and <code>/init</code> script to boot a full VM:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat busybox-and-re2c.nix</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> ~<span class="ss">/n</span> <span class="op">{}</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">pkgsCross</span> <span class="op">?</span> pkgs.pkgsCross.ia64</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">targetKernel</span> <span class="op">?</span> pkgsCross.linuxPackages_4_19.kernel</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">init-script</span> <span class="op">=</span> pkgs.writeScriptBin <span class="st">&quot;init&quot;</span> <span class="op">(</span><span class="st">''</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="st">    #!</span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin/busybox sh</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="st">    # expose both packages in the PATH</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="st">    export PATH=</span><span class="sc">${</span>pkgsCross.re2c<span class="sc">}</span><span class="st">/bin:</span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="st">    # prepare file hierarchy</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p /dev /proc</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="st">    mount -t proc proc /proc</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="st">    mount -t devtmpfs devtmpfs /dev</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="st">    # run the shell</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="st">    exec </span><span class="sc">${</span>pkgsCross.busybox<span class="sc">}</span><span class="st">/bin/busybox sh</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">);</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>  <span class="va">rootfs</span> <span class="op">=</span> pkgs.runCommand <span class="st">&quot;rootfs&quot;</span> <span class="op">{</span> <span class="va">closure</span> <span class="op">=</span> pkgs.closureInfo <span class="op">{</span> <span class="va">rootPaths</span> <span class="op">=</span> <span class="op">[</span> init-script <span class="op">];</span> <span class="op">};</span> <span class="op">}</span> <span class="st">''</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="st">    mkdir -p $out</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="st">    cd $out</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="st">    # Copy full closure locally</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="st">    </span><span class="sc">${</span>pkgs.rsync<span class="sc">}</span><span class="st">/bin/rsync -arv --files-from=$closure/store-paths / .</span></span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a><span class="st">    # build convenience symlinks:</span></span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a><span class="st">    ln -s </span><span class="sc">${</span>init<span class="op">-</span>script<span class="sc">}</span><span class="st">/bin/init init</span></span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>  <span class="va">run-script</span> <span class="op">=</span> pkgs.writeScriptBin <span class="st">&quot;run-ia64-ski&quot;</span> <span class="st">''</span></span>
<span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="st">    #!</span><span class="sc">${</span>pkgs.bash<span class="sc">}</span><span class="st">/bin/bash</span></span>
<span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a><span class="st">    bski=</span><span class="sc">${</span>pkgs.ski<span class="sc">}</span><span class="st">/bin/bski</span></span>
<span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a><span class="st">    bootloader=</span><span class="sc">${</span>targetKernel.dev<span class="sc">}</span><span class="st">/bootloader</span></span>
<span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a><span class="st">    vmlinux=</span><span class="sc">${</span>targetKernel.dev<span class="sc">}</span><span class="st">/vmlinux</span></span>
<span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a><span class="st">    rootfs=</span><span class="sc">${</span>rootfs<span class="sc">}</span></span>
<span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a><span class="st">    image_size=1G</span></span>
<span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a><span class="st">    image=./sdc</span></span>
<span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a><span class="st">    set -e</span></span>
<span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a><span class="st">    if [ ! -e &quot;$image&quot; ]; then</span></span>
<span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a><span class="st">        echo &quot;Populating '$image' with '$rootfs'...&quot;</span></span>
<span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a><span class="st">        fallocate -l &quot;$image_size&quot; &quot;$image&quot;</span></span>
<span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a><span class="st">        mke2fs -d </span><span class="sc">${</span>rootfs<span class="sc">}</span><span class="st">/ &quot;$image&quot;</span></span>
<span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a><span class="st">    fi</span></span>
<span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a><span class="st">    $bski $bootloader $vmlinux root=/dev/sda simscsi=./sd init=/init rw TERM=xterm &quot;$@&quot;</span></span>
<span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>We define 3 build targets above:</p>
<ul>
<li><code>init-script</code>: our target’s init script which will run first in a
guest VM.</li>
<li><code>rootfs</code>: magic command to copy all the dependency closure context
into a single <code>$out</code> directory.</li>
<li><code>run-script</code>: our host’s script to run the virtual machine.</li>
</ul>
<p>The whole thing can be built and ran in a single command as:</p>
<pre><code>$ $(nix-build busybox-and-re2c.nix -A run-script)/bin/run-ia64-ski

loading /nix/store/jiqn22d0yp80vvysib16xjnb8w6j7c1v-linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux...
starting kernel...
Linux version 4.19.255 (nixbld@localhost) (gcc version 13.0.0 20220814 (experimental) (GCC)) #2 SMP Fri Aug 19 07:53:12 UTC 2022
EFI v1.00 by Hewlett-Packard:
...
Run /init as init process
sh: can't access tty; job control turned off
/ # random: crng init done

/ # mount
/dev/root on / type ext4 (rw,relatime)
proc on /proc type proc (rw,relatime)
devtmpfs on /dev type devtmpfs (rw,relatime,size=53184k,nr_inodes=831,mode=755)

/ # ls /
dev         init        lost+found  nix         proc

/ # ls -l /
total 20
drwxr-xr-x    3 0        0             2300 Aug 20 00:29 dev
lrwxrwxrwx    1 0        0               57 Jan  1  1970 init -&gt; /nix/store/ri7n3q59q042ddgzdanrsg5l4jrs85b8-init/bin/init
drwx------    2 0        0            16384 Aug 20 00:29 lost+found
dr-xr-xr-x    3 0        0             4096 Jan  1  1970 nix
dr-xr-xr-x   92 0        0                0 Aug 20 00:29 proc

/ # du -hs /nix/store/*
4.7M    /nix/store/1mrb68yaa7cn2x8lzq13vgd4gy6icz2i-re2c-ia64-unknown-linux-gnu-3.0
12.0K   /nix/store/ri7n3q59q042ddgzdanrsg5l4jrs85b8-init
31.9M   /nix/store/rr5mdcdw22ab7k78i6z6laywxdflhsj9-glibc-ia64-unknown-linux-gnu-2.35-163
6.3M    /nix/store/x83rlqm5ww1d6ggdkxlv48l0rzb0gwjc-ia64-unknown-linux-gnu-stage-final-gcc-13.0.0-lib
2.7M    /nix/store/xhkazsq7p21kj6853vfv7w244bbfa854-busybox-ia64-unknown-linux-gnu-1.35.0

/ # re2c --version
re2c 3.0</code></pre>
<p>Just <code>44MB</code> uncompressed! We can shrink it down to <code>9MB</code> by compressing
it:</p>
<pre><code>$ xz -9 sdc
$ LANG=C ls -lh
-rw-r--r-- 1 slyfox users 8.6M Aug 20 08:02 sdc.xz</code></pre>
<p>That’s even smaller than uncompressed kernel, which is around <code>21MB</code>:</p>
<pre><code>$ ls -lh /nix/store/jiqn22d0yp80vvysib16xjnb8w6j7c1v-linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux |unnix
-r-xr-xr-x 2 root root 21M Jan  1  1970 /&lt;&lt;NIX&gt;&gt;/linux-ia64-unknown-linux-gnu-4.19.255-dev/vmlinux</code></pre>
<p>You can also inspect rootfs from the host side without having to deal
with filesystem image or booting an OS:</p>
<pre><code>$ nix-build busybox-and-re2c.nix -A rootfs
/nix/store/11ig1jh624l5dniilcp2p8s2zjigrz44-rootfs

$ ls -1 result/nix/store/
1mrb68yaa7cn2x8lzq13vgd4gy6icz2i-re2c-ia64-unknown-linux-gnu-3.0
ri7n3q59q042ddgzdanrsg5l4jrs85b8-init
rr5mdcdw22ab7k78i6z6laywxdflhsj9-glibc-ia64-unknown-linux-gnu-2.35-163
x83rlqm5ww1d6ggdkxlv48l0rzb0gwjc-ia64-unknown-linux-gnu-stage-final-gcc-13.0.0-lib
xhkazsq7p21kj6853vfv7w244bbfa854-busybox-ia64-unknown-linux-gnu-1.35.0</code></pre>
<p>That alone allowed me to fix a bunch of packages in <code>nixpkgs</code> (example
<a href="https://midnight-commander.org/changeset/0ef7237eea2ef97e92b793c0429be4d1ea6ffc77">upstream mc fix</a>).</p>
<p>It’s such a fun toy to play with!</p>
<h3 id="hp_sim-mode-limitations">HP_SIM mode limitations</h3>
<p>To do a full system emulation <code>Ski</code> relies on <code>HP_SIM</code> mode of kernel
build. It’s very different from the real <code>ia64</code> kernel you build for a
real device. And different from <code>KVM</code>! A few points on why <code>HP_SIM</code> is
special:</p>
<ul>
<li>Separate <code>bootloader</code> binary is required to boot <code>vmlinux</code>
(<code>bootloader</code> is built as part of <code>linux</code> kernel)</li>
<li>No firmware initialization code, to memory map discovery. The map is
hardcoded in <code>bootloader</code> code.</li>
<li>Paravirtual devices (<code>simserial</code>, <code>simeth</code>, <code>simscsi</code>) require
<code>Ski</code>-specific hypercalls from guest kernel to <code>Ski</code>.</li>
<li>No support for <code>virtio</code> from <code>Ski</code>.</li>
<li>No ACPI bus.</li>
<li>No PCI bus.</li>
<li>No initramfs support (lack of interface to pass it to <code>bootloader</code>)</li>
</ul>
<h3 id="possible-next-steps-for-ski">Possible next steps for Ski</h3>
<p>The above are not fundamental limitations. I think it would not be hard
to get rid of custom device code and switch over to <code>virtio-mmio</code>
entirely. I imagine it would be something like:</p>
<ul>
<li><code>simserial</code> -&gt; <code>virtio-console</code></li>
<li><code>simscsi</code> -&gt; <code>virtio-blk</code></li>
<li><code>simeth</code> -&gt; <code>virtio-net</code></li>
</ul>
<p>It will require a bit of code on <code>Ski</code> side to handle virtio queues.
Maybe we can borrow parts of <code>qemu</code> as is? Otherwise implementing them
does not sound too hard.</p>
<p>Lack of buses is fine as well. VMs for other architectures seem to do
it for ages and rely on device trees or manual kernel config options.
We can do there same here. It would be useful though to get closer to
real <code>ia64</code> for interface discovery eventually.</p>
<p>Lack of platform initialization code should not be a big problem either:
<code>ia64</code> paltform is defined in terms of <code>PAL</code> and <code>SAL</code> calls which are
very similar (at least in spirit) to current <code>HP_SIM</code> hypercalls.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>Ski</code> is still alive! Try <a href="https://github.com/trofi/ski/releases/tag/v1.4.0">1.4.0</a> :)</p>
<p><code>ia64</code> code can still be emulated and be debugged with <code>Ski</code>. Both can
still expose generic bugs in various projects.</p>
<p><code>Ski</code> is a great example of project on how little one needs to add to
guest <code>linux</code> kernel and to hypervisor to boot the kernel and get
userspace running there.</p>
<p>Instruction emulation is a large part of <code>Ski</code>. I still don’t quite get
it. But I also never had a reason for deeper investigation. Maybe one day.
Meanwhile it just works!</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 20, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sat, 20 Aug 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/255-ski-1.4.0-is-out.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>binutils 2.39</title>
    <link>http://trofi.github.io/posts/254-binutils-2.39.html</link>
    <description><![CDATA[<p>A week ago new <a href="https://sourceware.org/pipermail/binutils/2022-August/122246.html">2.39 release</a>
of <code>binutils</code> saw the light of day.</p>
<h2 id="new-features">New features</h2>
<p>I found interesting these additions:</p>
<ul>
<li>colors in <code>objdump -d --disassembler-color=color</code> output</li>
<li><code>gprofng</code> tool is enabled by default now (<a href="https://sourceware.org/pipermail/binutils/2021-August/117665.html">gprofng announcement</a>)</li>
</ul>
<p>Colored <code>objdump</code> looks good:</p>
<p><img src="http://trofi.github.io/posts.data/254-binutils-2.39/objdump.svg" /></p>
<p>The blue-on-black text is a bit hard to read. <a href="https://sourceware.org/pipermail/binutils/2022-August/122351.html">Soon</a>
it will be tweakable via <code>OBJDUMP_COLORS</code> environment variable.</p>
<p><code>gprofng</code> requires some work to finish the packaging:</p>
<ul>
<li><a href="https://sourceware.org/PR29479">PR29479</a>: <code>javac</code> is not optional</li>
<li><a href="https://sourceware.org/PR29477">PR29477</a>: <code>musl</code> needs some porting</li>
</ul>
<p>With a bit of tweaking I was able to get <code>gprofng</code> to run:</p>
<pre><code>$ gprofng collect app $(which htop)
Creating experiment directory test.1.er (Process ID: 3545207) ...

$ gprofng display text -functions test.1.er/
Functions sorted by metric: Exclusive Total CPU Time

Excl. Total   Incl. Total    Name
CPU           CPU
 sec.      %   sec.      %
0.420 100.00  0.420 100.00   &lt;Total&gt;
0.150  35.71  0.150  35.71   read
0.060  14.29  0.060  14.29   openat
0.040   9.52  0.040   9.52   __strchr_avx2
0.030   7.14  0.030   7.14   write
0.020   4.76  0.020   4.76   __getdents
0.010   2.38  0.030   7.14   LinuxProcessList_readStatFile.constprop.0
0.010   2.38  0.320  76.19   LinuxProcessList_recurseProcTree.isra.0
0.010   2.38  0.020   4.76   RichString_appendWide
0.010   2.38  0.010   2.38   RichString_appendnAscii
0.010   2.38  0.010   2.38   __close_nocancel
0.010   2.38  0.010   2.38   __gconv_transform_internal_utf8
0.010   2.38  0.010   2.38   __memchr_avx2
0.010   2.38  0.010   2.38   __vfprintf_internal
0.010   2.38  0.010   2.38   _nc_tiparm
0.010   2.38  0.170  40.48   fgets
0.010   2.38  0.010   2.38   iswprint
0.010   2.38  0.020   4.76   onscreen_mvcur
0.      0.    0.410  97.62   CommandLine_run
...</code></pre>
<p>In the output above both individual and cumulative times are reported
for each function. Nothing fancy.</p>
<p>Output of the same sampling data with a <code>calltree</code> view:</p>
<pre><code>$ gprofng display text -calltree test.1.er/
Functions Call Tree. Metric: Attributed Total CPU Time

Attr. Total    Name
CPU
 sec.      %
0.420 100.00   +-&lt;Total&gt;
0.410  97.62     +-__libc_start_call_main
0.410  97.62     |  +-CommandLine_run
0.360  85.71     |    +-ScreenManager_run
0.270  64.29     |    |  +-ProcessList_scan
0.270  64.29     |    |  |  +-LinuxProcessList_recurseProcTree.isra.0
0.150  35.71     |    |  |    +-fgets
0.140  33.33     |    |  |    |  +-_IO_getline_info
0.130  30.95     |    |  |    |    +-_IO_default_uflow
0.130  30.95     |    |  |    |    |  +-_IO_new_file_underflow
0.130  30.95     |    |  |    |    |    +-read
0.010   2.38     |    |  |    |    +-__memchr_avx2
0.030   7.14     |    |  |    +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |    |  |    |  +-openat
0.010   2.38     |    |  |    |  +-LinuxProcessList_recurseProcTree.isra.0
0.010   2.38     |    |  |    |    +-openat
0.020   4.76     |    |  |    +-__GI_strstr
0.020   4.76     |    |  |    |  +-__strchr_avx2
0.020   4.76     |    |  |    +-__strchr_avx2
0.020   4.76     |    |  |    +-readdir
0.020   4.76     |    |  |    |  +-__getdents
0.010   2.38     |    |  |    +-LinuxProcessList_readStatFile.constprop.0
0.010   2.38     |    |  |    +-__new_fclose
0.010   2.38     |    |  |      +-_IO_new_file_close_it
0.010   2.38     |    |  |        +-__close_nocancel
0.060  14.29     |    |  +-wgetch
0.060  14.29     |    |  |  +-_nc_wgetch
0.060  14.29     |    |  |    +-wrefresh
0.060  14.29     |    |  |      +-doupdate_sp
0.060  14.29     |    |  |        +-TransformLine
0.040   9.52     |    |  |          +-_nc_mvcur_sp
0.020   4.76     |    |  |          |  +-_nc_flush_sp
0.020   4.76     |    |  |          |  |  +-write
0.020   4.76     |    |  |          |  +-_nc_real_mvcur.part.0
0.020   4.76     |    |  |          |    +-onscreen_mvcur
0.010   2.38     |    |  |          |      +-_nc_tiparm
0.010   2.38     |    |  |          +-EmitRange
0.010   2.38     |    |  |          |  +-_nc_is_charable
0.010   2.38     |    |  |          |    +-wctob
0.010   2.38     |    |  |          |      +-__gconv_transform_internal_utf8
0.010   2.38     |    |  |          +-PutRange
0.010   2.38     |    |  |            +-_nc_mvcur_sp
0.010   2.38     |    |  |              +-_nc_flush_sp
0.010   2.38     |    |  |                +-write
0.030   7.14     |    |  +-Panel_draw
0.030   7.14     |    |    +-Process_display
0.030   7.14     |    |      +-LinuxProcess_writeField
0.030   7.14     |    |        +-Process_writeField
0.020   4.76     |    |          +-Process_writeCommand
0.020   4.76     |    |          |  +-RichString_appendWide
0.010   2.38     |    |          |    +-iswprint
0.010   2.38     |    |          +-Process_printBytes
0.010   2.38     |    |            +-RichString_appendnAscii
0.050  11.90     |    +-ProcessList_scan
0.050  11.90     |      +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |        +-LinuxProcessList_recurseProcTree.isra.0
0.020   4.76     |        |  +-LinuxProcessList_readStatFile.constprop.0
0.020   4.76     |        |    +-xReadfileat
0.020   4.76     |        |      +-openat
0.020   4.76     |        +-fgets
0.020   4.76     |        |  +-_IO_getline_info
0.020   4.76     |        |    +-_IO_default_uflow
0.020   4.76     |        |      +-_IO_new_file_underflow
0.020   4.76     |        |        +-read
0.010   2.38     |        +-openat
0.010   2.38     +-__vfprintf_internal</code></pre>
<p>This view is a bit more interesting: we can instantly see where all those
string operations get called from.</p>
<p><code>gprofng</code> seems to work \o/.</p>
<h2 id="new-bugs">New bugs</h2>
<p>Having sorted basic <code>gprofng</code> stuff I attempted to package <code>binutils-2.39</code>
in <code>nixpkgs</code> in <a href="https://github.com/NixOS/nixpkgs/pull/185297">PR185297</a>.
I got a few problems when I tried to build the system against it. I’ll list
a few of them below.</p>
<h3 id="breaking-api-change-init_disassemble_info">Breaking API change: init_disassemble_info()</h3>
<p>One of the unfortunate side-effects of added colouring is the
disassembler API change (<a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=60a3da00bd5407f07d64dff82a4dae98230dfaac">patch</a>):
<code>init_disassemble_info()</code> got an extra formatter parameter. The crucial
bit of the patch is the extra <code>fprintf_styled_func</code> parameter added:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -394,11 +470,13 @@ extern bool generic_symbol_is_valid</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a> /* Method to initialize a disassemble_info struct.  This should be</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    called by all applications creating such a struct.  */</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a> extern void init_disassemble_info (struct disassemble_info *dinfo, void *stream,</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="st">-                                  fprintf_ftype fprintf_func);</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                  fprintf_ftype fprintf_func,</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="va">+                                  fprintf_styled_ftype fprintf_styled_func);</span></span></code></pre></div>
<p>I noticed it as a <code>perf</code> build breakage against <code>linux.git</code> tree:</p>
<pre><code>util/annotate.c: In function 'symbol__disassemble_bpf':
util/annotate.c:1765:9: error: too few arguments to function 'init_disassemble_info'
 1765 |         init_disassemble_info(&amp;info, s,
      |         ^~~~~~~~~~~~~~~~~~~~~</code></pre>
<p>The fix got merged into <code>linux#master</code> a few days ago as a set
of <a href="https://github.com/torvalds/linux/compare/00b32625982e0c796f0abb8effcac9c05ef55bd3...600b7b26c07a070d0153daa76b3806c1e52c9e00">patches</a>.</p>
<p>The gist of the fix is added feature detection against parameter count
(<code>DISASM_INIT_STYLED</code>) and use of the feature to wrap
<code>init_disassemble_info()</code> variants:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- /dev/null</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/tools/include/tools/dis-asm-compat.h</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -0,0 +1,55 @@</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="va">+static inline int fprintf_styled(void *out,</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="va">+                                enum disassembler_style style,</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                const char *fmt, ...)</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="va">+{</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_list args;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+       int r;</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_start(args, fmt);</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="va">+       r = vfprintf(out, fmt, args);</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="va">+       va_end(args);</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="va">+       return r;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="va">+}</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="va">+static inline void init_disassemble_info_compat(struct disassemble_info *info,</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               void *stream,</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               fprintf_ftype unstyled_func,</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="va">+                                               fprintf_styled_ftype styled_func)</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a><span class="va">+{</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="va">+#ifdef DISASM_INIT_STYLED</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a><span class="va">+       init_disassemble_info(info, stream,</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a><span class="va">+                             unstyled_func,</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a><span class="va">+                             styled_func);</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="va">+#else</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="va">+       (void)styled_func;</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="va">+       init_disassemble_info(info, stream,</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a><span class="va">+                             unstyled_func);</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="va">+#endif</span></span></code></pre></div>
<p>We will need to backport this fix to older kernel versions. Or pin
<code>perf</code> to older version of <code>libbfd</code>.</p>
<h3 id="new-warnings-around-executable-stack">New warnings around executable stack</h3>
<p>Another <code>binutils-2.39</code> change was to enable warnings around
RWX sections (like stack and data) in
<a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=ba951afb99912da01a6e8434126b8fac7aa75107">this change</a>.
The announcement warns:</p>
<blockquote>
<p>The ELF linker will now generate a warning message if the stack is made executable.</p>
</blockquote>
<p>Some linux distributions already implement similar warning for a while
as a way to catch unintended executable stack on code base with assembly
<code>.S</code> files. I am glad to see it getting upstream now. It makes upstreaming
so much easier when people can easily reproduce the warning on their
distribution.</p>
<p>Some projects do not tolerate warnings from the linker. <a href="https://github.com/systemd/systemd/issues/24226">systemd</a>
or <a href="https://github.com/rhboot/efivar/pull/164">efi-vars</a> come to mind.
Users can disable new warning with <code>--enable-warn-execstack=no</code> if a
proper fix is too complicated.</p>
<p>In case of <code>systemd</code>, the upstream decided to be more lenient to warning
for <code>EFI</code> linking code. The proper fix was also trivial in this case:
<code>gnu-efi</code> library needed <a href="https://sourceforge.net/p/gnu-efi/code/ci/803b49c40bb0b720b90d9c31d372911f1b946aa7/">a few annotations</a>.</p>
<p>The idea is simple: all manually written assembly <code>.S</code> files need
a note section that declares non-executable stack:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/apps/trivial.S</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/apps/trivial.S</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -41,3 +41,7 @@ _start:</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a> hello: .byte 'h',0,'e',0,'l',0,'l',0,'o',0,'\n',0,'\r',0,0,0</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a> #endif</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+#if defined(__ELF__) &amp;&amp; defined(__linux__)</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="va">+       .section .note.GNU-stack,&quot;&quot;,%progbits</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="va">+#endif</span></span></code></pre></div>
<p>It’s a lot of boilerplate to add the note to every <code>.S</code> file.</p>
<h3 id="dwarf-output-regression">DWARF output regression</h3>
<p>Another fallout was an <code>elfutils-0.187</code> test failure:</p>
<pre><code>FAIL: run-low_high_pc.sh
========================

[b] main.c
[2d] main

[b] ../sysdeps/i386/start.S
[26] _start
[40] ../sysdeps/x86/abi-note.c
[b52] init.c
[b8e] static-reloc.c
[2dba] _dl_relocate_static_pie
[2dd8] ../sysdeps/i386/crti.S
[2def] _init
lowpc: 8049000, highpc: 8049000lx
../sysdeps/i386/crti.S: [2def] '_init' highpc &lt;= lowpc
FAIL run-low_high_pc.sh (exit status: 255)</code></pre>
<p>Here the test <a href="https://sourceware.org/git/?p=elfutils.git;a=blob;f=tests/low_high_pc.c;h=cd022b1cc5e446520be675859b01c0df04bb5521;hb=HEAD#l70">low_high_pc</a>
complains about something about <code>_init</code> symbol.
Looking at the reported values the condition is <code>highpc == lowpc</code>.</p>
<p><a href="https://en.wikipedia.org/wiki/DWARF">DWARF</a> specification describes
Debug Info Entries (<code>DIEs</code>) each of which consists of:</p>
<ul>
<li>a tag (<code>DW_TAG_*</code>) like subprogram, <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/dwarf2.h;h=8a0ae403529e87cfc3a1366799a027bcb941cd2c;hb=HEAD#l38">others</a></li>
<li>a set of attributes key-value pairs (<code>DW_AT_*</code>) like source language name, file ranges, file names and <a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/generic/dwarf2.h;h=8a0ae403529e87cfc3a1366799a027bcb941cd2c;hb=HEAD#l133">others</a></li>
</ul>
<p><code>DWARF</code> debug sections are named <code>.debug*</code>. We can inspect them using
<code>readelf --debug-dump</code>:</p>
<pre><code>$ printf &quot;int main(){}&quot; | gcc -g -x c - -o a
$ readelf --debug-dump a
...
Contents of the .debug_info section:
...
  Compilation Unit @ offset 0x2dea:
   Length:        0x50 (32-bit)
   Version:       5
   Unit Type:     DW_UT_compile (1)
   Abbrev Offset: 0x4a2
   Pointer Size:  8
 &lt;0&gt;&lt;2df6&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;2df7&gt;   DW_AT_producer    : (indirect string, offset: 0x19f6): GNU C17 12.1.0 -mtune=generic -march=x86-64 -g
    &lt;2dfb&gt;   DW_AT_language    : 29     (C11)
    &lt;2dfc&gt;   DW_AT_name        : (indirect line string, offset: 0x5): &lt;stdin&gt;
    &lt;2e00&gt;   DW_AT_comp_dir    : (indirect line string, offset: 0x0): /tmp
    &lt;2e04&gt;   DW_AT_low_pc      : 0x401106
    &lt;2e0c&gt;   DW_AT_high_pc     : 0xb
    &lt;2e14&gt;   DW_AT_stmt_list   : 0x96c
 &lt;1&gt;&lt;2e18&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;2e19&gt;   DW_AT_external    : 1
    &lt;2e19&gt;   DW_AT_name        : (indirect string, offset: 0x1a25): main
    &lt;2e1d&gt;   DW_AT_decl_file   : 1
    &lt;2e1e&gt;   DW_AT_decl_line   : 1
    &lt;2e1f&gt;   DW_AT_decl_column : 5
    &lt;2e20&gt;   DW_AT_type        : &lt;0x2e36&gt;
    &lt;2e24&gt;   DW_AT_low_pc      : 0x401106
    &lt;2e2c&gt;   DW_AT_high_pc     : 0xb
    &lt;2e34&gt;   DW_AT_frame_base  : 1 byte block: 9c       (DW_OP_call_frame_cfa)
    &lt;2e36&gt;   DW_AT_call_all_calls: 1
 &lt;1&gt;&lt;2e36&gt;: Abbrev Number: 3 (DW_TAG_base_type)
    &lt;2e37&gt;   DW_AT_byte_size   : 4
    &lt;2e38&gt;   DW_AT_encoding    : 5      (signed)
    &lt;2e39&gt;   DW_AT_name        : int
 &lt;1&gt;&lt;2e3d&gt;: Abbrev Number: 0
...</code></pre>
<p>Here we can see that <code>&lt;stdin&gt;</code> file (<code>DW_TAG_compile_unit</code>) was using
<code>C11</code> language, <code>main</code> symbol is a subprogram (<code>DW_TAG_subprogram</code>)
defined in line 1 column 5 of the file. <code>DW_AT_low_pc</code> / <code>DW_AT_high_pc</code>
encode a range where code of subprogram is located in virtual memory.</p>
<p>Back to our <code>elfutils</code> example
<code>../sysdeps/i386/crti.S: [2def] '_init' highpc &lt;= lowpc</code> was complaining
about invalid code location in virtual memory. It looks like the
encoding claimed that <code>_init</code> is 0 bytes long. Failure happened only on
<code>i686-linux</code> and not <code>x96_64-linux</code>. It’s because <code>_init</code> code is very
different on <code>i686</code> and <code>x86_64</code>.</p>
<p>Here is the reproducer:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a> .<span class="bu">section</span> <span class="op">.</span>init<span class="op">,</span><span class="st">&quot;ax&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a> .p2align <span class="dv">2</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a> .globl _init</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> .hidden _init</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a> .type _init<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="fu">_init:</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>  .<span class="bu">section</span> <span class="op">.</span>text<span class="op">.</span>__x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span><span class="st">&quot;axG&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits<span class="op">,</span>__x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span>comdat</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    .globl __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    .hidden __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    .p2align <span class="dv">4</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    .type __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span><span class="fu">@f</span>unction</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="fu">__x86.get_pc_thunk.bx:</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>      <span class="bu">ud2</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    .size __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span><span class="op">,</span> <span class="op">.</span> <span class="op">-</span> __x86<span class="op">.</span>get_pc_thunk<span class="op">.</span><span class="kw">bx</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    .previous</span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>  <span class="bu">ud2</span></span></code></pre></div>
<p>The code above defines <code>_init</code> symbol in <code>.init</code> section with a single
<code>ud2</code> instruction and <code>__x86.get_pc_thunk.bx</code> symbol in
<code>.text.__x86.get_pc_thunk.bx</code> section with a single <code>ud2</code> instruction.
Note that <code>.size</code> directive (to specify size of function) is not set on
<code>_init</code> and present only on <code>__x86.get_pc_thunk.bx</code>.</p>
<p><code>binutils-2.38</code> used to generate the following <code>DIE</code>s:</p>
<pre><code>$ as-2.38 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/dev/bugs/binutils-2.39-crti-size/delta
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x3d): GNU AS 2.38
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)</code></pre>
<p><code>binutils-2.39</code> started emitting a bit more info:</p>
<pre><code>$ as-2.39 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/dev/bugs/binutils-2.39-crti-size/delta
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x3d): GNU AS 2.39
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)
 &lt;1&gt;&lt;22&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;23&gt;   DW_AT_name        : (strp) (offset: 0x49): _init
    &lt;27&gt;   DW_AT_external    : (flag) 1
    &lt;28&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;2c&gt;   DW_AT_high_pc     : (addr) 0x0
 &lt;1&gt;&lt;30&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;31&gt;   DW_AT_name        : (strp) (offset: 0x4f): __x86.get_pc_thunk.bx
    &lt;35&gt;   DW_AT_external    : (flag) 1
    &lt;36&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;3a&gt;   DW_AT_high_pc     : (addr) 0x2
 &lt;1&gt;&lt;3e&gt;: Abbrev Number: 0</code></pre>
<p>Note that <code>DW_TAG_subprogram</code> was not present for any of two symbols in
<code>binutils-2.38</code>. And <code>binutils-2.39</code> defines both: <code>__x86.get_pc_thunk.bx</code>
of size 2 and <code>_init</code> of size … 0! It ended up being a <code>gas</code> bug and
Jan fixed with <a href="https://sourceware.org/git/?p=binutils-gdb.git;a=commitdiff;h=e8cf73215187b0c08679d726a5cc7c019fa3ea2e">the patch</a>.</p>
<p>After the fix <code>DWARF</code> sections have the following look:</p>
<pre><code>$ as-2.39 --gdwarf2 --32 -o crti.o crti.S.S
$ readelf -aW --debug-dump crti.o
...
Contents of the .debug_info section:

  Compilation Unit @ offset 0x0:
   Length:        0x2d (32-bit)
   Version:       2
   Abbrev Offset: 0x0
   Pointer Size:  4
 &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
    &lt;c&gt;   DW_AT_stmt_list   : (data4) 0x0
    &lt;10&gt;   DW_AT_ranges      : (data4) 0x0
    &lt;14&gt;   DW_AT_name        : (strp) (offset: 0x0): crti.S.S
    &lt;18&gt;   DW_AT_comp_dir    : (strp) (offset: 0x9): /home/slyfox/n
    &lt;1c&gt;   DW_AT_producer    : (strp) (offset: 0x18): GNU AS 2.39
    &lt;20&gt;   DW_AT_language    : (data2) 32769    (MIPS assembler)
 &lt;1&gt;&lt;22&gt;: Abbrev Number: 2 (DW_TAG_subprogram)
    &lt;23&gt;   DW_AT_name        : (strp) (offset: 0x24): __x86.get_pc_thunk.bx
    &lt;27&gt;   DW_AT_external    : (flag) 1
    &lt;28&gt;   DW_AT_low_pc      : (addr) 0x0
    &lt;2c&gt;   DW_AT_high_pc     : (addr) 0x2
 &lt;1&gt;&lt;30&gt;: Abbrev Number: 0</code></pre>
<p>As expected <code>_init</code> does not have <code>DW_AT_low_pc</code> / <code>DW_AT_high_pc</code>
values anymore and <code>elfutils</code> tests run successfully.</p>
<p>As <code>crti.S</code> is a file from <code>glibc</code> that made me wonder why <code>crti.o</code>
was not stripped off <code>.debug*</code> sections. It ended up being a <code>nixpkgs</code>
bug in a debuginfo separation hook. The hook was meant to move all <code>.debug*</code> sections
from <code>ELF</code> files in <code>/lib</code> to <code>/lib/debug</code>. For files where the hook
did not work it did not apply stripping at all. Fixed with
<a href="https://github.com/NixOS/nixpkgs/pull/185537">PR185537</a> now.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>binutils-2.39</code> does not look too problematic so far. It will need a bit
of backporting to fix <code>linux</code> and <code>perf</code>. But otherwise the release look
benign.</p>
<p><code>gas</code> bug uncovered <code>nixpkgs</code>’s stripping code bug. It’s funny how one
is required to trigger another. Luckily both are fixed now.</p>
<p>Once I get <code>perf</code> fixed I’ll ask for a full <code>hydra</code> run to get more
potential failures.</p>
<p>Have fun!</p>

<div class="info">
    Posted on August 12, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Fri, 12 Aug 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/254-binutils-2.39.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>one-liner to fix CSS on phones</title>
    <link>http://trofi.github.io/posts/253-one-liner-to-fix-css-on-phones.html</link>
    <description><![CDATA[<p>I noticed that this blog was unreadable on the phones: main text was
readable, but code snippets had 2.5x smaller fonts and required manual
zooming in to see anything at all.</p>
<p>Apparently it was happening because on small screens browsers try to
be smart and scale some UI elements up. But not all of the HTML
tags get the same treatment. As a result you get size inconsistencies
where none were before.</p>
<p>Apparently you can (and need) to opt out of that behaviour! The
magic <code>HTML5</code> one-liner is:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;meta</span> <span class="er">name</span><span class="ot">=</span><span class="st">&quot;viewport&quot;</span> <span class="er">content</span><span class="ot">=</span><span class="st">&quot;width=device-width, initial-scale=1.0&quot;</span><span class="kw">&gt;</span></span></code></pre></div>
<p>There are many other subtleties one needs to account for, like scaling
pictures accordingly or handling sidebars to overflow in a neat way.
The set of techniquest are called <code>HTML Responsive Web Design</code>.</p>
<p>Luckily I don’t need to care about any of that.</p>

<div class="info">
    Posted on August  4, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Thu, 04 Aug 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/253-one-liner-to-fix-css-on-phones.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>nixpkgs overlay nano howto</title>
    <link>http://trofi.github.io/posts/252-nixpkgs-overlay-nano-howto.html</link>
    <description><![CDATA[<p><code>nixpkgs</code> is a huge repository of various packages. But what if you want
to package a tiny package and don’t plan to share it with anyone. Is it
hard? How would you go about it?</p>
<p>There are many ways to do it: maintain a <code>nixpkgs</code> fork, use
<code>packageOverrides</code>, <code>overlays</code>, <code>flakes</code> and many others methods.</p>
<p>I’ll focus here only on <code>overlays</code> method as it feels to me like the
simplest way to write packages readily copyable to (or from) <code>nixpkgs</code>.</p>
<h2 id="nixpkgs-stucture">nixpkgs stucture</h2>
<p>before we start with an example let’s have a look at <code>nixpkgs</code>
“schema”. <code>nixpkgs</code> provides a <code>pkgs</code> map (“attribute set”) from package
name to package definition (it’s nested in a few places):</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>pkgs = <span class="op">{</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">callPackage</span> <span class="op">=</span> <span class="va">pkgPath</span><span class="op">:</span> ...somehow<span class="op">-</span>load<span class="op">-</span>the<span class="op">-</span>package<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co"># unnested examples:</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">glibc</span> <span class="op">=</span> callPackage <span class="ss">../development/libraries/glibc</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">re2c</span> <span class="op">=</span> callPackage <span class="ss">../development/tools/parsing/re2c</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co"># nested examples:</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">python39Packages</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      <span class="co"># the name is slightly changed for clarity</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      <span class="va">callPythonPackage</span> <span class="op">=</span> <span class="va">pkgPath</span><span class="op">:</span> ...somehow<span class="op">-</span>load<span class="op">-</span>python<span class="op">-</span>package<span class="op">;</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>      <span class="va">black</span> <span class="op">=</span> callPackage <span class="ss">../development/python-modules/black</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>      <span class="va">blessed</span> <span class="op">=</span> callPackage <span class="ss">../development/python-modules/blessed</span> <span class="op">{</span> <span class="op">};</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>      <span class="co"># ...</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>;</span></code></pre></div>
<p>Our goal here is to inject something very simple into top-level
<code>pkgs = { ... };</code> sturcture. We’ll ignore nested attributes.</p>
<p><code>overlays</code> allow us to override existing attributes in <code>pkgs</code> or
introduce the existing ones. Until you get familiar with the way
attributes interact with one another I suggest adding only new
attributes.</p>
<h2 id="an-example">an example</h2>
<p>Our running example will be <a href="https://github.com/trofi/ski">ski</a> package.
It’s an <code>autotools</code>-based package with very conventional dependencies.
Let’s package it!</p>
<p>I’ll do 3 things below:</p>
<ol type="1">
<li>create <code>/tmp/overlay/ski/default.nix</code> expression ready to be included
into <code>nixpkgs</code> repository</li>
<li>create <code>/tmp/overlay/local-packages.nix</code> expression ready to be used
in <code>/etc/nixos/configuration.nix</code> and/or in <code>~/.config/nixpkgs/overlays/</code>.</li>
<li>add our overlay to <code>/etc/nixos/configuration.nix</code>.</li>
</ol>
<p>Here is a simple <code>/tmp/overlay/ski/default.nix</code> expression enough to
build it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /tmp/overlay/ski/default.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">lib</span> <span class="op">,</span> <span class="va">stdenv</span> <span class="op">,</span> <span class="va">fetchFromGitHub</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">autoconf</span><span class="op">,</span> <span class="va">automake</span><span class="op">,</span> <span class="va">bison</span><span class="op">,</span> <span class="va">flex</span><span class="op">,</span> <span class="va">gperf</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">libtool</span><span class="op">,</span> <span class="va">pkg-config</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">elfutils</span><span class="op">,</span> <span class="va">libbfd</span><span class="op">,</span> <span class="va">libiberty</span> <span class="op">,</span> <span class="va">ncurses</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>stdenv.mkDerivation <span class="kw">rec</span> <span class="op">{</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">pname</span> <span class="op">=</span> <span class="st">&quot;ski&quot;</span><span class="op">;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="va">version</span> <span class="op">=</span> <span class="st">&quot;unstable-2022-07-07&quot;</span><span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  <span class="va">src</span> <span class="op">=</span> fetchFromGitHub <span class="op">{</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="va">owner</span> <span class="op">=</span> <span class="st">&quot;trofi&quot;</span><span class="op">;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="va">repo</span> <span class="op">=</span> <span class="st">&quot;ski&quot;</span><span class="op">;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    <span class="va">rev</span> <span class="op">=</span> <span class="st">&quot;568efd789fab1f932aa926b1db86dcb75e9c115c&quot;</span><span class="op">;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    <span class="va">sha256</span> <span class="op">=</span> <span class="st">&quot;sha256-dwHccL89bXzsjDr8O1DmVHlBQQ6aHgNLEaHJCJqHG9w=&quot;</span><span class="op">;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>  <span class="va">postPatch</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="st">    ./autogen.sh</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> autoconf automake</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    bison flex gperf libtool pkg-config <span class="op">];</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>  <span class="va">buildInputs</span> <span class="op">=</span> <span class="op">[</span> elfutils libbfd libiberty ncurses <span class="op">];</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>  <span class="va">meta</span> <span class="op">=</span> <span class="kw">with</span> lib<span class="op">;</span> <span class="op">{</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    <span class="va">description</span> <span class="op">=</span> <span class="st">&quot;ia64 (Itanium) instruction set simulator.&quot;</span><span class="op">;</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>    <span class="va">homepage</span> <span class="op">=</span> <span class="st">&quot;https://github.com/trofi/ski&quot;</span><span class="op">;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>    <span class="va">license</span> <span class="op">=</span> licenses.gpl2Only<span class="op">;</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>    <span class="va">platforms</span> <span class="op">=</span> platforms.linux<span class="op">;</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we need to create an actual overlay expression. I’ll put it in a
separate <code>/tmp/overlay/local-packages.nix</code> file as well:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># $ cat /tmp/overlay/local-packages.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="va">final</span><span class="op">:</span> <span class="va">prev</span><span class="op">:</span> <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># we create new 'ski' attribute here!</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">ski</span> <span class="op">=</span> final.callPackage <span class="ss">./ski</span> <span class="op">{};</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co"># add more packages below:</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we are ready to use the overlay in our
<code>/etc/nixos/configuration.nix</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Add an overlay to augment existing 'pkgs' map.</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">nixpkgs</span>.<span class="va">overlays</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span><span class="bu">import</span> <span class="ss">/tmp/overlay/local-packages.nix</span><span class="op">)</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="co"># use augmented 'pkgs':</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">environment</span>.<span class="va">systemPackages</span> <span class="op">=</span> <span class="kw">with</span> pkgs<span class="op">;</span> <span class="op">[</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    ski</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">];</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  <span class="co"># ...</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we can get <code>ski</code> installed into our system:</p>
<pre><code>$ sudo nixos-rebuild switch
$ ski -help
Options:
    -help        Display command-line options
    -i &lt;file&gt;    Process initialization file at startup
    -rest &lt;file&gt; Restore simulation state from &lt;file&gt;
    -nonet       Disable networking feature
    -srcroot     Source Root Directory
    -forceuser   Force user-level simulation
    -forcesystem Force system-level simulation
    -strace      Trace system call execution
    -simroot     Simulated root directory
    -conslog &lt;file&gt; Log the console output to the specified file
    -palen &lt;n&gt;      Implemented physical address bits.  Default: 63
    -valen &lt;n&gt;      Implemented virtual address bits.  Default: 61
    -ridlen &lt;n&gt;     Implemented RR.rid bits.  Default: 24
    -keylen &lt;n&gt;     Implemented PKR.key bits.  Default: 24
    -grfile &lt;n&gt;     GR file size.  Default: 128</code></pre>
<p>Seems to work!</p>
<p>We can also get the packages pulled into user’s <code>&lt;nixpkgs&gt;</code> expression:</p>
<pre><code>$ mkdir -p ~/.config/nixpkgs/overlays/
$ ln -s /tmp/overlay/local-packages.nix ~/.config/nixpkgs/overlays/</code></pre>
<p>Now we can use it as a <code>nixpkgs</code> attribute:</p>
<pre><code>$ nix-build '&lt;nixpkgs&gt;' -A ski
/nix/store/rpb5iikr6p0x49zkpw5cjwp9lg8lnl7d-ski-unstable-2022-07-07</code></pre>
<p>A few relevant links:</p>
<ul>
<li><a href="https://nixos.org/manual/nixpkgs/stable/#sec-overlays-install">overlays in nixpkgs manual</a></li>
<li><a href="https://nixos.wiki/wiki/Overlays">overlays in nixos.wiki</a></li>
</ul>
<p>Done!</p>

<div class="info">
    Posted on July 31, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 31 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/252-nixpkgs-overlay-nano-howto.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>nixpkgs cross-compilation improvements</title>
    <link>http://trofi.github.io/posts/251-nixpkgs-cross-compilation-improvements.html</link>
    <description><![CDATA[<h2 id="tldr">TL;DR</h2>
<p><code>gcc</code> cross-compilers are now stripped!
For example <a href="https://github.com/NixOS/nixpkgs/pull/182513">nixpkgs/182513</a>
decreases <code>wine</code> closure (or any other <code>pkgsCross.*.stdenv</code>)
by a ~1GB.</p>
<p><a href="https://github.com/NixOS/nixpkgs/pull/182513">nixpkgs/182513</a> also fixes
stripping of static libraries. You can now remove existing <code>dontStrip = true;</code>
workarounds in <code>nixpkgs</code> if you had to put them in to restore linkage.
For example <a href="https://github.com/NixOS/nixpkgs/pull/183484">nixpkgs/183484</a>
decreases <code>mingw</code> closure by 200MB.</p>
<p>With <a href="https://github.com/NixOS/nixpkgs/pull/181943">nixpkgs/181943</a> <code>gcc</code>
cross-compilers and cross-built <code>gcc</code>s now enable expected features based
on target’s libc headers. Previously libc headers were not passed correctly.
That caused cross-<code>gcc</code> and cross-build <code>gcc</code> to assume too conservative
assumptions about libc like use of <code>libssp</code> on targets or use of executable
stack support.</p>
<h2 id="story-mode">Story mode</h2>
<p>I like cross-compilation. It’s a great way to peek at other
CPU architectures’ properties without having to deal with
real hardware.</p>
<p>Cross-compilation is fundamentally just a compilation. The compiler
should emit code for that one CPU type. Should be a solved problem by
now, right? If you ever tried to cross-compile something large you
probably already know the complications that usually arise from it.</p>
<h2 id="the-problem">The problem</h2>
<p>Scrolling through open <code>nixpkgs</code> PRs I stopped on this one:
<a href="https://github.com/NixOS/nixpkgs/pull/181802">stdenv: lib{gmp,mpc,mpfr,isl}-stage3: isPower64 -&gt; no -fstack-protector</a>.
It looked like something I could review. A few month ago I fiddled with
<a href="http://trofi.github.io/posts/240-nixpkgs-bootstrap-intro.html">stdenv bootstrap</a> when I dealt
with <code>glibc-2.35</code> update. If nothing else I knew <code>stdenv</code> is a bit hard
to reason about when it comes to figuring out bootstrap dependency tower.</p>
<p>In the PR Adam Joseph shared the problem he was trying to address. Somewere
at bootstrap time on <code>powerpc64le-linux</code> platform one of the intermediate
<code>gcc</code> builds failed to link as:</p>
<pre><code>/tmp/nix-build-gcc-10.3.0.drv-0/build/./prev-gcc/xg++ \
    -o cc1plus \
    cp/cp-lang.o ... main.o ... ../libdecnumber/libdecnumber.a ... -lz
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.a(mpfr-gmp.o):
  (.toc+0x8): undefined reference to `__stack_chk_guard'
/&lt;&lt;NIX&gt;&gt;/binutils-2.35.2/bin/ld: /&lt;&lt;NIX&gt;&gt;/mpfr-4.1.0/lib/libmpfr.a(mpfr-gmp.o):
  (.toc+0x8): undefined reference to `__stack_chk_guard'
...</code></pre>
<p>Adam suggested disabling stack protector just for a few bootstrap
packages (<code>mpfr</code> and the similar) to get past the errro. While it probably
gets the job done it also flags an assumption incompatibility between
compilers. It should not normally happen.</p>
<h2 id="what-is-libssp">What is libssp?</h2>
<p>What is that <code>__stack_chk_guard</code> thing anyway? What is supposed to
provide it?</p>
<p>It has something to do with <code>-fstack-protector*</code> set of options in
<code>gcc</code>. Let’s pick a trivial <code>void wr(char * p, char v){ *p = v; }</code>
function and build it with and without stack protector to get a
feel of it:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fno<span class="op">-</span>stack<span class="op">-</span>protector <span class="op">-</span>O2</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>       <span class="co">; Our `*p = v;` code</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 12.1.0&quot;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>The actual code takes 1 line here: <code>movq    %rsi, (%rdi)</code>. It stores
64-bit value at <code>%rsi</code> register (<code>long v</code> parameter) to memory pointed
by <code>%rdi</code> (<code>long * p</code> parameter). The rest is a bit of metadata to get
the code placed properly into the <code>ELF</code> file.</p>
<p>Now let’s add stack protector code to it with <code>-fstack-protector-all</code>
option:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fstack<span class="op">-</span>protector<span class="op">-</span>all <span class="op">-</span>O2</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span>          <span class="co">; allocated a bit of space for canary on stack</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">32</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">fs</span><span class="op">:</span><span class="dv">40</span><span class="op">,</span> <span class="op">%</span><span class="kw">rax</span>       <span class="co">; canary = %fs:40</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span>      <span class="co">; store canary on stack</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        xorl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span>         <span class="co">; clean registers up</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>       <span class="co">; initial `*p = v;` code</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>      <span class="co">; load canary value back from stack</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">%</span><span class="kw">fs</span><span class="op">:</span><span class="dv">40</span><span class="op">,</span> <span class="op">%</span><span class="kw">rax</span>       <span class="co">; compare to the reference value</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>L5                <span class="co">; exit if canary comparison failed</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        .cfi_remember_state</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">8</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span>                        <span class="co">; exit `wr()`</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        .cfi_restore_state</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    __stack_chk_fail   <span class="co">; handle failure</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 12.1.0&quot;</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>Now our original code was diluted with 9(!) extra instructions related
to stack protector checks. To make the checking work the compiler uses
<code>%fs:40</code> thread-local memory location as a canary value. At start of
each function code places canary on stack (with <code>movq %rax, 8(%rsp)</code>)
and at the end of function code reads the canary value back from the
same location (with <code>movq 8(%rsp), %rax</code>) and checks if it was unchanged
(with <code>subq %fs:40, %rax</code> and <code>jne .L5</code>). If the canary check
failed then <code>__stack_chk_fail()</code> is called.</p>
<p>If we generalize the above to pseudo-code <code>gcc</code> turned our program to
something like:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> wr<span class="op">(</span><span class="dt">long</span> <span class="op">*</span> p<span class="op">,</span> <span class="dt">long</span> v<span class="op">)</span> <span class="op">{</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">long</span> canary <span class="op">=</span> __stack_chk_guard<span class="op">;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>p <span class="op">=</span> v<span class="op">;</span> <span class="co">// original code</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>canary <span class="op">!=</span> __stack_chk_guard<span class="op">)</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        __stack_chk_fail<span class="op">();</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Something has to provide that <code>__stack_chk_fail()</code> function. In case
of <code>glibc</code> that function is provided by <code>libc.so.6</code> library starting
from <code>2.4</code> version:</p>
<pre><code>$ nm -D &lt;&lt;NIX&gt;&gt;/glibc-2.34-210/lib/libc.so.6  | fgrep __stack
0000000000116de0 T __stack_chk_fail@@GLIBC_2.4</code></pre>
<p>Something also has to arrange addressable <code>%fs:40</code> memory. In case of
<code>glibc</code> that value is placed by <code>glibc</code>
<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=csu/libc-start.c;h=543560f36c33b07a1fbe1b7e4578374fe8007b1f;hb=da3b9f445195bdbe77e66e4fc137a5732637b85f#l311">itself</a>
in the early startup code. <code>%fs</code> is a <code>TLS</code> segment register for a
segment maintained by kernel: kernel changes the segment address
on thread switch.</p>
<p>Thus the above assembly code generated by <code>gcc</code> implies presence of
operating system and supporting libc.</p>
<p>Not all architectures have a way to address thread-local data in that
fashion. For targets without <code>TLS</code> <code>glibc</code> emulates a bit of stack
protection with a global variable <code>uintptr_t __stack_chk_guard attribute_relro;</code>.</p>
<p>Turns out it’s not the only implementation of stack protector prologue
and epilogue even on <code>x86_64</code>. What happens on <code>glibc-2.0</code>? Or on other
libcs or kernels?</p>
<p>The implementation we saw above was the default case of <code>--disable-libssp</code>
mode of <code>gcc</code>. We can also build <code>gcc</code> in <code>--enable-libssp</code>. In this
case we get a bit different code:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a># Locally built <span class="op">`</span>gcc<span class="op">`</span> build with <span class="op">`./</span>configure <span class="op">--</span>enable<span class="op">-</span>libssp<span class="op">`:</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>$ printf <span class="st">&quot;void wr(long * p, long v){ *p = v; }&quot;</span> <span class="op">|</span> gcc<span class="op">/</span>xgcc <span class="op">-</span>Bgcc <span class="op">-</span>S <span class="op">-</span>x c <span class="op">-</span> <span class="op">-</span>o <span class="op">-</span> <span class="op">-</span>fstack<span class="op">-</span>protector<span class="op">-</span>all <span class="op">-</span>O2</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        .<span class="dt">file</span>   <span class="st">&quot;&lt;stdin&gt;&quot;</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        .text</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        .p2align <span class="dv">4</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        .globl  wr</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        .type   wr<span class="op">,</span> <span class="fu">@f</span>unction</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="fu">wr:</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFB0:</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        .cfi_startproc</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span>                       <span class="co">; allocated a bit of space for canary on stack</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">32</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    __stack_chk_guard<span class="op">(%</span>rip<span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>   <span class="co">; canary = __stack_chk_guard</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span>                   <span class="co">; store canary on stack</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>        xorl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span>                      <span class="co">; clean registers up</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="op">(%</span><span class="kw">rdi</span><span class="op">)</span>                    <span class="co">; initial `*p = v;` code</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>                   <span class="co">; load canary value back from stack</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        subq    __stack_chk_guard<span class="op">(%</span>rip<span class="op">),</span> <span class="op">%</span><span class="kw">rax</span>   <span class="co">; compare to the reference value</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jne</span>     <span class="op">.</span>L5                             <span class="co">; exit if canary comparison failed</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">24</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>        .cfi_remember_state</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>        .cfi_def_cfa_offset <span class="dv">8</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span>                                     <span class="co">; exit `wr()`</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>        .cfi_restore_state</span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    __stack_chk_fail                <span class="co">; handle failure</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>        .cfi_endproc</span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="fu">.LFE0:</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>        .size   wr<span class="op">,</span> <span class="op">.-</span>wr</span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>        .ident  <span class="st">&quot;GCC: (GNU) 13.0.0 20220724 (experimental)&quot;</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>        .<span class="bu">section</span>        <span class="op">.</span>note<span class="op">.</span>GNU<span class="op">-</span>stack<span class="op">,</span><span class="st">&quot;&quot;</span><span class="op">,</span><span class="fu">@</span><span class="er">p</span>rogbits</span></code></pre></div>
<p>The assembly code is very close to <code>--disable-libssp</code> case. The
difference is how canary is read:
instead of using thread-local <code>%fs:40</code> location <code>gcc</code> now resorts
to using a global <code>__stack_chk_guard</code> variable.</p>
<p>Note that <code>glibc</code> does not provde <code>__stack_chk_guard</code> symbol. In <code>gcc</code>’s
case expected to come from <code>libssp</code> library we just enabled. <code>gcc</code>’s spec
files add <code>-lssp</code> (or equivalent) to all link commands.</p>
<p>This means that binaries produced by <code>--enable-libssp</code> and by
<code>--disable-libssp</code> are slightly incompatible: the final result needs
to be linked by <code>--enable-libssp</code> <code>gcc</code>. Otherwise we’ll get linker
failures:</p>
<pre><code>$ printf &quot;void wr(long * p, long v){ *p = v; }&quot; | gcc/xgcc -Bgcc -c -x c - -fPIC -o a.o -fstack-protector-all -O2
$ gcc -shared a.o -o liba.so -Wl,-no-undefined
&lt;&lt;NIX&gt;&gt;/binutils-2.38/bin/ld: a.o: in function `wr':
&lt;stdin&gt;:(.text+0x7): undefined reference to `__stack_chk_guard'
collect2: error: ld returned 1 exit status</code></pre>
<p>Looks familiar? That’s exactly the same failure we started with.</p>
<h2 id="so-why-do-we-get-a-mix-of-gcc-flavours">So why do we get a mix of gcc flavours?</h2>
<p>Not all libc versions provide stack protector infrastructure. <code>gcc</code>
tries to guess at <code>./configure</code> time by
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l6734">peeking</a>
at target libc’s headers:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode m4"><code class="sourceCode m4"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>[if test <span class="ch">-</span>f $target_header_dir<span class="ch">/</span>features.h \</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>  <span class="ch">&amp;&amp;</span> glibc_version_major_define<span class="ch">=</span>`$EGREP '<span class="ch">^</span>[     ]<span class="ch">*</span><span class="co">#[    ]*define[       ]+__GLIBC__[</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>   ]<span class="ch">+</span>[<span class="dv">0</span><span class="ch">-</span><span class="dv">9</span>]' $target_header_dir<span class="ch">/</span>features.h` \</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="ch">&amp;&amp;</span> glibc_version_minor_define<span class="ch">=</span>`$EGREP '<span class="ch">^</span>[     ]<span class="ch">*</span><span class="co">#[    ]*define[       ]+__GLIBC_MIN</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>OR__[   ]<span class="ch">+</span>[<span class="dv">0</span><span class="ch">-</span><span class="dv">9</span>]' $target_header_dir<span class="ch">/</span>features.h`; then</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  glibc_version_major<span class="ch">=</span>`echo &quot;$glibc_version_major_define&quot; <span class="ch">|</span> sed <span class="ch">-</span>e 's<span class="ch">/</span>.<span class="ch">*</span>__GLIBC__[</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>     ]<span class="ch">*//</span>'`</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  glibc_version_minor<span class="ch">=</span>`echo &quot;$glibc_version_minor_define&quot; <span class="ch">|</span> sed <span class="ch">-</span>e 's<span class="ch">/</span>.<span class="ch">*</span>__GLIBC_MINOR</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>__[     ]<span class="ch">*//</span>'`</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>fi]</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="co"># Test for stack protector support in target C library.</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>AC_CACHE_CHECK<span class="ch">(</span>__stack_chk_fail in target C library<span class="ch">,</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  gcc_cv_libc_provides_ssp<span class="ch">,</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>  [gcc_cv_libc_provides_ssp<span class="ch">=</span>no</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    case &quot;$target&quot; in</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*-*-</span>musl<span class="ch">*)</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>         <span class="co"># All versions of musl provide stack protector</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>         gcc_cv_libc_provides_ssp<span class="ch">=</span>yes;;</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*-*-</span>linux<span class="ch">*</span> <span class="ch">|</span> <span class="ch">*-*-</span>kfreebsd<span class="ch">*-</span>gnu<span class="ch">)</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>      <span class="co"># glibc 2.4 and later provides __stack_chk_fail and</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># either __stack_chk_guard, or TLS access to stack guard canary.</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>      GCC_GLIBC_VERSION_GTE_IFELSE<span class="ch">(</span>[<span class="dv">2</span>]<span class="ch">,</span> [<span class="dv">4</span>]<span class="ch">,</span> [gcc_cv_libc_provides_ssp<span class="ch">=</span>yes]<span class="ch">,</span> [</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>      ...</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>       <span class="ch">*)</span> gcc_cv_libc_provides_ssp<span class="ch">=</span>no ;;</span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    esac</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>  fi]<span class="ch">)</span></span></code></pre></div>
<p>Here <code>configure.ac</code> just greps <code>glibc</code>’s <code>features.h</code> header for library
version. It does not do usual linking probing as bootstrap frequently
starts from <code>gcc</code> and <code>glibc</code> headers alone.</p>
<p>In <code>nixpkgs</code>’s case <code>gcc</code> build in <code>cross-compile</code> case
(<code>host != target</code>) was looking at a wrong directory location by
attempting to add sysroot
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l2438">prefix</a>:</p>
<pre><code>if test x$host != x$target || test &quot;x$TARGET_SYSTEM_ROOT&quot; != x ||
   test x$build != x$host || test &quot;x$with_build_sysroot&quot; != x; then
  if test &quot;x$with_build_sysroot&quot; != x; then
    BUILD_SYSTEM_HEADER_DIR=$with_build_sysroot'$${sysroot_headers_suffix}$(NATIVE_SYSTEM_HEADER_DIR)'
  else
    BUILD_SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'
  fi

  if test x$host != x$target
  then
    CROSS=&quot;-DCROSS_DIRECTORY_STRUCTURE&quot;
    ALL=all.cross
    SYSTEM_HEADER_DIR=$BUILD_SYSTEM_HEADER_DIR
  elif test &quot;x$TARGET_SYSTEM_ROOT&quot; != x; then
    SYSTEM_HEADER_DIR='$(CROSS_SYSTEM_HEADER_DIR)'
  fi

  if test &quot;x$with_build_sysroot&quot; != &quot;x&quot;; then
    target_header_dir=&quot;${with_build_sysroot}${native_system_header_dir}&quot;
  elif test &quot;x$with_sysroot&quot; = x; then
    target_header_dir=&quot;${test_exec_prefix}/${target_noncanonical}/sys-include&quot;
  elif test &quot;x$with_sysroot&quot; = xyes; then
    target_header_dir=&quot;${test_exec_prefix}/${target_noncanonical}/sys-root${native_system_header_dir}&quot;
  else
    target_header_dir=&quot;${with_sysroot}${native_system_header_dir}&quot;
  fi
else
  target_header_dir=${native_system_header_dir}
fi</code></pre>
<p>Note how hard <code>gcc</code> tries:</p>
<ul>
<li><code>${buildsysroot}/${native_system_header_dir}</code></li>
<li><code>${exec_prefix}/${target}/sys-include</code></li>
<li><code>${exec_prefix}/${target}/sys-root${native_system_header_dir}</code></li>
<li><code>${sysroot}${native_system_header_dir}</code></li>
</ul>
<p><code>nixpkgs</code> provided none of these directories and build was falling back
to outdated <code>glibc-0.0</code> assumption.</p>
<p>Thus initial fix was simple: just add <code>--with-build-sysroot=/</code> option to
<code>gcc</code>’s <code>./configure</code> to trick it to use <code>/${native_system_header_dir}</code> path.</p>
<p>One-liner change! This allowed me to cross-build <code>gcc</code> for
<code>powerpc64le-linux</code> and make sure stack protector is using <code>glibc</code>
support code. Are we done?</p>
<h2 id="pandoras-box">Pandora’s box</h2>
<p>The <code>--with-build-sysroot=/</code> now started enabling all sorts of
libc-specific features. That should be fine on it’s own, but for
<code>nixpkgs</code> cross-build (<code>build != host == target</code>) case it was
like that for the first time.</p>
<p>Varios linux targets just worked with the fix. Mostly because
we are compiling from <code>glibc</code> to <code>glibc</code>. Or from <code>glibc</code> to <code>musl</code>.
It’s usually not that bad to miss a feature or two.</p>
<p>I was confident of the fix, but <a href="https://github.com/NixOS/ofborg">ofborg</a>
presubmit test told me that I broke <code>x86_64-darwin</code> <code>gcc</code> build:</p>
<pre><code>impure path `//' used in link
collect2: error: ld returned 1 exit status</code></pre>
<p>After a bit of debugging I found it to be just a false positive check
failure in <code>nixpkgs</code>-specific <code>ld</code> wrapper script. Wrapper complained
that <code>-syslibroot //</code> refers outside <code>/nix/store</code> path and thus breaks
the sandboxing. But in reality it’s a no-op flag. Thus I just skipped
this specific path in the wrapper.</p>
<p>I tried to cross-build <code>gcc</code>. It failed again. This time <code>ofborg</code> was
still unhappy and complained about missing <code>sys/sdt.h</code> header~</p>
<p>That was surprising: <code>darwin's</code> libc does provide <code>sys/sdt.h</code>,
while <code>glibc</code> does not. Why does it even try to use that header?
Normally <code>gcc</code>’s <code>configure.ac</code> <a href="https://gcc.gnu.org/git/?p=gcc.git;a=blob;f=gcc/configure.ac;h=446747311a6aec3c810ad6aa4190f7bd383b94f7;hb=HEAD#l6807">probes it</a>
as a target header as well:</p>
<pre class="shell"><code># Test for &lt;sys/sdt.h&gt; on the target.
GCC_TARGET_TEMPLATE([HAVE_SYS_SDT_H])
AC_MSG_CHECKING(sys/sdt.h in the target C library)
have_sys_sdt_h=no
if test -f $target_header_dir/sys/sdt.h; then
  have_sys_sdt_h=yes
  AC_DEFINE(HAVE_SYS_SDT_H, 1,
            [Define if your target C library provides sys/sdt.h])
fi
AC_MSG_RESULT($have_sys_sdt_h)</code></pre>
<p>The answer was straightforward: <code>nixpkgs</code> incorrectly used host’s
headers as target headers!</p>
<p>After I sorted this failure yet another failure came up: <code>pkgsLLVM</code>
bootstrap was broken because <code>gcc</code> enables corss-compilation mode
for <code>build != host || host != target</code> case. But <code>nixpkgs</code> uses
<code>x86_64-unknown-linux-gnu</code> for both <code>gcc</code> (host) and <code>llvm</code>
(target) toolchains and bootstraps it as a proper cross-compiler.
That was easy to fix with <a href="https://github.com/NixOS/nixpkgs/pull/182666">nixpkgs/182666</a>.</p>
<p>Is that it? I’m not sure. I think we have a few more workarounds
buried in <code>nixpkgs</code> that stemmed from the fact that we used wrong
headers. One bug at a time.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nixpkgs</code> makes it trivial to try various cross-compilers with a
single command. <code>darwin</code> port was very useful to expose two bugs
in generic include layour scheme <code>nixpkgs</code> was using.</p>
<p>Reproducible environment made it possible to debug early stage of
<code>gcc</code> bootstrap when libc is not yet present for target. When I did
a similar work on Gentoo’s <code>crossdev</code> I was frequently tricked by
the fact that building initiall cross-toolchain frequently results
in a different result than after a <code>crossdev</code> rerun.</p>
<p><code>gcc</code>’s <code>./configure</code> is surprisingly resilient to all the invalid
configurations you throw at it. It always manages to produce something
that mostly works and gets you going as an initial porting effort.
I think it’s a good thing in the toolchain world as target environments
are so diverse. But it takes some time to debug it efficiently.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 30, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sat, 30 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/251-nixpkgs-cross-compilation-improvements.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Dynamic linking is hard (SuperH version)</title>
    <link>http://trofi.github.io/posts/250-dynamic-linking-is-hard-superh-version.html</link>
    <description><![CDATA[<p>I got a bit more free weekend time and I’m slowly going through a
backlog of topics to write about.</p>
<p>Today I’ll write about the <code>GHC</code> bug from 4 years ago.</p>
<h2 id="the-problem">The problem</h2>
<p>John Paul Adrian Glaubitz found yet another interesting case of <strong>GHC</strong> doing
<a href="https://gitlab.haskell.org/ghc/ghc/-/issues/15338">something very unusual</a>.</p>
<p>Namely <strong>ghc-pkg</strong> was not able to print it’s own version when (and only when)
redirected to a … pipe(!):</p>
<pre><code># good:
$ ghc-pkg --version
GHC package manager version 8.2.2

# bad:
$ ghc-pkg --version | cat
</code></pre>
<p>“Looks like a very simple coding error” was my thought. I attempted the
same test on <strong>ghc-HEAD</strong> and reproduced strange behaviour.</p>
<p><strong>ghc-pkg</strong> is a
<a href="https://gitlab.haskell.org/ghc/ghc/-/blob/master/utils/ghc-pkg/Main.hs">simple single-source tool</a>.
It was easy to reduce the original down to the following minimal example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- a.hs</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.IO</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    hSetBuffering stdout (<span class="dt">BlockBuffering</span> <span class="dt">Nothing</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    hPutStrLn stdout <span class="st">&quot;hello&quot;</span></span></code></pre></div>
<p>Quiz question: what do you think is a bug here?</p>
<p>The caveat is that all this happens on
<a href="https://en.wikipedia.org/wiki/SuperH">SuperH</a> architecture.</p>
<pre><code>$ inplace/bin/ghc-stage1 --make a.hs -O1 -dynamic
$ /usr/bin/qemu-sh4 -L /usr/sh4-unknown-linux-gnu/ ./a
&lt;empty&gt;</code></pre>
<p>Already see the bug? Me neiter.</p>
<h2 id="what-is-superh">What is SuperH?</h2>
<p><strong>SuperH</strong> (or <strong>sh</strong>) is a 32-bit <strong>RISC</strong> architecture designed by
<strong>Hitachi</strong>. <strong>Sega Saturn</strong>, <strong>Sega 32X</strong> and <strong>Sega Dreamcast</strong>
all use <strong>sh</strong>-based chips. <strong>SuperH</strong> also hides in many controllers
like <strong>CD-ROM</strong>.</p>
<p><strong>SuperH</strong> recently got new life in development community
after a bunch of related patents expired in 2015.</p>
<p>From a software development standpoint (as in, shared bugs) <strong>sh</strong>
feels like <strong>m68k</strong>. For example it’s instruction length is 2 bytes
which drives some low-level toolchain decisions to be similar to <strong>m68k</strong>.</p>
<p>Let’s have a look at a disassembly of a <strong>fabs</strong> function in
<strong>glibc</strong> to get a feel for this architecture:</p>
<pre><code>000213cc &lt;fabs@@GLIBC_2.2&gt;:
   213cc:       c6 2f           mov.l   r12,@-r15
   213ce:       0e c7           mova    21408 &lt;fabs@@GLIBC_2.2+0x3c&gt;,r0
   213d0:       0d dc           mov.l   21408 &lt;fabs@@GLIBC_2.2+0x3c&gt;,r12        ! 76c00
   213d2:       0e d3           mov.l   2140c &lt;fabs@@GLIBC_2.2+0x40&gt;,r3 ! 48
   213d4:       0c 3c           add     r0,r12
   213d6:       4c f0           fmov    fr4,fr0
   213d8:       22 4f           sts.l   pr,@-r15
   213da:       c3 62           mov     r12,r2
   213dc:       3c 32           add     r3,r2
   213de:       22 62           mov.l   @r2,r2
   213e0:       fc 7f           add     #-4,r15
   213e2:       5c f1           fmov    fr5,fr1
   213e4:       22 63           mov.l   @r2,r3
   213e6:       32 2f           mov.l   r3,@r15
   213e8:       00 e3           mov     #0,r3
   213ea:       f2 67           mov.l   @r15,r7
   213ec:       22 63           mov.l   @r2,r3
   213ee:       70 33           cmp/eq  r7,r3
   213f0:       00 e7           mov     #0,r7
   213f2:       00 e3           mov     #0,r3
   213f4:       04 8f           bf.s    21400 &lt;fabs@@GLIBC_2.2+0x34&gt;
   213f6:       5d f0           fabs    fr0
   213f8:       04 7f           add     #4,r15
   213fa:       26 4f           lds.l   @r15+,pr
   213fc:       0b 00           rts
   213fe:       f6 6c           mov.l   @r15+,r12
   21400:       03 d7           mov.l   21410 &lt;fabs@@GLIBC_2.2+0x44&gt;,r7 ! fffe5a52
   21402:       03 07           bsrf    r7
   21404:       09 00           nop
   21406:       09 00           nop
   21408:       00 6c           mov.b   @r0,r12
   2140a:       07 00           mul.l   r0,r0
   2140c:       48 00           .word 0x0048
   2140e:       00 00           .word 0x0000
   21410:       52 5a           mov.l   @(8,r5),r10
   21412:       fe ff           fmac    fr0,fr15,fr15</code></pre>
<p>A few things to note here:</p>
<ul>
<li><p>Instructions are only 2 bytes long. This makes the task of
encoding large branch offsets especially tricky: you need to
store 32-bit offset somere in nearby memory. In the example
above it’s <strong>.word 0x0048; .word 0x0000</strong>.</p></li>
<li><p><strong>r15</strong> is a stack pointer</p></li>
<li><p><strong>SuperH</strong> support increments/decrements as part of the main
instruction:</p>
<ul>
<li><strong>sts.l pr,@-r15</strong>: push return address on stack (pre-decrement)</li>
<li><strong>lds.l <span class="citation" data-cites="r15">@r15</span>+,pr</strong>: pop return address from stack (post-increment)</li>
</ul></li>
<li><p>There are <strong>FPU</strong> instructions like <strong>fabs</strong> itself.</p></li>
</ul>
<p>Handy! But it does not really matter all that for our particular bug :)</p>
<h2 id="the-gist-of-the-bug">The gist of the bug</h2>
<p>Before digging deeper into the bug I tried the same reproducer on a
bunch of targets using <strong>qemu</strong> and using real hardware where I could
reach. Results were:</p>
<ul>
<li>broken: <strong>sh4</strong> and <strong>m68k</strong></li>
<li>working: <strong>x86_64</strong>, <strong>mipsn32</strong>, <strong>powerpc</strong>, <strong>powerpc64</strong>, <strong>sparc</strong></li>
</ul>
<p><strong>x86_64</strong> and <strong>powerpc{,64}</strong> are targets with native <strong>GHC</strong> code
generation. <strong>mips</strong>, <strong>sparc</strong>, <strong>sh4</strong> and <strong>m68k</strong> are <strong>via-C</strong>
(<strong>unregisterised</strong>) targets. Thus it’s probably not just a bug in
unregisterised backend.</p>
<p>It also not just 32 vs 64 bit bug (<strong>sparc</strong> is 32-bit here).</p>
<p>I dug a bit more into the failure and found that <strong>haskell</strong>-level
<strong>System.IO.stdout</strong> closure (rough equivalent of <strong>C</strong>’s <strong>stdout</strong>
global) is present in memory in multiple places! And different
pieces of code access different copies of it.</p>
<p>Specifically the code that initialises <strong>System.IO.stdout</strong> fills
all fields diligently. But code that writes to it uses default
object full of zeros.</p>
<p>Jessica Clarke pointed at <strong>GHC</strong>’s use of <strong>-Bsymbolic</strong> linker
option that breaks various <strong>C</strong>-level assumptions. <strong>GHC</strong>’s native
code generator specifically tries to generate code compatible with
<strong>-Bsymbolic</strong>. But when unregisterised backend is used <strong>GHC</strong> has
no control of what <strong>gcc</strong> produces. And <strong>gcc</strong> breaks the assumptions.</p>
<p>In <strong>GHC</strong>’s case <strong>-Bsymbolic</strong> is a performance optimization. It’s not
a requirement to get haskell compiler on a platform. Thus the simple fix
was to avoid use of it in unregisterised codegen with
<a href="https://gitlab.haskell.org/ghc/ghc/-/commit/8ec48990fee9e245bb2fe40dc6f65b61b8612157">the patch</a>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/compiler/main/SysTools.hs</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/compiler/main/SysTools.hs</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -548,1 +548,1 @@ linkDynLib dflags0 o_files dep_packages</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>             let bsymbolicFlag = -- ...</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="st">-                                [&quot;-Wl,-Bsymbolic&quot;]</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="va">+                                [&quot;-Wl,-Bsymbolic&quot; | not unregisterised]</span></span></code></pre></div>
<h2 id="but-how-exactly-did-it-break">But how exactly did it break?</h2>
<p>The above probably does not make much sense. What is <strong>-Bsymbolic</strong>?
Why does it make things worse if it’s just an optimization? Why do some
unreg targets are not affected?</p>
<p>Let’s look at a smaller example in <strong>C</strong>:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* lib.c: */</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> g <span class="op">=</span> <span class="dv">42</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> lib_g<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">return</span> g<span class="op">;</span> <span class="op">}</span></span></code></pre></div>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* prog.c */</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">/* declarations from lib.c */</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> g<span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> lib_g<span class="op">(</span><span class="dt">void</span><span class="op">);</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;before: main.g=</span><span class="sc">%i</span><span class="st">; lib_g()=</span><span class="sc">%i\n</span><span class="st">&quot;</span><span class="op">,</span> g<span class="op">,</span> lib_g<span class="op">());</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    g <span class="op">=</span> <span class="dv">12345678</span><span class="op">;</span> <span class="co">/* Was 42. */</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;after:  main.g=</span><span class="sc">%i</span><span class="st">; lib_g()=</span><span class="sc">%i\n</span><span class="st">&quot;</span><span class="op">,</span> g<span class="op">,</span> lib_g<span class="op">());</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here we have library code with one global variable <strong>g</strong> and
a getter function <strong>lib_g()</strong>. And a main program where
<strong>main()</strong> function prints initial value of <strong>g</strong> global directly
and via <strong>lib_g()</strong> getter. We also change <strong>g</strong> value directly
and print result again.</p>
<p>Nothing too complicated.</p>
<p>Here is how things work when we build it as a single executable:</p>
<pre><code>$ gcc -O1 lib.c prog.c -o good
$ ./good
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>No surprise here:</p>
<ul>
<li>before the store both <strong>g</strong> and <strong>lib_g()</strong> return <strong>42</strong></li>
<li>after the store both <strong>g</strong> and <strong>lib_g()</strong> return <strong>12345678</strong></li>
</ul>
<p>It’s trivial. What could possible go wrong here?</p>
<p>Now let’s try to build the same source as a pair of executable
and it’s shared library:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o good-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ ./good-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>Same thing.</p>
<p>To be even clearer the data flow is the following:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-1.svg" /></p>
<p>Here green arrows denote data reads, light green boxes
denote intructions that perform reads. Cyan shade shows the
writes and write instructions.</p>
<p>All the paths directly or indirectly read and write the same <strong>g</strong> location.
Seems like no place to go wrong, right?</p>
<p>Now let’s add a <strong>-Wl,-Bsymbolic</strong> linker option used by <strong>GHC</strong>. <strong>man ld</strong>
says:</p>
<pre><code>   -Bsymbolic
       When creating a shared library, bind references to global symbols to the
       definition within the shared library, if any.  Normally, it is possible for
       a program linked against a shared library to override the definition within
       the shared library.  This option is only meaningful on ELF platforms which
       support shared libraries.</code></pre>
<p>Overrides usually happen when we define a symbol in multiple places: one in shared
library and another in executable program. One of them has to win. <strong>LD_PRELOAD</strong>
frequently relies on symbol override semantics.</p>
<p>But does our program override any definitions? If feels like we don’t do
anything special: we define all the things once and use them the simplest
way possible, right?</p>
<p>Let’s try:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ ./symbolic-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=42</code></pre>
<p>Whoops. What happens here? Why do <strong>g</strong> and <strong>lib_g()</strong> see different values?</p>
<p>Let’s look at final generated code. I’ll start from simplest case without an
external library where things stil worked. Building:</p>
<pre><code>$ gcc -O1 lib.c prog.c -o good
$ objdump -DR good</code></pre>
<p>Peeking inside:</p>
<pre><code>Disassembly of section .text:
        ...
0000000000401126 &lt;lib_g&gt;:
  401126:       8b 05 04 2f 00 00       mov    0x2f04(%rip),%eax        # 404030 &lt;g&gt;
  40112c:       c3                      ret

000000000040112d &lt;main&gt;:
  40112d:       48 83 ec 08             sub    $0x8,%rsp
  401131:       e8 f0 ff ff ff          call   401126 &lt;lib_g&gt;
  401136:       89 c2                   mov    %eax,%edx
  401138:       8b 35 f2 2e 00 00       mov    0x2ef2(%rip),%esi        # 404030 &lt;g&gt;
  40113e:       bf 08 20 40 00          mov    $0x402008,%edi
  401143:       b8 00 00 00 00          mov    $0x0,%eax
  401148:       e8 e3 fe ff ff          call   401030 &lt;printf@plt&gt;
  40114d:       c7 05 d9 2e 00 00 4e    movl   $0xbc614e,0x2ed9(%rip)   # 404030 &lt;g&gt;
  401154:       61 bc 00
  401157:       e8 ca ff ff ff          call   401126 &lt;lib_g&gt;
  40115c:       89 c2                   mov    %eax,%edx
  40115e:       8b 35 cc 2e 00 00       mov    0x2ecc(%rip),%esi        # 404030 &lt;g&gt;
  401164:       bf 28 20 40 00          mov    $0x402028,%edi
  401169:       b8 00 00 00 00          mov    $0x0,%eax
  40116e:       e8 bd fe ff ff          call   401030 &lt;printf@plt&gt;
  401173:       b8 00 00 00 00          mov    $0x0,%eax
  401178:       48 83 c4 08             add    $0x8,%rsp
  40117c:       c3                      ret

Disassembly of section .data:
        ...
0000000000404030 &lt;g&gt;:
  404030:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>Here our global variable <strong>g</strong> is located in <strong>.data</strong> section at <strong>0x404030</strong> address.
<strong>gcc</strong> used most efficient code to access it by using <strong>RIP</strong>-relative addressing:</p>
<ul>
<li>read via: <strong>mov 0x2ef2(%rip),%esi # 404030 &lt;g&gt;</strong>.</li>
<li>write via: <strong>movl $0xbc614e,0x2ed9(%rip) # 404030 &lt;g&gt;</strong></li>
</ul>
<p>Note that <strong>0x2ef2(%rip)</strong> is a fixed offset from the current instruction. In this case
it always refers to <strong>0x404030</strong> address of <strong>g</strong> and does not depend on any other
library that could be loaded into address space along the program.</p>
<p>There is the picture form of the above (same legend as in previous picture):</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-2.svg" /></p>
<p>It should be obvious from the picture that all the reads and writes to <strong>g</strong> happen at
the same <strong>0x404030</strong> location.</p>
<p>Now let’s have a look at our broken example. Building:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ objdump -DR libbug.so
$ objdump -DR symbolic-shared</code></pre>
<p>Peeking inside.</p>
<p>Let’s first look at <strong>libbug.so</strong>:</p>
<pre><code>Disassembly of section .text:
00000000000010f9 &lt;lib_g&gt;:
    10f9:       48 8d 05 20 2f 00 00    lea    0x2f20(%rip),%rax        # 4020 &lt;g&gt;
    1100:       8b 00                   mov    (%rax),%eax
    1102:       c3                      ret

Disassembly of section .data:
        ...
0000000000004020 &lt;g&gt;:
    4020:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>The code (<strong>.text</strong>) part is almost identical to our <strong>prog</strong> case. Except that instead of
direct <strong>mov 0x2f04(%rip),%eax</strong> instruction it uses a pair of instructions:
<strong>lea 0x2f20(%rip),%rax</strong> / <strong>mov (%rax),%eax</strong>. Both forms are semantically
equivalent.</p>
<p>Homework question: why does <strong>libbug.so</strong> use less efficient encoding?</p>
<p>The data (<strong>.data</strong>) part hosts <strong>g</strong> global variable at <strong>0x4020</strong> address. It’s not a real address
as shared libraries could normally be loaded at any address. We would need to add a
base address to every address we see. But we can pretend for now the library will be
loaded at address <strong>0</strong> and all the addresses we see are real and valid.</p>
<p><strong>symbolic-shared</strong> has a few new things:</p>
<pre><code>Disassembly of section .text:
        ...
0000000000401136 &lt;main&gt;:
  401136:       48 83 ec 08             sub    $0x8,%rsp
  40113a:       e8 f1 fe ff ff          call   401030 &lt;lib_g@plt&gt;
  40113f:       89 c2                   mov    %eax,%edx
  401141:       8b 35 f1 2e 00 00       mov    0x2ef1(%rip),%esi        # 404038 &lt;g@@Base&gt;
  401147:       bf 08 20 40 00          mov    $0x402008,%edi
  40114c:       b8 00 00 00 00          mov    $0x0,%eax
  401151:       e8 ea fe ff ff          call   401040 &lt;printf@plt&gt;
  401156:       c7 05 d8 2e 00 00 4e    movl   $0xbc614e,0x2ed8(%rip)   # 404038 &lt;g@@Base&gt;
  40115d:       61 bc 00
  401160:       e8 cb fe ff ff          call   401030 &lt;lib_g@plt&gt;
  401165:       89 c2                   mov    %eax,%edx
  401167:       8b 35 cb 2e 00 00       mov    0x2ecb(%rip),%esi        # 404038 &lt;g@@Base&gt;
  40116d:       bf 28 20 40 00          mov    $0x402028,%edi
  401172:       b8 00 00 00 00          mov    $0x0,%eax
  401177:       e8 c4 fe ff ff          call   401040 &lt;printf@plt&gt;
  40117c:       b8 00 00 00 00          mov    $0x0,%eax
  401181:       48 83 c4 08             add    $0x8,%rsp
  401185:       c3                      ret
...
Disassembly of section .bss:

0000000000404038 &lt;g&gt;:
  404038:       00 00                   add    %al,(%rax)
                        404038: R_X86_64_COPY   g@@Base
        ...</code></pre>
<p>On the surface <strong>main()</strong> has identical code to our <strong>prog</strong> case as well:
same <strong>RIP-relative</strong> addressing to reach local <strong>g</strong>. Except that <strong>g</strong> is
not supposed to be local! It’s loaded from unknown address in external shared
library! How did it get into our binary?</p>
<p><strong>gcc</strong> code generator assumes it’s local and relies on so called <strong>COPY</strong>
relocation (<strong>R_X86_64_COPY</strong> in our case) to copy data from external library
into the executable binary.</p>
<p>Effectively that means that at load time we will have two independen copies of <strong>g</strong>:</p>
<ul>
<li>one in <strong>libbug.so</strong> at address <strong>0x4020</strong> used by <strong>lib_g()</strong> function</li>
<li>and another in <strong>symbolic-shared</strong> binary at address <strong>0x404038</strong> used
by <strong>main()</strong> direct references.</li>
</ul>
<p>Or the same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-3.svg" /></p>
<p>Compared to previous pictures blue arrows show load-time data copy from
library data into binary data. And red arrow shows reads from stale source
location.</p>
<p>Note that <strong>main()</strong> always reads and write only local copy of <strong>g</strong>.
It never looks at <strong>libbug.so</strong>’s original. While <strong>lib_g()</strong> only
ever uses <strong>libbug.so</strong>’s original.</p>
<p>That is the negative effect of <strong>-Wl,-Bsymbolic</strong>: we effectively got
two independent <strong>g</strong> global variables that only happen to share initial
value at startup time.</p>
<p>So how does it work at all without <strong>-Wl,-Bsymbolic</strong>? We did not pass that
linker flag to the final binary. Only shared library was “corrupted” by it.</p>
<p>Quick quiz: what is you guess? Would the <strong>COPY</strong> relocation disappear magically?
Or library code would transform into something else?</p>
<p>Let’s have a look at a working shared library example now. Building:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o good-shared -L. -lbug '-Wl,-rpath=$ORIGIN'
$ objdump -DR libbug.so
$ objdump -DR good-shared</code></pre>
<p>Peeking inside. <strong>libbug.so</strong>:</p>
<pre><code>Disassembly of section .text:
        ...
00000000000010f9 &lt;lib_g&gt;:
    10f9:       48 8b 05 e8 2e 00 00    mov    0x2ee8(%rip),%rax        # 3fe8 &lt;g@@Base-0x38&gt;
    1100:       8b 00                   mov    (%rax),%eax
    1102:       c3                      ret

Disassembly of section .got:

0000000000003fd8 &lt;.got&gt;:
        ...
                        3fe8: R_X86_64_GLOB_DAT g@@Base
Disassembly of section .data:
        ...
0000000000004020 &lt;g&gt;:
    4020:       2a 00                   sub    (%rax),%al
        ...</code></pre>
<p>This time the code is a bit different from <strong>prog</strong> and <strong>-Bsymbolic</strong> case.</p>
<p><strong>g</strong> is read not by one <strong>mov</strong> instruction as before, but by two. Now we have
an indirection (via <strong>.got</strong>, Global Offset Table) where real address of <strong>g</strong>
is stored. And library does not know it’s own global variable address!</p>
<p>And <strong>good-shared</strong> executable is exactly the same as <strong>symbolic-shared</strong>:</p>
<pre><code>Disassembly of section .text:
0000000000401136 &lt;main&gt;:
  401136:       48 83 ec 08             sub    $0x8,%rsp
  40113a:       e8 f1 fe ff ff          call   401030 &lt;lib_g@plt&gt;
  40113f:       89 c2                   mov    %eax,%edx
  401141:       8b 35 f1 2e 00 00       mov    0x2ef1(%rip),%esi        # 404038 &lt;g@@Base&gt;
  401147:       bf 08 20 40 00          mov    $0x402008,%edi
  40114c:       b8 00 00 00 00          mov    $0x0,%eax
  401151:       e8 ea fe ff ff          call   401040 &lt;printf@plt&gt;
  401156:       c7 05 d8 2e 00 00 4e    movl   $0xbc614e,0x2ed8(%rip)   # 404038 &lt;g@@Base&gt;
  40115d:       61 bc 00
  401160:       e8 cb fe ff ff          call   401030 &lt;lib_g@plt&gt;
  401165:       89 c2                   mov    %eax,%edx
  401167:       8b 35 cb 2e 00 00       mov    0x2ecb(%rip),%esi        # 404038 &lt;g@@Base&gt;
  40116d:       bf 28 20 40 00          mov    $0x402028,%edi
  401172:       b8 00 00 00 00          mov    $0x0,%eax
  401177:       e8 c4 fe ff ff          call   401040 &lt;printf@plt&gt;
  40117c:       b8 00 00 00 00          mov    $0x0,%eax
  401181:       48 83 c4 08             add    $0x8,%rsp
  401185:       c3                      ret
...
Disassembly of section .bss:

0000000000404038 &lt;g&gt;:
  404038:       00 00                   add    %al,(%rax)
                        404038: R_X86_64_COPY   g@@Base
        ...</code></pre>
<p>Here we see the same pattern: again <strong>g</strong> is copied out of it’s real
location (<strong>libbug.so</strong> provides symbol contents) and the rest of
program uses this copy.</p>
<p>The same in pictures:</p>
<p><img src="http://trofi.github.io/posts.data/250-sh-copy-reloc/fig-4.svg" /></p>
<p>Magenta arrows shows the code that reads final address of <strong>g</strong> global
variable. Note that now nothing (aside from <strong>COPY</strong> relocation) reads
original <strong>g</strong> global variable at <strong>0x4020</strong> address: everything including
<strong>libbug.so</strong> uses executable’s copy of <strong>g</strong> at address <strong>0x404038</strong>.</p>
<p>Now we can make <strong>-Wl,-Bsymbolic</strong> work for us by enabling <strong>-fPIC</strong>
code on final executable:</p>
<pre><code>$ gcc -O1 -shared -fPIC lib.c -o libbug.so -Wl,-Bsymbolic
$ gcc -O1 -fno-PIC -fno-PIE -no-pie prog.c -o symbolic-shared -L. -lbug '-Wl,-rpath=$ORIGIN' -fPIC
./symbolic-shared
before: main.g=42; lib_g()=42
after:  main.g=12345678; lib_g()=12345678</code></pre>
<p>Works as expected! Homework quiz: why does it work?</p>
<h2 id="parting-words">Parting words</h2>
<p>Note that with <strong>-fPIC</strong> <strong>gcc</strong> generates the code to always go through
<strong>.got</strong> indirection to both allow for easy override (interposition) and
to allow final executables to have more efficient access to globals without
<strong>.got</strong> indirection.</p>
<p>This effectively penaizes library code in favour of speeding up binary code.
This tradeoff implies that most of the time library globals will be accessed
from outside the library (rather than inside the library). To get these
limitations around performance critical libraries (like <strong>glibc</strong>) go to the
great lengths to avoid use of externally visible global symbols and use
sorts of <strong><strong>attribute</strong>((visibility(“hidden”)))</strong> / <strong>-fvisibility=hidden</strong>
to get performance back.</p>
<p><strong>GHC</strong>’s strategy is to use <strong>-Bsymbolic</strong> to prioritize library code access
and be careful about using <strong>-fPIC</strong> style code on executables.</p>
<p><strong>COPY</strong> relocations have all sorts of unusual side-effects. They actually copy
data (which might take a considerable startup time for large programs), they
leak object sizes across binaries (as one needs to know how much to copy).
<a href="http://trofi.github.io/posts/195-dynamic-linking-ABI-is-hard.html">Nettle bug</a> is an interesting case
of <strong>ABI</strong> breakage of the past.</p>
<p>Have fun!</p>

<div class="info">
    Posted on July 10, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Sun, 10 Jul 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/250-dynamic-linking-is-hard-superh-version.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>A small update on 'make --shuffle' mode</title>
    <link>http://trofi.github.io/posts/249-an-update-on-make-shuffle.html</link>
    <description><![CDATA[<h1 id="tldr">Tl;DR</h1>
<p>GNU Make <code>--shuffle</code> mode was releases as part of GNU make 4.4 \o/.</p>
<p>Note that <code>--shuffle</code> is not enabled by default. You can enable it
by any of below methods whichever matches best your environment:</p>
<ul>
<li><p>Run <code>make --shuffle</code>. For casual testing.</p></li>
<li><p>Export <code>GNUMAKEFLAGS=--shuffle</code> environment variable. For
day-to-day development or distribution-wide testing. It is also a
safe value for <code>GNU make</code> that does not yet understand <code>--shuffle</code>
option.</p>
<p>Update: changed <del>MAKEFLAGS</del> to <code>GNUMAKEFLAGS</code> as <code>bmake</code> does not
skip unknown options and fails. Noticed by Toralf.</p></li>
<li><p>Apply <a href="https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619-random-by-default.patch" class="uri">https://slyfox.uni.cx/distfiles/make/make-4.3.90.20220619-random-by-default.patch</a>
on top of snapshot tarball. Useful for environments where there is no
easy way to pass a parameter to <code>make</code> or to set <code>GNUMAKEFLAGS</code>
variable.</p></li>
</ul>
<h1 id="minor-improvements">minor improvements</h1>
<p>Compared to the initial patch announced as a
<a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">proof of concept</a>
there is one extra change: presence of <code>.NOTPARALLEL:</code> directive
in a <code>Makefile</code> now disables shuffling in that file.</p>
<p>It was done to accommodate rare projects that rely on execution order
specified in <code>Makefile</code> and don’t plan to make dependencies correct
in near future. The example is <code>netpbm</code>:
<a href="https://sourceforge.net/p/netpbm/code/HEAD/tree/trunk/GNUmakefile#l110" class="uri">https://sourceforge.net/p/netpbm/code/HEAD/tree/trunk/GNUmakefile#l110</a></p>
<h1 id="failure-examples">failure examples</h1>
<p>A few new bugs were found and/or fixed:</p>
<ul>
<li>vim: <a href="https://github.com/vim/vim/pull/9978" class="uri">https://github.com/vim/vim/pull/9978</a></li>
<li>groff: <a href="https://savannah.gnu.org/bugs/?62084" class="uri">https://savannah.gnu.org/bugs/?62084</a></li>
<li>gpm: <a href="https://github.com/telmich/gpm/pull/43" class="uri">https://github.com/telmich/gpm/pull/43</a></li>
<li>gnu-efi: <a href="https://sourceforge.net/p/gnu-efi/patches/84/" class="uri">https://sourceforge.net/p/gnu-efi/patches/84/</a></li>
<li>cmigemo: <a href="https://github.com/koron/cmigemo/pull/29" class="uri">https://github.com/koron/cmigemo/pull/29</a></li>
<li>harvid: <a href="https://github.com/NixOS/nixpkgs/pull/178647" class="uri">https://github.com/NixOS/nixpkgs/pull/178647</a></li>
<li>subversion: <a href="https://issues.apache.org/jira/browse/SVN-4901" class="uri">https://issues.apache.org/jira/browse/SVN-4901</a></li>
<li>ocamlbuild: <a href="https://github.com/ocaml/ocamlbuild/pull/318" class="uri">https://github.com/ocaml/ocamlbuild/pull/318</a></li>
<li>ghc(!): <a href="https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8531" class="uri">https://gitlab.haskell.org/ghc/ghc/-/merge_requests/8531</a></li>
<li>slang: fixed in slang-pre2.3.3-77 snapshot in 5d36d7c2410cbd640470a9c97cc544d257c64660 commit. Could not find web UI for repository.</li>
<li>strace: <a href="https://github.com/strace/strace/pull/215" class="uri">https://github.com/strace/strace/pull/215</a></li>
<li>ski: <a href="https://github.com/trofi/ski/commit/7cc1ced067bf3822ef87c323b6110f38bc0ca1b5" class="uri">https://github.com/trofi/ski/commit/7cc1ced067bf3822ef87c323b6110f38bc0ca1b5</a></li>
<li>heimdal: <a href="https://github.com/heimdal/heimdal/pull/999" class="uri">https://github.com/heimdal/heimdal/pull/999</a></li>
<li>src-highlite: <a href="https://savannah.gnu.org/patch/index.php?10262" class="uri">https://savannah.gnu.org/patch/index.php?10262</a></li>
<li>gcc: <a href="https://gcc.gnu.org/PR106162" class="uri">https://gcc.gnu.org/PR106162</a>, <a href="https://gcc.gnu.org/pipermail/gcc-patches/2022-September/601708.html" class="uri">https://gcc.gnu.org/pipermail/gcc-patches/2022-September/601708.html</a></li>
<li>openipmi: <a href="https://sourceforge.net/p/openipmi/patches/37/" class="uri">https://sourceforge.net/p/openipmi/patches/37/</a></li>
<li>avldrums.lv2: <a href="https://github.com/x42/avldrums.lv2/pull/22" class="uri">https://github.com/x42/avldrums.lv2/pull/22</a></li>
<li>exifprobe: <a href="https://github.com/hfiguiere/exifprobe/pull/21" class="uri">https://github.com/hfiguiere/exifprobe/pull/21</a></li>
<li>x264: <a href="https://code.videolan.org/videolan/x264/-/merge_requests/114" class="uri">https://code.videolan.org/videolan/x264/-/merge_requests/114</a></li>
<li>ispell: will be fixed in 3.4.06. Could not find web UI for the repository.</li>
<li>mingw-w64: <a href="https://sourceforge.net/p/mingw-w64/mingw-w64/ci/e1b0c1420bbd52ef505c71737c57393ac1397b0a/" class="uri">https://sourceforge.net/p/mingw-w64/mingw-w64/ci/e1b0c1420bbd52ef505c71737c57393ac1397b0a/</a></li>
<li>notion: <a href="https://github.com/raboof/notion/pull/346" class="uri">https://github.com/raboof/notion/pull/346</a></li>
<li>jhead: <a href="https://github.com/Matthias-Wandel/jhead/pull/67" class="uri">https://github.com/Matthias-Wandel/jhead/pull/67</a></li>
<li>ldns: <a href="https://github.com/NLnetLabs/ldns/pull/192" class="uri">https://github.com/NLnetLabs/ldns/pull/192</a></li>
<li>bitlbee-facebook: <a href="https://github.com/bitlbee/bitlbee-facebook/pull/217" class="uri">https://github.com/bitlbee/bitlbee-facebook/pull/217</a></li>
<li>blahtexml: <a href="https://github.com/gvanas/blahtexml/pull/9" class="uri">https://github.com/gvanas/blahtexml/pull/9</a></li>
</ul>
<p>Nothing complicated. Just a few missing dependencies.</p>
<p>Give it a try!</p>

<div class="info">
    Posted on June 21, 2022 by trofi. <a href="mailto:slyich@gmail.com">Email</a>,
    <a href="https://github.com/trofi/trofi.github.io.gen">pull requests or comments</a>
    are welcome!
</div>
]]></description>
    <pubDate>Tue, 21 Jun 2022 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/249-an-update-on-make-shuffle.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>

    </channel>
</rss>
