<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:dc="http://purl.org/dc/elements/1.1/">
    <channel>
        <title>trofi - All posts</title>
        <link>http://trofi.github.io</link>
        <description><![CDATA[trofi's blog]]></description>
        <atom:link href="http://trofi.github.io/feed/rss.xml" rel="self"
                   type="application/rss+xml" />
        <lastBuildDate>Sat, 30 Dec 2023 00:00:00 UT</lastBuildDate>
        <item>
    <title>listing all nixpkgs packages</title>
    <link>http://trofi.github.io/posts/309-listing-all-nixpkgs-packages.html</link>
    <description><![CDATA[<h2 id="intro">Intro</h2>
<p><code>nixpkgs</code> provides <a href="https://repology.org/repository/nix_unstable">a lot of packages</a>.
Today <code>repology.org</code> says it’s <code>106937</code> packages for <code>89083</code> projects.</p>
<p>As I understand it <code>repology</code>’s <code>project</code> means upstream project name.
If we pick <code>python:networkx</code> <code>repology</code> name then <code>nixpkgs</code> provides a
few versions of <code>networkx</code> for each python version:</p>
<pre><code>$ nix-env -qa | grep networkx
python3.10-networkx-3.1
python3.11-networkx-3.1</code></pre>
<p>But what if I tell you the above number is only a minor subset of package
definitions hiding in <code>nixpkgs</code>? You could easily access packages like
<code>python3.12-networkx-3.1</code>, <code>python3.10-networkx-3.1</code> or even
<code>python3.11-networkx-3.1-riscv64-unknown-linux-gnu</code>. None of them are
listed on <code>repology</code>.</p>
<p>Abundance of various package flavours like this one is a well-known fact
or a seasoned user of <code>nixpkgs</code>.</p>
<p>A few days ago I attempted to update <code>autoconf</code> from <code>2.71</code> to <code>2.72</code>
version. It’s supposed to be a minor maintenance release without
many breaking changes. To make sure I don’t break too much I attempted
to validate that all the packages that somehow use <code>autoconf</code> are still
building correctly.</p>
<h2 id="on-attributes-and-package-names">On attributes and package names</h2>
<p><code>NixOS</code> and <code>nixpkgs</code> users almost never deal with exact package names:
resolving a package name to package definition is slow and ambiguous.</p>
<p>Instead <code>nixpkgs</code> encourages users to use “attribute names” using
<code>nix</code>-language level constructs.</p>
<p>For example <code>python3.11-networkx-3.1</code> would have a name of
<code>python3Packages.networkx</code> on my system. The same package also has quite
a few aliases:</p>
<ul>
<li><code>python311Packages.networkx</code></li>
<li><code>python3.pkgs.networkx</code></li>
<li><code>python311.pkgs.networkx</code></li>
</ul>
<p>Each of them evaluates to the same package definition. An example
<code>nix repl</code> session to make sure it’s still true:</p>
<pre><code>$ nix repl -f '&lt;nixpkgs&gt;'

nix-repl&gt; python3Packages.networkx
«derivation /nix/store/659allxmdwqxr4zmg03z8wqyizlsdmgh-python3.11-networkx-3.1.drv»

nix-repl&gt; python311Packages.networkx
«derivation /nix/store/659allxmdwqxr4zmg03z8wqyizlsdmgh-python3.11-networkx-3.1.drv»

nix-repl&gt; python311.pkgs.networkx
«derivation /nix/store/659allxmdwqxr4zmg03z8wqyizlsdmgh-python3.11-networkx-3.1.drv</code></pre>
<p>The <code>.drv</code> files have identical hash part which means all the names are
equivalent when used as is.</p>
<p>Simpler examples of attributes are <code>re2c</code> and <code>gnugrep</code>. More complex
ones are <code>python3Packages.ninja</code>, <code>linuxPackages_latest.kernel.configfile</code> and
<code>pkgsCross.riscv64.re2c</code>.</p>
<p>Thus to answer a question of what packages should I test after
<code>autoconf</code> upgrade I would prefer to get attribute names instead of
package names.</p>
<h2 id="poor-mans-reverse-dependency-lookup">Poor man’s reverse dependency lookup</h2>
<p>I routinely do package updates that touch many packages indirectly.
To get a list of impacted packages <code>nixpkgs</code> provides a
<a href="https://github.com/NixOS/nixpkgs/blob/master/maintainers/scripts/rebuild-amount.sh"><code>maintainers/scripts/rebuild-amount.sh</code> script</a>.</p>
<p>It instantiates all the known to hydra attributes into <code>.drv</code> files and
checks changed hashes before and after the change. This diff is our
impact. Script’s typical output looks like that:</p>
<pre><code>$ time ./maintainers/scripts/rebuild-amount.sh --print HEAD^
Estimating rebuild amount by counting changed Hydra jobs (parallel=unset).
     32 x86_64-darwin
     63 x86_64-linux

          asciidoc-full-with-plugins.x86_64-darwin  dist=/nix/store/...-asciidoc-full-with-plugins-10.2.0-dist;/nix/store/...-asciidoc-full-with-plugins-10.2.0
          asciidoc-full-with-plugins.x86_64-linux   dist=/nix/store/...-asciidoc-full-with-plugins-10.2.0-dist;/nix/store/...-asciidoc-full-with-plugins-10.2.0
          asciidoc-full.x86_64-darwin               dist=/nix/store/...-asciidoc-full-10.2.0-dist;/nix/store/...-asciidoc-full-10.2.0
          asciidoc-full.x86_64-linux                dist=/nix/store/...-asciidoc-full-10.2.0-dist;/nix/store/...-asciidoc-full-10.2.0
          auto-multiple-choice.x86_64-darwin        /nix/store/...-auto-multiple-choice-1.6.0
          auto-multiple-choice.x86_64-linux         /nix/store/...-auto-multiple-choice-1.6.0
          bicgl.x86_64-darwin                       /nix/store/...-bicgl-unstable-2018-04-06
          bicgl.x86_64-linux                        /nix/store/...-bicgl-unstable-2018-04-06
          bicpl.x86_64-darwin                       /nix/store/...-bicpl-unstable-2020-10-15
          bicpl.x86_64-linux                        /nix/store/...-bicpl-unstable-2020-10-15
          cantor.x86_64-linux                       /nix/store/...-cantor-23.08.4
          clevis.x86_64-linux                       man=/nix/store/...-clevis-19-man;/nix/store/...-clevis-19
          conglomerate.x86_64-darwin                /nix/store/...-conglomerate-unstable-2017-09-10
          ...
          netpbm.x86_64-darwin                                                                     bin=/nix/store/...-netpbm-11.4.4-bin;dev=/nix/store/...-netpbm-11.4.4-dev;/nix/store/...-netpbm-11.4.4
          netpbm.x86_64-linux                                                                      bin=/nix/store/...-netpbm-11.4.4-bin;dev=/nix/store/...-netpbm-11.4.4-dev;/nix/store/...-netpbm-11.4.4

          ...
...
real    6m38,854s
user    6m19,604s
sys     0m17,102s</code></pre>
<p>Here I changed <code>netpbm</code> package in <code>HEAD</code> commit and that caused the
rebuild of <code>63</code> <code>x86_64-linux</code> packages (and <code>32</code> <code>x86_64-darwin</code> ones).
In this case rebuilding all <code>63</code> of them is not a big deal.</p>
<p>But even here some of the packages are probably not worth testing.
<code>netpbm</code> has something to do with image formats and <code>cleavis</code> is about
the encryption. I would guess <code>cleavis</code> would not be impacted by the
update at all.</p>
<p>It would be nice to find all <strong>direct</strong> users of <code>netpbm</code> instead and
rebuild those.</p>
<p>The very first topic I created on <code>NixOS discourse</code> was about
<a href="https://discourse.nixos.org/t/how-do-you-find-reverse-dependencies/15057">reverse dependencies lookup</a>.</p>
<p>I was a bit surprised there was no standard tool like that and wrote a
hack to do it:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># use as:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co">#    import ./arevdeps.nix linuxHeaders pkgs lib</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="va">revdepAttr</span><span class="op">:</span> <span class="va">pkgs</span><span class="op">:</span> <span class="va">lib</span><span class="op">:</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="va">isDrv</span> <span class="op">=</span> <span class="va">v</span><span class="op">:</span> <span class="op">(</span><span class="bu">builtins</span>.tryEval v<span class="op">)</span>.success <span class="op">&amp;&amp;</span> lib.isDerivation v<span class="op">;</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># skip broken and unsupported packages on this system in a very crude way:</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">safeReadFile</span> <span class="op">=</span> <span class="va">df</span><span class="op">:</span> <span class="kw">let</span> <span class="va">c</span> <span class="op">=</span> <span class="bu">builtins</span>.tryEval <span class="op">(</span><span class="bu">builtins</span>.readFile df<span class="op">);</span> <span class="kw">in</span> <span class="kw">if</span> c.success <span class="kw">then</span> c.value <span class="kw">else</span> <span class="st">&quot;&quot;</span><span class="op">;</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">fastHasEntry</span> <span class="op">=</span> <span class="va">i</span><span class="op">:</span> <span class="va">s</span><span class="op">:</span> s <span class="op">!</span>= <span class="bu">builtins</span>.replaceStrings <span class="op">[</span>i<span class="op">]</span> <span class="op">[</span><span class="st">&quot;&lt;FOUND-HERE&gt;&quot;</span><span class="op">]</span> s<span class="op">;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">sInDrv</span> <span class="op">=</span> <span class="va">s</span><span class="op">:</span> <span class="va">d</span><span class="op">:</span> fastHasEntry s <span class="op">(</span>safeReadFile d.drvPath<span class="op">);</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="va">rdepInDrv</span> <span class="op">=</span> <span class="va">rdep</span><span class="op">:</span> <span class="va">d</span><span class="op">:</span> <span class="bu">builtins</span>.any <span class="op">(</span><span class="va">s</span><span class="op">:</span> sInDrv s d<span class="op">)</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                                      <span class="op">(</span><span class="bu">builtins</span>.<span class="bu">map</span> <span class="op">(</span><span class="va">o</span><span class="op">:</span> rdep.$<span class="op">{</span><span class="va">o</span><span class="op">}</span>.outPath<span class="op">)</span> rdep.outputs<span class="op">);</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="va">matchedPackages</span> <span class="op">=</span> lib.filterAttrs <span class="op">(</span><span class="va">n</span><span class="op">:</span> <span class="va">d</span><span class="op">:</span> isDrv d <span class="op">&amp;&amp;</span> rdepInDrv revdepAttr d<span class="op">)</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>                                      pkgs<span class="op">;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> <span class="bu">builtins</span>.attrNames matchedPackages</span></code></pre></div>
<p>It’s a bit wordy (not much <code>nix</code> experience by then) but it’s idea is
simple: find references to a searched package via it’s <code>.drv</code> path by
looking at <code>.drv</code> files created from attributes in <code>&lt;nixpkgs&gt;</code> object.
Let’s try to look up <code>netpbm</code> against it:</p>
<pre><code>nix-repl&gt; import ./arevdeps.nix netpbm pkgs lib
[ &quot;auto-multiple-choice&quot; &quot;bicpl&quot; &quot;fbcat&quot; &quot;foomatic-db-ppds&quot; &quot;fped&quot;
  &quot;img2pdf&quot; &quot;latex2html&quot; &quot;lilypond&quot; &quot;lilypond-unstable&quot; &quot;mup&quot; &quot;netpbm&quot;
  &quot;pcb&quot; &quot;pnglatex&quot; &quot;sng&quot; &quot;xplanet&quot; &quot;yad&quot; ]</code></pre>
<p>Only 16 packages!</p>
<p>The major caveat is that the hack does not try to descend from the top
level down to other attributes like <code>python3Packages.*</code> or
<code>haskellPackages.*</code>.</p>
<p>In theory you could direct the hack to specific attributes and expand
the output:</p>
<pre><code>nix-repl&gt; import ./arevdeps.nix netpbm pkgs.python3Packages lib
[ &quot;img2pdf&quot; &quot;pnglatex&quot; ]</code></pre>
<p>In practice it’s not very convenient and I never did it. The command
already takes a while to run and running it multiple times is no fun.</p>
<p>I decided to extend initial script to handle nested attributes.</p>
<h2 id="naive-attempt-to-extend-the-hack">Naive attempt to extend the hack</h2>
<p>In theory it’s one small extension: add a tiny amount of code to descend
into child attributes and you are done.</p>
<p>Sounds good, did not work.</p>
<p>The result started crashing on various syntax errors in various
<code>nixpkgs</code> files. When I worked error around <code>nix</code> ate <code>100GB</code> of <code>RAM</code>
and crashed without producing the result.</p>
<p>I’ll spare you the implementation details of a modified script.</p>
<p>Unbounded <code>RAM</code> usage is very unfortunate as the script in theory could
run in constant space. It’s not very simple in practice as <code>nix</code> uses
<a href="https://en.wikipedia.org/wiki/Boehm_garbage_collector"><code>boehm-gc</code></a> to
control it’s heap usage. I’m not sure a single loaded <code>&lt;nixpkgs&gt;</code> tree
allows for any garbage collection of <code>.drv</code> files.</p>
<p>I filed <a href="https://github.com/NixOS/nix/issues/9671" class="uri">https://github.com/NixOS/nix/issues/9671</a> issue to see if there
are any obvious references <code>nix</code> could remove to make garbage collection
more efficient.</p>
<p>But in the shorter term I had to try something else.</p>
<h2 id="a-step-back-just-list-all-the-attributes">A step back: just list all the attributes</h2>
<p>I realized there are multiple problems with my hack and I attempted to
solve a simple problem. I wanted to just list all the available
attributes in <code>&lt;nixpkgs&gt;</code>. Ideally not just those known to <code>hydra</code> CI
builder but the ones hiding in <code>pkgsCross</code> in other places.</p>
<p>Quiz question: how hard is it to get a list of such attributes to
explore?</p>
<p>Getting an attribute list of a single set is trivial via single call of
<code>lib.attrNames</code>:</p>
<pre><code>$ nix repl -f '&lt;nixpkgs&gt;'

nix-repl&gt; lib.take 4 (lib.attrNames pkgs)
[ &quot;AAAAAASomeThingsFailToEvaluate&quot; &quot;AMB-plugins&quot; &quot;ArchiSteamFarm&quot; &quot;AusweisApp2&quot; ]

nix-repl&gt; lib.length (lib.attrNames pkgs)
20059</code></pre>
<p>The problem is that some of the attributes are neither derivations not
attribute sets:</p>
<pre><code>nix-repl&gt; pathsFromGraph
/nix/store/jp811zl7njhg1g59x95dgqs4rddgr7xz-source/pkgs/build-support/kernel/paths-from-graph.pl</code></pre>
<p>Luckily it’s easy to introspect value type via predefined predicates:</p>
<pre><code>nix-repl&gt; lib.isPath pkgs.pathsFromGraph
true

nix-repl&gt; lib.isDerivation re2c
true

nix-repl&gt; lib.isAttrs pkgsCross
true</code></pre>
<p>Another problem is that some of attribute values don’t evaluate
successfully. Sometimes intentionally:</p>
<pre><code>nix-repl&gt; pkgs.AAAAAASomeThingsFailToEvaluate
error:
       … while calling the 'throw' builtin

         at /nix/store/jp811zl7njhg1g59x95dgqs4rddgr7xz-source/pkgs/top-level/all-packages.nix:106:36:

          105|   ### Evaluating the entire Nixpkgs naively will fail, make failure fast
          106|   AAAAAASomeThingsFailToEvaluate = throw ''
             |                                    ^
          107|     Please be informed that this pseudo-package is not the only part

       error: Please be informed that this pseudo-package is not the only part
       of Nixpkgs that fails to evaluate. You should not evaluate
       entire Nixpkgs without some special measures to handle failing
       packages, like using pkgs/top-level/release-attrpaths.nix.

nix-repl&gt; pkgs.gccWithoutTargetLibc
error:
       … while evaluating the attribute 'gccWithoutTargetLibc'
        15967|   gccWithoutTargetLibc = assert stdenv.targetPlatform != stdenv.hostPlatform; let
       error: assertion '((stdenv).targetPlatform != (stdenv).hostPlatform)' failed</code></pre>
<p>And sometimes entirely by accident:</p>
<pre><code>nix-repl&gt; pkgsLLVM.clang_6
error:
       … while evaluating the attribute 'clang_6'
       error: attribute 'clangUseLLVM' missing</code></pre>
<p>I just need to filter out all the problematic attributes and leave only
evaluatable ones. <code>nix</code> even provides a <code>builtins.tryEval</code> just for
this case:</p>
<pre><code>nix-repl&gt; builtins.tryEval pkgs.AAAAAASomeThingsFailToEvaluate
{ success = false; value = false; }

nix-repl&gt; builtins.tryEval pkgs.gccWithoutTargetLibc
{ success = false; value = false; }

nix-repl&gt; builtins.tryEval pkgs.gcc
{ success = true; value = «derivation /nix/store/y5vq20420rg2g6h03c8x7sxzjcxphg9w-gcc-wrapper-12.3.0.drv»; }</code></pre>
<p>Sounds easy, right? As always there is a catch:</p>
<pre><code>nix-repl&gt; builtins.tryEval pkgsLLVM.clang_6
error:
       error: attribute 'clangUseLLVM' missing

nix-repl&gt; builtins.tryEval pkgsMusl.adobe-reader
       error: evaluation aborted with the following error message: 'unsupported platform for the pure Linux stdenv'</code></pre>
<p>Not all error types can be caught by <code>builtins.tryEval</code>: only <code>throw</code>
and <code>aasert</code> calls (these are explicitly present in the call) are
catchable. The rest is considered a bug in <code>nix</code> expression and can’t be
caught. I guess it’s the way to signal invalid <code>.nix</code> programs.</p>
<p>Lack of error recovery means that I can’t do attribute filtering like
in a single <code>nix</code> expression! I had 2 options:</p>
<ol type="1">
<li><p>Write an external script that probes for problematic attributes and
somehow skips them.</p></li>
<li><p>Fix all the evaluation errors in <code>nixpkgs</code> to make the naive
filtering work.</p></li>
</ol>
<p><code>[1.]</code> would require use of <code>nix</code> as a library in one form or another.
I was lazy and tried <code>[2.]</code> first. My assumption that it was a small
list of easy to fix errors.</p>
<p>Here is my first version of a simple attribute lister:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Usage example:</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="co"># $ nix-instantiate --eval --strict ~/.config/nixpkgs/lib/all-attrs.nix -I nixpkgs=$PWD</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">nixpkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">config</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">rootAttr</span> <span class="op">?</span> <span class="st">&quot;pkgs&quot;</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">verbose</span> <span class="op">?</span> <span class="dv">1</span> <span class="co"># warn</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="co"># How to pick, resource usage for me as of 2023-12-28:</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a><span class="co"># 1 - 10 seconds, ~2GB of RAM</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 2 - 2 minutes, ~25GB of RAM (unfiltered attrs)</span></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 3 - 5+ minutes, ~70GB+ or RAM Fails on attributes like `pkgsCross.iphone32.ammonite`</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a><span class="co"># anything else: at your risk</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a><span class="op">,</span> <span class="va">maxDepth</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span>:</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>  <span class="co"># simple variables:</span></span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>  <span class="va">lib</span> <span class="op">=</span> nixpkgs.lib<span class="op">;</span></span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>  <span class="co"># logging:</span></span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>  <span class="va">err</span>   <span class="op">=</span> <span class="va">s</span><span class="op">:</span> <span class="va">e</span><span class="op">:</span> lib.trace <span class="st">&quot;ERROR: </span><span class="sc">${</span>s<span class="sc">}</span><span class="st">&quot;</span> e<span class="op">;</span></span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>  <span class="va">warn</span>  <span class="op">=</span> <span class="va">s</span><span class="op">:</span> <span class="va">e</span><span class="op">:</span> <span class="kw">if</span> verbose &gt;= <span class="dv">1</span> <span class="kw">then</span> lib.trace <span class="st">&quot;WARN: </span><span class="sc">${</span>s<span class="sc">}</span><span class="st">&quot;</span> e <span class="kw">else</span> e<span class="op">;</span></span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>  <span class="va">info</span>  <span class="op">=</span> <span class="va">s</span><span class="op">:</span> <span class="va">e</span><span class="op">:</span> <span class="kw">if</span> verbose &gt;= <span class="dv">2</span> <span class="kw">then</span> lib.trace <span class="st">&quot;INFO: </span><span class="sc">${</span>s<span class="sc">}</span><span class="st">&quot;</span> e <span class="kw">else</span> e<span class="op">;</span></span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>  <span class="va">debug</span> <span class="op">=</span> <span class="va">s</span><span class="op">:</span> <span class="va">e</span><span class="op">:</span> <span class="kw">if</span> verbose &gt;= <span class="dv">3</span> <span class="kw">then</span> lib.trace <span class="st">&quot;DEBUG: </span><span class="sc">${</span>s<span class="sc">}</span><span class="st">&quot;</span> e <span class="kw">else</span> e<span class="op">;</span></span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>  <span class="co"># root to start at</span></span>
<span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>  <span class="va">root</span> <span class="op">=</span> lib.attrByPath <span class="op">(</span>lib.splitString <span class="st">&quot;.&quot;</span> rootAttr<span class="op">)</span></span>
<span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a>                        <span class="op">(</span>warn <span class="st">&quot;did not find </span><span class="sc">${</span>rootAttr<span class="sc">}</span><span class="st">&quot;</span> <span class="op">{})</span></span>
<span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>                        nixpkgs<span class="op">;</span></span>
<span id="cb14-33"><a href="#cb14-33" aria-hidden="true" tabindex="-1"></a>  <span class="co"># other helpers:</span></span>
<span id="cb14-34"><a href="#cb14-34" aria-hidden="true" tabindex="-1"></a>  <span class="va">isPrimitive</span> <span class="op">=</span> <span class="va">v</span><span class="op">:</span> lib.isFunction v</span>
<span id="cb14-35"><a href="#cb14-35" aria-hidden="true" tabindex="-1"></a>                <span class="op">||</span> lib.isString v</span>
<span id="cb14-36"><a href="#cb14-36" aria-hidden="true" tabindex="-1"></a>                <span class="op">||</span> lib.isBool v</span>
<span id="cb14-37"><a href="#cb14-37" aria-hidden="true" tabindex="-1"></a>                <span class="op">||</span> lib.isList v</span>
<span id="cb14-38"><a href="#cb14-38" aria-hidden="true" tabindex="-1"></a>                <span class="op">||</span> lib.isInt v</span>
<span id="cb14-39"><a href="#cb14-39" aria-hidden="true" tabindex="-1"></a>                <span class="op">||</span> lib.isPath v</span>
<span id="cb14-40"><a href="#cb14-40" aria-hidden="true" tabindex="-1"></a>                <span class="op">||</span> v == <span class="cn">null</span><span class="op">;</span></span>
<span id="cb14-41"><a href="#cb14-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-42"><a href="#cb14-42" aria-hidden="true" tabindex="-1"></a>  <span class="va">go</span> <span class="op">=</span> <span class="va">depth</span><span class="op">:</span> <span class="va">ap</span><span class="op">:</span> <span class="va">v</span><span class="op">:</span></span>
<span id="cb14-43"><a href="#cb14-43" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span></span>
<span id="cb14-44"><a href="#cb14-44" aria-hidden="true" tabindex="-1"></a>      <span class="va">a</span> <span class="op">=</span> lib.showAttrPath ap<span class="op">;</span></span>
<span id="cb14-45"><a href="#cb14-45" aria-hidden="true" tabindex="-1"></a>      <span class="va">e</span> <span class="op">=</span> <span class="bu">builtins</span>.tryEval v<span class="op">;</span></span>
<span id="cb14-46"><a href="#cb14-46" aria-hidden="true" tabindex="-1"></a>      <span class="va">maybe_go_deeper</span> <span class="op">=</span></span>
<span id="cb14-47"><a href="#cb14-47" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> depth &gt;= maxDepth</span>
<span id="cb14-48"><a href="#cb14-48" aria-hidden="true" tabindex="-1"></a>        <span class="kw">then</span> info <span class="st">&quot;too deep (depth=</span><span class="sc">${</span><span class="bu">toString</span> depth<span class="sc">}</span><span class="st">) nesting of a=</span><span class="sc">${</span>a<span class="sc">}</span><span class="st">, stop&quot;</span> <span class="op">[]</span></span>
<span id="cb14-49"><a href="#cb14-49" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span> <span class="bu">map</span> <span class="op">(</span><span class="va">nv</span><span class="op">:</span> go <span class="op">(</span>depth <span class="op">+</span> <span class="dv">1</span><span class="op">)</span> <span class="op">(</span>ap <span class="op">++</span> <span class="op">[</span>nv.name<span class="op">])</span> nv.value<span class="op">)</span></span>
<span id="cb14-50"><a href="#cb14-50" aria-hidden="true" tabindex="-1"></a>                 <span class="op">(</span>lib.attrsToList v<span class="op">);</span></span>
<span id="cb14-51"><a href="#cb14-51" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span> debug <span class="st">&quot;inspecting </span><span class="sc">${</span>a<span class="sc">}</span><span class="st">&quot;</span> <span class="op">(</span></span>
<span id="cb14-52"><a href="#cb14-52" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> <span class="op">!</span>e.success <span class="kw">then</span> info <span class="st">&quot;</span><span class="sc">${</span>a<span class="sc">}</span><span class="st"> fails to evaluate&quot;</span> <span class="op">[]</span></span>
<span id="cb14-53"><a href="#cb14-53" aria-hidden="true" tabindex="-1"></a>    <span class="kw">else</span> <span class="kw">if</span> lib.isDerivation v</span>
<span id="cb14-54"><a href="#cb14-54" aria-hidden="true" tabindex="-1"></a>    <span class="kw">then</span> <span class="op">[</span>a<span class="op">]</span></span>
<span id="cb14-55"><a href="#cb14-55" aria-hidden="true" tabindex="-1"></a>    <span class="kw">else</span> <span class="kw">if</span> lib.isAttrs v <span class="kw">then</span> maybe_go_deeper</span>
<span id="cb14-56"><a href="#cb14-56" aria-hidden="true" tabindex="-1"></a>    <span class="kw">else</span> <span class="kw">if</span> isPrimitive v <span class="kw">then</span> <span class="op">[]</span></span>
<span id="cb14-57"><a href="#cb14-57" aria-hidden="true" tabindex="-1"></a>    <span class="co"># should not get here</span></span>
<span id="cb14-58"><a href="#cb14-58" aria-hidden="true" tabindex="-1"></a>    <span class="kw">else</span> warn <span class="st">&quot;unhandled type of </span><span class="sc">${</span>a<span class="sc">}</span><span class="st">&quot;</span> <span class="op">[]);</span></span>
<span id="cb14-59"><a href="#cb14-59" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> lib.flatten <span class="op">(</span>go <span class="dv">0</span> <span class="op">[]</span> root<span class="op">)</span></span></code></pre></div>
<p>It’s more than a page of code. It explores at most <code>maxDepth</code> attributes
deep.</p>
<p>Usage example:</p>
<pre><code>$ time nix-instantiate --eval --strict ~/.config/nixpkgs/lib/all-attrs.nix -I nixpkgs=$PWD --arg maxDepth 1
...
[ &quot;AMB-plugins&quot; &quot;ArchiSteamFarm&quot; ... &quot;zulu8&quot; &quot;zuo&quot; &quot;zwave-js-server&quot;
  &quot;zx&quot; &quot;zxcvbn-c&quot; &quot;zxfer&quot; &quot;zxing&quot; &quot;zxing-cpp&quot; &quot;zxpy&quot; &quot;zxtune&quot; &quot;zydis&quot;
  &quot;zyn-fusion&quot; &quot;zynaddsubfx&quot; &quot;zynaddsubfx-fltk&quot; &quot;zynaddsubfx-ntk&quot; &quot;zz&quot;
  &quot;zziplib&quot; &quot;zzuf&quot; ]

real    0m6,587s
user    0m5,963s
sys     0m0,608s</code></pre>
<p>Yay! It works! Note: this is just one depth level of attributes, like
<code>re2c</code>. It does not contain packages like <code>python3Packages.ninja</code>. The
run takes 2GB and 6 seconds to complete.</p>
<p>If we want one level deeper we can specify <code>--maxDepth 2</code>:</p>
<pre><code>$ time nix-instantiate --eval --strict ~/.config/nixpkgs/lib/all-attrs.nix -I nixpkgs=$PWD --arg maxDepth 2
...
[ &quot;AMB-plugins&quot; &quot;ArchiSteamFarm&quot; &quot;AusweisApp2&quot; &quot;BeatSaberModManager&quot;
  ...
  &quot;CuboCore.coreaction&quot; &quot;CuboCore.corearchiver&quot; &quot;CuboCore.corefm&quot;
  &quot;CuboCore.coregarage&quot;
  ...
  &quot;__splicedPackages.AMB-plugins&quot; &quot;__splicedPackages.ArchiSteamFarm&quot;
  ...
  &quot;pkgsLLVM.aaaaxy&quot; &quot;pkgsLLVM.aacgain&quot;
  ...
  &quot;pkgsHostTarget.zig_0_11&quot; &quot;pkgsHostTarget.zig_0_9&quot;
  ...
  &quot;zyn-fusion&quot; &quot;zynaddsubfx&quot; &quot;zynaddsubfx-fltk&quot; &quot;zynaddsubfx-ntk&quot; &quot;zz&quot;
  &quot;zziplib&quot; &quot;zzuf&quot; ]

real    1m4,845s
user    0m58,368s
sys     0m5,910s</code></pre>
<p>Second level also works! This time it took 25GB and a bit more than 1
minute to print the result. There are a few issues with it: some
attribute trees like <code>__splicedPackages</code> and <code>pkgsHostTarget</code> are
redundant. We already get attributes like <code>python3Packages.ninja</code>.
But are not quite at <code>pkgsCross.riscv64.re2c</code> yet.</p>
<h2 id="running-the-naive-lister-on-larger-depths">Running the naive lister on larger depths</h2>
<p>I ran the naive script above and derived the following fixes:</p>
<ul>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277117">PR 277117</a>:
<code>netbsd.libcurses</code> constructed invalid type of <code>NIX_CFLAGS_COMPILE</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/276984">PR 276984</a>:
<code>beam.packages.erlangR23</code> referred to non-existent <code>erlang_23</code>
attribute.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/276985">PR 276985</a>:
<code>coq-kernel.launcher</code> used an alias instead of package name.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/276995">PR 276995</a>:
<code>haskell.packages.ghc810.mod</code> used non-existent <code>mod_0_1_2_2</code> attribute
in it’s definition.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/276986">PR 276986</a>:
<code>dockerTools.tests.docker-tools</code> used an alias instead of actual name.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277211">PR 277211</a>:
<code>nixosTests.nixops</code> had an unsatisfied function argument.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277355">PR 277355</a>:
<code>stdenv</code> used <code>abort</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277364">PR 277364</a>:
<code>python312Packages.array-record</code> accessed non-existent attribute.</li>
</ul>
<p>Getting 8 bugs just like that impressed me. I optimized lister a bit to
be able to descend into larger attribute depths and found a few more
bugs.</p>
<p>If you did not notice my lister script never attempted to explore any
attributes <strong>within</strong> derivations. If we pick a <code>re2c</code> example the
script would never get to <code>re2c.passthru.updateScript</code>.</p>
<p>And <code>passthru</code> are probably least tested attributes as they rarely used
by <code>hydra</code> CI. The <code>passthry.tests</code> in particular are <strong>not</strong> used by
<code>hydra</code> but are used by <code>ofborg</code> <code>GitHub</code> actions. And the caveat of
<code>ofborg</code> is that it rarely shows test failures as a red cross. Usually
it renders a failure as inconclusive gray. The assumption is that the
reviewer look at the underlying failure and makes a decision.</p>
<p>Thus I added a knob to descend into attributes of derivations
<a href="https://github.com/trofi/nixpkgs-overlays/commit/50ed200dc06ee1b6ec8ad8ca879a9948cc85135e">this way</a>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/lib/all-attrs.nix</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/lib/all-attrs.nix</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -35,6 +35,11 @@</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a> , maxDepth</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a> , ignoreCross ? true</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="va">+# Whether to validate every attribute within derivations themselves.</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="va">+# Most intereting fields are `passthru.tests`, but sometimes there are</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="va">+# very unusual bugs lurking. Risky but very fun!</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="va">+, ignoreDrvAttrs ? true</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a> }:</span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a> let</span>
<span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -76,11 +81,9 @@ let</span></span>
<span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>     in debug &quot;inspecting ${a}&quot; (</span>
<span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a>     if !e.success then info &quot;${a} fails to evaluate&quot; []</span>
<span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a>     else if lib.isDerivation v</span>
<span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a><span class="st">-    # TODO: add an option to traverse into derivations as well.</span></span>
<span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a><span class="st">-    # Mainly to test validity of `passthru.tests`, `metadata` and</span></span>
<span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a><span class="st">-    # similar.</span></span>
<span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a><span class="st">-    then [a] # TODO: &quot;++ maybe_go_deeper&quot;</span></span>
<span id="cb17-23"><a href="#cb17-23" aria-hidden="true" tabindex="-1"></a><span class="va">+    then [a] ++ lib.optionals (!ignoreDrvAttrs) maybe_go_deeper</span></span>
<span id="cb17-24"><a href="#cb17-24" aria-hidden="true" tabindex="-1"></a>     # Skip &quot;foo = self;&quot; attributes like `pythonPackages.pythonPackages`</span>
<span id="cb17-25"><a href="#cb17-25" aria-hidden="true" tabindex="-1"></a><span class="va">+    # TODO: might skip too much.</span></span>
<span id="cb17-26"><a href="#cb17-26" aria-hidden="true" tabindex="-1"></a>     else if lib.isAttrs v &amp;&amp; depth &gt; 0 &amp;&amp; lib.hasAttr (lib.last ap) v then info &quot;${a} is a repeated attribute, skipping&quot; []</span>
<span id="cb17-27"><a href="#cb17-27" aria-hidden="true" tabindex="-1"></a>     else if lib.isAttrs v then maybe_go_deeper</span>
<span id="cb17-28"><a href="#cb17-28" aria-hidden="true" tabindex="-1"></a>     else if isPrimitive v then []</span></code></pre></div>
<p>I also had to add a few ignored paths like <code>nixosTests</code> as they require
around <code>1GB</code> of extra <code>RAM</code> per test(!) and I had to skip <code>pkgsCross</code>
as it derives too many attributes for (still!) naive script to handle.</p>
<p>But even with such a limited lister I managed to get to these bugs:</p>
<ul>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277399">PR 277399</a>:
<code>bazel-watcher.bazel.tests</code> had a <code>optionalSttrs</code> typo instead of
<code>optionalAttrs</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277400">PR 277400</a>:
<code>bitcoind-knots</code> referred to non-existent test.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277402">PR 277402</a>:
<code>cargo</code> tried to pull tests for a package that does not define it.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277404">PR 277404)</a>:
<code>corosync</code> did not specify a test input argument that it used.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277408">PR 277408</a>:
<code>lua-wrapper</code> uses non-existent attributes to define paths.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277420">PR 277420</a>:
<code>displaylink</code> referred to non-existent test.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277434">PR 277434</a>:
<code>gnupg22</code> incorrectly refers to the test suite.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277435">PR 277435</a>:
<code>pisocsope.rules</code> looked <code>writeTextDir</code> in <code>lib</code> instead of <code>pkgs</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277473">PR 277473</a>:
<code>guacamole-client</code> was referring to deleted test.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277474">PR 277474</a>:
<code>mutmut</code> used <code>testers</code> attribute without use.
= <a href="https://github.com/NixOS/nixpkgs/pull/277494">PR 277494</a>:
<code>buildFHSEnv</code> did not fully handle <code>multiPaths = null</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277512">PR 277512</a>:
<code>owncast</code> referred to non-existent test.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277517">PR 277517</a>:
<code>python3Packages.pypaBuildHook.tests</code> test referred non-existent <code>.nix</code>
file.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277543">PR 277543</a>:
<code>pythonInterpreters.pypy39_prebuilt</code> referred to deleted <code>pypy38</code>
attribute, not <code>pypy39</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277580">PR 277580</a>:
<code>tigervnc.tests</code> referred to non-existent test.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277581">PR 277581</a>:
<code>wezterm.tests</code> referred to commented out tests.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277590">PR 277590</a>:
<code>devpod.tests</code> passed incorrect parameter to a test function.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277593">PR 277593</a>:
<code>fakeroot.tests</code> passed incorrect parameter to a test function.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277595">PR 277595</a>:
<code>findup.tests</code> passed incorrect parameter to a test function.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277600">PR 277600</a>:
<code>jellyfin-ffmpeg.tests</code> is missing <code>pkg-config</code> annotation.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277617">PR 277617</a>:
<code>build-support/go</code> code constructed inaccessible <code>vendorSha256</code>
attribute.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277715">PR 277715</a>:
<code>octoprint</code> referred to non-existent attribute in <code>tests</code>.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277741">PR 277741</a>:
<code>pypy2Packages.attrs</code> refers non-existent <code>.nix</code> file.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277751">PR 277751</a>:
<code>python3Packages.openllm</code>: fix <code>passthru</code> dependency references and
fix variable shadowing.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277777">PR 277777</a>:
<code>python3Packages.openllm-client</code>: fix <code>passthru</code> dependency references.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277788">PR 277788</a>:
<code>python3Packages.openllm-core</code>: fix <code>passthru</code> dependency references.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277880">PR 277880</a>:
<code>valhalla</code> was missing <code>pkgConfigModules</code> definition.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277899">PR 277899</a>:
<code>zammad.src.meta</code> failed to evaluate due to incorrect position
assumption: no metadata attributes were defined in the <code>.nix</code> files.</li>
<li><a href="https://github.com/NixOS/nixpkgs/pull/277973">PR 277973</a>:
<code>ruff.tests</code> referred <code>ruff-lsp</code> alias instead of direct name.</li>
</ul>
<p>Note: It’s not the full list of required fixes. For more complex cases I
filed a few bugs to get maintainers’ help:</p>
<ul>
<li><a href="https://github.com/NixOS/nixpkgs/issues/277285">Issue 277285</a>:
<code>pkgsStatic.php</code> enters infinite loop and exhausts all available
memory.</li>
<li><a href="https://github.com/NixOS/nixpkgs/issues/277628">Issue 277628</a>:
<code>godot3-mono.nugetSource.meta</code> detects infinite recursion on
evaluation.</li>
<li><a href="https://github.com/NixOS/nixpkgs/issues/277698">Issue 277698</a>:
<code>ocamlPackages.janeStreet_0_15</code> has unsatisfied attributes.</li>
</ul>
<h2 id="did-i-get-the-list-package-for-autoconf">Did I get the list package for <code>autoconf</code>?</h2>
<p>Sort of: I managed to write the hack to get a list of packages using
<code>autoconf</code> in a few layers deep below top level. It’s good enough for
testing close to exhaustive.</p>
<p>But I did not get exhaustive at all. There are two main problems still:</p>
<ol type="1">
<li><p>The attribute sets are infinite in <code>nixpkgs</code>. An example a bit silly
but still valid attribute is:</p>
<pre><code>nix-repl&gt; pkgs.pkgs.pkgs.pkgsCross.riscv64.pkgsMusl.pkgsCross.riscv64.pythonPackages.pythonPackages.pythonPackages.ninja
«derivation /nix/store/4vnprl12q706s3ilb1g1c2v4bf9pjpc9-ninja-1.11.1.drv»`</code></pre>
<p><code>nix</code> the language does not provide the mechanism to compare
references to shortcut things like <code>pythonPackages.pythonPackages</code>
And each scope has those self-referential package structures.</p></li>
<li><p>Even if the attribute set was finite in <code>&lt;nixpkgs&gt;</code> the mere act of
listing them takes 100s of GB. It looks like it’s because <code>nix</code> does
not collect already evaluated garbage expressions that still have
references from other parts of the tree. The packages loops in
<code>nixpkgs</code> from <code>[1.]</code> do not help in that at all.</p></li>
</ol>
<p>I am still hopeful that I can get something decent soon. I can
workaround <code>[2.]</code> <code>RAM</code> exhaustion by declaring defeat on a single
<code>.nix</code> script and run it in incremental mode. Say, to process 100
packages at a time to avoid infinite memory growth.</p>
<p>Another option would be to write a separate tool using <code>nix</code> as a
library to parse and evaluate <code>.nix</code> code that does this job
specifically. But I’d prefer to try to fix <code>nix</code> <code>GC</code> behaviour first. I
think it’s tractable.</p>
<h2 id="parting-words">Parting words</h2>
<p>Traversing package attribute set in <code>nixpkgs</code> is surprisingly
challenging. I think it is fixable and should be fixed (at least for
non-<code>pkgsCross.*</code> part of the tree). Fetching metadata about the
packages is a frequent operation for many types of tree-wide changes.</p>
<p>I had a lot of fun writing debuggable <code>.nix</code> code to list available
<code>nixpkgs</code> attributes. So far my result is hiding at
<a href="https://github.com/trofi/nixpkgs-overlays/blob/main/lib/all-attrs.nix" class="uri">https://github.com/trofi/nixpkgs-overlays/blob/main/lib/all-attrs.nix</a>.</p>
<p>So far I managed to get to 4 levels of attribute depth using <code>60GB</code> of
<code>RAM</code>. This uncovered at least 27 bugs.</p>
<p>Some of the bugs are very scary:</p>
<ul>
<li><code>cargo</code> did not have tests: <a href="https://github.com/NixOS/nixpkgs/pull/277402" class="uri">https://github.com/NixOS/nixpkgs/pull/277402</a></li>
<li><code>lua-wrapper</code> did not expose correct paths: <a href="https://github.com/NixOS/nixpkgs/pull/277408" class="uri">https://github.com/NixOS/nixpkgs/pull/277408</a></li>
</ul>
<p><code>builtins.tryEval</code> does not catch all the failure types in attribute
evaluation: <code>throw</code> / <code>assert</code> are fine, but reference to non-existent
attribute (or <code>assert</code>) are not.</p>
<p><code>pkgs.nixosTests</code> attribute set is very slow and RAM hungry to evaluate:
<a href="https://github.com/NixOS/nix/issues/9671" class="uri">https://github.com/NixOS/nix/issues/9671</a></p>
<p>You can also fix a few <code>nixpkgs</code> bugs! Just run <code>all-attrs.nix</code> as:</p>
<pre><code>$ nix-instantiate --eval --strict ./all-attrs.nix \
    -I nixpkgs=~/path/to/nicpkgs \
    --arg maxDepth 2 --arg verbose 3 --arg ignoreDrvAttrs false</code></pre>
<p>And see what you get.</p>
<p>Next steps I’d like to take at some future point:
- batch package listing and package instantiation in smaller batches to
get RAM usage down to a few <code>GB</code>s.
- explore <code>nix</code> and garbage collection mechanisms to make it friendlier
to large evaluations like <code>all-attrs.nix</code></p>
<p>Have fun!</p>]]></description>
    <pubDate>Sat, 30 Dec 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/309-listing-all-nixpkgs-packages.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>a breakage example in C variadic function</title>
    <link>http://trofi.github.io/posts/308-a-breakage-example-in-c-variadic-function.html</link>
    <description><![CDATA[<h2 id="intro">Intro</h2>
<p>This post is about <code>C</code> functions with ellipsis (<code>...</code>) in their
signatures. The most famous example of such is probably <code>printf()</code>:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> printf<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>format<span class="op">,</span> <span class="op">...);</span></span></code></pre></div>
<p>If you ever tried to use it you probably know that using wrong types
that don’t match format arguments might crash your program. A simple
faulty example could be:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%s</span><span class="st">&quot;</span><span class="op">,</span> <span class="dv">42</span><span class="op">);</span> <span class="co">// this will crash</span></span></code></pre></div>
<p>Luckily <code>gcc</code> and <code>clang</code> do have <code>-Wformat</code> warning that complains
about the mismatch between expected types by a format string and
actually passed types:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat simple.c</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%s</span><span class="st">&quot;</span><span class="op">,</span> <span class="dv">42</span><span class="op">);</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ gcc -Wformat -c simple.c

simple.c: In function 'main':
simple.c:5:14: warning: format '%s' expects argument of type 'char *', but argument 2 has type 'int' [-Wformat=]
    5 |     printf(&quot;%s&quot;, 42);
      |             ~^   ~~
      |              |   |
      |              |   int
      |              char *
      |             %d</code></pre>
<p>Many distributions turn these warnings into errors by default.</p>
<h2 id="argument-count">Argument count</h2>
<p>An ellipsis (<code>...</code>) means that the function accepts unknown count and
unknown type of parameters. There has to be a way to somehow signal
actual argument list in ellipsis. As <code>&lt;stdarg.h&gt;</code> does not provide a
standard way to do it code author has to come up with their own scheme
to solve the problem.</p>
<p>A few examples come to mind:</p>
<ul>
<li><code>int printf(const char *format, ...)</code> uses <code>format</code> parameter to pass
the argument count by interpreting the format string.</li>
<li><code>int open(const char *pathname, int flags, mode_t mode)</code> uses <code>flags</code>
to distinguish 3-argument form from 2-argument
<code>int open(const char *pathname, int flags)</code>.</li>
<li><code>glib</code>’s <code>gchar* g_strconcat (const gchar* string1, ...)</code> consumes
parameters until <code>NULL</code> parameter is encountered.</li>
</ul>
<p>Each of the examples above implements a different scheme.</p>
<p><code>g_strconcat</code> is especially scary as you might pass non-strings there
and get no warning from the compiler. Or forget to pass a <code>NULL</code> value
(<a href="https://github.com/proftpd/proftpd/pull/1028/files"><code>proftpd</code> example</a>
comes to mind). But at least all the arguments are expected to have the
same <code>const gchar*</code> type.</p>
<p>But the above is not an exhaustive list. You can bake any assumption
into ellipsis meaning.</p>
<h2 id="an-example-of-variadic-c-function">An example of variadic C function</h2>
<p>I’ll use yet another (arguably the simplest) form to pass argument count
to a variadic function: I’ll pass the number explicitly. Let’s explore
the following example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> foo<span class="op">(</span><span class="dt">int</span> n<span class="op">,</span> <span class="op">...)</span> <span class="op">{</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">va_list</span> va<span class="op">;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    va_start<span class="op">(</span>va<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> l <span class="op">=</span> va_arg<span class="op">(</span>va<span class="op">,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;[</span><span class="sc">%u</span><span class="st">]: </span><span class="sc">%zu\n</span><span class="st">&quot;</span><span class="op">,</span> i<span class="op">,</span> l<span class="op">);</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    va_end<span class="op">(</span>va<span class="op">);</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    foo<span class="op">(</span><span class="dv">3</span><span class="op">,</span> strlen<span class="op">(</span><span class="st">&quot;foo&quot;</span><span class="op">),</span> strlen<span class="op">(</span><span class="st">&quot;barr&quot;</span><span class="op">),</span> strlen<span class="op">(</span><span class="st">&quot;bazzz&quot;</span><span class="op">));</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here we explicitly pass count of variadic arguments as the first <code>n</code>
parameter of the <code>foo()</code> function. The program should be correct.</p>
<p>Running it:</p>
<pre><code>$ gcc a.c -o a &amp;&amp;./a
[0]: 3
[1]: 4
[2]: 5</code></pre>
<p>All good.</p>
<p>Now I’ll change the above program slightly:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> foo<span class="op">(</span><span class="dt">int</span> n<span class="op">,</span> <span class="op">...)</span> <span class="op">{</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">va_list</span> va<span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    va_start<span class="op">(</span>va<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> l <span class="op">=</span> va_arg<span class="op">(</span>va<span class="op">,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;[</span><span class="sc">%u</span><span class="st">]: </span><span class="sc">%zu\n</span><span class="st">&quot;</span><span class="op">,</span> i<span class="op">,</span> l<span class="op">);</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>    va_end<span class="op">(</span>va<span class="op">);</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    foo<span class="op">(</span><span class="dv">3</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="dv">5</span><span class="op">);</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I inlined the results of <code>strlen()</code> calls to their literal values. Is it
still a correct program? Is it always expected to print <code>3 4 5</code>?</p>
<p>Let’s run it:</p>
<pre><code>$ gcc a.c -o a &amp;&amp;./a
[0]: 3
[1]: 4
[2]: 5</code></pre>
<p>Seems to work. Let’s throw more arguments just for fun:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat a.c</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> foo<span class="op">(</span><span class="dt">int</span> n<span class="op">,</span> <span class="op">...)</span> <span class="op">{</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">va_list</span> va<span class="op">;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    va_start<span class="op">(</span>va<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> l <span class="op">=</span> va_arg<span class="op">(</span>va<span class="op">,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;[</span><span class="sc">%u</span><span class="st">]: </span><span class="sc">%zu\n</span><span class="st">&quot;</span><span class="op">,</span> i<span class="op">,</span> l<span class="op">);</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    va_end<span class="op">(</span>va<span class="op">);</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>    foo<span class="op">(</span><span class="dv">16</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">,</span><span class="dv">5</span><span class="op">,</span><span class="dv">6</span><span class="op">,</span><span class="dv">7</span><span class="op">,</span><span class="dv">8</span><span class="op">,</span><span class="dv">9</span><span class="op">,</span><span class="dv">10</span><span class="op">,</span><span class="dv">11</span><span class="op">,</span><span class="dv">12</span><span class="op">,</span><span class="dv">13</span><span class="op">,</span><span class="dv">14</span><span class="op">,</span><span class="dv">15</span><span class="op">,</span><span class="dv">16</span><span class="op">);</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I increased argument count to <code>16</code>. Running it on <code>x86_64</code>:</p>
<pre><code>$ gcc a.c -o a &amp;&amp;./a
[0]: 1
[1]: 2
[2]: 3
[3]: 4
[4]: 5
[5]: 6
[6]: 7
[7]: 8
[8]: 9
[9]: 10
[10]: 11
[11]: 12
[12]: 13
[13]: 14
[14]: 15
[15]: 16</code></pre>
<p>Still all good!</p>
<p>Running on <code>aarch64-linux</code> just in case:</p>
<pre><code>$ aarch64-unknown-linux-gnu-gcc a.c -o a &amp;&amp;./a
[0]: 1
[1]: 2
[2]: 3
[3]: 4
[4]: 5
[5]: 6
[6]: 7
[7]: 70368744177672
[8]: 70368744177673
[9]: 70368744177674
[10]: 70368744177675
[11]: 70368744177676
[12]: 13
[13]: 70368744177678
[14]: 15
[15]: 70368744177680</code></pre>
<p>Uh-oh. It’s broken!</p>
<p>What is worse: first seven parameters look totally fine and degradation
start only <code>8th</code> one. Is it a coincidence? Some architecture-specific
property? Or maybe a compiler bug?</p>
<p>Or maybe you noticed a bug in the original program? How would you fix it
or work it around?</p>
<h2 id="argument-passing-mechanics">Argument passing mechanics</h2>
<p>Let’s have a look at the generated code and check how parameters are
passed across the call boundary. I’ll use the same <code>17</code>-argument example
above:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdarg.h&gt;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> foo<span class="op">(</span><span class="dt">int</span> n<span class="op">,</span> <span class="op">...)</span> <span class="op">{</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">va_list</span> va<span class="op">;</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    va_start<span class="op">(</span>va<span class="op">,</span> n<span class="op">);</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">size_t</span> l <span class="op">=</span> va_arg<span class="op">(</span>va<span class="op">,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;[</span><span class="sc">%u</span><span class="st">]: </span><span class="sc">%zu\n</span><span class="st">&quot;</span><span class="op">,</span> i<span class="op">,</span> l<span class="op">);</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    va_end<span class="op">(</span>va<span class="op">);</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>    foo<span class="op">(</span><span class="dv">16</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span><span class="dv">2</span><span class="op">,</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">,</span><span class="dv">5</span><span class="op">,</span><span class="dv">6</span><span class="op">,</span><span class="dv">7</span><span class="op">,</span><span class="dv">8</span><span class="op">,</span><span class="dv">9</span><span class="op">,</span><span class="dv">10</span><span class="op">,</span><span class="dv">11</span><span class="op">,</span><span class="dv">12</span><span class="op">,</span><span class="dv">13</span><span class="op">,</span><span class="dv">14</span><span class="op">,</span><span class="dv">15</span><span class="op">,</span><span class="dv">16</span><span class="op">);</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<h2 id="x86_64"><code>x86_64</code></h2>
<p>Full <code>x86_64</code> code on <code>gcc</code> looks this way:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="co">; gcc -O1 -S a.c -o -</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">16</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">; push some of the arguments on stack:</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">16</span> <span class="co">; va[15] = 16</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">15</span> <span class="co">; va[14] = 15</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">14</span> <span class="co">; va[13] = 14</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">13</span> <span class="co">; va[12] = 13</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">12</span> <span class="co">; va[11] = 12</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">11</span> <span class="co">; va[10] = 11</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">10</span> <span class="co">; va[9] = 10</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">9</span>  <span class="co">; va[8] = 9</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">8</span>  <span class="co">; va[7] = 8</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">7</span>  <span class="co">; va[6] = 7</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">6</span>  <span class="co">; va[5] = 6</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">5</span><span class="op">,</span> <span class="op">%</span>r9d  <span class="co">; va[4] = 5</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">4</span><span class="op">,</span> <span class="op">%</span>r8d  <span class="co">; va[3] = 4</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">3</span><span class="op">,</span> <span class="op">%</span><span class="kw">ecx</span>  <span class="co">; va[2] = 3</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">2</span><span class="op">,</span> <span class="op">%</span><span class="kw">edx</span>  <span class="co">; va[1] = 2</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">1</span><span class="op">,</span> <span class="op">%</span><span class="kw">esi</span>  <span class="co">; va[0] = 1</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">16</span><span class="op">,</span> <span class="op">%</span><span class="kw">edi</span> <span class="co">; n = 16</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">0</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    foo</span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">0</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">104</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a><span class="fu">.LC0:</span></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a>        .string <span class="st">&quot;[%u]: %zu\n&quot;</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">%</span><span class="kw">rbp</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">%</span><span class="kw">rbx</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>        subq    <span class="op">$</span><span class="bn">88</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rsi</span><span class="op">,</span> <span class="dv">40</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rdx</span><span class="op">,</span> <span class="dv">48</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rcx</span><span class="op">,</span> <span class="dv">56</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">r8</span><span class="op">,</span> <span class="dv">64</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">r9</span><span class="op">,</span> <span class="dv">72</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">8</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a>        leaq    <span class="dv">112</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span></span>
<span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">16</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a>        leaq    <span class="dv">32</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span></span>
<span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">24</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>        testl   <span class="op">%</span><span class="kw">edi</span><span class="op">,</span> <span class="op">%</span><span class="kw">edi</span></span>
<span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jle</span>     <span class="op">.</span>L1</span>
<span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">%</span><span class="kw">edi</span><span class="op">,</span> <span class="op">%</span><span class="kw">ebp</span></span>
<span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">0</span><span class="op">,</span> <span class="op">%</span><span class="kw">ebx</span></span>
<span id="cb13-52"><a href="#cb13-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jmp</span>     <span class="op">.</span>L5</span>
<span id="cb13-53"><a href="#cb13-53" aria-hidden="true" tabindex="-1"></a><span class="fu">.L3:</span></span>
<span id="cb13-54"><a href="#cb13-54" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="dv">16</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rdx</span></span>
<span id="cb13-55"><a href="#cb13-55" aria-hidden="true" tabindex="-1"></a>        leaq    <span class="dv">8</span><span class="op">(%</span><span class="kw">rdx</span><span class="op">),</span> <span class="op">%</span><span class="kw">rax</span></span>
<span id="cb13-56"><a href="#cb13-56" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">%</span><span class="kw">rax</span><span class="op">,</span> <span class="dv">16</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-57"><a href="#cb13-57" aria-hidden="true" tabindex="-1"></a><span class="fu">.L4:</span></span>
<span id="cb13-58"><a href="#cb13-58" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">(%</span><span class="kw">rdx</span><span class="op">),</span> <span class="op">%</span><span class="kw">rdx</span>  <span class="co">; size_t l = va_arg(va, size_t);</span></span>
<span id="cb13-59"><a href="#cb13-59" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">%</span><span class="kw">ebx</span><span class="op">,</span> <span class="op">%</span><span class="kw">esi</span>    <span class="co">; int i (loop variable)</span></span>
<span id="cb13-60"><a href="#cb13-60" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$.</span>LC0<span class="op">,</span> <span class="op">%</span><span class="kw">edi</span>   <span class="co">; format = &quot;%[u]: %zu\n&quot;</span></span>
<span id="cb13-61"><a href="#cb13-61" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">0</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span></span>
<span id="cb13-62"><a href="#cb13-62" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    printf</span>
<span id="cb13-63"><a href="#cb13-63" aria-hidden="true" tabindex="-1"></a>        addl    <span class="op">$</span><span class="bn">1</span><span class="op">,</span> <span class="op">%</span><span class="kw">ebx</span></span>
<span id="cb13-64"><a href="#cb13-64" aria-hidden="true" tabindex="-1"></a>        cmpl    <span class="op">%</span><span class="kw">ebx</span><span class="op">,</span> <span class="op">%</span><span class="kw">ebp</span></span>
<span id="cb13-65"><a href="#cb13-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">je</span>      <span class="op">.</span>L1</span>
<span id="cb13-66"><a href="#cb13-66" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb13-67"><a href="#cb13-67" aria-hidden="true" tabindex="-1"></a>        movl    <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">eax</span></span>
<span id="cb13-68"><a href="#cb13-68" aria-hidden="true" tabindex="-1"></a>        cmpl    <span class="op">$</span><span class="bn">47</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span></span>
<span id="cb13-69"><a href="#cb13-69" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ja</span>      <span class="op">.</span>L3</span>
<span id="cb13-70"><a href="#cb13-70" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="op">%</span><span class="kw">edx</span></span>
<span id="cb13-71"><a href="#cb13-71" aria-hidden="true" tabindex="-1"></a>        addq    <span class="dv">24</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">),</span> <span class="op">%</span><span class="kw">rdx</span></span>
<span id="cb13-72"><a href="#cb13-72" aria-hidden="true" tabindex="-1"></a>        addl    <span class="op">$</span><span class="bn">8</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span></span>
<span id="cb13-73"><a href="#cb13-73" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">%</span><span class="kw">eax</span><span class="op">,</span> <span class="dv">8</span><span class="op">(%</span><span class="kw">rsp</span><span class="op">)</span></span>
<span id="cb13-74"><a href="#cb13-74" aria-hidden="true" tabindex="-1"></a>        <span class="cf">jmp</span>     <span class="op">.</span>L4</span>
<span id="cb13-75"><a href="#cb13-75" aria-hidden="true" tabindex="-1"></a><span class="fu">.L1:</span></span>
<span id="cb13-76"><a href="#cb13-76" aria-hidden="true" tabindex="-1"></a>        addq    <span class="op">$</span><span class="bn">88</span><span class="op">,</span> <span class="op">%</span><span class="kw">rsp</span></span>
<span id="cb13-77"><a href="#cb13-77" aria-hidden="true" tabindex="-1"></a>        popq    <span class="op">%</span><span class="kw">rbx</span></span>
<span id="cb13-78"><a href="#cb13-78" aria-hidden="true" tabindex="-1"></a>        popq    <span class="op">%</span><span class="kw">rbp</span></span>
<span id="cb13-79"><a href="#cb13-79" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span></code></pre></div>
<p>It’s a lot of text! We can ignore most of it and focus on the following
few lines to get to the argument passing mechanics:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>        <span class="co">; ...</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>        pushq   <span class="op">$</span><span class="bn">6</span>  <span class="co">; va[5] = 6</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">5</span><span class="op">,</span> <span class="op">%</span>r9d  <span class="co">; va[4] = 5</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">; ...</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">; ...</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">movq</span>    <span class="op">(%</span><span class="kw">rdx</span><span class="op">),</span> <span class="op">%</span><span class="kw">rdx</span>  <span class="co">; size_t l = va_arg(va, size_t);</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">%</span><span class="kw">ebx</span><span class="op">,</span> <span class="op">%</span><span class="kw">esi</span>    <span class="co">; int i (loop variable)</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$.</span>LC0<span class="op">,</span> <span class="op">%</span><span class="kw">edi</span>   <span class="co">; format = &quot;%[u]: %zu\n&quot;</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>        movl    <span class="op">$</span><span class="bn">0</span><span class="op">,</span> <span class="op">%</span><span class="kw">eax</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">call</span>    printf</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">; ...</span></span></code></pre></div>
<p>The <code>main</code> function is trivial: it shows us that first 6 arguments are
passed in registers alone (<code>%edi = 16</code>, <code>%esi = 1</code>, <code>%edx = 2</code>,
<code>%ecx = 3</code>, <code>%r8d = 4</code> <code>%r9d = 5</code>). And starting from <code>7</code>th argument
they are passed via stack (<code>pushq $6</code>). This is a standard
<code>x86_64-linux</code> calling convention.</p>
<p>The <code>foo</code> is more complicated. The gist of it is that our <code>va_arg</code>
always gets fetched from stack as a 64-bit value via <code>movq (%rdx), %rdx</code>
instruction. To make it work <code>foo</code> stores all register-passed arguments
on stack. The fetch result gets passed later as a third argument to
<code>printf("%[u]: %zu\n", i, l)</code> call in <code>%rdx</code> register.</p>
<p>A few notes before we continue:</p>
<p>Instructions like <code>movl $1, %esi</code> tell the CPU to store <code>$1</code> to
32-bit <code>esi</code> register (lower half of <code>rsi</code> register). <code>movl</code> (or any
other write instruction that works on 32-bit registers) also zeroes out
upper 64-bits of <code>rsi</code> register. Thus it’s a functional equivalent of
<code>movq $1, %rsi</code>. But the encoding might be more efficient as it does not
need a <code>REX</code> prefix.</p>
<p>Instructions like <code>pushq $6</code> write full 64-bit constant on stack as if
we pushed full <code>size_t</code> value instead of <code>int</code>.</p>
<p>In both register store and memory store cases <code>int</code> literals are stored
as 64-bit values. This means that on <code>x86_64</code> it’s not too bad to mix
these two types as the example does.</p>
<h2 id="aarch64"><code>aarch64</code></h2>
<p>Now let’s do the same exercise for <code>aarch64</code> target:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">; aarch64-unknown-linux-gnu-gcc -O1 -S a.c -o -</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">sub</span>     <span class="kw">sp</span><span class="op">,</span> <span class="kw">sp</span><span class="op">,</span> <span class="op">#</span><span class="dv">96</span></span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>        stp     x29<span class="op">,</span> x30<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">80</span><span class="op">]</span></span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     x29<span class="op">,</span> <span class="kw">sp</span><span class="op">,</span> <span class="dv">80</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w0<span class="op">,</span> <span class="dv">16</span> <span class="co">; n = 16</span></span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w0<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">64</span><span class="op">]</span> <span class="co">; va[15] = 16</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">15</span></span>
<span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">56</span><span class="op">]</span> <span class="co">; va[14] = 15</span></span>
<span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">14</span></span>
<span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">48</span><span class="op">]</span> <span class="co">; va[13] = 14</span></span>
<span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">13</span></span>
<span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">40</span><span class="op">]</span> <span class="co">; va[12] = 13</span></span>
<span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">12</span></span>
<span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">32</span><span class="op">]</span> <span class="co">; va[11] = 12</span></span>
<span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">11</span></span>
<span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">24</span><span class="op">]</span> <span class="co">; va[10] = 11</span></span>
<span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">10</span></span>
<span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">16</span><span class="op">]</span> <span class="co">; va[9]  = 10</span></span>
<span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">9</span></span>
<span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">8</span><span class="op">]</span>  <span class="co">; va[8]  = 9</span></span>
<span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">8</span></span>
<span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">]</span>     <span class="co">; va[7]  = 8</span></span>
<span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w7<span class="op">,</span> <span class="dv">7</span>        <span class="co">; va[6]  = 7</span></span>
<span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w6<span class="op">,</span> <span class="dv">6</span>        <span class="co">; va[5]  = 6</span></span>
<span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w5<span class="op">,</span> <span class="dv">5</span>        <span class="co">; va[4]  = 5</span></span>
<span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w4<span class="op">,</span> <span class="dv">4</span>        <span class="co">; va[3]  = 4</span></span>
<span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w3<span class="op">,</span> <span class="dv">3</span>        <span class="co">; va[2]  = 3</span></span>
<span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w2<span class="op">,</span> <span class="dv">2</span>        <span class="co">; va[1]  = 2</span></span>
<span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">1</span>        <span class="co">; va[0]  = 1</span></span>
<span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a>        bl      foo</span>
<span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w0<span class="op">,</span> <span class="dv">0</span></span>
<span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a>        ldp     x29<span class="op">,</span> x30<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">80</span><span class="op">]</span></span>
<span id="cb15-34"><a href="#cb15-34" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     <span class="kw">sp</span><span class="op">,</span> <span class="kw">sp</span><span class="op">,</span> <span class="dv">96</span></span>
<span id="cb15-35"><a href="#cb15-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span>
<span id="cb15-36"><a href="#cb15-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-37"><a href="#cb15-37" aria-hidden="true" tabindex="-1"></a><span class="fu">.LC0:</span></span>
<span id="cb15-38"><a href="#cb15-38" aria-hidden="true" tabindex="-1"></a>        .string <span class="st">&quot;[%u]: %zu\n&quot;</span></span>
<span id="cb15-39"><a href="#cb15-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb15-40"><a href="#cb15-40" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb15-41"><a href="#cb15-41" aria-hidden="true" tabindex="-1"></a>        stp     x29<span class="op">,</span> x30<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="op">-</span><span class="dv">144</span><span class="op">]!</span></span>
<span id="cb15-42"><a href="#cb15-42" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     x29<span class="op">,</span> <span class="kw">sp</span></span>
<span id="cb15-43"><a href="#cb15-43" aria-hidden="true" tabindex="-1"></a>        stp     x19<span class="op">,</span> x20<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">16</span><span class="op">]</span></span>
<span id="cb15-44"><a href="#cb15-44" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w20<span class="op">,</span> w0</span>
<span id="cb15-45"><a href="#cb15-45" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">88</span><span class="op">]</span></span>
<span id="cb15-46"><a href="#cb15-46" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x2<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">96</span><span class="op">]</span></span>
<span id="cb15-47"><a href="#cb15-47" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x3<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">104</span><span class="op">]</span></span>
<span id="cb15-48"><a href="#cb15-48" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x4<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">112</span><span class="op">]</span></span>
<span id="cb15-49"><a href="#cb15-49" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x5<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">120</span><span class="op">]</span></span>
<span id="cb15-50"><a href="#cb15-50" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x6<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">128</span><span class="op">]</span></span>
<span id="cb15-51"><a href="#cb15-51" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x7<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">136</span><span class="op">]</span></span>
<span id="cb15-52"><a href="#cb15-52" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     x0<span class="op">,</span> <span class="kw">sp</span><span class="op">,</span> <span class="dv">144</span></span>
<span id="cb15-53"><a href="#cb15-53" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x0<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">48</span><span class="op">]</span></span>
<span id="cb15-54"><a href="#cb15-54" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x0<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">56</span><span class="op">]</span></span>
<span id="cb15-55"><a href="#cb15-55" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     x0<span class="op">,</span> <span class="kw">sp</span><span class="op">,</span> <span class="dv">80</span></span>
<span id="cb15-56"><a href="#cb15-56" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x0<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">64</span><span class="op">]</span></span>
<span id="cb15-57"><a href="#cb15-57" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w0<span class="op">,</span> <span class="op">-</span><span class="dv">56</span></span>
<span id="cb15-58"><a href="#cb15-58" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w0<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">72</span><span class="op">]</span></span>
<span id="cb15-59"><a href="#cb15-59" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     wzr<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">76</span><span class="op">]</span></span>
<span id="cb15-60"><a href="#cb15-60" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cmp</span>     w20<span class="op">,</span> <span class="dv">0</span></span>
<span id="cb15-61"><a href="#cb15-61" aria-hidden="true" tabindex="-1"></a>        ble     <span class="op">.</span>L1</span>
<span id="cb15-62"><a href="#cb15-62" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x21<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">32</span><span class="op">]</span></span>
<span id="cb15-63"><a href="#cb15-63" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w19<span class="op">,</span> <span class="dv">0</span></span>
<span id="cb15-64"><a href="#cb15-64" aria-hidden="true" tabindex="-1"></a>        adrp    x21<span class="op">,</span> <span class="op">.</span>LC0</span>
<span id="cb15-65"><a href="#cb15-65" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     x21<span class="op">,</span> x21<span class="op">,</span> <span class="op">:</span>lo12<span class="op">:.</span>LC0</span>
<span id="cb15-66"><a href="#cb15-66" aria-hidden="true" tabindex="-1"></a>        b       <span class="op">.</span>L6</span>
<span id="cb15-67"><a href="#cb15-67" aria-hidden="true" tabindex="-1"></a><span class="fu">.L3:</span></span>
<span id="cb15-68"><a href="#cb15-68" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     w0<span class="op">,</span> w2<span class="op">,</span> <span class="dv">8</span></span>
<span id="cb15-69"><a href="#cb15-69" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w0<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">72</span><span class="op">]</span></span>
<span id="cb15-70"><a href="#cb15-70" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cmp</span>     w0<span class="op">,</span> <span class="dv">0</span></span>
<span id="cb15-71"><a href="#cb15-71" aria-hidden="true" tabindex="-1"></a>        ble     <span class="op">.</span>L5</span>
<span id="cb15-72"><a href="#cb15-72" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     x0<span class="op">,</span> x1<span class="op">,</span> <span class="dv">15</span></span>
<span id="cb15-73"><a href="#cb15-73" aria-hidden="true" tabindex="-1"></a>        <span class="bu">and</span>     x0<span class="op">,</span> x0<span class="op">,</span> <span class="op">-</span><span class="dv">8</span></span>
<span id="cb15-74"><a href="#cb15-74" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x0<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">48</span><span class="op">]</span></span>
<span id="cb15-75"><a href="#cb15-75" aria-hidden="true" tabindex="-1"></a><span class="fu">.L4:</span></span>
<span id="cb15-76"><a href="#cb15-76" aria-hidden="true" tabindex="-1"></a>        ldr     x2<span class="op">,</span> <span class="op">[</span>x1<span class="op">]</span> <span class="co">; size_t l = va_arg(va, size_t);</span></span>
<span id="cb15-77"><a href="#cb15-77" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> w19  <span class="co">; int i (loop variable)</span></span>
<span id="cb15-78"><a href="#cb15-78" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     x0<span class="op">,</span> x21  <span class="co">; format = &quot;%[u]: %zu\n&quot;</span></span>
<span id="cb15-79"><a href="#cb15-79" aria-hidden="true" tabindex="-1"></a>        bl      printf</span>
<span id="cb15-80"><a href="#cb15-80" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     w19<span class="op">,</span> w19<span class="op">,</span> <span class="dv">1</span></span>
<span id="cb15-81"><a href="#cb15-81" aria-hidden="true" tabindex="-1"></a>        <span class="bu">cmp</span>     w20<span class="op">,</span> w19</span>
<span id="cb15-82"><a href="#cb15-82" aria-hidden="true" tabindex="-1"></a>        beq     <span class="op">.</span>L9</span>
<span id="cb15-83"><a href="#cb15-83" aria-hidden="true" tabindex="-1"></a><span class="fu">.L6:</span></span>
<span id="cb15-84"><a href="#cb15-84" aria-hidden="true" tabindex="-1"></a>        ldr     w2<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">72</span><span class="op">]</span></span>
<span id="cb15-85"><a href="#cb15-85" aria-hidden="true" tabindex="-1"></a>        ldr     x1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">48</span><span class="op">]</span></span>
<span id="cb15-86"><a href="#cb15-86" aria-hidden="true" tabindex="-1"></a>        tbnz    w2<span class="op">,</span> <span class="op">#</span><span class="dv">31</span><span class="op">,</span> <span class="op">.</span>L3</span>
<span id="cb15-87"><a href="#cb15-87" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     x2<span class="op">,</span> x1<span class="op">,</span> <span class="dv">15</span></span>
<span id="cb15-88"><a href="#cb15-88" aria-hidden="true" tabindex="-1"></a>        <span class="bu">and</span>     x2<span class="op">,</span> x2<span class="op">,</span> <span class="op">-</span><span class="dv">8</span></span>
<span id="cb15-89"><a href="#cb15-89" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     x2<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">48</span><span class="op">]</span></span>
<span id="cb15-90"><a href="#cb15-90" aria-hidden="true" tabindex="-1"></a>        b       <span class="op">.</span>L4</span>
<span id="cb15-91"><a href="#cb15-91" aria-hidden="true" tabindex="-1"></a><span class="fu">.L5:</span></span>
<span id="cb15-92"><a href="#cb15-92" aria-hidden="true" tabindex="-1"></a>        ldr     x1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">56</span><span class="op">]</span></span>
<span id="cb15-93"><a href="#cb15-93" aria-hidden="true" tabindex="-1"></a>        <span class="bu">add</span>     x1<span class="op">,</span> x1<span class="op">,</span> w2<span class="op">,</span> sxtw</span>
<span id="cb15-94"><a href="#cb15-94" aria-hidden="true" tabindex="-1"></a>        b       <span class="op">.</span>L4</span>
<span id="cb15-95"><a href="#cb15-95" aria-hidden="true" tabindex="-1"></a><span class="fu">.L9:</span></span>
<span id="cb15-96"><a href="#cb15-96" aria-hidden="true" tabindex="-1"></a>        ldr     x21<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">32</span><span class="op">]</span></span>
<span id="cb15-97"><a href="#cb15-97" aria-hidden="true" tabindex="-1"></a><span class="fu">.L1:</span></span>
<span id="cb15-98"><a href="#cb15-98" aria-hidden="true" tabindex="-1"></a>        ldp     x19<span class="op">,</span> x20<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">,</span> <span class="dv">16</span><span class="op">]</span></span>
<span id="cb15-99"><a href="#cb15-99" aria-hidden="true" tabindex="-1"></a>        ldp     x29<span class="op">,</span> x30<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">],</span> <span class="dv">144</span></span>
<span id="cb15-100"><a href="#cb15-100" aria-hidden="true" tabindex="-1"></a>        <span class="cf">ret</span></span></code></pre></div>
<p>Again, it’s a lot of repetitive text. We can ignore most of it and focus
on arguments passed over call boundary:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>        <span class="co">; ...</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> <span class="dv">8</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">str</span>     w1<span class="op">,</span> <span class="op">[</span><span class="kw">sp</span><span class="op">]</span>     <span class="co">; va[7]  = 8</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w7<span class="op">,</span> <span class="dv">7</span>        <span class="co">; va[6]  = 7</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w6<span class="op">,</span> <span class="dv">6</span>        <span class="co">; va[5]  = 6</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">; ...</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>        ldr     x2<span class="op">,</span> <span class="op">[</span>x1<span class="op">]</span> <span class="co">; size_t l = va_arg(va, size_t);</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     w1<span class="op">,</span> w19  <span class="co">; int i (loop variable)</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>        <span class="bu">mov</span>     x0<span class="op">,</span> x21  <span class="co">; format = &quot;%[u]: %zu\n&quot;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>        bl      printf</span></code></pre></div>
<p>The <code>main</code> structure is very similar to <code>x86_64</code>: first few parameters
(<code>8</code> this time) get passed via registers: <code>w0 = 16</code>, <code>w1 = 1</code>, <code>w2 = 2</code>,
…. <code>w7 = 7</code>. The rest goes to stack: <code>mov w1, 8</code> / <code>str w1, [sp]</code>,
<code>mov w1, 9</code> / <code>str w1, [sp, 8]</code>, and so on.</p>
<p>Similarly to <code>x86_64</code> the instruction <code>mov w1, 1</code> sets lower 32-bit part
of 64-bit <code>x1</code> register to an immediate value. Higher 32-bit part is
zeroed out. This makes it equivalent to <code>mov x1, 1</code> instruction.</p>
<p>The difference starts in the way stack variables are stored: while
<code>mov w1, 8</code> initializes both <code>w1</code> and <code>x1</code> to value <code>8</code> the
<code>str w1, [sp]</code> instruction writes only 32 bits of value on stack. Upper
32 bits of stack value contain existing value (some garbage). If we
wanted to fix it then <code>str x1, [sp]</code> would place all <code>64</code> bits as. In
theory <code>gcc</code> could have used that instruction even for your unmodified
case. But it does not have to.</p>
<p>This is our corruption mechanic: we store 32 bits on stack for
parammeters <code>8</code> and above and then read 64-bit values from store
locations in <code>C</code> pseudo-code:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="co">// main():</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> val<span class="op">;</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> location <span class="op">=</span> uninitialized<span class="op">();</span></span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">*(</span><span class="dt">int</span><span class="op">*)(&amp;</span>location<span class="op">)</span> <span class="op">=</span> val<span class="op">;</span> <span class="co">// store 32 initialized bits</span></span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="co">// foo():</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> result <span class="op">=</span> <span class="op">*(</span><span class="dt">size_t</span><span class="op">*)(&amp;</span>location<span class="op">);</span> <span class="co">// load 64 bits</span></span></code></pre></div>
<h2 id="possible-fix">Possible fix</h2>
<p>Once the breakage is clear the fix is simple: use exact expected type
at call site. In this case <code>size_t</code> instead of <code>int</code>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a.c</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ a.fixed.c</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -16,3 +16,3 @@</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a> int main() {</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="st">-    foo(16, 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16);</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="va">+    foo(16, (size_t)1,(size_t)2,(size_t)3,(size_t)4,(size_t)5,(size_t)6,(size_t)7,(size_t)8,(size_t)9,(size_t)10,(size_t)11,(size_t)12,(size_t)13,(size_t)14,(size_t)15,(size_t)16);</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>Not the prettiest change, but it gets the job done:</p>
<pre><code>$ aarch64-unknown-linux-gnu-gcc -O1 a.fixed.c -o a &amp;&amp; ./a
[0]: 1
[1]: 2
[2]: 3
[3]: 4
[4]: 5
[5]: 6
[6]: 7
[7]: 8
[8]: 9
[9]: 10
[10]: 11
[11]: 12
[12]: 13
[13]: 14
[14]: 15
[15]: 16</code></pre>
<p>The code change looks as expected:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">diff -U0 a.S a.fixed.S</span></span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="dt">--- a.S 2023-12-17 23:51:24.749893552 +0000</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ a.fixed.S   2023-12-17 23:51:29.687979158 +0000</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -2 +2 @@</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a><span class="st">-       .file   &quot;a.c&quot;</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="va">+       .file   &quot;a.fixed.c&quot;</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -102,13 +102,13 @@</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w0, 16</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w0, [sp, 64]</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 15</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp, 56]</span></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 14</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp, 48]</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 13</span></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp, 40]</span></span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 12</span></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp, 32]</span></span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 11</span></span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp, 24]</span></span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 10</span></span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp, 16]</span></span>
<span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 9</span></span>
<span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp, 8]</span></span>
<span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 8</span></span>
<span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a><span class="st">-       str     w1, [sp]</span></span>
<span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x0, 16</span></span>
<span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x0, [sp, 64]</span></span>
<span id="cb20-28"><a href="#cb20-28" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 15</span></span>
<span id="cb20-29"><a href="#cb20-29" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp, 56]</span></span>
<span id="cb20-30"><a href="#cb20-30" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 14</span></span>
<span id="cb20-31"><a href="#cb20-31" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp, 48]</span></span>
<span id="cb20-32"><a href="#cb20-32" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 13</span></span>
<span id="cb20-33"><a href="#cb20-33" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp, 40]</span></span>
<span id="cb20-34"><a href="#cb20-34" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 12</span></span>
<span id="cb20-35"><a href="#cb20-35" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp, 32]</span></span>
<span id="cb20-36"><a href="#cb20-36" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 11</span></span>
<span id="cb20-37"><a href="#cb20-37" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp, 24]</span></span>
<span id="cb20-38"><a href="#cb20-38" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 10</span></span>
<span id="cb20-39"><a href="#cb20-39" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp, 16]</span></span>
<span id="cb20-40"><a href="#cb20-40" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 9</span></span>
<span id="cb20-41"><a href="#cb20-41" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp, 8]</span></span>
<span id="cb20-42"><a href="#cb20-42" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 8</span></span>
<span id="cb20-43"><a href="#cb20-43" aria-hidden="true" tabindex="-1"></a><span class="va">+       str     x1, [sp]</span></span>
<span id="cb20-44"><a href="#cb20-44" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -119,7 +119,7 @@</span></span>
<span id="cb20-45"><a href="#cb20-45" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w7, 7</span></span>
<span id="cb20-46"><a href="#cb20-46" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w6, 6</span></span>
<span id="cb20-47"><a href="#cb20-47" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w5, 5</span></span>
<span id="cb20-48"><a href="#cb20-48" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w4, 4</span></span>
<span id="cb20-49"><a href="#cb20-49" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w3, 3</span></span>
<span id="cb20-50"><a href="#cb20-50" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w2, 2</span></span>
<span id="cb20-51"><a href="#cb20-51" aria-hidden="true" tabindex="-1"></a><span class="st">-       mov     w1, 1</span></span>
<span id="cb20-52"><a href="#cb20-52" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x7, 7</span></span>
<span id="cb20-53"><a href="#cb20-53" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x6, 6</span></span>
<span id="cb20-54"><a href="#cb20-54" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x5, 5</span></span>
<span id="cb20-55"><a href="#cb20-55" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x4, 4</span></span>
<span id="cb20-56"><a href="#cb20-56" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x3, 3</span></span>
<span id="cb20-57"><a href="#cb20-57" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x2, 2</span></span>
<span id="cb20-58"><a href="#cb20-58" aria-hidden="true" tabindex="-1"></a><span class="va">+       mov     x1, 1</span></span></code></pre></div>
<p>Only <code>main</code> saw the change. The change is shift from 32-bit to 64-bit
registers in value assignments and value stores.</p>
<h2 id="is-this-bug-real">Is this bug real?</h2>
<p>The main takeaway from the above is that on <code>aarch64</code> arguments <code>9</code> and
above must not mix <code>int</code> / <code>size_t</code> and pass exact type if those
arguments are present in variadic template.</p>
<p>Could such bug happen on real code or 9 arguments are too much to be
seen in the wild? Guess how I found this obscurity!</p>
<p>Here is the <a href="https://git.kernel.org/pub/scm/network/wireless/iwd.git/tree/src/dpp-util.c?h=2.11#n1379"><code>iwd-0.11</code></a> code:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> prf_plus<span class="op">(</span><span class="kw">enum</span> l_checksum_type type<span class="op">,</span> <span class="dt">const</span> <span class="dt">void</span> <span class="op">*</span>key<span class="op">,</span> <span class="dt">size_t</span> key_len<span class="op">,</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>              <span class="dt">void</span> <span class="op">*</span>out<span class="op">,</span> <span class="dt">size_t</span> out_len<span class="op">,</span></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>              <span class="dt">size_t</span> n_extra<span class="op">,</span> <span class="op">...)</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> iovec iov<span class="op">[</span>n_extra <span class="op">+</span> <span class="dv">2</span><span class="op">];</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">va_list</span> va<span class="op">;</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">size_t</span> i<span class="op">;</span></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>    va_start<span class="op">(</span>va<span class="op">,</span> n_extra<span class="op">);</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n_extra<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>        iov<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">].</span>iov_base <span class="op">=</span> va_arg<span class="op">(</span>va<span class="op">,</span> <span class="dt">void</span> <span class="op">*);</span></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>        iov<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">].</span>iov_len  <span class="op">=</span> va_arg<span class="op">(</span>va<span class="op">,</span> <span class="dt">size_t</span><span class="op">);</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> dpp_derive_z<span class="op">(</span><span class="dt">const</span> <span class="dt">uint8_t</span> <span class="op">*</span>mac_i<span class="op">,</span> more params<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>z_out<span class="op">,</span> <span class="dt">size_t</span> <span class="op">*</span>z_len<span class="op">)</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a>    prf_plus<span class="op">(</span>sha<span class="op">,</span> prk<span class="op">,</span> bytes<span class="op">,</span> z_out<span class="op">,</span> bytes<span class="op">,</span></span>
<span id="cb21-23"><a href="#cb21-23" aria-hidden="true" tabindex="-1"></a>             <span class="dv">5</span><span class="op">,</span></span>
<span id="cb21-24"><a href="#cb21-24" aria-hidden="true" tabindex="-1"></a>             mac_i<span class="op">,</span> <span class="dv">6</span><span class="op">,</span></span>
<span id="cb21-25"><a href="#cb21-25" aria-hidden="true" tabindex="-1"></a>             mac_r<span class="op">,</span> <span class="dv">6</span><span class="op">,</span></span>
<span id="cb21-26"><a href="#cb21-26" aria-hidden="true" tabindex="-1"></a>             m_x<span class="op">,</span> bytes<span class="op">,</span></span>
<span id="cb21-27"><a href="#cb21-27" aria-hidden="true" tabindex="-1"></a>             n_x<span class="op">,</span> bytes<span class="op">,</span></span>
<span id="cb21-28"><a href="#cb21-28" aria-hidden="true" tabindex="-1"></a>             key<span class="op">,</span> strlen<span class="op">(</span>key<span class="op">));</span></span></code></pre></div>
<p>Do you see where the thing breaks?</p>
<p>Here <code>prf_plus()</code> expects <code>n_extra</code> pairs of <code>void *</code> / <code>size_t</code> in the
variadic arguments. But <code>dpp_derive_z()</code> passes <code>void *</code> / <code>int</code> as
first two pairs.</p>
<p>I would never notice it if not for mysteriously failing <code>iwd</code> test on
<code>aarch64</code> platform:</p>
<pre><code>    $ unit/test-dpp
    TEST: DPP test responder-only key derivation
    TEST: DPP test mutual key derivation
    TEST: DPP test PKEX key derivation
    test-dpp: unit/test-dpp.c:514: test_pkex_key_derivation: Assertion `!memcmp(tmp, __tmp, 32)' failed.</code></pre>
<p><code>strace</code> shown the smoking gun this way:</p>
<pre><code>$ strace unit/test-dpp
...
sendmsg(4, {
    msg_name=NULL,
    msg_namelen=0,
    msg_iov=[
        {iov_base=&quot;&quot;, iov_len=0},
        {iov_base=&quot;\254d\221\364R\7&quot;, iov_len=6},
        {iov_base=&quot;n^\316n\363\335\0\0\0\0&quot;..., iov_len=281470681743366},
        {iov_base=&quot;\274\312\216#\345\300P2&quot;..., iov_len=32},
        {iov_base=&quot;\n\221\340r\210\t\273\2&quot;..., iov_len=32},
        {iov_base=&quot;thisisreallysecret&quot;, iov_len=18},
        {iov_base=&quot;\1&quot;, iov_len=1}],
    msg_iovlen=7, msg_controllen=0, msg_flags=0}, MSG_MORE) = 3136</code></pre>
<p>See anything suspicious?</p>
<p>Length of the third element of <code>msg_iov</code> array is <code>281470681743366</code> (or
<code>0xffff00000006</code> in hex). It should have been <code>6</code> if not for higher
<code>0xffff</code> garbage bits.</p>
<p>While we are at it: <code>sendmsg()</code> did not fail with an <code>-EINVAL</code> error and
consumed <code>3K</code> of data. At best it will fail at the key derivation. At
worst it might send your unrelated process memory over the network.</p>
<p>A nasty kind of bug.</p>
<h2 id="bonus-section">Bonus section</h2>
<p>If we go back to our original broken example are there any other 64-bit
architectures where <code>size_t</code> / <code>int</code> mismatch is as problematic as on
<code>aarch64</code>?</p>
<p>I’ll show the result for the following list of <code>8</code> <code>64</code>-bit
architectures I could remember:</p>
<ul>
<li><code>alpha</code></li>
<li><code>mips64 -mabi=64</code></li>
<li><code>loongarch64</code></li>
<li><code>s390x</code></li>
<li><code>powerpc64</code></li>
<li><code>sparc64</code></li>
<li><code>riscv64</code></li>
<li><code>ia64</code></li>
</ul>
<p>What is your guess? Is <code>aarch64</code> the unique one being broken here, or
maybe <code>x86_64</code> is unique in that it happens to work anyway? Will it be
endianness-specific? Or it’s closer to <code>50/50</code>?</p>
<p>Let’s see:</p>
<ul>
<li><p><code>alpha</code>: no corruption. Stores 64-bit values on stack:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    lda t0<span class="op">,</span><span class="dv">6</span></span>
<span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>    stq t0<span class="op">,</span><span class="dv">0</span><span class="op">(</span><span class="kw">sp</span><span class="op">)</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    ldq a3<span class="op">,</span><span class="dv">0</span><span class="op">(</span>t0<span class="op">)</span></span></code></pre></div>
<p>The target passes first <code>6</code> arguments in registers.</p></li>
<li><p><code>mips64 -mabi=64</code>: no corruption. Stores 64-bit values on stack:</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>    li v0<span class="op">,</span><span class="dv">8</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>    sd v0<span class="op">,</span><span class="dv">0</span><span class="op">(</span><span class="kw">sp</span><span class="op">)</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>    ld a3<span class="op">,-</span><span class="dv">8</span><span class="op">(</span>s1<span class="op">)</span></span></code></pre></div>
<p>The target passes first <code>8</code> arguments in registers.</p></li>
<li><p><code>loongarch64</code>: no corruption. Stores 64-bit values on stack:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    addi<span class="op">.</span>w <span class="op">$</span>t0<span class="op">,</span> <span class="op">$</span>zero<span class="op">,</span> <span class="dv">9</span><span class="op">(</span><span class="bn">0x9</span><span class="op">)</span></span>
<span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>    st<span class="op">.</span>d <span class="op">$</span>t0<span class="op">,</span> <span class="op">$</span>sp<span class="op">,</span> <span class="dv">8</span><span class="op">(</span><span class="bn">0x8</span><span class="op">)</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>    ld<span class="op">.</span>d <span class="op">$</span>a3<span class="op">,</span> <span class="op">$</span>s1<span class="op">,</span> <span class="op">-</span><span class="dv">8</span><span class="op">(</span><span class="bn">0xff8</span><span class="op">)</span></span></code></pre></div>
<p>The target passes first <code>8</code> arguments in registers.</p></li>
<li><p><code>s390x</code>: no corruption. Stores 64-bit values on stack:</p>
<div class="sourceCode" id="cb30"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a>    lghi <span class="op">%</span>r1<span class="op">,</span><span class="dv">5</span></span>
<span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>    stg <span class="op">%</span>r1<span class="op">,</span><span class="dv">160</span><span class="op">(%</span><span class="kw">r15</span><span class="op">)</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>    lg <span class="op">%</span>r5<span class="op">,</span><span class="dv">0</span><span class="op">(%</span>r1<span class="op">)</span></span></code></pre></div>
<p>The target passes first <code>5</code> arguments in registers.</p></li>
<li><p><code>powerpc64</code>: no corruption. Stores 64-bit values on stack:</p>
<div class="sourceCode" id="cb32"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>    li r7<span class="op">,</span><span class="dv">8</span></span>
<span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std</span> r7<span class="op">,</span><span class="dv">112</span><span class="op">(</span>r1<span class="op">)</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb33"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>    ldu r6<span class="op">,</span><span class="dv">8</span><span class="op">(</span>r29<span class="op">)</span></span></code></pre></div>
<p>The target passes first <code>8</code> arguments in registers.</p></li>
<li><p><code>sparc64</code>: no corruption. Stores 64-bit values on stack:</p>
<div class="sourceCode" id="cb34"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb34-1"><a href="#cb34-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb34-2"><a href="#cb34-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb34-3"><a href="#cb34-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">mov</span>  <span class="dv">6</span><span class="op">,</span> <span class="op">%</span>g1</span>
<span id="cb34-4"><a href="#cb34-4" aria-hidden="true" tabindex="-1"></a>    stx  <span class="op">%</span>g1<span class="op">,</span> <span class="op">[</span> <span class="op">%</span><span class="kw">sp</span> <span class="op">+</span> <span class="bn">0x8af</span> <span class="op">]</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb35"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb35-1"><a href="#cb35-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb35-2"><a href="#cb35-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb35-3"><a href="#cb35-3" aria-hidden="true" tabindex="-1"></a>    ldx  <span class="op">[</span> <span class="op">%</span>i5 <span class="op">],</span> <span class="op">%</span>o3</span></code></pre></div>
<p>The target passes first <code>6</code> arguments in registers.</p></li>
<li><p><code>riscv64</code>: no corruption. Stores 64-bit values on stack:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a>    li a5</span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a>    sd a5<span class="op">,</span><span class="dv">0</span><span class="op">(</span><span class="kw">sp</span><span class="op">)</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb37"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb37-1"><a href="#cb37-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb37-2"><a href="#cb37-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb37-3"><a href="#cb37-3" aria-hidden="true" tabindex="-1"></a>    ld a3<span class="op">,-</span><span class="dv">8</span><span class="op">(</span>s1<span class="op">)</span></span></code></pre></div>
<p>The target passes first <code>8</code> arguments in registers.</p></li>
<li><p><code>ia64</code>: has corruption:</p>
<pre><code>$ ./a
[0]: 1
[1]: 2
[2]: 3
[3]: 4
[4]: 5
[5]: 6
[6]: 7
[7]: 8
[8]: 2305843009213693961
[9]: 2305843009213693962
[10]: 11
[11]: 12
[12]: 13
[13]: 14
[14]: 15
[15]: 16</code></pre>
<p><code>ia64</code> stores only 32-bit value on stack (just like <code>aarch64</code>):</p>
<div class="sourceCode" id="cb39"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb39-1"><a href="#cb39-1" aria-hidden="true" tabindex="-1"></a><span class="fu">main:</span></span>
<span id="cb39-2"><a href="#cb39-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb39-3"><a href="#cb39-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">mov</span> <span class="kw">r15</span><span class="op">=</span><span class="dv">8</span></span>
<span id="cb39-4"><a href="#cb39-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">;;</span></span>
<span id="cb39-5"><a href="#cb39-5" aria-hidden="true" tabindex="-1"></a>    st4 <span class="op">[</span><span class="kw">r14</span><span class="op">]=</span><span class="kw">r15</span></span></code></pre></div>
<p>and loads it as 64-bit value:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="fu">foo:</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">; ...</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a>    ld8 r47<span class="op">=[</span><span class="kw">r14</span><span class="op">]</span></span></code></pre></div>
<p>The target passes first <code>8</code> arguments in registers.</p></li>
</ul>
<p>Final table:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">target</th>
<th style="text-align: center;">Is affected</th>
<th style="text-align: center;">In registers</th>
<th style="text-align: center;">First on stack</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><code>alpha</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>mips64</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>loongarch64</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>s390x</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">5</td>
<td style="text-align: center;">6</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>powerpc64</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="even">
<td style="text-align: center;"><code>sparc64</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>riscv64</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong><code>ia64</code></strong></td>
<td style="text-align: center;"><strong>yes</strong></td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><code>x86_64</code></td>
<td style="text-align: center;">no</td>
<td style="text-align: center;">6</td>
<td style="text-align: center;">7</td>
</tr>
<tr class="even">
<td style="text-align: center;"><strong><code>aarch64</code></strong></td>
<td style="text-align: center;"><strong>yes</strong></td>
<td style="text-align: center;">8</td>
<td style="text-align: center;">9</td>
</tr>
</tbody>
</table>
<p>Thus <code>aarch64</code> is not unique, but very close to it :)</p>
<h2 id="parting-words">Parting words</h2>
<p>One has to be careful at specifying exact types expected by variadic
functions. Integral type conversion rules do not apply the same way you
would expect for a non-variadic function call.</p>
<p>If you are writing your function with variadic parameters and it’s not
a <code>printf()</code>-style function then compiler will not be able to help you
with warnings. Make sure you have a way to validate passed types via
other means.</p>
<p>Sometimes breakages are very subtle: first <code>8</code> parameters would work
just fine and <code>9</code>-th one will eat all your data. And it will happen only
on small set of architectures: <code>aarch64</code> and <code>ia64</code> :)</p>
<p><code>iwd</code> fix went upstream as
<a href="https://git.kernel.org/pub/scm/network/wireless/iwd.git/commit/?id=688d27700833258a139a6fbd5661334bd2c9fa98">this patch</a>.</p>
<p>Have fun!</p>
<h2 id="is-amd64-actually-immune-to-this">Is AMD64 actually immune to this?</h2>
<p><a href="https://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines">No</a>.
GCC’s use of <code>push</code> instructions is controlled by two options,
<code>-mpush-args</code> and <code>-mno-accumulate-outgoing-args</code>:</p>
<div class="sourceCode" id="cb41"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb41-1"><a href="#cb41-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">bool</span></span>
<span id="cb41-2"><a href="#cb41-2" aria-hidden="true" tabindex="-1"></a>ix86_push_argument <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> npush<span class="op">)</span></span>
<span id="cb41-3"><a href="#cb41-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb41-4"><a href="#cb41-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* If SSE2 is available, use vector move to put large argument onto</span></span>
<span id="cb41-5"><a href="#cb41-5" aria-hidden="true" tabindex="-1"></a><span class="co">     stack.  NB:  In 32-bit mode, use 8-byte vector move.  */</span></span>
<span id="cb41-6"><a href="#cb41-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">((!</span>TARGET_SSE2 <span class="op">||</span> npush <span class="op">&lt;</span> <span class="op">(</span>TARGET_64BIT <span class="op">?</span> <span class="dv">16</span> <span class="op">:</span> <span class="dv">8</span><span class="op">))</span></span>
<span id="cb41-7"><a href="#cb41-7" aria-hidden="true" tabindex="-1"></a>          <span class="op">&amp;&amp;</span> TARGET_PUSH_ARGS</span>
<span id="cb41-8"><a href="#cb41-8" aria-hidden="true" tabindex="-1"></a>          <span class="op">&amp;&amp;</span> <span class="op">!</span>ACCUMULATE_OUTGOING_ARGS<span class="op">);</span></span>
<span id="cb41-9"><a href="#cb41-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The latter option is automatically adjusted depending on which CPU
family GCC should tune for:</p>
<div class="sourceCode" id="cb42"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb42-1"><a href="#cb42-1" aria-hidden="true" tabindex="-1"></a><span class="co">/* X86_TUNE_ACCUMULATE_OUTGOING_ARGS: Allocate stack space for outgoing</span></span>
<span id="cb42-2"><a href="#cb42-2" aria-hidden="true" tabindex="-1"></a><span class="co">   arguments in prologue/epilogue instead of separately for each call</span></span>
<span id="cb42-3"><a href="#cb42-3" aria-hidden="true" tabindex="-1"></a><span class="co">   by push/pop instructions.</span></span>
<span id="cb42-4"><a href="#cb42-4" aria-hidden="true" tabindex="-1"></a><span class="co">   This increase code size by about 5% in 32bit mode, less so in 64bit mode</span></span>
<span id="cb42-5"><a href="#cb42-5" aria-hidden="true" tabindex="-1"></a><span class="co">   because parameters are passed in registers.  It is considerable</span></span>
<span id="cb42-6"><a href="#cb42-6" aria-hidden="true" tabindex="-1"></a><span class="co">   win for targets without stack engine that prevents multple push operations</span></span>
<span id="cb42-7"><a href="#cb42-7" aria-hidden="true" tabindex="-1"></a><span class="co">   to happen in parallel.  */</span></span>
<span id="cb42-8"><a href="#cb42-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb42-9"><a href="#cb42-9" aria-hidden="true" tabindex="-1"></a>DEF_TUNE <span class="op">(</span>X86_TUNE_ACCUMULATE_OUTGOING_ARGS<span class="op">,</span> <span class="st">&quot;accumulate_outgoing_args&quot;</span><span class="op">,</span></span>
<span id="cb42-10"><a href="#cb42-10" aria-hidden="true" tabindex="-1"></a>          m_PPRO <span class="op">|</span> m_P4_NOCONA <span class="op">|</span> m_BONNELL <span class="op">|</span> m_SILVERMONT <span class="op">|</span> m_KNL <span class="op">|</span> m_KNM <span class="op">|</span> m_INTEL</span>
<span id="cb42-11"><a href="#cb42-11" aria-hidden="true" tabindex="-1"></a>          <span class="op">|</span> m_GOLDMONT <span class="op">|</span> m_GOLDMONT_PLUS <span class="op">|</span> m_ATHLON_K8 <span class="op">|</span> m_LUJIAZUI<span class="op">)</span></span></code></pre></div>
<p>So the use of <code>push</code> vs. <code>mov</code> is a tuning choice, which makes this bug
even more subtle: it can surface depending on which CPU is specified via
the <code>-march=</code> or <code>-mtune</code> option.</p>]]></description>
    <pubDate>Wed, 20 Dec 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/308-a-breakage-example-in-c-variadic-function.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>upgrading an ssd</title>
    <link>http://trofi.github.io/posts/307-upgrading-an-ssd.html</link>
    <description><![CDATA[<p>In search of bugs I build a lot of software locally. About ~20000
packages per day. I usually keep all builds around to speed up
regression debugging.</p>
<p>That way (and with help of filesystem compression, <code>duperemove</code> and
identical file hardlinking) I manage to fill up my <code>512G</code> SSD with build
results within 2-3 weeks.</p>
<p>Once the disk is full I have to trigger garbage collection that frees
all that space and start over.</p>
<p>I decided to switch to a larger <code>2T</code> SSD to expand the time budget to
1-2 months.</p>
<p>This is my boot disk on <code>btrfs</code> and I would like to preserve most of
it’s properties without too much of mountpoint juggling or machine
downtime. AFAIU <code>rsync</code> does not handle advanced filesystem features
like subvolume layouts and already deduplicated data.</p>
<p>I ended up plugging in a new device and did two commands to transfer all
the data live from one device to another:</p>
<pre><code>$ btrfs device add    /dev/nvme1n1p2 /
$ btrfs device remove /dev/nvme0n1p3 /</code></pre>
<p>15 minutes later all the data was on the new <code>SSD</code>! Magic!</p>
<h2 id="the-actual-procedure">The actual procedure</h2>
<p>It required a tiny bit of extra work to handle partitioning on a new
device and <code>EFI</code> <code>vfat</code> partition move.</p>
<p>Here is the sequence I used:</p>
<ol type="1">
<li><p>Plug a new device in, it detected as <code>/dev/nvme1n1</code>.</p></li>
<li><p>Partition new device:</p>
<pre><code># fdisk /dev/nvme1n1
g; n; 1; 2048 (default); +4G; t; 1 (EFI); n; 2; w</code></pre>
<p>Here we create 2 partitions: 4G <code>EFI</code> and the rest on Linux.</p></li>
<li><p>Format <code>EFI</code> partition:</p>
<pre><code># mkfs.fat -F 32 /dev/nvme1n1p1</code></pre></li>
<li><p>Sync <code>EFI</code> data to the new partition:</p>
<pre><code># mkdir /new-boot
# mount /dev/nvme1n1p1 /new-boot
# rsync -av /boot/ /new-boot/
# umount /new-boot
# rmdir /new-boot</code></pre></li>
<li><p>Update <code>/etc/nixos/hardware-configuration.nix</code> to point <code>EFI</code>
partition to the new <code>device = "/dev/disk/by-uuid/ABCD-1234";</code></p></li>
<li><p><strong>Migrate the root filesystem</strong>:</p>
<pre><code># btrfs device add    /dev/nvme1n1p2 /
# btrfs device remove /dev/nvme0n1p3 /</code></pre></li>
<li><p>Rebuild boot loader configuration and reinstall it:</p>
<pre><code># nixops-rebuild switch --install-bootloader</code></pre></li>
<li><p>Reboot the machine.</p></li>
</ol>
<p>Done!</p>
<p>It took 15 minutes to remove the device and evacuate all the data out.</p>
<p>A snapshot of migration state somewhere in the middle of the process:</p>
<pre><code># btrfs fi show /
Label: none  uuid: abcdef12-...
        Total devices 2 FS bytes used 201.63GiB
        devid    1 size 0.00B used 64.03GiB path /dev/nvme0n1p3
        devid    2 size 1.86TiB used 141.00GiB path /dev/nvme1n1p2</code></pre>
<p>Note how to-be-removed device had <code>size 0.00B</code> while it still had to
drain <code>64G</code> of data.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>btrfs</code> device handling is magic! It does not matter if the new device
is smaller or larger than existing one: you add bytes to the pool and
new block groups get allocated there. Deleting old devices is also
straightforward: evacuated device stops being used for new object
allocation and existing block groups are evacuated to other devices.</p>
<p><code>btrfs device remove</code> wipes filesystem superblock and removes the device
from device tree of filesystem once data is fully drained. There is no
easy way to access data on the old device after the move. It is slightly
scary but has it’s charm as well: there is no chance to accidentally
mount old device and use it as new for a while.</p>
<p>By default <code>NixOS</code> uses <code>/dv/disk/by-uuid/...</code> device paths:</p>
<pre><code>$ cat /etc/fstab
/dev/disk/by-uuid/abcdef12-1dbb-... / btrfs x-initrd.mount,subvol=nixos,noatime,compress=zstd 0 0
/dev/disk/by-uuid/ABCD-1234 /boot vfat umask=1022,quiet,codepage=866,iocharset=utf8,dmask=1022,fmask=1133 0 2</code></pre>
<p>That means device rename and move on <code>btrfs</code> is transparent to the
configuration as <code>UUID</code> gets preserved on new device addition.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Fri, 15 Dec 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/307-upgrading-an-ssd.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>gcc-14 bugs, pile 3</title>
    <link>http://trofi.github.io/posts/306-gcc-14-bug-pile-3.html</link>
    <description><![CDATA[<p>This week <a href="https://gcc.gnu.org/pipermail/gcc/2023-November/242898.html">GCC 14 entered stage 3</a>.
Most major features are already pushed to <code>master</code> branch and the main
focus now is to stabilize the result.</p>
<p>It’s a good time to look at bugs I noticed over past two months. This
time I saw <code>19</code> of those. That almost twice as much than over
<a href="http://trofi.github.io/posts/296-gcc-14-bugs-pile-2.html">previous 2 months</a>.</p>
<h2 id="summary">summary</h2>
<p>Bugs (or patches) in the order I observed them:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR111435">tree-optimization/111435</a>: <code>ICE</code> on
<code>gcc</code> code (<code>-m32</code>) due to infinite recursion in type conversion
rule</li>
<li><a href="https://gcc.gnu.org/PR111527">driver/111527</a>: <code>gcc</code> hits environment
size limit early due to an internal <code>COLLECT_GCC_OPTIONS</code> variable</li>
<li><a href="https://gcc.gnu.org/PR111619">rtl-optimization/111619</a>:
<code>make profiledbootstrap</code> is very slow to build in unoptimized builds</li>
<li><a href="https://gcc.gnu.org/PR111629">other/111629</a>: <code>make profiledbootstrap</code>
<code>SIGSEGV</code>s <code>gcc</code> on shutdown due to a <code>ggc</code> bug</li>
<li><a href="https://gcc.gnu.org/PR111642">bootstrap/111642</a>:
<code>make profiledbootstrap</code> fails to type check <code>gcc</code>’s own <code>poly_int64</code> constructor</li>
<li><a href="https://gcc.gnu.org/PR111647">c++/111647</a>: <code>-fchecking=0/2</code> disagree
on validity of <code>IFNDR</code> <code>c++</code> handling</li>
<li><a href="https://gcc.gnu.org/PR111653">bootstrap/111653</a>: <code>-fchecking=0/2</code>
generate different code on the same input</li>
<li><a href="https://gcc.gnu.org/pipermail/gcc-patches/2023-October/633948.html"><code>libgcc</code> trampoline build fix</a>:
<code>libgcc</code> build failure in <code>libc</code>-less mode</li>
<li><a href="https://gcc.gnu.org/PR112107">rtl-optimization/112107</a>: bootstrap
failure on <code>i686-linux</code>: enabling debug changed register allocator output</li>
<li><a href="https://gcc.gnu.org/PR112321">middle-end/112321</a>: <code>gcc</code> <code>SIGSEGV</code> in
<code>debug</code> mode as it generated invalid objects</li>
<li><a href="https://gcc.gnu.org/PR112332">target/112332</a>: <code>ICE</code> in <code>gcc</code> when it
attempted to use <code>SIMD</code> instruction for stack access</li>
<li><a href="https://gcc.gnu.org/PR112347">c/112347</a>: <code>ICE</code> on <code>jemalloc</code> in newly
added <code>-Walloc-size</code> analysis</li>
<li><a href="https://gcc.gnu.org/PR112379">bootstrap/112379</a>: bootstrap builds
failure: unused function when asserts are disabled (code under <code>#ifdef</code>)</li>
<li><a href="https://gcc.gnu.org/PR112467">libstdc++/112467</a>: <code>__assume__</code> in
<code>libstdc++</code> broke <code>clang</code> usage of that library</li>
<li><a href="https://gcc.gnu.org/PR112523">target/112523</a>: <code>mpfr</code>, <code>libsodium</code> and
<code>unbound</code> tests were failing for an invalid <code>shrd</code> instruction use</li>
<li><a href="https://gcc.gnu.org/PR112540">target/112540</a>: <code>gstreamer</code> <code>ICE</code> in
<code>RTL</code> (invalid addressing mode for <code>SIMD</code>)</li>
<li><a href="https://gcc.gnu.org/PR112567">target/112567</a>: <code>linux</code> ICE on <code>RTL</code>
due to <code>gcc</code> generating invalid objects</li>
<li><a href="https://gcc.gnu.org/PR112601">ipa/112601</a>: <code>ICE</code> on <code>llvm-17.0.5</code>
code in <code>-fchecking=2</code> mode related to function attribute inference</li>
<li><a href="https://gcc.gnu.org/PR112613">target/112613</a>: bad code in comparison
code when <code>AVX2</code> registers are present in generated code</li>
</ul>
<h2 id="fun-discovery">fun discovery</h2>
<p>I found a few new things as part of poking at those bugs:</p>
<p><a href="https://en.cppreference.com/w/cpp/language/acronyms">IFNDR</a> “Ill-Formed,
No Diagnostic Required” is the known invalid code from type checking
standpoint that is allowed to be compiled. In this case the whole
program has an undefined behaviour.</p>
<p><code>-Walloc-size</code> added in <a href="https://gcc.gnu.org/PR71219">PR71219</a> detects
interesting cases of <code>T * p = malloc(sz)</code> calls when it’s clear that <code>sz</code>
is smaller than <code>sizeof(T)</code>. It also works on <code>calloc()</code> and already
found a few benign instances in
<a href="https://sourceware.org/git/?p=elfutils.git;a=commitdiff;h=fb232b56ca4dc37a70fd4e581a0fc2c56dda5e0a">elfutils</a>,
<a href="https://gitlab.freedesktop.org/mstoeckl/waypipe/-/merge_requests/19">waypipe</a>,
<a href="https://github.com/swaywm/sway/commit/020a572ed615b8fe272c7566a27ee0abe73a58d7">sway</a>
and
<a href="https://github.com/swaywm/swaybg/commit/435be14610a4b4538adc6a926160ed434ff630fa">swaybg</a>.</p>
<h1 id="histograms">histograms</h1>
<p>Looking at the bug categories:</p>
<ul>
<li><code>target</code>: 5</li>
<li><code>bootstrap</code>: 3</li>
<li><code>rtl-optimization</code>: 2</li>
<li><code>tree-optimization</code>: 1</li>
<li><code>driver</code>: 1</li>
<li><code>other</code>: 1</li>
<li><code>c++</code>: 1</li>
<li><code>middle-end</code>: 1</li>
<li><code>ipa</code>: 1</li>
<li><code>c</code>: 1</li>
<li><code>libstdc++</code>: 1</li>
<li><code>libgcc</code>: 1</li>
</ul>
<p>This cycle was very unusual: it has more bugs than I expected, it spans
over 12 categories of compiler components, most of bugs are in <code>i386</code>
target.</p>
<h1 id="parting-words">parting words</h1>
<p>This cycle felt very busy: about 2-3 bugs per week.</p>
<p>I had a lot of joy fixing <a href="http://trofi.github.io/posts/301-another-gcc-profiling-bug.html"><code>PGO</code> bootstrap</a>
and submitting a few trivial fixes upstream.</p>
<p>I encountered only two bugs related to wrong code generated by <code>gcc</code>.
Most of the bugs were compiler crashes which are a lot easier to detect,
report and fix. Chances are I did not get to running enough test suites
as there were so many obvious bugs that required some attention.</p>
<p>Let’s see what stage 3 will bring us.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 22 Nov 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/306-gcc-14-bug-pile-3.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>fuzzing duperemove</title>
    <link>http://trofi.github.io/posts/305-fuzzing-duperemove.html</link>
    <description><![CDATA[<p><a href="https://github.com/markfasheh/duperemove/releases/tag/v0.14"><code>duperemove-0.14</code></a>
was released yesterday and included a few small fixes I wrote about
<a href="http://trofi.github.io/posts/304-duperemove-speedups.html">before</a>.</p>
<p>On top of that the new release contains an overhauled parallel file
scanner and database handler that scale a lot better on large files.</p>
<h2 id="new-crashes">new crashes</h2>
<p>Unfortunately recent changes also increased complexity of handling
deduplication queue in a way that caused occasional crashes like
asserts in <code>dedupe_extent_list()</code> at
<a href="https://github.com/markfasheh/duperemove/issues/329"><code>run_dedupe.c:448</code></a>.</p>
<p>In that case my typical dedupe run started crashing as:</p>
<pre><code># duperemove -q --batchsize=0 --dedupe-options=partial,same -rd --hashfile=/run/duperemove/root-dupes.db /
...
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
ERROR: run_dedupe.c:287
[stack trace follows]
/nix/store/528cmbj5wnz37llwkfwxjxj3j41ng0gi-duperemove-0.14/bin/duperemove(print_stack_trace+0x2e) [0x409aee]
/nix/store/528cmbj5wnz37llwkfwxjxj3j41ng0gi-duperemove-0.14/bin/duperemove() [0x40d2dc]
/nix/store/7wkspba8d5i28bw0jfxyi3c70wrw2512-glib-2.76.4/lib/libglib-2.0.so.0(+0x8b06a) [0x7f906e45006a]
/nix/store/7wkspba8d5i28bw0jfxyi3c70wrw2512-glib-2.76.4/lib/libglib-2.0.so.0(+0x8a71d) [0x7f906e44f71d]
/nix/store/qn3ggz5sf3hkjs2c797xf7nan3amdxmp-glibc-2.38-27/lib/libc.so.6(+0x8b084) [0x7f906e038084]
/nix/store/qn3ggz5sf3hkjs2c797xf7nan3amdxmp-glibc-2.38-27/lib/libc.so.6(+0x10d60c) [0x7f906e0ba60c]

/nix/store/b86jv7hh4656xf60mby91w7a93wi4h03-remove-dupes.bash: line 12: 405268 Aborted                 (core dumped) SQLITE_TMPDIR=/run/duperemove /nix/store/528cmbj5wnz37llwkfwxjxj3j41ng0gi-duperemove-0.14/bin/duperemove -q --batchsize=0 --dedupe-options=partial,same -rd --hashfile=/run/duperemove/root-dupes.db /

duperemove-root.service: Main process exited, code=exited, status=134/n/a
duperemove-root.service: Failed with result 'exit-code'.
Failed to start duperemove-root.service.
duperemove-root.service: Consumed 34min 12.755s CPU time, no IP traffic.</code></pre>
<p>It took 30 minutes of CPU time (and about 10 minutes of real time) to
only crash later.</p>
<h2 id="crash-location">crash location</h2>
<p>I poked a bit around the crash in <code>gdb</code> to find that failure happens
somewhere in the middle of <a href="https://github.com/markfasheh/duperemove/blob/v0.14/run_dedupe.c#L274"><code>dedupe_extent_list()</code></a>.
It’s a seemingly simple but big function:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> dedupe_extent_list<span class="op">(</span><span class="kw">struct</span> dupe_extents <span class="op">*</span>dext<span class="op">,</span> <span class="dt">uint64_t</span> <span class="op">*</span>fiemap_bytes<span class="op">,</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>                              <span class="dt">uint64_t</span> <span class="op">*</span>kern_bytes<span class="op">,</span> <span class="dt">unsigned</span> <span class="dt">long</span> <span class="dt">long</span> passno<span class="op">)</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> last <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> dedupe_ctxt <span class="op">*</span>ctxt <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    list_for_each_entry<span class="op">(</span>extent<span class="op">,</span> <span class="op">&amp;</span>dext<span class="op">-&gt;</span>de_extents<span class="op">,</span> e_list<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>list_is_last<span class="op">(&amp;</span>extent<span class="op">-&gt;</span>e_list<span class="op">,</span> <span class="op">&amp;</span>dext<span class="op">-&gt;</span>de_extents<span class="op">))</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>            last <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(...)</span> <span class="op">{</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ...</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>ctxt <span class="op">&amp;&amp;</span> last<span class="op">)</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                <span class="cf">goto</span> run_dedupe<span class="op">;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>            <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>ctxt <span class="op">==</span> NULL<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            ctxt <span class="op">=</span> new_dedupe_ctxt<span class="op">(</span>dext<span class="op">-&gt;</span>de_num_dupes<span class="op">,</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>                                   tgt_extent<span class="op">-&gt;</span>e_loff<span class="op">,</span> len<span class="op">,</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>                                   tgt_extent<span class="op">-&gt;</span>e_file<span class="op">);</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ...</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>tgt_extent <span class="op">==</span> extent<span class="op">)</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>                <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ...</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(...)</span> <span class="op">{</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ...</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(!</span>last<span class="op">)</span></span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>                <span class="cf">continue</span><span class="op">;</span></span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>run_dedupe<span class="op">:</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>close_files<span class="op">:</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>        filerec_close_open_list<span class="op">(&amp;</span>open_files<span class="op">);</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>        free_dedupe_ctxt<span class="op">(</span>ctxt<span class="op">);</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>        ctxt <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>    abort_on<span class="op">(</span>ctxt <span class="op">!=</span> NULL<span class="op">);</span> <span class="co">// we fail here</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>duperemove</code> fails at <code>abort_on(ctxt != NULL);</code> assertion. The intent
of the assert seems straightforward: <code>ctxt</code> is expected to be created
within <code>list_for_each_entry()</code> loop and is destroyed before we exit the
loop.</p>
<p>There is a bit of logic that tries to track if we are in the last
element of the loop to make sure we clean up properly.</p>
<p>From a quick glance I was not able to figure out why <code>duperemove</code> crashes
on my input. What is worse: running <code>duperemove</code> with
<code>--io-threads=1 --cpu-threads=1</code> options to decrease parallelism and to
simplify deduplication sequence started triggering an unrelated
<code>abort_on()</code> in the same function.</p>
<p>That means there not just one but a few different cases that manage to
break <code>duperemove</code>.</p>
<h2 id="building-a-reproducer">building a reproducer</h2>
<p>As the scan takes at least 10 minutes on my input data I wondered if I
could extract a smaller example to present for upstream.</p>
<p>At first I though of crafting the files on the file system in a
particular way to match the way <code>duperemove</code> breaks for me. But I also
felt it would be a tedious task.</p>
<p>Before actually trying to extract the first crash example I got an idea
of fuzzing <code>duperemove</code>. In theory a simple sequence of random
actions against a file system to create interesting enough file state
would be able to create a lot more interesting scenarios than I have.
Maybe I’ll get something that crashes <code>duperemove</code> faster?</p>
<p>I though if the following operations for the fuzzer:</p>
<ol type="1">
<li>create a brand new file with a few (<code>4</code>) unique non-dedupable blocks</li>
<li>copy full existing file contents with or without reflinking into a new file</li>
<li>copy one random block from one random file to another random file</li>
<li>run <code>duperemove</code> on the current state</li>
</ol>
<p><strong>Quick quiz</strong>: If we execute these actions at random, how long would it
take to crash <code>duperemove</code>? A second, a minute, a day or never?</p>
<p>Here is the direct <code>bash</code> implementation of the fuzzer described above:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="va">duperemove_binary</span><span class="op">=</span><span class="va">$1</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="va">target_dir</span><span class="op">=</span><span class="va">$2</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="bu">shift</span><span class="kw">;</span> <span class="bu">shift</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-z</span> <span class="va">$duperemove_binary</span> <span class="kw">]]</span> <span class="kw">||</span> <span class="kw">[[</span> <span class="ot">-z</span> <span class="va">$target_dir</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="bu">echo</span> <span class="st">&quot;Usage: </span><span class="va">$0</span><span class="st"> &lt;/abs/path/to/duperemove&gt; &lt;directory&gt; [duperemove opts]&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="bu">exit</span> 1</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="cf">fi</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co"># fail on any error</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="bu">set</span> <span class="at">-e</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> <span class="st">&quot;</span><span class="va">$target_dir</span><span class="st">&quot;</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> <span class="st">&quot;</span><span class="va">$target_dir</span><span class="st">&quot;</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="bu">shopt</span> <span class="at">-s</span> nullglob</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="bu">:</span><span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="fu">sync</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    <span class="va">files</span><span class="op">=</span><span class="va">(</span><span class="pp">*</span><span class="va">)</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    <span class="va">f_count</span><span class="op">=</span><span class="va">${</span><span class="op">#</span><span class="va">files</span><span class="op">[@]</span><span class="va">}</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    <span class="va">dst</span><span class="op">=</span><span class="va">$f_count</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="va">$((RANDOM</span> <span class="op">%</span> <span class="dv">4</span><span class="va">))</span> <span class="kw">in</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        <span class="ss">0</span><span class="kw">)</span>  <span class="co"># copy existing file</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>            <span class="kw">[[</span> <span class="va">$f_count</span> <span class="ot">-eq</span> 0 <span class="kw">]]</span> <span class="kw">&amp;&amp;</span> <span class="cf">continue</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>            <span class="va">cp_arg</span><span class="op">=</span><span class="st">&quot;&quot;</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>            <span class="cf">case</span> <span class="va">$((RANDOM</span> <span class="op">%</span> <span class="dv">2</span><span class="va">))</span> <span class="kw">in</span></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>                <span class="ss">0</span><span class="kw">)</span> <span class="va">cp_arg</span><span class="op">=</span>--reflink=always<span class="cf">;;</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>                <span class="ss">1</span><span class="kw">)</span> <span class="va">cp_arg</span><span class="op">=</span>--reflink=never<span class="cf">;;</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>            <span class="cf">esac</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>            <span class="va">src</span><span class="op">=</span><span class="va">$((RANDOM</span> <span class="op">%</span> <span class="va">f_count))</span></span>
<span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>            <span class="fu">cp</span> <span class="at">-v</span> <span class="st">&quot;</span><span class="va">$cp_arg</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">$src</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span></span>
<span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>            <span class="cf">;;</span></span>
<span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>        <span class="ss">1</span><span class="kw">)</span> <span class="co"># create new file of 4x4KB distinct blocks</span></span>
<span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>            <span class="bu">printf</span> <span class="st">&quot;0%*d&quot;</span> 4095 <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span>  <span class="op">&gt;</span> <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span></span>
<span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>            <span class="bu">printf</span> <span class="st">&quot;1%*d&quot;</span> 4095 <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span> <span class="op">&gt;&gt;</span> <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span></span>
<span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>            <span class="bu">printf</span> <span class="st">&quot;2%*d&quot;</span> 4095 <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span> <span class="op">&gt;&gt;</span> <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span></span>
<span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>            <span class="bu">printf</span> <span class="st">&quot;3%*d&quot;</span> 4095 <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span> <span class="op">&gt;&gt;</span> <span class="st">&quot;</span><span class="va">$dst</span><span class="st">&quot;</span></span>
<span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>            <span class="cf">;;</span></span>
<span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>        <span class="ss">2</span><span class="kw">)</span> <span class="co"># run duperemove</span></span>
<span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;</span><span class="va">$duperemove_binary</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span> <span class="at">-rd</span> <span class="at">-b</span> 4096 <span class="st">&quot;</span><span class="va">$target_dir</span><span class="st">&quot;</span></span>
<span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>            <span class="cf">;;</span></span>
<span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>        <span class="ss">3</span><span class="kw">)</span> <span class="co"># dd 4KB of one file into another</span></span>
<span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>            <span class="kw">[[</span> <span class="va">$f_count</span> <span class="ot">-eq</span> 0 <span class="kw">]]</span> <span class="kw">&amp;&amp;</span> <span class="cf">continue</span></span>
<span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>            <span class="va">src</span><span class="op">=</span><span class="va">$((RANDOM</span> <span class="op">%</span> <span class="va">f_count))</span></span>
<span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>            <span class="va">dst</span><span class="op">=</span><span class="va">$((RANDOM</span> <span class="op">%</span> <span class="va">f_count))</span></span>
<span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>            <span class="kw">[[</span> <span class="va">$src</span> <span class="ot">=</span> <span class="va">$dst</span> <span class="kw">]]</span> <span class="kw">&amp;&amp;</span> <span class="cf">continue</span></span>
<span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a>            <span class="va">src_block</span><span class="op">=</span><span class="va">$((RANDOM</span> <span class="op">%</span> <span class="dv">3</span><span class="va">))</span></span>
<span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a>            <span class="va">dst_block</span><span class="op">=</span><span class="va">$((RANDOM</span> <span class="op">%</span> <span class="dv">3</span><span class="va">))</span></span>
<span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>            <span class="fu">dd</span> <span class="st">&quot;if=</span><span class="va">$src</span><span class="st">&quot;</span> <span class="st">&quot;iseek=</span><span class="va">$src_block</span><span class="st">&quot;</span> <span class="st">&quot;of=</span><span class="va">$dst</span><span class="st">&quot;</span> <span class="st">&quot;oseek=</span><span class="va">$dst_block</span><span class="st">&quot;</span> bs=4096 count=1</span>
<span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a>            <span class="cf">;;</span></span>
<span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a>    <span class="cf">esac</span></span>
<span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span></code></pre></div>
<p>Specifically we always create <code>16KB</code> files and move <code>4KB</code> blocks around
to make sure <code>duperemove</code> considers them as a whole. We also pass
<code>-b 4096</code> block size as default block size is <code>128KB</code>.</p>
<p>And now goes the quiz answer:</p>
<pre><code>$ time { rm -rfv ~/tmp/dr/ &amp;&amp; bash ./duperemove-fuzz.bash $PWD/duperemove/duperemove ~/tmp/dr -q; }
...
Simple read and compare of file data found 12 instances of files that might benefit from deduplication.
ERROR: run_dedupe.c:287
[stack trace follows]
/home/slyfox/dev/git/duperemove/duperemove(print_stack_trace+0x29) [0x409b39]
/home/slyfox/dev/git/duperemove/duperemove() [0x40d844]
/nix/store/6bpc4sc5apc2ryxhjyij43n3wi169hfn-glib-2.76.4/lib/libglib-2.0.so.0(+0x8ad72) [0x7f8da7b47d72]
/nix/store/6bpc4sc5apc2ryxhjyij43n3wi169hfn-glib-2.76.4/lib/libglib-2.0.so.0(+0x8a41d) [0x7f8da7b4741d]
/nix/store/znf2bj54q3qj4pyk0xbp7pk12xbxq07b-glibc-2.38-27/lib/libc.so.6(+0x908b1) [0x7f8da77278b1]
/nix/store/znf2bj54q3qj4pyk0xbp7pk12xbxq07b-glibc-2.38-27/lib/libc.so.6(+0x114e6c) [0x7f8da77abe6c]
./duperemove-fuzz.bash: line 27: 264572 Aborted                 (core dumped) &quot;$duperemove_binary&quot; &quot;$@&quot; -rd -b 4096 &quot;$target_dir&quot;

real    0m3.354s
user    0m0.530s
sys     0m1.500s</code></pre>
<p>3 seconds!</p>
<p>I’m not always as lucky: sometimes it takes 2 seconds, sometimes as much
as 8 seconds. It feels like a very good result for such a dumb script.</p>
<h2 id="parting-words">parting words</h2>
<p><code>duperemove</code> has a non-trivial state machine to track extent state to
avoid multiple deduplication attempts. It clearly has a few bugs like
<a href="https://github.com/markfasheh/duperemove/issues/329">issue #329</a>.</p>
<p>Fuzzing works great for a small set of well defined operations. I picked
a minimal subset of operations to trigger the failures.</p>
<p>The fuzzer does not exercise other interesting operations like hardlinks
creation, file removal or larger files with more interesting extent
sharing structure. There is still more room for improvement to get into
darker corners of state tracking in <code>duperemove</code>.</p>
<p>I will not have much time debugging specifics of these <code>duperemove</code>
crashes in the following days. Try to fix these crashes yourself!</p>
<p>Have fun!</p>]]></description>
    <pubDate>Tue, 21 Nov 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/305-fuzzing-duperemove.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>duperemove speedups</title>
    <link>http://trofi.github.io/posts/304-duperemove-speedups.html</link>
    <description><![CDATA[<p><a href="https://github.com/markfasheh/duperemove/"><code>duperemove</code></a> is a great
tool to reduce on-disk file redundancy for file systems that support
data sharing across files. Currently <code>duperemove</code> supports only <code>btrfs</code>
and <code>xfs</code>.</p>
<h2 id="initial-user-experience">initial user experience</h2>
<p>I started using <code>duperemove</code> around version <code>0.9</code> when I started keeping
multiple <code>chroot</code> environments for various Linux distributions. I had
about 15 instances of various systems:</p>
<pre><code>/chroot/gentoo-amd64-multilib/{bin,lib,usr,...}
/chroot/gentoo-amd64-O3/{bin,lib,usr,...}
/chroot/gentoo-amd64-lto/{bin,lib,usr,...}
/chroot/gentoo-i686/{bin,lib,usr,...}
/chroot/debian-sid/{bin,lib,usr,...}
...</code></pre>
<p>Some of the files had identical or mostly identical content across
systems. The typical source of duplicates would be a
<code>/usr/lib/locale/locale-archive</code> file. Today it contains <code>~200MB</code> worth
of locales on systems with complete set of locales. Another source is
huge dumps of translation files in <code>/usr/share/locale</code>.</p>
<p>As I used <code>btrfs</code> I ran <code>duperemove</code> time to time on a <code>/chroot</code>
directory to claw back a bit of storage eaten by these duplicates. I had
a spinning disk at the time and I was amazed by the speed that
<code>duperemove</code> took to do it’s magic.</p>
<h2 id="more-recent-usage-attempt">more recent usage attempt</h2>
<p>A few years later I got an <code>NVMe</code> <code>SSD</code> storage and started using <code>nix</code>
extensively to build a lot of packages. <code>nix</code> can produce quite a bit of
duplication when building package with minimal changes:</p>
<pre><code>$ ls -1d /nix/store/????????????????????????????????-glibc-2.38-27
/nix/store/4jyz743dan9fn8b53cdxl5fyld2hkaby-glibc-2.38-27
/nix/store/as01fdk2w1605lr3lmpqpwa1xan17gbd-glibc-2.38-27
/nix/store/d9bhmzah59gzbm7bkki7i8fm0p4nyiyv-glibc-2.38-27
/nix/store/iwnxvprzvymiigxds0pw53sxg11m4azk-glibc-2.38-27
/nix/store/ldavvsk4f57lmw816ch0c4v82hf6ww8g-glibc-2.38-27
/nix/store/mk28ys1qrw7mb04psrnmr0p56bxw3g54-glibc-2.38-27
/nix/store/pnnqn1gh3jd7imjjyibgf8r0n0zjrxf5-glibc-2.38-27
/nix/store/ps99gh0kq7yar94ap6ya6d2av2rfa8dz-glibc-2.38-27
/nix/store/qn3ggz5sf3hkjs2c797xf7nan3amdxmp-glibc-2.38-27
/nix/store/qpspr9zw4vxq6fq3rc1izqsglk497m67-glibc-2.38-27
/nix/store/wrv286x4aldgbj6gjl15qn8pl233zrsx-glibc-2.38-27
/nix/store/y2yvsr2gb27ixz8mc42ry4q6lpasl0fk-glibc-2.38-27

$ ls -1d /nix/store/????????????????????????????????-firefox-119.0.1
/nix/store/c3c387alqga9b9s0r4n064d6kkan07dy-firefox-119.0.1
/nix/store/ck5k36nn46vbpc534hvncbana2rmdpxj-firefox-119.0.1
/nix/store/qx36d083630w1ksp3n38avsyk52zxf9j-firefox-119.0.1
/nix/store/r4cjmc042q18bi7xg2jmcxqs8nzl4fr9-firefox-119.0.1
/nix/store/s2qiq9xszj4k7z64ri3lrl1hwqa48v3p-firefox-119.0.1
/nix/store/zns8fsz0c7adk7aw1x11kal6235jxxya-firefox-119.0.1</code></pre>
<p>Sometimes two versions of a package build only differ in the embedded
paths of their dependencies: it’s a 32 byte difference between <code>ELF</code>
files. For the example above <code>duperemove</code> quickly spots the similarity:</p>
<pre><code>$ duperemove -b4096 --batchsize=0 -q --dedupe-options=partial -rd /nix/store/????????????????????????????????-glibc-2.38-27

Simple read and compare of file data found 1174 instances of files that might benefit from deduplication.
Comparison of extent info shows a net change in shared extents of: 266229126
Found 133 identical extents.
[########################################]
Search completed with no errors.
Simple read and compare of file data found 114 instances of extents that might benefit from deduplication.
Comparison of extent info shows a net change in shared extents of: 2183168
Total files scanned:  10636</code></pre>
<p>Here <code>duperemove</code> managed to deduplicate <code>70%</code> (<code>253MB</code> out of <code>357MB</code>
considered) in the extent pass comparison. And the extracted extra <code>2MB</code>
of duplicates when considered <code>4KB</code> blocks within different extents.</p>
<p>I decided to try <code>duperemove</code> on the whole of my <code>/nix/store</code> directory.
I ran <code>duperemove-0.11</code> and got failures related to exhausted file
descriptors: <code>duperemove</code> ran with <code>32x</code> parallelism and was able to hit
<code>4096</code> open files. That was easy to fix by
<a href="https://github.com/markfasheh/duperemove/pull/269">raising the file limit</a>.
I think it worked as fast as before.</p>
<p>But a while after I ran <code>duperemove-0.13</code> against <code>/nix/store</code>. 2 hours
later I found that it did not finish and ate <code>100%</code> of the CPU. That was
unexpected.</p>
<p>I was not sure if it was a particular file that was causing trouble or
the sheer load on <code>duperemove</code> that made it degrade so much under the
load.</p>
<p>I attempted to run <code>duperemove</code> in incremental mode and found out that
it rescans all the files on the database on each run effectively making
the incremental mode quadratic. I filed <a href="https://github.com/markfasheh/duperemove/issues/303">a bug</a>
to see if it could be fixed.</p>
<p>Jack implemented incremental mode the same day! I tried it and saw an
improvement. But the result was still too slow to run on the whole of
<code>/nix/store</code> within a day. I could not easily pinpoint the problem of
<code>100%</code> CPU usage on my workloads.</p>
<h2 id="duperemove-complexity-intuition"><code>duperemove</code> complexity intuition</h2>
<p>What are the <code>duperemove</code>’s scaling limits? I had about <code>4 million</code>
files taking <code>300GB</code> of storage in <code>/nix/store</code> on <code>NVMe</code> device.</p>
<p>Quick quiz: How long should it take to dedupe that data you would say? A
minute, an hour, a day?</p>
<p>In theory all it takes to do is to read all the data out, checksum it
and attempt the deduplication on identified candidates. Should be an
IO-bound problem without too many random reads.</p>
<p>Given that <code>duperemove</code> has an optional <code>sqlite</code> database to persist
details about previous runs it even skips data read of the files it
already processed.</p>
<p>If we have a reasonable fast IO storage capable of 1GB/s of sequential
read throughput then it should ideally take about <code>300GB / 1GB/s = ~5 minutes</code>. And on top of that there should be some minor overhead to
calculate checksums and store some state in <code>sqlite</code> database. That was
my naive reasoning :)</p>
<p>Practice showed that <code>duperemove</code> found the CPU-heavy work to do for
hours on my machine.</p>
<h2 id="synthetic-tests">synthetic tests</h2>
<p>I ran <code>perf top</code> and noticed that <code>duperemove</code> showed unusual reading on
various stages of a run: at one point most of the time was spent in
<code>sqlite</code> internals, at another one some <code>rb_next()</code> function took most
of the time. I did not expect such things in an IO-mostly workload.</p>
<p>As it was not very convenient to experiment with <code>duperemove</code>’s
behaviour on real data I tried to throw synthetic workloads at it.</p>
<p>I started simple: created <code>100 thousands</code> files of <code>1KB</code> size and ran
<code>duperemove</code> at it:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> <span class="st">&quot;Creating directory structure, will take a minute&quot;</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="fu">mkdir</span> dd</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> d <span class="kw">in</span> <span class="kw">`</span><span class="fu">seq</span> 1 100<span class="kw">`;</span> <span class="cf">do</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">mkdir</span> dd/<span class="va">$d</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> f <span class="kw">in</span> <span class="kw">`</span><span class="fu">seq</span> 1 1000<span class="kw">`;</span> <span class="cf">do</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="bu">printf</span> <span class="st">&quot;%*s&quot;</span> 1024 <span class="st">&quot;</span><span class="va">$f</span><span class="st">&quot;</span> <span class="op">&gt;</span> dd/<span class="va">$d</span>/<span class="va">$f</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">done</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="fu">sync</span></span></code></pre></div>
<p>How long should it take to run? Maybe 1-2 seconds? Alas running it for
real showed the following:</p>
<pre><code>$ time ./duperemove -q -rd dd/
...
Nothing to dedupe.
Total files scanned:  100000
real    0m39,835s
user    1m54,903s
sys     0m8,922s</code></pre>
<p>Almost <code>40 seconds</code> of real time and almost <code>2 minutes</code> of user time
(<code>duperemove</code> runs some actions in parallel) to process <code>100MB</code> of data.</p>
<p>But what did <code>duperemove</code> do all that time? Let’s ask <code>perf</code>:</p>
<pre><code>$ perf record ./duperemove -q -rd dd/
$ perf report

# Overhead  Command       Shared Object            Symbol
# ........  ............  .......................  ...........................................
#
    70.81%  pool          libc.so.6                [.] __memset_avx2_unaligned_erms
     2.14%  duperemove    libsqlite3.so.0.8.6      [.] sqlite3VdbeExec
     0.97%  pool          libsqlite3.so.0.8.6      [.] sqlite3VdbeExec
     0.58%  pool          libc.so.6                [.] __memmove_avx_unaligned_erms
...</code></pre>
<p>Vast majority of the CPU time it spent in <code>memset()</code>!</p>
<h2 id="memset-fix"><code>memset()</code> fix</h2>
<p>There are various ways to find the <code>memset()</code> call. I took the lazy
approach to check where <code>memset()</code> is called with a large value and did
not find any offenders. Then I checked all <code>calloc()</code> calls and found
huge <code>calloc(8MB)</code> allocating temporary space to read files out. This
buffer was allocated at each new opened file.
<a href="https://github.com/markfasheh/duperemove/pull/318">The fix</a> was simple:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/file_scan.c</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/file_scan.c</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -887,7 +887,7 @@ static void csum_whole_file(struct filerec *file,</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        struct block_csum *block_hashes = NULL;</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        memset(&amp;csum_ctxt, 0, sizeof(csum_ctxt));</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="st">-       csum_ctxt.buf = calloc(1, READ_BUF_LEN);</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="va">+       csum_ctxt.buf = malloc(READ_BUF_LEN);</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        assert(csum_ctxt.buf != NULL);</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        csum_ctxt.file = file;</span></code></pre></div>
<p>After the fix profile looked a bit better:</p>
<pre><code>$ time perf record ./duperemove -q -rd dd/
real    0m13,046s
user    0m11,194s
sys     0m2,581s

$ perf report
...
# Overhead  Command       Shared Object            Symbol
# ........  ............  .......................  ..........................................
#
    18.71%  duperemove    libsqlite3.so.0.8.6      [.] sqlite3VdbeExec
     3.18%  pool          libsqlite3.so.0.8.6      [.] sqlite3VdbeExec
     1.95%  pool          libsqlite3.so.0.8.6      [.] sqlite3WhereBegin
     1.66%  pool          libsqlite3.so.0.8.6      [.] resolveExprStep
     1.64%  pool          libsqlite3.so.0.8.6      [.] whereLoopAddBtreeIndex
     1.52%  pool          libc.so.6                [.] __memmove_avx_unaligned_erms
     1.17%  pool          libsqlite3.so.0.8.6      [.] sqlite3_str_vappendf
     1.13%  duperemove    duperemove               [.] populate_tree
     1.10%  pool          libc.so.6                [.] _int_malloc</code></pre>
<p>That was a lot better: almost <code>3x</code> speed up just for removing a single
redundant <code>memset()</code>. It’s a safe change as <code>duperemove</code> guarantees that
it initializes the area with data from the file before calculating the
hash.</p>
<p>Now <code>sqlite</code> is at the top of our profile. Looks like the rest of <code>80%</code>
samples goes to IO wait time.</p>
<h2 id="needless-work-on-small-files">needless work on small files</h2>
<p>While the test seemed to run quickly I noticed that it complains about
dedupe attempts all the time:</p>
<pre><code>$ ./duperemove -q -rd dd/
...
Dedupe for file &quot;dd/20/426&quot; had status (1) &quot;data changed&quot;.
Dedupe for file &quot;dd/20/427&quot; had status (1) &quot;data changed&quot;.
Dedupe for file &quot;dd/20/240&quot; had status (1) &quot;data changed&quot;.
Dedupe for file &quot;dd/20/439&quot; had status (1) &quot;data changed&quot;.
Dedupe for file &quot;dd/20/377&quot; had status (1) &quot;data changed&quot;.
Dedupe for file &quot;dd/20/378&quot; had status (1) &quot;data changed&quot;.
Dedupe for file &quot;dd/20/452&quot; had status (1) &quot;data changed&quot;.
Dedupe for file &quot;dd/20/453&quot; had status (1) &quot;data changed&quot;.</code></pre>
<p>Why does <code>duperemove</code> think data has changed? Those are static files
I just created for test.</p>
<p>The answer was surprising:</p>
<ul>
<li>[good] <code>duperemove</code> skips inline extents in files as file systems can’t
deduplicate data embedded in metadata blocks</li>
<li>[bad] <code>duperemove</code> stores checksum of such files as if they were zero
bytes</li>
<li>[very bad] <code>duperemove</code> tries to deduplicate all these files as they
have identical checksum</li>
</ul>
<p>That was <a href="https://github.com/markfasheh/duperemove/pull/322">easy to fix</a>
as well:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/file_scan.c</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/file_scan.c</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -937,10 +937,19 @@ static void csum_whole_file(struct filerec *file,</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>                }</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="st">-       ret = dbfile_store_file_digest(db, file, csum_ctxt.file_digest);</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="st">-       if (ret) {</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="st">-               g_mutex_unlock(&amp;io_mutex);</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="st">-               goto err;</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="va">+       /* Do not store files with zero hashable extents. Those are</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="va">+        * usually small files inlined with extent type</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a><span class="va">+        * FIEMAP_EXTENT_DATA_INLINE. We avoid storing them as all these</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="va">+        * files have the same zero bytes checksum. Attempt to</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="va">+        * deduplicate those will never succeed and will produce a lot</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a><span class="va">+        * of needless work: https://github.com/markfasheh/duperemove/issues/316</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="va">+        */</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="va">+       if (nb_hash &gt; 0) {</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="va">+               ret = dbfile_store_file_digest(db, file, csum_ctxt.file_digest);</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="va">+               if (ret) {</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="va">+                       g_mutex_unlock(&amp;io_mutex);</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="va">+                       goto err;</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="va">+               }</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>        ret = dbfile_commit_trans(db);</span></code></pre></div>
<p>A few lines above <code>duperemove</code> calculates count of non-inline extents
with data in <code>nb_hash</code> variable. If it’s zero then checksum is zero.</p>
<p>The fix as is speeds the scan quite a bit:</p>
<pre><code>$ time ./duperemove -q -rd dd/
...
Simple read and compare of file data found 0 instances of files that might benefit from deduplication.
Nothing to dedupe.
Found 0 identical extents.
Simple read and compare of file data found 0 instances of extents that might benefit from deduplication.
Nothing to dedupe.
Simple read and compare of file data found 0 instances of files that might benefit from deduplication.
Nothing to dedupe.
Found 0 identical extents.
Simple read and compare of file data found 0 instances of extents that might benefit from deduplication.
Nothing to dedupe.
Total files scanned:  100000

real    0m7,844s
user    0m7,116s
sys     0m1,686s</code></pre>
<p>This is an extra <code>2x</code> speed up on tiny files. But we can squeeze a bit
more speed out of it. Notice repetitive <code>Found 0 identical extents</code>
entries. This happens because <code>duperemove</code> batches deduplication
attempts every <code>1024</code> files (controlled by <code>--batchsize=</code> flag). We can
crank up that flag as well:</p>
<pre><code>$ time ./duperemove --batchsize=1000000 -q -rd dd/
Simple read and compare of file data found 0 instances of files that might benefit from deduplication.
Nothing to dedupe.
Found 0 identical extents.
Simple read and compare of file data found 0 instances of extents that might benefit from deduplication.
Nothing to dedupe.
Total files scanned:  100000

real    0m5,995s
user    0m4,605s
sys     0m1,677s</code></pre>
<p>Compared to our initial <code>50s</code> runtime we got <code>~10x</code> speed up.</p>
<p>Question for the reader: what does <code>duperemove</code> do in those 5 seconds?
Is there any room for improvement here?</p>
<p>The above set of fixes sped up <code>duperemove</code> on my real <code>300GB</code> dataset
to finish in 2 minutes!</p>
<p>All done?</p>
<h2 id="dedupe-optionspartial-mode"><code>--dedupe-options=partial</code> mode</h2>
<p>When I skimmed through existing bugs on <code>duperemove</code> bug tracker I
noticed that <code>duperemove</code> only deduplicates extents of identical size
and does not try to look into individual blocks for performance reason.</p>
<p>That sounded a bit strange to me as break up of a file on extents is
quite arbitrary at least on <code>btrfs</code>. You can easily have one extent for
a huge file or a ton of really small ones.</p>
<p>I threw <code>--dedupe-options=partial</code> at <code>300GB</code> and got a CPU-bound hangup
again. An hour later I had to interrupt the process.</p>
<p>This time most of the time was spent in <code>sqlite</code> extent queries for each
individual file. Let’s looks at
<a href="https://github.com/markfasheh/duperemove/pull/324">the fix</a> to get idea
where the problem was hiding:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/dbfile.c</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/dbfile.c</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1424,9 +1424,8 @@ int dbfile_load_nondupe_file_extents(sqlite3 *db, struct filerec *file,</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>        struct file_extent *extents = NULL;</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a> #define NONDUPE_JOIN                                                   \</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="st">-       &quot;FROM extents JOIN (SELECT digest FROM extents GROUP BY digest &quot;\</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="st">-       &quot;HAVING count(*) = 1) AS nondupe_extents on extents.digest = &quot;  \</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="st">-       &quot;nondupe_extents.digest where extents.ino = ?1 and extents.subvol = ?2;&quot;</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="va">+       &quot;FROM extents where extents.ino = ?1 and extents.subvol = ?2 and &quot; \</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="va">+       &quot;(1 = (SELECT COUNT(*) FROM extents as e where e.digest = extents.digest));&quot;</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a> #define GET_NONDUPE_EXTENTS                                            \</span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>        &quot;select extents.loff, len, poff, flags &quot; NONDUPE_JOIN</span></code></pre></div>
<p>The change switches from this query:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">SELECT</span> <span class="kw">extents</span>.loff, len, poff, flags</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">FROM</span> <span class="kw">extents</span> <span class="kw">JOIN</span> (</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">SELECT</span> digest</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">FROM</span> <span class="kw">extents</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">GROUP</span> <span class="kw">BY</span> digest</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">HAVING</span> <span class="fu">count</span>(<span class="op">*</span>) <span class="op">=</span> <span class="dv">1</span>) <span class="kw">AS</span> nondupe_extents</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a><span class="kw">ON</span> <span class="kw">extents</span>.digest <span class="op">=</span> nondupe_extents.digest</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="kw">WHERE</span> <span class="kw">extents</span>.ino <span class="op">=</span> ?<span class="dv">1</span> <span class="kw">AND</span> <span class="kw">extents</span>.subvol <span class="op">=</span> ?<span class="dv">2</span>;</span></code></pre></div>
<p>To this query:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode sql"><code class="sourceCode sql"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">SELECT</span> <span class="kw">extents</span>.loff, len, poff, flags</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="kw">FROM</span> <span class="kw">extents</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="kw">WHERE</span> <span class="kw">extents</span>.ino <span class="op">=</span> ?<span class="dv">1</span> <span class="kw">AND</span> <span class="kw">extents</span>.subvol <span class="op">=</span> ?<span class="dv">2</span> <span class="kw">AND</span> (</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="dv">1</span> <span class="op">=</span> (<span class="kw">SELECT</span> <span class="fu">COUNT</span>(<span class="op">*</span>)</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>         <span class="kw">FROM</span> <span class="kw">extents</span> <span class="kw">as</span> e</span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>         <span class="kw">WHERE</span> e.digest <span class="op">=</span> <span class="kw">extents</span>.digest));</span></code></pre></div>
<p>Both queries should produce identical result and both do two things:</p>
<ol type="1">
<li>Fetch all entries from <code>extents</code> table for a given <code>inode</code> (<code>ino</code>
and <code>subvol</code>)</li>
<li>Pick only those extents that have unique digest: so that extents are
not shared and thus splitting them into smaller extents should not be
a problem.</li>
</ol>
<p>Here are both plans for both queries told by <code>sqlite</code>. Enabling plan
dump:</p>
<pre><code>$ sqlite3 /tmp/foo.db
sqlite&gt; .eqp on</code></pre>
<p>First plan:</p>
<pre><code>sqlite&gt; SELECT extents.loff, len, poff, flags
       FROM extents JOIN (
         SELECT digest
         FROM extents
         GROUP BY digest
         HAVING count(*) = 1) AS nondupe_extents
       on extents.digest =  nondupe_extents.digest
       where extents.ino = ?1 and extents.subvol = ?2;

QUERY PLAN
|--CO-ROUTINE nondupe_extents
|  `--SCAN extents USING COVERING INDEX idx_extent_digest
|--SEARCH extents USING INDEX idx_extents_inosub (ino=? AND subvol=?)
|--BLOOM FILTER ON nondupe_extents (digest=?)
`--SEARCH nondupe_extents USING AUTOMATIC COVERING INDEX (digest=?)</code></pre>
<p>Second plan:</p>
<pre><code>sqlite&gt; SELECT extents.loff, len, poff, flags
        FROM extents
        where extents.ino = ?1 and extents.subvol = ?2 and (
          1 = (SELECT COUNT(*)
              FROM extents as e
              where e.digest = extents.digest));

QUERY PLAN
|--SEARCH extents USING INDEX idx_extents_inosub (ino=? AND subvol=?)
`--CORRELATED SCALAR SUBQUERY 1
   `--SEARCH e USING COVERING INDEX idx_extent_digest (digest=?)</code></pre>
<p>The first plan is more complicated. One of it’s problems is the use of
<code>SCAN</code> (full table scan) in <code>CO-ROUTINE nondupe_extents</code>. As I understand
the output here full <code>extents</code> table scan is performed at least once for
this whole query.</p>
<p>Reading the second plan is easy: all searches use existing indexes in
the tables. We fetch all extents for the <code>inode</code> and then leave only
those that match a subquery. Subquery also uses only index lookup.</p>
<p>Now the whole non-incremental <code>duperemove</code> run on my <code>300GB</code> dataset
takes 9 minutes. And in incremental mode it takes about 4 minutes.</p>
<p>Yay!</p>
<h2 id="parting-words">Parting words</h2>
<p>It took me a few steps to get <code>duperemove</code> to work on my machines:</p>
<ul>
<li><a href="https://github.com/markfasheh/duperemove/pull/269">Increase file descriptor limit</a></li>
<li><a href="https://github.com/markfasheh/duperemove/pull/318">Avoid redundant <code>memset(8MB)</code> on file read</a></li>
<li><a href="https://github.com/markfasheh/duperemove/pull/322">Do not deduplicate inline-only files</a></li>
<li><a href="https://github.com/markfasheh/duperemove/pull/324">Avoid full table scan in <code>partial</code> mode</a></li>
</ul>
<p>This sped up <code>duperemove</code> run from multiple hours down to under 10
minutes on a few hundreds of gigabytes of small files.</p>
<p><code>duperemove</code> still has quite a bit room for improvement to get even more
performance.</p>
<p>Fun fact: <code>duperemove</code> uses two simple <code>ioctl()</code> interfaces:</p>
<ul>
<li><code>FS_IOC_FIEMAP</code> to get on-disk layout for a file:
<a href="https://docs.kernel.org/filesystems/fiemap.html" class="uri">https://docs.kernel.org/filesystems/fiemap.html</a>.</li>
<li><code>FIDEDUPERANGE</code> to deduplicate file range between two file
descriptors.</li>
</ul>
<p>Have fun!</p>]]></description>
    <pubDate>Sun, 12 Nov 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/304-duperemove-speedups.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Zero Hydra Failures towards 23.11 NixOS release</title>
    <link>http://trofi.github.io/posts/303-Zero-Hydra-Failures-towards-23.11-NixOS-release.html</link>
    <description><![CDATA[<h2 id="zhf"><code>ZHF</code></h2>
<p>The next <code>NixOS-23.11</code> will be released around the end of November.
Current development phase is called <code>Zero Hydra Failures</code> (<code>ZHF</code>): at
this time the main focus is to fix as many build failures in
<code>nixpkgs/master</code> repository as possible before the final release.</p>
<p><a href="https://github.com/NixOS/nixpkgs/issues/265948">Issue #265948</a> (and
<a href="https://discourse.nixos.org/t/zero-hydra-failure-23-11-edition/35103">the discourse topic</a>)
is the tracker where you can get hints on how to help fixing known
broken packages and review already proposed fixes.</p>
<p>It is a great time to contribute to <code>nixpkgs</code>!</p>
<p>To follow the tradition let’s fix one package here.</p>
<h2 id="newlib-example"><code>newlib</code> example</h2>
<p><a href="https://hydra.nixos.org/jobset/nixpkgs/trunk"><code>trunk jobset</code></a> shows us
about ~3800 build failure. I picked <a href="https://hydra.nixos.org/log/nv0q296sc06achvd7ljlrsn8x3qh8fg1-newlib-4.3.0.20230120.drv"><code>newlib</code> failure</a>
and will try to fix it. The install part fails there as:</p>
<pre><code>...
installing
install flags: SHELL=/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin/bash install
make[1]: Entering directory '/build/newlib-4.3.0.20230120'
/nix/store/lf0wpjrj8yx4gsmw2s3xfl58ixmqk8qa-bash-5.2-p15/bin/bash ./mkinstalldirs /nix/store/1wxhiz8jkyff6chkwp89vy85qlgvi7ij-newlib-4.3.0.20230120 /nix/store/1wxhiz8jkyff6chkwp89vy85qlgvi7ij-newlib-4.3.0.20230120
make[2]: Entering directory '/build/newlib-4.3.0.20230120/etc'
make[3]: Entering directory '/build/newlib-4.3.0.20230120/etc'
make[3]: Nothing to be done for 'install-exec-am'.
make[3]: Nothing to be done for 'install-data-am'.
make[3]: Leaving directory '/build/newlib-4.3.0.20230120/etc'
make[2]: Leaving directory '/build/newlib-4.3.0.20230120/etc'
make[1]: Nothing to be done for 'install-target'.
make[1]: Leaving directory '/build/newlib-4.3.0.20230120'
$out is empty</code></pre>
<p>I have no idea why the build fails. Let’s find out the hard way.</p>
<p><a href="https://hydra.nixos.org/build/239066832">The build tab</a> tells us
that last successful build of <code>newlib</code> was around <code>2023-06-18</code>
on <code>d9895270b775226e0fdabd7937af2d236abe4eb2</code> <code>nixpkgs</code> input. And first
failed commit was <code>8277b539d371bf4308fc5097911aa58bfac1794f</code> around
<code>2023-07-01</code>.</p>
<p>Running bisect:</p>
<pre><code>$ git bisect start 8277b539d371bf4308fc5097911aa58bfac1794f d9895270b775226e0fdabd7937af2d236abe4eb2
$ git bisect run nix build -f. newlib

commit cf1b7c4d5c027837e71d284a838fbeb05b3fcb7f
Date:   Sat Jun 24 01:13:17 2023 +0200

    newlib: fix build of nano variant on non-ARM architectures
...</code></pre>
<p>The full diff of this
<a href="https://github.com/NixOS/nixpkgs/commit/cf1b7c4d5c027837e71d284a838fbeb05b3fcb7f">commit</a>
is small an readable:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/misc/newlib/default.nix</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/misc/newlib/default.nix</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -73,10 +73,12 @@ stdenv.mkDerivation (finalAttrs: {</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>       cd $out${finalAttrs.passthru.libdir}</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>       for f in librdimon.a libc.a libg.a; do</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="st">-        cp &quot;$f&quot; &quot;''${f%%\.a}_nano.a&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="va">+        # Some libraries are only available for specific architectures.</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="va">+        # For example, librdimon.a is only available on ARM.</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="va">+        [ -f &quot;$f&quot; ] &amp;&amp; cp &quot;$f&quot; &quot;''${f%%\.a}_nano.a&quot;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>       done</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>     )</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="st">-  '';</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="va">+  '' + ''[ &quot;$(find $out -type f | wc -l)&quot; -gt 0 ] || (echo '$out is empty' 1&gt;&amp;2 &amp;&amp; exit 1)'';</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>   passthru = {</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>     incdir = &quot;/${stdenv.targetPlatform.config}/include&quot;;</span></code></pre></div>
<p>In our case of <code>newlib</code> (not <code>newlib-nano</code>) the only change is the
addition of <code>[ "$(find $out -type f | wc -l)" -gt 0 ] || (echo '$out is empty' 1&gt;&amp;2 &amp;&amp; exit 1)</code>
line. It causes build to fail if <code>$out</code> is empty. The <code>$out</code> was always
empty for <code>newlib.x86_64-linux</code>. Normally the <code>newlib</code> output contains
something only for bare-metal targets like
<code>pkgsCross.x86_64-embedded.newlib</code>.</p>
<p>Thus the fix is to constrain <code>newlib</code> to only those targets:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/misc/newlib/default.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/misc/newlib/default.nix</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -96,5 +96,9 @@ stdenv.mkDerivation (finalAttrs: {</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>     # COPYING.NEWLIB</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>     # COPYING3</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>     license = licenses.gpl2Plus;</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="va">+    # newlib frequently does ont supply any files on hosted targets like</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="va">+    # x86_64-unknown-linux-gnu: https://hydra.nixos.org/log/nv0q296sc06achvd7ljlrsn8x3qh8fg1-newlib-4.3.0.20230120.drv</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="va">+    # Let's constrain `newlib` package to bare-metal alone.</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="va">+    broken = !stdenv.hostPlatform.isNone;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a> })</span></code></pre></div>
<p>This change was proposed as <a href="https://github.com/NixOS/nixpkgs/pull/266268">PR #266268</a>.</p>
<h2 id="parting-words">Parting words</h2>
<p>Fixing package breakages are usually easier if the package used to work
at some point before. Otherwise we can always mark packages broken and
schedule them for removal.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 08 Nov 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/303-Zero-Hydra-Failures-towards-23.11-NixOS-release.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>-Ofast and -ffast-math non-local effects</title>
    <link>http://trofi.github.io/posts/302-Ofast-and-ffast-math-non-local-effects.html</link>
    <description><![CDATA[<h2 id="tldr">Tl;DR:</h2>
<p><code>-ffast-math</code> / <code>-Ofast</code> options are very tricky to use correctly:
in addition to breaking your immediate floating point arithmetic code
(which you might be prepared for) it also <strong>breaks the code not compiled
with these options</strong> but happen to be present in the same address
space:</p>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Title: G Pages: 1 -->
<svg width="355pt" height="242pt" viewBox="0.00 0.00 355.12 242.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 238)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-238 351.12,-238 351.12,4 -4,4"></polygon>
<!-- libfoo.so -->
<g id="node1" class="node">
<title>libfoo.so</title>
<polygon fill="none" stroke="black" points="133.75,-230.75 0,-230.75 0,-194.75 133.75,-194.75 133.75,-230.75"></polygon>
<text text-anchor="middle" x="66.88" y="-208.07" font-family="Times,serif" font-size="14.00">libfoo.so (-Ofast)</text>
</g>
<!-- libbar.so -->
<g id="node2" class="node">
<title>libbar.so</title>
<polygon fill="none" stroke="red" points="125.12,-138.25 8.62,-138.25 8.62,-95.75 125.12,-95.75 125.12,-138.25"></polygon>
<text text-anchor="middle" x="66.88" y="-120.95" font-family="Times,serif" font-size="14.00">libbar.so (-O2)</text>
<text text-anchor="middle" x="66.88" y="-103.7" font-family="Times,serif" font-size="14.00">has FP code</text>
</g>
<!-- libfoo.so&#45;&gt;libbar.so -->
<g id="edge1" class="edge">
<title>libfoo.so-&gt;libbar.so</title>
<path fill="none" stroke="red" d="M66.88,-194.55C66.88,-182.13 66.88,-164.97 66.88,-150.04"></path>
<polygon fill="red" stroke="red" points="70.38,-150.2 66.88,-140.2 63.38,-150.2 70.38,-150.2"></polygon>
<text text-anchor="middle" x="115.62" y="-160.2" font-family="Times,serif" font-size="14.00">lib breaks bin</text>
</g>
<!-- bin -->
<g id="node3" class="node">
<title>bin</title>
<polygon fill="none" stroke="red" points="118,-42.5 15.75,-42.5 15.75,0 118,0 118,-42.5"></polygon>
<text text-anchor="middle" x="66.88" y="-25.2" font-family="Times,serif" font-size="14.00">bin (-O2)</text>
<text text-anchor="middle" x="66.88" y="-7.95" font-family="Times,serif" font-size="14.00">has FP code</text>
</g>
<!-- libbar.so&#45;&gt;bin -->
<g id="edge2" class="edge">
<title>libbar.so-&gt;bin</title>
<path fill="none" stroke="red" d="M66.88,-95.66C66.88,-83.58 66.88,-67.99 66.88,-54.3"></path>
<polygon fill="red" stroke="red" points="70.38,-54.39 66.88,-44.39 63.38,-54.39 70.38,-54.39"></polygon>
<text text-anchor="middle" x="115.62" y="-64.45" font-family="Times,serif" font-size="14.00">lib breaks bin</text>
</g>
<!-- libfoo.so  -->
<g id="node4" class="node">
<title>libfoo.so </title>
<polygon fill="none" stroke="red" points="267.75,-234 152,-234 152,-191.5 267.75,-191.5 267.75,-234"></polygon>
<text text-anchor="middle" x="209.88" y="-216.7" font-family="Times,serif" font-size="14.00">libfoo.so (-O2)</text>
<text text-anchor="middle" x="209.88" y="-199.45" font-family="Times,serif" font-size="14.00">has FP code</text>
</g>
<!-- libbar.so  -->
<g id="node5" class="node">
<title>libbar.so </title>
<polygon fill="none" stroke="red" points="268.12,-138.25 151.62,-138.25 151.62,-95.75 268.12,-95.75 268.12,-138.25"></polygon>
<text text-anchor="middle" x="209.88" y="-120.95" font-family="Times,serif" font-size="14.00">libbar.so (-O2)</text>
<text text-anchor="middle" x="209.88" y="-103.7" font-family="Times,serif" font-size="14.00">has FP code</text>
</g>
<!-- libfoo.so &#45;&gt;libbar.so  -->
<g id="edge3" class="edge">
<title>libfoo.so -&gt;libbar.so </title>
<path fill="none" stroke="red" d="M209.88,-191.41C209.88,-179.33 209.88,-163.74 209.88,-150.05"></path>
<polygon fill="red" stroke="red" points="213.38,-150.14 209.88,-140.14 206.38,-150.14 213.38,-150.14"></polygon>
<text text-anchor="middle" x="278.5" y="-160.2" font-family="Times,serif" font-size="14.00">lib is broken by bin</text>
</g>
<!-- bin  -->
<g id="node6" class="node">
<title>bin </title>
<polygon fill="none" stroke="black" points="271.88,-42.5 147.88,-42.5 147.88,0 271.88,0 271.88,-42.5"></polygon>
<text text-anchor="middle" x="209.88" y="-25.2" font-family="Times,serif" font-size="14.00">bin (-Ofast)</text>
<text text-anchor="middle" x="209.88" y="-7.95" font-family="Times,serif" font-size="14.00">has no FP code</text>
</g>
<!-- libbar.so &#45;&gt;bin  -->
<g id="edge4" class="edge">
<title>libbar.so -&gt;bin </title>
<path fill="none" stroke="red" d="M209.88,-95.66C209.88,-83.58 209.88,-67.99 209.88,-54.3"></path>
<polygon fill="red" stroke="red" points="213.38,-54.39 209.88,-44.39 206.38,-54.39 213.38,-54.39"></polygon>
<text text-anchor="middle" x="278.5" y="-64.45" font-family="Times,serif" font-size="14.00">lib is broken by bin</text>
</g>
</g>
</svg>

<p>Here I assume that code built with <code>-Ofast</code> was clean and was prepared
to changes caused by <code>-Ofast</code> effect. <code>-O2</code>-compiled code was not
prepared for <code>-Ofast</code> flag effects.</p>
<p>All the red boxes are negatively affected by the module compiled with
<code>-Ofast</code>.</p>
<h2 id="more-words">More words</h2>
<p>Let’s start off with an executable example: we’ll construct a very small
<code>double</code> value and print it with some of it’s properties:</p>
<h3 id="an-example">An example</h3>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;math.h&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> fpc<span class="op">(</span><span class="dt">double</span> v<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">switch</span> <span class="op">(</span>fpclassify<span class="op">(</span>v<span class="op">))</span> <span class="op">{</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> FP_ZERO<span class="op">:</span> <span class="cf">return</span> <span class="st">&quot;FP_ZERO&quot;</span><span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> FP_SUBNORMAL<span class="op">:</span> <span class="cf">return</span> <span class="st">&quot;FP_SUBNORMAL&quot;</span><span class="op">;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> FP_NORMAL<span class="op">:</span> <span class="cf">return</span> <span class="st">&quot;FP_NORMAL&quot;</span><span class="op">;</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> FP_INFINITE<span class="op">:</span> <span class="cf">return</span> <span class="st">&quot;FP_INFINITE&quot;</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> FP_NAN<span class="op">:</span> <span class="cf">return</span> <span class="st">&quot;FP_NAN&quot;</span><span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span> <span class="cf">return</span> <span class="st">&quot;UKNOWN (unhandled?)&quot;</span><span class="op">;</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">double</span> small <span class="op">=</span> <span class="fl">0x1.0p-1040</span><span class="op">;</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">volatile</span> <span class="dt">double</span> also_small <span class="op">=</span> <span class="fl">0x1.0p-1040</span><span class="op">;</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;     small = </span><span class="sc">%a</span><span class="st"> or </span><span class="sc">%e</span><span class="st"> (</span><span class="sc">%s</span><span class="st">)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> small<span class="op">,</span> small<span class="op">,</span> fpc<span class="op">(</span>small<span class="op">));</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;also_small = </span><span class="sc">%a</span><span class="st"> or </span><span class="sc">%e</span><span class="st"> (</span><span class="sc">%s</span><span class="st">)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> also_small<span class="op">,</span> also_small<span class="op">,</span> fpc<span class="op">(</span>also_small<span class="op">));</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>C standard defines a few <code>FP</code> classes (taken from <code>man fpcassify</code>):</p>
<ul>
<li><code>FP_NAN</code>: x is “Not a Number”.</li>
<li><code>FP_INFINITE</code>: x is either positive infinity or negative infinity.</li>
<li><code>FP_ZERO</code>: x is zero.</li>
<li><code>FP_SUBNORMAL</code>: x is too small to be represented in normalized format.</li>
<li><code>FP_NORMAL</code>: if nothing of the above is correct then it must be a
normal floating-point number.</li>
</ul>
<p>I am using <code>volatile</code> on <code>also_small</code> to prevent <code>gcc</code> from folding
constants at compile time. I also use <code>gcc</code> extension to write down
floats in hexadecimal form (instead of decimal form).</p>
<p>Quick quiz: what class should the above program print you think?</p>
<p>Let’s run it and see the answer:</p>
<pre><code>$ gcc a.c -o a -O2 &amp;&amp; ./a
     small = 0x0.00004p-1022 or 8.487983e-314 (FP_SUBNORMAL)
also_small = 0x0.00004p-1022 or 8.487983e-314 (FP_SUBNORMAL)

$ gcc a.c -o a -Ofast &amp;&amp; ./a
     small = 0x0.00004p-1022 or 8.487983e-314 (FP_SUBNORMAL)
also_small = 0x0.00004p-1022 or 8.487983e-314 (FP_ZERO)

$ gcc a.c -o a -ffast-math &amp;&amp; ./a
     small = 0x0.00004p-1022 or 8.487983e-314 (FP_SUBNORMAL)
also_small = 0x0.00004p-1022 or 8.487983e-314 (FP_ZERO)</code></pre>
<p>Apparently it depends! On <code>-O2</code> the value is detected as <code>FP_SUBNORMAL</code>
and on <code>-Ofast</code> (or <code>-ffast-math</code>) it goes as <code>FP_ZERO</code>. Thus <code>printf()</code>
disagrees and prints something that looks more like a small number than
zero.</p>
<p>That is unfortunate. But maybe it’s expected by someone who uses
<code>-Ofast</code>?</p>
<h2 id="cross-module-effects">Cross-module effects</h2>
<p>Let’s create an empty <code>empty.c</code> file and build it with <code>-Ofast</code>. And
then build our initial program with <code>-O2</code>. I’ll use <code>gcc-12</code>
specifically:</p>
<pre><code>$ touch empty.c
$ gcc-12 -shared -fPIC empty.c -Ofast -o libfast.so

$ gcc-12 -O2 a.c -o a &amp;&amp; ./a
     small = 0x0.00004p-1022 or 8.487983e-314 (FP_SUBNORMAL)
also_small = 0x0.00004p-1022 or 8.487983e-314 (FP_SUBNORMAL)

$ gcc-12 -O2 a.c -o a -L. -lfast -Wl,-rpath,'$ORIGIN' &amp;&amp; ./a
     small = 0x0.00004p-1022 or 8.487983e-314 (FP_SUBNORMAL)
also_small = 0x0.00004p-1022 or 8.487983e-314 (FP_ZERO)</code></pre>
<p>See the difference?</p>
<p>Note how the mere presence of <code>libfast.so</code> in the library dependencies
changes output of the program otherwise compiled and liked with <code>-O2</code>
option:</p>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Title: G Pages: 1 -->
<svg width="319pt" height="146pt" viewBox="0.00 0.00 318.50 146.25" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 142.25)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-142.25 314.5,-142.25 314.5,4 -4,4"></polygon>
<!-- libfast.so -->
<g id="node1" class="node">
<title>libfast.so</title>
<polygon fill="none" stroke="black" points="139,-138.25 0,-138.25 0,-95.75 139,-95.75 139,-138.25"></polygon>
<text text-anchor="middle" x="69.5" y="-120.95" font-family="Times,serif" font-size="14.00">libfast.so (-Ofast)</text>
<text text-anchor="middle" x="69.5" y="-103.7" font-family="Times,serif" font-size="14.00">no code!</text>
</g>
<!-- a -->
<g id="node2" class="node">
<title>a</title>
<polygon fill="none" stroke="red" points="120.62,-42.5 18.38,-42.5 18.38,0 120.62,0 120.62,-42.5"></polygon>
<text text-anchor="middle" x="69.5" y="-25.2" font-family="Times,serif" font-size="14.00">a (-O2)</text>
<text text-anchor="middle" x="69.5" y="-7.95" font-family="Times,serif" font-size="14.00">has FP code</text>
</g>
<!-- libfast.so&#45;&gt;a -->
<g id="edge1" class="edge">
<title>libfast.so-&gt;a</title>
<path fill="none" stroke="red" d="M69.5,-95.66C69.5,-83.58 69.5,-67.99 69.5,-54.3"></path>
<polygon fill="red" stroke="red" points="73,-54.39 69.5,-44.39 66,-54.39 73,-54.39"></polygon>
<text text-anchor="middle" x="118.25" y="-64.45" font-family="Times,serif" font-size="14.00">lib breaks bin</text>
</g>
<!-- no deps -->
<!-- a  -->
<g id="node4" class="node">
<title>a </title>
<polygon fill="none" stroke="green" points="310.5,-42.5 138.5,-42.5 138.5,0 310.5,0 310.5,-42.5"></polygon>
<text text-anchor="middle" x="224.5" y="-25.2" font-family="Times,serif" font-size="14.00">a (-O2)</text>
<text text-anchor="middle" x="224.5" y="-7.95" font-family="Times,serif" font-size="14.00">has the same FP code</text>
</g>
<!-- no deps&#45;&gt;a  -->
</g>
</svg>

<h2 id="breakage-mechanics">Breakage mechanics</h2>
<p>Before looking at the implementation let’s have a look at the option
descriptions <code>gcc</code> man page provides:</p>
<pre><code>-ffast-math

  Sets the options -fno-math-errno, -funsafe-math-optimizations,
  -ffinite-math-only, -fno-rounding-math, -fno-signaling-nans,
  -fcx-limited-range and -fexcess-precision=fast.

  This option causes the preprocessor macro &quot;__FAST_MATH__&quot; to be defined.

  This option is not turned on by any -O option besides -Ofast since it
  can result in incorrect output for programs that depend on an exact
  implementation of IEEE  or  ISO  rules/specifications  for math
  functions. It may, however, yield faster code for programs that do not
  require the guarantees of these specifications.</code></pre>
<p>Note how vague the description is: it says your floating point code
might do something funny that violates C standard but does not go into
specifics.</p>
<p>For most people it should be a good hint not to use the option lightly.</p>
<p>The effect we see in <code>fpclassify()</code> in our example’s instability is the
result of <code>-funsafe-math-optimizations</code> option. That one is described as:</p>
<pre><code>-funsafe-math-optimizations

  Allow optimizations for floating-point arithmetic that (a) assume that
  arguments and results are valid and (b) may violate IEEE or ANSI
  standards.  When used at link time, it may include libraries or
  startup files that change the default FPU control word or other
  similar optimizations.

  This option is not turned on by any -O option since it can result in
  incorrect output for programs that depend on an exact implementation
  of IEEE or ISO rules/specifications for math functions. It  may,
  however, yield faster code for programs that do not require the
  guarantees of these specifications.  Enables -fno-signed-zeros,
  -fno-trapping-math, -fassociative-math and -freciprocal-math.

  The default is -fno-unsafe-math-optimizations.</code></pre>
<p>This option changes global setting of an <code>FP</code> unit at program start.
This change affects not only the code explicitly compiled with
<code>-ffast-math</code> but also affects everything else that resides in the same
address space.</p>
<p>Mechanically the <code>FPU</code> state changes when <code>gcc</code> links <code>crtfastmath.o</code>
on <code>-Ofast</code> / <code>-ffast-math</code>. Object file is implemented via <code>spec</code>
machinery:</p>
<pre><code>$ gcc -dumpspecs | fgrep crtfastmath

... %{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} ...</code></pre>
<p>This <code>spec</code> dump tells <code>gcc</code> to always add a <code>crtfastmath.o</code> as an input
if any of <code>-Ofast</code>, <code>-ffast-math</code> or <code>-funsafe-math-optimizations</code> is
passed to <code>gcc</code>. We can also verify it with <code>-Wl,-t</code> to trace all linker
inputs:</p>
<pre><code>$ touch a.c

$ gcc -shared a.c -o libshared.so -Wl,-t |&amp; fgrep crtfast
&lt;nothing&gt;

$ gcc -shared a.c -o libshared.so -Wl,-t -Ofast |&amp; fgrep crtfast |&amp; unnix
/&lt;&lt;NIX&gt;&gt;/gcc-12.3.0/lib/gcc/x86_64-unknown-linux-gnu/12.3.0/crtfastmath.o</code></pre>
<p>To achieve this effect <code>libgcc/config/i386/crtfastmath.c</code> defines global
constructor to change <code>FP</code> state:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> __attribute__<span class="op">((</span>constructor<span class="op">))</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>set_fast_math <span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> <span class="dt">int</span> mxcsr <span class="op">=</span> __builtin_ia32_stmxcsr <span class="op">();</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  mxcsr <span class="op">|=</span> MXCSR_DAZ <span class="op">|</span> MXCSR_FTZ<span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  __builtin_ia32_ldmxcsr <span class="op">(</span>mxcsr<span class="op">);</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The above code sets two flags normally disabled in <code>mxcsr</code> <code>SSE</code> flags
register:</p>
<ul>
<li><code>DAZ</code>: Denormalized-Are-Zero - denormalized inputs are treated as zeros.</li>
<li><code>FTZ</code>: Flush-To-Zero - denormalized outputs are converted to zero.</li>
</ul>
<p>This effect was seen as too problematic by many and <code>gcc-13</code> stopped
enabling <code>crtfastmath.o</code> for libraries (<code>-shared</code> option) in
<a href="https://gcc.gnu.org/PR55522" class="uri">https://gcc.gnu.org/PR55522</a>.</p>
<p>While the fix limits the impact to final programs that enable <code>-Ofast</code>
it is still able to break all the libraries linked into the program
linked with <code>-Ofast</code>.</p>
<p>As the library test suites are usually not ran with <code>-Ofast</code> the
breakage might not be noticed until data corruption starts happening on
real data in final applications.</p>
<h2 id="actual-breakage-in-an-actual-program">Actual breakage in an actual program</h2>
<p>I did not know about this <code>-ffast-math</code> problem until <code>nixpkgs</code> updated
<code>libsodium</code> library to <code>1.0.19</code> which started defaulting to
<code>-Ofast</code> in <a href="https://github.com/jedisct1/libsodium/commit/ad4584d45590654b9d863ced90d2b2561d5cfbda">“Try using -Ofast / -O3 by default” commit</a>.</p>
<p>After a <code>libsodium</code> upgrade test suites for various programs started
failing with obscure errors of data corruption around <code>double</code> conversion
to string and back. In some of the cases <code>libsodium</code> was not even used
directly and was an indirect dependency via <code>libzmq</code>:</p>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Title: G Pages: 1 -->
<svg width="205pt" height="208pt" viewBox="0.00 0.00 204.75 207.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 203.5)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-203.5 200.75,-203.5 200.75,4 -4,4"></polygon>
<!-- libsodium.so -->
<g id="node1" class="node">
<title>libsodium.so</title>
<polygon fill="none" stroke="black" points="191.88,-199.5 4.88,-199.5 4.88,-157 191.88,-157 191.88,-199.5"></polygon>
<text text-anchor="middle" x="98.38" y="-182.2" font-family="Times,serif" font-size="14.00">libsodium.so</text>
<text text-anchor="middle" x="98.38" y="-164.95" font-family="Times,serif" font-size="14.00">(includes crtfastmath.o)</text>
</g>
<!-- libzmq.so -->
<g id="node2" class="node">
<title>libzmq.so</title>
<polygon fill="none" stroke="black" points="196.75,-121 0,-121 0,-78.5 196.75,-78.5 196.75,-121"></polygon>
<text text-anchor="middle" x="98.38" y="-103.7" font-family="Times,serif" font-size="14.00">libzmq.so</text>
<text text-anchor="middle" x="98.38" y="-86.45" font-family="Times,serif" font-size="14.00">(just a libsodium.so user)</text>
</g>
<!-- libsodium.so&#45;&gt;libzmq.so -->
<g id="edge1" class="edge">
<title>libsodium.so-&gt;libzmq.so</title>
<path fill="none" stroke="red" d="M98.38,-156.75C98.38,-149.37 98.38,-140.87 98.38,-132.75"></path>
<polygon fill="red" stroke="red" points="101.88,-132.82 98.38,-122.82 94.88,-132.82 101.88,-132.82"></polygon>
</g>
<!-- bitcoind -->
<g id="node3" class="node">
<title>bitcoind</title>
<polygon fill="none" stroke="black" points="151.38,-42.5 45.38,-42.5 45.38,0 151.38,0 151.38,-42.5"></polygon>
<text text-anchor="middle" x="98.38" y="-25.2" font-family="Times,serif" font-size="14.00">bitcoind</text>
<text text-anchor="middle" x="98.38" y="-7.95" font-family="Times,serif" font-size="14.00">(failed tests)</text>
</g>
<!-- libzmq.so&#45;&gt;bitcoind -->
<g id="edge2" class="edge">
<title>libzmq.so-&gt;bitcoind</title>
<path fill="none" stroke="red" d="M98.38,-78.25C98.38,-70.87 98.38,-62.37 98.38,-54.25"></path>
<polygon fill="red" stroke="red" points="101.88,-54.32 98.38,-44.32 94.88,-54.32 101.88,-54.32"></polygon>
</g>
</g>
</svg>

<p>It was very confusing to see <code>bitcoind</code> to fail <code>double</code> serialization /
deserialization tests after <code>libsodium</code> update (which API was not used
in the <code>program</code> at all).</p>
<p>I usually try to avoid crypto-currency software. But in this case
compiler was implied to generate bad code and I had to look closer.</p>
<h2 id="other-compilers">Other compilers</h2>
<p><code>clang</code> also considers disabling <code>crtfastmath.o</code> for shared libraries
to follow <code>gcc</code> lead: <a href="https://github.com/llvm/llvm-project/issues/57589" class="uri">https://github.com/llvm/llvm-project/issues/57589</a>.</p>
<p>According to <a href="https://en.wikipedia.org/wiki/Subnormal_number#Intel_SSE">Wikipedia</a>
<code>ICC</code> enables <code>-ffast-math</code> equivalent on the optimizations above <code>-O0</code>.
That sounds quite unsafe.</p>
<h2 id="why-do-we-even-have-that-lever">Why do we even have that lever?</h2>
<p>But why do these transformations exist at all? Why treat small <code>double</code>s
differently compared to larger values? We don’t do it with small
integers after all (I hope!).</p>
<p>Apparently at least older CPUs (and maybe modern ones as well?) were
slower to handle denormalized values. Sometimes 100x slower. Thus
cutting a corner here might have a visible win in applications that
don’t care about precision or predictability of the result.</p>
<h2 id="binary-representation-of-floating-points">Binary representation of floating points</h2>
<p>How small those values need to be to get flushed to zero on occasion?</p>
<p>Wikipedia’s <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format">“Double-precision floating-point format” article</a>
is a great detailed explanation of the <code>float64</code> format.</p>
<p>Tl;DR: all the numbers of 64-bits have the following bit layout:</p>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Title: G Pages: 1 -->
<svg width="188pt" height="52pt" viewBox="0.00 0.00 188.00 51.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 47.5)">
<title>G</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-47.5 184,-47.5 184,4 -4,4"></polygon>
<!-- float64 -->
<g id="node1" class="node">
<title>float64</title>
<polygon fill="none" stroke="black" points="0,-0.5 0,-43 180,-43 180,-0.5 0,-0.5"></polygon>
<text text-anchor="middle" x="24.5" y="-25.7" font-family="Times,serif" font-size="14.00">sign</text>
<text text-anchor="middle" x="24.5" y="-8.45" font-family="Times,serif" font-size="14.00">1 bit</text>
<polyline fill="none" stroke="black" points="49,-0.5 49,-43"></polyline>
<text text-anchor="middle" x="81.75" y="-25.7" font-family="Times,serif" font-size="14.00">exp</text>
<text text-anchor="middle" x="81.75" y="-8.45" font-family="Times,serif" font-size="14.00">11 bits</text>
<polyline fill="none" stroke="black" points="114.5,-0.5 114.5,-43"></polyline>
<text text-anchor="middle" x="147.25" y="-25.7" font-family="Times,serif" font-size="14.00">frac</text>
<text text-anchor="middle" x="147.25" y="-8.45" font-family="Times,serif" font-size="14.00">52 bits</text>
</g>
</g>
</svg>

<p>Depending on the exponent <code>exp</code> value there are two formulas and
three(ish) cases:</p>
<ul>
<li>Normalized values (for <code>exp</code> in <code>1</code> - <code>2046</code> range): <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mo stretchy="true" form="prefix">(</mo><mo>−</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi></mrow></msup><mo>×</mo><msup><mn>2</mn><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>−</mo><mn>1023</mn></mrow></msup><mo>×</mo><mn>1</mn><mi>.</mi><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>c</mi></mrow></mrow><annotation encoding="application/x-tex">{(-1)}^{sign}\times2^{exp-1023}\times1.{frac}</annotation></semantics></math></li>
<li>Denormalized values: (for <code>exp == 0</code>): <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mo stretchy="true" form="prefix">(</mo><mo>−</mo><mn>1</mn><mo stretchy="true" form="postfix">)</mo></mrow><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>n</mi></mrow></msup><mo>×</mo><msup><mn>2</mn><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mo>−</mo><mn>1022</mn></mrow></msup><mo>×</mo><mn>0</mn><mi>.</mi><mrow><mi>f</mi><mi>r</mi><mi>a</mi><mi>c</mi></mrow></mrow><annotation encoding="application/x-tex">{(-1)}^{sign}\times2^{exp-1022}\times0.{frac}</annotation></semantics></math></li>
<li><code>exp == 2047</code>: <code>NaN</code>s and infinities of sorts</li>
</ul>
<p>The main detail here is implied <code>1.frac</code> vs <code>0.frac</code> in the first two
cases. Otherwise the structure is the same. A few examples of value
encodings:</p>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr class="header">
<th>value</th>
<th>encoded</th>
<th>sign/exp/frac</th>
<th>notes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>0x1.5p0</code></td>
<td><code>0x3ff5000000000000</code></td>
<td><code>0/0x3ff/0x0005000000000000</code></td>
<td>A normalized value</td>
</tr>
<tr class="even">
<td><code>0x1.0p-1022</code></td>
<td><code>0x0010000000000000</code></td>
<td><code>0/1/0</code></td>
<td>Smallest normalized value</td>
</tr>
<tr class="odd">
<td><code>0x0.fffffffffffffp-1022</code></td>
<td><code>0x000fffffffffffff</code></td>
<td><code>0/0/0x000fffffffffffff</code></td>
<td>Largest denormalized value</td>
</tr>
<tr class="even">
<td><code>0x1.5p-1040</code></td>
<td><code>0x0000054000000000</code></td>
<td><code>0/0/0x0054000000000</code></td>
<td>A denormalized value</td>
</tr>
<tr class="odd">
<td><code>0x1.0p-1074</code></td>
<td><code>0x0000000000000001</code></td>
<td><code>0/0/1</code></td>
<td>Smallest denormalized value</td>
</tr>
<tr class="even">
<td><code>0.0</code></td>
<td><code>0x0000000000000000</code></td>
<td><code>0/0/0</code></td>
<td>Positive zero</td>
</tr>
<tr class="odd">
<td><code>-0.0</code></td>
<td><code>0x8000000000000000</code></td>
<td><code>1/0/0</code></td>
<td>Negative zero</td>
</tr>
<tr class="even">
<td><code>Inf</code></td>
<td><code>0x7ff0000000000000</code></td>
<td><code>0/0x7ff/0</code></td>
<td>Positive infinity</td>
</tr>
<tr class="odd">
<td><code>-Inf</code></td>
<td><code>0xfff0000000000000</code></td>
<td><code>1/0x7ff/0</code></td>
<td>Negative infinity</td>
</tr>
<tr class="even">
<td><code>NaN</code></td>
<td><code>0xfff8000000000000</code></td>
<td><code>1/0x7ff/0x0008000000000000</code></td>
<td>NaN for <code>0/0</code> value</td>
</tr>
</tbody>
</table>
<p>There are various curious facts about this encoding:</p>
<p>Normalized and denormalized value sets do not intersect: all
denormalized absolute values are smaller than smallest normalized value.</p>
<p>Having a short glance at first 3 hexadecimal digits is enough to get the
idea which <code>FP</code> class we are looking at:</p>
<ul>
<li><code>0x000 / 0x800</code>: Denormalized numbers or zero</li>
<li><code>0x7ff / 0xfff</code>: <code>NaN</code> or infinities</li>
</ul>
<p>Normalized values do not allow for <code>0.0</code> encoding: <code>frac</code> always has
an implied leading <code>1.</code> start for fraction. Thus zeros have to be
encoded using denormalized scheme.</p>
<p>(Positive) zero is encoded as all zero bits. Thus <code>memset()</code> on array of
floats creates sensible array of zeros.</p>
<p>There are two zeros: signed and unsigned.</p>
<p>While zeros require subnormal encoding of an exponent they are
considered a separate <code>FP_ZERO</code> class from <code>FP_SUBNORMAL</code></p>
<p>Normalized values use all their 52 bits of fraction for precision.
Denormalized values usually use less as they maintain a few leading
zeros to encode smaller values.</p>
<p>Looking at the binary representation one can imagine how CPU would
implement at least trivial operations (like addition and subtraction)
on floating points with the same exponent value and then slightly extend
it to operation on numbers with different exponents.</p>
<h2 id="the-effect-of-mxcsr_daz-and-mxcsr_ftz">The effect of <code>MXCSR_DAZ</code> and <code>MXCSR_FTZ</code></h2>
<p>By now it should be clear that <code>MXCSR_DAZ</code> and <code>MXCSR_FTZ</code> flags
effectively turn any denormalized value into zero for any <code>FP</code> operation.</p>
<p>The minor problem happens if denormalized value is already constructed
in memory and is used by something else. That is why we get seemingly
nonsensical result above when <code>FP_ZERO</code> has a non-zero encoding:</p>
<pre><code>also_small = 0x0.00004p-1022 or 8.487983e-314 (FP_ZERO)</code></pre>
<p>Is it hard to hit a denormalized value? It depends! If you operate on
small values like <math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><msup><mn>10</mn><mrow><mo>−</mo><mn>20</mn></mrow></msup><annotation encoding="application/x-tex">10^{-20}</annotation></semantics></math> (micros) and use to raise it to higher
powers, like 16, then you get outside the normal range:
<math display="inline" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mrow><mo stretchy="true" form="prefix">(</mo><msup><mn>10</mn><mrow><mo>−</mo><mn>20</mn></mrow></msup><mo stretchy="true" form="postfix">)</mo></mrow><mn>16</mn></msup><mo>=</mo><mn>0</mn><mi>x</mi><mn>0.00000000007</mn><mi>e</mi><mn>8</mn><msup><mi>p</mi><mrow><mo>−</mo><mn>1022</mn></mrow></msup></mrow><annotation encoding="application/x-tex">{(10^{-20})}^{16} = 0x0.00000000007e8p^{-1022}</annotation></semantics></math></p>
<p>These are very small values.</p>
<p>With such flushing enabled it is a lot easier to hit a <code>NaN</code> by dividing
(flushed) zero by (flushed) zero or by subtracting infinities a bit after.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>-Ofast</code> is not a safe option to use without a second thought. In
addition to breaking your immediate floating point arithmetic code
<code>-ffast-math</code> / <code>-Ofast</code> also breaks the code not compiled with these
options. This non-local effect is most problematic.</p>
<p><code>libsodium</code> tried it and broke a few reverse dependencies that relied on
denormalized values to work as expected.</p>
<p>For the time being <code>libsodium</code> <a href="https://github.com/jedisct1/libsodium/commit/0e0e2c16401e63777dce8c7958a3ca789055dfcf">rolled back</a>
<code>-Ofast</code> default. That should stop <code>FP</code> code breakage for users of older
<code>gcc</code>.</p>
<p>There probably is a lot more packages enabling <code>-Ofast</code> without
realizing what effects it causes on <code>FP</code> code correctness somewhere
else.</p>
<p>To notice the problem the code needs to exercise denormalized values
which might require very small actual values as operands.</p>
<p>What is worse: the truncation problems might come and go depending on
what compiler decides to do with the intermediate values: perform
an operation on <code>FP</code> unit and observe the truncation, pass it in
memory and process using bitwise arithmetic and not observe the
truncation or re-associate the operations and expose denormalized values.
This instability effect is very similar to <code>i387</code> <code>FPU</code> instability
on <code>i386</code> documented at <a href="https://gcc.gnu.org/wiki/x87note" class="uri">https://gcc.gnu.org/wiki/x87note</a>.</p>
<p>Floating point encoding is straightforward, but is full of corner cases:
normalized, denormalized, zeros, infinities and <code>NaN</code>s. Handling all the
cases requires extra work from the programmer and the CPU.</p>
<p><code>MXCSR_DAZ</code> and <code>MXCSR_FTZ</code> status bits allow CPU to treat most
denormalized values as zeros at a cost of <code>C</code> and <code>IEEE</code> standard
conformance.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 25 Oct 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/302-Ofast-and-ffast-math-non-local-effects.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Another gcc profiling bug</title>
    <link>http://trofi.github.io/posts/301-another-gcc-profiling-bug.html</link>
    <description><![CDATA[<h2 id="the-python-pgo-bug">The python PGO bug</h2>
<p>About <a href="http://trofi.github.io/posts/243-gcc-profiler-internals.html">a year ago</a> I had some
fun debugging <code>gcc</code> crash on <code>python</code> code base built in <code>PGO</code> mode
(optimized based on profile-feedback from test run).</p>
<p>Scrolling through recent <code>gcc</code> bugs I noticed <a href="https://gcc.gnu.org/PR111559">PR111559</a>
<code>"[14 regression] ICE when building Python with PGO"</code> bug reported by
Sam James. It looked vaguely similar to the previous instance so I had
a look.</p>
<p>There <code>python</code> build of <code>-fprofile-use</code> stage was crashing <code>gcc</code> as:</p>
<pre><code>$ gcc -c ... -fprofile-use -fprofile-correction ... -o Parser/parser.o Parser/parser.c
Parser/parser.c: In function 'simple_stmt_rule':
Parser/parser.c:1706:1: error: probability of edge 613-&gt;614 not initialized
 1706 | simple_stmt_rule(Parser *p)
      | ^~~~~~~~~~~~~~~~
Parser/parser.c:1706:1: error: probability of edge 615-&gt;621 not initialized
during IPA pass: inline
Parser/parser.c:1706:1: internal compiler error: verify_flow_info failed
0x55c9cced2153 verify_flow_info()</code></pre>
<p>This error tells us what exactly is wrong in the control flow graph when
crashes <code>gcc</code> (as opposed to vague <code>SIGSEGV</code>).</p>
<p>Normally <code>gcc</code> is very forgiving to input garbage profile data you pass
to it. Worst case you should get badly optimized binary with correct
behaviour. But in this case <code>gcc</code> complains about probabilities <code>gcc</code>
calculated itself. I did not see this error type before.</p>
<p>I wanted to have a closer look.</p>
<h2 id="reproducing">Reproducing</h2>
<p>First thing I tried to reproduce <code>gcc</code> ICE following Sam’s instructions.
I had to do two minor tweaks:</p>
<ol type="1">
<li>set <code>--enable-checking=yes</code> for <code>gcc_debug</code></li>
<li>change <code>python3</code> <code>nixpkgs</code> package to use <code>gcc_debug</code></li>
</ol>
<p>Out of laziness I patched <code>--enable-checking=yes</code> into local checkout
and changed <code>python3</code> dependency in development shell invocation. Both
tweaks are below:</p>
<p><code>gcc_debug</code> patch:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/top-level/all-packages.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/top-level/all-packages.nix</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -15893,5 +15893,6 @@ with pkgs;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="st">-  gcc_debug = lowPrio (wrapCC (gcc.cc.overrideAttrs {</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="va">+  gcc_debug = lowPrio (wrapCC (gcc.cc.overrideAttrs (oa: {</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     dontStrip = true;</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="st">-  }));</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="va">+    configureFlags = oa.configureFlags ++ [ &quot;--enable-checking=yes&quot; ];</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="va">+  })));</span></span></code></pre></div>
<p>Running the shell:</p>
<pre><code>$ nix develop --impure --expr 'with import ./. {};
python3.overrideAttrs (oa: {
  nativeBuildInputs = [ gcc_debug ] ++ oa.nativeBuildInputs;
})'</code></pre>
<p>That gave me the interactive development shell with all the tools in the
<code>PATH</code>. Double-checking if the visible compiler looks like the patched
one:</p>
<pre><code>$$ LANG=C gcc -v
...
Configured with: ../source/configure ... --enable-checking=yes ...
...
gcc version 14.0.0 99999999 (experimental) (GCC)</code></pre>
<p>Looks good. Moving on to to run reproducer as is:</p>
<pre><code>$$ wget https://www.python.org/ftp/python/3.11.5/Python-3.11.5.tar.xz
$$ tar xf Python-3.11.5.tar.xz
$$ cd Python-3.11.5/
$$ ./configure --enable-optimizations
$$ make -j$(nproc)</code></pre>
<p>After a minute or so <code>make -j$(nproc)</code> command failed as:</p>
<pre><code>$$ make -j$(nproc)
...
gcc -c -Wsign-compare -DNDEBUG -g -fwrapv -O3 ...
...
Parser/parser.c: In function 'simple_stmt_rule':
Parser/parser.c:1620:1: error: probability of edge 159-&gt;160 not initialized
 1620 | simple_stmt_rule(Parser *p)
      | ^~~~~~~~~~~~~~~~
Parser/parser.c:1620:1: error: probability of edge 161-&gt;162 not initialized
Parser/parser.c:1620:1: error: probability of edge 162-&gt;171 not initialized
Parser/parser.c:1620:1: error: probability of edge 166-&gt;162 not initialized
Parser/parser.c:1620:1: error: probability of edge 169-&gt;170 not initialized
Parser/parser.c:1620:1: error: probability of edge 614-&gt;615 not initialized
Parser/parser.c:1620:1: error: probability of edge 616-&gt;622 not initialized
during IPA pass: inline
Parser/parser.c:1620:1: internal compiler error: verify_flow_info failed
0xacee3e verify_flow_info()
        ../../source/gcc/cfghooks.cc:287
0x104f73c checking_verify_flow_info()
        ../../source/gcc/cfghooks.h:214
0x104f73c cleanup_tree_cfg_noloop
        ../../source/gcc/tree-cfgcleanup.cc:1154
0x104f73c cleanup_tree_cfg(unsigned int)
        ../../source/gcc/tree-cfgcleanup.cc:1205
0xed541c execute_function_todo
        ../../source/gcc/passes.cc:2057
0xed58ce execute_todo
        ../../source/gcc/passes.cc:2142
0xed841f execute_one_ipa_transform_pass
        ../../source/gcc/passes.cc:2336
0xed841f execute_all_ipa_transforms(bool)
        ../../source/gcc/passes.cc:2396
0xb0b09d cgraph_node::expand()
        ../../source/gcc/cgraphunit.cc:1834
0xb0b09d cgraph_node::expand()
        ../../source/gcc/cgraphunit.cc:1794
0xb0bfc1 expand_all_functions
        ../../source/gcc/cgraphunit.cc:2000
0xb0bfc1 symbol_table::compile()
        ../../source/gcc/cgraphunit.cc:2398
0xb0f527 symbol_table::compile()
        ../../source/gcc/cgraphunit.cc:2311
0xb0f527 symbol_table::finalize_compilation_unit()
        ../../source/gcc/cgraphunit.cc:2583
Please submit a full bug report, with preprocessed source (by using -freport-bug).
Please include the complete backtrace with any bug report.
See &lt;https://gcc.gnu.org/bugs/&gt; for instructions.</code></pre>
<p>Yay! Luckily <code>gcc_debug</code> crashed for me without any extra convincing.
And <code>python</code> build system helpfully printed exact command to rerun.</p>
<h2 id="reducing-the-input">Reducing the input</h2>
<p>Once I got the reproducer I attempted to minimize it with
<a href="https://github.com/marxin/cvise">cvise</a> against preprocessed
<code>Parser/parser.c</code> file and it’s <code>parser.gcda</code> file (<code>-fprofile-use</code> flag
looks it up and loads profiling data).</p>
<p>Creating the preprocessed file to simplify <code>cvise</code> command run:</p>
<pre><code>$$ gcc -E -P ... -o Parser/parser.c.c Parser/parser.c
$$ mv Parser/parser.c.c Parser/parser.c</code></pre>
<p>Making sure the failure did not go away (this time with only flags
needed to crash <code>gcc_debug</code>):</p>
<pre><code>$$ gcc -c -O2 -fprofile-use -fprofile-correction -o Parser/parser.o Parser/parser.c
...
Parser/parser.c: In function 'simple_stmt_rule':
Parser/parser.c:10501:1: error: probability of edge 540-&gt;541 not initialized
10501 | simple_stmt_rule(Parser *p)
      | ^~~~~~~~~~~~~~~~
Parser/parser.c:10501:1: error: probability of edge 542-&gt;548 not initialized
during IPA pass: inline
Parser/parser.c:10501:1: internal compiler error: verify_flow_info failed
0xacee3e verify_flow_info()
        ../../source/gcc/cfghooks.cc:287
...</code></pre>
<p>The crash was still there. Now running <code>cvise</code>:</p>
<pre><code>$$ cd Parser/
$$ cvise --command=&quot;mkdir Parser &amp;&amp; cp parser.c $PWD/parser.gcda Parser/;
gcc -c -O2 -fprofile-use -fprofile-correction -o Parser/parser.o Parser/parser.c |&amp;
  grep 'verify_flow_info'&quot; parser.c
...
Runtime: 387 seconds
Reduced test-cases:
...</code></pre>
<p>Note: in the <code>--command=...</code> script I had to maintain <code>Parser/</code>
directory nesting in the interestingness test as <code>.gcda</code> files contain
directory part of the file path.</p>
<p>This is the raw file produced by <code>cvise</code>:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">**</span>elements</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> asdl_seq<span class="op">;</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">{</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> mark<span class="op">;</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> arena<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> error_indicator<span class="op">;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> level</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> Parser<span class="op">;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="op">*</span>_loop1_104_rule<span class="op">(</span>Parser <span class="op">*</span>p<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>p<span class="op">-&gt;</span>level<span class="op">++</span> <span class="op">==</span> <span class="dv">6000</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>p<span class="op">-&gt;</span>error_indicator<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> _mark <span class="op">=</span> p<span class="op">-&gt;</span>mark<span class="op">;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">**</span>_children <span class="op">=</span> PyMem_Malloc<span class="op">(</span><span class="kw">sizeof</span><span class="op">(</span><span class="dt">void</span> <span class="op">*));</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>_children<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>    PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> _children_capacity <span class="op">=</span> <span class="dv">1</span><span class="op">,</span> _n <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>p<span class="op">-&gt;</span>error_indicator<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> <span class="op">*</span>lambda_param_with_default_var<span class="op">;</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>lambda_param_with_default_var <span class="op">=</span> lambda_param_with_default_rule<span class="op">(</span>p<span class="op">))</span> <span class="op">{</span></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>_n <span class="op">==</span> _children_capacity<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a>      _children_capacity <span class="op">*=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>      <span class="dt">void</span> <span class="op">*</span>_new_children <span class="op">=</span></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a>          PyMem_Realloc<span class="op">(</span>_children<span class="op">,</span> _children_capacity <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">void</span> <span class="op">*));</span></span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(!</span>_new_children<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-39"><a href="#cb10-39" aria-hidden="true" tabindex="-1"></a>        PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-40"><a href="#cb10-40" aria-hidden="true" tabindex="-1"></a>        p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-41"><a href="#cb10-41" aria-hidden="true" tabindex="-1"></a>        PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-42"><a href="#cb10-42" aria-hidden="true" tabindex="-1"></a>        p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-43"><a href="#cb10-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-44"><a href="#cb10-44" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb10-45"><a href="#cb10-45" aria-hidden="true" tabindex="-1"></a>      _children <span class="op">=</span> _new_children<span class="op">;</span></span>
<span id="cb10-46"><a href="#cb10-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb10-47"><a href="#cb10-47" aria-hidden="true" tabindex="-1"></a>    _children<span class="op">[</span>_n<span class="op">++]</span> <span class="op">=</span> lambda_param_with_default_var<span class="op">;</span></span>
<span id="cb10-48"><a href="#cb10-48" aria-hidden="true" tabindex="-1"></a>    _mark <span class="op">=</span> p<span class="op">-&gt;</span>mark<span class="op">;</span></span>
<span id="cb10-49"><a href="#cb10-49" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-50"><a href="#cb10-50" aria-hidden="true" tabindex="-1"></a>  p<span class="op">-&gt;</span>mark <span class="op">=</span> _mark<span class="op">;</span></span>
<span id="cb10-51"><a href="#cb10-51" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>_n <span class="op">==</span> <span class="dv">0</span> <span class="op">||</span> p<span class="op">-&gt;</span>error_indicator<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-52"><a href="#cb10-52" aria-hidden="true" tabindex="-1"></a>    PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-53"><a href="#cb10-53" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-54"><a href="#cb10-54" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-55"><a href="#cb10-55" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-56"><a href="#cb10-56" aria-hidden="true" tabindex="-1"></a>  asdl_seq <span class="op">*</span>_seq <span class="op">=</span> _Py_asdl_generic_seq_new<span class="op">(</span>_n<span class="op">,</span> p<span class="op">-&gt;</span>arena<span class="op">);</span></span>
<span id="cb10-57"><a href="#cb10-57" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>_seq<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-58"><a href="#cb10-58" aria-hidden="true" tabindex="-1"></a>    PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-59"><a href="#cb10-59" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-60"><a href="#cb10-60" aria-hidden="true" tabindex="-1"></a>    PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-61"><a href="#cb10-61" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-62"><a href="#cb10-62" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-63"><a href="#cb10-63" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-64"><a href="#cb10-64" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> _n<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb10-65"><a href="#cb10-65" aria-hidden="true" tabindex="-1"></a>    _seq<span class="op">-&gt;</span>elements<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> _children<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb10-66"><a href="#cb10-66" aria-hidden="true" tabindex="-1"></a>  PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-67"><a href="#cb10-67" aria-hidden="true" tabindex="-1"></a>  p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-68"><a href="#cb10-68" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> _seq<span class="op">;</span></span>
<span id="cb10-69"><a href="#cb10-69" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-70"><a href="#cb10-70" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="op">*</span>_loop1_106_rule<span class="op">(</span>Parser <span class="op">*</span>p<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-71"><a href="#cb10-71" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>p<span class="op">-&gt;</span>level<span class="op">++</span> <span class="op">==</span> <span class="dv">6000</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-72"><a href="#cb10-72" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-73"><a href="#cb10-73" aria-hidden="true" tabindex="-1"></a>    PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-74"><a href="#cb10-74" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-75"><a href="#cb10-75" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>p<span class="op">-&gt;</span>error_indicator<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-76"><a href="#cb10-76" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-77"><a href="#cb10-77" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-78"><a href="#cb10-78" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-79"><a href="#cb10-79" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> _mark <span class="op">=</span> p<span class="op">-&gt;</span>mark<span class="op">;</span></span>
<span id="cb10-80"><a href="#cb10-80" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="op">**</span>_children <span class="op">=</span> PyMem_Malloc<span class="op">(</span><span class="kw">sizeof</span><span class="op">(</span><span class="dt">void</span> <span class="op">*));</span></span>
<span id="cb10-81"><a href="#cb10-81" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>_children<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-82"><a href="#cb10-82" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-83"><a href="#cb10-83" aria-hidden="true" tabindex="-1"></a>    PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-84"><a href="#cb10-84" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-85"><a href="#cb10-85" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-86"><a href="#cb10-86" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-87"><a href="#cb10-87" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> _children_capacity <span class="op">=</span> <span class="dv">1</span><span class="op">,</span> _n <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-88"><a href="#cb10-88" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>p<span class="op">-&gt;</span>error_indicator<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-89"><a href="#cb10-89" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-90"><a href="#cb10-90" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-91"><a href="#cb10-91" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-92"><a href="#cb10-92" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> <span class="op">*</span>lambda_param_with_default_var<span class="op">;</span></span>
<span id="cb10-93"><a href="#cb10-93" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>lambda_param_with_default_var <span class="op">=</span> lambda_param_with_default_rule<span class="op">(</span>p<span class="op">))</span> <span class="op">{</span></span>
<span id="cb10-94"><a href="#cb10-94" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>_n <span class="op">==</span> _children_capacity<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-95"><a href="#cb10-95" aria-hidden="true" tabindex="-1"></a>      _children_capacity <span class="op">*=</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb10-96"><a href="#cb10-96" aria-hidden="true" tabindex="-1"></a>      <span class="dt">void</span> <span class="op">*</span>_new_children <span class="op">=</span></span>
<span id="cb10-97"><a href="#cb10-97" aria-hidden="true" tabindex="-1"></a>          PyMem_Realloc<span class="op">(</span>_children<span class="op">,</span> _children_capacity <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">void</span> <span class="op">*));</span></span>
<span id="cb10-98"><a href="#cb10-98" aria-hidden="true" tabindex="-1"></a>      <span class="cf">if</span> <span class="op">(!</span>_new_children<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-99"><a href="#cb10-99" aria-hidden="true" tabindex="-1"></a>        PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-100"><a href="#cb10-100" aria-hidden="true" tabindex="-1"></a>        p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-101"><a href="#cb10-101" aria-hidden="true" tabindex="-1"></a>        PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-102"><a href="#cb10-102" aria-hidden="true" tabindex="-1"></a>        p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-103"><a href="#cb10-103" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-104"><a href="#cb10-104" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span>
<span id="cb10-105"><a href="#cb10-105" aria-hidden="true" tabindex="-1"></a>      _children <span class="op">=</span> _new_children<span class="op">;</span></span>
<span id="cb10-106"><a href="#cb10-106" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb10-107"><a href="#cb10-107" aria-hidden="true" tabindex="-1"></a>    _children<span class="op">[</span>_n<span class="op">++]</span> <span class="op">=</span> lambda_param_with_default_var<span class="op">;</span></span>
<span id="cb10-108"><a href="#cb10-108" aria-hidden="true" tabindex="-1"></a>    _mark <span class="op">=</span> p<span class="op">-&gt;</span>mark<span class="op">;</span></span>
<span id="cb10-109"><a href="#cb10-109" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-110"><a href="#cb10-110" aria-hidden="true" tabindex="-1"></a>  p<span class="op">-&gt;</span>mark <span class="op">=</span> _mark<span class="op">;</span></span>
<span id="cb10-111"><a href="#cb10-111" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>_n <span class="op">==</span> <span class="dv">0</span> <span class="op">||</span> p<span class="op">-&gt;</span>error_indicator<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-112"><a href="#cb10-112" aria-hidden="true" tabindex="-1"></a>    PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-113"><a href="#cb10-113" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-114"><a href="#cb10-114" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-115"><a href="#cb10-115" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-116"><a href="#cb10-116" aria-hidden="true" tabindex="-1"></a>  asdl_seq <span class="op">*</span>_seq <span class="op">=</span> _Py_asdl_generic_seq_new<span class="op">(</span>_n<span class="op">,</span> p<span class="op">-&gt;</span>arena<span class="op">);</span></span>
<span id="cb10-117"><a href="#cb10-117" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span>_seq<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-118"><a href="#cb10-118" aria-hidden="true" tabindex="-1"></a>    PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-119"><a href="#cb10-119" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>error_indicator <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb10-120"><a href="#cb10-120" aria-hidden="true" tabindex="-1"></a>    PyErr_NoMemory<span class="op">();</span></span>
<span id="cb10-121"><a href="#cb10-121" aria-hidden="true" tabindex="-1"></a>    p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-122"><a href="#cb10-122" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-123"><a href="#cb10-123" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb10-124"><a href="#cb10-124" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> _n<span class="op">;</span> i<span class="op">++)</span></span>
<span id="cb10-125"><a href="#cb10-125" aria-hidden="true" tabindex="-1"></a>    _seq<span class="op">-&gt;</span>elements<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> _children<span class="op">[</span>i<span class="op">];</span></span>
<span id="cb10-126"><a href="#cb10-126" aria-hidden="true" tabindex="-1"></a>  PyMem_Free<span class="op">(</span>_children<span class="op">);</span></span>
<span id="cb10-127"><a href="#cb10-127" aria-hidden="true" tabindex="-1"></a>  p<span class="op">-&gt;</span>level<span class="op">--;</span></span>
<span id="cb10-128"><a href="#cb10-128" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> _seq<span class="op">;</span></span>
<span id="cb10-129"><a href="#cb10-129" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb10-130"><a href="#cb10-130" aria-hidden="true" tabindex="-1"></a>func_type_rule<span class="op">()</span> <span class="op">{</span> _loop1_104_rule<span class="op">(</span>_loop1_106_rule<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>It’s a big and messy file! But do not be afraid!</p>
<p>I checked first what <code>gcc_debug</code> tries to do with it when it optimizes
it to see if I could apply more optimizations manually. <code>-fopt-info</code>
flag to the rescue:</p>
<pre><code>$$ LANG=C gcc -c -O2 -fprofile-use -fprofile-correction -o Parser/parser.o Parser/parser.c -fopt-info
...
Parser/parser.c:10:9: error: source locations for function '_loop1_104_rule' have changed, the profile data may be out of date [-Werror=coverage-mismatch]
...
Parser/parser.c:10:9: optimized: Semantic equality hit:_loop1_104_rule/0-&gt;_loop1_106_rule/1
Parser/parser.c:10:9: optimized: Assembler symbol names:_loop1_104_rule/0-&gt;_loop1_106_rule/1
Parser/parser.c:10:9: error: probability of edge 3-&gt;4 not initialized
Parser/parser.c:10:9: error: probability of edge 5-&gt;6 not initialized
Parser/parser.c:10:9: error: probability of edge 8-&gt;6 not initialized
Parser/parser.c:10:9: error: probability of edge 10-&gt;6 not initialized
Parser/parser.c:10:9: error: probability of edge 13-&gt;6 not initialized
Parser/parser.c:10:9: error: probability of edge 20-&gt;6 not initialized
during GIMPLE pass: fixup_cfg
Parser/parser.c:10:9: internal compiler error: verify_flow_info failed
...</code></pre>
<p>There is literally one optimization: <code>_loop1_104_rule()</code> and
<code>_loop1_106_rule()</code> have identical implementation and are folded into a
single function.</p>
<p>I supplied <code>main()</code> function, stubbed out missing functions and managed
to get a source-only reproducer without the need for <code>*.gcda</code> files!</p>
<p>This allowed me running <code>cvise</code> on a <code>.c</code> file alone. Reducing it
further I got this beauty:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat bug.c</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noipa<span class="op">))</span> <span class="dt">static</span> <span class="dt">void</span> edge<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{}</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> p <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">))</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> rule1<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">if</span> <span class="op">(</span>p<span class="op">)</span> edge<span class="op">();</span> <span class="op">}</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noinline<span class="op">))</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> rule1_same<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> <span class="cf">if</span> <span class="op">(</span>p<span class="op">)</span> edge<span class="op">();</span> <span class="op">}</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noipa<span class="op">))</span> <span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>    rule1<span class="op">();</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>    rule1_same<span class="op">();</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The above example still crashed as:</p>
<pre><code>$ gcc -O2 -fprofile-generate                 bug.c -o b &amp;&amp; ./b
$ gcc -O2 -fprofile-use -fprofile-correction bug.c -o b

bug.c: In function 'rule1':
bug.c:6:13: error: probability of edge 3-&gt;4 not initialized
    6 | static void rule1(void) { if (p) edge(); }
      |             ^~~~~
during GIMPLE pass: fixup_cfg
bug.c:6:13: internal compiler error: verify_flow_info failed</code></pre>
<p>It’s a nice outcome of the reduction. I pasted it as the update to the
bug hoping that somebody fixes it.</p>
<h2 id="looking-at-the-failure-mode">Looking at the failure mode</h2>
<p>The reduced case looks like some kind of a trivial bug. Is it the only
thing that plagues <code>python</code> <code>PGO</code> build? I tried to get the idea if I
can somehow work around the failure and see if <code>gcc_debug</code> crashes
somewhere else as well.</p>
<p>Even before looking at the <code>gcc</code> code I knew quite a bit about the
failure: the identical code folding fails on a function most of which
bodies is not executed: <code>if (p)</code> is always <code>false</code>.</p>
<p>Before doing <code>gcc</code> bisection I had a look at recent <code>gcc</code> commits.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=0c78240fd7d519">commit “Check that passes do not forget to define profile”</a>
added control flow graph verification against uninitialized branch
probabilities.</p>
<p>It was clearly the change that exposed problematic transformation. But
it did not change existing transformations. Thus chances are it’s not a
new problem: it only happens to be visible now. We need to find a place
where uninitialized probability gets emitted by <code>gcc</code>.</p>
<p>I added a few debugging statements into <code>gcc</code> and found that probability
corruption happens in <code>ipa-icf</code> pass (<code>identical code folding</code> pass). As
<code>rule1()</code> and <code>rule1_same()</code> have identical implementation then in
theory probabilities of both functions should sum up together (whatever
“sum” means for a complex call graph of a function).</p>
<p>To look at the specific probability values right before the corruption I
added the following debugging patch to <code>gcc</code>:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/ipa-utils.cc</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/ipa-utils.cc</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -642,14 +642,17 @@ ipa_merge_profiles (struct cgraph_node *dst,</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>          else</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>            {</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>              for (i = 0; i &lt; EDGE_COUNT (srcbb-&gt;succs); i++)</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>                {</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="va">+                 profile_count den = dstbb-&gt;count.ipa () + srccount.ipa ();</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a><span class="va">+                 gcc_assert(den.nonzero_p());</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>                  edge srce = EDGE_SUCC (srcbb, i);</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>                  edge dste = EDGE_SUCC (dstbb, i);</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>                  dste-&gt;probability =</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>                    dste-&gt;probability * dstbb-&gt;count.ipa ().probability_in</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>                                                 (dstbb-&gt;count.ipa ()</span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>                                                  + srccount.ipa ())</span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>                    + srce-&gt;probability * srcbb-&gt;count.ipa ().probability_in</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>                                                 (dstbb-&gt;count.ipa ()</span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>                                                  + srccount.ipa ());</span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>                }</span></code></pre></div>
<p>Here I extracted <code>dstbb-&gt;count.ipa () + srccount.ipa ()</code> denominator to
a separate <code>den</code> variable and added assert that it should not be zero
(as <code>probability_in()</code> turns those into undefined values).</p>
<p>Making sure we get assertion trigger:</p>
<pre><code>$ gcc/xgcc -Bgcc -O2 -fprofile-generate bug.c -o b &amp;&amp; ./b
$ gcc/xgcc -Bgcc -O2 -fprofile-use bug.c -o b
during IPA pass: icf
bug.c:14:1: internal compiler error: in ipa_merge_profiles, at ipa-utils.cc:653</code></pre>
<p>In <code>gdb</code> session I poked a bit at the actual values:</p>
<pre><code>$ gdb --args gcc/cc1 -quiet -v -iprefix /tmp/gb/gcc/../lib/gcc/x86_64-pc-linux-gnu/14.0.0/ -isystem gcc/include -isystem gcc/include-fixed bug.c -quiet -dumpdir b- -dumpbase bug.c -dumpbase-ext .c -mtune=generic -march=x86-64 -O2 -version -fprofile-use -o /run/user/1000/ccnlNQ8W.s

(gdb) start
(gdb) break internal_error
(gdb) continue
Breakpoint 2, internal_error (gmsgid=gmsgid@entry=0x285290d &quot;in %s, at %s:%d&quot;) at /home/slyfox/dev/git/gcc/gcc/diagnostic.cc:2151

(gdb) bt
#0  internal_error (gmsgid=gmsgid@entry=0x285290d &quot;in %s, at %s:%d&quot;) at /home/slyfox/dev/git/gcc/gcc/diagnostic.cc:2151
#1  0x000000000093902c in fancy_abort (file=file@entry=0x22afa38 &quot;/home/slyfox/dev/git/gcc/gcc/ipa-utils.cc&quot;, line=line@entry=653, function=function@entry=0x22af9c7 &quot;ipa_merge_profiles&quot;)
    at /home/slyfox/dev/git/gcc/gcc/diagnostic.cc:2268
#2  0x00000000007b6124 in ipa_merge_profiles (dst=dst@entry=0x7fffea01a330, src=src@entry=0x7fffea01a440, preserve_body=preserve_body@entry=false) at /home/slyfox/dev/git/gcc/gcc/ipa-utils.cc:653
#3  0x0000000001db302c in ipa_icf::sem_function::merge (this=0x2e407a0, alias_item=0x2e41060) at /home/slyfox/dev/git/gcc/gcc/ipa-icf.cc:1276

(gdb) fr 2
#2  0x00000000007b6124 in ipa_merge_profiles (dst=dst@entry=0x7fffea01a330, src=src@entry=0x7fffea01a440, preserve_body=preserve_body@entry=false)
    at /home/slyfox/dev/git/gcc/gcc/ipa-utils.cc:653
653                       gcc_assert(den.nonzero_p());

(gdb) call dstbb-&gt;count.debug()
0 (precise)
(gdb) call srccount.ipa ().debug()
0 (precise)</code></pre>
<p>Here is the initial probability value we are about to overwrite:</p>
<pre><code>(gdb) call dste-&gt;probability.debug()
always</code></pre>
<p>I proposed the conservative fix by ignoring such updates that change
probability from “initialized” to “uninitialized” as an
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=043a6fcbc27f8721301eb2f72a7839f54f393003">“ipa-utils: avoid uninitialized probabilities on ICF [PR111559]” commit</a>:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/ipa-utils.cc</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/ipa-utils.cc</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -651,13 +651,14 @@ ipa_merge_profiles (struct cgraph_node *dst,</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a> 		{</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a> 		  edge srce = EDGE_SUCC (srcbb, i);</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a> 		  edge dste = EDGE_SUCC (dstbb, i);</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="st">-		  dste-&gt;probability = </span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="st">-		    dste-&gt;probability * dstbb-&gt;count.ipa ().probability_in</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a><span class="st">-						 (dstbb-&gt;count.ipa ()</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a><span class="st">-						  + srccount.ipa ())</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a><span class="st">-		    + srce-&gt;probability * srcbb-&gt;count.ipa ().probability_in</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="st">-						 (dstbb-&gt;count.ipa ()</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="st">-						  + srccount.ipa ());</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a><span class="va">+		  profile_count sum =</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a><span class="va">+		    dstbb-&gt;count.ipa () + srccount.ipa ();</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a><span class="va">+		  if (sum.nonzero_p ())</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a><span class="va">+		    dste-&gt;probability =</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a><span class="va">+		      dste-&gt;probability * dstbb-&gt;count.ipa ().probability_in</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a><span class="va">+						   (sum)</span></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a><span class="va">+		      + srce-&gt;probability * srcbb-&gt;count.ipa ().probability_in</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="va">+						   (sum);</span></span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a> 		}</span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a> 	      dstbb-&gt;count = dstbb-&gt;count.ipa () + srccount.ipa ();</span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a> 	    }</span></code></pre></div>
<p>It might not be the best fix as we discard the fact that branch was
never executed during the profile run. But at least we don’t compromise
correctness.</p>
<p>This fixed the reduced example and the actual <code>python</code> <code>PGO</code> build for
me. Yay! That was easier than I expected.</p>
<h2 id="a-minor-comment">A minor comment</h2>
<p>All done?</p>
<p>All looked very well. The patch was not reviewed yet and <code>master</code> branch
was still exposed to this kind of failure. Franz Sirl
<a href="https://gcc.gnu.org/PR111559#c3">reported</a> that the same problem is
likely happening on <code>profiledbootstrap</code> build:</p>
<pre><code>../../gcc/c-family/c-attribs.cc:1369:1: error: probability of edge 3-&gt;4 not initialized
 1369 | handle_noclone_attribute (tree *node, tree name,
      | ^~~~~~~~~~~~~~~~~~~~~~~~
during IPA pass: inline
../../gcc/c-family/c-attribs.cc:1369:1: internal compiler error: verify_flow_info failed
0xa92b3e verify_flow_info()
        ../../gcc/cfghooks.cc:287
0xfde04c checking_verify_flow_info()
        ../../gcc/cfghooks.h:214
0xfde04c cleanup_tree_cfg_noloop
        ../../gcc/tree-cfgcleanup.cc:1154
0xfde04c cleanup_tree_cfg(unsigned int)
        ../../gcc/tree-cfgcleanup.cc:1205
0xe7b25c execute_function_todo
        ../../gcc/passes.cc:2057
0xe7b70e execute_todo
        ../../gcc/passes.cc:2142
0xe7e16f execute_one_ipa_transform_pass
        ../../gcc/passes.cc:2336
0xe7e16f execute_all_ipa_transforms(bool)
        ../../gcc/passes.cc:2396
0xacde5d cgraph_node::expand()
        ../../gcc/cgraphunit.cc:1834
0xacde5d cgraph_node::expand()
        ../../gcc/cgraphunit.cc:1794
0xacecec expand_all_functions
        ../../gcc/cgraphunit.cc:2000
0xacecec symbol_table::compile()
        ../../gcc/cgraphunit.cc:2398
0xad2197 symbol_table::compile()
        ../../gcc/cgraphunit.cc:2311
0xad2197 symbol_table::finalize_compilation_unit()
        ../../gcc/cgraphunit.cc:2583
Please submit a full bug report, with preprocessed source (by using -freport-bug).</code></pre>
<p>There <code>gcc</code>’s own build is using profile feedback information. That made
sense: there is a big chance <code>STL</code> (or other <code>gcc</code> internals) produces
identical functions worth folding. And looking at the crash log in
Franz’s case <code>handle_noclone_attribute()</code> was folded with something else.</p>
<p>Looking at the code around I found this bunch of helpers:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> tree</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>handle_noclone_attribute <span class="op">(</span>tree <span class="op">*</span>node<span class="op">,</span> tree name<span class="op">,</span></span>
<span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>                          tree ARG_UNUSED <span class="op">(</span>args<span class="op">),</span></span>
<span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>                          <span class="dt">int</span> ARG_UNUSED <span class="op">(</span>flags<span class="op">),</span> <span class="dt">bool</span> <span class="op">*</span>no_add_attrs<span class="op">)</span></span>
<span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>TREE_CODE <span class="op">(*</span>node<span class="op">)</span> <span class="op">!=</span> FUNCTION_DECL<span class="op">)</span></span>
<span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>      warning <span class="op">(</span>OPT_Wattributes<span class="op">,</span> <span class="st">&quot;%qE attribute ignored&quot;</span><span class="op">,</span> name<span class="op">);</span></span>
<span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">*</span>no_add_attrs <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> NULL_TREE<span class="op">;</span></span>
<span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> tree</span>
<span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>handle_noicf_attribute <span class="op">(</span>tree <span class="op">*</span>node<span class="op">,</span> tree name<span class="op">,</span></span>
<span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a>                        tree ARG_UNUSED <span class="op">(</span>args<span class="op">),</span></span>
<span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">int</span> ARG_UNUSED <span class="op">(</span>flags<span class="op">),</span> <span class="dt">bool</span> <span class="op">*</span>no_add_attrs<span class="op">)</span></span>
<span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>TREE_CODE <span class="op">(*</span>node<span class="op">)</span> <span class="op">!=</span> FUNCTION_DECL<span class="op">)</span></span>
<span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a>      warning <span class="op">(</span>OPT_Wattributes<span class="op">,</span> <span class="st">&quot;%qE attribute ignored&quot;</span><span class="op">,</span> name<span class="op">);</span></span>
<span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a>      <span class="op">*</span>no_add_attrs <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span>
<span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> NULL_TREE<span class="op">;</span></span>
<span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Both functions have identical implementations up to white space and
local variable names.</p>
<p>Looking at the manifestation of the crash I was pretty sure it’s exactly
the same merging issue. But in theory there might be a lot more places
where we introduce undefined probabilities.</p>
<h2 id="building-profiled-gcc">Building profiled gcc</h2>
<p>I decided to build <code>profiledbootstrap</code> on <code>x86_64</code> Just In Case. In
theory it’s very simple. You just run two commands:</p>
<pre><code>$ ~/dev/git/gcc/configure
$ make profiledbootstrap</code></pre>
<p>The only change from a trivial vanilla build is the non-default
<code>profiledbootstrap</code> build target. I ran the above commands as is.</p>
<p>The build was very slow. Some <code>.cc</code> files took 15 minutes to compile.
It’s longer than the whole <code>--disable-bootstrap</code> build on my machines
which takes around 8 minutes. I filed <a href="https://gcc.gnu.org/PR111619">PR11619</a>
for <code>"'make profiledbootstrap' makes 10+ minutes on insn-recog.cc"</code>.</p>
<p>To get the idea why some individual compilations take up to 15 minutes
let’s look at the anatomy of a <code>make profiledbootstrap</code> build:</p>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Pages: 1 -->
<svg width="604pt" height="655pt" viewBox="0.00 0.00 604.25 654.50" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 650.5)">
<polygon fill="white" stroke="none" points="-4,4 -4,-650.5 600.25,-650.5 600.25,4 -4,4"></polygon>
<!-- host&#45;c++ -->
<g id="node1" class="node">
<title>host-c++</title>
<polygon fill="none" stroke="black" stroke-dasharray="1,5" points="246.62,-646.5 39.38,-646.5 39.38,-570.75 246.62,-570.75 246.62,-646.5"></polygon>
<text text-anchor="middle" x="143" y="-629.2" font-family="Times,serif" font-size="14.00">host CXX</text>
<text text-anchor="middle" x="143" y="-595.95" font-family="Times,serif" font-size="14.00">system compiler</text>
<text text-anchor="middle" x="143" y="-578.7" font-family="Times,serif" font-size="14.00">usually optimized with -O2</text>
</g>
<!-- stage1&#45;gcc -->
<g id="node2" class="node">
<title>stage1-gcc</title>
<polygon fill="none" stroke="black" points="195.25,-517.5 90.75,-517.5 90.75,-459 195.25,-459 195.25,-517.5"></polygon>
<text text-anchor="middle" x="143" y="-500.2" font-family="Times,serif" font-size="14.00">stage1-gcc</text>
<text text-anchor="middle" x="143" y="-466.95" font-family="Times,serif" font-size="14.00">unoptimized</text>
</g>
<!-- host&#45;c++&#45;&gt;stage1&#45;gcc -->
<g id="edge1" class="edge">
<title>host-c++-&gt;stage1-gcc</title>
<path fill="none" stroke="red" d="M143,-570.5C143,-557.38 143,-542.59 143,-529.25"></path>
<polygon fill="red" stroke="red" points="146.5,-529.5 143,-519.5 139.5,-529.5 146.5,-529.5"></polygon>
<text text-anchor="middle" x="200.38" y="-539.45" font-family="Times,serif" font-size="14.00">1. CFLAGS=-O0</text>
</g>
<!-- stageprofile&#45;gcc -->
<g id="node3" class="node">
<title>stageprofile-gcc</title>
<polygon fill="none" stroke="black" points="286,-405.75 0,-405.75 0,-330 286,-330 286,-405.75"></polygon>
<text text-anchor="middle" x="143" y="-388.45" font-family="Times,serif" font-size="14.00">stageprofile-gcc</text>
<text text-anchor="middle" x="143" y="-355.2" font-family="Times,serif" font-size="14.00">optimized and instrumented</text>
<text text-anchor="middle" x="143" y="-337.95" font-family="Times,serif" font-size="14.00">also produces *.gcda files on each run</text>
</g>
<!-- stage1&#45;gcc&#45;&gt;stageprofile&#45;gcc -->
<g id="edge2" class="edge">
<title>stage1-gcc-&gt;stageprofile-gcc</title>
<path fill="none" stroke="blue" d="M143,-458.59C143,-446.3 143,-431.58 143,-417.66"></path>
<polygon fill="blue" stroke="blue" points="146.5,-417.74 143,-407.74 139.5,-417.74 146.5,-417.74"></polygon>
<text text-anchor="middle" x="264.5" y="-427.7" font-family="Times,serif" font-size="14.00">2. CFLAGS=-O2 -fprofile-generate</text>
</g>
<!-- stagetrain&#45;gcc -->
<g id="node4" class="node">
<title>stagetrain-gcc</title>
<polygon fill="none" stroke="black" points="280,-187.5 6,-187.5 6,-111.75 280,-111.75 280,-187.5"></polygon>
<text text-anchor="middle" x="143" y="-170.2" font-family="Times,serif" font-size="14.00">stagetrain-gcc</text>
<text text-anchor="middle" x="143" y="-136.95" font-family="Times,serif" font-size="14.00">optimized</text>
<text text-anchor="middle" x="143" y="-119.7" font-family="Times,serif" font-size="14.00">uses *.gcda files to generate objects</text>
</g>
<!-- stageprofile&#45;gcc&#45;&gt;stagetrain&#45;gcc -->
<g id="edge3" class="edge">
<title>stageprofile-gcc-&gt;stagetrain-gcc</title>
<path fill="none" stroke="black" d="M143,-329.7C143,-293.62 143,-238.66 143,-199.15"></path>
<polygon fill="black" stroke="black" points="146.5,-199.19 143,-189.19 139.5,-199.19 146.5,-199.19"></polygon>
<text text-anchor="middle" x="200.38" y="-254.07" font-family="Times,serif" font-size="14.00">3. CFLAGS=-O2</text>
</g>
<!-- *.gcda -->
<g id="node6" class="node">
<title>*.gcda</title>
<polygon fill="none" stroke="black" points="325.22,-240.8 328.01,-240.9 330.77,-241.05 333.49,-241.24 336.17,-241.49 338.78,-241.78 341.31,-242.11 343.77,-242.5 346.13,-242.93 348.4,-243.4 350.55,-243.91 352.59,-244.46 354.51,-245.06 356.3,-245.69 357.95,-246.36 359.47,-247.06 360.84,-247.79 362.07,-248.55 363.15,-249.34 364.08,-250.16 364.87,-251 365.5,-251.86 365.98,-252.74 366.32,-253.64 366.52,-254.55 366.57,-255.47 366.48,-256.4 366.26,-257.34 365.91,-258.28 365.44,-259.22 364.84,-260.16 364.13,-261.1 363.31,-262.03 362.39,-262.95 361.38,-263.86 360.27,-264.76 359.08,-265.64 357.81,-266.5 356.47,-267.34 355.06,-268.16 353.59,-268.95 352.07,-269.71 350.5,-270.44 348.88,-271.14 347.23,-271.81 345.54,-272.44 343.82,-273.04 342.07,-273.59 340.3,-274.1 338.52,-274.57 336.71,-275 334.89,-275.39 333.06,-275.72 331.22,-276.01 329.37,-276.26 327.52,-276.45 325.66,-276.6 323.8,-276.7 321.93,-276.75 320.07,-276.75 318.2,-276.7 316.34,-276.6 314.48,-276.45 312.63,-276.26 310.78,-276.01 308.94,-275.72 307.11,-275.39 305.29,-275 303.48,-274.57 301.7,-274.1 299.93,-273.59 298.18,-273.04 296.46,-272.44 294.77,-271.81 293.12,-271.14 291.5,-270.44 289.93,-269.71 288.41,-268.95 286.94,-268.16 285.53,-267.34 284.19,-266.5 282.92,-265.64 281.73,-264.76 280.62,-263.86 279.61,-262.95 278.69,-262.03 277.87,-261.1 277.16,-260.16 276.56,-259.22 276.09,-258.28 275.74,-257.34 275.52,-256.4 275.43,-255.47 275.48,-254.55 275.68,-253.64 276.02,-252.74 276.5,-251.86 277.13,-251 277.92,-250.16 278.85,-249.34 279.93,-248.55 281.16,-247.79 282.53,-247.06 284.05,-246.36 285.7,-245.69 287.49,-245.06 289.41,-244.46 291.45,-243.91 293.6,-243.4 295.87,-242.93 298.23,-242.5 300.69,-242.11 303.22,-241.78 305.83,-241.49 308.51,-241.24 311.23,-241.05 313.99,-240.9 316.78,-240.8 319.59,-240.75 322.41,-240.75 325.22,-240.8"></polygon>
<text text-anchor="middle" x="321" y="-254.07" font-family="Times,serif" font-size="14.00">*.gcda</text>
</g>
<!-- stageprofile&#45;gcc&#45;&gt;*.gcda -->
<g id="edge4" class="edge">
<title>stageprofile-gcc-&gt;*.gcda</title>
<path fill="none" stroke="black" stroke-dasharray="1,5" d="M204.76,-329.71C232.92,-312.76 265.11,-293.38 288.47,-279.33"></path>
<polygon fill="black" stroke="black" points="290.15,-282.4 296.92,-274.24 286.54,-276.4 290.15,-282.4"></polygon>
<text text-anchor="middle" x="427.12" y="-298.7" font-family="Times,serif" font-size="14.00">produced when building stagetrain-gcc sources</text>
</g>
<!-- stagefeedback&#45;gcc -->
<g id="node5" class="node">
<title>stagefeedback-gcc</title>
<polygon fill="none" stroke="black" points="256.38,-58.5 29.62,-58.5 29.62,0 256.38,0 256.38,-58.5"></polygon>
<text text-anchor="middle" x="143" y="-41.2" font-family="Times,serif" font-size="14.00">stagefeedback-gcc</text>
<text text-anchor="middle" x="143" y="-7.95" font-family="Times,serif" font-size="14.00">optimized on profile feedback</text>
</g>
<!-- stagetrain&#45;gcc&#45;&gt;stagefeedback&#45;gcc -->
<g id="edge6" class="edge">
<title>stagetrain-gcc-&gt;stagefeedback-gcc</title>
<path fill="none" stroke="black" d="M143,-111.5C143,-98.38 143,-83.59 143,-70.25"></path>
<polygon fill="black" stroke="black" points="146.5,-70.5 143,-60.5 139.5,-70.5 146.5,-70.5"></polygon>
<text text-anchor="middle" x="245" y="-80.45" font-family="Times,serif" font-size="14.00">4. CFLAGS=-O2 -fprofile-use</text>
</g>
<!-- *.gcda&#45;&gt;stagetrain&#45;gcc -->
<g id="edge5" class="edge">
<title>*.gcda-&gt;stagetrain-gcc</title>
<path fill="none" stroke="black" d="M295.87,-242.63C274.69,-229.88 243.31,-211 214.48,-193.65"></path>
<polygon fill="black" stroke="black" points="216.49,-190.77 206.12,-188.61 212.88,-196.77 216.49,-190.77"></polygon>
<text text-anchor="middle" x="382.12" y="-209.45" font-family="Times,serif" font-size="14.00">used to compile stagefeedback-gcc</text>
</g>
</g>
</svg>

<p>Or if we put the picture in words:</p>
<ol type="1">
<li><code>stage1-gcc</code> is built using <code>-O0</code> by host <code>gcc</code> (or other compiler).
At this point we get <code>gcc</code> of guaranteed feature set and
configuration.</li>
<li><code>stageprofile-gcc</code> is built using <code>-O2 -fprofile-generate</code> by
unoptimized <code>stage1-gcc</code></li>
<li><code>stagetrain-gcc</code> is built using <code>-O2</code> by <code>stageprofile-gcc</code> to
produce <code>.gcda</code> files and to produce next compiler stage</li>
<li><code>stagefeedback</code> is built using <code>-O2 -fprofile-use</code> by
<code>stagetrain-gcc</code> to produce final profile-optimised compiler.</li>
</ol>
<p>All of <code>[2.]-[3.]-[4.]</code> added are faster than single <code>[1.]</code> as all of
them use <code>-O2</code> option. And <code>[1.]</code> uses <code>CFLAGS=-O0</code> by default.</p>
<p>The speed-up workaround was to build <code>stage1-gcc</code> with optimizations
(<code>-O2</code> instead of default <code>-O0</code>). <code>gcc</code> build system provides
<code>STAGE1_CFLAGS</code> option for that. And while at it we will enable <code>-ggdb3</code>
instead of default <code>-g</code> option:</p>
<pre><code>$ ~/dev/git/gcc/configure
$ make profiledbootstrap STAGE1_CFLAGS='-O2 -ggdb3' BOOT_CFLAGS='-O2 -ggdb3'</code></pre>
<p>That made the build a lot faster for me.</p>
<p>The only problem is that build failed configuring <code>stagetrain-gcc</code>
(equivalent of <code>stage3-gcc</code> for non-profiled builds):</p>
<pre><code>$ make profiledbootstrap
...
checking for uintptr_t... no
configure: error: uint64_t or int64_t not found
make[2]: *** [Makefile:4862: configure-stagetrain-gcc] Error 1
make[2]: Leaving directory '/tmp/gb'
make[1]: *** [Makefile:26749: stagetrain-bubble] Error 2
make[1]: Leaving directory '/tmp/gb'
make: *** [Makefile:26902: profiledbootstrap] Error 2</code></pre>
<p>That’s not good. It’s certainly not the failure Franz saw. I switched
over to exploring that bug instead.</p>
<h2 id="debugging-stagetrain-gcc-crash">Debugging <code>stagetrain-gcc</code> crash</h2>
<p>I looked at <code>gcc/config.log</code> to check why <code>uint64_t</code> had problems:</p>
<pre><code>configure:6937:  /tmp/gb/./prev-gcc/xg++ -B/tmp/gb/./prev-gcc/ ...
internal compiler error: in diagnostic_report_diagnostic, at diagnostic.cc:1486
0x4418233 gcov_do_dump
        gcc/libgcc/libgcov-driver.c:689
0x44198c3 __gcov_dump_one
        gcc/libgcc/libgcov-driver.c:722
...
xg++: internal compiler error: Aborted signal terminated program cc1plus</code></pre>
<p>That’s a compiler crash in machinery related to profile counter dumping.
Built compiler also crashes on simplest input:</p>
<pre><code>$ touch a.c
$ prev-gcc/xg++ -Bprev-gcc -c a.c
...
internal compiler error: in diagnostic_report_diagnostic, at diagnostic.cc:1486</code></pre>
<p>That makes it a bit easier to debug.</p>
<p>To improve debugging of intermediate stages and retain <code>-ggdb3</code> flags in
all <code>gcc</code> build stages I also dropped <code>-gtoggle</code> from <code>stage2-gcc</code>.</p>
<p>Normally <code>-gtoggle</code> is used to compare <code>stage2</code> and <code>stage3</code> in vanilla
bootstrap to make sure added/removed <code>-g</code> options don’t affect generated
executable code. But in our case it build with <code>-g0</code> just the stage we
want to debug.</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/config/bootstrap-debug.mk</span></span>
<span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/config/bootstrap-debug.mk</span></span>
<span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -11,2 +11,3 @@</span></span>
<span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a><span class="st">-STAGE2_CFLAGS += -gtoggle</span></span>
<span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a><span class="va">+#STAGE2_CFLAGS += -gtoggle</span></span>
<span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a> do-compare = $(SHELL) $(srcdir)/contrib/compare-debug $$f1 $$f2</span></code></pre></div>
<p>And restarted <code>gcc</code> build after the change.</p>
<p>Back to our crash: <code>gdb</code> told me that <code>SIGSEGV</code> happened right at <code>gcc</code>
exit in global destructors:</p>
<pre><code>Program received signal SIGSEGV, Segmentation fault.
0x0000000004424506 in gcov_do_dump (list=0x5c9c020, run_counted=0, mode=0) at /home/slyfox/dev/git/gcc/libgcc/libgcov-driver.c:689
689             for (unsigned i = 0; i &lt; cinfo-&gt;num; i++)

(gdb) bt
#0  0x0000000004424506 in gcov_do_dump (list=0x5c9c020, run_counted=0, mode=0) at /home/slyfox/dev/git/gcc/libgcc/libgcov-driver.c:689
#1  0x00000000044245e5 in __gcov_dump_one (root=0x6c15be0 &lt;__gcov_root&gt;) at /home/slyfox/dev/git/gcc/libgcc/libgcov-driver.c:722
#2  0x0000000004424627 in __gcov_exit () at /home/slyfox/dev/git/gcc/libgcc/libgcov-driver.c:747
#3  0x00007ffff7fcb0e2 in _dl_call_fini (closure_map=closure_map@entry=0x7ffff7ffe2c0) at dl-call_fini.c:43
#4  0x00007ffff7fcee06 in _dl_fini () at dl-fini.c:114
#5  0x00007ffff79d1255 in __run_exit_handlers (status=0, listp=0x7ffff7b6d660 &lt;__exit_funcs&gt;, run_list_atexit=run_list_atexit@entry=true, run_dtors=run_dtors@entry=true) at exit.c:111
#6  0x00007ffff79d138e in __GI_exit (status=&lt;optimized out&gt;) at exit.c:141
#7  0x00007ffff79b9ad5 in __libc_start_call_main (main=main@entry=0xc63030 &lt;main(int, char**)&gt;, argc=argc@entry=21, argv=argv@entry=0x7fffffffad68) at ../sysdeps/nptl/libc_start_call_main.h:74
#8  0x00007ffff79b9b89 in __libc_start_main_impl (main=0xc63030 &lt;main(int, char**)&gt;, argc=21, argv=0x7fffffffad68, init=&lt;optimized out&gt;, fini=&lt;optimized out&gt;, rtld_fini=&lt;optimized out&gt;, stack_end=0x7fffffffad58)
    at ../csu/libc-start.c:360
#9  0x0000000000c63d25 in _start ()</code></pre>
<p>According to <code>gdb</code> the crash happens at <code>cinfo-&gt;num</code> dereference:</p>
<pre><code>(gdb) list
684         for (unsigned f_ix = 0; (unsigned)f_ix != gi_ptr-&gt;n_functions; f_ix++)
685           {
686             const struct gcov_ctr_info *cinfo
687               = &amp;gi_ptr-&gt;functions[f_ix]-&gt;ctrs[GCOV_COUNTER_ARCS];
688
689             for (unsigned i = 0; i &lt; cinfo-&gt;num; i++)
690               if (run_max &lt; cinfo-&gt;values[i])
691                 run_max = cinfo-&gt;values[i];
692           }
693</code></pre>
<p>Looking at the specifics some tables we dereference are <code>NULL</code>:</p>
<pre><code>(gdb) p *gi_ptr
$1 = {version = 1110716448, next = 0x50b5500, stamp = 4280923493, checksum = 2709867717, filename = 0x44558dc &quot;/tmp/gb/gcc/cp/logic.gcda&quot;, merge = {0x4421950 &lt;__gcov_merge_add&gt;, 0x0, 0x0, 0x0,
    0x44219a0 &lt;__gcov_merge_topn&gt;, 0x0, 0x0, 0x4421be0 &lt;__gcov_merge_time_profile&gt;}, n_functions = 106, functions = 0x50b6480}:

(gdb) p f_ix
$6 = 0

(gdb) p gi_ptr-&gt;functions[f_ix]
$7 = (const gcov_fn_info * const) 0x0</code></pre>
<p>You would think that it’s just an unhandled case of <code>NULL</code> functions in
the table. At least that’s what I thought initially. In reality it’s not
the case.</p>
<p>The expected layout here is the following:</p>
<ul>
<li><code>gi_ptr</code> is the pointer to the table of performance counters per
function for a module (usually for one <code>.c</code> file, in our case it is
<code>gcc/cp/logic.cc</code>).</li>
<li><code>gi_ptr-&gt;n_functions</code> is the <code>gi_ptr-&gt;functions</code> array size with
pointers to counters associated with each given function (multiple
counters per function).</li>
</ul>
<p>In pictures the layout should look this way:</p>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Pages: 1 -->
<svg width="401pt" height="470pt" viewBox="0.00 0.00 401.25 469.75" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 465.75)">
<polygon fill="white" stroke="none" points="-4,4 -4,-465.75 397.25,-465.75 397.25,4 -4,4"></polygon>
<!-- gi_ptr -->
<g id="node1" class="node">
<title>gi_ptr</title>
<polygon fill="none" stroke="black" points="207.88,-425.25 207.88,-461.25 308.62,-461.25 308.62,-425.25 207.88,-425.25"></polygon>
<text text-anchor="middle" x="258.25" y="-438.57" font-family="Times,serif" font-size="14.00">info * gi_ptr</text>
</g>
<!-- mod1 -->
<g id="node2" class="node">
<title>mod1</title>
<polygon fill="none" stroke="black" points="169.62,-211.5 169.62,-388.25 346.88,-388.25 346.88,-211.5 169.62,-211.5"></polygon>
<text text-anchor="middle" x="258.25" y="-370.95" font-family="Times,serif" font-size="14.00">...</text>
<polyline fill="none" stroke="black" points="169.62,-363 346.88,-363"></polyline>
<text text-anchor="middle" x="258.25" y="-345.7" font-family="Times,serif" font-size="14.00">info * next</text>
<polyline fill="none" stroke="black" points="169.62,-337.75 346.88,-337.75"></polyline>
<text text-anchor="middle" x="258.25" y="-320.45" font-family="Times,serif" font-size="14.00">name='logic.gcda'</text>
<polyline fill="none" stroke="black" points="169.62,-312.5 346.88,-312.5"></polyline>
<text text-anchor="middle" x="258.25" y="-295.2" font-family="Times,serif" font-size="14.00">...</text>
<polyline fill="none" stroke="black" points="169.62,-287.25 346.88,-287.25"></polyline>
<text text-anchor="middle" x="258.25" y="-269.95" font-family="Times,serif" font-size="14.00">u64 n_functions = 106</text>
<polyline fill="none" stroke="black" points="169.62,-262 346.88,-262"></polyline>
<text text-anchor="middle" x="258.25" y="-244.7" font-family="Times,serif" font-size="14.00">fn_info ** functions</text>
<polyline fill="none" stroke="black" points="169.62,-236.75 346.88,-236.75"></polyline>
<text text-anchor="middle" x="258.25" y="-219.45" font-family="Times,serif" font-size="14.00">...</text>
</g>
<!-- gi_ptr&#45;&gt;mod1 -->
<g id="edge1" class="edge">
<title>gi_ptr-&gt;mod1:W</title>
<path fill="none" stroke="black" d="M258.25,-424.81C258.25,-417.17 258.25,-408.08 258.25,-399.83"></path>
<polygon fill="black" stroke="black" points="261.75,-400.1 258.25,-390.1 254.75,-400.1 261.75,-400.1"></polygon>
</g>
<!-- mod1_fns -->
<g id="node3" class="node">
<title>mod1_fns</title>
<polygon fill="none" stroke="black" points="75.38,-73.5 75.38,-174.5 197.12,-174.5 197.12,-73.5 75.38,-73.5"></polygon>
<text text-anchor="middle" x="136.25" y="-157.2" font-family="Times,serif" font-size="14.00">[0]</text>
<polyline fill="none" stroke="black" points="75.38,-149.25 197.12,-149.25"></polyline>
<text text-anchor="middle" x="136.25" y="-131.95" font-family="Times,serif" font-size="14.00">[1]</text>
<polyline fill="none" stroke="black" points="75.38,-124 197.12,-124"></polyline>
<text text-anchor="middle" x="136.25" y="-106.7" font-family="Times,serif" font-size="14.00">...</text>
<polyline fill="none" stroke="black" points="75.38,-98.75 197.12,-98.75"></polyline>
<text text-anchor="middle" x="136.25" y="-81.45" font-family="Times,serif" font-size="14.00">[n_functions-1]</text>
</g>
<!-- mod1&#45;&gt;mod1_fns -->
<g id="edge2" class="edge">
<title>mod1:w-&gt;mod1_fns:W</title>
<path fill="none" stroke="black" d="M168.25,-248.88C141.45,-248.88 135.99,-212.03 135.43,-186.33"></path>
<polygon fill="black" stroke="black" points="138.93,-186.35 135.48,-176.33 131.93,-186.32 138.93,-186.35"></polygon>
</g>
<!-- mod2 -->
<g id="node7" class="node">
<title>mod2</title>
<polygon fill="none" stroke="black" points="265.12,-73.5 265.12,-174.5 355.38,-174.5 355.38,-73.5 265.12,-73.5"></polygon>
<text text-anchor="middle" x="310.25" y="-157.2" font-family="Times,serif" font-size="14.00">...</text>
<polyline fill="none" stroke="black" points="265.12,-149.25 355.38,-149.25"></polyline>
<text text-anchor="middle" x="310.25" y="-131.95" font-family="Times,serif" font-size="14.00">info * next</text>
<polyline fill="none" stroke="black" points="265.12,-124 355.38,-124"></polyline>
<text text-anchor="middle" x="310.25" y="-106.7" font-family="Times,serif" font-size="14.00">name='...'</text>
<polyline fill="none" stroke="black" points="265.12,-98.75 355.38,-98.75"></polyline>
<text text-anchor="middle" x="310.25" y="-81.45" font-family="Times,serif" font-size="14.00">...</text>
</g>
<!-- mod1&#45;&gt;mod2 -->
<g id="edge6" class="edge">
<title>mod1:e-&gt;mod2:e</title>
<path fill="none" stroke="black" d="M348.25,-350.88C386.32,-350.88 396.46,-195.75 366.76,-166.67"></path>
<polygon fill="black" stroke="black" points="368.19,-163.48 357.63,-162.61 365.35,-169.87 368.19,-163.48"></polygon>
</g>
<!-- __gcov.f${N&#45;1} -->
<g id="node4" class="node">
<title>__gcov.f${N-1}</title>
<polygon fill="none" stroke="black" points="0,-0.5 0,-36.5 122.5,-36.5 122.5,-0.5 0,-0.5"></polygon>
<text text-anchor="middle" x="61.25" y="-13.82" font-family="Times,serif" font-size="14.00">__gcov.f${N-1}</text>
</g>
<!-- mod1_fns&#45;&gt;__gcov.f${N&#45;1} -->
<g id="edge3" class="edge">
<title>mod1_fns:e-&gt;__gcov.f${N-1}</title>
<path fill="none" stroke="black" d="M198.25,-86C240.39,-86 176.96,-60.23 123.08,-40.77"></path>
<polygon fill="black" stroke="black" points="124.48,-37.55 113.89,-37.48 122.12,-44.15 124.48,-37.55"></polygon>
</g>
<!-- __gcov.f1 -->
<g id="node5" class="node">
<title>__gcov.f1</title>
<polygon fill="none" stroke="black" points="140.75,-0.5 140.75,-36.5 219.75,-36.5 219.75,-0.5 140.75,-0.5"></polygon>
<text text-anchor="middle" x="180.25" y="-13.82" font-family="Times,serif" font-size="14.00">__gcov.f1</text>
</g>
<!-- mod1_fns&#45;&gt;__gcov.f1 -->
<g id="edge4" class="edge">
<title>mod1_fns:e-&gt;__gcov.f1</title>
<path fill="none" stroke="black" d="M198.25,-137C234.53,-137 212.49,-81.58 195.12,-46.86"></path>
<polygon fill="black" stroke="black" points="198.34,-45.47 190.64,-38.18 192.12,-48.67 198.34,-45.47"></polygon>
</g>
<!-- __gcov.f0 -->
<g id="node6" class="node">
<title>__gcov.f0</title>
<polygon fill="none" stroke="black" points="237.75,-0.5 237.75,-36.5 316.75,-36.5 316.75,-0.5 237.75,-0.5"></polygon>
<text text-anchor="middle" x="277.25" y="-13.82" font-family="Times,serif" font-size="14.00">__gcov.f0</text>
</g>
<!-- mod1_fns&#45;&gt;__gcov.f0 -->
<g id="edge5" class="edge">
<title>mod1_fns:e-&gt;__gcov.f0</title>
<path fill="none" stroke="black" d="M198.25,-162C211.23,-162 246.23,-88.71 264.98,-47.25"></path>
<polygon fill="black" stroke="black" points="268.07,-48.91 268.97,-38.35 261.69,-46.04 268.07,-48.91"></polygon>
</g>
<!-- NULL -->
<g id="node8" class="node">
<title>NULL</title>
<polygon fill="none" stroke="black" points="335.25,-0.5 335.25,-36.5 393.25,-36.5 393.25,-0.5 335.25,-0.5"></polygon>
<text text-anchor="middle" x="364.25" y="-13.82" font-family="Times,serif" font-size="14.00">NULL</text>
</g>
<!-- mod2&#45;&gt;NULL -->
<g id="edge7" class="edge">
<title>mod2:e-&gt;NULL</title>
<path fill="none" stroke="black" d="M356.25,-137C391.89,-137 382.71,-82.53 373.22,-47.77"></path>
<polygon fill="black" stroke="black" points="376.62,-46.92 370.47,-38.29 369.89,-48.87 376.62,-46.92"></polygon>
</g>
</g>
</svg>

<p><code>gcc</code> code generator never puts zeros into <code>functions</code> array. Each
<code>__gcov.f&lt;N&gt;</code> entry is itself an array of counters associated with a
single function <code>f${N}</code>.</p>
<p>Back to our crash: according to <code>gdb</code> session above somehow
<code>functions[0]</code> entry has <code>NULL</code> value. We have <code>n_functions = 106</code>
entries there. Let’s peek at first 16 to get the idea if it has any
reasonable values:</p>
<pre><code>(gdb) x/16a &amp;gi_ptr-&gt;functions[f_ix]
0x50b6480:      0x0     0x0
0x50b6490:      0x50b8e80 &lt;__gcov_._Z21ggc_cleared_vec_allocIP17subsumption_entryEPT_m&gt; 0x50b8e20 &lt;__gcov_._ZN10hash_tableI11atom_hasherLb0E11xcallocatorE26find_empty_slot_for_expandEj&gt;
0x50b64a0:      0x50b8dc0 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorE6expandEv&gt;     0x50b8d60 &lt;__gcov_._Z8finalizeI10hash_tableI18subsumption_hasherLb0E11xcallocatorEEvPv&gt;
0x50b64b0:      0x50b8d00 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorE6verifyERKP17subsumption_entryj&gt;       0x50b8ca0 &lt;__gcov_._ZNK10hash_tableI18subsumption_hasherLb0E11xcallocatorE13alloc_entriesEm&gt;
0x50b64c0:      0x50b8c40 &lt;__gcov_._ZNSt15__allocated_ptrISaISt10_List_nodeI6clauseEEED2Ev&gt;     0x50b8be0 &lt;__gcov_._ZNSt7__cxx114listI6clauseSaIS1_EE14_M_create_nodeIJRP9tree_nodeEEEPSt10_List_nodeIS1_EDpOT_&gt;
0x50b64d0:      0x50b8b80 &lt;__gcov_._ZNSt15__allocated_ptrISaISt10_List_nodeIP9tree_nodeEEED2Ev&gt; 0x50b8b20 &lt;__gcov_._Z21ggc_cleared_vec_allocIP9tree_nodeEPT_m&gt;
0x50b64e0:      0x50b8ac0 &lt;__gcov_._ZN10hash_tableI11atom_hasherLb0E11xcallocatorE6verifyERKP9tree_nodej&gt;       0x50b8a60 &lt;__gcov_._ZN10hash_tableI11atom_hasherLb0E11xcallocatorE6expandEv&gt;
0x50b64f0:      0x50b8a00 &lt;__gcov_._Z27hashtab_entry_note_pointersI18subsumption_hasherEvPvS1_PFvS1_S1_S1_ES1_&gt; 0x50b89a0 &lt;__gcov_._ZNK10hash_tableI18subsumption_hasherLb0E11xcallocatorE24check_complete_insertionEv&gt;</code></pre>
<p>Aha, the first two entries have unexpected <code>NULL</code> values. The rest of
them look as expected and are related to <code>__gcov</code> counters. Let’s check
if first two <code>NULL</code>s were always there or it’s a later runtime
corruption.</p>
<p>We care about <code>0x50b6480</code> address specifically (the first that contains
unexpected <code>0x0</code>). Let’s look at the array values at the very <code>gcc</code>
start:</p>
<pre><code>(gdb) start
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Temporary breakpoint 1 at 0xc63030: file /home/slyfox/dev/git/gcc/gcc/main.cc, line 35.

Temporary breakpoint 1, main (argc=21, argv=0x7fffffffad68) at /home/slyfox/dev/git/gcc/gcc/main.cc:35

(gdb) x/16a 0x50b6480

0x50b6480:      0x50b8fc0 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorE26find_empty_slot_for_expandEj&gt;        0x50b8ee0 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorED2Ev&gt;
0x50b6490:      0x50b8e80 &lt;__gcov_._Z21ggc_cleared_vec_allocIP17subsumption_entryEPT_m&gt; 0x50b8e20 &lt;__gcov_._ZN10hash_tableI11atom_hasherLb0E11xcallocatorE26find_empty_slot_for_expandEj&gt;
0x50b64a0:      0x50b8dc0 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorE6expandEv&gt;     0x50b8d60 &lt;__gcov_._Z8finalizeI10hash_tableI18subsumption_hasherLb0E11xcallocatorEEvPv&gt;
0x50b64b0:      0x50b8d00 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorE6verifyERKP17subsumption_entryj&gt;       0x50b8ca0 &lt;__gcov_._ZNK10hash_tableI18subsumption_hasherLb0E11xcallocatorE13alloc_entriesEm&gt;
0x50b64c0:      0x50b8c40 &lt;__gcov_._ZNSt15__allocated_ptrISaISt10_List_nodeI6clauseEEED2Ev&gt;     0x50b8be0 &lt;__gcov_._ZNSt7__cxx114listI6clauseSaIS1_EE14_M_create_nodeIJRP9tree_nodeEEEPSt10_List_nodeIS1_EDpOT_&gt;
0x50b64d0:      0x50b8b80 &lt;__gcov_._ZNSt15__allocated_ptrISaISt10_List_nodeIP9tree_nodeEEED2Ev&gt; 0x50b8b20 &lt;__gcov_._Z21ggc_cleared_vec_allocIP9tree_nodeEPT_m&gt;
0x50b64e0:      0x50b8ac0 &lt;__gcov_._ZN10hash_tableI11atom_hasherLb0E11xcallocatorE6verifyERKP9tree_nodej&gt;       0x50b8a60 &lt;__gcov_._ZN10hash_tableI11atom_hasherLb0E11xcallocatorE6expandEv&gt;
0x50b64f0:      0x50b8a00 &lt;__gcov_._Z27hashtab_entry_note_pointersI18subsumption_hasherEvPvS1_PFvS1_S1_S1_ES1_&gt; 0x50b89a0 &lt;__gcov_._ZNK10hash_tableI18subsumption_hasherLb0E11xcallocatorE24check_complete_insertionEv&gt;</code></pre>
<p>Compared to the previous output here we see that first two entries are
valid non-<code>NULL</code> counters for functions named:</p>
<pre><code>$ c++filt _ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorE26find_empty_slot_for_expandEj _ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorED2Ev
hash_table&lt;subsumption_hasher, false, xcallocator&gt;::find_empty_slot_for_expand(unsigned int)
hash_table&lt;subsumption_hasher, false, xcallocator&gt;::~hash_table()</code></pre>
<p>That means something corrupted first two entries a while after.</p>
<p>Let’s catch the actual place where <code>0x0</code> clobber write happens using
<code>gdb</code>’s watch points:</p>
<pre><code>(gdb) watch -l *(void**)0x50b6480
Hardware watchpoint 2: -location *(void**)0x50b6480
(gdb) continue

Old value = (void *) 0x50b8fc0 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorE26find_empty_slot_for_expandEj&gt;
New value = (void *) 0x50b8f00 &lt;__gcov_._ZN10hash_tableI18subsumption_hasherLb0E11xcallocatorED2Ev+32&gt;
__memset_avx2_unaligned_erms () at ../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:328
328     ../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S: No such file or directory.

(gdb) bt
#0  __memset_avx2_unaligned_erms () at ../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:328
#1  0x0000000001930731 in ggc_common_finalize () at /home/slyfox/dev/git/gcc/gcc/ggc-common.cc:1312
#2  0x00000000020d2421 in toplev::finalize (this=this@entry=0x7fffffffac3e) at /home/slyfox/dev/git/gcc/gcc/toplev.cc:2354
#3  0x0000000000c630e5 in main (argc=&lt;optimized out&gt;, argv=0x7fffffffad68) at /home/slyfox/dev/git/gcc/gcc/main.cc:42</code></pre>
<p>Got it! <code>memset()</code> call from <code>ggc_common_finalize()</code> does byte-by-byte
zeroing out of our entry!</p>
<h2 id="ggc-corruptor">GGC corruptor</h2>
<p>We can peek at the specific location of the writer:</p>
<pre><code>(gdb) frame 1
#1  0x0000000001930731 in ggc_common_finalize () at /home/slyfox/dev/git/gcc/gcc/ggc-common.cc:1312
1312          memset (rti-&gt;base, 0, rti-&gt;stride * rti-&gt;nelt);
(gdb) list
1307        for (rti = *rt; rti-&gt;base != NULL; rti++)
1308          memset (rti-&gt;base, 0, rti-&gt;stride * rti-&gt;nelt);
1309
1310      for (rt = gt_ggc_rtab; *rt; rt++)
1311        for (rti = *rt; rti-&gt;base != NULL; rti++)
1312          memset (rti-&gt;base, 0, rti-&gt;stride * rti-&gt;nelt);
1313
1314      for (rt = gt_pch_scalar_rtab; *rt; rt++)
1315        for (rti = *rt; rti-&gt;base != NULL; rti++)
1316          memset (rti-&gt;base, 0, rti-&gt;stride * rti-&gt;nelt);</code></pre>
<p><code>ggc</code> is related to memory managed by <code>gcc</code>’s
<a href="https://gcc.gnu.org/onlinedocs/gccint/Type-Information.html">garbage collector</a>
and to global counters related to precompiled headers.</p>
<p><code>ggc</code> is completely unrelated to statically allocated <code>gcov</code> counters.
Specifically <code>ggc</code> should never touch function pointer area.</p>
<p><code>gt_ggc_rtab</code> is a table to garbage collector root pointers for global
variables used by <code>gcc</code>. Those usually have fancy <code>GTY(())</code> annotations
around the structs.</p>
<p>Let’s figure out what value <code>ggc</code> tries to wipe out off our counter
metadata:</p>
<pre><code>(gdb) p *rti
$15 = {
  base = 0x50b5608 &lt;ovl_op_info+8&gt;,
  nelt = 116,
  stride = 32,
  cb = 0x1477b30 &lt;gt_ggc_m_S(void const*)&gt;,
  pchw = 0x20bd860 &lt;gt_pch_n_S(void const*)&gt;
}</code></pre>
<p>It’s one of the fields of <code>ovl_op_info</code> global array. <code>ovl_op_info_t</code> is
declared in <code>gcc/cp/cp-tree.h</code>:</p>
<div class="sourceCode" id="cb36"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb36-1"><a href="#cb36-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> GTY<span class="op">(())</span> <span class="dt">ovl_op_info_t</span> <span class="op">{</span></span>
<span id="cb36-2"><a href="#cb36-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* The IDENTIFIER_NODE for the operator.  */</span></span>
<span id="cb36-3"><a href="#cb36-3" aria-hidden="true" tabindex="-1"></a>  tree identifier<span class="op">;</span></span>
<span id="cb36-4"><a href="#cb36-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* The name of the operator.  */</span></span>
<span id="cb36-5"><a href="#cb36-5" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>name<span class="op">;</span></span>
<span id="cb36-6"><a href="#cb36-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* The mangled name of the operator.  */</span></span>
<span id="cb36-7"><a href="#cb36-7" aria-hidden="true" tabindex="-1"></a>  <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>mangled_name<span class="op">;</span></span>
<span id="cb36-8"><a href="#cb36-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* The (regular) tree code.  */</span></span>
<span id="cb36-9"><a href="#cb36-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">enum</span> tree_code tree_code <span class="op">:</span> <span class="dv">16</span><span class="op">;</span></span>
<span id="cb36-10"><a href="#cb36-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* The (compressed) operator code.  */</span></span>
<span id="cb36-11"><a href="#cb36-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">enum</span> ovl_op_code ovl_op_code <span class="op">:</span> <span class="dv">8</span><span class="op">;</span></span>
<span id="cb36-12"><a href="#cb36-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* The ovl_op_flags of the operator */</span></span>
<span id="cb36-13"><a href="#cb36-13" aria-hidden="true" tabindex="-1"></a>  <span class="dt">unsigned</span> flags <span class="op">:</span> <span class="dv">8</span><span class="op">;</span></span>
<span id="cb36-14"><a href="#cb36-14" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb36-15"><a href="#cb36-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb36-16"><a href="#cb36-16" aria-hidden="true" tabindex="-1"></a><span class="co">/* Overloaded operator info indexed by ass_op_p &amp; ovl_op_code.  */</span></span>
<span id="cb36-17"><a href="#cb36-17" aria-hidden="true" tabindex="-1"></a><span class="at">extern</span> GTY<span class="op">(())</span> <span class="dt">ovl_op_info_t</span> ovl_op_info<span class="op">[</span><span class="dv">2</span><span class="op">][</span>OVL_OP_MAX<span class="op">];</span></span></code></pre></div>
<p>Here <code>ovl_op_info_t</code> has 3 garbage collectable pointers:</p>
<ul>
<li><code>identifier</code></li>
<li><code>name</code></li>
<li><code>mangled_name</code></li>
</ul>
<p><code>ovl_op_info+8</code> we saw above looks like a <code>name</code> if the pointers are
8-bytes long.</p>
<p>Let’s find the table entry for our <code>rti</code> value:</p>
<pre><code>(gdb) p *rt
$23 = (const ggc_root_tab * const) 0x4488340 &lt;gt_ggc_r_gt_cp_tree_h&gt;
(gdb) p rti - *rt
$24 = 5
(gdb) p (*rt)[rti - *rt]
$25 = {
  base = 0x50b5608 &lt;ovl_op_info+8&gt;,
  nelt = 116,
  stride = 32,
  cb = 0x1477b30 &lt;gt_ggc_m_S(void const*)&gt;,
  pchw = 0x20bd860 &lt;gt_pch_n_S(void const*)&gt;
}</code></pre>
<p>According to <code>gdb</code> session right above the table with our pointer
description should be named <code>gt_ggc_r_gt_cp_tree_h</code> and fifth element
(counting from 0) will be our element. The table definition hides in
generated <code>prev-gcc/gt-cp-tree.h</code> file:</p>
<div class="sourceCode" id="cb38"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb38-1"><a href="#cb38-1" aria-hidden="true" tabindex="-1"></a>EXPORTED_CONST <span class="kw">struct</span> ggc_root_tab gt_ggc_r_gt_cp_tree_h<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb38-2"><a href="#cb38-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span> <span class="co">/* 0: skipped for brevity */</span><span class="op">},</span></span>
<span id="cb38-3"><a href="#cb38-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span> <span class="co">/* 1: skipped for brevity */</span><span class="op">},</span></span>
<span id="cb38-4"><a href="#cb38-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span> <span class="co">/* 2: skipped for brevity */</span><span class="op">},</span></span>
<span id="cb38-5"><a href="#cb38-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span> <span class="co">/* 3: skipped for brevity */</span><span class="op">},</span></span>
<span id="cb38-6"><a href="#cb38-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span> <span class="co">// 4:</span></span>
<span id="cb38-7"><a href="#cb38-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span>ovl_op_info<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">].</span>identifier<span class="op">,</span></span>
<span id="cb38-8"><a href="#cb38-8" aria-hidden="true" tabindex="-1"></a>    <span class="dv">1</span> <span class="op">*</span> <span class="op">(</span><span class="dv">2</span><span class="op">)</span> <span class="op">*</span> <span class="op">(</span>OVL_OP_MAX<span class="op">),</span></span>
<span id="cb38-9"><a href="#cb38-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">sizeof</span> <span class="op">(</span>ovl_op_info<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">]),</span></span>
<span id="cb38-10"><a href="#cb38-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span>gt_ggc_mx_tree_node<span class="op">,</span></span>
<span id="cb38-11"><a href="#cb38-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span>gt_pch_nx_tree_node</span>
<span id="cb38-12"><a href="#cb38-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">},</span></span>
<span id="cb38-13"><a href="#cb38-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span> <span class="co">// 5:</span></span>
<span id="cb38-14"><a href="#cb38-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span>ovl_op_info<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">].</span>name<span class="op">,</span></span>
<span id="cb38-15"><a href="#cb38-15" aria-hidden="true" tabindex="-1"></a>    <span class="dv">1</span> <span class="op">*</span> <span class="op">(</span><span class="dv">2</span><span class="op">)</span> <span class="op">*</span> <span class="op">(</span>OVL_OP_MAX<span class="op">),</span></span>
<span id="cb38-16"><a href="#cb38-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">sizeof</span> <span class="op">(</span>ovl_op_info<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">]),</span></span>
<span id="cb38-17"><a href="#cb38-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>gt_pointer_walker<span class="op">)</span> <span class="op">&amp;</span>gt_ggc_m_S<span class="op">,</span></span>
<span id="cb38-18"><a href="#cb38-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>gt_pointer_walker<span class="op">)</span> <span class="op">&amp;</span>gt_pch_n_S</span>
<span id="cb38-19"><a href="#cb38-19" aria-hidden="true" tabindex="-1"></a>  <span class="op">},</span></span>
<span id="cb38-20"><a href="#cb38-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span> <span class="co">// 6:</span></span>
<span id="cb38-21"><a href="#cb38-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&amp;</span>ovl_op_info<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">].</span>mangled_name<span class="op">,</span></span>
<span id="cb38-22"><a href="#cb38-22" aria-hidden="true" tabindex="-1"></a>    <span class="dv">1</span> <span class="op">*</span> <span class="op">(</span><span class="dv">2</span><span class="op">)</span> <span class="op">*</span> <span class="op">(</span>OVL_OP_MAX<span class="op">),</span></span>
<span id="cb38-23"><a href="#cb38-23" aria-hidden="true" tabindex="-1"></a>    <span class="kw">sizeof</span> <span class="op">(</span>ovl_op_info<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">]),</span></span>
<span id="cb38-24"><a href="#cb38-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>gt_pointer_walker<span class="op">)</span> <span class="op">&amp;</span>gt_ggc_m_S<span class="op">,</span></span>
<span id="cb38-25"><a href="#cb38-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">(</span>gt_pointer_walker<span class="op">)</span> <span class="op">&amp;</span>gt_pch_n_S</span>
<span id="cb38-26"><a href="#cb38-26" aria-hidden="true" tabindex="-1"></a>  <span class="op">},</span></span>
<span id="cb38-27"><a href="#cb38-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span></code></pre></div>
<p>The <code>// 5:</code> value confirms us that the entry points to <code>name</code> field of
the first element in the array. <code>nelts = 1 * (2) * (OVL_OP_MAX)</code> tells
us how many elements there are in the array and <code>stride = sizeof (ovl_op_info[0][0])</code> tells us how many bytes there are to the beginning
of the next pointer. All look sensible.</p>
<p>But if we look again at how <code>ggc_common_finalize()</code> tries to wipe these
pointers out we might notice the problem:</p>
<pre><code>1310      for (rt = gt_ggc_rtab; *rt; rt++)
1311        for (rti = *rt; rti-&gt;base != NULL; rti++)
1312          memset (rti-&gt;base, 0, rti-&gt;stride * rti-&gt;nelt);</code></pre>
<p>Instead of wiping out the pointers it wipes out the whole structs. And
given that <code>memset()</code> starts at an offset <code>8</code> of the array it actually
gets out of bounds of the <code>ovl_op_info</code> for 8 bytes. And when <code>// 6:</code>
entry is wiped we’ll get off-by-16 bytes <code>memset()</code>.</p>
<p>These extra 16 bytes are exactly the corruption we see in our <code>gcov</code>
counters.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=7525707c5f3edb46958c4fdfbe30de5ddfa8923a">The fix</a>
was straightforward: zero out only pointers themselves, not the structs
around them:</p>
<div class="sourceCode" id="cb40"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb40-1"><a href="#cb40-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/ggc-common.cc</span></span>
<span id="cb40-2"><a href="#cb40-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/ggc-common.cc</span></span>
<span id="cb40-3"><a href="#cb40-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -75,6 +75,18 @@ ggc_mark_root_tab (const_ggc_root_tab_t rt)</span></span>
<span id="cb40-4"><a href="#cb40-4" aria-hidden="true" tabindex="-1"></a>       (*rt-&gt;cb) (*(void **) ((char *)rt-&gt;base + rt-&gt;stride * i));</span>
<span id="cb40-5"><a href="#cb40-5" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb40-6"><a href="#cb40-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-7"><a href="#cb40-7" aria-hidden="true" tabindex="-1"></a><span class="va">+/* Zero out all the roots in the table RT.  */</span></span>
<span id="cb40-8"><a href="#cb40-8" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb40-9"><a href="#cb40-9" aria-hidden="true" tabindex="-1"></a><span class="va">+static void</span></span>
<span id="cb40-10"><a href="#cb40-10" aria-hidden="true" tabindex="-1"></a><span class="va">+ggc_zero_rtab_roots (const_ggc_root_tab_t rt)</span></span>
<span id="cb40-11"><a href="#cb40-11" aria-hidden="true" tabindex="-1"></a><span class="va">+{</span></span>
<span id="cb40-12"><a href="#cb40-12" aria-hidden="true" tabindex="-1"></a><span class="va">+  size_t i;</span></span>
<span id="cb40-13"><a href="#cb40-13" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb40-14"><a href="#cb40-14" aria-hidden="true" tabindex="-1"></a><span class="va">+  for ( ; rt-&gt;base != NULL; rt++)</span></span>
<span id="cb40-15"><a href="#cb40-15" aria-hidden="true" tabindex="-1"></a><span class="va">+    for (i = 0; i &lt; rt-&gt;nelt; i++)</span></span>
<span id="cb40-16"><a href="#cb40-16" aria-hidden="true" tabindex="-1"></a><span class="va">+      (*(void **) ((char *)rt-&gt;base + rt-&gt;stride * i)) = (void*)0;</span></span>
<span id="cb40-17"><a href="#cb40-17" aria-hidden="true" tabindex="-1"></a><span class="va">+}</span></span>
<span id="cb40-18"><a href="#cb40-18" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb40-19"><a href="#cb40-19" aria-hidden="true" tabindex="-1"></a> /* Iterate through all registered roots and mark each element.  */</span>
<span id="cb40-20"><a href="#cb40-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-21"><a href="#cb40-21" aria-hidden="true" tabindex="-1"></a> void</span>
<span id="cb40-22"><a href="#cb40-22" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1307,8 +1319,7 @@ ggc_common_finalize ()</span></span>
<span id="cb40-23"><a href="#cb40-23" aria-hidden="true" tabindex="-1"></a>       memset (rti-&gt;base, 0, rti-&gt;stride * rti-&gt;nelt);</span>
<span id="cb40-24"><a href="#cb40-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-25"><a href="#cb40-25" aria-hidden="true" tabindex="-1"></a>   for (rt = gt_ggc_rtab; *rt; rt++)</span>
<span id="cb40-26"><a href="#cb40-26" aria-hidden="true" tabindex="-1"></a><span class="st">-    for (rti = *rt; rti-&gt;base != NULL; rti++)</span></span>
<span id="cb40-27"><a href="#cb40-27" aria-hidden="true" tabindex="-1"></a><span class="st">-      memset (rti-&gt;base, 0, rti-&gt;stride * rti-&gt;nelt);</span></span>
<span id="cb40-28"><a href="#cb40-28" aria-hidden="true" tabindex="-1"></a><span class="va">+    ggc_zero_rtab_roots (*rt);</span></span>
<span id="cb40-29"><a href="#cb40-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb40-30"><a href="#cb40-30" aria-hidden="true" tabindex="-1"></a>   for (rt = gt_pch_scalar_rtab; *rt; rt++)</span>
<span id="cb40-31"><a href="#cb40-31" aria-hidden="true" tabindex="-1"></a>     for (rti = *rt; rti-&gt;base != NULL; rti++)</span></code></pre></div>
<p>Andrew Pinkski also mentioned that <code>bootstrap-asan</code> also detects
out-of-bounds access in <a href="https://gcc.gnu.org/PR111505" class="uri">https://gcc.gnu.org/PR111505</a> and I reproduced
it as:</p>
<pre><code>$ ../gcc/configure --with-build-config=bootstrap-asan
$ make</code></pre>
<p>The <code>gcc</code> fix fixed the <code>bootstrap-asan</code> for me. Yay!</p>
<h2 id="c-ifndr-and--fchecking2">C++, IFNDR and -fchecking=2</h2>
<p>The <code>ggc</code> fix also allowed me to get past <code>stagetrain-gcc</code> build stage
for <code>profiledbootstrap</code>.</p>
<p>But <code>make profiledbootstrap</code> started failing on <code>stagefeedback-gcc</code>
stage (roughly <code>stage4</code>) as:</p>
<pre><code>In file included from /home/slyfox/dev/git/gcc/gcc/coretypes.h:480,
                 from /home/slyfox/dev/git/gcc/gcc/rtl-tests.cc:22:
/home/slyfox/dev/git/gcc/gcc/poly-int.h: In instantiation of ‘constexpr poly_int&lt;N, T&gt;::poly_int(poly_int_full, const Cs&amp; ...) [with Cs = {int, int}; unsigned int N = 1; C = long int]’:
/home/slyfox/dev/git/gcc/gcc/poly-int.h:439:13:   required from here
/home/slyfox/dev/git/gcc/gcc/rtl-tests.cc:249:25:   in ‘constexpr’ expansion of ‘poly_int&lt;1, long int&gt;(1, 1)’
/home/slyfox/dev/git/gcc/gcc/poly-int.h:453:5: error: too many initializers for ‘long int [1]’
  453 |   : coeffs { (typename poly_coeff_traits&lt;C&gt;::
      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  454 |               template init_cast&lt;Cs&gt;::type (cs))... } {}
      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
make[3]: *** [Makefile:1188: rtl-tests.o] Error 1</code></pre>
<p>That looked like a bug in <code>c++</code> code of <code>gcc</code>. But why did it not fail
earlier when <code>stage1-gcc</code> or <code>stageprofile</code> were being built?</p>
<p>I filed <a href="https://gcc.gnu.org/PR111647" class="uri">https://gcc.gnu.org/PR111647</a> we confirmed it’s a <code>gcc</code> source
code bug: <code>gcc</code> accepts slightly different <code>c++</code> in <code>-fhcecking=1</code> and
<code>-fchecking=2</code> modes.</p>
<p>I extracted the following example out of <code>gcc</code>’s source code:</p>
<div class="sourceCode" id="cb43"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb43-1"><a href="#cb43-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat rtl-tests.cc</span></span>
<span id="cb43-2"><a href="#cb43-2" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span><span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span> N<span class="op">&gt;</span> <span class="kw">struct</span> poly_int <span class="op">{</span></span>
<span id="cb43-3"><a href="#cb43-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">template</span><span class="op">&lt;</span><span class="kw">typename</span> <span class="op">...</span>Cs<span class="op">&gt;</span> <span class="kw">constexpr</span> poly_int <span class="op">(</span><span class="at">const</span> Cs <span class="op">&amp;...</span> cs<span class="op">)</span></span>
<span id="cb43-4"><a href="#cb43-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">:</span> coeffs <span class="op">{</span> cs<span class="op">...</span> <span class="op">}</span> <span class="op">{}</span></span>
<span id="cb43-5"><a href="#cb43-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-6"><a href="#cb43-6" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> coeffs<span class="op">[</span>N<span class="op">];</span></span>
<span id="cb43-7"><a href="#cb43-7" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb43-8"><a href="#cb43-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-9"><a href="#cb43-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#define TARGET_DEFINED_VALUE </span><span class="dv">1</span></span>
<span id="cb43-10"><a href="#cb43-10" aria-hidden="true" tabindex="-1"></a><span class="co">// this works:</span></span>
<span id="cb43-11"><a href="#cb43-11" aria-hidden="true" tabindex="-1"></a><span class="co">//#define TARGET_DEFINED_VALUE 2</span></span>
<span id="cb43-12"><a href="#cb43-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb43-13"><a href="#cb43-13" aria-hidden="true" tabindex="-1"></a><span class="co">// Is instantiated only for N == 2.</span></span>
<span id="cb43-14"><a href="#cb43-14" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span><span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span> N<span class="op">&gt;</span> <span class="kw">struct</span> const_poly_int_tests <span class="op">{</span></span>
<span id="cb43-15"><a href="#cb43-15" aria-hidden="true" tabindex="-1"></a>  <span class="at">static</span> <span class="dt">void</span> run <span class="op">()</span> <span class="op">{</span></span>
<span id="cb43-16"><a href="#cb43-16" aria-hidden="true" tabindex="-1"></a>    poly_int<span class="op">&lt;</span>TARGET_DEFINED_VALUE<span class="op">&gt;</span> <span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span>
<span id="cb43-17"><a href="#cb43-17" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb43-18"><a href="#cb43-18" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p>And this code compiles (or not) depending on compiler flags:</p>
<pre><code>$ g++ -c rtl-tests.cc -fchecking=1
# did not fail, BAD!

$ g++ -c rtl-tests.cc -fchecking=2
rtl-tests.cc: In instantiation of 'constexpr poly_int&lt;N&gt;::poly_int(const Cs&amp; ...) [with Cs = {int, int}; unsigned int N = 1]':
rtl-tests.cc:15:42:   required from here
rtl-tests.cc:3:5: error: too many initializers for 'int [1]'
    3 |   : coeffs { cs... } {}
      |     ^~~~~~~~~~~~~~~~
# failed, GOOD

$ clang++ -c rtl-tests.cc
rtl-tests.cc:3:14: error: excess elements in array initializer
  : coeffs { cs... } {}
             ^~
rtl-tests.cc:15:5: note: in instantiation of function template specialization 'poly_int&lt;1&gt;::poly_int&lt;int, int&gt;' requested here
    poly_int&lt;TARGET_DEFINED_VALUE&gt; (1, 1);
    ^
1 error generated.
# failed, GOOD</code></pre>
<p>From there I learned that <a href="https://en.cppreference.com/w/cpp/language/acronyms">IFNDR</a>
means <code>"Ill-Formed, No Diagnostic Required"</code>. Which I would characterise
as allowed Undefined Behaviour of the <code>C++</code> type checker: it might or
might not detect a bug in the C++ and that’s fine to be a conforming
application.</p>
<p>And <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e465e5e4a969334f64cf0d6611de5273d73ea732">the fix</a>
was simple:</p>
<div class="sourceCode" id="cb45"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb45-1"><a href="#cb45-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/rtl-tests.cc</span></span>
<span id="cb45-2"><a href="#cb45-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/rtl-tests.cc</span></span>
<span id="cb45-3"><a href="#cb45-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -246,6 +246,7 @@ template&lt;unsigned int N&gt;</span></span>
<span id="cb45-4"><a href="#cb45-4" aria-hidden="true" tabindex="-1"></a> void</span>
<span id="cb45-5"><a href="#cb45-5" aria-hidden="true" tabindex="-1"></a> const_poly_int_tests&lt;N&gt;::run ()</span>
<span id="cb45-6"><a href="#cb45-6" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb45-7"><a href="#cb45-7" aria-hidden="true" tabindex="-1"></a><span class="va">+  using poly_int64 = poly_int&lt;N, HOST_WIDE_INT&gt;;</span></span>
<span id="cb45-8"><a href="#cb45-8" aria-hidden="true" tabindex="-1"></a>   rtx x1 = gen_int_mode (poly_int64 (1, 1), QImode);</span>
<span id="cb45-9"><a href="#cb45-9" aria-hidden="true" tabindex="-1"></a>   rtx x255 = gen_int_mode (poly_int64 (1, 255), QImode);</span>
<span id="cb45-10"><a href="#cb45-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb45-11"><a href="#cb45-11" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/gcc/simplify-rtx.cc</span></span>
<span id="cb45-12"><a href="#cb45-12" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/gcc/simplify-rtx.cc</span></span>
<span id="cb45-13"><a href="#cb45-13" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -8689,6 +8689,7 @@ template&lt;unsigned int N&gt;</span></span>
<span id="cb45-14"><a href="#cb45-14" aria-hidden="true" tabindex="-1"></a> void</span>
<span id="cb45-15"><a href="#cb45-15" aria-hidden="true" tabindex="-1"></a> simplify_const_poly_int_tests&lt;N&gt;::run ()</span>
<span id="cb45-16"><a href="#cb45-16" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb45-17"><a href="#cb45-17" aria-hidden="true" tabindex="-1"></a><span class="va">+  using poly_int64 = poly_int&lt;N, HOST_WIDE_INT&gt;;</span></span>
<span id="cb45-18"><a href="#cb45-18" aria-hidden="true" tabindex="-1"></a>   rtx x1 = gen_int_mode (poly_int64 (1, 1), QImode);</span>
<span id="cb45-19"><a href="#cb45-19" aria-hidden="true" tabindex="-1"></a>   rtx x2 = gen_int_mode (poly_int64 (-80, 127), QImode);</span>
<span id="cb45-20"><a href="#cb45-20" aria-hidden="true" tabindex="-1"></a>   rtx x3 = gen_int_mode (poly_int64 (-79, -128), QImode);</span></code></pre></div>
<p>Here <code>poly_int64</code> is made dependent on <code>N</code> parameter and compiler is
happy not to check dependent types as long as those are not
instantiated.</p>
<h2 id="the-use-case-of-bootstrap4">The use case of <code>bootstrap4</code></h2>
<p>But why did default build of <code>gcc</code> not fail for everyone? There are a
few reasons to that. Let’s look at the <code>gcc</code> <code>bootstrap</code> sequence once
more. But this time from standpoint of <code>-fchecking=</code> option.</p>
<p>The default value of <code>-fchecking=</code> is defined by <code>gcc/configure.ac</code>:</p>
<pre><code>AC_ARG_ENABLE(checking,
[AS_HELP_STRING([[--enable-checking[=LIST]]],
                [enable expensive run-time checks.  With LIST,
                 enable only specific categories of checks.
                 Categories are: yes,no,all,none,release.
                 Flags are: assert,df,extra,fold,gc,gcac,gimple,misc,
                 rtlflag,rtl,runtime,tree,valgrind,types])],
[ac_checking_flags=&quot;${enableval}&quot;],[
# Determine the default checks.
if test x$is_release = x ; then
  ac_checking_flags=yes,extra
else
  ac_checking_flags=release
fi])</code></pre>
<p>The above sets <code>--enable-checking=release</code> to <code>gcc</code> releases (which
defaults to <code>-fchecking=0</code>). A development <code>gcc</code> versions sets
<code>--enable-checking=yes,extra</code> which defaults to <code>-fchecking=2</code>.</p>
<p>But that is not all. <code>gcc</code>’s build system does the following <code>CFLAGS</code>
overrides:</p>
<ul>
<li><code>stage1-gcc</code> gets built with default host’s compiler flags</li>
<li><code>stage2-gcc</code> / <code>stageprofile</code> is built with <code>-fno-checking</code></li>
<li><code>stage3-gcc</code> / <code>stagetrain</code> is built with <code>-fchecking=1</code></li>
<li><code>stage4-gcc</code> / <code>stagefeedback</code> is build with default <code>stage3-gcc</code> flags</li>
</ul>
<p>This means we have a few ways to build <code>gcc</code> with <code>-fchecking=2</code> and
get the failure:</p>
<ol type="1">
<li>In <code>stage1-gcc</code>: your host compiler must be a
<code>--enable-checking=yes,extra</code>. Not all distributions ship the
compiler with extra checks (mine does not).</li>
<li>In <code>stage4-gcc</code> (or in <code>stagefeedback</code>): your built compiler is a
<code>--enable-checking=yes,extra</code> and you are building 4-stage compiler.</li>
</ol>
<p>I was hitting the latter <code>[2.]</code> case. Once I realized that I tried
<code>bootstrap4</code>:</p>
<pre><code>$ ../gcc/configure
$ make bootstrap4</code></pre>
<p>That allowed me to verify that <code>stage4</code> was the trigger. And once I
applied Roger’s patch <code>make profiledbootstrap</code> managed to build
<code>stagetrain</code>!</p>
<p>To get <code>stagefeedback</code> built I needed one
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=2551e10038a70901f30b2168e6e3af4536748f3c">extra patch</a>
to disable <code>-Werror</code> for <code>stagefeedback</code></p>
<div class="sourceCode" id="cb48"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb48-1"><a href="#cb48-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile.tpl</span></span>
<span id="cb48-2"><a href="#cb48-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile.tpl</span></span>
<span id="cb48-3"><a href="#cb48-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -561,6 +561,10 @@ STAGEtrain_TFLAGS = $(filter-out -fchecking=1,$(STAGE3_TFLAGS))</span></span>
<span id="cb48-4"><a href="#cb48-4" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb48-5"><a href="#cb48-5" aria-hidden="true" tabindex="-1"></a> STAGEfeedback_CFLAGS = $(STAGE4_CFLAGS) -fprofile-use -fprofile-reproducible=parallel-runs</span>
<span id="cb48-6"><a href="#cb48-6" aria-hidden="true" tabindex="-1"></a> STAGEfeedback_TFLAGS = $(STAGE4_TFLAGS)</span>
<span id="cb48-7"><a href="#cb48-7" aria-hidden="true" tabindex="-1"></a><span class="va">+# Disable warnings as errors for a few reasons:</span></span>
<span id="cb48-8"><a href="#cb48-8" aria-hidden="true" tabindex="-1"></a><span class="va">+# - sources for gen* binaries do not have .gcda files available</span></span>
<span id="cb48-9"><a href="#cb48-9" aria-hidden="true" tabindex="-1"></a><span class="va">+# - inlining decisions generate extra warnings</span></span>
<span id="cb48-10"><a href="#cb48-10" aria-hidden="true" tabindex="-1"></a><span class="va">+STAGEfeedback_CONFIGURE_FLAGS = $(filter-out --enable-werror-always,$(STAGE_CONFIGURE_FLAGS))</span></span>
<span id="cb48-11"><a href="#cb48-11" aria-hidden="true" tabindex="-1"></a> </span>
<span id="cb48-12"><a href="#cb48-12" aria-hidden="true" tabindex="-1"></a> STAGEautoprofile_CFLAGS = $(filter-out -gtoggle,$(STAGE2_CFLAGS)) -g</span>
<span id="cb48-13"><a href="#cb48-13" aria-hidden="true" tabindex="-1"></a> STAGEautoprofile_TFLAGS = $(STAGE2_TFLAGS)</span></code></pre></div>
<p>Otherwise build from <code>master</code> fails for missing profile data for
binaries that not compiler by profile-generating compiler:</p>
<pre><code>gcc/gcc/sort.cc: In function ‘void reorder45(sort_ctx*, char*, char*, char*, char*, char*) [with sort_ctx = sort_r_ctx]’:
gcc/gcc/sort.cc:313:1: error: ‘gcc/build/sort.gcda’ profile count data file not found [-Werror=missing-profile]</code></pre>
<p>And after that <code>make profiledbootstrap</code> built without any snags. And
<code>make check</code> did not show any regressions.</p>
<p><code>--disable-werror</code> was a reasonable workaround as well for
<code>-Werror</code>-related failures.</p>
<h2 id="make-bootstrap4-strikes-again"><code>make bootstrap4</code> strikes again</h2>
<p>All done?</p>
<p>I was using <code>--enable-checking=release</code> for a while to work around
<code>IFNDR</code>-related failures in <code>profiledbootstrap</code>.</p>
<p>After it was fixed I tried <code>make bootstrap4</code> on default
<code>--enable-checking=yes,extra</code>. And it failed as:</p>
<pre><code>$ ../gcc/configure --disable-multilib --enable-languages=c,c++ CC='gcc -O2' CXX='g++ -O2'
$ make bootstrap4
...
Comparing stages 3 and 4
Bootstrap comparison failure!
x86_64-pc-linux-gnu/libstdc++-v3/src/filesystem/dir.o differs
x86_64-pc-linux-gnu/libstdc++-v3/src/filesystem/cow-dir.o differs
x86_64-pc-linux-gnu/libstdc++-v3/src/c++20/tzdb.o differs
x86_64-pc-linux-gnu/libstdc++-v3/src/c++17/cow-fs_path.o differs
x86_64-pc-linux-gnu/libstdc++-v3/src/c++17/fs_path.o differs
x86_64-pc-linux-gnu/libstdc++-v3/src/c++17/cow-fs_dir.o differs
x86_64-pc-linux-gnu/libstdc++-v3/src/c++17/fs_dir.o differs</code></pre>
<p>This was a case where <code>-fchecking=2</code> caused slightly different code
generated with <code>-fchecking=1</code> and <code>-fchecking=2</code>. I filed
<a href="https://gcc.gnu.org/PR111663">PR111663</a> to clarify if it’s an expected
outcome of <code>-fchecking=2</code> or we should fix <code>gcc</code> code generation.</p>
<p>The following seems to be enough to expose unstable code generation:</p>
<div class="sourceCode" id="cb51"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb51-1"><a href="#cb51-1" aria-hidden="true" tabindex="-1"></a><span class="co">// $ cat fs_dir.cc.cc</span></span>
<span id="cb51-2"><a href="#cb51-2" aria-hidden="true" tabindex="-1"></a><span class="kw">namespace</span> std <span class="op">{</span></span>
<span id="cb51-3"><a href="#cb51-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb51-4"><a href="#cb51-4" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> type_info <span class="op">{</span></span>
<span id="cb51-5"><a href="#cb51-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> <span class="kw">operator</span><span class="op">==(</span><span class="at">const</span> type_info <span class="op">&amp;)</span> <span class="at">const</span><span class="op">;</span></span>
<span id="cb51-6"><a href="#cb51-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb51-7"><a href="#cb51-7" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> _Sp_counted_base <span class="op">{</span></span>
<span id="cb51-8"><a href="#cb51-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">virtual</span> <span class="dt">void</span> _M_get_deleter<span class="op">(</span><span class="at">const</span> type_info <span class="op">&amp;);</span></span>
<span id="cb51-9"><a href="#cb51-9" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb51-10"><a href="#cb51-10" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> _Sp_make_shared_tag <span class="op">{};</span></span>
<span id="cb51-11"><a href="#cb51-11" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">&gt;</span> <span class="kw">struct</span> _Sp_counted_ptr_inplace <span class="op">:</span> _Sp_counted_base <span class="op">{</span></span>
<span id="cb51-12"><a href="#cb51-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">struct</span> _Impl <span class="op">{</span></span>
<span id="cb51-13"><a href="#cb51-13" aria-hidden="true" tabindex="-1"></a>    _Impl<span class="op">(</span><span class="dt">int</span><span class="op">);</span></span>
<span id="cb51-14"><a href="#cb51-14" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb51-15"><a href="#cb51-15" aria-hidden="true" tabindex="-1"></a>  _Sp_counted_ptr_inplace<span class="op">(</span><span class="dt">int</span> __a<span class="op">)</span> <span class="op">:</span> _M_impl<span class="op">(</span>__a<span class="op">)</span> <span class="op">{}</span></span>
<span id="cb51-16"><a href="#cb51-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> _M_get_deleter<span class="op">(</span><span class="at">const</span> type_info <span class="op">&amp;</span>__ti<span class="op">)</span> <span class="op">{</span></span>
<span id="cb51-17"><a href="#cb51-17" aria-hidden="true" tabindex="-1"></a>    __ti <span class="op">==</span> <span class="kw">typeid</span><span class="op">(</span>_Sp_make_shared_tag<span class="op">);</span></span>
<span id="cb51-18"><a href="#cb51-18" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb51-19"><a href="#cb51-19" aria-hidden="true" tabindex="-1"></a>  _Impl _M_impl<span class="op">;</span></span>
<span id="cb51-20"><a href="#cb51-20" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb51-21"><a href="#cb51-21" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> __shared_count <span class="op">{</span></span>
<span id="cb51-22"><a href="#cb51-22" aria-hidden="true" tabindex="-1"></a>  __shared_count<span class="op">()</span> <span class="op">{</span> _Sp_counted_ptr_inplace<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;(</span><span class="dv">0</span><span class="op">);</span> <span class="op">}</span></span>
<span id="cb51-23"><a href="#cb51-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> _M_refcount<span class="op">;</span></span>
<span id="cb51-24"><a href="#cb51-24" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> <span class="co">// namespace std</span></span></code></pre></div>
<p>Triggering:</p>
<pre><code>$ g++ -frandom-seed=fs_dir.lo -c fs_dir.cc.cc -fchecking=2 -o bug.o
$ sha1sum bug.o
92d676d60ee6e26e9b242fb64bffe9e47a92052a  bug.o

$ /g++ -frandom-seed=fs_dir.lo -c fs_dir.cc.cc -fchecking=2 -o bug.o -fchecking=1
$ sha1sum bug.o
748b578657a335c212872b012b2afaf0be3ecbc4  bug.o</code></pre>
<h2 id="parting-words">Parting words</h2>
<p>What looked like a simple <code>PGO</code> bug uncovered quite a list of adjacent
<code>gcc</code> bugs in less exercised areas on <code>gcc</code> itself:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR111559">PR111559</a>: <code>"[14 regression] ICE when   building Python with PGO"</code>. <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=043a6fcbc27f8721301eb2f72a7839f54f393003">Fixed</a>.</li>
<li><a href="https://gcc.gnu.org/PR111619">PR111619</a>: <code>"'make profiledbootstrap'   makes 10+ minutes on insn-recog.cc"</code>. Not fixed yet.</li>
<li><a href="https://gcc.gnu.org/PR111629">PR111629</a>: <code>"[14 Regression]   ggc_common_finalize() corrupts global memory outsuide GTY(()) objects"</code>.
<a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=7525707c5f3edb46958c4fdfbe30de5ddfa8923a">Fixed</a>.</li>
<li><a href="https://gcc.gnu.org/PR111642">PR111642</a>: <code>"[14 Regression] bootstrap4   or profiledbootstrap failure: poly-int.h:453:5: error: too many   initializers"</code>. <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=e465e5e4a969334f64cf0d6611de5273d73ea732">Fixed</a>.</li>
<li><a href="https://gcc.gnu.org/PR111647">PR111647</a>: <code>"g++ accepts different c++   on -fchecking= anf checking=2"</code>. Not fixed yet.</li>
<li><a href="https://gcc.gnu.org/PR111653">PR111653</a>: <code>"make bootstrap4 fails for   -fchecking=2 code generation changes"</code>
Not fixed yet.</li>
</ul>
<p>At least I managed to drag the <code>PGO</code> bug itself to completion.</p>
<p><code>python</code> keeps breaking <code>gcc</code>’s <code>PGO</code> machinery.</p>
<p><code>cvise</code> is still great at reducing source files (and even <code>.gcda</code> files!).</p>
<p>I learned a few tricks how to effectively debug <code>gcc</code> crashes with <code>gdb</code>
like <code>make STAGE1_CFLAGS='-O2 -ggdb3' BOOT_CFLAGS='-O2 -ggdb3'</code> and
dropping <code>-gtoggle</code>.</p>
<p><code>make profiledbootstrap</code> seemingly never worked when ran with default
<code>./configure</code> options against <code>master</code> branch of <code>gcc</code>. But now it should!</p>
<p><code>make bootstrap4</code> is another rarely exercised and yet very useful sanity
check of <code>gcc</code>’s options like <code>-fchecking=2</code> and code generation
stability. It does not quite works yet, but we are almost there.</p>
<p><code>gcc</code> has it’s own garbage collector subsystem able to track pointers
in structs marked with <code>GTY(())</code> attribute.</p>
<p><code>IFNDR</code> is a <code>C++</code> word for allowed undefined result of type checker:
<code>IFNDR</code> code might or might not be compiled successfully and both
outcomes will be valid.</p>
<p><code>-fchecking=2</code> not just changes <code>c++</code> <code>gcc</code> understands but also changes
the way <code>gcc</code> generates code. Both are bugs, but are scary ones.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Sat, 07 Oct 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/301-another-gcc-profiling-bug.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Inline graphviz dot in hakyll</title>
    <link>http://trofi.github.io/posts/300-inline-graphviz-dot-in-hakyll.html</link>
    <description><![CDATA[<p><a href="https://github.com/trofi/trofi.github.io.gen/commit/0872d9dc50c9d15b50ceda16d408a45e5655c913">A while ago</a>
I added <code>.dot</code> file support into this blog and used it on
<a href="http://trofi.github.io/posts/248-how-do-shared-library-collisions-break.html">“How do shared library collisions break?”</a>
post.</p>
<p>The change was very easy and helped me a bit to add more visual arrows
into posts that came after.</p>
<p>The result was fine for larger <code>.dot</code> files, but one-liners were a bit
clumsy to insert into a stand alone external file. I tried to add a
quick support for inline <code>.dot</code> syntax and failed.</p>
<p>But today I had enough time to actually finish it and behold!</p>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 9.0.0 (0)
 -->
<!-- Pages: 1 -->
<svg width="161pt" height="190pt" viewBox="0.00 0.00 160.75 190.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 186)">
<polygon fill="white" stroke="none" points="-4,4 -4,-186 156.75,-186 156.75,4 -4,4"></polygon>
<!-- B -->
<g id="node1" class="node">
<title>B</title>
<polygon fill="none" stroke="black" points="76.66,-146.05 78.42,-146.15 80.16,-146.3 81.88,-146.49 83.57,-146.74 85.21,-147.03 86.81,-147.36 88.36,-147.75 89.85,-148.18 91.28,-148.65 92.64,-149.16 93.93,-149.71 95.14,-150.31 96.26,-150.94 97.31,-151.61 98.26,-152.31 99.13,-153.04 99.91,-153.8 100.59,-154.59 101.18,-155.41 101.67,-156.25 102.07,-157.11 102.37,-157.99 102.59,-158.89 102.71,-159.8 102.74,-160.72 102.69,-161.65 102.55,-162.59 102.33,-163.53 102.03,-164.47 101.65,-165.41 101.21,-166.35 100.69,-167.28 100.11,-168.2 99.47,-169.11 98.77,-170.01 98.02,-170.89 97.22,-171.75 96.37,-172.59 95.48,-173.41 94.56,-174.2 93.6,-174.96 92.61,-175.69 91.59,-176.39 90.54,-177.06 89.48,-177.69 88.39,-178.29 87.29,-178.84 86.18,-179.35 85.05,-179.82 83.91,-180.25 82.76,-180.64 81.61,-180.97 80.45,-181.26 79.28,-181.51 78.11,-181.7 76.94,-181.85 75.76,-181.95 74.59,-182 73.41,-182 72.24,-181.95 71.06,-181.85 69.89,-181.7 68.72,-181.51 67.55,-181.26 66.39,-180.97 65.24,-180.64 64.09,-180.25 62.95,-179.82 61.82,-179.35 60.71,-178.84 59.61,-178.29 58.52,-177.69 57.46,-177.06 56.41,-176.39 55.39,-175.69 54.4,-174.96 53.44,-174.2 52.52,-173.41 51.63,-172.59 50.78,-171.75 49.98,-170.89 49.23,-170.01 48.53,-169.11 47.89,-168.2 47.31,-167.28 46.79,-166.35 46.35,-165.41 45.97,-164.47 45.67,-163.53 45.45,-162.59 45.31,-161.65 45.26,-160.72 45.29,-159.8 45.41,-158.89 45.63,-157.99 45.93,-157.11 46.33,-156.25 46.82,-155.41 47.41,-154.59 48.09,-153.8 48.87,-153.04 49.74,-152.31 50.69,-151.61 51.74,-150.94 52.86,-150.31 54.07,-149.71 55.36,-149.16 56.72,-148.65 58.15,-148.18 59.64,-147.75 61.19,-147.36 62.79,-147.03 64.43,-146.74 66.12,-146.49 67.84,-146.3 69.58,-146.15 71.34,-146.05 73.11,-146 74.89,-146 76.66,-146.05"></polygon>
<text text-anchor="middle" x="74" y="-159.32" font-family="Times,serif" font-size="14.00">B</text>
</g>
<!-- C -->
<g id="node3" class="node">
<title>C</title>
<polygon fill="none" stroke="black" points="54,-109 0,-109 0,-73 54,-73 54,-109"></polygon>
<text text-anchor="middle" x="27" y="-86.33" font-family="Times,serif" font-size="14.00">C</text>
</g>
<!-- B&#45;&gt;C -->
<g id="edge3" class="edge">
<title>B-&gt;C</title>
<path fill="none" stroke="green" d="M63.1,-146.53C57.62,-138.26 50.86,-128.04 44.66,-118.68"></path>
<polygon fill="green" stroke="green" points="47.77,-117.04 39.33,-110.63 41.93,-120.9 47.77,-117.04"></polygon>
</g>
<!-- A -->
<g id="node2" class="node">
<title>A</title>
<polygon fill="none" stroke="black" points="54,-36 0,-36 0,0 54,0 54,-36"></polygon>
<text text-anchor="middle" x="27" y="-13.32" font-family="Times,serif" font-size="14.00">A</text>
</g>
<!-- A&#45;&gt;B -->
<g id="edge1" class="edge">
<title>A-&gt;B</title>
<path fill="none" stroke="red" stroke-dasharray="1,5" d="M41.61,-36.33C49.27,-46.4 58.07,-59.69 63,-73 70.28,-92.64 72.96,-116.18 73.86,-134.26"></path>
<polygon fill="red" stroke="red" points="70.35,-134.13 74.18,-144.01 77.35,-133.9 70.35,-134.13"></polygon>
<text text-anchor="middle" x="111.88" y="-86.33" font-family="Times,serif" font-size="14.00">i am dotted</text>
</g>
<!-- A&#45;&gt;C -->
<g id="edge2" class="edge">
<title>A-&gt;C</title>
<path fill="none" stroke="black" d="M32.86,-36.03C33.67,-43.68 33.93,-52.92 33.63,-61.58"></path>
<polygon fill="black" stroke="black" points="30.15,-61.09 32.98,-71.3 37.14,-61.56 30.15,-61.09"></polygon>
</g>
<!-- C&#45;&gt;A -->
<g id="edge4" class="edge">
<title>C-&gt;A</title>
<path fill="none" stroke="green" d="M21.12,-72.81C20.32,-65.14 20.07,-55.89 20.38,-47.24"></path>
<polygon fill="green" stroke="green" points="23.85,-47.75 21.04,-37.54 16.87,-47.28 23.85,-47.75"></polygon>
</g>
</g>
</svg>

<p>This is generated by the following snippet:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode dot"><code class="sourceCode dot"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    ```<span class="ot">{</span><span class="va">render</span><span class="ot">=</span><span class="va">dot</span><span class="ot">}</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="kw">digraph</span> <span class="ot">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co">      </span><span class="kw">node</span><span class="co"> </span><span class="ot">[</span><span class="at">shape</span><span class="ot">=</span><span class="va">box</span><span class="ot">]</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">      </span><span class="va">B</span><span class="co"> </span><span class="ot">[</span><span class="at">shape</span><span class="ot">=</span><span class="va">egg</span><span class="ot">]</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co">      </span><span class="va">A</span><span class="co"> </span><span class="ot">-&gt;</span><span class="co"> </span><span class="va">B</span><span class="co"> </span><span class="ot">[</span><span class="at">label</span><span class="ot">=</span><span class="st">&quot;i am dotted&quot;</span><span class="co"> </span><span class="at">style</span><span class="ot">=</span><span class="va">dotted</span><span class="co"> </span><span class="at">color</span><span class="ot">=</span><span class="va">red</span><span class="ot">]</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">      </span><span class="va">A</span><span class="co"> </span><span class="ot">-&gt;</span><span class="co"> </span><span class="va">C</span><span class="co"> </span><span class="ot">[</span><span class="va">solor</span><span class="ot">=</span><span class="va">blue</span><span class="ot">]</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co">      </span><span class="va">B</span><span class="co"> </span><span class="ot">-&gt;</span><span class="co"> </span><span class="va">C</span><span class="co"> </span><span class="ot">-&gt;</span><span class="co"> </span><span class="va">A</span><span class="co"> </span><span class="ot">[</span><span class="at">color</span><span class="ot">=</span><span class="va">green</span><span class="ot">]</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">    </span><span class="ot">}</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    ```</span></code></pre></div>
<p>The <a href="https://github.com/trofi/trofi.github.io.gen/commit/1329f12fb75572007cc7dcdc0f980fdd7ba176d7">full change</a>
ended up being very small thanks to <code>pandoc</code> and <code>hakyll</code>’s <code>unixFilter</code>:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">inlineDotWithGrapthviz ::</span> <span class="dt">TP.Pandoc</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">TP.Pandoc</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>inlineDotWithGrapthviz <span class="ot">=</span> TPW.walkM inlineDot</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ot">inlineDot ::</span> <span class="dt">TP.Block</span> <span class="ot">-&gt;</span> <span class="dt">Compiler</span> <span class="dt">TP.Block</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>inlineDot cb<span class="op">@</span>(<span class="dt">TP.CodeBlock</span> (<span class="fu">id</span>, classes, namevals) contents)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="fu">lookup</span> <span class="st">&quot;render&quot;</span> namevals <span class="op">==</span> <span class="dt">Just</span> <span class="st">&quot;dot&quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">TP.RawBlock</span> (<span class="dt">TP.Format</span> <span class="st">&quot;html&quot;</span>) <span class="op">.</span> DT.pack <span class="op">&lt;$&gt;</span> (unixFilter <span class="st">&quot;dot&quot;</span> [<span class="st">&quot;-Tsvg&quot;</span>] (DT.unpack contents))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>inlineDot x <span class="ot">=</span> <span class="fu">return</span> x</span></code></pre></div>
<p>Here we traverse the <code>pandoc</code> representation of <code>markdown</code> and substitute
<code>{render=dot}</code> for the raw output of <code>dot -Tsvg</code> tool call. Easy!</p>
<p>If you never saw what <code>graphviz</code> is capable have a loot at
<a href="https://graphviz.org/gallery/">their gallery</a>.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Fri, 06 Oct 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/300-inline-graphviz-dot-in-hakyll.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Maximum argument count on linux and in gcc</title>
    <link>http://trofi.github.io/posts/299-maximum-argument-count-on-linux-and-in-gcc.html</link>
    <description><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>By default on <code>linux</code> argument list (and environment) is limited by
less than <code>2MB</code> all bytes calculated across all arguments and environment
(including <code>argv/envp</code> array overheads and null terminators).</p>
<p><code>ulimit -s</code> can increase this limit to <code>6MB</code>. Individual command line
and environment <code>K=V</code> pairs are limited to <code>128KB</code>.</p>
<p>And due to internal implementation deficiencies of <code>gcc</code> argument list
for <code>gcc</code> happens to be limited by the same <code>128KB</code> limit.</p>
<h2 id="story-mode">Story mode</h2>
<p>My <a href="http://trofi.github.io/posts/298-unexpected-runtime-dependencies-in-nixpkgs.html">previous attempt</a>
to “just add” a bunch of <code>-fmacro-prefix-map=</code> flags to each <code>nixpkgs</code>
package worked for most packages. But it started failing for <code>qemu</code> as:</p>
<pre><code>Command line: `gcc -m64 -mcx16 /build/qemu-8.1.0/build/meson-private/tmpbyikv8nc/testfile.c \
  -o /build/qemu-8.1.0/build/meson-private/tmpbyikv8nc/output.exe -D_FILE_OFFSET_BITS=64 \
  -O0 -Wl,--start-group -laio -Wl,--end-group -Wl,--allow-shlib-undefined` -&gt; 1
stderr:
gcc: fatal error: cannot execute 'cc1': execv: Argument list too long
compilation terminated.</code></pre>
<p>The failure happens because we have exhausted some command line argument
limit. In case of <code>qemu</code> we pass around a few thousands of
<code>-fmacro-prefix-map=</code> options (<code>qemu</code> is a big package and has many
build inputs).</p>
<p>Ideally I would like to be able to pass a lot more options without
hitting the arguments limit (10x? 100x?). Luckily <code>gcc</code> and other tools
like <code>ld</code> do support a way to pass many options indirectly via response
files:</p>
<pre><code>$ gcc -g -O2 -c a.c</code></pre>
<p>The above should be equivalent to the below:</p>
<pre><code>$ echo &quot;-g&quot;   &gt; a.rsp
$ echo &quot;-O2&quot; &gt;&gt; a.rsp
$ gcc @a.rsp -c a.c</code></pre>
<p>But I’ll leave response files to another post as it ended up being
it’s own rabbit hole.</p>
<p>Instead let’s explore how many arguments you can pass to a single
command in <code>linux</code>.</p>
<h2 id="exploring-the-argument-count-limits">Exploring the argument count limits</h2>
<p>So what are the actual limits we are hitting against here? How many
arguments can we pass to <code>gcc</code> without any problems?</p>
<p>Let’s explore it! I’ll start by adding more and more <code>-g</code> options to
<code>gcc</code> call until it starts failing for a command line limit:</p>
<pre><code>$ nix shell nixpkgs#gcc
$$ set -x; touch a.c; args=(-g); while gcc ${args[@]} -c a.c; do args+=(&quot;${args[@]}&quot;); done; echo ${#args[@]}

+ set -x
+ touch a.c
+ args=(-g)
+ gcc -g -c a.c
+ args+=(&quot;${args[@]}&quot;)
+ gcc -g -g -c a.c
+ args+=(&quot;${args[@]}&quot;)
+ gcc -g -g -g -g -c a.c
+ args+=(&quot;${args[@]}&quot;)
+ gcc -g -g -g -g -g -g -g -g -c a.c
...
gcc: fatal error: cannot execute 'cc1': execv: Argument list too long
compilation terminated.
+ echo 32768
32768</code></pre>
<p>Our limit is somewhere below 32K (this is a lot lower than I expected).</p>
<p>In the above snippet we double the length of argument list to speed the
search up a bit, thus it’s not an exact value and some closest
power-of-2 ceiling.</p>
<p>Let’s extend this snippet a bit and build more flexible argument count
probe that returns us precise value. I called it <code>probe-argsize.bash</code>:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env bash</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># $1 - payload</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co"># $2... - prober command to test against argument list</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co"># create an aray of enough elements to start failing the allocation:</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="va">large</span><span class="op">=</span><span class="va">(</span><span class="st">&quot;</span><span class="va">$1</span><span class="st">&quot;</span><span class="va">)</span><span class="kw">;</span> <span class="bu">shift</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${large</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span> <span class="op">&gt;</span>/dev/null <span class="dv">2</span><span class="op">&gt;</span>/dev/null<span class="kw">;</span> <span class="cf">do</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># double the array lenght until execution start failing</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="va">large</span><span class="op">+=</span><span class="va">(</span><span class="st">&quot;</span><span class="va">${large</span><span class="op">[@]</span><span class="va">}</span><span class="st">&quot;</span><span class="va">)</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="co"># Use binary search to find largest successfully running prober</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="va">l</span><span class="op">=</span>0</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="va">u</span><span class="op">=</span><span class="va">${</span><span class="op">#</span><span class="va">large</span><span class="op">[@]</span><span class="va">}</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="kw">((</span> <span class="va">l</span> <span class="op">&lt;</span> <span class="va">u</span> <span class="kw">));</span> <span class="cf">do</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="va">m</span><span class="op">=</span><span class="va">$((</span> (<span class="va">l</span> <span class="op">+</span> <span class="va">u</span> <span class="op">+</span> <span class="dv">1</span>) <span class="op">/</span> <span class="dv">2</span> <span class="va">))</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="st">&quot;</span><span class="va">$@</span><span class="st">&quot;</span> <span class="st">&quot;</span><span class="va">${large</span><span class="op">[@]:</span><span class="dv">0</span><span class="op">:</span>m<span class="va">}</span><span class="st">&quot;</span> <span class="op">&gt;</span>/dev/null <span class="dv">2</span><span class="op">&gt;</span>/dev/null<span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        <span class="co"># can survive</span></span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        <span class="kw">((</span> <span class="va">l</span> <span class="op">=</span> <span class="va">m</span> <span class="kw">))</span></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>        <span class="kw">((</span> <span class="va">u</span> <span class="op">=</span> <span class="va">m</span> <span class="op">-</span> <span class="dv">1</span> <span class="kw">))</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">fi</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="cf">done</span></span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a><span class="bu">echo</span> <span class="va">$l</span></span></code></pre></div>
<p>The first half of the script does the same 2x argument list growth on
every step as before. And the second half does binary search for an
exact value.</p>
<p>Let’s try it out:</p>
<pre><code>$$ touch a.c; ./probe-argsize.bash -g gcc -c a.c

26118</code></pre>
<p>~26K parameters. Seems to work!</p>
<p>What if we make our argument a bit larger? Say, pass <code>-ggdb3</code> instead of
<code>-g</code>?</p>
<pre><code>$ touch a.c; ./probe-argsize.bash -ggdb3 gcc -c a.c
14510</code></pre>
<p>Just ~14K. That degrades very quickly. The available length is decreased
by half! (or something like that)</p>
<p>How about longer option? I’ll try ~100 bytes long one:</p>
<pre><code>$ touch a.c; ./probe-argsize.bash -I0123456789-90123456789-0123456789-0123456789-0123456789-0123456789-01234567889-0123456789-0123456789 \
  gcc -c a.c
1209</code></pre>
<p>1209 is extremely low. That is on par with what <code>qemu</code> exercises in
<code>nixpkgs</code>. Looks like our limit here is about <code>~120K</code> bytes if we sum up
all our argument lengths to <code>gcc</code>.</p>
<p>What if the problem is in some internal <code>gcc</code> limit and not the OS
itself? Let’s <code>strace</code> <code>gcc</code> call just to make sure:</p>
<pre><code>$$ strace -f gcc ${args[@]} -c a.c
...
[pid 1360260] execve(&quot;cc1&quot;, [&quot;cc1&quot;, &quot;-quiet&quot;, &quot;-idirafter&quot;, ..., &quot;-g&quot;, ...], \
    0x1474b80 /* 103 vars */) = -1 E2BIG (Argument list too long)</code></pre>
<p>Here we see that <code>E2BIG</code> comes right from an <code>execve()</code> system call.
Thus it’s kernel’s limitation of some sort.</p>
<h2 id="getting-the-formula">Getting the formula</h2>
<p>Can we easily increase the limit? Let’s find out how <code>linux</code> implements
limits in <a href="https://github.com/torvalds/linux/blob/2cf0f715623872823a72e451243bbf555d10d032/fs/exec.c#L1888C1-L1894C13">fs/exec.c</a>.
Maybe there is a <code>linux</code>-specific hack somewhere we could pull out.</p>
<p>There are a few places where <code>-E2BIG</code> is returned. This code looks most
relevant:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> do_execveat_common<span class="op">(</span><span class="dt">int</span> fd<span class="op">,</span> <span class="kw">struct</span> filename <span class="op">*</span>filename<span class="op">,</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>			      <span class="kw">struct</span> user_arg_ptr argv<span class="op">,</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>			      <span class="kw">struct</span> user_arg_ptr envp<span class="op">,</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>			      <span class="dt">int</span> flags<span class="op">)</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">;</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> retval<span class="op">;</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> count<span class="op">(</span>argv<span class="op">,</span> MAX_ARG_STRINGS<span class="op">);</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>	bprm<span class="op">-&gt;</span>argc <span class="op">=</span> retval<span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> count<span class="op">(</span>envp<span class="op">,</span> MAX_ARG_STRINGS<span class="op">);</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>	bprm<span class="op">-&gt;</span>envc <span class="op">=</span> retval<span class="op">;</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> bprm_stack_limits<span class="op">(</span>bprm<span class="op">);</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> copy_strings<span class="op">(</span>bprm<span class="op">-&gt;</span>envc<span class="op">,</span> envp<span class="op">,</span> bprm<span class="op">);</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>	retval <span class="op">=</span> copy_strings<span class="op">(</span>bprm<span class="op">-&gt;</span>argc<span class="op">,</span> argv<span class="op">,</span> bprm<span class="op">);</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>retval <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>		<span class="cf">goto</span> out_free<span class="op">;</span></span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>I wondered if <code>MAX_ARG_STRINGS</code> could be one of our limits once
we solve the smaller limit we are bumping into now, but nope it’s defined
in <a href="https://github.com/torvalds/linux/blob/2cf0f715623872823a72e451243bbf555d10d032/include/uapi/linux/binfmts.h#L9">include/uapi/linux/binfmts.h</a>
as:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="co"> * These are the maximum length and maximum number of strings passed to the</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="co"> * execve() system call.  MAX_ARG_STRLEN is essentially random but serves to</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co"> * prevent the kernel from being unduly impacted by misaddressed pointers.</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="co"> * MAX_ARG_STRINGS is chosen to fit in a signed 32-bit integer.</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MAX_ARG_STRLEN </span><span class="op">(</span><span class="pp">PAGE_SIZE </span><span class="op">*</span><span class="pp"> </span><span class="dv">32</span><span class="op">)</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MAX_ARG_STRINGS </span><span class="bn">0x7FFFFFFF</span></span></code></pre></div>
<p>Which is a ridiculously large number:</p>
<pre><code>$ printf &quot;%d\n&quot; 0x7FFFFFFF
2147483647</code></pre>
<p>Maybe it’s a stack limit then? <code>bprm_stack_limits()</code> looks promising:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> bprm_stack_limits<span class="op">(</span><span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">)</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>	<span class="dt">unsigned</span> <span class="dt">long</span> limit<span class="op">,</span> ptr_size<span class="op">;</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="co">	 * Limit to 1/4 of the max stack size or 3/4 of _STK_LIM</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="co">	 * (whichever is smaller) for the argv+env strings.</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="co">	 * This ensures that:</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a><span class="co">	 *  - the remaining binfmt code will not run out of stack space,</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="co">	 *  - the program will have a reasonable amount of stack left</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="co">	 *    to work from.</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">=</span> _STK_LIM <span class="op">/</span> <span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">=</span> min<span class="op">(</span>limit<span class="op">,</span> bprm<span class="op">-&gt;</span>rlim_stack<span class="op">.</span>rlim_cur <span class="op">/</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a><span class="co">	 * We've historically supported up to 32 pages (ARG_MAX)</span></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="co">	 * of argument strings even with small stacks</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">=</span> max_t<span class="op">(</span><span class="dt">unsigned</span> <span class="dt">long</span><span class="op">,</span> limit<span class="op">,</span> ARG_MAX<span class="op">);</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="co">	 * We must account for the size of all the argv and envp pointers to</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="co">	 * the argv and envp strings, since they will also take up space in</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="co">	 * the stack. They aren't stored until much later when we can't</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="co">	 * signal to the parent that the child has run out of stack space.</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a><span class="co">	 * Instead, calculate it here so it's possible to fail gracefully.</span></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="co">	 *</span></span>
<span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a><span class="co">	 * In the case of argc = 0, make sure there is space for adding a</span></span>
<span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a><span class="co">	 * empty string (which will bump argc to 1), to ensure confused</span></span>
<span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a><span class="co">	 * userspace programs don't start processing from argv[1], thinking</span></span>
<span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a><span class="co">	 * argc can never be 0, to keep them from walking envp by accident.</span></span>
<span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a><span class="co">	 * See do_execveat_common().</span></span>
<span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>	ptr_size <span class="op">=</span> <span class="op">(</span>max<span class="op">(</span>bprm<span class="op">-&gt;</span>argc<span class="op">,</span> <span class="dv">1</span><span class="op">)</span> <span class="op">+</span> bprm<span class="op">-&gt;</span>envc<span class="op">)</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">void</span> <span class="op">*);</span></span>
<span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>limit <span class="op">&lt;=</span> ptr_size<span class="op">)</span></span>
<span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span> <span class="op">-</span>E2BIG<span class="op">;</span></span>
<span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>	limit <span class="op">-=</span> ptr_size<span class="op">;</span></span>
<span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>	bprm<span class="op">-&gt;</span>argmin <span class="op">=</span> bprm<span class="op">-&gt;</span>p <span class="op">-</span> limit<span class="op">;</span></span>
<span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>This well-commented function tells us that formula here is. I’ll
compress it as:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> _STK_LIM <span class="op">/</span> <span class="dv">4</span> <span class="op">*</span> <span class="dv">3</span><span class="op">;</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> min<span class="op">(</span>limit<span class="op">,</span> bprm<span class="op">-&gt;</span>rlim_stack<span class="op">.</span>rlim_cur <span class="op">/</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> max<span class="op">(</span>limit<span class="op">,</span> ARG_MAX<span class="op">);</span></span></code></pre></div>
<p>Let’s inline as many constants as we can here:</p>
<pre><code>// from include/uapi/linux/resource.h
#define _STK_LIM  (8*1024*1024)
// from include/uapi/linux/limits.h
#define ARG_MAX 131072 /* # bytes of args + environ for exec() */</code></pre>
<p>We’ll get this 3-liner:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> <span class="dv">6</span><span class="er">MB</span><span class="op">;</span> <span class="co">// 8MB / 4 * 3</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> min<span class="op">(</span>limit<span class="op">,</span> CURRENT_STACK_LIMIT <span class="op">/</span> <span class="dv">4</span><span class="op">);</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>limit <span class="op">=</span> max<span class="op">(</span>limit<span class="op">,</span> <span class="dv">128</span><span class="er">K</span><span class="op">);</span></span></code></pre></div>
<p>The above in plain words: argument limits (in bytes) are at least 128K
and at most are 6MB. And by default it’s <code>CURRENT_STACK_LIMIT / 4</code>.</p>
<p><code>CURRENT_STACK_LIMIT</code> default is set to <code>_STK_LIM</code> as well:</p>
<pre><code>$ ulimit -s
8192</code></pre>
<p>Thus the argument length limit by default is <code>2MB</code>. And wee can raise up
to 6MB (3x) maximum if we set <code>ulimit -s</code> up to <code>24MB</code>. Setting stack
to anything higher would not affect argument limit.</p>
<p>That is the theory. Does it match the practice?</p>
<p>What did I miss? Why do we get only ~128K or argument limit for <code>gcc</code>
and not ~2MB?</p>
<p>There is a small catch: I kept exploring limits of <code>gcc</code> executable. In
<code>nixpkgs</code> it’s a big shell wrapper. Part of wrapper’s work is to set
various environment variables. Not just pass through the arguments.
And each environment variable is treated roughly like a command line
parameter.</p>
<p>Let’s use known simple <code>printf</code> binary instead (it should not set any
environment variables internally) and see what are it’s limits:</p>
<pre><code>$ ./probe-argsize.bash -g $(which printf) &quot;%s&quot; --
189929</code></pre>
<p>189K arguments! This looks more like <code>400KB</code> of argument bytes. But if you
know anything about <code>char * argv[]</code> parameter to <code>main()</code> you might know
that it’s a pointer array. And pointers probably take most overhead
here.</p>
<p>Let’s use longer arguments to mitigate pointer overhead:</p>
<pre><code>$ filler=0123456789-90123456789-0123456789-0123456789-0123456789-0123456789-01234567889-0123456789-0123456789
$ ./probe-argsize.bash $filler $(which printf) &quot;%s&quot; --
19165</code></pre>
<p>19K arguments 100 bytes each: that looks more like <code>~2MB</code> limit. Phew!
We finally got our theoretical limit.</p>
<h2 id="ultimate-argument-count-linux-allows-today">Ultimate argument count <code>linux</code> allows today</h2>
<p>Given that argument count somehow depends on stack size via
<code>CURRENT_STACK_LIMIT</code> can we just change default stack size and set
<code>10x</code> limit for argument count?</p>
<p>What is The Largest argument count we can pass on <code>linux</code>?</p>
<p>It’s not very hard to figure it out from the <code>bprm_stack_limits()</code> code
above.</p>
<p>To recap our environment structure in memory (on stack) is an array of
pointers to the null-terminated string pool:</p>
<pre><code> | (char *)argv[0] -&gt; &quot;arg0\0&quot;
 | (char *)argv[1] -&gt; &quot;arg1\0&quot;
 | (char *)argv[2] -&gt; &quot;arg2\0&quot;
 | (char *)argv[3] -&gt; &quot;arg3\0&quot;
 | (char *)argv[4] -&gt; &quot;arg4\0&quot;
 | (char *)argv[5] -&gt; &quot;arg5\0&quot;
 | ...
 | (char *)argv[N] -&gt; &quot;argN\0&quot;
 | (char *)NULL</code></pre>
<p>This means that our most memory-efficient input would be an array of
zero-byte arguments. Note, that in this case main overhead is on
pointer array and not on the arguments themselves.</p>
<p>That would be something like:</p>
<pre><code> | (char *)argv[0] -&gt; &quot;\0&quot;
 | (char *)argv[1] -&gt; &quot;\0&quot;
 | (char *)argv[2] -&gt; &quot;\0&quot;
 | (char *)argv[3] -&gt; &quot;\0&quot;
 | (char *)argv[4] -&gt; &quot;\0&quot;
 | (char *)argv[5] -&gt; &quot;\0&quot;
 | ...
 | (char *)argv[N] -&gt; &quot;\0&quot;
 | (char *)NULL</code></pre>
<p>On 64-bit systems this gives us 9 bytes per argument. That gives us
<code>2MB / 9 = 233016</code> arguments. The experiment confirms that we are very
close:</p>
<pre><code>$ ./probe-argsize.bash &quot;&quot; env -i $(which printf) &quot;%s&quot; --
232134</code></pre>
<p>An exercise for the reader: why is it 822 arguments shorter that our
maximum theoretical value? A word of warning: it’s not a very simple
question.</p>
<p>Given that <code>2MB</code> is derived from <code>1/4 * CURRENT_STACK_LIMIT</code> we can
increase that as well using <code>ulimit -s</code>. Let’s add 100x:</p>
<pre><code>$ ulimit -s
8192
$ ulimit -s 819200

$ ./probe-argsize.bash &quot;&quot; env -i $(which printf) &quot;%s&quot; --
698168</code></pre>
<p>Note that it’s only a 3x improvement (and not a 100x improvement).</p>
<p>This is exactly our <code>limit = 6MB;</code> absolute limit above. Once again: i
you need to get maximum out of your argument limits on today’s <code>linux</code>
it’s enough to set <code>ulimit -s</code> from <code>8MB</code> to <code>24MB</code>.</p>
<p>Which gives us final formula of <code>6MB / 9 = 699050</code> argument count on
64-bit systems.</p>
<p>Fun fact: on 32-bit host kernel the limit should probably be slightly higher
due to shorter pointer size:</p>
<ul>
<li><code>2MB / 5 = 419430</code> arguments (compared to <code>233016</code> on <code>64-bit</code>)</li>
<li><code>6MB / 5 = 1258291</code> arguments (compared to <code>699050</code> on <code>64-bit</code>)</li>
</ul>
<p>That is 1.8x larger than 64-bit systems!</p>
<p>Once again: it’s a pretty silly benchmark as it’s not very useful to
pass a million empty strings to the program. But it’s a good model to
understand the absolute limits.</p>
<p>We can do more realistic estimates if we know average argument length
in our use case. Say, if the bulk of our parameters are paths to the
<code>/nix/store</code> we can safely say those are at least 50 bytes long.</p>
<p>For 100-bytes long use case we would get:</p>
<ul>
<li><code>2MB / 109 = 19239</code> (64-bit), <code>2MB / 105 = 19972</code> (32-bit)</li>
<li><code>6MB / 109 = 57719</code> (64-bit), <code>6MB / 105 = 59918</code> (32-bit)</li>
</ul>
<p>Thus for simple case we should be able to pull out almost <code>~20K</code> by
default and almost <code>~60K</code> with larger stack size.</p>
<h2 id="nixpkgs-gcc-wrapper-mystery"><code>nixpkgs</code> <code>gcc</code> wrapper mystery</h2>
<p>So why does <code>gcc</code> have so much overhead of <code>-g</code> options? We get about
<code>190K</code> options for for <code>printf -g</code> and only 20K for <code>gcc -g</code> above.
That is almost 10x reduction.</p>
<p>Could <code>nixpkgs</code>’s <code>gcc</code> wrapper artificially inflate it’s arguments
somehow? <code>strace</code> should help us verify that:</p>
<pre><code>$ nix shell nixpkgs#gcc
$$ touch a.c &amp;&amp; strace -etrace=execve -s 10000 -f -v -olog gcc -Ihow-many-duplcates -c a.c

$$ grep cc1 log
1290300 execve(&quot;.../cc1&quot;, [..., , &quot;-I&quot;, &quot;how-many-duplcates&quot;, ...], [..., &quot;COLLECT_GCC_OPTIONS='-I' 'how-many-duplcates' ...&quot;, ...]) = 0</code></pre>
<p>Not too bad: we see 2x explosion here:</p>
<ul>
<li>one option is in argument list</li>
<li>another is in <code>COLLECT_GCC_OPTIONS=</code> environment</li>
</ul>
<p>The <code>2x</code> explosion itself does not explain 10x reduction.</p>
<p>There is also an extra catch: the way I tried to set the variable in
<code>qemu</code> is via <code>NIX_CFLAGS_COMPILE=</code> environment variable. Those get
translated by package setup hooks not visible in <code>nix shell</code>. Let’s
check their full effect.</p>
<p>I’ll write a complete small derivation to demonstrate the explosion
closer to <code>qemu</code> failure mode.</p>
<p>Here is a <code>default.nix</code> derivation that should demonstrate the point:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{</span> <span class="op">}</span> <span class="op">}</span>:</span>
<span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>pkgs.stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;probe-wrapper&quot;</span><span class="op">;</span></span>
<span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUnpack</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> pkgs.strace <span class="op">];</span></span>
<span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE</span> <span class="op">=</span> <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">postInstall</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a><span class="st">    touch a.c</span></span>
<span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a><span class="st">    strace -etrace=execve -s 10000 -f -v -o$out -- $CC -c a.c -o a.o</span></span>
<span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Now we can quickly build it and explore it’s contents:</p>
<pre><code>$ nix-build
$ grep cc1 result

31 execve(&quot;.../cc1&quot;, [..., &quot;-I&quot;, &quot;how-many-duplcates&quot;, ...], &quot;NIX_CFLAGS_COMPILE_x86_64_unknown_linux_gnu=... -Ihow-many-duplcates ...&quot;, &quot;NIX_CFLAGS_COMPILE=-Ihow-many-duplcates ...&quot;, &quot;COLLECT_GCC_OPTIONS=... '-I' 'how-many-duplcates' ...&quot;]) = 0</code></pre>
<p>Things are a bit worse here: we see 4x explosion:</p>
<ul>
<li>[as before] one option is in argument list</li>
<li>[as before] another is in <code>COLLECT_GCC_OPTIONS=</code> environment</li>
<li>[new] <code>NIX_CFLAGS_COMPILE</code> variable, the one we added and are using for injection</li>
<li>[new] <code>NIX_CFLAGS_COMPILE_x86_64_unknown_linux_gnu</code> variable, the one
<code>pkgs/build-support/cc-wrapper/setup-hook.sh</code> setup hook set for us</li>
</ul>
<p>And if we throw cross-compilation into the picture (ideally I wanted to
avoid <code>__FILE__</code> leaks in all cases) and use all three
<code>NIX_CFLAGS_COMPILE_FOR_BUILD</code>, <code>NIX_CFLAGS_COMPILE</code> and
<code>NIX_CFLAGS_COMPILE_FOR_TARGET</code>:</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{</span> <span class="va">crossSystem</span> <span class="op">=</span> <span class="st">&quot;riscv64-linux&quot;</span><span class="op">;</span> <span class="op">}</span> <span class="op">}</span>:</span>
<span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>pkgs.stdenv.mkDerivation <span class="op">{</span></span>
<span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a>  <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;probe-wrapper&quot;</span><span class="op">;</span></span>
<span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>  <span class="va">dontUnpack</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">nativeBuildInputs</span> <span class="op">=</span> <span class="op">[</span> pkgs.buildPackages.strace <span class="op">];</span></span>
<span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE_FOR_BUILD</span> <span class="op">=</span>  <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE</span> <span class="op">=</span>            <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a>  <span class="va">NIX_CFLAGS_COMPILE_FOR_TARGET</span> <span class="op">=</span> <span class="st">&quot;-Ihow-many-duplcates&quot;</span><span class="op">;</span></span>
<span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>  <span class="va">postInstall</span> <span class="op">=</span> <span class="st">''</span></span>
<span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a><span class="st">    touch a.c</span></span>
<span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a><span class="st">    strace -etrace=execve -s 10000 -f -v -o$out -- $CC -c a.c -o a.o</span></span>
<span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a><span class="st">  ''</span><span class="op">;</span></span>
<span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ nix-build
$ grep cc1 result

35 execve(&quot;.../cc1&quot;, [..., &quot;-I&quot;, &quot;how-many-duplcates&quot;, ...], &quot;NIX_CFLAGS_COMPILE_riscv64_unknown_linux_gnu=... -Ihow-many-duplcates ...&quot;, &quot;NIX_CFLAGS_COMPILE_FOR_BUILD=-Ihow-many-duplcates ...&quot;, &quot;NIX_CFLAGS_COMPILE=-Ihow-many-duplcates ...&quot;, NIX_CFLAGS_COMPILE_FOR_TARGET=-Ihow-many-duplcates ...&quot;, &quot;COLLECT_GCC_OPTIONS=... '-I' 'how-many-duplcates' ...&quot;]) = 0</code></pre>
<p>Here we see 6x explosion:</p>
<ul>
<li>[as before] one option is in argument list</li>
<li>[as before] another is in <code>COLLECT_GCC_OPTIONS=</code> environment</li>
<li>[as before] <code>NIX_CFLAGS_COMPILE</code> variable, the one we added and are using for injection</li>
<li>[as before] <code>NIX_CFLAGS_COMPILE_riscv64_unknown_linux_gnu</code> variable, the one
<code>pkgs/build-support/cc-wrapper/setup-hook.sh</code> setup hook set for us</li>
<li>[new] <code>NIX_CFLAGS_COMPILE_FOR_BUILD</code> variable, we set ourselves</li>
<li>[new] <code>NIX_CFLAGS_COMPILE_FOR_TARGET</code> variable, we set ourselves</li>
</ul>
<p>None of these variables looks redundant: they serve the purpose to
propagate flags across shell wrappers. Thus we’ll have to keep in mind
this 6x explosion.</p>
<p>And yet. 6x explosion does not explain why mere <code>-g</code> option can be
present only 20K times instead of 200K times.</p>
<h2 id="another-nasty-limit">Another nasty limit</h2>
<p>I skimmed through maximum individual variable length limit above as if
it did not exist. But it’s there! Look:</p>
<pre><code>$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; 100000) $(printf &quot;%0*d&quot; 100000) $(printf &quot;%0*d&quot; 100000) $(printf &quot;%0*d&quot; 100000) &gt;/dev/null; echo $?
0
$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; 200000) &gt;/dev/null; echo $?
-bash: /run/current-system/sw/bin/printf: Argument list too long
126</code></pre>
<p>More precise limit is <code>128K</code>:</p>
<pre><code>$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; $((2 ** 17)) ) &gt;/dev/null; echo $?
-bash: /run/current-system/sw/bin/printf: Argument list too long
126
$ $(which printf) &quot;%s&quot; $(printf &quot;%0*d&quot; $((2 ** 17 - 1)) ) &gt;/dev/null; echo $?
0
$ echo $((2 ** 17))
131072</code></pre>
<p>It comes from <code>copy_string()</code> from the same
<a href="https://github.com/torvalds/linux/blob/2cf0f715623872823a72e451243bbf555d10d032/fs/exec.c#L523">fs/exec.c</a>:</p>
<div class="sourceCode" id="cb31"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> copy_strings<span class="op">(</span><span class="dt">int</span> argc<span class="op">,</span> <span class="kw">struct</span> user_arg_ptr argv<span class="op">,</span></span>
<span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a>			<span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">)</span></span>
<span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> page <span class="op">*</span>kmapped_page <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>	<span class="dt">char</span> <span class="op">*</span>kaddr <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">unsigned</span> <span class="dt">long</span> kpos <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb31-8"><a href="#cb31-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-9"><a href="#cb31-9" aria-hidden="true" tabindex="-1"></a>	<span class="cf">while</span> <span class="op">(</span>argc<span class="op">--</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb31-10"><a href="#cb31-10" aria-hidden="true" tabindex="-1"></a>		<span class="dt">const</span> <span class="dt">char</span> __user <span class="op">*</span>str<span class="op">;</span></span>
<span id="cb31-11"><a href="#cb31-11" aria-hidden="true" tabindex="-1"></a>		<span class="dt">int</span> len<span class="op">;</span></span>
<span id="cb31-12"><a href="#cb31-12" aria-hidden="true" tabindex="-1"></a>		<span class="dt">unsigned</span> <span class="dt">long</span> pos<span class="op">;</span></span>
<span id="cb31-13"><a href="#cb31-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-14"><a href="#cb31-14" aria-hidden="true" tabindex="-1"></a>		ret <span class="op">=</span> <span class="op">-</span>EFAULT<span class="op">;</span></span>
<span id="cb31-15"><a href="#cb31-15" aria-hidden="true" tabindex="-1"></a>		str <span class="op">=</span> get_user_arg_ptr<span class="op">(</span>argv<span class="op">,</span> argc<span class="op">);</span></span>
<span id="cb31-16"><a href="#cb31-16" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>IS_ERR<span class="op">(</span>str<span class="op">))</span></span>
<span id="cb31-17"><a href="#cb31-17" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-18"><a href="#cb31-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-19"><a href="#cb31-19" aria-hidden="true" tabindex="-1"></a>		len <span class="op">=</span> strnlen_user<span class="op">(</span>str<span class="op">,</span> MAX_ARG_STRLEN<span class="op">);</span></span>
<span id="cb31-20"><a href="#cb31-20" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(!</span>len<span class="op">)</span></span>
<span id="cb31-21"><a href="#cb31-21" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-22"><a href="#cb31-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-23"><a href="#cb31-23" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(!</span>len<span class="op">)</span></span>
<span id="cb31-24"><a href="#cb31-24" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-25"><a href="#cb31-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-26"><a href="#cb31-26" aria-hidden="true" tabindex="-1"></a>		ret <span class="op">=</span> <span class="op">-</span>E2BIG<span class="op">;</span></span>
<span id="cb31-27"><a href="#cb31-27" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(!</span>valid_arg_len<span class="op">(</span>bprm<span class="op">,</span> len<span class="op">))</span></span>
<span id="cb31-28"><a href="#cb31-28" aria-hidden="true" tabindex="-1"></a>			<span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb31-29"><a href="#cb31-29" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb31-30"><a href="#cb31-30" aria-hidden="true" tabindex="-1"></a>out<span class="op">:</span></span>
<span id="cb31-31"><a href="#cb31-31" aria-hidden="true" tabindex="-1"></a>	<span class="co">// ...</span></span>
<span id="cb31-32"><a href="#cb31-32" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb31-33"><a href="#cb31-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb31-34"><a href="#cb31-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb31-35"><a href="#cb31-35" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">bool</span> valid_arg_len<span class="op">(</span><span class="kw">struct</span> linux_binprm <span class="op">*</span>bprm<span class="op">,</span> <span class="dt">long</span> len<span class="op">)</span></span>
<span id="cb31-36"><a href="#cb31-36" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb31-37"><a href="#cb31-37" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> len <span class="op">&lt;=</span> MAX_ARG_STRLEN<span class="op">;</span></span>
<span id="cb31-38"><a href="#cb31-38" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here <code>MAX_ARG_STRLEN</code> (<code>128K</code>) limits individual entries in arguments
and environment variable entries:</p>
<pre><code>$ E=$(printf &quot;%0*d&quot; $((2 ** 17 - 3)) ) $(which printf) &quot;1&quot; &gt;/dev/null; echo $?
0
$ E=$(printf &quot;%0*d&quot; $((2 ** 17 - 2)) ) $(which printf) &quot;1&quot; &gt;/dev/null; echo $?
-bash: /run/current-system/sw/bin/printf: Argument list too long
126</code></pre>
<p>Here we run <code>printf 1</code> with a large <code>E=000000...000</code> variable and expose
the same <code>128K</code> limit.</p>
<p>This is bad news. As we saw above <code>gcc</code> uses single <code>COLLECT_GCC_OPTIONS</code>
variable to pass all options around. And on top of that it quotes each
argument.</p>
<p>As a result <code>gcc -g -g ...</code> turns into
<code>COLLECT_GCC_OPTIONS="'-g' '-g' ..."</code>. This means that we are limited by
a <code>128K</code> limit when it comes to <code>gcc</code> flags.</p>
<p>To estimate our best limit <code>-g</code> gets translated to <code>"'-g' "</code>: 2 bytes
get turned into 5. That means we can put <code>128K / 5 = 26214</code> entries.</p>
<p>That is very close to our <code>26118</code> limit we got above. Again, why the
values differ by <code>96</code> entries is another exercise to the reader.</p>
<h2 id="the-variable-budget">The variable budget</h2>
<p>Let’s see what worst-case scenario for the longest option we have for
<code>-fmacro-prefix-map=</code> on my system for directories that have <code>include</code>
subdirectory:</p>
<pre><code>$ for d in *; do [[ -d &quot;$d/include&quot; ]] &amp;&amp; echo &quot;${#d} $d&quot;; done | sort -k 1 -n | tail -n 10
87 s2zpr18vjr274yaalgz5c4g7dx51cvb9-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 s5gn9gwwwpm8ln84apjb8hbrhihq72d4-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 scihnclavazxzk0vgblhp4371s3gr40c-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 sdf4v7s0avfkgnnnx1hq000ydl7bz9sd-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 xfl1c6qmr8b39bxgpmjp004afknm54av-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 y00bh71xvsrkazdjy5w4ii8pdkdwb5hr-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
87 z8k642hwqflwmp16ql3jj7z1pslyznzq-mcfgthreads-x86_64-w64-mingw32-unstable-2023-06-06-dev
88 6lw175bhq8d669jl1ddvwy49hcmlysi0-gmp-with-cxx-static-x86_64-unknown-linux-musl-6.3.0-dev
89 ljrwhpdcv7xzmxbank3jdi2xyga553s5-gmp-with-cxx-static-aarch64-unknown-linux-musl-6.3.0-dev
94 r5gzvnjnq024gr830nvpkcyd7n4ip33v-libnetfilter_conntrack-static-x86_64-unknown-linux-musl-1.0.9</code></pre>
<p>About 90 bytes. With added <code>/nix/store</code> prefix that would be <code>100</code>
characters long paths. Nice round number.</p>
<p>This makes <code>-fmacro-prefix-map=/nix/store/...=/nix/store/...</code> options
around 220 bytes.</p>
<p>How many of those can we realistically set for our <code>2MB</code> budget?</p>
<ul>
<li>for 4x overhead: <code>2 * 1024 * 1024 / (220 + 9) / 4 = 2289</code> variables</li>
<li>for 6x overhead: <code>2 * 1024 * 1024 / (220 + 9) / 6 = 1526</code> variables</li>
</ul>
<p>But given <code>COLLECT_GCC_OPTIONS</code> limitation for <code>128K</code> our calculation
becomes even more pessimistic:</p>
<ul>
<li>for no overhead: <code>128 * 1024 / (220 + 9) / 4 = 143</code> variables!</li>
</ul>
<p>It might sound like a lot but it’s not that much of a budget: some
packaging systems (like <code>haskell</code>’s <code>hackage</code>) do like small
fine-grained packages and occasionally do install <code>C</code> header files.
<code>nix</code> itself favours smaller packages to speed up rebuilds and shrink
runtime closure. <code>pkg-config</code> is geared towards installing packages
into individual directories.</p>
<p>And what is worse: <code>NIX_CFLAGS_COMPILE</code> is not the only option
that exhibits this behaviour. Here is the longer list following
<code>mangleVarList</code> used in <code>nixpkgs</code>:</p>
<pre><code># from pkgs/build-support/cc-wrapper/add-flags.sh
NIX_CFLAGS_COMPILE
NIX_CFLAGS_COMPILE_BEFORE
NIX_CFLAGS_LINK
NIX_CXXSTDLIB_COMPILE
NIX_CXXSTDLIB_LINK
NIX_GNATFLAGS_COMPILE

# from ./pkgs/build-support/bintools-wrapper/add-flags.sh
NIX_IGNORE_LD_THROUGH_GCC
NIX_LDFLAGS
NIX_LDFLAGS_BEFORE
NIX_DYNAMIC_LINKER
NIX_LDFLAGS_AFTER
NIX_LDFLAGS_HARDEN
NIX_HARDENING_ENABLE

# from pkgs/build-support/cc-wrapper/add-gnat-extra-flags.sh
NIX_GNATMAKE_CARGS

# from pkgs/build-support/pkg-config-wrapper/add-flags.sh
PKG_CONFIG_PATH</code></pre>
<p>Thus worst case we get to set at most ~150 entries for all of these
variables.</p>
<h2 id="parting-words">Parting words</h2>
<p>Even on <code>linux</code> command line argument limits are hard. If you can try to
use files to pass inputs of unbounded sizes.</p>
<p><code>linux</code> has unreachable <code>0-x7fffFFFF</code> argument count limit when executing
the commands. It does have an overall limit <code>2MB</code> limit that one can
increase to <code>6MB</code>. And on top of that individual arguments are limited
by <code>128K</code> limit that you can’t raise.</p>
<p>The above effectively means that argument passing overheads define
argument count limit. For arguments of length <code>0</code> by default you can
pass <code>233016</code> empty strings on 64-bit kernel and <code>419430</code> on 32-bit one.</p>
<p>If you increase the default stack size with <code>ulimit -s</code> you can get up
to <code>1258291</code> empty string arguments on 32-bits and <code>699050</code> on 64-bits.</p>
<p>For practical argument lengths actual values are way smaller: in order
of thousands to tens of thousands.</p>
<p><code>gcc</code> is a special <code>COLLECT_GCC_OPTIONS</code> case and it has a limit of
<code>128KB</code> making argument limits onto hundreds.</p>
<p>Initially I planned to workaround <code>qemu</code> failure by using <code>gcc</code>’s
response files. I thought it would save the problem completely.
Unfortunately <code>COLLECT_GCC_OPTIONS</code> contains already expanded response
file contents and thus response files will only remove multiplication
factor but will not sidestep 128KB limit.</p>
<p>On the bright side <code>COLLECT_GCC_OPTIONS</code> is an internal <code>gcc</code>
implementation detail that should be fixable without much external
impact. Even if we move it to proper argument list it should already
unlock <code>2MB</code> limit. And if we could pass response files through we cloud
sidestep the limit entirely. Filed <a href="https://gcc.gnu.org/PR111527" class="uri">https://gcc.gnu.org/PR111527</a> to
<code>gcc</code> upstream.</p>
<p>On top of that as a medium-term workaround I proposed the change to
<code>linux</code> to allow variables as large as the whole limit:
<a href="https://lkml.org/lkml/2023/9/24/381" class="uri">https://lkml.org/lkml/2023/9/24/381</a>.</p>
<p>But meanwhile I’ll try to patch <code>gcc</code> (and maybe <code>clang</code>?) just for
<code>nixpkgs</code> to apply programmatic mangling similar to:</p>
<pre><code># Pseudocode. real regexps do not work for `gcc`:
-fmacro-prefix-map=s,$NIX_STORE/[a-z0-9]{32}-,$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-</code></pre>
<p>Have fun!</p>]]></description>
    <pubDate>Thu, 21 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/299-maximum-argument-count-on-linux-and-in-gcc.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Unexpected runtime dependencies in nixpkgs</title>
    <link>http://trofi.github.io/posts/298-unexpected-runtime-dependencies-in-nixpkgs.html</link>
    <description><![CDATA[<h2 id="intro">Intro</h2>
<p><code>nix</code> uses a bit unusual way to detect runtime dependencies: it scans
the build result for it’s hash inputs used during build and does not
require manual specification of the dependencies.</p>
<p>For example if we build a trivial package that just prints a string into
the file it automatically pulls in that strings into runtime closure:</p>
<pre><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; runCommand &quot;foo&quot; {} \
  &quot;echo ${re2c}/bin/re2c &gt; $out&quot;'</code></pre>
<p>This command builds a package that consists of a single <code>$out</code> file
(symlinked to <code>./result</code>) which contains absolute path to <code>re2c</code> binary.
It’s not a complicated package:</p>
<pre><code>$ cat result
/nix/store/pj9cdgj07iz3cj88rywapx2lfxfmdqd3-re2c-3.1/bin/re2c</code></pre>
<p>And yet if we look at full closure of it’s inferred dependencies it
already has <code>re2c</code> and all it’s runtime dependencies:</p>
<pre><code>$ nix path-info -r ./result
/nix/store/gnzwqa9df994g01yw5x75qnbl1rhp9ds-libunistring-1.1
/nix/store/h3aw16j1c54jv8s39yvdhpfcx3538jwi-libidn2-2.3.4
/nix/store/kv0v4h5i911gj39m7n9q10k8r8gbn3sa-xgcc-12.3.0-libgcc
/nix/store/905gkx2q1pswixwmi1qfhfl6mik3f22l-glibc-2.37-8
/nix/store/s2pgr9iqj60mfnmabixnqacxl4bzb408-gcc-12.3.0-libgcc
/nix/store/gi26p79iq8jrw51irq5x82c2cqlgicxi-gcc-12.3.0-lib
/nix/store/pj9cdgj07iz3cj88rywapx2lfxfmdqd3-re2c-3.1
/nix/store/amiqn0hvnmrfcz2s8b47fb770v8hy9ny-foo</code></pre>
<p>Such automatic scanning method method has both false positives and false
negatives.</p>
<p>Say, if we are to compress the file reference might disappear:</p>
<pre><code>$ nix build --impure --expr 'with import &lt;nixpkgs&gt; {}; runCommand &quot;foo&quot; {} \
  &quot;echo ${re2c}/bin/re2c | bzip2 &gt; $out&quot;'

$ nix path-info -r ./result
/nix/store/lwx722djnam7yjy439b9k6czb55h707q-foo</code></pre>
<p>Missing reference detection is a bug here (false negative). False
negatives can be worked around by explicitly adding plain text
references into the file just like we did in the original example.</p>
<p>But I would like to talk about false positives today.</p>
<h2 id="the-problem">The problem</h2>
<p>Let’s jump start from the motivating example: right now <code>nix</code> package
has header only <code>nlohmann/json</code> dependency in it’s runtime closure:</p>
<pre><code>$ nix path-info -r nixpkgs#nix | fgrep nlohmann_json
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2</code></pre>
<p>There is nothing in <code>nlohmann/json</code> useful for <code>nix</code>’s runtime:</p>
<pre><code>$ find /nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2 -type f | unnix
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/detail/conversions/from_json.hpp
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/detail/conversions/to_chars.hpp
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/detail/conversions/to_json.hpp
...
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/include/nlohmann/ordered_map.hpp
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/cmake/nlohmann_json/nlohmann_jsonTargets.cmake
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/cmake/nlohmann_json/nlohmann_jsonConfig.cmake
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/cmake/nlohmann_json/nlohmann_jsonConfigVersion.cmake
/&lt;&lt;NIX&gt;&gt;/nlohmann_json-3.11.2/share/pkgconfig/nlohmann_json.pc</code></pre>
<p>These are a few headers and <code>cmake</code> and <code>pkg-config</code> plumbing.</p>
<p>So why does <code>nix</code> retain those then?</p>
<h2 id="debugging-the-details">Debugging the details</h2>
<p>To figure out where the references come from we can grep the package for
a raw string and see how it gets there:</p>
<pre><code>$ LANG=C grep -R $(nix-build --no-link '&lt;nixpkgs&gt;' -A nlohmann_json) $(nix-build --no-link '&lt;nixpkgs&gt;' -A nix.out)
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-build: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-channel: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-collect-garbage: binary file matches
grep: /nix/store/vxx4c6gc2zgfw870b40f06dmli6ljp34-nix-2.17.0/bin/nix-copy-closure: binary file matches
...</code></pre>
<p>Here we see that even <code>nix</code> binary itself retains <code>nlohmann/json</code>
reference. With <code>strings</code> tool from <code>GNU binutils</code> we can check how the
reference looks like:</p>
<pre><code>$ nix shell nixpkgs#binutils-unwrapped
$$strings $(nix-build --no-link '&lt;nixpkgs&gt;' -A nix.out)/bin/nix | grep $(nix-build --no-link '&lt;nixpkgs&gt;' -A nlohmann_json)
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/json.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/output/serializer.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/conversions/to_chars.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/input/lexer.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/iterators/iter_impl.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/input/json_sax.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/iterators/iteration_proxy.hpp
/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2/include/nlohmann/detail/input/parser.hpp</code></pre>
<p>Note how absolute header paths are embedded into <code>nix</code> binary. It
happens via <code>__FILE__</code> macro expansion in C++ code.</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">//// in nlohmann_json/include/nlohmann.json.h</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> basic_json <span class="op">{</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">template</span><span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">,</span> <span class="kw">typename</span><span class="op">...</span> Args<span class="op">&gt;</span> <span class="at">static</span> T<span class="op">*</span> create<span class="op">(</span>Args<span class="op">&amp;&amp;</span> <span class="op">...</span> args<span class="op">)</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        JSON_ASSERT<span class="op">(</span>obj <span class="op">!=</span> <span class="kw">nullptr</span><span class="op">);</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="co">//// in nlohmann_json/include/nlohmann/detail/macro_scope.hpp</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="co">// allow overriding assert</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="pp">#if !defined(JSON_ASSERT)</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;cassert&gt;</span><span class="pp"> </span><span class="co">// assert</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#define JSON_ASSERT</span><span class="op">(</span>x<span class="op">)</span><span class="pp"> </span><span class="ot">assert</span><span class="op">(</span>x<span class="op">)</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a><span class="co">// in glibc/include/assert.h</span></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="pp"># if defined </span><span class="ot">__cplusplus</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="pp">#  define assert</span><span class="op">(</span>expr<span class="op">)</span><span class="pp">                                                  </span><span class="op">\</span></span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a><span class="pp">     </span><span class="op">(</span><span class="kw">static_cast</span><span class="pp"> </span><span class="op">&lt;</span><span class="dt">bool</span><span class="op">&gt;</span><span class="pp"> </span><span class="op">(</span>expr<span class="op">)</span><span class="pp">                                         </span><span class="op">\</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="pp">      </span><span class="op">?</span><span class="pp"> </span><span class="dt">void</span><span class="pp"> </span><span class="op">(</span><span class="dv">0</span><span class="op">)</span><span class="pp">                                                        </span><span class="op">\</span></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="pp">      </span><span class="op">:</span><span class="pp"> </span>__assert_fail<span class="pp"> </span><span class="op">(#</span>expr<span class="op">,</span><span class="pp"> </span><span class="ot">__FILE__</span><span class="op">,</span><span class="pp"> </span><span class="ot">__LINE__</span><span class="op">,</span><span class="pp"> </span>__ASSERT_FUNCTION<span class="op">))</span></span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span></code></pre></div>
<p>In this case any code that happens to instantiate <code>basic_json::create()</code>
function will embed <code>__FILE__</code> definition as part of the <code>assert()</code> call
and will embed absolute path to the store.</p>
<p>Absolute path to the store will retain <code>nlohmann/json</code> in runtime closure.
It’s a completely redundant runtime dependency.</p>
<h2 id="the-workaround">The workaround</h2>
<p>Initially I though of using something like <code>nukeReferences</code>
file-mangling tool to wipe out unexpected references. But I was not sure
where should I plug this hammer: ideally any user of <code>nlohmann_json</code>
package should run it just in case. And patching files after-the-fast is
always prone to break something: be it broken file checksums, broken
sort ordering, unrelated string sharing due to identical code folding.</p>
<p>I wanted something milder: ideally tell <code>gcc</code> not to emit problematic
paths at all. And <code>gcc</code> provides exactly that mechanism!</p>
<p><code>gcc</code> has a way to slightly mangle absolute paths used by <code>__FILE__</code> via
<code>-fmacro-prefix-map=old=new</code> set of options: <a href="https://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html" class="uri">https://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html</a>.</p>
<p>It’s main use case is to untangle final binaries from the temporary
directory sources are built against:
<code>-fmacro-prefix-map=/tmp/autogenerated/foo=/usr/src/foo</code>.</p>
<p>The problem feels vaguely similar: we want to avoid any mention of
source directories in the final output. I tried to inject
<code>-fmacro-prefix-map=</code> for every single build input used by <code>nixpkgs</code> as:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/build-support/cc-wrapper/setup-hook.sh</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/build-support/cc-wrapper/setup-hook.sh</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -65,15 +65,29 @@</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a> # function is guaranteed to be exactly the same.</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a> ccWrapper_addCVars () {</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>     # See ../setup-hooks/role.bash</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="st">-    local role_post</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="va">+    local role_post mangled_store map_flag var</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>     getHostRoleEnvHook</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="va">+    var=NIX_CFLAGS_COMPILE${role_post}</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>     if [ -d &quot;$1/include&quot; ]; then</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a><span class="st">-        export NIX_CFLAGS_COMPILE${role_post}+=&quot; -isystem $1/include&quot;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a><span class="va">+        export $var+=&quot; -isystem $1/include&quot;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>     fi</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>     if [ -d &quot;$1/Library/Frameworks&quot; ]; then</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a><span class="st">-        export NIX_CFLAGS_COMPILE${role_post}+=&quot; -iframework $1/Library/Frameworks&quot;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a><span class="va">+        export $var+=&quot; -iframework $1/Library/Frameworks&quot;</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="va">+    fi</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="va">+    # Try hard to avoid hardcoding of -dev outputs via __FILE__.</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="va">+    # THe typical examples are: asserts in nlohmann_json leaking into</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a><span class="va">+    # nix executable closure, asserts from lttng-ust leaking into</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a><span class="va">+    # pipewire.</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a><span class="va">+    mangled_store=$(printf &quot;%s&quot; &quot;$1&quot; | sed -e &quot;s|$NIX_STORE/[a-z0-9]\{32\}-|$NIX_STORE/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-|g&quot;)</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a><span class="va">+    map_flag=&quot;-fmacro-prefix-map=$1=$mangled_store&quot;</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a><span class="va">+    # As it's a long flag try hard not to introduce duplicates as</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a><span class="va">+    # environment gets exhausted otherwise for large packages like qemu.</span></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a><span class="va">+    if [[ ${!var-} != *&quot; $map_flag&quot;* ]]; then</span></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a><span class="va">+        export $var+=&quot; $map_flag&quot;</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>     fi</span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>The change adds a bunch of compiler options on form of:</p>
<pre><code>-fmacro-prefix-map=/nix/store/5xih6daf5g3hpa0wc5vs2cgrhakn4s0j-nlohmann_json-3.11.2=/nix/store/eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee-nlohmann_json-3.11.2</code></pre>
<p>That way <code>__FILE__</code> values still have a reasonable form: we can see which
package they come from. But we can’t use the path in any meaningful way
as they don’t refer real files anymore. Does not look too bad.</p>
<p>I also had to avoid attempts at inserting multiple identical values into
the final <code>NIX_CFLAGS_COMPILE</code> variable. Otherwise some particularly
large packages like <code>qemu</code> exhaust all the environment space and fail to
run executables. We might want to do the same for the rest of variables:
we add most of the options options thrice to <code>NIX_CFLAGS_COMPILE</code>.</p>
<p>Proposed the workaround as <a href="https://github.com/NixOS/nixpkgs/pull/255192" class="uri">https://github.com/NixOS/nixpkgs/pull/255192</a>.</p>
<h2 id="the-results">The results</h2>
<p>Did the workaround help? I placed the patch into <code>~/n</code> checkout of
<code>nixpkgs</code> repo.</p>
<pre><code>$ LANG=C grep -R $(nix-build --no-link ~/n -A nlohmann_json) $(nix-build --no-link ~/n -A nix.out)
&lt;empty&gt;</code></pre>
<p>Yay! At the very least we got rid of the unneeded reference.</p>
<p><code>nix</code> was a good example of a superfluous and small harmless dependency.</p>
<p>Are there packages where this change would be more pronounced? My
ulterior motive was to fix something similar in <code>lttng-ust.dev</code>. That
one was not just a set of headers. It also contains python interpreter
as a dependency:</p>
<pre><code>$ nix path-info -r $(nix-build '&lt;nixpkgs&gt;' -A lttng-ust.dev) |&amp; unnix
/&lt;&lt;NIX&gt;&gt;/libunistring-1.1
/&lt;&lt;NIX&gt;&gt;/libidn2-2.3.4
/&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0-libgcc
/&lt;&lt;NIX&gt;&gt;/glibc-2.37-8
/&lt;&lt;NIX&gt;&gt;/zlib-1.2.13
/&lt;&lt;NIX&gt;&gt;/sqlite-3.42.0
/&lt;&lt;NIX&gt;&gt;/numactl-2.0.16
/&lt;&lt;NIX&gt;&gt;/lttng-ust-2.13.1
/&lt;&lt;NIX&gt;&gt;/expat-2.5.0
/&lt;&lt;NIX&gt;&gt;/ncurses-6.4
/&lt;&lt;NIX&gt;&gt;/liburcu-0.14.0
/&lt;&lt;NIX&gt;&gt;/xz-5.4.4
/&lt;&lt;NIX&gt;&gt;/openssl-3.0.10
/&lt;&lt;NIX&gt;&gt;/bzip2-1.0.8
/&lt;&lt;NIX&gt;&gt;/libffi-3.4.4
/&lt;&lt;NIX&gt;&gt;/libxcrypt-4.4.36
/&lt;&lt;NIX&gt;&gt;/liburcu-0.14.0-dev
/&lt;&lt;NIX&gt;&gt;/gcc-12.3.0-libgcc
/&lt;&lt;NIX&gt;&gt;/gcc-12.3.0-lib
/&lt;&lt;NIX&gt;&gt;/readline-8.2p1
/&lt;&lt;NIX&gt;&gt;/bash-5.2-p15
/&lt;&lt;NIX&gt;&gt;/mailcap-2.1.53
/&lt;&lt;NIX&gt;&gt;/gdbm-1.23
/&lt;&lt;NIX&gt;&gt;/tzdata-2023c
/&lt;&lt;NIX&gt;&gt;/python3-3.10.12
/&lt;&lt;NIX&gt;&gt;/lttng-ust-2.13.1-bin
/&lt;&lt;NIX&gt;&gt;/lttng-ust-2.13.1-dev</code></pre>
<p>One of the frequent users of <code>lttng-ust.dev</code> is <code>pipewire</code>:</p>
<pre><code>$ nix path-info -r $(nix-build '&lt;nixpkgs&gt;' -A pipewire.out) | fgrep lttng
/nix/store/23jh1m6irhvr16zjmrvy2cnpgz7yi6gj-lttng-ust-2.13.1
/nix/store/xznqsvr1la1xnfnzia2yvnicfz03yjqb-lttng-ust-2.13.1-bin
/nix/store/fckk2ncjnxdw1xsx8v8rxjnmhldbx8pr-lttng-ust-2.13.1-dev</code></pre>
<p>And I’m glad to announce that it’s also gone with the patch above:</p>
<pre><code>$ nix path-info -r $(nix-build ~/n -A pipewire.out) | fgrep lttng
/nix/store/bv3i3qjphzgfzmmdhws9nhwz76qscy61-lttng-ust-2.13.1</code></pre>
<p>Here is the closure size difference:</p>
<p>Before:</p>
<pre><code>$ nix path-info -rsSh $(nix-build '&lt;nixpkgs&gt;' -A pipewire.out) | nl | tail -n1
   219  /nix/store/ff0w34nr807in3b1swmqklxy9g9v5hg9-pipewire-0.3.79 1.4M  543.4M</code></pre>
<p>After:</p>
<pre><code>$ nix path-info -rsSh $(nix-build ~/n -A pipewire.out) | nl | tail -n1
   207  /nix/store/hl4dffvc73nsh3zfbji0y7h9lcnrk14b-pipewire-0.3.79 1.3M  452.0M</code></pre>
<p>12 dependencies and ~90MB (<code>543.4</code> -&gt; <code>452.0</code> reduction, ~20% of the whole
output) are just gone!</p>
<h2 id="parting-words">Parting words</h2>
<p>Looking at the runtime closure is always fun. There are many other
low-hanging fruits in <code>nixpkgs</code> to remove. Most of the time just adding
an extra <code>dev</code> output is enough to slim down the output.</p>
<p><code>__FILE__</code> is a tricky macro that makes <code>nix</code> builds to leak out
unnecessary references into final closure.</p>
<p><code>-fmacro-prefix-map=</code> seems to be a robust workaround for <code>__FILE__</code>
induced leaks. The flag is supported in both <code>gcc</code> and <code>clang</code> for quite
a while.</p>
<p>Even <code>nix</code> package itself had a redundant dependency in it’s final
closure.</p>
<p><a href="https://github.com/NixOS/nixpkgs/pull/255192" class="uri">https://github.com/NixOS/nixpkgs/pull/255192</a> should fix it in <code>nixpkgs</code>.</p>
<p>And for some packages like <code>pipewire</code> the closure size reduction is
substantial and is taking about 20% of all closure size. Not bad for a
single extra compiler option.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Thu, 14 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/298-unexpected-runtime-dependencies-in-nixpkgs.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>32-bit file API strikes back</title>
    <link>http://trofi.github.io/posts/297-32-bit-file-API-strikes-back.html</link>
    <description><![CDATA[<p>It was another day of me trying a new <code>gcc</code> version.</p>
<h2 id="the-problem">The problem</h2>
<p>This time build failure was in <code>gcc</code> itself:</p>
<pre><code>$ nix build -f. pkgsi686Linux.stdenv
       &gt; /nix/store/bxvqx767s4gwry9km5c3cmflskmparyf-bootstrap-stage-xgcc-stdenv-linux/setup: line 167: type: install_name_tool: not found
       &gt; preFixupLibGccPhase
       &gt; stat: Value too large for defined data type
       For full logs, run 'nix log /nix/store/v3cr2nghg1s4bmm30r1vnq1124qqvv9m-xgcc-14.0.0.drv'.</code></pre>
<h2 id="debugging-the-failure">Debugging the failure</h2>
<p>The actual error here is <code>stat: Value too large for defined data type</code>.
While <code>type: install_name_tool: not found</code> is an unrelated distraction.</p>
<p>Note that this failure happens a bit earlier than <code>pkgsi686Linux.stdenv</code>
build itself. If we poke a bit around the action build failure happens
in <code>pkgsi686Linux.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc</code> package in early bootstrap phases.</p>
<p>From the error message failure happens in <code>preFixupLibGccPhase</code> phase.
Let’s have a look at its definition:</p>
<pre><code>$ nix repl '&lt;nixpkgs&gt;'
...
nix-repl&gt; builtins.trace pkgsi686Linux.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc.preFixupLibGccPhase &quot;&quot;
trace: # move libgcc from lib to its own output (libgcc)
mkdir -p $libgcc/lib
mv    $lib/lib/libgcc_s.so      $libgcc/lib/
mv    $lib/lib/libgcc_s.so.1    $libgcc/lib/
ln -s $libgcc/lib/libgcc_s.so   $lib/lib/
ln -s $libgcc/lib/libgcc_s.so.1 $lib/lib/
patchelf --set-rpath &quot;&quot; $libgcc/lib/libgcc_s.so.1

&quot;&quot;</code></pre>
<p>One of these commands did fail, not clear which one. Let’s add a bit of
debugging by adding <code>set -x</code> into the phase:</p>
<pre><code>$ nix develop --impure --expr 'with import ./. {};
  pkgsi686Linux.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.stdenv.cc.cc.overrideAttrs (oa: {
    preFixupLibGccPhase = &quot;set -x\n&quot; + oa.preFixupLibGccPhase; })'
$$ genericBuild
...
++ patchelf --set-rpath '' /home/slyfox/dev/git/nixpkgs/outputs/libgcc/lib/libgcc_s.so.1
stat: Value too large for defined data type</code></pre>
<p>Yay! It was the <code>patchelf</code> call! We can re-enter the environment and
poke a bit more at the environment:</p>
<pre><code>$ nix develop --impure --expr 'with import ...'
$$ patchelf --set-rpath '' $libgcc/lib/libgcc_s.so.1
stat: Value too large for defined data type</code></pre>
<p>The error is still there. What kind of <code>stat</code> call does <code>patchelf</code> use?</p>
<pre><code>$ which patchelf
/nix/store/i9v173g8a5wwi8i8fd2wmdyr8ix6mla1-bootstrap-tools/bin/patchelf

$ nm -DC /nix/store/i9v173g8a5wwi8i8fd2wmdyr8ix6mla1-bootstrap-tools/bin/patchelf |&amp; fgrep stat
         U __xstat@GLIBC_2.0</code></pre>
<p>Note that this <code>patchelf</code> comes from <code>bootstrapTools</code>.
<code>pkgs/stdenv/linux/bootstrap-files/i686.nix</code> says it was updated last
time in <code>2019</code> (4 years ago).</p>
<p>For comparison currently built <code>patchelf</code> built on <code>i686</code> system does
use <code>stat64</code> call:</p>
<pre><code>$ nm -DC $(nix-build --no-link '&lt;nixpkgs&gt;' -A patchelf --argstr system i686-linux )/bin/patchelf |&amp; fgrep stat
         U stat64@GLIBC_2.33</code></pre>
<p>And it runs the patch just fine:</p>
<pre><code>$$ $(nix-build --no-link '&lt;nixpkgs&gt;' -A patchelf --argstr system i686-linux)/bin/patchelf  --set-rpath '' $libgcc/lib/libgcc_s.so.1</code></pre>
<h2 id="refreshing-bootstrapfiles">Refreshing <code>bootstrapFiles</code></h2>
<p>The fix is as simple as regenerating <code>bootstrapFiles</code> for <code>i686</code>:</p>
<pre><code>$ nix-build '&lt;nixpkgs/pkgs/stdenv/linux/make-bootstrap-tools.nix&gt;' -A bootstrapFiles      --arg pkgs 'import &lt;nixpkgs&gt; { system = &quot;i686-linux&quot;; }'
/nix/store/713cyy66gkxqmi1wpdswd4llq1qzikr5-bootstrap-tools.tar.xz
/nix/store/cvdfhnwjbbfjbv6ibgcl8rz47giy771v-busybox</code></pre>
<p>I did not have to build anything. Hydra has it cached today.</p>
<p>We can point our seed binaries to freshly built version of those:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/stdenv/linux/bootstrap-files/i686.nix</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/stdenv/linux/bootstrap-files/i686.nix</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,12 +1,4 @@</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="st">-  busybox = import &lt;nix/fetchurl.nix&gt; {</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="st">-    url = &quot;http://tarballs.nixos.org/stdenv-linux/i686/4907fc9e8d0d82b28b3c56e3a478a2882f1d700f/busybox&quot;;</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;ef4c1be6c7ae57e4f654efd90ae2d2e204d6769364c46469fa9ff3761195cba1&quot;;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="st">-    executable = true;</span></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="st">-  };</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="st">-</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a><span class="st">-  bootstrapTools = import &lt;nix/fetchurl.nix&gt; {</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="st">-    url = &quot;http://tarballs.nixos.org/stdenv-linux/i686/c5aabb0d603e2c1ea05f5a93b3be82437f5ebf31/bootstrap-tools.tar.xz&quot;;</span></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;b9bf20315f8c5c0411679c5326084420b522046057a0850367c67d9514794f1c&quot;;</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="st">-  };</span></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="va">+  busybox = ./i686-linux/busybox;</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a><span class="va">+  bootstrapTools = ./i686-linux/bootstrap-tools.tar.xz;</span></span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<p>Now <code>pkgsi686Linux.stdenv</code> builds just fine:</p>
<pre><code>$ nix build -f. pkgsi686Linux.stdenv</code></pre>
<p>Unfortunately the change is not usable for upstream as is: uploading new
bootstrap binaries is a strange rarely exercised process that requires
privileged user to upload tarballs to <code>s3</code>. Filed
<a href="https://github.com/NixOS/nixpkgs/issues/253274" class="uri">https://github.com/NixOS/nixpkgs/issues/253274</a> to do it correctly.</p>
<p>I would say it’s a waste of time to debug issues in outdated binaries
like that. The bootstrap tarballs should be updated at least every
<code>NixOS</code> release (every 6 months). Or more frequently :) Filed
<a href="https://github.com/NixOS/nixpkgs/issues/253713" class="uri">https://github.com/NixOS/nixpkgs/issues/253713</a> for that.</p>
<p>Periodic updates would also make tarballs more homogeneous across
architectures. Today we ship different <code>glibc</code> and <code>gcc</code> versions in
bootstrap tarballs which adds another dimension of bugs.</p>
<h2 id="why-did-upgrade-work">Why did upgrade work?</h2>
<p><code>patchelf</code> itself was fixed in 2016 (7 years ago) as
<a href="https://github.com/NixOS/patchelf/commit/a4d21661d510ccf7ff72bb0e4ccd3f087e9086ad" class="uri">https://github.com/NixOS/patchelf/commit/a4d21661d510ccf7ff72bb0e4ccd3f087e9086ad</a>:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/Makefile.am</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/Makefile.am</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,4 +1,4 @@</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="st">-AM_CXXFLAGS = -Wall -std=c++11</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="va">+AM_CXXFLAGS = -Wall -std=c++11 -D_FILE_OFFSET_BITS=64</span></span></code></pre></div>
<p>We just happened to pull in a fix for it along with <code>glibc</code> that
supports <code>stat64</code>.</p>
<h2 id="how-should-fix-usually-looks-like">How should fix usually looks like?</h2>
<p>Setting <code>-D_FILE_OFFSET_BITS=64</code> explicitly should be a safe workaround.</p>
<p><code>autoconf</code>-based systems usually use
<a href="https://www.gnu.org/software/autoconf/manual/autoconf-2.67/html_node/System-Services.html">AC_SYS_LARGEFILE</a>.
It should set both <code>_FILE_OFFSET_BITS</code> and <code>_LARGE_FILES</code> where needed
and also provides a nice <code>--disable-largefile</code> knob. Other build systems
have the equivalent or always enable it by default.</p>
<p><code>glibc</code> implements <code>stat</code> switch in <code>io/sys/stat.h</code> as:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifndef __USE_FILE_OFFSET64</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="co">/* Get file attributes for FILE and put them in BUF.  */</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> stat <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__restrict __file<span class="op">,</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>                 <span class="kw">struct</span> stat <span class="op">*</span>__restrict __buf<span class="op">)</span> __THROW __nonnull <span class="op">((</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">));</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="pp"># ifdef __USE_TIME_BITS64</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> __REDIRECT_NTH <span class="op">(</span>stat<span class="op">,</span> <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__restrict __file<span class="op">,</span></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>                                  <span class="kw">struct</span> stat <span class="op">*</span>__restrict __buf<span class="op">),</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>                                  __stat64_time64<span class="op">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a><span class="pp"># endif</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a><span class="kw">extern</span> <span class="dt">int</span> stat64 <span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span>__restrict __file<span class="op">,</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>                   <span class="kw">struct</span> stat64 <span class="op">*</span>__restrict __buf<span class="op">)</span> __THROW __nonnull <span class="op">((</span><span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">));</span></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>
<p>(I skipped a bit of <code>#define</code>ery where <code>stat</code> gets redirected to
<code>__xstat</code>.)</p>
<p>The above hints that we will soon have a similar problem of switching
to 64-bit <code>time_t</code> on 32-bit systems.</p>
<h2 id="why-did-patchelf-fail-at-all">Why did <code>patchelf</code> fail at all?</h2>
<p>I hear you ask: “why did <code>patchelf</code> fail at all”? Is <code>libgcc.so</code> such a
large file by any definition? It’s size is unlikely to overflow 32 bits
(4GB). Why does <code>stat()</code> implementation matter here?</p>
<p>And you are right: <code>libgcc_s.so.1</code> is only 139KB large.</p>
<p>Here is the full structure <code>man 2 stat</code> knows about:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> stat <span class="op">{</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    dev_t     st_dev<span class="op">;</span>         <span class="co">/* ID of device containing file */</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    ino_t     st_ino<span class="op">;</span>         <span class="co">/* Inode number */</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    mode_t    st_mode<span class="op">;</span>        <span class="co">/* File type and mode */</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    nlink_t   st_nlink<span class="op">;</span>       <span class="co">/* Number of hard links */</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    uid_t     st_uid<span class="op">;</span>         <span class="co">/* User ID of owner */</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    gid_t     st_gid<span class="op">;</span>         <span class="co">/* Group ID of owner */</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    dev_t     st_rdev<span class="op">;</span>        <span class="co">/* Device ID (if special file) */</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    off_t     st_size<span class="op">;</span>        <span class="co">/* Total size, in bytes */</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    blksize_t st_blksize<span class="op">;</span>     <span class="co">/* Block size for filesystem I/O */</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>    blkcnt_t  st_blocks<span class="op">;</span>      <span class="co">/* Number of 512B blocks allocated */</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/* Since Linux 2.6, the kernel supports nanosecond</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="co">       precision for the following timestamp fields.</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="co">       For the details before Linux 2.6, see NOTES. */</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> timespec st_atim<span class="op">;</span>  <span class="co">/* Time of last access */</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> timespec st_mtim<span class="op">;</span>  <span class="co">/* Time of last modification */</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> timespec st_ctim<span class="op">;</span>  <span class="co">/* Time of last status change */</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="pp">#define st_atime st_atim</span><span class="op">.</span><span class="pp">tv_sec      </span><span class="co">/* Backward compatibility */</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="pp">#define st_mtime st_mtim</span><span class="op">.</span><span class="pp">tv_sec</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="pp">#define st_ctime st_ctim</span><span class="op">.</span><span class="pp">tv_sec</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div>
<p><code>stat()</code> has to fill all the fields. It does not known which ones
userspace is going to need. The man page also tells us the overflowing
condition:</p>
<pre><code>ERRORS
...
   EOVERFLOW
          pathname  or fd refers to a file whose size, inode number,
          or number of blocks cannot be represented in, respectively,
          the types off_t, ino_t, or blkcnt_t.  This error can occur
          when, for example, an application compiled on a 32-bit
          platform without -D_FILE_OFFSET_BITS=64 calls stat() on a
          file whose size exceeds (1&lt;&lt;31)-1 bytes.</code></pre>
<p>Note that it’s 2GB limit and not a 4GB limit. And it is not just about
the file size. In my case it’s the inode number <code>ino_t st_ino;</code> field:</p>
<pre><code>$ ls -li foo
4404087433 -rw-r--r-- 1 slyfox users 0 Sep  7 09:25 foo</code></pre>
<p>Here inode number overflows our 2GB limit. Let’s use this trivial
program to make sure it fails to <code>stat()</code>:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;errno.h&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string.h&gt;</span></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sys/stat.h&gt;</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> stat s<span class="op">;</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> r<span class="op">;</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>    errno <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>    r <span class="op">=</span> stat<span class="op">(</span><span class="st">&quot;foo&quot;</span><span class="op">,</span> <span class="op">&amp;</span>s<span class="op">);</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>r <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>        printf <span class="op">(</span><span class="st">&quot;stat() = -1: error: </span><span class="sc">%s\n</span><span class="st">&quot;</span><span class="op">,</span> strerror<span class="op">(</span>errno<span class="op">));</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;stat() succeeded</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Running it against both APIs:</p>
<pre><code>$ nix develop -f '&lt;nixpkgs&gt;' patchelf --argstr system i686-linux

$$ gcc a.c -o a &amp;&amp; ./a
stat() = -1: error: Value too large for defined data type

$$ gcc a.c -o a -D_FILE_OFFSET_BITS=64 &amp;&amp; ./a
stat() succeeded</code></pre>
<p>Yep! This is it.</p>
<h2 id="why-are-my-inode-numbers-so-big">Why are my inode numbers so big?</h2>
<p>4 billion inodes is a lot. Why such a big number? Do I have so many
files on disk? No, <code>find /</code> tells me I have around 25 million files
(~100 times smaller than 2 billion mark).</p>
<p>It comes down to the fact how exactly <code>btrfs</code> filesystem allocates inode
numbers.</p>
<p>Compared to <code>ext4</code> (which uses first available inode number in inode
table of fixed size) <code>btrfs</code> does not use a single inode table but uses
B-tree of “objects”.</p>
<p><code>btrfs</code> strategy to allocate inodes is to increment the global number
(per filesystem, number is populated in <code>btrfs_create_new_inode()</code>):</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> btrfs_create_new_inode<span class="op">(</span><span class="kw">struct</span> btrfs_trans_handle <span class="op">*</span>trans<span class="op">,</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>                           <span class="kw">struct</span> btrfs_new_inode_args <span class="op">*</span>args<span class="op">)</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> btrfs_get_free_objectid<span class="op">(</span>root<span class="op">,</span> <span class="op">&amp;</span>objectid<span class="op">);</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>ret<span class="op">)</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> out<span class="op">;</span></span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>    inode<span class="op">-&gt;</span>i_ino <span class="op">=</span> objectid<span class="op">;</span></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> btrfs_get_free_objectid<span class="op">(</span><span class="kw">struct</span> btrfs_root <span class="op">*</span>root<span class="op">,</span> u64 <span class="op">*</span>objectid<span class="op">)</span></span>
<span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">// skipped locking and error handling</span></span>
<span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>objectid <span class="op">=</span> root<span class="op">-&gt;</span>free_objectid<span class="op">++;</span></span>
<span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> re<span class="op">;</span></span>
<span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span>
<span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a><span class="pp">#define BTRFS_FIRST_FREE_OBJECTID </span><span class="dv">256</span><span class="bu">ULL</span></span>
<span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a><span class="pp">#define BTRFS_LAST_FREE_OBJECTID </span><span class="op">-</span><span class="dv">256</span><span class="bu">ULL</span></span>
<span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> btrfs_init_root_free_objectid<span class="op">(</span><span class="kw">struct</span> btrfs_root <span class="op">*</span>root<span class="op">)</span></span>
<span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span>
<span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>    search_key<span class="op">.</span>objectid <span class="op">=</span> BTRFS_LAST_FREE_OBJECTID<span class="op">;</span></span>
<span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>    search_key<span class="op">.</span>type <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>    search_key<span class="op">.</span>offset <span class="op">=</span> <span class="op">(</span>u64<span class="op">)-</span><span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> btrfs_search_slot<span class="op">(</span>NULL<span class="op">,</span> root<span class="op">,</span> <span class="op">&amp;</span>search_key<span class="op">,</span> path<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>path<span class="op">-&gt;</span>slots<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a>        slot <span class="op">=</span> path<span class="op">-&gt;</span>slots<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>        l <span class="op">=</span> path<span class="op">-&gt;</span>nodes<span class="op">[</span><span class="dv">0</span><span class="op">];</span></span>
<span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>        btrfs_item_key_to_cpu<span class="op">(</span>l<span class="op">,</span> <span class="op">&amp;</span>found_key<span class="op">,</span> slot<span class="op">);</span></span>
<span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a>        root<span class="op">-&gt;</span>free_objectid <span class="op">=</span> max_t<span class="op">(</span>u64<span class="op">,</span> found_key<span class="op">.</span>objectid <span class="op">+</span> <span class="dv">1</span><span class="op">,</span></span>
<span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a>                                        BTRFS_FIRST_FREE_OBJECTID<span class="op">);</span></span>
<span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a>        root<span class="op">-&gt;</span>free_objectid <span class="op">=</span> BTRFS_FIRST_FREE_OBJECTID<span class="op">;</span></span>
<span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span>
<span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a>    ret <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>In the code above <code>btrfs</code> literally increments <code>root-&gt;free_objectid</code> as
a way to generate new inode number. On fresh filesystems inode numbers
for files and directories start from <code>256</code> (<code>BTRFS_FIRST_FREE_OBJECTID</code>).
On used filesystem they start from the next after largest already
allocated inode.</p>
<p>Note that file removal does not normally reclaim the inode numbers.
Let’s poke a bit at it in action:</p>
<pre><code># create empty btrfs filesystem:
$ fallocate -l 10G fs.raw
$ mkfs.btrfs fs.raw
$ mkdir m
$ mount fs.raw m
$ cd m

# first file on disk:
$ ls -li first
257 -rw-r--r-- 1 root root 0 Sep  7 15:10 first

# second file on disk:
$ ls -li first
258 -rw-r--r-- 1 root root 0 Sep  7 15:10 first</code></pre>
<p>Despite the same file name being deleted and recreated in place it’s
inode number increases.</p>
<p>There is one exception to “always increasing” rule: if we delete files
with highest inode numbers and unmount/remount the filesystem we will be
able to unwind <code>free_objectid</code> back a bit:</p>
<pre><code># remount empty and try again:
$ rm first

$ cd ..
$ umount m
$ mount fs.raw m
$ cd m

$ touch first
$ ls -li first
257 -rw-r--r-- 1 root root 0 Sep  7 15:11 first</code></pre>
<p>Note: after the remount the inode number is back to <code>257</code> (and not <code>259</code>).
<code>256</code> inode is taken by <code>/</code> root directory.</p>
<p>Back to the question why my filesystem has inode numbers above 4
billion: apparently I managed to create that many files throughout the
lifetime of this filesystem. It’s a 2 years old <code>btrfs</code>. This means
filesystem sees about 70 files per second being created and deleted.</p>
<h2 id="more-failures">More failures</h2>
<p>After fixing <code>patchelf</code> locally I tried to build more <code>i686</code> packages
(mainly <code>wine</code> dependencies) and discovered a few more similar failures.</p>
<p>One of them was in <code>which</code> command:</p>
<pre><code>$ bison
bison: missing operand
Try 'bison --help' for more information.

$ which bison
which: no bison in (... long list of PATHs here, one of them with `bison`)</code></pre>
<p>If we look <code>bison</code> up manually it’s there:</p>
<pre><code>$ for p in ${PATH//:/ }; do [ -f $p/bison ] &amp;&amp; ls -li $p/bison; done
4386192903 -r-xr-xr-x 2 root root 678408 Jan  1  1970 /nix/store/mf37crpkvz388nmqqvkbnmvp21663w26-bison-3.8.2/bin/bison</code></pre>
<p>Proposed <code>which</code> fix for <code>nixpkgs</code> as
<a href="https://github.com/NixOS/nixpkgs/pull/253382" class="uri">https://github.com/NixOS/nixpkgs/pull/253382</a> and upstream as
<a href="https://github.com/CarloWood/which/pull/1" class="uri">https://github.com/CarloWood/which/pull/1</a>.</p>
<p><code>which</code> fix allowed <code>i686</code> to progress a bit more and now it stumbled on
<code>fontconfig</code> and <code>tpm2-tss</code>. To be debugged.</p>
<h2 id="parting-words">Parting words</h2>
<p>32-bit file APIs are not just about handling of files larger that 4GB
in size. Nowadays’ filesystems can easily have other fields that don’t
fit into 32-bit counters. One of them is inode number. Next in the queue
will probably be 64-bit <code>time_t</code>.</p>
<p>The 64-bit interfaces are opt-in for many 32-bit targets and will remain
such for the foreseeable future. Each individual project will have to
adapt to it by adding <code>-D_FILE_OFFSET_BITS=64</code> (and soon
<code>-D_TIME_BITS=64</code>).</p>
<p>While projects gradually migrate to new APIs <code>bootstrapTools</code> should be
rebuilt to get the updates. I hope some form of
<a href="https://github.com/NixOS/nixpkgs/issues/253713" class="uri">https://github.com/NixOS/nixpkgs/issues/253713</a> process will be in
place to make it smoother. Otherwise one-off
<a href="https://github.com/NixOS/nixpkgs/issues/253274" class="uri">https://github.com/NixOS/nixpkgs/issues/253274</a> update will have to do.</p>
<p>If you see a project that still uses 32-bit APIs please send a patch
upstream to use 64-bit API if possible. Chances are it will fix real
breakage on filesystems with 64-bit inodes.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Thu, 07 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/297-32-bit-file-API-strikes-back.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>gcc-14 bugs, pile 2</title>
    <link>http://trofi.github.io/posts/296-gcc-14-bugs-pile-2.html</link>
    <description><![CDATA[<p>Two more months of <code>gcc-14</code> development have passed. The bug rate slowed
down considerably. Let’s look at the new bugs since. This time it is
mere <code>10</code> bugs.</p>
<h2 id="summary">Summary</h2>
<p>Here are the bugs themselves:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR110652">tree-optimization/110652</a>: bootstrap failure for <code>-Werror</code>.</li>
<li><a href="https://gcc.gnu.org/PR110697">middle-end/110697</a>: bootstrap failure for <code>-Werror</code>.</li>
<li><a href="https://gcc.gnu.org/PR110726">tree-optimization/110726</a>: wrong code on <code>llvm</code>: <code>a |= a == 0</code>.</li>
<li><a href="https://gcc.gnu.org/PR110790">target/110787</a>: wrong code on <code>gmp</code></li>
<li><a href="https://gcc.gnu.org/PR110838">tree-optimization/110838</a>: wrong code on <code>x365</code></li>
<li><a href="https://gcc.gnu.org/PR110880">target/110880</a>: <code>aarch64</code> ICE on <code>highway-1.0.5</code></li>
<li><a href="https://gcc.gnu.org/PR111009">tree-optimization/111009</a>: wrong code on <code>perf</code> from <code>linux</code></li>
<li><a href="https://gcc.gnu.org/PR111048">tree-optimization/111048</a>: wrong code on <code>highway-1.0.6</code></li>
<li><a href="https://gcc.gnu.org/PR111051">target/111051</a>: <code>gcc</code> fails to use <code>avx2</code> primitives
on <code>avx512</code> targeted functions on <code>highway-1.0.6</code></li>
<li><a href="https://gcc.gnu.org/PR111060">target/111060</a>: <code>i686-linux</code> <code>gcc</code> fails to build
it’s own <code>libbstdc++</code> due to missing <code>Float16</code> support.</li>
</ul>
<p>Histograms time!</p>
<p>Type of bugs:</p>
<ul>
<li><code>wrong-code</code>: 5</li>
<li><code>other</code>: 4</li>
<li><code>ICEs</code>: 1</li>
</ul>
<p>This was an unusual cycle: most of the bugs were related to the wrong
code generated by <code>gcc</code>. Some of them (like <code>gmp</code> and <code>perf</code> ones) were
very nasty to extract and report.</p>
<p>Subsystems:</p>
<ul>
<li><code>tree-optimization</code>: 5</li>
<li><code>target</code>: 4</li>
<li><code>middle-end</code>: 1</li>
</ul>
<p>As usual half the bugs are lurking in <code>tree-optimization</code> part of the
compiler. Though this time <code>target</code>-specific bugs are frequent as well.</p>
<h2 id="a-note-on-highway">A note on highway</h2>
<p>3 out of 10 bugs were exposed by a <code>highway</code> library. It’s such a great
vectorizer benchmark for <code>gcc</code>!</p>
<p>Initially I was a bit upset by the amount of C++ template indirections
<code>highway</code> uses on it’s implementation.</p>
<p>As it exercises all the possible vector units available for the platform
(<code>SSE{2,3,4}</code>, <code>AVX{1,2}</code> and many others) it was hard for me to narrow
down to a single failing unit type: attempts to remove code for one of
them fails the build for others.</p>
<p>But! I found an easy way to deal with it! We can disable most irrelevant
targets in <code>hwy/detect_targets.h</code> by adding all the irrelevant targets
to <code>HWY_BROKEN_TARGETS</code> define. I usually add everything except the
broken target (usually <code>HWY_AVX2</code> :).</p>
<p>And then reduction becomes trivial: I expand all the templates and get
the simple function with a failure.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>gcc</code> <code>master</code> still yields new bugs. It is still quite a bit of fun to
get and extract build compiler failures from real world usage.</p>
<p>I liked <a href="https://gcc.gnu.org/PR111048" class="uri">https://gcc.gnu.org/PR111048</a> the most. There <code>gcc</code> generated
wrong code for <code>highway-1.0.6</code> library in <code>-mavx2</code> mode.</p>
<p>When handling the following loop:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>u8 in_lanes<span class="op">[</span><span class="dv">32</span><span class="op">];</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">32</span><span class="op">;</span> i <span class="op">+=</span> <span class="dv">2</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  in_lanes<span class="op">[</span>i <span class="op">+</span> <span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  in_lanes<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="op">((</span>u8<span class="op">)</span><span class="bn">0xff</span><span class="op">)</span> <span class="op">&gt;&gt;</span> <span class="op">(</span>i <span class="op">&amp;</span> <span class="dv">7</span><span class="op">);</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p><code>gcc</code> broke <code>i = 12;</code> iteration and instead of <code>i[13] = 0xf;</code>
(<code>0xff &gt;&gt; 4</code>) stored something like <code>i[13] = 0xef;</code> there. <code>gcc</code> was
able to fully constant-fold the loop (and did it slightly incorrectly).</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 06 Sep 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/296-gcc-14-bugs-pile-2.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>SSH over HTTPS</title>
    <link>http://trofi.github.io/posts/295-ssh-over-https.html</link>
    <description><![CDATA[<p>Tl;DR: to pass <code>SSH</code> through <code>HTTPS</code> you need to tweak client and server
sides as the following:</p>
<p>Example client entry in <code>~/.ssh/config</code>:</p>
<pre><code># $ cat .ssh/config
Host ssh-via-https
        ProxyCommand ~/.ssh/https-tunnel.bash
        # some firewalls aggressively close idle TCP connections
        ServerAliveInterval 30</code></pre>
<p>The <code>~/.ssh/https-tunnel.bash</code> helper script we use above:</p>
<pre><code>#!/usr/bin/env bash
{ printf &quot;CONNECT ssh-server:22 HTTP/1.0\r\n\r\n&quot;; cat; } | socat - SSL:https-server:443</code></pre>
<p>Example server entry for <code>apache2</code> <code>HTTPS</code>:</p>
<pre><code># $ cat /etc/httpd/httpd.conf
LoadModule proxy_connect_module .../modules/mod_proxy_connect.so
# ...
AllowCONNECT 22
&lt;Proxy *&gt;
    Order deny,allow
    Deny from all
&lt;/Proxy&gt;
&lt;Proxy ssh-server&gt;
    Order deny,allow
    Allow from all
&lt;/Proxy&gt;</code></pre>
<p>Here we allow everyone to use <code>CONNECT</code> <code>HTTP</code> method on the server side
hosted at <code>https-server</code> just for a single target: the <code>ssh-server</code> host.</p>
<p>And on the client side we use <code>socat</code> to create <code>TLS</code> connection with a
sent <code>CONNECT</code> method as a header.</p>
<p>Now you can use <code>$ ssh ssh-via-https</code> to reach <code>ssh-server</code>.</p>
<p>More words below:</p>
<h2 id="background">Background</h2>
<p>Why do I need it?</p>
<p>I planned to spend 1-2 days in the hospital and did not plan to use the
laptop.But now I am stuck here for the past two weeks and would like to
tinker on small stuff remotely. The hospital has free Wi-fi access.</p>
<p>The caveat is that hospital blocks most connection types. It allows you
only to do <code>HTTP</code> (<code>TCP</code> port <code>80</code>) and <code>HTTPS</code> (<code>TCP</code> port <code>443</code>)
connections for most hosts. <code>DNS</code> (<code>UDP</code> port <code>53</code>) and <code>DoT</code> (<code>TCP</code>
port <code>853</code>) seem to work as well at least for well-known <code>DNS</code>
providers.</p>
<p>But <code>SSH</code> (<code>TCP</code> port <code>22</code> or most other custom ports) is blocked
completely.</p>
<p>I wondered how hard would it be to pass <code>SSH</code> through <code>HTTP</code> or <code>HTTPS</code>.
I had a <code>GSM</code> fallback so I could reconfigure remote server and try
various solutions.</p>
<h2 id="the-options">The options</h2>
<p>There are various avenues to explore here:</p>
<ol type="1">
<li><p>Co-host <code>SSH</code> and <code>HTTPS</code> protocols on a single port and dispatch
them transparently. <a href="https://github.com/yrutschle/sslh">sslh project</a>
does just that.</p>
<p>One of it’s features (or limitations) is that it does not encapsulate
one protocol in another: it guesses the protocol using various
heuristics and redirects it to the actual backend: <code>SSH</code> server,
<code>HTTPS</code> or any other supported protocol from
<a href="https://github.com/yrutschle/sslh/blob/master/probe.c#L50">the list</a>.</p>
<p>Clear pro here is:</p>
<ul>
<li>no special <code>ssh</code> client configuration is required: you just specify
non-default port.</li>
</ul>
<p>The minor cons are:</p>
<ul>
<li>and extra service to set up</li>
<li><code>HTTPS</code> has to be passed through <code>sslh</code> as well, which might hide
source address of the connections for the backend. Not convenient
for logging (and possibly performance?).</li>
</ul></li>
<li><p>Encapsulate one protocol completely into another.</p></li>
</ol>
<p><code>openssh</code> supports <code>ProxyCommand</code> directive effectively allowing user to
supply any transport that <code>ssh</code> protocol uses:</p>
<pre><code>Specifies the command to use to connect to the server. The command string extends to the end of the line, and is executed using the user's shell ‘exec’ directive to avoid a lingering shell process.
Arguments to ProxyCommand accept the tokens described in the TOKENS section. The command can be basically anything, and should read from its standard input and write to its standard output. It should eventually connect an sshd(8) server running on some machine, or execute sshd -i somewhere. Host key management will be done using the Hostname of the host being connected (defaulting to the name typed by the user). Setting the command to none disables this option entirely. Note that CheckHostIP is not available for connects with a proxy command.

This directive is useful in conjunction with nc(1) and its proxy support. For example, the following directive would connect via an HTTP proxy at 192.0.2.0:

ProxyCommand /usr/bin/nc -X connect -x 192.0.2.0:8080 %h %p</code></pre>
<p>Clear pros here:</p>
<ul>
<li>full encapsulation of one protocol in another: no heuristics needed,
harder to block by a Deep Packet Inspection software.</li>
<li><code>HTTPS</code> itself is not impacted or redirected</li>
</ul>
<p>The cons might be also substantial:</p>
<ul>
<li>possible performance decrease due to double-encryption</li>
<li>requires client configuration to use proxy</li>
</ul>
<h2 id="ssh-over-http">SSH over HTTP</h2>
<p>I went with the option <code>[2.]</code>: filly encapsulate <code>SSH</code> protocol into
<code>TLS</code>.</p>
<p>Before doing that I tried a simpler <code>SSH</code> over <code>HTTP</code>.</p>
<p>I configured <code>apache2</code> to allow <code>CONNECT</code> method for a single target
<code>ssh-server:22</code> as:</p>
<pre><code>$ cat /etc/httpd/httpd.conf
LoadModule proxy_connect_module .../modules/mod_proxy_connect.so
# ...
AllowCONNECT 22
&lt;Proxy *&gt;
    Order deny,allow
    Deny from all
&lt;/Proxy&gt;
&lt;Proxy ssh-server&gt;
    Order deny,allow
    Allow from all
&lt;/Proxy&gt;</code></pre>
<p>The client side was trivial to adapt using <code>socat</code>:</p>
<pre><code>$ cat .ssh/config
Host ssh-via-http
        Hostname ssh-server
        Port 22
        ProxyCommand socat - PROXY:http-server:%h:%p,proxyport=80
        ServerAliveInterval 30</code></pre>
<p>Using the above <code>$ ssh ssh-via-http</code> command is enough to use port <code>80</code>
to connect to <code>SSH</code>.</p>
<p>I use <code>ServerAliveInterval</code> to workaround some kind of silent idle
<code>HTTP</code> connection closure somewhere in transit: I tell <code>openssh</code>
client to send periodic probes to the server to make <code>HTTP</code> connection
look alive. That way an idle session can stay alive for longer periods
of time.</p>
<p>By default <code>httpd</code> uses default <code>TimeOut 60</code> seconds of no I/O as a
signal to close the tunnel.</p>
<h2 id="ssh-over-https">SSH over HTTPS</h2>
<p>For some reason <code>socat</code> does not support <code>HTTPS</code> proxy via <code>CONNECT</code>
method and only supports <code>HTTP</code>. A minor omission? Or I hold <code>socat</code>
wrong?</p>
<p>Luckily <code>socat</code> does support <code>TLS</code> encapsulation. <code>CONNECT</code>-based
method is easy to implement manually. I did it via one-line script:</p>
<pre><code>$ cat ~/.ssh/https-tunnel.bash
#!/usr/bin/env bash
{ printf &quot;CONNECT ssh-server:22 HTTP/1.0\r\n\r\n&quot;; cat; } | socat - SSL:https-server:443</code></pre>
<p>Now we can use this script as is for <code>SSH</code> over <code>HTTPS</code> tunneling:</p>
<pre><code>$ cat .ssh/config
Host ssh-via-https
        ProxyCommand ~/.ssh/https-tunnel.bash
        # some firewalls aggressively close idle TCP connections
        ServerAliveInterval 30</code></pre>
<p>And <code>$ ssh ssh-via-https</code> does the expected thing.</p>
<p>The result allowed me to get to my home machine and write this blog post.</p>
<h2 id="parting-words">Parting words</h2>
<p>Ubiquitous presence of <code>HTTPS</code> allows you to pass your data through very
restrictive middle boxes!</p>
<p>The <code>CONNECT</code> method while seemingly being a remnant of the far past is
a useful hack to wrap any <code>TCP</code> payload stream into <code>TLS</code> host stream.</p>
<p>The <code>ServerAliveInterval</code> <code>openssh</code> knob allows you to keep the
connection alive if underlying transport is not friendly to idle
connections.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 30 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/295-ssh-over-https.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>An obscure make --shuffle bug</title>
    <link>http://trofi.github.io/posts/294-an-obscure-make-shuffle-bug.html</link>
    <description><![CDATA[<p>Most of the time <code>make --shuffle</code> finds somewhat trivial bugs of missing
dependencies. I have collected a few examples <a href="http://trofi.github.io/posts/249-an-update-on-make-shuffle.html">here</a>.</p>
<p>It is sometimes hard, but still feasible to trigger these bugs without a
shuffle by carefully placing a few <code>sleep 10</code> calls here and there to
reorder rule execution.</p>
<p>But today I’ll talk about the bugs that could not be easily triggered by
just waiting more. Should these bugs be treats as bugs in <code>Makefile</code>s?
Or are they bugs in the <code>make --shuffle</code> permutation algorithm? You be
the judge!</p>
<h2 id="a-gist-of-the-makefile-language">A gist of the Makefile language</h2>
<p><code>Makefile</code> language is an interesting one: it has a strong spirit of a
declarative family: it should not be very important in which order you
define rules and variables in the file, the rule execution order should
not matter much either. That property makes the input very friendly to
parallelism: you can consider a <code>Makefile</code> as a form of a serialized
build graph.</p>
<p>The graph analogy holds surprisingly well for most of the build systems
out there. But sometimes you get the rare ones that are clearly
not designed to be executed in parallel. Those are also fine. We can
add <code>.NOTPARALLEL:</code> to them and be done with it.</p>
<p>If we ignore clearly unclean build systems there are a few GNU
extensions that break the graph model a bit. Things like immediate
variable assignments <code>A := B</code> are one of them.</p>
<p>For example the following <code>Makefile</code> illustrates the subtlety of
immediate and deferred assignments:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> a b</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">V</span> <span class="ch">:=</span><span class="st"> 1</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="dt">AI</span> <span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="dt">AD</span> <span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dv">a:</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo a: V=</span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span><span class="fu"> AI=</span><span class="ch">$(</span><span class="dt">AI</span><span class="ch">)</span><span class="fu"> AD=</span><span class="ch">$(</span><span class="dt">AD</span><span class="ch">)</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a><span class="dt">V</span> <span class="ch">:=</span><span class="st"> 2</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="dt">BI</span> <span class="ch">:=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="dt">BD</span> <span class="ch">=</span><span class="st"> </span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="dv">b:</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo b: V=</span><span class="ch">$(</span><span class="dt">V</span><span class="ch">)</span><span class="fu"> BI=</span><span class="ch">$(</span><span class="dt">BI</span><span class="ch">)</span><span class="fu"> BD=</span><span class="ch">$(</span><span class="dt">BD</span><span class="ch">)</span></span></code></pre></div>
<p>Take some time time and try to predict the output here.</p>
<p>Ready now? Here is the correct answer:</p>
<pre><code>$ make
a: V=2 AI=1 AD=2
b: V=2 BI=2 BD=2</code></pre>
<p>Here both <code>V=</code> and <code>AD=</code> values are deferred until the final assignment.
This is a well-known gotcha of <code>Makefiles</code>: immediate and deferred
assignments can influence macro expansion and rule definition.</p>
<p>Immediate assignment arguably does not break declarative model too much.</p>
<p>Don’t worry just yet: <code>make --shuffle</code> does not change output of this
example.</p>
<h2 id="target-specific-variables">Target-specific variables</h2>
<p>Another <code>GNU make</code> extension is
<a href="https://www.gnu.org/software/make/manual/html_node/Target_002dspecific.html">Target-specific Variable Values</a>.</p>
<p>The typical use looks benign:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-g</span></span></code></pre></div>
<p>Here we define 2 targets: <code>foo</code> and <code>bar</code>. But for <code>foo</code> (and it’s
prerequisites) we specify <code>CFLAGS=-g</code> target-specific override.</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/1-mf.svg" /></p>
<p>For this case the execution looks like that:</p>
<pre><code>$ make
cc -g -o a.o
cc -g -o b.o
foo (a.o b.o)
cc -o c.o
cc -o d.o
bar (c.o d.o)
all</code></pre>
<p>No surprises here either: all object files needed for <code>foo</code> use
<code>CFLAGS=-g</code> override. None of the object files used by <code>bar</code> use <code>-g</code>:</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/1-mf-expanded.svg" /></p>
<p>So far so good. No ambiguities here.</p>
<p><code>make --shuffle</code> does not change this output either.</p>
<h2 id="todays-problem">Today’s problem</h2>
<p>Now, what happens if we do share an object file across the targets and
happen to use different overrides for it?</p>
<p>Here is our toy example:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o shared.o</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o shared.o</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-ffoo</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fbar</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf.svg" /></p>
<p>What output do you expect here? Does <code>shared.o</code> get compiled once? Or
twice? Does it use <code>-ffoo</code> or <code>-ffbar</code>? Is it deterministic?</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-expq.svg" /></p>
<p>Take some time and come up with an answer.</p>
<h2 id="how-it-all-behaves">How it all behaves</h2>
<p>Let’s start from the simple case:</p>
<pre><code>$ make
cc -ffoo -o a.o
cc -ffoo -o b.o
cc -ffoo -o shared.o
foo (a.o b.o shared.o)
cc -fbar -o c.o
cc -fbar -o d.o
bar (c.o d.o shared.o)
all</code></pre>
<p>Here <code>shared.o</code> gets built once (it’s a single node in our build graph
after all) and it uses <code>-ffoo</code> flag.</p>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-expanded.svg" /></p>
<p>Now, why does it use <code>-ffoo</code> and not <code>-fbar</code>? Can you come up with a
scenario when it uses <code>-fbar</code>?</p>
<p>Apparently if you use just <code>make</code> or <code>make -j</code> you will consistently get
the same <code>cc -ffoo -o shared.o</code> command.</p>
<p>The way <code>GNU make</code> builds the graph is the topological sorting of
targets and prerequisites defined by <code>Makefile</code> syntax.</p>
<p>It is always starts with <code>a.o b.o shared.o</code> and maybe finishes with
<code>foo c.o d.o bar all</code>.</p>
<p>But there is an easy way to alter this order! Try this instead:</p>
<pre><code>$ make bar foo
cc -fbar -o c.o
cc -fbar -o d.o
cc -fbar -o shared.o
bar (c.o d.o shared.o)
cc -ffoo -o a.o
cc -ffoo -o b.o
foo (a.o b.o shared.o)</code></pre>
<p>Now <code>shared.o</code> is built with <code>-fbar</code> flag! And the same would happen if
you did a partial <code>make bar</code> build. Or if you would change <code>Makefile</code>
from <code>all: foo bar</code> to <code>all: bar foo</code>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/Makefile</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/Makefile</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -1,4 +1,4 @@</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="st">-all: foo bar</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="va">+all: bar foo</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        @echo all</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a> foo: a.o b.o shared.o</span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-expanded-2.svg" /></p>
<p>This is a problem. And that can be triggered by <code>make --shuffle</code>!</p>
<p>No shuffle:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j | grep -- '-o shared.o'; done | sort | uniq -c
   1000 cc -ffoo -o shared.o</code></pre>
<p>Ideal consistency. Nothing shows the problem.</p>
<p>With shuffle:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j --shuffle | grep -- '-o shared.o'; done | sort | uniq -c
    494 cc -fbar -o shared.o
    506 cc -ffoo -o shared.o</code></pre>
<p>Almost 50% perfect instability!</p>
<p>What is the correct fix here? Is it a <code>make --shuffle</code> bug to introduce
non-determinism? I would say: no, <code>Makefile</code> should be more robust in
face of target sequence passed to it.</p>
<p>How would one fix it properly? This default recursive propagation is
non-intuitive, <code>GNU make</code> provides a few keywords including <code>private</code>.
<code>private</code> makes the variable override local to specified targets and
does not recurse.</p>
<p>I suggest the following fix:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o shared.o</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o shared.o</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a><span class="dv">a.o b.o:</span><span class="dt"> </span><span class="kw">private</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-ffoo</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="dv">c.o d.o:</span><span class="dt"> </span><span class="kw">private</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fbar</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a><span class="dv">shared.o:</span><span class="dt"> </span><span class="kw">private</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fshared</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/2-mf-fixed.svg" /></p>
<p>Note that here we use the new <code>-fshared</code> value to make it distinct from
the other two. Running:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j --shuffle | grep -- '-o shared.o'; done | sort | uniq -c
   1000 cc -fshared -o shared.o</code></pre>
<p>No instability!</p>
<h2 id="the-need-for-private">The need for private</h2>
<p>Is <code>private</code> really needed? In this toy example it would work the same
with and without it.</p>
<p>The troubles would start if any of <code>.o</code> files would have in
prerequisites another <code>.o</code> file, say a generator that builds header
files or some other input:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> foo bar</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo all</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="dv">foo:</span><span class="dt"> a.o b.o shared.o</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;foo (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="dv">bar:</span><span class="dt"> c.o d.o shared.o</span></span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo </span><span class="st">&quot;bar (</span><span class="ch">$^</span><span class="st">)&quot;</span></span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a><span class="dv">%.o:</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo cc </span><span class="ch">$(</span><span class="dt">CFLAGS</span><span class="ch">)</span><span class="fu"> -o </span><span class="ch">$@</span></span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a><span class="dv">a.o b.o:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-ffoo</span></span>
<span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a><span class="dv">c.o d.o:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fbar</span></span>
<span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a><span class="dv">shared.o:</span><span class="dt"> CFLAGS</span><span class="ch">=</span><span class="st">-fshared</span></span>
<span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a><span class="co"># simulate that also shared.o depends on `generated.h`</span></span>
<span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a><span class="co"># generated by `gen` tool.</span></span>
<span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> gen</span></span>
<span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a><span class="dv">gen:</span><span class="dt"> gen.o</span></span>
<span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo gen</span></span>
<span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a><span class="dv">gen.h:</span><span class="dt"> gen</span></span>
<span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a><span class="er">        </span><span class="ch">@</span><span class="fu">echo gen.h</span></span>
<span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a><span class="dv">shared.o:</span><span class="dt"> gen.h</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/3-mf.svg" /></p>
<p>This time we will check what flags are passed to <code>gen.o</code>.</p>
<p>Without shuffle:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j | grep -- '-o gen.o'; done | sort | uniq -c
   1000 cc -fshared -o gen.o</code></pre>
<p>Whoops: <code>-fshared</code> got leaked into <code>gen.o</code> build, but at least it’s
consistent.</p>
<p>With <code>--shuffle</code>:</p>
<pre><code>$ for i in `seq 1 1000`; do make -j --shuffle | grep -- '-o gen.o'; done | sort | uniq -c
    697 cc -fshared -o gen.o
    303 cc -o gen.o</code></pre>
<p>33% instability! Why it’s just 33% (and not, say, 50%) is an exercise
for the reader.</p>
<p>Adding <code>private</code> to all of <code>CFLAGS=</code> fixes the issue:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="ch">$ </span>for i in `seq 1 1000`; do make -j --shuffle | grep -- <span class="st">'-o gen.o'</span>; done | sort | uniq -c</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>   1000 cc -o gen.o</span></code></pre></div>
<p>It’s not just stable: it also removes unexpected -<code>fshared</code> flag as one
would probably expect.</p>
<h2 id="the-real-world-example">The real world example</h2>
<p>The above hypothetical example is almost 1-to-1 example of what happened
to <code>efivar</code> in <a href="https://github.com/rhboot/efivar/pull/245">PR #245</a>.</p>
<p>There <code>make --shuffle</code> build occasionally failed as:</p>
<pre><code>$ gcc -Og  -g3 -Wall -Wextra  -Werror  -std=gnu11 -funsigned-char -fvisibility=hidden -specs=/build/source/src/include/gcc.specs -fno-merge-constants  -L.   -Wl,--build-id -Wl,--no-allow-shlib-undefined -Wl,--no-undefined-version -Wl,-z,now -Wl,-z,muldefs -Wl,-z,relro -Wl,--fatal-warnings     -DLIBEFIVAR_VERSION=38 -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64 -I/build/source/src/include/  -shared -Wl,-soname,libefisec.so.1 -Wl,--version-script=libefisec.map  -o libefisec.so sec.o secdb.o esl-iter.o util.o -lefivar -lefisec -ldl
ld: cannot find -lefivar: No such file or directory
collect2: error: ld returned 1 exit status
make[1]: *** [/build/source/src/include/rules.mk:38: libefisec.so] Error 1 shuffle=721268944</code></pre>
<p>Initially I thought it was just a matter of missing <code>libefivar.so</code>
dependency on <code>libefisec</code>. But Artem Klimov pointed out that those two
are not expected to depend on one another.</p>
<p>And indeed <code>Makefile</code> uses <code>LIBS</code> variable to specify dependencies:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dv">all:</span><span class="dt"> libefivar.so libefisec.so efisecdb </span><span class="co"># and more ...</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="dv">libefivar.so :</span><span class="dt"> LIBS</span><span class="ch">=</span><span class="st">dl</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a><span class="dv">efisecdb :</span><span class="dt"> </span><span class="ch">$(</span><span class="dt">EFISECDB_OBJECTS</span><span class="ch">)</span><span class="dt"> | libefisec.so</span></span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="dv">efisecdb :</span><span class="dt"> LIBS</span><span class="ch">=</span><span class="st">efivar efisec dl</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a><span class="dv">libefisec.so :</span><span class="dt"> </span><span class="co"># nothing</span></span></code></pre></div>
<p><img src="http://trofi.github.io/posts.data/294-an-obscure-make-shuffle-bug/4-mf.svg" /></p>
<p>The intent of the <code>Makefile</code> is to say that <code>libefisec.so</code> has no
external <code>LIBS=</code> dependencies. But <code>LIBS=</code> override gets leaked via
<code>efisecdb : LIBS=efivar efisec dl</code> and into <code>libefisec.so</code> via
order-only dependency.</p>
<p>The fix is to add <code>private</code> keyword to prevent the <code>LIBS=...</code> leakage
from <code>efisecdb</code> into libraries in it’s prerequisite list:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/src/Makefile</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/src/Makefile</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -42,3 +42,3 @@</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a> # ...</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a> efisecdb : $(EFISECDB_OBJECTS) | libefisec.so</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a><span class="st">-efisecdb : LIBS=efivar efisec dl</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a><span class="va">+efisecdb : private LIBS=efivar efisec dl</span></span></code></pre></div>
<h2 id="parting-words">Parting words</h2>
<p><a href="https://www.gnu.org/software/make/manual/html_node/Target_002dspecific.html">Target-specific Variable Values</a>
is a tool with very sharp edges. While it allows writing very concise
build rules their recursive nature quickly get out of hand if you don’t
see the whole <code>Makefile</code> in front of you.</p>
<p>One of the mitigations is to use <code>private</code> keyword at an assignment site.</p>
<p>Another mitigation is to use different global variables for different
purposes. Individual global variables are also easier to override from
the outside.</p>
<p><code>make --shuffle</code> might be able to expose instability problems in
<code>Makefile</code>s that use target-specific variables not reproducible by
using <code>make -j</code> alone.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Fri, 11 Aug 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/294-an-obscure-make-shuffle-bug.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Mysterious patchelf linkage bug</title>
    <link>http://trofi.github.io/posts/293-mysterious-patchelf-linkage-bug.html</link>
    <description><![CDATA[<p>Today’s mystery started from <a href="https://hydra.nixos.org/build/229663092">this build failure</a>
noticed by Vladimir on <code>staging-next</code> branch of <code>nixpkgs</code>.</p>
<p>There <code>aarch64-linux</code> build
<a href="https://hydra.nixos.org/log/k9mdaj5a9rbpkc8x9hj9mw3papraamcn-patchelf-0.15.0.drv">failed</a>
to compile <code>patchelf</code> as part of <code>stdenv</code> with this mysterious error:</p>
<pre><code>Making all in src
make[1]: Entering directory '/build/patchelf-0.15.0/src'
g++ -DPACKAGE_NAME=\&quot;patchelf\&quot; -DPACKAGE_TARNAME=\&quot;patchelf\&quot; -DPACKAGE_VERSION=\&quot;0.15.0\&quot; -DPACKAGE_STRING=\&quot;patchelf\ 0.15.0\&quot; -DPACKAGE_BUGREPORT=\&quot;\&quot; -DPACKAGE_URL=\&quot;\&quot; -DPACKAGE=\&quot;patchelf\&quot; -DVERSION=\&quot;0.15.0\&quot; -I.    -Wall -std=c++17 -D_FILE_OFFSET_BITS=64     -g -O2 -c -o patchelf.o patchelf.cc
g++ -Wall -std=c++17 -D_FILE_OFFSET_BITS=64     -g -O2   -o patchelf patchelf.o  
ld: patchelf.o: in function `__gnu_cxx::__exchange_and_add(int volatile*, int)':
...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: ...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: ...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: ...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: patchelf.o: in function `__gnu_cxx::__atomic_add(int volatile*, int)':
...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:71:
  undefined reference to `__aarch64_ldadd4_acq_rel'
ld: patchelf.o:...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:71:
  more undefined references to `__aarch64_ldadd4_acq_rel' follow
collect2: error: ld returned 1 exit status</code></pre>
<p>It is the <code>build.log</code> in almost all of it’s entirety. I had a small
change in <code>staging-next</code> branch which should absolutely not cause that
failure. But I was not sure (one can never be sure when it comes to the
toolchain bugs).</p>
<p><strong>Quick quiz</strong>: why does it happen? A <code>gcc</code> bug? A <code>binutils</code> bug? Wrong
library lookup paths in <code>cc-wrapper</code> or <code>ld-wrapper</code>? Or a heisenbug?</p>
<h2 id="first-hypothesis">First hypothesis</h2>
<p>I had some past experience with errors like that in recent the past
<a href="https://github.com/NixOS/nixpkgs/pull/158047">here</a> and
<a href="https://github.com/NixOS/nixpkgs/issues/201254">here</a>.</p>
<p>In both cases it was a <code>nixpkgs</code>-specific problem of mixing multiple
toolchain versions in a single <code>stdenv</code>. I expect this kind of problem
to come back from time to time until bootstrap process is changed to
avoid any mixing of toolchain versions. Thus I was looking forward to
debug yet another one of those.</p>
<p>I ran the bisect and got the
<a href="https://github.com/NixOS/nixpkgs/commit/8470989a96eb1c0e0c12c30c1b7bd7174ed9349b">Merge pull request #245550 from trofi/gcc-restore-sys-include</a>.
as the culprit.</p>
<p>My own commit! Uh-on. One of the problems is that it’s a merge commit of
the change, not the change itself. Why did bisect skip the change
itself? Why did the PR cause this failure at all? It did not make sense.
Reverting the commit on top of <code>staging-next</code> did fix the <code>patchelf</code>
linkage. Should it be the culprit then? I was about to submit the revert
and move on to less cryptic things.</p>
<p>But for some reason just before giving up I tried to run <code>--rebuild</code> on
a random “good” commit and got the <code>patchelf</code> linkage failure! That
meant the error was non-deterministic. It did not make sense.</p>
<p>On one hand <code>sys-include</code> commit above is quite relevant to the way
<code>gcc</code> bootstraps. On the other hand it is not supposed to lead to
non-deterministic failures.</p>
<p>I had to start from the first principles to see where and how linkage
process breaks.</p>
<h2 id="what-is-this-error-about">What is this error about?</h2>
<p>Let’s look at the specifics of code using atomics in <code>gcc</code>.</p>
<p><code>libstdc++</code> (<code>gcc</code>s <code>c++</code> template library) uses atomic operations in
various containers. For example <code>&lt;string&gt;</code> uses atomics to implement
copy-on-write semantics. Naturally <code>patchelf</code> uses a bit of
<code>std::string</code> as well. Thus it’s expected to use a bit of atomics like
<code>__atomic_fetch_add()</code> builtin.</p>
<p>Each architecture implements atomics in a slightly different way: some
get away with a single instruction, some require quite a bit of code.
Let’s have a look at <code>x86_64</code> and <code>aarch64</code> to see how close they are.</p>
<p>I’ll use the very <code>/nix/store/c7qmp1dgqf3hh4fjw74y2k662nmaslcy-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66</code>
source code bit from the error we saw above.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">// atomic.c</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> f<span class="op">(</span><span class="dt">int</span> <span class="op">*</span> p<span class="op">,</span> <span class="dt">int</span> v<span class="op">)</span> <span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> __atomic_fetch_add<span class="op">(</span>p<span class="op">,</span> v<span class="op">,</span> __ATOMIC_ACQ_REL<span class="op">);</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The function <code>f()</code> here atomically adds a <code>v</code> value stored at <code>p</code> and
returns some result.</p>
<p><code>x86_64</code> generates the following code:</p>
<pre><code>$ gcc -O2 -S a.c -o -
    f:
        movl         %esi, %eax
        lock xaddl   %eax, (%rdi)
        ret</code></pre>
<p>It’s literally one <code>lock xaddl</code> instruction. How about <code>aarch64</code>? Is it
as simple?</p>
<pre><code>$ aarch64-unknown-linux-gnu-gcc -O2 -S a.c -o -
        .arch armv8-a
    f:
        mov     x2, x0
        stp     x29, x30, [sp, -16]!
        mov     w0, w1
        mov     x29, sp
        mov     x1, x2
        bl      __aarch64_ldadd4_acq_rel
        ldp     x29, x30, [sp], 16
        ret</code></pre>
<p>We see a big difference here: <code>gcc</code> emits call into outside
<code>__aarch64_ldadd4_acq_rel</code> function. It’s code hides in <code>libgcc.a</code>:</p>
<pre><code>__aarch64_ldadd4_acq_rel:
   0:           bti     c
   4:           adrp    x16, 0 &lt;__aarch64_have_lse_atomics&gt;
                4: R_AARCH64_ADR_PREL_PG_HI21   __aarch64_have_lse_atomics
   8:           ldrb    w16, [x16]
                8: R_AARCH64_LDST8_ABS_LO12_NC  __aarch64_have_lse_atomics
   c:           cbz     w16, 18 &lt;__aarch64_ldadd4_acq_rel+0x18&gt;
  10:           ldaddal w0, w0, [x1]
  14:           ret
  18:           mov     w16, w0
  1c:           ldaxr   w0, [x1]
  20:           add     w17, w0, w16
  24:           stlxr   w15, w17, [x1]
  28:           cbnz    w15, 1c &lt;__aarch64_ldadd4_acq_rel+0x1c&gt;
  2c:           ret</code></pre>
<p>Quite a bit of code here as well: if CPU supports <code>ldaddal</code> then
<code>libgcc.a</code> uses that. Otherwise it falls back to
<code>ldaxr; add; stlxr; cbnz</code>.</p>
<p>This amount of code is probably the reason why the code is not inlined
by <code>gcc</code>. For comparison <code>clang</code> does something a bit different:</p>
<pre><code>$ clang -O2 -S a.c -o - -target aarch64-unknown-linux
    f:
        ldaxr   w8, [x0]
        add     w9, w8, w1
        stlxr   w10, w9, [x0]
        cbnz    w10, f
        mov     w0, w8
        ret</code></pre>
<p>Here <code>clang</code> inlined <code>ldaxr; add; stlxr; cbnz</code> and did not consider
<code>ldaddal</code> at all. If we nudge <code>gcc</code> a bit we can force it to inline
<code>ldaddal</code> with <code>-march=</code> flag:</p>
<pre><code>$ aarch64-unknown-linux-gnu-gcc -O2 -S a.c -o - -Wall -march=armv8.1-a
    f:
        ldaddal w1, w0, [x0]
        ret</code></pre>
<p>And the same for <code>clang</code>:</p>
<pre><code>$ clang -O2 -S a.c -o - -target aarch64-unknown-linux -march=armv8.1-a
    f:
        ldaddal w1, w0, [x0]
        ret</code></pre>
<p>All of the above tells us that sometimes <code>gcc</code> generates calls into
“external” libraries like <code>libgcc.a</code> (or <code>libgcc_s.so</code>) to implement
larger primitives. And this decision might depend on the backend
architecture and compiler flags.</p>
<h2 id="looking-at-the-linkage-command">Looking at the linkage command</h2>
<p>I filed <a href="https://github.com/NixOS/nixpkgs/issues/246147">the bug</a> to
start capturing important details of the bug to see how far into it I
can get.</p>
<p>First I needed to extract exact attribute failing to build on <code>aarch64</code>.</p>
<p>I added <code>boot.binfmt.emulatedSystems = [ "aarch64-linux" ];</code> to
<code>/etc/nixos/configuration.nix</code> to get <code>binfmt-misc</code> wrapper and ran a
few build commands like:</p>
<pre><code>$ nix build --no-link -f. --argstr system aarch64-linux patchelf -L</code></pre>
<p>to point at the exact failing attribute. It ended up being
<code>stdenv.__bootPackages.stdenv.__bootPackages.stdenv.__bootPackages.patchelf</code>.
The attribute points right in the middle of <code>stdenv</code> bootstrap.</p>
<p>I dropped into interactive shell to poke at the exact details of build
failure against <code>good</code> and <code>bad</code> states with <code>nix develop</code>:</p>
<pre><code>$ nix develop -f. --argstr system aarch64-linux patchelf
error (ignored): error: '--arg' and '--argstr' are incompatible with flakes
$$ genericBuild
...
$$ cd src
$$ g++ -Wall -std=c++17 -D_FILE_OFFSET_BITS=64     -g -O2   -o patchelf patchelf.o
ld: patchelf.o: in function `__gnu_cxx::__exchange_and_add(int volatile*, int)':
...-xgcc-12.3.0/include/c++/12.3.0/ext/atomicity.h:66:
  undefined reference to `__aarch64_ldadd4_acq_rel'
...</code></pre>
<p>Now we can check where exactly linker looks the libraries up by adding
<code>-Wl,--verbose</code>:</p>
<pre><code>$$ g++ -Wall -std=c++17 -D_FILE_OFFSET_BITS=64 -g -O2 -o patchelf patchelf.o -Wl,--verbose
...
==================================================
ld: mode aarch64linux
attempt to open ...-glibc-2.37-8/lib/crt1.o succeeded
...-glibc-2.37-8/lib/crt1.o
attempt to open ...-glibc-2.37-8/lib/crti.o succeeded
...</code></pre>
<p>Here is the diff against <code>bad</code> and <code>good</code> environments:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>$ diff -u &lt;(cat /tmp/bad | unnix) &lt;(cat /tmp/good | unnix)</span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="kw">--- /dev/fd/63  2023-07-30 08:26:51.561118824 +0100</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ /dev/fd/62  2023-07-30 08:26:51.561118824 +0100</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -273,6 +273,8 @@</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.so failed</span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a succeeded</span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a> /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a><span class="va">+(/&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a)ldadd_4_4.o</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a><span class="va">+(/&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a)lse-init.o</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a> /&lt;&lt;NIX&gt;&gt;/xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a</span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/bootstrap-stage0-glibc-bootstrapFiles/lib/libgcc.so failed</span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a> attempt to open /&lt;&lt;NIX&gt;&gt;/bootstrap-stage0-glibc-bootstrapFiles/lib/libgcc.a failed</span></code></pre></div>
<p>I expected some difference in library version outputs, some order
difference in path lookups. But we see nothing like that here. The only
change is the difference in access to individual object files in
<code>libgcc.a</code>: <code>ldadd_4_4.o</code> and <code>lse-init.o</code> which we expect in both cases.</p>
<p>And on inspection of <code>libgcc.a</code> I noticed that in <code>bad</code> case it was
corrupted:</p>
<pre><code>$ nm ...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
nm: ...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a:
  malformed archive</code></pre>
<p>How did we manage to corrupt <code>libgcc.a</code>? A bit of strip log spills the
clue:</p>
<pre><code>stripping (with command strip and flags -S -p) in
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
...-xgcc-12.3.0/
lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc_eh.a
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcov.a
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbegin.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginS.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginT.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtend.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtendS.o
...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/crtfastmath.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc_eh.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcov.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbegin.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginS.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtbeginT.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtend.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtendS.o
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/crtfastmath.o</code></pre>
<p>It’s somewhat hard to read but we have <code>libgcc.a</code> twice in the list:</p>
<pre><code>...-xgcc-12.3.0/lib/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a
...-xgcc-12.3.0/lib64/gcc/aarch64-unknown-linux-gnu/12.3.0/libgcc.a</code></pre>
<p>Both are the same file as <code>lib64</code> is a symlink to <code>lib</code>:</p>
<pre><code>$ ls -ld ...-xgcc-12.3.0/lib64
lrwxrwxrwx 1419 root root 3 Jan  1  1970 ...-xgcc-12.3.0/lib64 -&gt; lib</code></pre>
<h2 id="race-condition">Race condition</h2>
<p>So even if the file was stripped twice, why would it be a problem? Isn’t
<code>strip</code> idempotent in this regard?</p>
<p>It would as long as <code>strip</code> is ran sequentially. And it used to be the
case for a while. But a few weeks ago the <code>strip</code> hook was made parallel
in <a href="https://github.com/NixOS/nixpkgs/pull/207101">PR #207101</a>!</p>
<p>As a result two <code>strip</code> commands had a chance to open <code>libgcc.a</code>, strip
it and write the result back. Sometimes you are lucky and you get
something that works. But sometimes you are not so lucky and one of the
<code>stip</code> commands reads incompletely written <code>libgcc.a</code> by the previous
<code>strip</code>.</p>
<h2 id="the-fix">The fix</h2>
<p>The fix (or the workaround) is not to attemt to process the same file
twice. <a href="https://github.com/NixOS/nixpkgs/pull/246164">PR #246164</a>
implements naive form of the symlink resolution via <code>realpath</code> and
double-strip avoidance via <code>sort -u</code>:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/build-support/setup-hooks/strip.sh</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/build-support/setup-hooks/strip.sh</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -68,6 +68,11 @@ stripDirs() {</span></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>         striperr=&quot;$(mktemp 'striperr.XXXXXX')&quot;</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>         # Do not strip lib/debug. This is a directory used by setup-hooks/separate-debug-info.sh.</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>         find $paths -type f -a '!' -path &quot;$prefix/lib/debug/*&quot; -print0 |</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a><span class="va">+            # Make sure we process files under symlinks only once. Otherwise</span></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a><span class="va">+            # 'strip` can corrupt files when writes to them in parallel:</span></span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a><span class="va">+            #   https://github.com/NixOS/nixpkgs/issues/246147#issuecomment-1657072039</span></span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a><span class="va">+            xargs -r -0 -n1 -- realpath -z | sort -u -z |</span></span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>             xargs -r -0 -n1 -P &quot;$NIX_BUILD_CORES&quot; -- $cmd $stripFlags 2&gt;&quot;$striperr&quot; || exit_code=$?</span>
<span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>         # xargs exits with status code 123 if some but not all of the</span>
<span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>         # processes fail. We don't care if some of the files couldn't</span></code></pre></div>
<p>Now we should generally try to strip slightly less from now on by
skipping identical files.</p>
<h2 id="parting-words">Parting words</h2>
<p>My initial guess of wrong library lookup paths was completely off. It
was another case of non-deterministic build causing major toolchain
breakage. I’m glad it was discovered so quickly after introduction.
<a href="https://github.com/NixOS/nixpkgs/pull/246164">PR #246164</a> should fix it
for good.</p>
<p>Turns out <code>clang</code> and <code>gcc</code> generate a bit different code around atomics.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Mon, 31 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/293-mysterious-patchelf-linkage-bug.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Nix Expression Language non-determinism example</title>
    <link>http://trofi.github.io/posts/292-nix-language-nondeterminism-example.html</link>
    <description><![CDATA[<p>Today Vladimir Kryachko found a very
<a href="https://github.com/NixOS/nixpkgs/issues/244045">curious nixpkgs bug</a>!</p>
<p>Here it’s simplified version:</p>
<p>Good:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.nix'
/nix/store/6gzxax0rl0k1n3hg0s22jnj6c1c0aj3b-nix-2.15.1.drv</code></pre>
<p>Bad:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; extensions = []; in n.pkgs.nix'
error:
       … while calling the 'derivationStrict' builtin

         at /builtin/derivation.nix:9:12: (source not available)

       … while evaluating derivation 'nix-2.15.1'
         whose name attribute is located at /nix/store/21nmswlqvkpbv9ykprrf7x6hvzi5djhf-source/pkgs/stdenv/generic/make-derivation.nix:300:7

       … while evaluating attribute 'configureFlags' of derivation 'nix-2.15.1'

         at /nix/store/21nmswlqvkpbv9ykprrf7x6hvzi5djhf-source/pkgs/stdenv/generic/make-derivation.nix:358:7:

          357|       # This parameter is sometimes a string, sometimes null, and sometimes a list, yuck
          358|       configureFlags = let inherit (lib) optional elem; in
             |       ^
          359|         configureFlags

       error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>How can <code>extensions = []</code> affect anything? It should not!</p>
<p>Quick quiz: Why does crash happen? Is it a <code>nix</code> bug, <code>nixpkgs</code> bug or
neither?</p>
<h2 id="nix-expression-language">Nix Expression Language</h2>
<p><a href="https://nixos.org/manual/nix/stable/">nix package manager</a> uses
<a href="https://nixos.wiki/wiki/Overview_of_the_Nix_Language">nix expression language</a>.</p>
<p>It’s a pure (immutable values) lazy (call-by-need) dynamically typed
language. It is simple and short on builtin primitives. The simpler
expressions are usually easy to read and reason about.</p>
<p><code>nix repl</code> provides great interactive environment to poke at things:</p>
<pre><code>$ nix repl
nix-repl&gt; let a = 1; b = 2; in a + b
3

nix-repl&gt; (a: b: a + b) 1 2
3

nix-repl&gt; 1 == 2
false</code></pre>
<p>The larger expressions require some experience and care to figure out.
It has first class anonymous functions (lambdas) and attribute sets
(tables). Attribute sets are key-value pairs one can access via <code>.</code> dot
operator. Attribute sets also provide merge and other operations:</p>
<pre><code>nix-repl&gt; { a = 1; b = 2; } // { b = 4; c = 5; }
{ a = 1; b = 4; c = 5; }

nix-repl&gt; { a = 1; b = 2;}.b
2

nix-repl&gt; { a = 1; b = 2; } == { b = 2; a = 1; }
true

nix-repl&gt; { b = 2; a = 1; }
{ a = 1; b = 2; }</code></pre>
<p>They are called sets because attribute name order is not supposed to
matter.</p>
<h2 id="nix-expression-language-exceptions">Nix Expression Language Exceptions</h2>
<p>It’s so simple! What could possibly go wrong?</p>
<p>Lazy languages frequently have a special property: among other things
it’s hard to reason about code’s performance! As performance depends not
just on the code that constructs the value, but also on the code that
inspects the value.</p>
<p>It might sound like a minor optimization problem. But in practice it
allows (and even encourages) to employ lazy evaluation as a flow control
mechanism: infinite lists, partially initialized data structures and
similar techniques are ubiquitous idioms.</p>
<p>Laziness can be observed in the following example:</p>
<pre><code>nix-repl&gt; let f = x: f x; in f 1
error: stack overflow (possible infinite recursion)

nix-repl&gt; { unused = let f = x: f x; in f 1; used = 1;}.used
1

nix-repl&gt; { unused = let f = x: f x; in f 1; used = 1;}.unused
error: stack overflow (possible infinite recursion)</code></pre>
<p>Here we defined function <code>f</code> which calls itself indefinitely:
<code>f (f (f (... f (1) ) ) ... )</code> as long as we don’t try to print or access that <code>unused</code>
field with infinite recursion things work just fine.</p>
<p><code>nix expression language</code> also allows you to generate exceptions out of
pure code by constructing special values via <code>throw</code> or <code>assert</code>
keywords:</p>
<pre><code>nix-repl&gt; throw &quot;gah&quot;
error:
       … while calling the 'throw' builtin
       error: gah

nix-repl&gt; assert true; 42
42

nix-repl&gt; assert false; 42
error: assertion 'false' failed</code></pre>
<h2 id="the-actual-problem">The actual problem</h2>
<p>Apparently the above is enough to get non-deterministic evaluation!</p>
<p>The example would be a comparison of two sets with unevaluated
exceptions:</p>
<pre><code>nix-repl&gt; { a = 1; b = throw &quot;meh&quot;; } == { a = 2; b = 1; }
false

nix-repl&gt; { a = 1; b = throw &quot;meh&quot;; } == { a = 1; b = 1; }
error:
       error: meh</code></pre>
<p>Note how <code>b</code> is not causing any troubles in the first case but fails in
the second case.</p>
<p>And more: if we just rename <code>a</code> and <code>b</code> in the first case the
behaviour will change (needs an interpreter restart):</p>
<pre><code>nix-repl&gt; { b = 1; a = throw &quot;meh&quot;; } == { b = 2; a = 1; }
error:
       error: meh</code></pre>
<p>It means that comparison operator somehow orders sets internally. If
they were ordered by an attribute name it would not be too bad (the
failure would be deterministic) but still annoying: alpha
conversion (renames) causing evaluation difference in pure lazy
languages is an unexpected property.</p>
<p>Let’s drop into a one-liner evaluator. How about this one:</p>
<pre><code>$ nix-instantiate --eval -E '{ a = 1; b = throw &quot;meh&quot;; } == { a = 2; b = 1; }'
false
$ nix-instantiate --eval -E 'let b = 1; in { a = 1; b = throw &quot;meh&quot;; } == { a = 2; b = 1; }'
error:
       error: meh</code></pre>
<p>Aren’t these supposed to be literally the same thing?</p>
<p>Apparently <code>nix</code> evaluator “interns” all new symbols (immutable strings,
de-duplication mechanism) in the order it encounters them. If <code>b</code>
happens to be the first it will affect all the attribute set traversals
after it!</p>
<h2 id="the-workarounds-time">The workarounds time!</h2>
<p>So how would you work the thing around in <code>nixpkgs</code> if you already
happen to define <code>extensions</code> string early? Simple! Define also
<code>isStatic</code> symbol somewhere as well:</p>
<p>Good:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.nix'
/nix/store/6gzxax0rl0k1n3hg0s22jnj6c1c0aj3b-nix-2.15.1.drv</code></pre>
<p>Bad:</p>
<pre><code>nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; extensions = []; in n.pkgs.nix'
error:
       error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>And good again:</p>
<pre><code>$ nix-instantiate -E 'let n = import &lt;nixpkgs&gt; {}; isStatic = true; extensions = []; in n.pkgs.nix'
/nix/store/6gzxax0rl0k1n3hg0s22jnj6c1c0aj3b-nix-2.15.1.drv</code></pre>
<p>It’s not a very practical workaround. But I find it funny.</p>
<p>To see why it works one needs to know where the <code>extensions</code> attribute
name comes from.</p>
<p>It comes from the following <code>nixpkgs</code> code in the guts
of <code>pkgsStatic.*</code> package definitions:</p>
<pre><code>nix-instantiate --eval -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.stdenv.hostPlatform == n.pkgsStatic.stdenv.hostPlatform'
false</code></pre>
<p><code>hostPlatform</code> is a big attribute set with the main difference in
<code>isStatic</code> field:</p>
<pre><code>nix-repl&gt; pkgs.stdenv.hostPlatform.isStatic
false

nix-repl&gt; pkgsStatic.stdenv.hostPlatform.isStatic
true</code></pre>
<p>Usually that is the cutoff when we compare two attrsets. But if we add
an <code>extensions</code> into the picture:</p>
<pre><code>nix-repl&gt; pkgs.stdenv.hostPlatform.extensions
{ executable = &quot;&quot;; library = &quot;.so&quot;; sharedLibrary = &quot;.so&quot;; staticLibrary = &quot;.a&quot;; }

nix-repl&gt; pkgsStatic.stdenv.hostPlatform.extensions
{ executable = &quot;&quot;; library = &quot;.a&quot;; sharedLibrary = «error: error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>Note how <code>sharedLibrary</code> always fails to evaluate.</p>
<h2 id="how-could-we-fix-and-prevent-it">How could we fix and prevent it?</h2>
<p>I think it would be reasonable to have at least the optional mode in
<code>nix</code> evaluator to perform attrset comparisons eagerly to uncover
potential evaluation instability like that.</p>
<p>I proposed one in <a href="https://github.com/NixOS/nix/pull/8711">PR nix/8711</a>.
It manages to catch this infelicity as is:</p>
<pre><code>$ NIX_VALIDATE_EVAL_NONDETERMINISM=1 nix-instantiate --eval -E 'let n = import &lt;nixpkgs&gt; {}; in n.pkgs.stdenv.hostPlatform == n.pkgsStatic.stdenv.hostPlatform'
error:
...
       error: assertion '(final).hasSharedLibraries' failed</code></pre>
<p>On the <code>nixpkgs</code> side no comparable attrsets should contain any
exception values. It’s better not to include the attribute at all than
have it throw like that.</p>
<p>It would be a good idea to cut down amount of abstraction layers in
<code>lib/systems/default.nix</code> so errors would be not as cryptic for
newcomers.</p>
<h2 id="parting-words">Parting words</h2>
<p>Pure lazy evaluation has it’s own caveats and causes non-deterministic
evaluation. With luck some form of
<a href="https://github.com/NixOS/nix/pull/8711">PR nix/8711</a> will enter <code>nix</code>
and one would be able to add CI checks against such problems.</p>
<p>Otherwise local patches would have to do.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Mon, 17 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/292-nix-language-nondeterminism-example.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>gcc-14 bugs, pile 1</title>
    <link>http://trofi.github.io/posts/291-gcc-14-bugs-pile-1.html</link>
    <description><![CDATA[<p>Around beginning og the May <code>gcc-14</code> development got opened for major
changes to be merged into <code>master</code> branch. 2 months have passed since
and I collected a “round” number of bugs: 16. Today is also a day when I
managed to build my whole system by <code>gcc-master</code> without encountering
any obvious bugs.</p>
<h2 id="summary">Summary</h2>
<p>Here is the full list of bugs I encountered in chronological order
:</p>
<ul>
<li><a href="https://gcc.gnu.org/PR109643">ipa/109643</a>: <code>ICE</code> on <code>pkg-config</code></li>
<li><a href="https://gcc.gnu.org/PR109652">ipa/109652</a>: <code>ICE</code> on <code>valgrind</code></li>
<li><a href="https://gcc.gnu.org/PR109732">tree-optimization/109732</a>: wrong code
on <code>json</code> testsuite.</li>
<li><a href="https://gcc.gnu.org/PR109755">c++/109755</a>: imprecise warning location.</li>
<li><a href="https://gcc.gnu.org/PR110067">tree-optimization/110067</a>: wrong code
on <code>pixman</code> test suite.</li>
<li><a href="https://gcc.gnu.org/PR110228">middle-end/110228</a>: wrong code on
<code>llvm</code> JIT test suite.</li>
<li><a href="https://gcc.gnu.org/PR110271">tree-optimization/110271</a>: <code>ICE</code> on
<code>pycryptodome</code></li>
<li><a href="https://gcc.gnu.org/PR110274">target/110274</a>: wrong code on <code>highway</code>
test suite.</li>
<li><a href="https://gcc.gnu.org/PR110308">debug/110308</a>: <code>ICE</code> on <code>audiofile</code>.</li>
<li><a href="https://gcc.gnu.org/PR110332">tree-optimization/110332</a>: <code>ICE</code> on
<code>llvm</code>.</li>
<li><a href="https://gcc.gnu.org/PR110443">middle-end/110443</a>: <code>ICE</code> on <code>a52dec</code>.</li>
<li><a href="https://gcc.gnu.org/PR110515">middle-end/110515</a>: wrong code on
<code>llvm</code> <code>DWARF</code> test suite.</li>
<li><a href="https://gcc.gnu.org/PR110523">c++/110523</a>: <code>ICE</code> on <code>json</code>.</li>
<li><a href="https://gcc.gnu.org/PR110580">c++/110580</a>: rejects valid on <code>nix</code>
code.</li>
<li><a href="https://gcc.gnu.org/PR110598">c++/110598</a>: wrong code for <code>llvm</code>
<code>AMDGCN</code> test suite.</li>
<li><a href="https://gcc.gnu.org/PR110601">tree-optimization/110601</a>: <code>ICE</code> on
<code>systemd</code>.</li>
</ul>
<p>Let’s look at a few histograms.</p>
<p>Looking at the manifestation of the bug:</p>
<ul>
<li><code>ICE</code>s: 8</li>
<li><code>wrong-code</code>: 6</li>
<li><code>other</code>: 2</li>
</ul>
<p>Wrong code is almost as much as compiler crashes. Some of wrong codes
took me a while to extract from the real project. Once again robust test
suites make it so much easier to extract an example for upstream
reporting.</p>
<p>Looking at the subsystems:</p>
<ul>
<li><code>tree-optimization</code>: 5</li>
<li><code>c++</code>: 4</li>
<li><code>middle-end</code>: 3</li>
<li><code>ipa</code>: 2</li>
<li><code>debug</code>: 1</li>
<li><code>target</code>: 1</li>
</ul>
<p>Half the bugs happened in generic optimization phase (<code>tree-optimization</code>
and <code>middle-end</code>). A few bugs in <code>c++</code> frontend (mainly in tempalte
instantiation code). And only one failure was target-specific. It should
be obvious by now that I did no test <code>gcc</code> on anything besides <code>x86_64</code>
:).</p>
<h2 id="tip-of-the-day">Tip of the day</h2>
<p>When chasing wrong code generation down to a particular source file I
found the <code>#pragma GCC optimize(1)</code> injection hack to be useful:</p>
<pre><code># flip first halg to -O1
$ git grep -LF 'pragma GCC optimize' -- '**.cpp' | head -n $NUMBER |
    xargs sed '1i #pragma GCC optimize(1)' -i

# flip second half to -O1
$ git grep -LF 'pragma GCC optimize' -- '**.cpp' | tail -n +$(($NUMBER+1)) |
    xargs sed '1i #pragma GCC optimize(1)' -i</code></pre>
<p>That way I flip <code>$NUMBER</code> files down to <code>-O1</code> optimization level
(assuming it is enough to inhibit the bug from happening) and bisect it
down to a single file without <code>-O1</code> injected.</p>
<p><code>ccache</code> makes pragma addition and removal very cheap. You effectively
need to compile project only twice: with default options and with <code>-O1</code>
pragma override. The rest is a bit of linking.</p>
<h2 id="parting-words">Parting words</h2>
<p>Running <code>gcc-master</code> is still a lot of fun. I keep finding ~2 new bugs
per week on a regular basis. I did not get to fix any of them: in almost
all cases maintainers figured out the fix way before I got closer to the
culprit code in <code>gcc</code>. Maybe one day I’ll get there first :)</p>
<p><code>llvm</code> and <code>json</code> remain to be the hardest stress tests for <code>gcc</code>.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 12 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/291-gcc-14-bugs-pile-1.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Two years on NixOS</title>
    <link>http://trofi.github.io/posts/290-two-years-on-nixos.html</link>
    <description><![CDATA[<p>Yet another year has passed since I switched to <code>NixOS</code> as my main
desktop system. Time to look back and see how it went
(<a href="http://trofi.github.io/posts/257-a-year-on-nixos.html">2022 instance</a>).</p>
<h2 id="system-maintenance">System maintenance</h2>
<p>I did not have any problems related to package build failures for any
amount of time on <code>nixos-unstable</code>. Probably because I did a bit of
testing when changes were in <code>staging</code>.</p>
<p>I had to deal with a few fallouts around configuration changes related
to upgrades:</p>
<ul>
<li><code>fontconfig</code> font hinting default changed: </posts>.
I had to set explicit defaults to restore font rendering.</li>
<li><code>pipewire</code> configuration layout changed and I had to slightly adapt
my non-standard socket overrides: <a href="https://github.com/NixOS/nixpkgs/pull/220332#issuecomment-1480119470" class="uri">https://github.com/NixOS/nixpkgs/pull/220332#issuecomment-1480119470</a></li>
<li>I followed rename of <code>boot.tmpOn*</code> options to <code>boot.tmp.*</code>.</li>
</ul>
<p>All 3 were easy to track down and fix. It’s a bit more maintenance than
last year’s but still manageable.</p>
<h2 id="community-support">Community support</h2>
<p><code>NixOS</code> community remains to be a friendly place that welcomes
newcomers, experiments and day-to-day maintenance work. I have not seen
instances of large conflicts or abusive behaviours towards anyone.</p>
<p>I had a few chances to interact with wider community by attempting
larger-scale <code>nixpkgs</code> changes: I succeeded on one change and failed on
another change.</p>
<p>More successful change was
<a href="http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html">enabling parallel installs by default</a>.
It’s a good example of a small change with small impact that touches
most packages. I managed to speed up quite a few slow-to-install
packages without major regressions. We have 32 <code>nixpkgs</code> packages marked
with
<a href="https://github.com/search?q=repo%3ANixOS%2Fnixpkgs+%22enableParallelInstalling+%3D+false%22&amp;type=code"><code>enableParallelInstalling = false</code></a>.
The rest should install in parallel (as long as a package builds in
parallel).</p>
<p>Less successful change was the initially minor
<a href="http://trofi.github.io/posts/275-nixpkgs-bootstrap-deep-dive.html">bootstrap process change</a>.
It’s a good example of a medium change with some impact on most
packages. I successfully pushed a few small cleanups but ended up
reverting larger changes. Those exposed bugs either in changes
themselves (<code>gcc</code> bootstrap is hard) or on incorrect assumptions of
downstream packages. This change is also very hard to communicate:
people tend to dismiss finer details of the change and don’t see the
reason for a particular change. Maybe I’ll try again next year :) In any
case I learned a lot in the process!</p>
<p>I follow Matrix channels even less than I did last year as I focus a bit
more on personal and select <code>nixpkgs</code> projects.</p>
<h2 id="maintenance-model">Maintenance model</h2>
<p>I think <code>nixpkgs</code> maintenance model still holds today. There are <code>RFC</code>s
like <a href="https://github.com/NixOS/rfcs/pull/127">RFC127</a> to label
problematic packages in a more fine-grained form than just
<code>ok</code>/<code>broken</code>. Most updates are still done by a
<a href="https://github.com/NixOS/nixpkgs/graphs/contributors">robot</a>
auto-updater.</p>
<p>Looking at
<a href="https://github.com/NixOS/nixpkgs/graphs/commit-activity">commit activity</a>
<code>nixpkgs</code> gets about 1000 commits a week. That’s a lot.</p>
<h2 id="home-server-experience">Home server experience</h2>
<p>Don’t have anything to complain about here. The server required zero
maintenance from me this year as well.</p>
<p>The only thing I changed was the switch from <code>nixos-unstable</code> to direct
<code>master</code> branch from <code>nixpkgs</code> to get upstream kernel upgrades slightly
faster at the expense of local kernel build.</p>
<p>Fun fact: when I had a <a href="http://trofi.github.io/posts/280-cooling-failure.html">cooling failure</a>
on my main desktop system I switched to home server as my main machine.
It took a few config lines to turn a headless machine to wayland desktop
(and then back a week later when repair finished). As it’s an old
machine I noticed how some builds are slower than they ought to be. This
prompted me to work on
<a href="http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html">parallel installs</a>.</p>
<h2 id="local-experiments">Local experiments</h2>
<p>I switched my machine configurations to
<a href="https://nixos.wiki/wiki/Flakes">flake</a>-based configuration to have
configuration update history in a single <code>/etc/nixos</code> <code>git</code> repository.</p>
<p>While at it I also switched my desktop from <code>nixos-unstable</code> channel
directly to <code>master</code> branch to get latest kernels and <code>firefox</code> as soon
as they are available. This means a bit of local compiling from time to
time.</p>
<p>I switched from <code>i3+x11</code> to <code>wayland+sway</code> as my main desktop window
manager. This exposed minor bugs in
<a href="http://trofi.github.io/posts/265-waypipe-fixes.html">waypipe</a> and even
<a href="http://trofi.github.io/posts/268-fixing-wine-wayland-on-polaris.html">wine</a>!</p>
<h2 id="parting-words">Parting words</h2>
<p><code>NixOS</code> still works fine for me. Compared to last year I was able to do
larger projects within <code>NixOS</code> community (bootstrap, parallel builds,
closure shrinking, large package updates, …) and outside <code>NixOS</code>
community (<code>gcc</code>, <code>wayland</code>, <code>xmms2</code>, <code>ski</code>, …).</p>
<p>Give it a go if you did not yet :)</p>]]></description>
    <pubDate>Sun, 09 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/290-two-years-on-nixos.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Building vanilla gcc on NixOS</title>
    <link>http://trofi.github.io/posts/289-building-vanilla-gcc-on-nixos.html</link>
    <description><![CDATA[<p>This post’s main goal is to build unpatched vanilla <code>gcc</code> itself (and to
run it’s test suite). The focus is <code>gcc</code> development and not <code>gcc</code> usage
in <code>NixOS</code>.</p>
<h2 id="why-vanilla">Why vanilla?</h2>
<p>You might have already noticed that <code>nixpkgs</code> patches <code>gcc</code> build quite
heavily:
<a href="https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/compilers/gcc" class="uri">https://github.com/NixOS/nixpkgs/tree/master/pkgs/development/compilers/gcc</a></p>
<p>For example as of today <a href="https://github.com/NixOS/nixpkgs/blob/84822c43fcf6787f3680868d6f63e80b69244fbe/pkgs/development/compilers/gcc/builder.sh">builder.sh</a>
takes 11KB on disk. It might not be a lot, but some changes there are
very invasive. Like interpreter injection:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="bu">declare</span> <span class="at">-a</span> <span class="va">extraLDFlags</span><span class="op">=</span><span class="va">()</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="kw">[[</span> <span class="ot">-e</span> <span class="st">&quot;</span><span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span><span class="st">/nix-support/orig-libc&quot;</span> <span class="kw">]];</span> <span class="cf">then</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="co"># Figure out what extra flags when linking to pass to the gcc</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="co"># compilers being generated to make sure that they use our libc.</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="va">extraLDFlags</span><span class="op">=</span><span class="va">($(</span><span class="op">&lt;</span> <span class="st">&quot;</span><span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span><span class="st">/nix-support/libc-ldflags&quot;</span><span class="va">)</span> <span class="va">$(</span><span class="op">&lt;</span> <span class="st">&quot;</span><span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span><span class="st">/nix-support/libc-ldflags-before&quot;</span> <span class="kw">||</span> <span class="fu">true</span><span class="va">))</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="bu">[</span> <span class="ot">-e</span> <span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span>/nix-support/ld-set-dynamic-linker <span class="bu">]</span><span class="kw">;</span> <span class="cf">then</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                <span class="va">extraLDFlags</span><span class="op">=</span>-dynamic-linker=<span class="va">$(</span><span class="op">&lt;</span> <span class="va">${</span><span class="op">!</span><span class="va">curBintools}</span>/nix-support/dynamic-linker<span class="va">)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            <span class="cf">fi</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># ...</span></span></code></pre></div>
<p>On top of that <code>nixpkgs</code> packages rely on <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/build-support/cc-wrapper/default.nix">cc-wrapper</a>
features added on top. <code>cc-wrapper</code> implements features like option
passing via <code>NIX_CFLAGS_COMPILE</code>, automatic injection of non-default
paths to <code>glibc</code> headers and libraries, hardening features defaults,
slight binary renames, options mangling and many other small things.</p>
<p>Fun fact: <code>cc-wrapper</code> is 25K of extra shell code.</p>
<p>All the above makes <code>gcc</code> test suite incompatible with <code>nixpkgs</code>
patches.</p>
<p>It’s not always easy to tell if the bug is introduced by an upstream
logic or by <code>nixpkgs</code> changes.</p>
<p>It’s hard to upstream found <code>gcc</code> bugs or to work on <code>gcc</code> fixes
without the fear of being affected by downstream changes.</p>
<p>And once you have prepared an upstreamable <code>gcc</code> patch it would be nice
to run <code>gcc</code> test suite to see if the local change introduced any
regressions.</p>
<p>Wouldn’t it be nice to just build vanilla <code>gcc</code> every now and then to
see how unmodified <code>gcc</code> behaves?</p>
<h2 id="th-perfect-build">Th perfect build</h2>
<p>In an ideal world a program should be compilable by running
<code>./configure &amp;&amp; make &amp;&amp; make install</code> (or an equivalent for other build
systems).</p>
<p>In practice software frequently makes assumptions about default paths
that don’t match file system layout imposed by <code>nix</code>. For example <code>gcc</code>
assumes that system headers should be present in <code>/usr/include</code> and
<code>ELF</code> interpreter on <code>x86_64</code> should be at <code>/lib64/ld-linux-x86-64.so.2</code>.</p>
<p>“Naturally” <code>NixOS</code> provides none of these paths and stores everything
under <code>/nix/store/&lt;hash&gt;-&lt;package&gt;-&lt;version&gt;</code> to allow multiple versions
of any package to co-exist without conflicts (be it a compiler, kernel,
libc, <code>bash</code> or <code>firefox</code>).</p>
<p>Specifically there is no default <code>/usr/include</code> on <code>NixOS</code>:</p>
<pre><code>$ ls /usr/include
ls: cannot access '/usr/include': No such file or directory</code></pre>
<h2 id="fhs-wrapper">FHS wrapper</h2>
<p>Normally the <code>nixpkgs</code> packaging solution is to explicitly pass
non-default include (and library, <code>PATH</code> paths) to the <code>./configure</code>.
Or implicitly via <code>NIX_CFLAGS_COMPILE</code>.</p>
<p>But sometimes it does not work as smoothly. <code>gcc</code> is a perfect example
of a special package here. Another example is a binary-only package not
distributed in a source form (say, a game).</p>
<p>To reconcile that mismatch <code>nixpkgs</code> provides a few helpers to build a
<a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard">FHS</a>
“chroot” out of <code>/nix/store/...</code> paths. Helper mounts <code>/nix/store</code> paths
into locations expected by <code>FHS</code>.</p>
<p>One of such helpers is <a href="https://nixos.org/manual/nixpkgs/stable/#sec-fhs-environments">buildFHSEnv</a>.
I’ll use it as an example.</p>
<p>To get started let’s create <code>shell.nix</code> file in the current directory
and run <code>nix-shell</code> there:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">pkgs</span> <span class="op">?</span> <span class="bu">import</span> &lt;nixpkgs&gt; <span class="op">{}</span> <span class="op">}</span>:</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">let</span> <span class="va">e</span> <span class="op">=</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  pkgs.buildFHSEnv <span class="op">{</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;gcc-git-build-env&quot;</span><span class="op">;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="va">targetPkgs</span> <span class="op">=</span> <span class="va">ps</span><span class="op">:</span> <span class="kw">with</span> ps<span class="op">;</span> <span class="op">[</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      <span class="co"># library depends</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      gmp gmp.dev</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>      isl</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>      libffi libffi.dev</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>      libmpc</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>      libxcrypt</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>      mpfr mpfr.dev</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>      xz xz.dev</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>      zlib zlib.dev</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>      <span class="co"># git checkout need flex as they are not complete release tarballs</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>      m4</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>      bison</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>      flex</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>      texinfo</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>      <span class="co"># test harness</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>      dejagnu</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>      autogen</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>      <span class="co"># valgrind annotations</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>      valgrind valgrind.dev</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>      <span class="co"># toolchain itself</span></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>      gcc</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>      stdenv.cc</span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>      stdenv.cc.libc stdenv.cc.libc_dev</span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">];</span></span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="kw">in</span> e.env</span></code></pre></div>
<p>Running:</p>
<pre><code>$ nix-shell
$$ ls /usr/include/
aio.h        endian.h           glob.h          memory.h    nss.h           signal.h       uchar.h
aliases.h    envz.h             gmp.h           misc        obstack.h       sound          ucontext.h
...</code></pre>
<p>Ready! Now in that shell (and only that shell) we have <code>/usr/include</code>
(and other standard paths) populated. The implementation uses unshared
linux mount user namespaces with a few bind mounts.</p>
<p>Let’s do a full <code>gcc</code> build in that environment using naive
<code>./configure</code> flags:</p>
<pre><code>$$ git clone --depth 1 https://gcc.gnu.org/git/gcc.git
$$ mkdir gcc-build
$$ cd gcc-build
$$ ../gcc/configure --disable-multilib --prefix=$PWD/../gcc-installed
$$ make -j $(nproc)
$$ make install</code></pre>
<p>Build and install are done!</p>
<p>I had to use <code>--disable-multilib</code> as not all 32-bit libraries are
present by default. Getting multilib to work is an exercise for the
reader :)</p>
<p>Now let’s use our installed compiler as is:</p>
<pre><code>$$ printf '#include &lt;iostream&gt;\nint main() { std::cout &lt;&lt; &quot;Hello!&quot; &lt;&lt; std::endl ; }' &gt; a.cc
$$ ../gcc-installed/bin/g++ a.cc -o a
$$ ./a
./a: /usr/lib/libstdc++.so.6: version `GLIBCXX_3.4.32' not found (required by ./a)</code></pre>
<p>Almost worked. <code>gcc</code> itself did start, but produced binaries did not
embed default <code>RPATH</code> to <code>gcc</code>’s own <code>libstdc++</code> and use the (outdated)
system <code>libstdc++</code>. There are a few ways to work it around. The simplest
one is to use <code>static-libstdc++</code>:</p>
<pre><code>$$ ../gcc-installed/bin/g++ a.cc -o a -static-libstdc++
$$ ./a
Hello!</code></pre>
<p>As a bonus we can also run unmodified <code>gcc</code> test suite works as well:</p>
<pre><code>$$ make check
make[1]: Entering directory '/tmp/gcc/gcc-build'
make[2]: Entering directory '/tmp/gcc/gcc-build/fixincludes'
autogen -T ../../gcc/fixincludes/check.tpl ../../gcc/fixincludes/inclhack.def
...
Using /tmp/gcc/gcc/gcc/testsuite/lib/gcc.exp as tool init file.
Test run by slyfox on Fri Jul  7 08:34:18 2023
Native configuration is x86_64-pc-linux-gnu

                === gcc tests ===

Schedule of variations:
    unix

Running target unix
Using /usr/share/dejagnu/baseboards/unix.exp as board description file for target.
Using /usr/share/dejagnu/config/unix.exp as generic interface file for target.
Using /tmp/gcc/gcc/gcc/testsuite/config/default.exp as tool-and-target-specific interface file.
Running /tmp/gcc/gcc/gcc/testsuite/gcc.c-torture/compile/compile.exp ...
...
                === gcc Summary ===

# of expected passes            191743
# of unexpected failures        107
# of unexpected successes       19
# of expected failures          1502
# of unsupported tests          2593
...</code></pre>
<p><code>107</code> unexpected failures of <code>191743</code> performed. Not too bad!</p>
<h2 id="parting-words">Parting words</h2>
<p><code>buildFHSEnv</code> is a great workaround when one is in need of an <code>FHS</code>
layout. It helps picky packages including <code>gcc</code> itself.</p>
<p>While <code>NixOS</code> has an unusual directory structure it is flexible enough to
be able to simulate traditional layouts like FHS with a small
<code>buildFHSEnv</code> “chroot” builder. It’s useful for both development
environments and for running external binaries built against FHS linux
systems.</p>
<p>Happy hacking and have fun!</p>]]></description>
    <pubDate>Sat, 08 Jul 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/289-building-vanilla-gcc-on-nixos.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>DNS over TLS</title>
    <link>http://trofi.github.io/posts/288-DNS-over-TLS.html</link>
    <description><![CDATA[<p>A few months ago I finally got optical internet connection with native
<code>IPv6</code> . This prompted me to slightly reconfigure my devices: I
abandoned <a href="https://tunnelbroker.net/">HE.net’s tunnel</a> as my <code>IPv6</code>
outlet.</p>
<p>I explored my DNS hardening as well. At first I flipped
a <code>DNSSEC</code> and <code>DNSOverTLS</code> on for <code>systemd-resolved</code> without much
thought and got it to do something. The result seemed to work.</p>
<p>Later I noticed that <code>netstat</code> takes a while to resolve local <code>IPv6</code>
addresses back to domain names: it took 10+ seconds per printed line.</p>
<p>This seems to be a reproducer:</p>
<pre><code>$ dig slyfox.uni.cx AAAA | grep -v '^;'
slyfox.uni.cx.          37      IN      AAAA    2a00:23c8:a613:101:7912:b70d:1c91:ab02

$ time dig -x 2a00:23c8:a613:101:7912:b70d:1c91:ab02
;; communications error to 127.0.0.53#53: timed out
;; communications error to 127.0.0.53#53: timed out
;; communications error to 127.0.0.53#53: timed out

; &lt;&lt;&gt;&gt; DiG 9.18.14 &lt;&lt;&gt;&gt; -x 2a00:23c8:a613:101:7912:b70d:1c91:ab02
;; global options: +cmd
;; no servers could be reached

real    0m15.028s
user    0m0.002s
sys     0m0.005s</code></pre>
<p>Reverse resolve was not only slow: it also did not return a reasonable
<code>DNS</code> response (<code>NXDOMAIN</code> or similar). This means result did not get
cached at all and subsequent run was as slow.</p>
<p>Why did slowness start happening? <code>IPv4</code>-only world with <code>HE.net</code> tunnel
had no such problems.</p>
<p>I have effectively external <code>IPv6</code> address for some internet facing
resources. They are in the same subnet as my desktop! This makes local
reverse resolution to be very slow.</p>
<p><code>systemd-resolved</code> as is does not provide detailed enough logs. I had to
<code>strace</code> it to see what <code>DNS</code> servers and protocols it talks to. Not
very convenient.</p>
<p><code>strace</code> revealed that <code>systemd-resolved</code> sends some of reverse lookup
requests to link-specific <code>DNS</code> server which happens to be my ISP router
(over <code>DoT</code> port which router does not support). Other requests are sent
to globally configured <code>DNS</code>. That was a surprise.</p>
<p>Disabling <code>DNSOverTLS=yes</code> option also did not help: the router still
did not want to resolve or forward the requests upstream.</p>
<p>On top of that <code>systemd-resolved</code> did not keep a <code>TCP</code> connection to
<code>DoT</code> servers. As a result each (even successful) resolve
takes a while due to a 3-way <code>TCP</code> (and <code>TLS</code>?) handshake. This adds
about 10ms to each uncached query.</p>
<p>I wanted a bit more flexibility where my <code>DNS</code> requests go. Thus I
switched over to a familiar <code>unbound</code> package. <code>unbound</code> does keep <code>TCP</code>
connections to <code>DoT</code> servers (which makes even uncached <code>DNS</code> requests
under 10ms). Debugging story is also more straightforward: specifying
<code>verbosity: ...</code> parameter in the config is enough to see what is being
resolved and how forwards happen.</p>
<p>On <code>NixOS</code> the naive switch to <code>unbound</code> is a few lines of service
setup:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Slow at resolving reverse loopups for IPv6, like:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">#   $ dig -x 2002:...</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">resolved</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">false</span><span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">services</span>.<span class="va">unbound</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="va">settings</span> <span class="op">=</span> <span class="op">{</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>      <span class="va">forward-zone</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>          <span class="va">name</span> <span class="op">=</span> <span class="st">&quot;.&quot;</span><span class="op">;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>          <span class="va">forward-tls-upstream</span> <span class="op">=</span> <span class="st">&quot;yes&quot;</span><span class="op">;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>          <span class="va">forward-addr</span> <span class="op">=</span> <span class="op">[</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;2001:4860:4860::8888@853#dns.google&quot;</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;2001:4860:4860::8844@853#dns.google&quot;</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;8.8.8.8@853#dns.google&quot;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;8.8.4.4@853#dns.google&quot;</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>          <span class="op">];</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>      <span class="op">];</span></span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>  <span class="op">};</span></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Most of “code” here is to specify <code>DoT</code>-capable recursive servers. The
above expands to the following <code>unbound</code> configuration:</p>
<pre><code>$ cat /etc/unbound/unbound.conf
server:

  access-control: 127.0.0.0/8 allow
  access-control: ::1/128 allow
  auto-trust-anchor-file: /var/lib/unbound/root.key
  chroot: &quot;&quot;
  directory: /var/lib/unbound
  do-daemonize: no
  interface: 127.0.0.1
  interface: ::1
  ip-freebind: yes
  pidfile: &quot;&quot;
  tls-cert-bundle: /etc/ssl/certs/ca-certificates.crt
  username: unbound
forward-zone:
  forward-addr: 2001:4860:4860::8888@853#dns.google
  forward-addr: 2001:4860:4860::8844@853#dns.google
  forward-addr: 8.8.8.8@853#dns.google
  forward-addr: 8.8.4.4@853#dns.google
  forward-tls-upstream: yes
  name: .
remote-control:
  control-cert-file: /var/lib/unbound/unbound_control.pem
  control-enable: no
  control-interface: 127.0.0.1
  control-interface: ::1
  control-key-file: /var/lib/unbound/unbound_control.key
  server-cert-file: /var/lib/unbound/unbound_server.pem
  server-key-file: /var/lib/unbound/unbound_server.key</code></pre>
<p>Now all my direct and reverse queries are nice and quick:</p>
<pre><code>$ time dig -x 2a00:23c8:a613:101:7912:b70d:1c91:ab02
;; Got answer:
;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 6507

;; AUTHORITY SECTION:
0.a.2.ip6.arpa.         1274    IN      SOA     pri.authdns.ripe.net. dns.ripe.net. 1687019637 3600 600 864000 3600

;; Query time: 0 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Sat Jun 17 22:15:27 BST 2023
;; MSG SIZE  rcvd: 161</code></pre>
<p>WARNING: do not use these settings as is until you fully understand the
implications of abandoning your default resolver. Non-exhaustive list of
things to note:</p>
<ul>
<li><p>some of local requests are forwarded to the public <code>DNS</code>: you might
need to tweak your local zones a bit more if you want to prevent
leaking our resolution requests related to machines in you network</p></li>
<li><p>all your non-local requests to to a single entity: you might now want
to send all your DNS queries to a single public <code>DNS</code> server for
privacy reasons</p></li>
<li><p><code>mDNS</code> is disabled and your local resources might stop resolving as is</p></li>
</ul>
<p>I have local workarounds for all of these. Your setup will likely be
different.</p>
<p>When picking among <code>DoT</code> public servers I was choosing between:</p>
<ul>
<li><code>Cloudflare</code>: <code>1.1.1.1</code> and similar</li>
<li><code>Google</code>: <code>8.8.8.8</code> and similar</li>
<li><code>Quad9</code> <code>9.9.9.9</code> and similar</li>
</ul>
<p>These are all for-profit companies. Your priorities might prompt you to
evaluate other <code>DoT</code>-capable servers.</p>
<p>Anyway. Of the above somehow <code>Cloudflare</code> latency is consistently 2x-3x
slower for initial <code>DoT</code> setup than the other two:</p>
<pre><code>$ dig +tls @1.1.1.1 kernel.org
;; ANSWER SECTION:
kernel.org.             100     IN      A       139.178.84.217
;; Query time: 50 msec
;; SERVER: 1.1.1.1#853(1.1.1.1) (TLS)

$ dig +tls @8.8.8.8 kernel.org
;; ANSWER SECTION:
kernel.org.             175     IN      A       139.178.84.217
;; Query time: 14 msec
;; SERVER: 8.8.8.8#853(8.8.8.8) (TLS)

$ dig +tls @9.9.9.9 kernel.org
;; ANSWER SECTION:
kernel.org.             289     IN      A       139.178.84.217
;; Query time: 19 msec
;; SERVER: 9.9.9.9#853(9.9.9.9) (TLS)</code></pre>
<p>Maybe <code>Cloudflare</code> does not have a close enough <code>TLS</code> termination near
me? <code>mtr -4 -T -P 853</code> says that both <code>1.1.1.1</code> and <code>8.8.8.8</code> are 4.5ms
away from me, while <code>9.9.9.9</code> is 9ms away from me. Non-TLS queries are
as performant <code>mtr</code>-reported values:</p>
<pre><code>$ dig @1.1.1.1 kernel.org
;; ANSWER SECTION:
kernel.org.             52      IN      A       139.178.84.217

;; Query time: 5 msec
;; SERVER: 1.1.1.1#53(1.1.1.1) (UDP)

$ dig +tcp @8.8.8.8 kernel.org
;; ANSWER SECTION:
kernel.org.             92      IN      A       139.178.84.217

;; Query time: 5 msec
;; SERVER: 8.8.8.8#53(8.8.8.8) (TCP)

$ dig +tcp @9.9.9.9 kernel.org
;; ANSWER SECTION:
kernel.org.             36      IN      A       139.178.84.217

;; Query time: 9 msec
;; SERVER: 9.9.9.9#53(9.9.9.9) (TCP)</code></pre>
<p>I settled on <code>dns.google</code> (<code>8.8.8.8</code> and backups).</p>
<h2 id="parting-words">Parting words</h2>
<p><code>systemd-resolved</code> needs a bit of handholding to make reverse resolves
to work quickly. <code>unbound</code> is a bit easier to get up and running.</p>
<p><code>DoT</code>’s latency tax is around 2-3x as it needs more RTTs supposedly for
<code>TLS</code>-related machinery. If your resolver is close enough it’s not too
bad.</p>
<p>In theory <code>DNS-over-QUIC</code> could shrink latency further down to levels of
unencrypted <code>DNS</code>. One <code>DoQ</code> gains more popularity and it’s support
gets added to <code>unbound</code>: <a href="https://github.com/NLnetLabs/unbound/issues/743" class="uri">https://github.com/NLnetLabs/unbound/issues/743</a>.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Sun, 18 Jun 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/288-DNS-over-TLS.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>nix and guix for Gentoo in 2023</title>
    <link>http://trofi.github.io/posts/287-nix-and-guix-for-gentoo-in-2023.html</link>
    <description><![CDATA[<p>Another year has passed since I shared anything related to
<a href="https://github.com/trofi/nix-guix-gentoo/">::nix-guix</a> Gentoo overlay.</p>
<p>As usual the overlay still ships latest <code>nix-2.15.0</code> and <code>guix-1.4.0</code>
packages.</p>
<h2 id="overlay-location-changes">Overlay location changes</h2>
<p>The overlay installation procedure
<a href="https://github.com/trofi/nix-guix-gentoo/#enabling-the-overlay">changed slightly</a>
and does not rely on <code>layman</code> or <code>eselect repository</code> anymore.</p>
<p>If you are an existing user of <code>layman</code> setup then please consider
removing and re-syncing already created overlay. It should be a matter
of running something like:</p>
<pre><code># edit /etc/portage/repos.conf/nix-guix.conf
# rm -rfv /var/db/repos/nix-guix
# emerge --sync</code></pre>
<p>Otherwise you are risking using stale overlay mirrored by Gentoo
infrastructure at <a href="https://github.com/gentoo-mirror/nix-guix" class="uri">https://github.com/gentoo-mirror/nix-guix</a>. It has
a few build problems like missing <code>gcc-13</code> fixes. They typical symptom
of using stale overlay is <code>rapidcheck</code>
<a href="https://github.com/trofi/nix-guix-gentoo/issues/35">build failure</a>:</p>
<pre><code>/var/tmp/portage/dev-cpp/rapidcheck-0_pre20230113/work/rapidcheck-0_pre20230113/include/rapidcheck/detail/Utility.h:87:8: error: 'uint64_t' does not name a type
   87 | inline uint64_t avalanche(uint64_t x) {
      |        ^~~~~~~~
/var/tmp/portage/dev-cpp/rapidcheck-0_pre20230113/work/rapidcheck-0_pre20230113/include/rapidcheck/detail/Utility.h:6:1: note: 'uint64_t' is defined in header '&lt;cstdint&gt;'; did you forget to '#include &lt;cstdint&gt;'?
    5 | #include &lt;limits&gt;
  +++ |+#include &lt;cstdint&gt;
    6 |</code></pre>
<p>It was <a href="https://github.com/trofi/nix-guix-gentoo/commit/64edf8fe00c3fb3bcfc53aeb9287a4d3fb7cc882">fixed a while ago</a>
in the overlay. Make sure you have the correct sync URL that points:
<a href="https://github.com/trofi/nix-guix-gentoo/" class="uri">https://github.com/trofi/nix-guix-gentoo/</a>.</p>
<p>I hope that the fact of use of stale URL by <code>emerge --sync</code> will be
fixed in <a href="https://bugs.gentoo.org/905869" class="uri">https://bugs.gentoo.org/905869</a>. Or at least sync errors will
be exposed to users in a more intuitive form. Removing stale broken
mirrors would be another option.</p>
<h2 id="other-changes">Other changes</h2>
<p>We had 5 overlay contributors over the past year:</p>
<pre><code>Artemis Everfree
Huang Rui
Maciej Barć
ns
Sergei Trofimovich</code></pre>
<p>People delivered various fixes and improvements:</p>
<ul>
<li>add basic support for <code>clang</code>-based system profiles</li>
<li>improve compatibility with systems where <code>/bin/sh</code> is <code>dash</code></li>
<li><code>README.md</code> installation improvements</li>
<li>dependency improvements on non-<code>amd64</code> systems</li>
<li>CI workflows to catch simple syntax errors in ebuilds</li>
<li>numerous <code>nix</code> version updates to trail latest upstream releases</li>
<li>switch from <code>user.eclass</code> to <code>acct-user.eclass</code> to allow users to
tweak default groups for builders.</li>
<li>drop <code>USE=s3</code> support on <code>nix</code> to sidestep problems dealing with stale
<code>aws-sdk-cpp</code> package</li>
<li>restore lost by accident user’s <code>CXXFLAGS=</code> support for <code>nix</code></li>
<li>document <code>ENV_UNSET</code> workaround for cases when global variables
introduce build impurity</li>
</ul>
<p>One of the items above had unusually large source of bugs.</p>
<h2 id="clang-profiles-related-bugs">clang profiles related bugs</h2>
<p>Gentoo recently added <code>clang</code>-based set of experimental profiles:</p>
<pre><code>$ eselect profile list | grep clang
  [26]  default/linux/amd64/17.1/clang (exp)
  [27]  default/linux/amd64/17.1/systemd/clang (exp)
  [28]  default/linux/amd64/17.1/systemd/clang/merged-usr (exp) *
  [33]  default/linux/amd64/17.0/musl/clang (exp)</code></pre>
<p>Of course being experimental does not stop users from trying to use the
profiles for all sorts of use cases. I found out about the profiles from
a bug report where <code>nix</code>
<a href="https://github.com/trofi/nix-guix-gentoo/issues/28">failed to build</a>
on one of them.</p>
<h3 id="missing-long-double-helpers-in-runtime-libraries">missing ‘long double’ helpers in runtime libraries</h3>
<p>The symptom was a link failure around obscure functions like
<code>__unordtf2</code>:</p>
<pre><code>ld.lld: error: undefined symbol: __unordtf2
&gt;&gt;&gt; referenced by printf_fphex.o:(__printf_fphex) in archive /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../lib64/libc.a
&gt;&gt;&gt; referenced by printf_fphex.o:(__printf_fphex) in archive /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../lib64/libc.a
&gt;&gt;&gt; referenced by printf_fp.o:(__printf_fp_l) in archive /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../lib64/libc.a</code></pre>
<p>This kind of errors only ever happens when you mix the code compiled with
<code>gcc</code> and <code>clang</code>. <code>gcc</code> sometimes emits helper functions that it
expects to satisfy with <code>libgcc.a</code>. Those symbols are usually related to
handling of non-standard types like <code>long double</code>. But otherwise could
be anything that is worth sharing by the code generator.</p>
<p>It would not normally be a problem. But <code>glibc</code> provides <code>printf()</code>
function that supports any type that compiler tries to throw at
it. And even that is not a problem: as long as building and linking is
done by the same toolchain (like for <code>libc.so.6</code>) then compiler driver
provides all the needed libraries.</p>
<p>The problem happens when compiler and linker are different
implementations. One of such cases is static linking: currently <code>glibc</code>
is built with <code>gcc</code> even on <code>clang</code> profiles in Gentoo. But the vast
majority of <code>::gentoo</code> is built with <code>clang</code> including static <code>busybox</code>.</p>
<p>As a result static linking is effectively broken on <code>clang</code> profiles
today.</p>
<p>One of the fixes would be to switch <code>glibc</code> to be built with <code>clang</code>
just like the rest of packages (I believe <code>glibc</code> upstream does support
<code>clang</code> nowadays). Another workaround would be to disable support of
those non-standard types at least in static <code>glibc</code>. Yet another one
would be to implement <code>gcc</code>-specific library calls in <code>clang</code> runtime so
both could be interchangeable. That would be the best fix if <code>clang</code>
strives to generate output binary-compatible with <code>gcc</code> output.</p>
<p>So far none of the above is implemented in Gentoo.
<a href="https://bugs.gentoo.org/899582" class="uri">https://bugs.gentoo.org/899582</a> tracks the problem.</p>
<p>Thus to make <code>nix</code> work I had to work around in statically built
<code>busybox</code> instance used by <code>nix-daemon</code> for initial build environments.</p>
<p>I took the path of supplying (unusable) stubs for missing symbols as:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdio.h&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;stdlib.h&gt;</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co">/* Not a real implementation.</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="co"> * Just a few stubs for llvm-libunwind to be complete enough for</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co"> * busybox to be able to link against libc.a's printf().</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noreturn<span class="op">))</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> die<span class="op">(</span><span class="dt">const</span> <span class="dt">char</span> <span class="op">*</span> func<span class="op">)</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;</span><span class="sc">%s</span><span class="st"> not implemented.&quot;</span><span class="op">,</span> func<span class="op">);</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    fprintf<span class="op">(</span>stderr<span class="op">,</span> <span class="st">&quot;Please report at https://github.com/trofi/nix-guix-gentoo/issues</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    exit<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> __unordtf2 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> __letf2 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span> <span class="dt">double</span> __multf3 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="dt">long</span> <span class="dt">double</span> __addtf3 <span class="op">(</span><span class="dt">long</span> <span class="dt">double</span> a<span class="op">,</span> <span class="dt">long</span> <span class="dt">double</span> b<span class="op">)</span> <span class="op">{</span> die<span class="op">(</span>__func__<span class="op">);</span> <span class="op">}</span></span></code></pre></div>
<p>Using this file as part of linkage process converts missing symbols from
link-time to run-time failures. <code>busybox</code> does not really use these
symbols thus it should be a safe hack.</p>
<p>That fixed <code>nix</code> build on <code>clang</code>-based profiles.</p>
<h3 id="guix-and-llvm-strip">guix and llvm-strip</h3>
<p>Having set up <code>clang</code>-based Gentoo chroot to explore the problem above
I ran the test for all the <code>::nix-guix</code> packages. And sure enough <code>guix</code>
failed to build as well. Except that this time the failure was a lot
more obscure:</p>
<pre><code># emerge -1 guix
...
bytevector-u8-ref: Argument 2 out of range: 185581</code></pre>
<p>Something very low-level broke in <code>guile</code> or it’s libraries.</p>
<p>I ignored the failure for a few months until I looked up if others
encountered the same error. And indeed someone did! They solved it by
disabling stripping of <code>guile</code>. It was a great hint: rebuilding all of
<code>dev-scheme/*</code> with <code>FEATURES="-splitdebug nostrip"</code> repaired <code>guix</code> for
me as well.</p>
<p><code>guile</code> uses <code>ELF</code> format to store it’s compiled bytecode in
<code>/usr/lib/guile/</code>:</p>
<pre><code>$ file /usr/lib64/guile/3.0/ccache/rnrs.go
/usr/lib64/guile/3.0/ccache/rnrs.go:
  ELF 64-bit LSB shared object,
  no machine,
  version 1 (embedded),
  dynamically linked,
  with debug_info,
  not stripped</code></pre>
<p>The caveat is that it’s a “no machine” ELF file as it has no native
code. As a result an attempt to strip these files can break their
internal structure if not done right. <code>binutils-strip</code> does not break
the files (probably by luck?). <code>llvm-strip</code> is not as lucky.</p>
<p>The workaround was to sprinkle around the change below all over the
<code>dev-scheme*/*</code> and <code>guix</code>:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co"># add to dev-scheme/guile-zlib</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="fu">src_install()</span> <span class="kw">{</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>       <span class="ex">default</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>       <span class="co"># Workaround llvm-strip problem of mangling guile ELF debug</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>       <span class="co"># sections: https://bugs.gentoo.org/905898</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>       <span class="ex">dostrip</span> <span class="at">-x</span> <span class="st">&quot;/usr/</span><span class="va">$(</span><span class="ex">get_libdir</span><span class="va">)</span><span class="st">/guile&quot;</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="kw">}</span></span></code></pre></div>
<p>It inhibits stripping of <code>*.go</code> files. Ideally one should not run
<code>strip</code> on object files not compatible to the default <code>strip</code> target.</p>
<p>Or <code>guile</code> could have encoded enough information for <code>llvm-strip</code> to
keep files working. Something to explore in future.</p>
<p>Disabling <code>*.go</code> stripping was enough to get <code>guix</code> running on
<code>clang</code>-based profiles.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>nix</code> and <code>guix</code> can still be used in Gentoo to play with these fancy
package managers. With static linkage and stripping workarounds those
can be used in more environments now.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Fri, 19 May 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/287-nix-and-guix-for-gentoo-in-2023.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>From irssi to weechat</title>
    <link>http://trofi.github.io/posts/286-from-irssi-to-weechat.html</link>
    <description><![CDATA[<p>I started using <code>IRC</code> in 2003, around the same time I started using
<code>linux</code>. My IRC client of choice was <code>xchat</code>. I had a lot of fun
adapting an <code>xmms</code> plugin for <code>xchat</code> that pastes currently playing
song to the current chat room.</p>
<p>Then I switched to <code>irssi</code>. Oldest <code>irssi</code> logs I could find is from
2007. Around the time I was switching to Gentoo as my main desktop
system. I used <code>irssi</code> ever since. I had a few trivial plugins
installed: <a href="https://github.com/irssi/scripts.irssi.org/blob/master/scripts/nickcolor.pl">nickcolor.pl</a>
and a few one-liners around <code>ChanServ</code> and <code>NickServ</code> integration.</p>
<p>A few weeks ago I noticed that <code>nickcolor.pl</code> plugin does not quite
work for some channels: when I open a chat tab for the first time (since
<code>irssi</code> startup) where the discussion is already ongoing all the
nicks get the same color. I spent some time debugging <code>nickcolor.pl</code>
and I did not manage to get it fixed. I rely on the colors a lot: I
frequent mix nicks together if they don’t look distinct enough.</p>
<p>Instead of spending more time with <code>irssi</code> I decided to look at the
console alternatives that implement nick coloring by default and are
more actively maintained. <a href="https://github.com/osa1/tiny">tiny</a> and
<a href="https://weechat.org/">weechat</a> looked most promising.</p>
<p><code>tiny</code> is written in <code>rust</code>, has a nice UI and has a bit too simplistic
<code>yaml</code> configuration for my needs. I also had an impression that
<a href="https://libera.chat/guides/certfp">CertFP</a> support was added in
<code>master</code> branch only and did not see a proper release yet.</p>
<p><code>weechat</code> is written in <code>C</code>, has UI very close to <code>irssi</code> and (to my
surprise) has even smaller amount of required dependencies than <code>irssi</code>.
It’s configs are <code>ini</code> files with many-many options. <code>weechat</code> provides
excellent builtin support for searching through config options.
<code>weechat</code> also has a spell checking capability via <code>aspell</code>!</p>
<p>I was a bit worried about vulnerability count on <code>weechat</code>s side, but
apparently <code>irssi</code> has very similar profile if we look at the types of
encountered bugs:</p>
<ul>
<li><a href="https://weechat.org/doc/weechat/security/">weechat security page</a></li>
<li><a href="https://irssi.org/security/">irssi security page</a></li>
</ul>
<p>I settled on <code>weechat</code>.</p>
<h2 id="weechat-config">weechat config</h2>
<p>Here is my full configuration so far:</p>
<pre><code>/server add libera irc.libera.chat/6697 -ssl -autoconnect
  /set irc.server.libera.ssl on
  /set irc.server.libera.ssl_verify on
  /set irc.server.libera.ssl_cert %h/certs/libera.pem
  /set irc.server.libera.sasl_mechanism external

  /set irc.server.libera.nicks ...
  /set irc.server.libera.username ...
  /set irc.server.libera.realname ...
  /set irc.server.libera.autojoin ...

/server add oftc irc.oftc.net/6697 -ssl -autoconnect

  /set irc.server.oftc.ssl on
  /set irc.server.oftc.ssl_verify on
  /set irc.server.oftc.ssl_cert %h/certs/oftc.pem

  /set irc.server.oftc.nicks ...
  /set irc.server.oftc.username ...
  /set irc.server.oftc.realname ...
  /set irc.server.oftc.autojoin ...

# don't notify on joins/leaves
/set weechat.look.buffer_notify_default message

# spell checking
/set spell.check.enabled on
/set spell.check.real_time on
/set spell.check.default_dict &quot;en,ru&quot;

# don't merge server messages from different servers
/set irc.look.server_buffer independent

# don't trigger upgency properties on terminal to avoid focus change
/set trigger.trigger.beep.enabled off

# avoid &quot;blue&quot;, too dark on my colorscheme
/set weechat.color.chat_nick_colors &quot;cyan,magenta,green,brown,lightblue,default,lightcyan,lightmagenta,lightgreen&quot;

# Filter most joins/quits/parts:
#   https://blog.weechat.org/post/2008/10/25/Smart-IRC-join-part-quit-message-filter
/set irc.look.smart_filter on
/filter add irc_smart * irc_smart_filter *

/save</code></pre>
<p>One special thing to note here is absence of
<code>/set irc.server.oftc.sasl_mechanism external</code> line if we compare <code>OFTC</code>
and <code>Libera</code> setups. Presence of <code>external</code> on <code>OFTC</code> causes connection
drops with message <code>irc: client capability: SASL not supported; irc: disconnected from server</code>.</p>
<h2 id="parting-words">Parting words</h2>
<p>After 16 years of <code>irssi</code> usage I don’t feel much discomfort switching
to <code>weechat</code>. Most of the keybindings are the same. The UI has slightly
more details that <code>irssi</code>’s. It felt overwhelming at first. But once I
read the <a href="https://weechat.org/files/doc/stable/weechat_quickstart.en.html">quickstart guide</a>
and <a href="https://weechat.org/files/doc/stable/weechat_user.en.html">user guide</a>
it became natural.</p>
<p>I have not yet ported any of my trivial plugins but it does not look
complicated at a first glance.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Thu, 11 May 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/286-from-irssi-to-weechat.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>Zero Hydra Failures towards 23.05 NixOS release</title>
    <link>http://trofi.github.io/posts/285-Zero-Hydra-Failures-towards-23.05-NixOS-release.html</link>
    <description><![CDATA[<h2 id="zhf">ZHF</h2>
<p>By the end of May <code>NixOS-23.05</code> will be released. Current development
phase is called Zero Hydra Failures: at this time the main focus is to
fix as many build failures in <code>nixpkgs/master</code> repository as possible.</p>
<p><a href="https://github.com/NixOS/nixpkgs/issues/230712">Issue #230712</a> tracks
the effort. It has hints on how to locate all known build failures.
So far there is a few thousands build failures in <code>nixpkgs/master</code>.</p>
<p><code>ZHF</code> is a great time to contribute to <code>nixpkgs</code>! Let’s pick a failed
package and try to fix it.</p>
<h2 id="libfsm-example">libfsm example</h2>
<p><a href="https://hydra.nixos.org/jobset/nixpkgs/trunk">trunk jobset</a> shows us
about ~2500 build failures. I’ll pick a obscure <code>libfsm</code>
<a href="https://hydra.nixos.org/log/1d8dcs7b47ibrn183yn0k7sj8ghiwich-libfsm-0.1pre2442_9c5095f7.drv">failure</a>
and will try to fix it. Full build log is reasonably short:</p>
<pre><code>unpacking sources
unpacking source archive /nix/store/bjdkwx4rpbqb2ny9wx7qs935b4nmslhv-source
source root is source
patching sources
configuring
no configure script, doing nothing
building
build flags: -j2 SHELL=/nix/store/ywi6kzrk88zl22jvazdnlfaf9rqrj2aq-bash-5.2-p15/bin/bash -r PREFIX=\$\(out\)
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for clean
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/init.mk&quot; line 90: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 93: Inconsistent operator for clean
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/init.mk&quot; line 90: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/prog.mk&quot; line 140: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake[1]: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/final.mk&quot; line 18: Inconsistent operator for install
bmake[1]: Fatal errors encountered -- cannot continue
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/srctop.mk&quot; line 60: warning: &quot;cd /build/source &amp;&amp; MAKESYSPATH=/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk bmake -V .OBJDIR&quot; returned non-zero status
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/obj.mk&quot; line 46: Malformed conditional (${MK_AUTO_OBJ} == &quot;yes&quot;)
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/dpadd.mk&quot; line 330: Malformed conditional (${.MAKE.MODE:Mmeta*} != &quot;&quot; &amp;&amp; exists(${.MAKE.DEPENDFILE}))
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/prog.mk&quot; line 140: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/subdir.mk&quot; line 102: Inconsistent operator for all
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/final.mk&quot; line 11: Malformed conditional (${MK_STAGING} == &quot;yes&quot;)
bmake: &quot;/nix/store/f488ivld88vqd3avw1p8x9lm027h60lr-bmake-20230126/share/mk/final.mk&quot; line 18: Inconsistent operator for install
bmake: Fatal errors encountered -- cannot continue
bmake: stopped in /build/source</code></pre>
<p>It’s not a big build log. And yet i’m completely clueless what goes
wrong. <a href="https://hydra.nixos.org/build/219125675">build tab</a> tells us
that last successful build of <code>libfsm</code> was around <code>2023-01-14 21:00:15</code>
on <code>3a29a0b2aa4aad61d8a80969cc8c386ad548c44c</code> <code>nixpkgs</code> input.</p>
<p>It’s enough to bisect it down to a suspicious commit. Maybe it will
provide us more clues. Bisecting <code>nixpkgs</code> using <code>$ nix build -f. libfsm</code>
as a success criteria gives us this suspect:</p>
<pre><code>commit f799d93ac179f8dd7b06d867d129fc6e7498c4fd
Date:   Sat Jan 28 23:02:19 2023 -0300

    bmake: 20220928 -&gt; 20230126

 pkgs/development/tools/build-managers/bmake/default.nix | 8 ++++----
 1 file changed, 4 insertions(+), 4 deletions(-)</code></pre>
<p>Tracing <a href="https://github.com/NixOS/nixpkgs/commit/f799d93ac179f8dd7b06d867d129fc6e7498c4fd">commit f799d93</a>
back to a PR shows us <a href="https://github.com/NixOS/nixpkgs/pull/213276">PR #213276</a> in
the web UI. There are no comments about <code>libfsm</code> breakage.</p>
<p>Looks like <code>bmake</code> changed <code>Makefile</code> rule handling and broke something.</p>
<p><a href="https://www.crufty.net/help/sjg/bmake.html">bmake home page</a> has no
changelog and suggests using version control system directly to look for
changes. Let’s run a shortlog:</p>
<pre><code>$ cd ~/dev/git/NetBSD/src
$ git shortlog 0f816dc9b17b3e254d50e477c4594fc61580e889..f6f18f84e68de4c08aedab76898ad11129ff4cdf -- usr.bin/make | cat
christos (1):
      Accept whitespace between command specifiers @+- like gmake does. New binutils does this.

rillig (28):
      make: merge duplicate code
      tests/make: make comment in test for .for easier to understand
      make: use consistent variable names in parser
      make: constify, fix comment indentation
      make.1: clean up style, typography, accuracy
      make: document the guard for directories in unlink_file
      make: change return type of unlink_file back to int
      make.1: make horizontal and vertical spacing more consistent
      tests/make: document that the ':tl' modifier does not split words
      make.1: clarify in which case an expression may omit braces
      make: inline local macro in GNodeFlags_ToString
      make: inline LazyBuf_AddBytesBetween
      make: clean up comments
      make: clean up comments
      make: don't assemble identifiers from smaller tokens
      make.1: reduce indentation of the long list of variable names
      make.1: move description of .MAKE.MODE below the .MAKE.META block
      make.1: use consistent markup for boolean flags
      make.1: sort list of built-in variables
      make.1: sync list of built-in variables with reality
      make.1: fix markup
      make.1: bump date
      make: add more details to warning 'Extra targets ignored'
      tests/make: test backslash-newline after macro expansion in command
      tests/make: add tests for whitespace in leading '@+-'
      make: inline macro for variable name
      tests/make: remove dependency on expr(1) from a test
      tests/make: rename files that are not test cases

sjg (5):
      make: .[NO]READONLY for control of read-only variables
      make: log adjustments of var.readOnly
      Add the unit tests
      make: .SYSPATH: to add dirs to sysIncPath
      make: some variables should be read-only</code></pre>
<p>It look slike the only change that could affect <code>bmake</code> behaviour is
something around read-only variables. Before investigating more let’s
try to update <code>bmake</code> first:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/tools/build-managers/bmake/default.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/tools/build-managers/bmake/default.nix</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -10,11 +10,11 @@</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a> stdenv.mkDerivation (finalAttrs: {</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>   pname = &quot;bmake&quot;;</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="st">-  version = &quot;20230126&quot;;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="va">+  version = &quot;20230414&quot;;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>   src = fetchurl {</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>     url = &quot;http://www.crufty.net/ftp/pub/sjg/${finalAttrs.pname}-${finalAttrs.version}.tar.gz&quot;;</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="st">-    hash = &quot;sha256-hk9yGFgs95Dsc7ILcQVCXLn/ozUiJUF3LwMTMGtqC8Q=&quot;;</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="va">+    hash = &quot;sha256-KcsdJqrn3p3vkr2us6rUUg6JlRzpey518LibrhuVOZ8=&quot;;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>   # Make tests work with musl</span></code></pre></div>
<p>I proposed <code>bmake</code> upate as <a href="https://github.com/NixOS/nixpkgs/pull/231027">PR #231027</a>.
Is it enough to fix <code>libfsm</code>? Trying to build:</p>
<pre><code>$ nix build -f. libfsm -L
...
libfsm&gt; bmake: &quot;/nix/store/gbbmrdcz1z7808gds3ddyf2ywi67113g-bmake-20230414/share/mk/final.mk&quot; line 11: Malformed conditional (${MK_STAGING} == &quot;yes&quot;)
libfsm&gt; bmake: &quot;/nix/store/gbbmrdcz1z7808gds3ddyf2ywi67113g-bmake-20230414/share/mk/final.mk&quot; line 18: Inconsistent operator for install
libfsm&gt; bmake: Fatal errors encountered -- cannot continue
libfsm&gt; bmake: stopped in /build/source</code></pre>
<p>No difference. Maybe <code>libfsm</code> already fixed it upstream?</p>
<p>Looking at <code>Makefile</code> <a href="https://github.com/katef/libfsm/commits/main/Makefile">project history</a>
there were a few fixes recently that fix compatibility with newer <code>bmake</code>.</p>
<p>Let’s update <code>libfsm</code> then!</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/development/libraries/libfsm/default.nix</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/development/libraries/libfsm/default.nix</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -4,13 +4,13 @@</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a> stdenv.mkDerivation rec {</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>   pname = &quot;libfsm&quot;;</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="st">-  version = &quot;0.1pre2442_${builtins.substring 0 8 src.rev}&quot;;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="va">+  version = &quot;0.1pre2987_${builtins.substring 0 8 src.rev}&quot;;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>   src = fetchFromGitHub {</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>     owner  = &quot;katef&quot;;</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>     repo   = pname;</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="st">-    rev    = &quot;9c5095f7364fa464efff6c81fad9b60b19dfcc99&quot;;</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="st">-    sha256 = &quot;1bs51agvrrwqid0slq2svj2yj7kkjdsnv3xsrk8zmf1jbgza6jrm&quot;;</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="va">+    rev    = &quot;087e3389ad2cd5e5c40caeb40387e632567d7258&quot;;</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="va">+    hash   = &quot;sha256-XWrZxnRbMB609l+sYFf8VsXy3NxqBsBPUrHgKLIyu/I=&quot;;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>     fetchSubmodules = true;</span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>   };</span></code></pre></div>
<p>Trying to use:</p>
<pre><code>$ nix build --no-link -L -f. libfsm
...
libfsm&gt; install -m 644 build/pc/libre.pc /nix/store/v33dns98gw8mw0sqvjjp1gvjcaq0p2n2-libfsm-0.1pre2987_087e3389/share/pkgconfig/libre.pc
libfsm&gt; install: cannot stat 'build/pc/libre.pc': No such file or directory
libfsm&gt; *** [install] Error code 1</code></pre>
<p>Still fails. But at least the failure looks different enough from initial
problem. Phis looks more like a missing expected file. It’s a parallel
install failure. Disabling that I got a working package with
<a href="https://github.com/NixOS/nixpkgs/pull/231029">PR #231029</a>.</p>
<p>During the review (by running <code>nix-review pr 231029</code>) I found a similar
failure in <code>kgt</code>. It is known upstream as
<a href="https://github.com/katef/kgt/issues/62">Issue #62</a>. Fixing it is left
as an exercise for the reader.</p>
<h2 id="parting-words">Parting words</h2>
<p>We squashed at least one ZHF problem and as a bonus updated one related
package. Many build fixes are trivial. If you are wondering if you
should try or not give it a go!</p>
<p>Some rare packages are broken beyond repair and are not worth keeping
around. You can mark those as <code>broken = true;</code> and those will be cleaned
up after a while if nobody steps up to fix them.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 10 May 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/285-Zero-Hydra-Failures-towards-23.05-NixOS-release.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>gcc-13 is around the corner</title>
    <link>http://trofi.github.io/posts/284-gcc-13-is-around-the-corner.html</link>
    <description><![CDATA[<p>It’s the end of April again and that means <code>gcc-13</code> will be released
very soon. Do check out <a href="https://gcc.gnu.org/gcc-13/porting_to.html">porting page</a>
to see what will likely cause problems for you on the upgrade. Most of
the issues listed there bit me over past year.</p>
<p>But that’s not the topic of this post. I kept using weekly <code>gcc</code>
snapshots of <code>master</code> branch for my desktop.</p>
<p>Since <a href="http://trofi.github.io/posts/262-a-few-more-gcc-13-bugs.html">October 2022</a> I
encountered a few new bugs. Let’s have a look at some of them.</p>
<h3 id="gori-ice">gori ICE</h3>
<p><a href="https://gcc.gnu.org/PR109274">tree-optimization/109274</a>: <code>gcc</code> <code>ICE</code>d
on <code>afdko</code>.</p>
<p>Minimal <code>afdko</code> crash:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> selfIsectPath_lo<span class="op">,</span> selfIsectPath_a<span class="op">;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> selfIsectPath_isecta<span class="op">;</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> splitBez<span class="op">(</span><span class="dt">float</span> <span class="op">*</span>a<span class="op">,</span> <span class="dt">float</span> t<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">float</span> p1 <span class="op">=</span> p1<span class="op">;</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">*</span>a <span class="op">=</span> t <span class="op">*</span> t <span class="op">-</span> p1<span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> checkSelfIsectCurve<span class="op">(</span><span class="dt">float</span> <span class="op">*</span>p2<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(*</span>p2 <span class="op">==</span> <span class="op">*</span>p2<span class="op">)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> selfIsectPath<span class="op">()</span> <span class="op">{</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  <span class="dt">float</span> hi<span class="op">;</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span>selfIsectPath_lo<span class="op">)</span> <span class="op">{</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> t <span class="op">=</span> hi <span class="op">/</span> <span class="dv">2</span><span class="op">;</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    splitBez<span class="op">(&amp;</span>selfIsectPath_a<span class="op">,</span> t<span class="op">);</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    checkSelfIsectCurve<span class="op">(&amp;</span>selfIsectPath_a<span class="op">);</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>selfIsectPath_isecta<span class="op">)</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>      hi <span class="op">=</span> t<span class="op">;</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Triggering:</p>
<pre><code>$ gcc -O3 -c absfont_path.c.c -o a.o
during GIMPLE pass: evrp
absfont_path.c.c: In function 'selfIsectPath':
absfont_path.c.c:21:1: internal compiler error: Segmentation fault
   21 | }
      | ^
0xcb7c0f crash_signal
        gcc/toplev.cc:314
0x19682c4 range_def_chain::in_chain_p(tree_node*, tree_node*)
        gcc/gimple-range-gori.cc:126
0x19682c4 gori_compute::compute_operand_range(vrange&amp;, gimple*, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:667
0x19690d7 gori_compute::compute_operand1_range(vrange&amp;, gimple_range_op_handler&amp;, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:1174
0x1968165 gori_compute::compute_operand_range(vrange&amp;, gimple*, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:726
0x19698a7 gori_compute::compute_operand2_range(vrange&amp;, gimple_range_op_handler&amp;, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:1254
0x1969cf4 gori_compute::compute_operand1_and_operand2_range(vrange&amp;, gimple_range_op_handler&amp;, vrange const&amp;, tree_node*, fur_source&amp;, value_relation*)
        gcc/gimple-range-gori.cc:1274</code></pre>
<p>This is a crash in value range propagation subsystem. It’s expected to
derive various properties from comparisons and arithmetics. For example
<code>*p2 == *p2</code> is probably always true as long as you can prove that <code>*p2</code>
is not a <code>NaN</code>. Unfortunately <code>gcc</code> did not consider specifics of <code>NaN</code>
in some places and managed to <code>SIGSEGV</code> itself.</p>
<p>Andrew explained the failure in more detail in
<a href="https://gcc.gnu.org/PR109274#c12">this comment</a>.</p>
<h2 id="miscompilation-of-byte-swapping">Miscompilation of byte swapping</h2>
<p><a href="https://gcc.gnu.org/PR108064">tree-optimization/108064</a>: <code>gcc</code>
miscompiled <code>apache-arrow-cpp</code>.</p>
<p>Minimal reproducer:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">short</span> <span class="dt">int</span> i16<span class="op">;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="kw">inline</span> i16 ByteSwap16<span class="op">(</span>i16 value<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">constexpr</span> <span class="kw">auto</span> m <span class="op">=</span> static_cast<span class="op">&lt;</span>i16<span class="op">&gt;(</span><span class="bn">0xff</span><span class="op">);</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> static_cast<span class="op">&lt;</span>i16<span class="op">&gt;(((</span>value <span class="op">&gt;&gt;</span> <span class="dv">8</span><span class="op">)</span> <span class="op">&amp;</span> m<span class="op">)</span> <span class="op">|</span> <span class="op">((</span>value <span class="op">&amp;</span> m<span class="op">)</span> <span class="op">&lt;&lt;</span> <span class="dv">8</span><span class="op">));</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noipa<span class="op">))</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> swab16<span class="op">(</span>i16 <span class="op">*</span> d<span class="op">,</span> <span class="dt">const</span> i16<span class="op">*</span> s<span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">long</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">4</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    d<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> ByteSwap16<span class="op">(</span>s<span class="op">[</span>i<span class="op">]);</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>__attribute__<span class="op">((</span>noipa<span class="op">))</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* need to alogn inputs to make sure vectized part</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co">     of the loop gets executed. */</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">alignas</span><span class="op">(</span><span class="dv">16</span><span class="op">)</span> i16 a<span class="op">[</span><span class="dv">4</span><span class="op">]</span> <span class="op">=</span> <span class="op">{</span><span class="bn">0xff</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">};</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>  <span class="kw">alignas</span><span class="op">(</span><span class="dv">16</span><span class="op">)</span> i16 b<span class="op">[</span><span class="dv">4</span><span class="op">];</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>  <span class="kw">alignas</span><span class="op">(</span><span class="dv">16</span><span class="op">)</span> i16 c<span class="op">[</span><span class="dv">4</span><span class="op">];</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>  swab16<span class="op">(</span>b<span class="op">,</span> a<span class="op">);</span></span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>  swab16<span class="op">(</span>c<span class="op">,</span> b<span class="op">);</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>  <span class="co">/* Contents of 'a' should be equivalent to 'c'.</span></span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="co">     But gcc bug generates invalid vectored shifts.  */</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>a<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">!=</span> c<span class="op">[</span><span class="dv">0</span><span class="op">])</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    __builtin_trap<span class="op">();</span></span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Triggering the bug:</p>
<pre><code>$ ./gcc-git/bin/g++ -O3 a.cc -o a &amp;&amp; ./a
Illegal instruction (core dumped)
$ ./gcc-git/bin/g++ -O0 a.cc -o a &amp;&amp; ./a</code></pre>
<p>This example takes an array of 4 16-bit integers and swaps bytes in it
twice. We expect to get the same result as original. But we get
something else.</p>
<p>It took me a while to extract it from <code>apache-arrow</code> test suite but I’m
glad I spent a bit of time on it. Note how I had to use <code>alignas(16)</code>
hints to make sure runtime address of arrays has a nice 16-byte aligned
boundary. Otherwise bug does not happen consistently. It’s a good hint
that vectorization is involved here.</p>
<p>If you have some familiarity in the <code>x86_64</code> assembler this snippet
shows mechanics of the bug:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode asm"><code class="sourceCode fasm"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">; swab16(short*, short const*):</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="bu">movq</span>   <span class="op">(%</span><span class="kw">rsi</span><span class="op">),%</span><span class="kw">xmm0</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="bu">movdqa</span> <span class="op">%</span><span class="kw">xmm0</span><span class="op">,%</span><span class="kw">xmm1</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="bu">psllw</span>  <span class="op">$</span><span class="bn">0</span>x8<span class="op">,%</span><span class="kw">xmm0</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="bu">psraw</span>  <span class="op">$</span><span class="bn">0</span>x8<span class="op">,%</span><span class="kw">xmm1</span> <span class="co">; &lt;&lt;&lt;- should be psrlw!</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="bu">por</span>    <span class="op">%</span><span class="kw">xmm1</span><span class="op">,%</span><span class="kw">xmm0</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="bu">movq</span>   <span class="op">%</span><span class="kw">xmm0</span><span class="op">,(%</span><span class="kw">rdi</span><span class="op">)</span></span></code></pre></div>
<p>If the above code does not make sense it’s explanation is:</p>
<ul>
<li>load 16 bytes of input (more than our <code>u16</code> array) into <code>xmm0</code> from
<code>rsi</code> address</li>
<li>do <code>xmm0 = ((xmm0 &lt;&lt; 8) | (xmm0 &gt;&gt; 8))</code> equivalent to achieve byte
swap</li>
<li>write 8 bytes back (exactly our <code>u16</code> array) to <code>rdi</code> address</li>
</ul>
<p>This is yet another hint at <code>gcc</code> vectorization bug where <code>swab16()</code>
loop over <code>u16</code> values was widened to loop over <code>u64</code> values.</p>
<p>The problem happens in <code>&gt;&gt;</code> where arithmetic (sign-extending) shift is
used instead of logical (zero-extending) shift.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=33be3ee36a7e2c0be383ec01b5fbc9aef39568fd">The fix</a>
is trivial: use logical shift vectorization templates of this kind.</p>
<h2 id="initializer-list-failure">initializer list failure</h2>
<p><a href="https://gcc.gnu.org/PR108071">c++/108071</a>: <code>gcc</code> failed to build
<code>clang</code>.</p>
<p>Minimal reproducer:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;initializer_list&gt;</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> OptSpecifier<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> ArrayRef <span class="op">{</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  ArrayRef<span class="op">(</span><span class="bu">std::</span>initializer_list<span class="op">&lt;</span>OptSpecifier<span class="op">&gt;);</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> OptSpecifier <span class="op">{</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">explicit</span> OptSpecifier<span class="op">(</span><span class="dt">bool</span><span class="op">);</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  OptSpecifier<span class="op">(</span><span class="dt">unsigned</span><span class="op">);</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> ArgList <span class="op">{</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> AddAllArgs<span class="op">(</span>ArrayRef<span class="op">)</span> <span class="at">const</span><span class="op">;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="kw">enum</span> <span class="op">{</span> OPT_u <span class="op">};</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Linker <span class="op">{</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="dt">void</span> ConstructJob<span class="op">(</span><span class="at">const</span> ArgList <span class="op">&amp;)</span> <span class="at">const</span><span class="op">;</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> Linker<span class="op">::</span>ConstructJob<span class="op">(</span><span class="at">const</span> ArgList <span class="op">&amp;</span>Args<span class="op">)</span> <span class="at">const</span> <span class="op">{</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>  Args<span class="op">.</span>AddAllArgs<span class="op">({</span>OPT_u<span class="op">});</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And build failure:</p>
<pre><code>$ g++ -c bug.cc.cc
bug.cc.cc: In member function 'void Linker::ConstructJob(const ArgList&amp;) const':
bug.cc.cc:19:18: error: call of overloaded 'OptSpecifier(const&lt;unnamed enum&gt;)' is ambiguous
   19 |   Args.AddAllArgs({OPT_u});
      |   ~~~~~~~~~~~~~~~^~~~~~~~~
bug.cc.cc:9:3: note: candidate: 'OptSpecifier::OptSpecifier(unsigned int)'
    9 |   OptSpecifier(unsigned);
      |   ^~~~~~~~~~~~
bug.cc.cc:8:12: note: candidate: 'OptSpecifier::OptSpecifier(bool)'
    8 |   explicit OptSpecifier(bool);
      |            ^~~~~~~~~~~~
bug.cc.cc:7:8: note: candidate: 'constexpr OptSpecifier::OptSpecifier(const OptSpecifier&amp;)'
    7 | struct OptSpecifier {
      |        ^~~~~~~~~~~~
bug.cc.cc:7:8: note: candidate: 'constexpr OptSpecifier::OptSpecifier(OptSpecifier&amp;&amp;)'</code></pre>
<p>It’s a <code>c++</code> frontend bug in handling of initializer lists. I don’t
pretend to understand <a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=4ef521bbc63f8a3883d507a8b6c1f95f442df3fe">the fix</a>.
Looks like a kind of implicit conversion handling was missing there.</p>
<h2 id="more--wdangling-reference-false-positives">More -Wdangling-reference false positives</h2>
<p><a href="https://gcc.gnu.org/PR107488">c++/107488</a>: <code>cppunit</code> exposed a false
positive in recently added <code>gcc</code> warning.</p>
<p>I <a href="http://trofi.github.io/posts/264-gcc-s-new-Wdangling-reference-warning.html">saw before</a> a
few other examples of false positives in this area. Here is another one:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> attributesAsString<span class="op">(</span><span class="bu">std::</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> <span class="op">&amp;</span> v<span class="op">)</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> attributes<span class="op">;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  <span class="bu">std::</span>vector<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;::</span>const_iterator itAttribute <span class="op">=</span> v<span class="op">.</span>begin<span class="op">();</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="cf">while</span> <span class="op">(</span> itAttribute <span class="op">!=</span> v<span class="op">.</span>end<span class="op">()</span> <span class="op">)</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> <span class="op">&amp;</span>attribute <span class="op">=</span> <span class="op">*</span>itAttribute<span class="op">++;</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    attributes <span class="op">+=</span> attribute<span class="op">;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> attributes<span class="op">;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Triggering the warning:</p>
<pre><code>$ g++ -Werror=dangling-reference -c a.cpp.cpp -o a.o
a.cpp.cpp: In function 'int attributesAsString(std::vector&lt;int&gt;&amp;)':
a.cpp.cpp:12:16: error: possibly dangling reference to a temporary [-Werror=dangling-reference]
   12 |     const int &amp;attribute = *itAttribute++;
      |                ^~~~~~~~~
a.cpp.cpp:12:40: note: the temporary was destroyed at the end of the full expression
  'itAttribute.__gnu_cxx::__normal_iterator&lt;const int*, std::vector&lt;int&gt; &gt;::operator++(0).__gnu_cxx::__normal_iterator&lt;const int*, std::vector&lt;int&gt; &gt;::operator*()'
   12 |     const int &amp;attribute = *itAttribute++;
      |                                        ^~</code></pre>
<p>It’s a reasonable code without a chance to leak something unexpected.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=32a06ce38a38bf37db468f0e6c83520fcc221534">The fix</a>
special-cased <code>operator*()</code> as not creating short-lived temporaries.</p>
<p><a href="https://gcc.gnu.org/PR109514">c++/109514</a> was a similar case in
<code>fheroes2</code> codebase.</p>
<h2 id="fanalyzer-crash-on-bind-function">-fanalyzer crash on bind() function</h2>
<p><a href="https://gcc.gnu.org/PR107783">analyzer/107783</a>: <code>gnutls</code> triggered
<code>ICE</code> in <code>-fanalyzer</code> mode.</p>
<p>This time the reproducer is tiny:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>foo <span class="op">(</span><span class="dt">void</span><span class="op">)</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> bind <span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<pre><code>$ gcc -fanalyzer -c oerlsfmf.c
during IPA pass: analyzer
oerlsfmf.c: In function 'foo':
oerlsfmf.c:4:10: internal compiler error: in deref_rvalue, at analyzer/region-model.cc:3238
    4 |   return bind (0, 0, 0);
      |          ^~~~~~~~~~~~~~</code></pre>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=12a4785c9120beeef42f1bded52cc2674e206f57">The fix</a>
corrected type annotation for <code>bind()</code> in analyzer’s model of functions
working with file descriptors.</p>
<h2 id="ice-in-implicit-type-conversions">ICE in implicit type conversions</h2>
<p><a href="https://gcc.gnu.org/PR108047">c++/108047</a>: <code>arrow-cpp</code> triggered <code>gcc</code>
<code>ICE</code>.</p>
<p>Small reproducer:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string&gt;</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;vector&gt;</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> format_underline<span class="op">(</span><span class="bu">std::</span>vector<span class="op">&lt;</span><span class="bu">std::</span>string<span class="op">&gt;);</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span><span class="op">&gt;</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> parse_key_value_pair<span class="op">(</span><span class="dt">void</span><span class="op">)</span> <span class="op">{</span> format_underline<span class="op">({</span><span class="st">&quot;&quot;</span><span class="op">});</span> <span class="op">}</span></span></code></pre></div>
<p>And the crash:</p>
<pre><code>$ g++ -c bug.cc
...
bug.cc: In function 'void parse_key_value_pair()':
bug.cc:7:51: internal compiler error:
  unexpected expression '(std::__cxx11::basic_string&lt;char&gt;)&quot;&quot;' of kind implicit_conv_expr
    7 | void parse_key_value_pair(void) { format_underline({&quot;&quot;}); }
      |                                   ~~~~~~~~~~~~~~~~^~~~~~
  diagnostic_impl(rich_location*, diagnostic_metadata const*, int, char const*, __va_list_tag (*) [1], diagnostic_t)
  internal_error(char const*, ...)
  cxx_eval_constant_expression(constexpr_ctx const*, tree_node*, value_cat, bool*, bool*, tree_node**)</code></pre>
<p>Here <code>gcc</code> could not figure out the type of constant expression in the
frontend and crashed.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=01ea66a6c56e53163d9430f4d87615d570848aa8">The fix</a>
amends it. I don’t understand it either. It has something to do with
initializer lists and templates :)</p>
<p>This was a popular failure. <code>nix</code> also <code>ICE</code>d <code>gcc</code> the same way.</p>
<h2 id="float-vectors-and-implicit-conversions">float vectors and implicit conversions</h2>
<p><a href="https://gcc.gnu.org/PR107358">c++/107358</a>: <code>gcc</code> failed to compile
<code>libjxl</code>.</p>
<p>Minimized example:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">// this works:</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> approx_scal<span class="op">(</span><span class="dt">float</span> e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> e <span class="op">-</span> <span class="fl">124.225514990</span><span class="bu">f</span><span class="op">;</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="dt">float</span> <span class="ex">__attribute__((vector_size(4*sizeof(float)))</span><span class="op">)</span> F<span class="op">;</span></span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a><span class="co">// this fails:</span></span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>F approx_vec<span class="op">(</span>F e<span class="op">)</span> <span class="op">{</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> e <span class="op">-</span> <span class="fl">124.225514990</span><span class="bu">f</span><span class="op">;</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Did you know you can do <code>operator-()</code> against <code>float</code> vectors? I did
not. The trigger looked this way:</p>
<pre><code>$ g++ -fPIC -std=c++11 -o skcms.cc.o -c skcms.cc
skcms.cc: In function 'F approx_vec(F)':
   10 | F approx_vec(F e) {
      |                 ^
skcms.cc:11:14: error: conversion of scalar 'long double' to vector 'F' {aka '__vector(4) float'} involves truncation
   11 |     return e - 124.225514990f;
      |            ~~^~~~~~~~~~~~~~~~</code></pre>
<p>Even though all the arguments are of <code>float</code> type <code>gcc</code> pulled out
<code>double</code> conversion and failed.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=65e3274e363cb2c6bfe6b5e648916eb7696f7e2f">The fix</a>
added expected precision to the typechecker frontend.</p>
<h2 id="implicit-construction-on-assignment">implicit construction on assignment</h2>
<p><a href="https://gcc.gnu.org/PR109307">c++/109247</a>: <code>gcc</code> failed to compile
<code>webkitgtk</code>.</p>
<p>Minimal example:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;optional&gt;</span></span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;variant&gt;</span></span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> RefGradient <span class="op">{};</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> RefPattern <span class="op">{};</span></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> AffineTransform <span class="op">{};</span></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> SourceBrush <span class="op">{</span></span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">public</span><span class="op">:</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Brush <span class="op">{</span></span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> LogicalGradient <span class="op">{</span></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>            RefGradient gradient<span class="op">;</span></span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>            AffineTransform spaceTransform<span class="op">;</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>variant<span class="op">&lt;</span>LogicalGradient<span class="op">,</span> RefPattern<span class="op">&gt;</span> brush<span class="op">;</span></span>
<span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span>
<span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setGradient<span class="op">(</span>RefGradient <span class="op">&amp;&amp;,</span> <span class="at">const</span> AffineTransform <span class="op">&amp;</span> spaceTransform <span class="op">=</span> <span class="op">{</span> <span class="op">});</span></span>
<span id="cb16-20"><a href="#cb16-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setPattern<span class="op">(</span>RefPattern <span class="op">&amp;&amp;);</span></span>
<span id="cb16-21"><a href="#cb16-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-22"><a href="#cb16-22" aria-hidden="true" tabindex="-1"></a>  <span class="kw">private</span><span class="op">:</span></span>
<span id="cb16-23"><a href="#cb16-23" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>optional<span class="op">&lt;</span>Brush<span class="op">&gt;</span> <span class="va">m_brush</span><span class="op">;</span></span>
<span id="cb16-24"><a href="#cb16-24" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb16-25"><a href="#cb16-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-26"><a href="#cb16-26" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> SourceBrush<span class="op">::</span>setGradient<span class="op">(</span>RefGradient<span class="op">&amp;&amp;</span> gradient<span class="op">,</span> <span class="at">const</span> AffineTransform<span class="op">&amp;</span> spaceTransform<span class="op">)</span></span>
<span id="cb16-27"><a href="#cb16-27" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-28"><a href="#cb16-28" aria-hidden="true" tabindex="-1"></a>    <span class="va">m_brush</span> <span class="op">=</span> <span class="op">{</span> Brush<span class="op">::</span>LogicalGradient <span class="op">{</span> <span class="bu">std::</span>move<span class="op">(</span>gradient<span class="op">),</span> spaceTransform <span class="op">}</span> <span class="op">};</span></span>
<span id="cb16-29"><a href="#cb16-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb16-30"><a href="#cb16-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-31"><a href="#cb16-31" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> SourceBrush<span class="op">::</span>setPattern<span class="op">(</span>RefPattern<span class="op">&amp;&amp;</span> pattern<span class="op">)</span></span>
<span id="cb16-32"><a href="#cb16-32" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb16-33"><a href="#cb16-33" aria-hidden="true" tabindex="-1"></a>    <span class="va">m_brush</span> <span class="op">=</span> <span class="op">{</span> <span class="bu">std::</span>move<span class="op">(</span>pattern<span class="op">)</span> <span class="op">};</span></span>
<span id="cb16-34"><a href="#cb16-34" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>The trigger:</p>
<pre><code>$ g++ SourceBrush.cpp -c -std=c++20
SourceBrush.cpp: In member function 'void SourceBrush::setGradient(RefGradient&amp;&amp;, const AffineTransform&amp;)':
SourceBrush.cpp:28:80: error: converting to 'std::optional&lt;SourceBrush::Brush&gt;' from initializer list would use explicit constructor 'constexpr std::optional&lt;_Tp&gt;::optional(_Up&amp;&amp;) [with _Up = SourceBrush::Brush::LogicalGradient; typename std::enable_if&lt;__and_v&lt;std::__not_&lt;std::is_same&lt;std::optional&lt;_Tp&gt;, typename std::remove_cv&lt;typename std::remove_reference&lt;_Iter&gt;::type&gt;::type&gt; &gt;, std::__not_&lt;std::is_same&lt;std::in_place_t, typename std::remove_cv&lt;typename std::remove_reference&lt;_Iter&gt;::type&gt;::type&gt; &gt;, std::is_constructible&lt;_Tp, _Up&gt;, std::__not_&lt;std::is_convertible&lt;_Up, _Tp&gt; &gt; &gt;, bool&gt;::type &lt;anonymous&gt; = false; _Tp = SourceBrush::Brush]'
   28 |     m_brush = { Brush::LogicalGradient { std::move(gradient), spaceTransform } };
      |                                                                                ^</code></pre>
<p>It’s a long but straightforward error: <code>gcc</code> stopped inferring <code>Brush</code>
outer constructor. So far the consensus that it’s not a <code>gcc-13</code> bug
but a bug in previous versions of <code>gcc</code> to accept this code.</p>
<p>The fix should look like:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/SourceBrush.cpp</span></span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/SourceBrush.cpp</span></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -50,10, +50,10</span></span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a> void SourceBrush::setGradient(RefGradient&amp;&amp; gradient, const AffineTransform&amp; spaceTransform)</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a><span class="st">-     m_brush =       { Brush::LogicalGradient { std::move(gradient), spaceTransform } };</span></span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a><span class="va">+     m_brush = Brush { Brush::LogicalGradient { std::move(gradient), spaceTransform } };</span></span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a> }</span>
<span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a> void SourceBrush::setPattern(RefPattern&amp;&amp; pattern)</span>
<span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a> {</span>
<span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a><span class="st">-     m_brush =       { std::move(pattern) };</span></span>
<span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a><span class="va">+     m_brush = Brush { std::move(pattern) };</span></span>
<span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a> }</span></code></pre></div>
<h2 id="ice-in-ipa-clone">ICE in ipa clone</h2>
<p><a href="https://gcc.gnu.org/PR108110">ipa/108110</a>: <code>gcc</code> <code>ICE</code>d on <code>minetest</code>
code.</p>
<p>The minimal example I came up with was:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> __throw_out_of_range_fmt<span class="op">(...);</span></span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> <span class="op">*</span>_M_p<span class="op">;</span></span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Trans_NS___cxx11_basic_string <span class="op">{</span></span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> _M_string_length<span class="op">;</span></span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> _M_check___pos<span class="op">;</span></span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>  Trans_NS___cxx11_basic_string<span class="op">()</span> <span class="op">{</span></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">long</span> __length <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    _M_string_length <span class="op">=</span> __length<span class="op">;</span></span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> size<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> _M_string_length<span class="op">;</span> <span class="op">}</span></span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>  <span class="dt">long</span> foo___pos<span class="op">;</span></span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>  <span class="dt">char</span> foo<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> _M_p<span class="op">[</span>foo___pos<span class="op">];</span> <span class="op">}</span></span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>  <span class="dt">int</span> compare<span class="op">()</span> <span class="op">{</span> __throw_out_of_range_fmt<span class="op">(</span>_M_check___pos<span class="op">,</span> _M_string_length<span class="op">);</span> <span class="fu">__builtin_trap</span><span class="op">();</span> <span class="op">}</span></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> str_starts_with<span class="op">(</span>Trans_NS___cxx11_basic_string <span class="op">&amp;</span>str<span class="op">,</span></span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>                     Trans_NS___cxx11_basic_string prefix<span class="op">)</span> <span class="op">{</span></span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>str<span class="op">.</span>size<span class="op">()</span> <span class="op">&lt;</span> prefix<span class="op">.</span>size<span class="op">())</span></span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>    str<span class="op">.</span>compare<span class="op">();</span></span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">for</span> <span class="op">(;</span> prefix<span class="op">.</span>size<span class="op">();)</span> <span class="op">{</span></span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">char</span> __trans_tmp_2 <span class="op">=</span> prefix<span class="op">.</span>foo<span class="op">();</span></span>
<span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>__trans_tmp_2<span class="op">)</span></span>
<span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span>
<span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span>
<span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>  <span class="fu">__builtin_trap</span><span class="op">();</span></span>
<span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span>
<span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> testStartsWith<span class="op">()</span> <span class="op">{</span></span>
<span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a>  Trans_NS___cxx11_basic_string s1<span class="op">,</span> s2<span class="op">;</span></span>
<span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a>  str_starts_with<span class="op">(</span>s1<span class="op">,</span> s2<span class="op">);</span></span>
<span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>And the trigger is:</p>
<pre><code>$ g++ -Wall -Wextra  -O3  -c bug.cc
during IPA pass: inline
bug.cc: In function 'void testStartsWith()':
bug.cc:28:18: internal compiler error: in modify_call, at ipa-param-manipulation.cc:700
   28 |   str_starts_with(s1, s2);
      |   ~~~~~~~~~~~~~~~^~~~~~~~
  diagnostic_impl(rich_location*, diagnostic_metadata const*, int, char const*, __va_list_tag (*) [1], diagnostic_t)
  internal_error(char const*, ...)
  fancy_abort(char const*, int, char const*)
  ipa_param_adjustments::modify_call(cgraph_edge*, bool) [clone .cold]
  cgraph_edge::redirect_call_stmt_to_callee(cgraph_edge*)
  redirect_all_calls(copy_body_data*, basic_block_def*)
  copy_body(copy_body_data*, basic_block_def*, basic_block_def*, basic_block_def*) [clone .isra.0]
  expand_call_inline(basic_block_def*, gimple*, copy_body_data*, bitmap_head*)
  optimize_inline_calls(tree_node*)
  inline_transform(cgraph_node*)
  execute_all_ipa_transforms(bool)
  cgraph_node::expand()
  symbol_table::compile() [clone .part.0]
  symbol_table::finalize_compilation_unit()</code></pre>
<p>Here <code>gcc</code> backtrace is very clear: optimization inlined the function
call and tried to redirect the calls to resulting function after the
inline is performed. But something went wrong.</p>
<p><a href="https://gcc.gnu.org/git/?p=gcc.git;a=commitdiff;h=c389991432da2bcc335a2b4fb7e502d28a6b3346">The fix</a>
enhances resolution of original function arguments to survive various
transformations so the replacement would be correct in all contexts.</p>
<h1 id="parting-words">Parting words</h1>
<p>Again, most of the <code>gcc</code> bugs were fixed within a week they were
introduced. It’s amazing.</p>
<p>While I encountered most of the bugs I reported only minority of them as
someone else already discovered them first.</p>
<p>Partly it was because I was updating weekly snapshots on Sunday nights
(when the snapshots are cut). While the bugs are introduced during the
week. As I don’t have much time to explore complicated <code>gcc</code> bugs on
weekdays it usually takes me the time until next weekend to look into
failures. That is almost 2 weeks of lag from introduction to report.
It’s not ideal for everyone: devs might have moved on to another problem
and brave users started encountering the bug in the wild.</p>
<p>To think of it I found handling snapshots a bit clunky to manage
short-lived backports locally until next snapshot is cut. It’s the very
same reason I never published snapshots as distribution packages myself
for other users: they are always slightly stale. Using <code>git</code> branches
is a bit easier.</p>
<p>I started using weekly <code>gcc</code> snapshots at the time (and not just <code>gcc</code>
from <code>git</code>) only because I did not know how to bootstrap my <code>NixOS</code>
system with <code>gcc</code> that needs <code>git</code> in its dependencies. A year has
passed and I know how to do it now! Let’s see if I’ll be able to catch
bugs faster as a result.</p>
<p>If you are feeling brave and you are ready to trace and report <code>gcc</code>
bugs like the above do consider giving unreleased versions of <code>gcc</code> a
try. You might learn a thing or two in the process.</p>
<p>The wrong-code bugs are the subtlest. These usually live for a while
until they get noticed. They take time to get extracted and understood.
But they are most rewarding to understand and to fix!</p>
<p><code>gcc-13</code> development is almost done. It will require quite a bit of
<code>#include &lt;cstdint&gt;</code> header sprinkling. My local system still has about
30 packages fixed pending upstream inclusion. I hope that official
<code>gcc-13</code> release will help upstream developers to adapt faster.</p>
<p>Looking at the bug list above the histogram of most failing subsystems
is:</p>
<ul>
<li><code>c++</code>: 5</li>
<li><code>tree-optimization</code>: 2</li>
<li><code>analyzer</code>: 1</li>
<li><code>ipa</code>: 1</li>
</ul>
<p>As I don’t get exposed to exotic arches nowadays it’s natural I don’t
see many bugs in their backends either. Thus <code>c++</code> frontend is by far
the most frequent to cause issues. And it certainly feels that way. That
is a good indicator that <code>C++</code> as a language still evolves substantially.</p>
<p>Overall <code>gcc-13</code> should be a smooth sailing similar to <code>gcc-12</code> (famous
last words).</p>
<p>As usual here is a list of notable changes for upcoming release:
<a href="https://gcc.gnu.org/gcc-13/changes.html" class="uri">https://gcc.gnu.org/gcc-13/changes.html</a></p>
<p>Have fun!</p>]]></description>
    <pubDate>Thu, 20 Apr 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/284-gcc-13-is-around-the-corner.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>fontconfig on 160 DPI</title>
    <link>http://trofi.github.io/posts/283-fontconfig-on-160-DPI.html</link>
    <description><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>If you got garbled fonts after a recent update of <code>nixos-unstable</code>
consider dropping <code>HiDPI</code> flag in your configuration. It is usually one
of these:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>hardware.video.hidpi.enable = <span class="cn">true</span>;</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>fonts.optimizeForVeryHighDPI = <span class="cn">true</span>;</span></code></pre></div>
<p>If you recently followed a rename from <code>hardware.video.hidpi.enable</code> to
<code>fonts.optimizeForVeryHighDPI</code> and your monitor is below 200 DPI you are
probably still affected.</p>
<p>If your device has a subpixel format more complicated that vertical or
horizontal RGB you might want to disable subpixel rendering entirely:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>fonts.fontconfig.subpixel.rgba = <span class="st">&quot;none&quot;</span>;</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>fonts.fontconfig.subpixel.lcdfilter = <span class="st">&quot;none&quot;</span>;</span></code></pre></div>
<p>If your fonts don’t contain reasonable hints for rasterization try
<code>freetype</code>’s <code>autohint</code>:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>fonts.fontconfig.hinting.autohint = <span class="cn">true</span>;</span></code></pre></div>
<h2 id="the-problem">The problem</h2>
<p>A few days ago the change landed to <code>nixpkgs</code> to disable fonts
<a href="https://github.com/NixOS/nixpkgs/commit/f03716715f663f1c45056b7df450cf1b7386181b">anti-aliasing</a>
via <code>nixpkgs</code> template for <code>fontconfig</code> configuration.</p>
<p>The change claimed that on 200+ DPI monitors anti-aliasing is not
detectable.</p>
<p>Unfortunately my monitor was a bit below 200 DPI and I noticed degraded
font quality after an upgrade.</p>
<p>My monitor has ~160 physical DPI which I configure as 192 DPI for
simplicity (exactly 2x scale of default 96 DPI). Typical <code>wayland</code>
clients like <code>firefox</code> and <code>alacritty</code> are smart enough to perform
actual rendering into unscaled (device pixel-perfect) surface using
2x of original font point size. The result is nice looking fonts.</p>
<h2 id="bogus-hidpi-setting">Bogus HiDPI setting</h2>
<p>So why am I even getting <code>HiDPI</code> setting then if I’m just below 200 DPI?
It used to work before. What changed?</p>
<p>The <code>hardware.video.hidpi.enable</code> flag in my
<code>/etc/nixos/hardware-configuration.nix</code> <code>NixOS</code> configuration came from
<code>NixOS</code> installer when I first installed the system:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># /etc/nixos/hardware-configuration.nix</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co"># Do not modify this file!  It was generated by ‘nixos-generate-config’</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co"># and may be overwritten by future invocations.  Please make changes</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co"># to /etc/nixos/configuration.nix instead.</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="va">config</span><span class="op">,</span> <span class="va">lib</span><span class="op">,</span> <span class="va">pkgs</span><span class="op">,</span> <span class="va">modulesPath</span><span class="op">,</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="co"># high-resolution display</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="va">hardware</span>.<span class="va">video</span>.<span class="va">hidpi</span>.<span class="va">enable</span> <span class="op">=</span> lib.mkDefault <span class="cn">true</span><span class="op">;</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s a small auto-generated file. The above snippet comes from this
bit of <code>perl</code> of the installer:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode perl"><code class="sourceCode perl"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co"># From nixos/modules/installer/tools/nixos-generate-config.pl</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co"># For lack of a better way to determine it, guess whether we should use a</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="co"># bigger font for the console from the display mode on the first</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="co"># framebuffer. A way based on the physical size/actual DPI reported by</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="co"># the monitor would be nice, but I don't know how to do this without X :)</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="kw">my</span> <span class="dt">$fb_modes_file</span> = <span class="ot">&quot;</span><span class="st">/sys/class/graphics/fb0/modes</span><span class="ot">&quot;</span>;</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> (<span class="ot">-f</span> <span class="dt">$fb_modes_file</span> &amp;&amp; <span class="ot">-r</span> <span class="dt">$fb_modes_file</span>) {</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">my</span> <span class="dt">$modes</span> = read_file(<span class="dt">$fb_modes_file</span>);</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">$modes</span> =~ <span class="ot">m/</span><span class="ch">([</span><span class="bn">0-9</span><span class="ch">]+)</span><span class="ot">x</span><span class="ch">([</span><span class="bn">0-9</span><span class="ch">]+)</span><span class="ot">/</span>;</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">my</span> <span class="dt">$console_width</span> = <span class="wa">$1</span>, <span class="kw">my</span> <span class="dt">$console_height</span> = <span class="wa">$2</span>;</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> (<span class="dt">$console_width</span> &gt; <span class="dv">1920</span>) {</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="fu">push</span> <span class="dt">@attrs</span>, <span class="ot">&quot;</span><span class="st"># high-resolution display</span><span class="ot">&quot;</span>;</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="fu">push</span> <span class="dt">@attrs</span>, <span class="ot">'</span><span class="ss">hardware.video.hidpi.enable = lib.mkDefault true;</span><span class="ot">'</span>;</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>}</span></code></pre></div>
<p>My system has the following value:</p>
<pre><code>$ cat /sys/class/graphics/fb0/modes
U:3840x2160p-0</code></pre>
<p>Thus <code>perl</code> snippet above triggers a <code>HiDPI</code> setting based on pixel
width. Unfortunately my physical screen width is 620mm (~24 inches).
This makes it a 160 DPI screen.</p>
<p>According to the code comment <code>HiDPI</code> was enabled mainly for font size
in the kernel console and does not say much about <code>Xorg</code> or <code>wayland</code>
clients.</p>
<p>Am I supposed to regenerate that file periodically?</p>
<p><code>man nixos-generate-config</code> says that <code>hardware-configuration.nix</code> file
does not normally gets regenerated and one has to run the script after
any hardware changes are made. I don’t remember ever doing that.</p>
<p>After numerous reports around broken fonts <code>nixos-generate-config</code> was
fixed with
<a href="https://github.com/NixOS/nixpkgs/commit/4787ebf7ae2ab071389be7ff86cf38edeee7e9f8">https://github.com/NixOS/nixpkgs/pull/222236</a>.
to stop inferring (incorrectly) that option for users.</p>
<p>Thus new users’ installs should not get <code>HiDPI</code> for hardware like mine.
Yay!</p>
<h2 id="confusing-option-rename">Confusing option rename</h2>
<p>The initial change also got the other problem: it did not suggest users to
remove the option from <code>hardware-configuration.nix</code>. It suggested to
transition it to another option: <code>fonts.optimizeForVeryHighDPI</code>.</p>
<p>It feels natural for people to mechanically switch from <code>hidpi.enable</code>
to <code>fonts.optimizeForVeryHighDPI</code> assuming they have the same semantic.
Both are about <code>HiDPI</code>, right? At least that is what I did initially :)</p>
<p>No. <code>hidpi.enable</code> used to mean <code>&gt; 1920</code> width. <code>VeryHighDPI</code> means
physical 200+ DPI. If you are lucky to get into an intersection of both
(or neither) then you will not notice the change.</p>
<h2 id="actual-effect">Actual effect</h2>
<p>Given that <code>fontconfig</code> usually reads it’s configuration at program
startup I was able run the same <code>alacritty</code> application side by side
before and after the <code>fontconfig</code> change.</p>
<figure>
<img src="http://trofi.github.io/posts.data/283-fontconfig-on-160-DPI/aa-vs-no-aa.png" alt="no anti-aliasing vs anti-aliasing" />
<figcaption aria-hidden="true">no anti-aliasing vs anti-aliasing</figcaption>
</figure>
<p>Both lines feel almost the same. Can you spot the difference? The
difference is even more visible when we zoom in a bit.</p>
<p>As original <a href="https://github.com/NixOS/nixpkgs/pull/194594">PR #194594</a>
did not contain too many details I was not sure if my system was
misconfigured or the change had a bug and unintentionally degraded my
fonts.</p>
<p>My first workaround was to flip all the <code>fontconfig</code> options back on:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode nix"><code class="sourceCode nix"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="op">{</span> <span class="op">...</span> <span class="op">}</span>:</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="co"># Fix aliasing until it's fixed in:</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">#   https://github.com/NixOS/nixpkgs/pull/194594</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">antialias</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">hinting</span>.<span class="va">enable</span> <span class="op">=</span> <span class="cn">true</span><span class="op">;</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">subpixel</span>.<span class="va">lcdfilter</span> <span class="op">=</span> <span class="st">&quot;default&quot;</span><span class="op">;</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="va">fonts</span>.<span class="va">fontconfig</span>.<span class="va">subpixel</span>.<span class="va">rgba</span> <span class="op">=</span> <span class="st">&quot;rgb&quot;</span><span class="op">;</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>That allowed me to restore previous behaviour and continue the
experiments.</p>
<p>I disabled output scaling (<code>wlr-randr --output ... --scale 1</code>) and
manually set 2x font sizes in a few <code>wayland</code> applications. Nothing
changed compared to <code>--scale 2</code> (good!). Applications generated
identical font output. Bringing font anti-aliasing back restored font
look and feel.</p>
<p>I never really knew what these knobs do. I took it as an opportunity to
explore it in a bit more detail the get the idea if I still need them
and if I can do any adjustments to them.</p>
<p>I used to use similar knobs in <code>gentoo</code> as well on 96 DPI monitor and
was a happy user. The only caveat is that I was a user of <code>Terminus</code>
font in the terminals. And that is a pixel-perfect bitmap font: it always
disables anti-aliasing and subpixel rendering. For other applications
I used default fonts and occasionally <code>Comic Sans</code>. There <code>fontconfig</code>
changes did show the difference.</p>
<p>Nowadays I use <code>Liberation Mono</code> font (<code>11.5pt</code>) in <code>alacritty</code>. And it
looked reasonable until the regression.</p>
<h2 id="freetype-algorithms">Freetype algorithms</h2>
<p>So what do these options do? I found a nice visual explanation for some
of them <a href="https://mrandri19.github.io/2019/08/08/modern-text-rendering-linux-ep2.html">here</a>:</p>
<ol type="1">
<li><code>antialias</code> uses various brightness of white to simulate smoother
curves on pixel grid. Probably the most important option to get the
smooth curves. And also the source of “blurred” effect when done
wrong.</li>
<li><code>subpixel</code> rendering exploits the fact that each LCD monitors’ pixel
consists of subpixels (pixels within pixel!) of a particular color
(<code>Red</code>, <code>Green</code>, <code>Blue</code>) which you can manipulate separately.</li>
</ol>
<p>On top of that <code>freetype</code> implements a few more algorithms:</p>
<ol start="3" type="1">
<li><code>LCD</code> filtering to restore “white” color after subpixel rendering.</li>
<li>font rasterization <code>hinting</code> to coerce fonts to fit better into pixel
grid by sacrificing rasterization correctness in favour of less blur.</li>
</ol>
<h3 id="anti-aliasing">Anti-aliasing</h3>
<p><a href="https://mrandri19.github.io/2019/08/08/modern-text-rendering-linux-ep2.html">mrandri19.github.io</a>
contains the effect of both grayscale anti-aliasing and subpixel
anti-aliasing.</p>
<p>Anti-aliasing sounds straightforward: use varying brightness to simulate
smooth boundaries. As long as you can still distinguish indiviual pixels
on the monitor you will clearly see the effect. And even if you don’t
chances are that text without anti-aliasing will look less even (jumping
letter height).</p>
<h3 id="subpixel-rendering">Subpixel rendering</h3>
<p>Sub-pixel rendering is less intuitive: it relies on the fact that each
pixel in many LCD monitors contains many distinct <code>Red</code>, <code>Green</code> and
<code>Blue</code> sections in different parts of the pixel (subpixels). There are
various subpixel patterns used for different devices.</p>
<p>The simplest of is vertical <code>RGB</code>. This topology is conveyed to
<code>freetype</code> via <code>fonts.fontconfig.subpixel.rgba = "rgb";</code> <code>NixOS</code> option.</p>
<figure>
<img src="https://geometrian.com/programming/reference/subpixelzoo/square_RGB_sm.png" alt="vertical RGB from geometrian.com" />
<figcaption aria-hidden="true">vertical RGB from geometrian.com</figcaption>
</figure>
<p>In this case use of subpixel rendering increases rendering resolution 3
times! But only in horizontal dimension (and with coloring caveats).</p>
<p>Each subpixel’s intensity is set by pixel’s <code>RGB</code> values from 0 to 256.
For example you can light only 66% of the subpixel by <code>#00FFFF</code> color. It
is magic.</p>
<p>What I did not realize is that rotating your monitor 90 degrees you will
probably slightly “break” your rendering as <code>fontconfig</code> will assume the
same vertical bars. But the rotation makes it horizontal! Ideally
configuration would have to change to <code>fonts.fontconfig.subpixel.rgba = "vrgb";</code>.</p>
<p>And having two monitors setup attached to a single machine with
different rotations makes it even more interesting.</p>
<p>This also means that lossless <code>.png</code> screenshots made on a system with
one subpixel order will be rendered differently on a system with with
another subpixel order. This means that sharing screenshots might not
be very convincing to explain the rendering degradation. But the
zoom into the picture should make things less dependent on subpixels.</p>
<p>The good news is that subpixel rendering might not be as noticeable for
120+ DPI devices. At least I did not manage to to detect my subpixel
layout using <a href="http://www.lagom.nl/lcd-test/subpixel.php" class="uri">http://www.lagom.nl/lcd-test/subpixel.php</a> on any of the
monitors I had (lowest was 100 DPI).</p>
<p>Vertical RGB subpixel layout is not the only available format.
<a href="https://geometrian.com/programming/reference/subpixelzoo/index.php" class="uri">https://geometrian.com/programming/reference/subpixelzoo/index.php</a>
lists 26 formats. Some of them are rotations. But some of them use
subpixels that overlap with multiple pixels. That makes rendering even
more interesting problem. For example on some OLED displays subpixels
are a lot more complicated: <a href="https://en.wikipedia.org/wiki/PenTile_matrix_family" class="uri">https://en.wikipedia.org/wiki/PenTile_matrix_family</a>.
<code>freetype</code>’s subpixel render as a library seems to be able to handle
some formats by specifying
<a href="https://freetype.org/freetype2/docs/reference/ft2-lcd_rendering.html">subpixel geometry</a>.</p>
<p>I’m not sure <code>fontconfig</code> allows you to specify it via <code>/etc/fonts</code>.
<a href="https://gitlab.freedesktop.org/fontconfig/fontconfig/-/issues/63">Issue #63</a>
suggests there is no support for it yet. The good news is that DPI of
those devices is usually very high and subpixel details are harder to
notice.</p>
<p>This means that if your display device has something more complicated
that a form of vertical or horizontal RGB you might want to disable
subpixel rendering entirely as will not do any good.</p>
<h3 id="lcd-filtering">LCD filtering</h3>
<p>In addition to that <code>freetype</code> also implement LCD filtering to restore
“white” color after exploiting subpixels when rendering “white” font.
LCD filter once again uses knowledge of subpixel shape to restore color
balance: <a href="https://freetype.org/freetype2/docs/reference/ft2-lcd_rendering.html" class="uri">https://freetype.org/freetype2/docs/reference/ft2-lcd_rendering.html</a>.</p>
<h3 id="font-hinting">Font hinting</h3>
<p>And the last but not least is the <a href="https://en.wikipedia.org/wiki/Font_hinting" class="uri">https://en.wikipedia.org/wiki/Font_hinting</a>
which embeds hints on how to better adjust fonts to pixel grid when
rasterized. Very old TTF fonts have hints only for 640x480 monitors and
thus look awful when those hints are followed. <code>FreeType</code> implements a
few hinting algorithms. One of them ignores font hints entirely and
constructs some reasonable form itself:
<a href="https://freetype.org/autohinting/hinter.html" class="uri">https://freetype.org/autohinting/hinter.html</a>. On <code>NixOS</code> it can be
enabled with <code>fonts.fontconfig.hinting.autohint = true;</code>.</p>
<h2 id="parting-words">Parting words</h2>
<p>Fonts are hard, exciting and fun!</p>
<p>If you got garbled fonts on <code>NixOS</code> recently then try to disable
<code>hardware.video.hidpi.enable</code> and <code>fonts.optimizeForVeryHighDPI</code>
settings if you device is under 200 physical DPI. Otherwise you might
want to explore your type of LCD screen and tweak subpixel rendering:
either disable it entirely or tweak it to match hardware.</p>
<p>Text screenshots might look differently on screens of the same size if
subpixel layout differs among them (if screen is rotated or pixel
technology leads to a different layout).</p>
<p>Having spent some time tweaking fonts for this post I decided to give
<code>Roboto Mono</code> another chance. Let’s see if it will be on par with
<code>Liberation Mono</code>.</p>
<p>While at it I also enabled <code>fonts.fontconfig.hinting.autohint = true;</code>
to see if <a href="http://freetype.org/autohinting/hinter.html">autohint</a> makes
font rendering better on fonts without explicit hints for popular pixel
sizes.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Sat, 25 Mar 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/283-fontconfig-on-160-DPI.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>parallel installs in nixpkgs</title>
    <link>http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html</link>
    <description><![CDATA[<h2 id="tldr">Tl;DR</h2>
<p>As of a few minutes ago <code>nixpkgs</code> does parallel installs for <code>Makefile</code>
based build systems using <code>make install -j$(nproc)</code>. As long as the
packages have <code>enableParallelBuilding = true;</code>.</p>
<p>Sequential packages are unchanged and still do sequential installs.</p>
<p>You can revert to previous behaviour for your packages by using
<code>enableParallelInstalling = false;</code> if needed. But better try to fix the
issues upstream.</p>
<h2 id="more-words">More words</h2>
<p><code>Makefile</code>s are <a href="http://trofi.github.io/posts/230-when-make-j-nproc-fails.html">hard</a>. I tried
enabling parallel builds by default in <code>nixpkgs</code> and
<a href="https://github.com/NixOS/nixpkgs/issues/142338">failed</a>.
The primary rejection reason was the worry that too many packages will
break and <code>nixpkgs</code> will degrade too much. I agree those problems are
not trivial to diagnose, debug and fix. We need a better way of weeding
out the issues.</p>
<p>But I did not completely give up. I still want my “parallel-by-default”
dream to come true. I added a new <a href="http://trofi.github.io/posts/238-new-make-shuffle-mode.html">make --shuffle</a>
to <code>GNU make</code> to ease reporting and validation of parallel build fixes.</p>
<p>And I’m still occasionally sending fixes for parallel build issues
upstream. I noticed others also do it time to time. That’s so nice to
see!</p>
<p>A few weeks ago my main desktop <a href="http://trofi.github.io/posts/280-cooling-failure.html">broke</a>
and I had to spend some time on my older machine that is not that fast
to compile packages. There I noticed long install phase of <code>openssl</code>
package in <code>nixpkgs</code>.</p>
<p>Quick quiz: how log do you think <code>make install</code> takes for <code>openssl</code> on
modern hardware? 1 second? 10 seconds? 1 minute? 10 minutes? 1 hour?</p>
<p>Got you your estimate?</p>
<pre><code># We can grep most recent hydra build log:
$ nix log $(nix-build -A openssl) | fgrep 'Phase completed in'

buildPhase completed in 5 minutes 0 seconds
installPhase completed in 2 minutes 9 seconds
fixupPhase completed in 41 seconds</code></pre>
<p>2 minutes! This time is comparable to the whole build phase that takes
5 minutes. Is it a lot? It really depends on what <code>installPhase</code> is
expected to do.</p>
<p>Some packages just copy one or two files into <code>$DESDIR</code>, some packages
run registration tools of sorts. It depends.</p>
<p><code>openssl</code>’s install phase builds and compresses a few hundreds of manual
pages. The tasks are expressed as <code>Makefile</code> targets and are perfect for
parallelism.</p>
<p>One could argue that these heavyweight actions belong to the build (and
not install) phase. But sometimes things are not as straightforward.</p>
<p>Apparently one of frequent examples of non-trivial install actions is
<code>libtool</code>. There binary relinking happens on installation when shared
libraries get copied (relinked!) to their final directory and binaries
are updated (also relinked!) to contain the <code>RUNPATH</code> to point to new
library location.</p>
<p>You might think that relinking phase should not take that much. But
sometimes packages consist of tens if not hundreds of libraries and
binaries. Let’s pick <code>solanum</code> <code>IRC</code> server as an example:</p>
<pre><code>$ nix log $(nix-build -A solanum) | fgrep 'Phase completed in'
configurePhase completed in 39 seconds
buildPhase completed in 1 minutes 11 seconds
installPhase completed in 1 minutes 1 seconds</code></pre>
<p>It takes almost as much time to install (and relink) the binaries as it
takes to build the package.</p>
<p>The fun thing is that both <code>openssl</code> and <code>solanum</code> use parallel builds
(<code>make -j$(pnroc)</code>) but use sequential installs! (<code>make install</code>).</p>
<p>I was very surprised to see missing parallelism in install phase. It
looked so simple to fix! If the package is already built in parallel in
<code>nixpkgs</code> then the chances are high that parallel installs would work
as well.</p>
<p>To validate the theory I passed <code>make install -j$(nproc)</code> to <code>openssl</code>
and found that the whole <code>configure / make / make install</code> process
shrunk from <code>1m54s</code> down to <code>59s</code>. It’s 2x speedup right there. Note
that <code>installPhase</code> has to have even more dramatic difference as
unchanged) build time is included into both times.</p>
<p>I quickly hacked up the <a href="https://github.com/NixOS/nixpkgs/pull/217568">PR</a>
to enable parallelism and proposed it for review.</p>
<p>Surprisingly (or not so surprisingly) not everyone was happy to see the
change. The concerns were: possible install breakages, possible
corruption on install, possibly added non-determinism, possible masking
of install-time issues by speeding install phase up.</p>
<p>To quantify the breakage concern NixOS Infra team set a one-off
<a href="https://hydra.nixos.org/jobset/nixpkgs/pr-217568-stdenv-parallel-install">pr-217568-stdenv-parallel-install</a>
hydra jobset for this change before it gets merged to any of the main
branches.</p>
<p>It <a href="https://github.com/NixOS/nixpkgs/pull/217568/commits">uncovered</a> 12
new build failures:</p>
<ul>
<li><code>net-snmp</code></li>
<li><code>xfsprogs</code></li>
<li><code>sssd</code></li>
<li><code>subversion</code></li>
<li><code>ocaml</code></li>
<li><code>eresi</code></li>
<li><code>s9fes</code></li>
<li><code>vpnc</code></li>
<li><code>asymptote</code></li>
<li><code>gretl</code></li>
<li><code>qsynth</code></li>
<li><code>solanum</code></li>
</ul>
<p>The failures are obviously parallel install failures as they failed in
<code>installPhase</code> with very obscure complains about missing files.</p>
<p>As an example <code>solanum</code> install failure is being investigated in
<a href="https://github.com/solanum-ircd/solanum/issues/405">Issue #405</a> upstream.
It’s an interesting case of <code>libtool</code>-based build system with a bunch
of recursive makefiles.</p>
<p>There are a few triggers there: source file deletion during install and
something related to unusual dependencies during install.</p>
<p>Source file deletion causes rebuild and relinking of the project during
install (ugh!).</p>
<p>Otherwise it was a very small fallout which I plugged by sprinkling
<code>enableParallelInstalling = false</code>. We might need a few more of those
workarounds as parallelism bugs sometimes take a while to surface.</p>
<h2 id="parting-words">Parting words</h2>
<p>If you suspect that package fails parallel installs in <code>nixpkgs</code> try to
add a <code>enableParallelInstalling = false;</code> as a workaround.</p>
<p><code>nixpkgs</code> made one step closer to build most packages with full
available parallelism. Packages like <code>openssl</code> already build faster in
<code>staging</code> branch of <code>nixpkgs</code>.</p>
<p>It did not take much code to enable parallel installs only for packages
that already enable parallel builds.</p>
<p>While it was a very conservative change it still broke 12 more packages.
12 is 2 orders of magnitude lower than typical amount of breakage
present in <code>master</code> (3000 to 4000 broken packages). Even if I missed a
few more cases it should be just a few cases and not thousands of new
failures.</p>
<p>If you are an upstream package owner then give parallel install a go
and try to address the install failures that arise. Here are a few hints
that might help:</p>
<ul>
<li>use <code>--shuffle</code> option for <code>GNU make 4.4</code> or later to reorder
prerequisite execution.</li>
<li>along with high parallelism also try to use low parallelism level,
like <code>-j2</code>. That gives more chance to execute only subset of
prerequisites.</li>
<li>make sure your <code>/usr/lib</code> (or other system default pah) does not
contain the libraries you are testing for relinking parallelism.
Otherwise you would not be able to reproduce the failure as relinking
will accidentally happen against the system library.</li>
</ul>
<p>It took <code>hydra</code> only 2 weeks of lowest priority to build all ~60000
<code>linux</code> packages <code>nixpkgs</code> has.</p>
<p>I have a few more thoughts on how to incrementally improve quality of
parallel builds in <code>nixpkgs</code> like enabling <code>--shuffle</code> by default.
Let’s save that for another time.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Wed, 15 Mar 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/282-parallel-installs-in-nixpkgs.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>a signal from the stars</title>
    <link>http://trofi.github.io/posts/281-a-signal-from-the-stars.html</link>
    <description><![CDATA[<h2 id="the-distress-beacon">The distress beacon</h2>
<p>A few days ago after another reboot into a new kernel I noticed that
disk led on my desktop started blinking incessantly even when my system
was idle:</p>
<figure>
<img src="http://trofi.github.io/posts.data/281-a-signal-from-the-stars/01-shimmer.gif" alt="suspicious shimmer" />
<figcaption aria-hidden="true">suspicious shimmer</figcaption>
</figure>
<p>I was not sure if it was a real thing caused by workload or a
glitch in the led. Flashing looked a bit too frequent for a machine that
does nothing. I was worried if it was trying to wear out my SSD as
quickly as possible.</p>
<h2 id="getting-the-clues">Getting the clues</h2>
<p>So I started debugging … a led /o\.</p>
<p>I closed all the applications including browser and window manager. I
ran <code>sync</code> to commit all the in-flight writes to disk. Disk led was
still flashing rapidly.</p>
<p>I ran <code>iotop -a</code>. It claimed there was no visible I/O happening. Does it
mean it’s just a led problem?</p>
<p>I tried heavyweight hammer and ran <code>perf ftrace</code> to see if kernel is
doing anything related to NVME:</p>
<pre><code># perf ftrace -a -T 'nvme*' | cat

# tracer: function
#
# entries-in-buffer/entries-written: 0/0   #P:16
#
#           TASK-PID     CPU#     TIMESTAMP  FUNCTION
#              | |         |         |         |
    kworker/6:1H-298     [006]   2569.645201: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.645205: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/6:1H-298     [006]   2569.749198: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.749202: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/6:1H-298     [006]   2569.853204: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.853209: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/6:1H-298     [006]   2569.958198: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/6:1H-298     [006]   2569.958202: nvme_setup_discard &lt;-nvme_setup_cmd</code></pre>
<p>Here we see that every 100ms kernel runs <code>nvme_setup_discard</code> function
from kernel’s <code>kworker</code> thread. These requests looked suspicious.</p>
<p>This trace was from <code>linux-6.2</code>. When I booted back to <code>linux-6.1</code> this
<code>discard</code> storm disappeared. All was quiet.</p>
<p>In case you are not familiar with SSD <code>discard</code> (or <code>trim</code>) is an
operation that gives a hint to device that a particular block of data
does not contain useful data and can be recycled for other uses.
<code>discard</code> is neither read nor write operation. That’s why <code>iotop -a</code> did
not see it.</p>
<p>Are these discards useful or harmful? Are they intentional? Why
<code>linux-6.1</code> was unaffected? No idea!</p>
<h2 id="bisecting-the-kernel">Bisecting the kernel</h2>
<p>Given that it’s seemingly a behaviour change between <code>6.1</code> and <code>6.2</code>
kernel versions I attempted to bisect the kernel.</p>
<p>Bisecting it was easy: I redirected local <code>linux</code> kernel package
definition to local <code>linux.git</code> checkout and rebuilt my system against
it.</p>
<p>Here is a diff against <code>nixpkgs</code> I used at some point:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/os-specific/linux/kernel/common-config.nix</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/os-specific/linux/kernel/common-config.nix</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -839,8 +833,6 @@ let</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>       DVB_DYNAMIC_MINORS = option yes; # we use udev</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>       EFI_STUB            = yes; # EFI bootloader in the bzImage itself</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="st">-      EFI_GENERIC_STUB_INITRD_CMDLINE_LOADER =</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="st">-          whenOlder &quot;6.2&quot; (whenAtLeast &quot;5.8&quot; yes); # initrd kernel parameter for EFI</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>       CGROUPS             = yes; # used by systemd</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>       FHANDLE             = yes; # used by systemd</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>       SECCOMP             = yes; # used by systemd &gt;= 231</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/os-specific/linux/kernel/linux-6.2.nix</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/os-specific/linux/kernel/linux-6.2.nix</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -3,7 +3,7 @@</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a> with lib;</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a> buildLinux (args // rec {</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="st">-  version = &quot;6.2&quot;;</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="va">+  version = &quot;6.1.0-rc8&quot;;</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>   # modDirVersion needs to be x.y.z, will automatically add .0 if needed</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>   modDirVersion = versions.pad 3 version;</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -11,8 +11,9 @@ buildLinux (args // rec {</span></span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>   # branchVersion needs to be x.y</span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>   extraMeta.branch = versions.majorMinor version;</span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="st">-  src = fetchurl {</span></span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="va">+  src_ = fetchurl {</span></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>     url = &quot;mirror://kernel/linux/kernel/v6.x/linux-${version}.tar.xz&quot;;</span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>     sha256 = &quot;sha256-dIYvqKtA7a6FuzOFwLcf4QMoi85RhSbWMZeACzy97LE=&quot;;</span>
<span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>   };</span>
<span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a><span class="va">+  src = builtins.fetchGit /home/slyfox/linux.git;</span></span>
<span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a> } // (args.argsOverride or { }))</span>
<span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/pkgs/top-level/linux-kernels.nix</span></span>
<span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/pkgs/top-level/linux-kernels.nix</span></span>
<span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -171,9 +171,9 @@ in {</span></span>
<span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>     linux_6_2 = callPackage ../os-specific/linux/kernel/linux-6.2.nix {</span>
<span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>       kernelPatches = [</span>
<span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a><span class="st">-        kernelPatches.bridge_stp_helper</span></span>
<span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a><span class="st">-        kernelPatches.request_key_helper</span></span>
<span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a><span class="st">-        kernelPatches.fix-em-ice-bonding</span></span>
<span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a><span class="va">+        #kernelPatches.bridge_stp_helper</span></span>
<span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a><span class="va">+        #kernelPatches.request_key_helper</span></span>
<span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a><span class="va">+        #kernelPatches.fix-em-ice-bonding</span></span>
<span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a>       ];</span>
<span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>     };</span></code></pre></div>
<p>Here I did a few things:</p>
<ul>
<li>removed explicit <code>EFI_GENERIC_STUB_INITRD_CMDLINE_LOADER</code> <code>.config</code>
setting as it disappeared somewhere between <code>6.1</code> and <code>6.2</code></li>
<li>redirected kernel source to local checkout with
<code>src = builtins.fetchGit /home/slyfox/linux.git;</code></li>
<li>dropped any backported patches as they failed to apply (and were not
relevant to storage changes)</li>
</ul>
<p>That was enough for me to build the system against that kernel with:</p>
<pre><code>$ sudo nixos-rebuild switch --impure --override-input nixpkgs .</code></pre>
<p>The minor complication was in the fact that just booting into a bad
kernel was not always enough to trigger instant <code>discard</code> storm.
Sometimes I had to run an I/O-heavy application.</p>
<p>In my case running <code>firefox</code> for 30 minutes was a solid way to trigger
the problem.</p>
<p>After a few evenings of slow bisect I ended up at
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=63a7cb13071842966c1ce931edacbc23573aada5">this commit</a>:</p>
<pre><code>$ git bisect good
63a7cb13071842966c1ce931edacbc23573aada5 is the first bad commit
commit 63a7cb13071842966c1ce931edacbc23573aada5
Author: David Sterba
Date:   Tue Jul 26 20:54:10 2022 +0200

    btrfs: auto enable discard=async when possible

    There's a request to automatically enable async discard for capable
    devices. We can do that, the async mode is designed to wait for larger
    freed extents and is not intrusive, with limits to iops, kbps or latency.

    The status and tunables will be exported in /sys/fs/btrfs/FSID/discard .

    The automatic selection is done if there's at least one discard capable
    device in the filesystem (not capable devices are skipped). Mounting
    with any other discard option will honor that option, notably mounting
    with nodiscard will keep it disabled.

    Link: https://lore.kernel.org/linux-btrfs/CAEg-Je_b1YtdsCR0zS5XZ_SbvJgN70ezwvRwLiCZgDGLbeMB=w@xxxxxxxxxxxxxx/
    Reviewed-by: Boris Burkov
    Signed-off-by: David Sterba

 fs/btrfs/ctree.h   |  1 +
 fs/btrfs/disk-io.c | 14 ++++++++++++++
 fs/btrfs/super.c   |  2 ++
 fs/btrfs/volumes.c |  3 +++
 fs/btrfs/volumes.h |  2 ++
 5 files changed, 22 insertions(+)</code></pre>
<p>It’s a seemingly benign <code>btrfs</code> change: it only enables <code>discard=async</code>
mount option by default for good enough devices. It does not change
anything about <code>btrfs</code> implementation:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">--- a/fs/btrfs/volumes.c</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">+++ b/fs/btrfs/volumes.c</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="dt">@@ -641,6 +641,9 @@ static int btrfs_open_one_device(struct btrfs_fs_devices *fs_devices,</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a> 	if (!bdev_nonrot(bdev))</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a> 		fs_devices-&gt;rotating = true;</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="va">+	if (bdev_max_discard_sectors(bdev))</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="va">+		fs_devices-&gt;discardable = true;</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="va">+</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a> 	device-&gt;bdev = bdev;</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a> 	clear_bit(BTRFS_DEV_STATE_IN_FS_METADATA, &amp;device-&gt;dev_state);</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a> 	device-&gt;mode = flags;</span></code></pre></div>
<h2 id="the-workaround">The workaround</h2>
<p>To restore previous behaviour (until we find out if it’s expected) I
added <code>"nodiscard"</code> mount option at startup and got an old behaviour on
<code>6.2</code>!</p>
<p>I also sent <a href="https://www.spinics.net/lists/linux-btrfs/msg133128.html">the question</a>
to <code>linux-btrfs@</code> ML to se if it’s an expected behaviour.</p>
<h2 id="digging-deeper">Digging deeper</h2>
<p>Now that we have a workaround let’s try to explore where these <code>discard</code>
requests come from.</p>
<p>I re-enabled <code>discard=async</code> with <code>sudo mount -oremount,discard=async /</code>
and spent some time in <code>firefox</code> to trigger the storm condition again
when disk led started flashing again.</p>
<p>I checked discards still get generated (and while at it confirmed it’s
related to <code>btrfs</code>):</p>
<pre><code>$ sudo perf ftrace -a -T '*btrfs*discard*' -T '**nvme*' | cat

  kworker/u64:10-1437018 [010]  34878.171198: btrfs_discard_update_discardable &lt;-__btrfs_add_free_space
  kworker/u64:10-1437018 [010]  34878.171198: __btrfs_discard_schedule_work &lt;-btrfs_discard_workfn
  kworker/u64:10-1437018 [010]  34878.275039: btrfs_discard_workfn &lt;-process_one_work
  kworker/u64:10-1437018 [010]  34878.275049: btrfs_discard_extent &lt;-do_trimming
  kworker/u64:10-1437018 [010]  34878.275050: btrfs_map_discard &lt;-btrfs_discard_extent
  kworker/u64:10-1437018 [010]  34878.275055: btrfs_issue_discard &lt;-btrfs_discard_extent
   kworker/11:1H-320     [011]  34878.275095: nvme_queue_rq &lt;-blk_mq_dispatch_rq_list
   kworker/11:1H-320     [011]  34878.275096: nvme_setup_cmd &lt;-nvme_queue_rq
   kworker/11:1H-320     [011]  34878.275097: nvme_setup_discard &lt;-nvme_setup_cmd
   kworker/11:1H-320     [011]  34878.275098: nvme_prep_rq.part.0 &lt;-nvme_queue_rq
          &lt;idle&gt;-0       [011]  34878.275183: nvme_irq &lt;-__handle_irq_event_percpu
          &lt;idle&gt;-0       [011]  34878.275184: nvme_pci_complete_batch &lt;-nvme_irq
          &lt;idle&gt;-0       [011]  34878.275185: nvme_unmap_data &lt;-nvme_pci_complete_batch
          &lt;idle&gt;-0       [011]  34878.275187: nvme_complete_batch_req &lt;-nvme_pci_complete_batch

  kworker/u64:10-1437018 [011]  34878.275204: btrfs_discard_update_discardable &lt;-__btrfs_add_free_space
  kworker/u64:10-1437018 [011]  34878.275204: __btrfs_discard_schedule_work &lt;-btrfs_discard_workfn
  kworker/u64:10-1437018 [000]  34878.379054: btrfs_discard_workfn &lt;-process_one_work
  kworker/u64:10-1437018 [000]  34878.379067: btrfs_discard_extent &lt;-do_trimming
  kworker/u64:10-1437018 [000]  34878.379068: btrfs_map_discard &lt;-btrfs_discard_extent
  kworker/u64:10-1437018 [000]  34878.379073: btrfs_issue_discard &lt;-btrfs_discard_extent
    kworker/1:1H-193     [001]  34878.379215: nvme_queue_rq &lt;-blk_mq_dispatch_rq_list
    kworker/1:1H-193     [001]  34878.379216: nvme_setup_cmd &lt;-nvme_queue_rq
    kworker/1:1H-193     [001]  34878.379216: nvme_setup_discard &lt;-nvme_setup_cmd
    kworker/1:1H-193     [001]  34878.379218: nvme_prep_rq.part.0 &lt;-nvme_queue_rq
          &lt;idle&gt;-0       [002]  34878.379313: nvme_irq &lt;-__handle_irq_event_percpu
          &lt;idle&gt;-0       [002]  34878.379314: nvme_pci_complete_batch &lt;-nvme_irq
          &lt;idle&gt;-0       [002]  34878.379315: nvme_unmap_data &lt;-nvme_pci_complete_batch
          &lt;idle&gt;-0       [002]  34878.379318: nvme_complete_batch_req &lt;-nvme_pci_complete_batch</code></pre>
<p>It looks like <code>btrfs</code> keeps seeing free space being returned back to the
system which triggers extent discard worker thread.</p>
<p>Ideally I would expect <code>free</code> / <code>discard</code> / <code>free</code> loop to cease at some
point. But it never does.</p>
<p>Let’s try to find where does <code>__btrfs_add_free_space</code> come from:</p>
<pre><code>$ sudo perf ftrace -a -T '__btrfs_add_free_space' | cat

   kworker/u64:1-2379115 [001]  35176.238428: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.341720: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.446448: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.550321: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.653996: __btrfs_add_free_space &lt;-do_trimming
   kworker/u64:1-2379115 [001]  35176.758335: __btrfs_add_free_space &lt;-do_trimming</code></pre>
<p>If I read it correctly it’s initiated by
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/free-space-cache.c?h=v6.2#n3630">do_trimming()</a>:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">int</span> do_trimming<span class="op">(</span><span class="kw">struct</span> btrfs_block_group <span class="op">*</span>block_group<span class="op">,</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>		       u64 <span class="op">*</span>total_trimmed<span class="op">,</span> u64 start<span class="op">,</span> u64 bytes<span class="op">,</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>		       u64 reserved_start<span class="op">,</span> u64 reserved_bytes<span class="op">,</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>		       <span class="kw">enum</span> btrfs_trim_state reserved_trim_state<span class="op">,</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>		       <span class="kw">struct</span> btrfs_trim_range <span class="op">*</span>trim_entry<span class="op">)</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_space_info <span class="op">*</span>space_info <span class="op">=</span> block_group<span class="op">-&gt;</span>space_info<span class="op">;</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_fs_info <span class="op">*</span>fs_info <span class="op">=</span> block_group<span class="op">-&gt;</span>fs_info<span class="op">;</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_free_space_ctl <span class="op">*</span>ctl <span class="op">=</span> block_group<span class="op">-&gt;</span>free_space_ctl<span class="op">;</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> ret<span class="op">;</span></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> update <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>	<span class="dt">const</span> u64 end <span class="op">=</span> start <span class="op">+</span> bytes<span class="op">;</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>	<span class="dt">const</span> u64 reserved_end <span class="op">=</span> reserved_start <span class="op">+</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>	<span class="kw">enum</span> btrfs_trim_state trim_state <span class="op">=</span> BTRFS_TRIM_STATE_UNTRIMMED<span class="op">;</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>	u64 trimmed <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>block_group<span class="op">-&gt;</span>ro<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>		block_group<span class="op">-&gt;</span>reserved <span class="op">+=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>		space_info<span class="op">-&gt;</span>bytes_reserved <span class="op">+=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>		update <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>	ret <span class="op">=</span> btrfs_discard_extent<span class="op">(</span>fs_info<span class="op">,</span> start<span class="op">,</span> bytes<span class="op">,</span> <span class="op">&amp;</span>trimmed<span class="op">);</span></span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>ret<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>		<span class="op">*</span>total_trimmed <span class="op">+=</span> trimmed<span class="op">;</span></span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>		trim_state <span class="op">=</span> BTRFS_TRIM_STATE_TRIMMED<span class="op">;</span></span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>	mutex_lock<span class="op">(&amp;</span>ctl<span class="op">-&gt;</span>cache_writeout_mutex<span class="op">);</span></span>
<span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>reserved_start <span class="op">&lt;</span> start<span class="op">)</span></span>
<span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>		__btrfs_add_free_space<span class="op">(</span>block_group<span class="op">,</span> reserved_start<span class="op">,</span></span>
<span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a>				       start <span class="op">-</span> reserved_start<span class="op">,</span></span>
<span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a>				       reserved_trim_state<span class="op">);</span></span>
<span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>start <span class="op">+</span> bytes <span class="op">&lt;</span> reserved_start <span class="op">+</span> reserved_bytes<span class="op">)</span></span>
<span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a>		__btrfs_add_free_space<span class="op">(</span>block_group<span class="op">,</span> end<span class="op">,</span> reserved_end <span class="op">-</span> end<span class="op">,</span></span>
<span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a>				       reserved_trim_state<span class="op">);</span></span>
<span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a>	__btrfs_add_free_space<span class="op">(</span>block_group<span class="op">,</span> start<span class="op">,</span> bytes<span class="op">,</span> trim_state<span class="op">);</span></span>
<span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a>	list_del<span class="op">(&amp;</span>trim_entry<span class="op">-&gt;</span>list<span class="op">);</span></span>
<span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a>	mutex_unlock<span class="op">(&amp;</span>ctl<span class="op">-&gt;</span>cache_writeout_mutex<span class="op">);</span></span>
<span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>update<span class="op">)</span> <span class="op">{</span></span>
<span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a>		spin_lock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-47"><a href="#cb8-47" aria-hidden="true" tabindex="-1"></a>		spin_lock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-48"><a href="#cb8-48" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">-&gt;</span>ro<span class="op">)</span></span>
<span id="cb8-49"><a href="#cb8-49" aria-hidden="true" tabindex="-1"></a>			space_info<span class="op">-&gt;</span>bytes_readonly <span class="op">+=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-50"><a href="#cb8-50" aria-hidden="true" tabindex="-1"></a>		block_group<span class="op">-&gt;</span>reserved <span class="op">-=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-51"><a href="#cb8-51" aria-hidden="true" tabindex="-1"></a>		space_info<span class="op">-&gt;</span>bytes_reserved <span class="op">-=</span> reserved_bytes<span class="op">;</span></span>
<span id="cb8-52"><a href="#cb8-52" aria-hidden="true" tabindex="-1"></a>		spin_unlock<span class="op">(&amp;</span>block_group<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-53"><a href="#cb8-53" aria-hidden="true" tabindex="-1"></a>		spin_unlock<span class="op">(&amp;</span>space_info<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb8-54"><a href="#cb8-54" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb8-55"><a href="#cb8-55" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-56"><a href="#cb8-56" aria-hidden="true" tabindex="-1"></a>	<span class="cf">return</span> ret<span class="op">;</span></span>
<span id="cb8-57"><a href="#cb8-57" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>It’s a long function, but not too complicated:</p>
<ul>
<li>block groups are ~256MB chunk of bytes on disk that contains various
items</li>
<li>there are 3 types of block groups: <code>DATA</code> (user’s bytes), <code>MEATADATA</code>
(file system metadata) and <code>SYSTEM</code> (tiny amount of metadata that
spans multiple devices).</li>
<li><code>btrfs</code> tracks two ranges per block group: used range and reserved
range.</li>
<li><code>btrfs</code> uses
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/extent-tree.c?h=v6.2#n1319">btrfs_discard_extent()</a>
to mark extent as freed.</li>
<li><code>btrfs</code> uses
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/free-space-cache.c?h=v6.2#n2609">__btrfs_add_free_space()</a> to cache free space
info on disk.</li>
</ul>
<p>Let’s repeat the exercise of chasing what initiates the trim to see if
this thing some sort of internal cycle:</p>
<pre><code>$ sudo perf ftrace -a -T 'do_trimming' | head -n 10 | tail -n 1
   kworker/u64:7-2381087 [009]  36596.861571: do_trimming &lt;-trim_no_bitmap

$ sudo perf ftrace -a -T 'trim_no_bitmap' | head -n 10 | tail -n 1
   kworker/u64:6-2379320 [015]  36627.125062: trim_no_bitmap &lt;-btrfs_trim_block_group_extents

   kworker/u64:2-2379316 [010]  36650.500676: btrfs_trim_block_group_extents &lt;-btrfs_discard_workfn
   worker/u64:2-2379316 [005]  36676.812243: btrfs_discard_workfn &lt;-process_one_work
   worker/6:1-2382788 [006]  36709.360688: process_one_work &lt;-worker_thread</code></pre>
<p>We hit a dead end: <code>worker_thread()</code> pulls in work items from somewhere
and processes them. Let’s find what queues those up!</p>
<p><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c?h=v6.2#n446">btrfs_discard_workfn()</a>
definition is also not too complicated:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">/*</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="co"> * Discard work queue callback</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co"> *</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="co"> * @work: work</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="co"> *</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="co"> * Find the next block_group to start discarding and then discard a single</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a><span class="co"> * region.  It does this in a two-pass fashion: first extents and second</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a><span class="co"> * bitmaps.  Completely discarded block groups are sent to the unused_bgs path.</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="co"> */</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> btrfs_discard_workfn<span class="op">(</span><span class="kw">struct</span> work_struct <span class="op">*</span>work<span class="op">)</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_discard_ctl <span class="op">*</span>discard_ctl<span class="op">;</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_block_group <span class="op">*</span>block_group<span class="op">;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>	<span class="kw">enum</span> btrfs_discard_state discard_state<span class="op">;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>	<span class="dt">int</span> discard_index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>	u64 trimmed <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>	u64 minlen <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>	u64 now <span class="op">=</span> ktime_get_ns<span class="op">();</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>	discard_ctl <span class="op">=</span> container_of<span class="op">(</span>work<span class="op">,</span> <span class="kw">struct</span> btrfs_discard_ctl<span class="op">,</span> work<span class="op">.</span>work<span class="op">);</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>	block_group <span class="op">=</span> peek_discard_list<span class="op">(</span>discard_ctl<span class="op">,</span> <span class="op">&amp;</span>discard_state<span class="op">,</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>					<span class="op">&amp;</span>discard_index<span class="op">,</span> now<span class="op">);</span></span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>block_group <span class="op">||</span> <span class="op">!</span>btrfs_run_discard_work<span class="op">(</span>discard_ctl<span class="op">))</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>now <span class="op">&lt;</span> block_group<span class="op">-&gt;</span>discard_eligible_time<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>		btrfs_discard_schedule_work<span class="op">(</span>discard_ctl<span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>	<span class="co">/* Perform discarding */</span></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>	minlen <span class="op">=</span> discard_minlen<span class="op">[</span>discard_index<span class="op">];</span></span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discard_state <span class="op">==</span> BTRFS_DISCARD_BITMAPS<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a>		u64 maxlen <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a>		<span class="co">/*</span></span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a><span class="co">		 * Use the previous levels minimum discard length as the max</span></span>
<span id="cb10-39"><a href="#cb10-39" aria-hidden="true" tabindex="-1"></a><span class="co">		 * length filter.  In the case something is added to make a</span></span>
<span id="cb10-40"><a href="#cb10-40" aria-hidden="true" tabindex="-1"></a><span class="co">		 * region go beyond the max filter, the entire bitmap is set</span></span>
<span id="cb10-41"><a href="#cb10-41" aria-hidden="true" tabindex="-1"></a><span class="co">		 * back to BTRFS_TRIM_STATE_UNTRIMMED.</span></span>
<span id="cb10-42"><a href="#cb10-42" aria-hidden="true" tabindex="-1"></a><span class="co">		 */</span></span>
<span id="cb10-43"><a href="#cb10-43" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>discard_index <span class="op">!=</span> BTRFS_DISCARD_INDEX_UNUSED<span class="op">)</span></span>
<span id="cb10-44"><a href="#cb10-44" aria-hidden="true" tabindex="-1"></a>			maxlen <span class="op">=</span> discard_minlen<span class="op">[</span>discard_index <span class="op">-</span> <span class="dv">1</span><span class="op">];</span></span>
<span id="cb10-45"><a href="#cb10-45" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-46"><a href="#cb10-46" aria-hidden="true" tabindex="-1"></a>		btrfs_trim_block_group_bitmaps<span class="op">(</span>block_group<span class="op">,</span> <span class="op">&amp;</span>trimmed<span class="op">,</span></span>
<span id="cb10-47"><a href="#cb10-47" aria-hidden="true" tabindex="-1"></a>				       block_group<span class="op">-&gt;</span>discard_cursor<span class="op">,</span></span>
<span id="cb10-48"><a href="#cb10-48" aria-hidden="true" tabindex="-1"></a>				       btrfs_block_group_end<span class="op">(</span>block_group<span class="op">),</span></span>
<span id="cb10-49"><a href="#cb10-49" aria-hidden="true" tabindex="-1"></a>				       minlen<span class="op">,</span> maxlen<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span>
<span id="cb10-50"><a href="#cb10-50" aria-hidden="true" tabindex="-1"></a>		discard_ctl<span class="op">-&gt;</span>discard_bitmap_bytes <span class="op">+=</span> trimmed<span class="op">;</span></span>
<span id="cb10-51"><a href="#cb10-51" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb10-52"><a href="#cb10-52" aria-hidden="true" tabindex="-1"></a>		btrfs_trim_block_group_extents<span class="op">(</span>block_group<span class="op">,</span> <span class="op">&amp;</span>trimmed<span class="op">,</span></span>
<span id="cb10-53"><a href="#cb10-53" aria-hidden="true" tabindex="-1"></a>				       block_group<span class="op">-&gt;</span>discard_cursor<span class="op">,</span></span>
<span id="cb10-54"><a href="#cb10-54" aria-hidden="true" tabindex="-1"></a>				       btrfs_block_group_end<span class="op">(</span>block_group<span class="op">),</span></span>
<span id="cb10-55"><a href="#cb10-55" aria-hidden="true" tabindex="-1"></a>				       minlen<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span>
<span id="cb10-56"><a href="#cb10-56" aria-hidden="true" tabindex="-1"></a>		discard_ctl<span class="op">-&gt;</span>discard_extent_bytes <span class="op">+=</span> trimmed<span class="op">;</span></span>
<span id="cb10-57"><a href="#cb10-57" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb10-58"><a href="#cb10-58" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-59"><a href="#cb10-59" aria-hidden="true" tabindex="-1"></a>	<span class="co">/* Determine next steps for a block_group */</span></span>
<span id="cb10-60"><a href="#cb10-60" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">-&gt;</span>discard_cursor <span class="op">&gt;=</span> btrfs_block_group_end<span class="op">(</span>block_group<span class="op">))</span> <span class="op">{</span></span>
<span id="cb10-61"><a href="#cb10-61" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>discard_state <span class="op">==</span> BTRFS_DISCARD_BITMAPS<span class="op">)</span> <span class="op">{</span></span>
<span id="cb10-62"><a href="#cb10-62" aria-hidden="true" tabindex="-1"></a>			btrfs_finish_discard_pass<span class="op">(</span>discard_ctl<span class="op">,</span> block_group<span class="op">);</span></span>
<span id="cb10-63"><a href="#cb10-63" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span> <span class="cf">else</span> <span class="op">{</span></span>
<span id="cb10-64"><a href="#cb10-64" aria-hidden="true" tabindex="-1"></a>			block_group<span class="op">-&gt;</span>discard_cursor <span class="op">=</span> block_group<span class="op">-&gt;</span>start<span class="op">;</span></span>
<span id="cb10-65"><a href="#cb10-65" aria-hidden="true" tabindex="-1"></a>			spin_lock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-66"><a href="#cb10-66" aria-hidden="true" tabindex="-1"></a>			<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">-&gt;</span>discard_state <span class="op">!=</span></span>
<span id="cb10-67"><a href="#cb10-67" aria-hidden="true" tabindex="-1"></a>			    BTRFS_DISCARD_RESET_CURSOR<span class="op">)</span></span>
<span id="cb10-68"><a href="#cb10-68" aria-hidden="true" tabindex="-1"></a>				block_group<span class="op">-&gt;</span>discard_state <span class="op">=</span></span>
<span id="cb10-69"><a href="#cb10-69" aria-hidden="true" tabindex="-1"></a>							BTRFS_DISCARD_BITMAPS<span class="op">;</span></span>
<span id="cb10-70"><a href="#cb10-70" aria-hidden="true" tabindex="-1"></a>			spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-71"><a href="#cb10-71" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb10-72"><a href="#cb10-72" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb10-73"><a href="#cb10-73" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-74"><a href="#cb10-74" aria-hidden="true" tabindex="-1"></a>	now <span class="op">=</span> ktime_get_ns<span class="op">();</span></span>
<span id="cb10-75"><a href="#cb10-75" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-76"><a href="#cb10-76" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>prev_discard <span class="op">=</span> trimmed<span class="op">;</span></span>
<span id="cb10-77"><a href="#cb10-77" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>prev_discard_time <span class="op">=</span> now<span class="op">;</span></span>
<span id="cb10-78"><a href="#cb10-78" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>block_group <span class="op">=</span> NULL<span class="op">;</span></span>
<span id="cb10-79"><a href="#cb10-79" aria-hidden="true" tabindex="-1"></a>	__btrfs_discard_schedule_work<span class="op">(</span>discard_ctl<span class="op">,</span> now<span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span>
<span id="cb10-80"><a href="#cb10-80" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb10-81"><a href="#cb10-81" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Here worker thread expects items of <code>struct btrfs_discard_ctl</code> type to
process. Scrolling the file around
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c?h=v6.2#n324">btrfs_discard_queue_work()</a>
seems to be most plausible candidate we are looking for:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="dt">static</span> <span class="dt">void</span> __btrfs_discard_schedule_work<span class="op">(</span><span class="kw">struct</span> btrfs_discard_ctl <span class="op">*</span>discard_ctl<span class="op">,</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>					  u64 now<span class="op">,</span> <span class="dt">bool</span> override<span class="op">)</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>	<span class="kw">struct</span> btrfs_block_group <span class="op">*</span>block_group<span class="op">;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>btrfs_run_discard_work<span class="op">(</span>discard_ctl<span class="op">))</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>override <span class="op">&amp;&amp;</span> delayed_work_pending<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>work<span class="op">))</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>	block_group <span class="op">=</span> find_next_block_group<span class="op">(</span>discard_ctl<span class="op">,</span> now<span class="op">);</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>block_group<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>		u64 delay <span class="op">=</span> discard_ctl<span class="op">-&gt;</span>delay_ms <span class="op">*</span> NSEC_PER_MSEC<span class="op">;</span></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>		u32 kbps_limit <span class="op">=</span> READ_ONCE<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>kbps_limit<span class="op">);</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>		<span class="co">/*</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a><span class="co">		 * A single delayed workqueue item is responsible for</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a><span class="co">		 * discarding, so we can manage the bytes rate limit by keeping</span></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="co">		 * track of the previous discard.</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a><span class="co">		 */</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>kbps_limit <span class="op">&amp;&amp;</span> discard_ctl<span class="op">-&gt;</span>prev_discard<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>			u64 bps_limit <span class="op">=</span> <span class="op">((</span>u64<span class="op">)</span>kbps_limit<span class="op">)</span> <span class="op">*</span> SZ_1K<span class="op">;</span></span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>			u64 bps_delay <span class="op">=</span> div64_u64<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>prev_discard <span class="op">*</span></span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>						  NSEC_PER_SEC<span class="op">,</span> bps_limit<span class="op">);</span></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>			delay <span class="op">=</span> max<span class="op">(</span>delay<span class="op">,</span> bps_delay<span class="op">);</span></span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb11-28"><a href="#cb11-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-29"><a href="#cb11-29" aria-hidden="true" tabindex="-1"></a>		<span class="co">/*</span></span>
<span id="cb11-30"><a href="#cb11-30" aria-hidden="true" tabindex="-1"></a><span class="co">		 * This timeout is to hopefully prevent immediate discarding</span></span>
<span id="cb11-31"><a href="#cb11-31" aria-hidden="true" tabindex="-1"></a><span class="co">		 * in a recently allocated block group.</span></span>
<span id="cb11-32"><a href="#cb11-32" aria-hidden="true" tabindex="-1"></a><span class="co">		 */</span></span>
<span id="cb11-33"><a href="#cb11-33" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>now <span class="op">&lt;</span> block_group<span class="op">-&gt;</span>discard_eligible_time<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-34"><a href="#cb11-34" aria-hidden="true" tabindex="-1"></a>			u64 bg_timeout <span class="op">=</span> block_group<span class="op">-&gt;</span>discard_eligible_time <span class="op">-</span> now<span class="op">;</span></span>
<span id="cb11-35"><a href="#cb11-35" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-36"><a href="#cb11-36" aria-hidden="true" tabindex="-1"></a>			delay <span class="op">=</span> max<span class="op">(</span>delay<span class="op">,</span> bg_timeout<span class="op">);</span></span>
<span id="cb11-37"><a href="#cb11-37" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb11-38"><a href="#cb11-38" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-39"><a href="#cb11-39" aria-hidden="true" tabindex="-1"></a>		<span class="cf">if</span> <span class="op">(</span>override <span class="op">&amp;&amp;</span> discard_ctl<span class="op">-&gt;</span>prev_discard<span class="op">)</span> <span class="op">{</span></span>
<span id="cb11-40"><a href="#cb11-40" aria-hidden="true" tabindex="-1"></a>			u64 elapsed <span class="op">=</span> now <span class="op">-</span> discard_ctl<span class="op">-&gt;</span>prev_discard_time<span class="op">;</span></span>
<span id="cb11-41"><a href="#cb11-41" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-42"><a href="#cb11-42" aria-hidden="true" tabindex="-1"></a>			<span class="cf">if</span> <span class="op">(</span>delay <span class="op">&gt;</span> elapsed<span class="op">)</span></span>
<span id="cb11-43"><a href="#cb11-43" aria-hidden="true" tabindex="-1"></a>				delay <span class="op">-=</span> elapsed<span class="op">;</span></span>
<span id="cb11-44"><a href="#cb11-44" aria-hidden="true" tabindex="-1"></a>			<span class="cf">else</span></span>
<span id="cb11-45"><a href="#cb11-45" aria-hidden="true" tabindex="-1"></a>				delay <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span>
<span id="cb11-46"><a href="#cb11-46" aria-hidden="true" tabindex="-1"></a>		<span class="op">}</span></span>
<span id="cb11-47"><a href="#cb11-47" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-48"><a href="#cb11-48" aria-hidden="true" tabindex="-1"></a>		mod_delayed_work<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>discard_workers<span class="op">,</span></span>
<span id="cb11-49"><a href="#cb11-49" aria-hidden="true" tabindex="-1"></a>				 <span class="op">&amp;</span>discard_ctl<span class="op">-&gt;</span>work<span class="op">,</span> nsecs_to_jiffies<span class="op">(</span>delay<span class="op">));</span></span>
<span id="cb11-50"><a href="#cb11-50" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb11-51"><a href="#cb11-51" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Note that this handler does not execute the discard requests as soon as
possible! It has has at least one rate limiter based on
<code>discard_ctl-&gt;kbps_limit</code>.</p>
<p>And there are even more rate limiters defined by
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c?h=v6.2#n545">btrfs_discard_calc_delay()</a></p>
<div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> btrfs_discard_calc_delay<span class="op">(</span><span class="kw">struct</span> btrfs_discard_ctl <span class="op">*</span>discard_ctl<span class="op">)</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>	s32 discardable_extents<span class="op">;</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>	s64 discardable_bytes<span class="op">;</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>	u32 iops_limit<span class="op">;</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>	<span class="dt">unsigned</span> <span class="dt">long</span> delay<span class="op">;</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>	discardable_extents <span class="op">=</span> atomic_read<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_extents<span class="op">);</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(!</span>discardable_extents<span class="op">)</span></span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>	spin_lock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>	<span class="co">/*</span></span>
<span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a><span class="co">	 * The following is to fix a potential -1 discrepancy that we're not</span></span>
<span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a><span class="co">	 * sure how to reproduce. But given that this is the only place that</span></span>
<span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a><span class="co">	 * utilizes these numbers and this is only called by from</span></span>
<span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a><span class="co">	 * btrfs_finish_extent_commit() which is synchronized, we can correct</span></span>
<span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a><span class="co">	 * here.</span></span>
<span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a><span class="co">	 */</span></span>
<span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discardable_extents <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>		atomic_add<span class="op">(-</span>discardable_extents<span class="op">,</span></span>
<span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>			   <span class="op">&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_extents<span class="op">);</span></span>
<span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>	discardable_bytes <span class="op">=</span> atomic64_read<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_bytes<span class="op">);</span></span>
<span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discardable_bytes <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span>
<span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a>		atomic64_add<span class="op">(-</span>discardable_bytes<span class="op">,</span></span>
<span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a>			     <span class="op">&amp;</span>discard_ctl<span class="op">-&gt;</span>discardable_bytes<span class="op">);</span></span>
<span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-30"><a href="#cb12-30" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>discardable_extents <span class="op">&lt;=</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span>
<span id="cb12-31"><a href="#cb12-31" aria-hidden="true" tabindex="-1"></a>		spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb12-32"><a href="#cb12-32" aria-hidden="true" tabindex="-1"></a>		<span class="cf">return</span><span class="op">;</span></span>
<span id="cb12-33"><a href="#cb12-33" aria-hidden="true" tabindex="-1"></a>	<span class="op">}</span></span>
<span id="cb12-34"><a href="#cb12-34" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-35"><a href="#cb12-35" aria-hidden="true" tabindex="-1"></a>	iops_limit <span class="op">=</span> READ_ONCE<span class="op">(</span>discard_ctl<span class="op">-&gt;</span>iops_limit<span class="op">);</span></span>
<span id="cb12-36"><a href="#cb12-36" aria-hidden="true" tabindex="-1"></a>	<span class="cf">if</span> <span class="op">(</span>iops_limit<span class="op">)</span></span>
<span id="cb12-37"><a href="#cb12-37" aria-hidden="true" tabindex="-1"></a>		delay <span class="op">=</span> MSEC_PER_SEC <span class="op">/</span> iops_limit<span class="op">;</span></span>
<span id="cb12-38"><a href="#cb12-38" aria-hidden="true" tabindex="-1"></a>	<span class="cf">else</span></span>
<span id="cb12-39"><a href="#cb12-39" aria-hidden="true" tabindex="-1"></a>		delay <span class="op">=</span> BTRFS_DISCARD_TARGET_MSEC <span class="op">/</span> discardable_extents<span class="op">;</span></span>
<span id="cb12-40"><a href="#cb12-40" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-41"><a href="#cb12-41" aria-hidden="true" tabindex="-1"></a>	delay <span class="op">=</span> clamp<span class="op">(</span>delay<span class="op">,</span> BTRFS_DISCARD_MIN_DELAY_MSEC<span class="op">,</span></span>
<span id="cb12-42"><a href="#cb12-42" aria-hidden="true" tabindex="-1"></a>		      BTRFS_DISCARD_MAX_DELAY_MSEC<span class="op">);</span></span>
<span id="cb12-43"><a href="#cb12-43" aria-hidden="true" tabindex="-1"></a>	discard_ctl<span class="op">-&gt;</span>delay_ms <span class="op">=</span> delay<span class="op">;</span></span>
<span id="cb12-44"><a href="#cb12-44" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-45"><a href="#cb12-45" aria-hidden="true" tabindex="-1"></a>	spin_unlock<span class="op">(&amp;</span>discard_ctl<span class="op">-&gt;</span>lock<span class="op">);</span></span>
<span id="cb12-46"><a href="#cb12-46" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>Thus here are rate limits we see:</p>
<ul>
<li><code>discard_ctl-&gt;kbps_limit</code>: discard bytes/sec rate limit</li>
<li><code>discard_ctl-&gt;iops_limit</code>: discard requests/sec rate limit</li>
<li><code>BTRFS_DISCARD_MIN_DELAY_MSEC=1ms</code> to <code>BTRFS_DISCARD_MAX_DELAY_MSEC=1s</code>:
allowed delay range between discards</li>
</ul>
<p>Some of these we can inspect and change at runtime:</p>
<pre><code>$ cd /sys/fs/btrfs/&lt;UUID&gt;/discard
$ for f in *; do echo -ne &quot;$f:\t&quot;; cat $f; done

discard_bitmap_bytes:   98213888
discard_bytes_saved:    27716325376
discard_extent_bytes:   38577287168
discardable_bytes:      19484499968
discardable_extents:    228442
iops_limit:     10
kbps_limit:     0
max_discard_size:       67108864</code></pre>
<p>I’m not sure I believe <code>discardable_bytes=19484499968</code> value. This is
supposed to be a discard backlog queued but I’m skeptical. It never goes
down to zero. Looks more like broken accounting. What is worse this
(invalid) value is being used to calculate latency of a next request.</p>
<h2 id="discard-requests-timing-patterns">Discard requests timing patterns</h2>
<p>So, it looks like 10 discards/sec are expected default on <code>linux-6.2</code>.
Let’s find the source of those discards. Looking at
<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/fs/btrfs/discard.c">discard.c</a>
these functions looked plausible:</p>
<pre><code>$ sudo perf ftrace -a -T 'btrfs_discard_workfn' -T 'btrfs_issue_discard' -T 'btrfs_discard_queue_work'
btrfs-transacti-407     [011]  42800.424027: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
btrfs-transacti-407     [011]  42800.424070: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
...
btrfs-transacti-407     [011]  42800.425053: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
btrfs-transacti-407     [011]  42800.425055: btrfs_discard_queue_work &lt;-__btrfs_add_free_space</code></pre>
<p>I saw 193 entries of <code>btrfs_discard_queue_work</code> above. It took 1ms to
enqueue all of the work into the work queue. Very quick and not too
large. Right after it we see actual discards being sent to the device:</p>
<pre><code>kworker/u64:1-2379115 [000]  42800.487010: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:1-2379115 [000]  42800.487028: btrfs_issue_discard &lt;-btrfs_discard_extent
kworker/u64:1-2379115 [005]  42800.594010: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:1-2379115 [005]  42800.594031: btrfs_issue_discard &lt;-btrfs_discard_extent
...
kworker/u64:15-2396822 [007]  42830.441487: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:15-2396822 [007]  42830.441502: btrfs_issue_discard &lt;-btrfs_discard_extent
kworker/u64:15-2396822 [000]  42830.546497: btrfs_discard_workfn &lt;-process_one_work
kworker/u64:15-2396822 [000]  42830.546524: btrfs_issue_discard &lt;-btrfs_discard_extent</code></pre>
<p>286 pairs of <code>btrfs_discard_workfn</code> / <code>btrfs_issue_discard</code>.
Each pair takes 100ms to process, which seems to match <code>iops_limit=10</code>.</p>
<p>And 30s is also a <code>btrfs</code> commit interval where the next batch of
discard work gets landed:</p>
<pre><code>btrfs-transacti-407     [002]  42830.634216: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
btrfs-transacti-407     [002]  42830.634228: btrfs_discard_queue_work &lt;-__btrfs_add_free_space
...</code></pre>
<p>That means I can get about 300 discards per second max. Also, given that
discards were being sent over full span of 30s I think that work queue
was not exhausted and there still was backlog in the queue.</p>
<p>I think <code>discardable_bytes</code> / <code>discardable_extents</code> is the backlog
metric, but I’m not sure as it never gets down to zero.</p>
<h2 id="another-workaround">Another workaround</h2>
<p>Now it’s clear we can manipulate the pace by changing the delay between
discards. To speed up the discard pace we can drop IO limit with:</p>
<pre><code># echo 10000 &gt; /sys/fs/btrfs/&lt;UUID&gt;/discard/iops_limit</code></pre>
<p>That allows getting rid of discard backlog. But I don’t know if it’s a
reasonable fix or it’s better to keep discards be delayed for a while.</p>
<h2 id="parting-words">Parting words</h2>
<p><code>btrfs</code> uses <code>discard</code> to mark extents as free for an underlying device.</p>
<p><code>linux-6.2</code> enabled automatic async discard for <code>btrfs</code> on appropriate
SSD devices. This manifests as a constant device activity if you have
any reasonable amount of IO on your device (even trivial super block
commits are enough).</p>
<p>Default async discard rate limits <code>linux</code> has today are:</p>
<ul>
<li><code>discard_ctl-&gt;kbps_limit = 0</code>: discard bytes/sec rate limit</li>
<li><code>discard_ctl-&gt;iops_limit = 10</code>: discard requests/sec rate limit</li>
<li><code>BTRFS_DISCARD_MIN_DELAY_MSEC = 1ms</code> to <code>BTRFS_DISCARD_MAX_DELAY_MSEC = 1s</code>:
allowed delay range between discards</li>
</ul>
<p>Some of the defaults can be changed at runtime. Just <code>echo</code> a new value
to <code>/sys/fs/btrfs/&lt;UUID&gt;/discard/iops_limit</code> or <code>kbps_limit</code>.</p>
<p>Some of the counter metrics in <code>/sys/fs/btrfs/&lt;UUID&gt;/discard/*</code> look
inaccurate.</p>
<p><code>perf ftrace</code> (and <code>perf trace</code>!) are nice tools to quickly peek at what
the kernel is doing right now.</p>
<p>Have fun!</p>]]></description>
    <pubDate>Sat, 04 Mar 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/281-a-signal-from-the-stars.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>
<item>
    <title>cooling failure</title>
    <link>http://trofi.github.io/posts/280-cooling-failure.html</link>
    <description><![CDATA[<p>About 2 years ago I got my new desktop. It’s a 16-core AMD CPU with
128GB RAM. My plan was to compile A Lot :)</p>
<p>I was not sure how much of a heat sink I need for that machine. My
previous CPU had about 125W power consumption and could get away with
a silent rotary air cooler.</p>
<p>This machine seems to dissipate up to 150W and I was not sure if it’s a
peak value or some average that I could consistently exceed with heavy
workloads.</p>
<p>I decided to give water cooling system a try for the first time. I
expected it to be less noisy compared to rotary air ones.</p>
<p>When my desktop just arrived I was surprised to see that water cooling
system used not just one but two fans! (And also two more system fans).</p>
<p>When I powered the machine up for the first time I heard a nice low
frequency humming noise. It went up a bit when I applied 100% CPU load
workloads. It was not not too distracting but a bit disappointing that I
can hear when the machine is under the load or not.</p>
<p>2 years passed. I compiled a lot and caught many bugs in various
software projects. I had no issue with the hardware.</p>
<p>And one day my machine just powered off abruptly. I powered it on again.
I ran for 2-3 minutes, and shut off again. I was not able to power it on
later without a 30-minute delay. Initially I though about failed PSU as
the system did not complain about anything up to the very shutdown.</p>
<p>Next day I managed to get into <code>EFI</code> menu to look at CPU statistics.
<code>EFI</code> dashboard rendered the menacing temperature graph: it went from
60 degrees to 110 for a span of 5 minutes. Once the degree got to 110
machine was shut off.</p>
<p>Now that looked like a CPU overheat.</p>
<p>Water cooling systems are a bit more involved that just a radiator with
a fan. My one looked like that:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/00-diagram.jpg" alt="diagram" />
<figcaption aria-hidden="true">diagram</figcaption>
</figure>
<p>Here dotted line is the water flow. Fans blow the air up right into the
system case ceiling where a few small holes let it out. The system fans
(not drawn in picture) blow new air in from the right and blow it out
from the left.</p>
<p>In hind sight I think the radiator was positioned incorrectly and it
ought to be mounted vertically to align with the rest of air flow it the
system.</p>
<p>This is how radiator top looks like:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/01-radiator.jpg" alt="radiator" />
<figcaption aria-hidden="true">radiator</figcaption>
</figure>
<p>And this is how it looks like when I flip it to show fans (the pump is
already unscrewed):</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/02-unscrewed-pump.jpg" alt="unscrewed pump" />
<figcaption aria-hidden="true">unscrewed pump</figcaption>
</figure>
<p>Here I pulled the rotary part of the pump. It’s a magnet in plastic
case. As I understand that way pump can be fully isolated from electric
wires and can be rotated by using just magnetic field:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/03-pulled-rotor.jpg" alt="pulled rotor" />
<figcaption aria-hidden="true">pulled rotor</figcaption>
</figure>
<p>If I screw pump back in here is how it’s wiring looks like: some kind of
epoxy covers most of wiring and electronics. As a result there is not
much to do unless we are to break that layer. I was not able to find the
replacement part in online shops. Looks special.</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/04-closer-pump.jpg" alt="closer pump" />
<figcaption aria-hidden="true">closer pump</figcaption>
</figure>
<p>Here is the heat sink: it applies to the CPU and has two tubes that come
out of it. It has the wire (probably to measure temperature) but
otherwise is passive. All the buzzing is expected to happen in the
hanging pump.</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/05-heatsink.jpg" alt="heat sink" />
<figcaption aria-hidden="true">heat sink</figcaption>
</figure>
<p>I was a bit disappointed by this cooling system and wanted to try
something simpler and more serviceable.</p>
<p>After a few day of fruitlessly trying to revive the pump I plugged this
thing instead:</p>
<figure>
<img src="http://trofi.github.io/posts.data/280-cooling-failure/06-air-cooler.jpg" alt="air cooler" />
<figcaption aria-hidden="true">air cooler</figcaption>
</figure>
<p>Now all the fans in the system blow the air right-to-left including the
CPU ones. <code>EFI</code> shows that CPU temperature dropped down to 30.</p>
<p>I can’t distinguish the sound of idle system from sound fully loaded
system. Both are very quiet. We’ll see how it will change in 2 years.</p>
<p>I wonder if I was very unlucky with this water cooler or it’s a more
general pattern.</p>]]></description>
    <pubDate>Sat, 25 Feb 2023 00:00:00 UT</pubDate>
    <guid>http://trofi.github.io/posts/280-cooling-failure.html</guid>
    <dc:creator>Sergei Trofimovich</dc:creator>
</item>

    </channel>
</rss>
